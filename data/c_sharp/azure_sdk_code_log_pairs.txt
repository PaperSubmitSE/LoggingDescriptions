['public void testomjobspecandrelease() {', 'action test = () => {', 'stagingstorageaccount stagingcreds = testutilities.getstoragecredentialsfromenvironment();', 'using (batchclient client = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jsid = "jobprepandrelease-" + /* "om-static-c" */ "dynamic-" + crafttimestring() + "-" + testutilities.getmyname();', 'try {', 'protocol.requestinterceptor increasetimeoutinterceptor = new protocol.requestinterceptor((x) => {']
['testomjobspecandrelease setting request timeout request type clientrequestid ', ['testoutputhelper', 'writeline', 'x', 'gettype', 'tostring', 'x', 'options', 'clientrequestid']]
azure_sdk sample_5810

['if (jpstatus == null) {', 'thread.sleep(2000);', '}', 'else {', 'if (jobpreparationtaskstate.completed == jpstatus.jobpreparationtaskexecutioninformation.state) {', 'prepnotcompleted = false;', 'assert.notnull(jpstatus.jobpreparationtaskexecutioninformation.failureinformation);', 'assert.equal(taskexecutionresult.failure, jpstatus.jobpreparationtaskexecutioninformation.result);', 'this.outputfailureinfo(jpstatus.jobpreparationtaskexecutioninformation.failureinformation);', '}']
['job prep is running waiting for blob dl to timeout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['resourcefile[] badresfiles = {new resourcefile("https: reltask.resourcefiles = badresfiles;', 'reltask.id = "jobrelease";', '}', 'unboundjob.commit();', '}', 'client.joboperations.addtask(jobid, new cloudtask("forcejobprep", "cmd /c echo testomjobreleaseschedulingerror"));', 'taskstatemonitor tsm = client.utilities.createtaskstatemonitor();', 'tsm.waitall( client.joboperations.listtasks(jobid), taskstate.completed, timespan.fromminutes(10), additionalbehaviors: new[]', '{', 'new protocol.requestinterceptor((x) => {']
['issuing request type ', ['testoutputhelper', 'writeline', 'x', 'gettype', 'tostring']]
azure_sdk sample_5810

['reltask.id = "jobrelease";', '}', 'unboundjob.commit();', '}', 'client.joboperations.addtask(jobid, new cloudtask("forcejobprep", "cmd /c echo testomjobreleaseschedulingerror"));', 'taskstatemonitor tsm = client.utilities.createtaskstatemonitor();', 'tsm.waitall( client.joboperations.listtasks(jobid), taskstate.completed, timespan.fromminutes(10), additionalbehaviors: new[]', '{', 'new protocol.requestinterceptor((x) => {', 'list<computenode> allcomputenodes = client.pooloperations.listcomputenodes(this.poolfixture.poolid).tolist();']
['compute nodes ', ['testoutputhelper', 'writeline', 'allcomputenodes', 'count']]
azure_sdk sample_5810

['}', 'unboundjob.commit();', '}', 'client.joboperations.addtask(jobid, new cloudtask("forcejobprep", "cmd /c echo testomjobreleaseschedulingerror"));', 'taskstatemonitor tsm = client.utilities.createtaskstatemonitor();', 'tsm.waitall( client.joboperations.listtasks(jobid), taskstate.completed, timespan.fromminutes(10), additionalbehaviors: new[]', '{', 'new protocol.requestinterceptor((x) => {', 'list<computenode> allcomputenodes = client.pooloperations.listcomputenodes(this.poolfixture.poolid).tolist();', 'allcomputenodes.foreach((icn) => {']
['computenode id state ', ['testoutputhelper', 'writeline', 'icn', 'id', 'icn', 'state']]
azure_sdk sample_5810

['if (prepandreleasestatus != null && null != prepandreleasestatus.jobreleasetaskexecutioninformation) {', 'if (jobreleasetaskstate.completed == prepandreleasestatus.jobreleasetaskexecutioninformation.state) {', 'releasenotcompleted = false;', 'assert.notnull(prepandreleasestatus);', 'assert.notnull(prepandreleasestatus.jobreleasetaskexecutioninformation.failureinformation);', 'assert.equal(taskexecutionresult.failure, prepandreleasestatus.jobreleasetaskexecutioninformation.result);', 'this.outputfailureinfo(prepandreleasestatus.jobreleasetaskexecutioninformation.failureinformation);', '}', '}', 'thread.sleep(2000);']
['job release tasks still running waiting for blob dl to timeout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['#region private helpers private void testgetprepreleasestatuscalls(batchclient batchcli, cloudjobschedule boundjobschedule, string sharedpool, ienumerable<resourcefile> correctresfiles) {', 'string jobid = boundjobschedule.executioninformation.recentjob.id;', 'pooloperations poolops = batchcli.pooloperations;', 'jobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;', '{', 'datetime beforejobprepruns = datetime.utcnow;', 'cloudtask sillytask = new cloudtask("forcejobprep", "cmd /c hostname");', 'batchcli.joboperations.addtask(jobid, sillytask);', 'bool keeplooking = true;', 'while (keeplooking) {']
['waiting for task to be scheduled ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['jobprepstatuslist = batchcli.joboperations.listjobpreparationandreleasetaskstatus(jobid).tolist();', '}', 'jobpreparationandreleasetaskexecutioninformation jptei = jobprepstatuslist.first();', 'computenode victimcomputenoderunningprepandrelease = poolops.getcomputenode(sharedpool, jptei.computenodeid);', '{', 'assert.notnull(jptei);', 'assert.equal(0, jptei.jobpreparationtaskexecutioninformation.retrycount);', 'assert.true(beforejobprepruns < jptei.jobpreparationtaskexecutioninformation.starttime + timespan.fromseconds(10));', 'assert.null(jptei.jobpreparationtaskexecutioninformation.failureinformation);', 'this.testoutputhelper.writeline("");']
['listing files for compute node ', ['testoutputhelper', 'writeline', 'victimcomputenoderunningprepandrelease', 'id']]
azure_sdk sample_5810

['computenode victimcomputenoderunningprepandrelease = poolops.getcomputenode(sharedpool, jptei.computenodeid);', '{', 'assert.notnull(jptei);', 'assert.equal(0, jptei.jobpreparationtaskexecutioninformation.retrycount);', 'assert.true(beforejobprepruns < jptei.jobpreparationtaskexecutioninformation.starttime + timespan.fromseconds(10));', 'assert.null(jptei.jobpreparationtaskexecutioninformation.failureinformation);', 'this.testoutputhelper.writeline("");', 'list<nodefile> filteredlistjobprep = new list<nodefile>();', 'foreach (nodefile curtf in victimcomputenoderunningprepandrelease.listnodefiles(recursive: true)) {', 'if (curtf.path.indexof(boundjobschedule.id, stringcomparison.invariantcultureignorecase) >= 0) {']
['name size dir ', ['testoutputhelper', 'writeline', 'curtf', 'path', 'curtf', 'isdirectory', 'hasvalue', 'curtf', 'isdirectory', 'value', 'curtf', 'properties', 'contentlength', 'tostring']]
azure_sdk sample_5810

['}', '}', 'foreach (resourcefile curcorrectrf in correctresfiles) {', 'bool found = false;', 'foreach (nodefile curtf in filteredlistjobprep) {', 'found |= curtf.path.indexof(curcorrectrf.filepath, stringcomparison.invariantcultureignorecase) >= 0;', '}', 'assert.true(found, "looking for resourcefile: " + curcorrectrf.filepath);', '}', 'while (jobpreparationtaskstate.completed != jptei.jobpreparationtaskexecutioninformation.state) {']
['waiting for jopprep to complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['}', 'catch (exception) {', '}', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'assert.true(!string.isnullorwhitespace(stdout));', 'assert.contains("jobpreparation", stdout.tolower());', '}', 'taskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();', 'protocol.requestinterceptor consolespammer = new protocol.requestinterceptor((x) => {']
['testgetprepreleasestatuscalls waiting for jobprep and task to complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'assert.true(!string.isnullorwhitespace(stdout));', 'assert.contains("jobpreparation", stdout.tolower());', '}', 'taskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();', 'protocol.requestinterceptor consolespammer = new protocol.requestinterceptor((x) => {', 'odatadetaillevel detaillevel = new odatadetaillevel() { filterclause = string.format("nodeid eq \'{0}\'", victimcomputenoderunningprepandrelease.id) };', 'jobprepstatuslist = batchcli.joboperations.listjobpreparationandreleasetaskstatus(jobid, detaillevel: detaillevel).tolist();', 'jobpreparationandreleasetaskexecutioninformation jpteiinterceptor = jobprepstatuslist.first();']
['jobprep state ', ['state']]
azure_sdk sample_5810

['while (true) {', 'odatadetaillevel detaillevel = new odatadetaillevel() { filterclause = string.format("nodeid eq \'{0}\'", victimcomputenoderunningprepandrelease.id) };', 'jobprepstatuslist = batchcli.joboperations.listjobpreparationandreleasetaskstatus(jobid, detaillevel: detaillevel).tolist();', 'jobpreparationandreleasetaskexecutioninformation jrtei = jobprepstatuslist.firstordefault();', 'if ((jrtei == null) || (null == jrtei.jobreleasetaskexecutioninformation)) {', 'thread.sleep(2000);', '}', 'else {', 'assert.notnull(jrtei);', 'if (jrtei.jobreleasetaskexecutioninformation.state != jobreleasetaskstate.completed) {']
['jobreleasetask state is ', ['state']]
azure_sdk sample_5810

['jobpreparationandreleasetaskexecutioninformation jrtei = jobprepstatuslist.firstordefault();', 'if ((jrtei == null) || (null == jrtei.jobreleasetaskexecutioninformation)) {', 'thread.sleep(2000);', '}', 'else {', 'assert.notnull(jrtei);', 'if (jrtei.jobreleasetaskexecutioninformation.state != jobreleasetaskstate.completed) {', 'thread.sleep(5000);', '}', 'else {']
['jobrelease commpleted ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['}', 'private static ilist<resourcefile> uploadfilesmakeresfiles(stagingstorageaccount stagingcreds) {', 'cloudtask mytask = new cloudtask(id: "countwordstask", commandline: @"cmd /c dir /s .. & dir & type localwords.txt");', 'filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingcreds);', 'mytask.filestostage = new list<ifilestagingprovider>();', 'mytask.filestostage.add(wordsdottext);', 'mytask.stagefiles();', 'return mytask.resourcefiles;', '}', 'private void outputfailureinfo(taskfailureinformation failureinfo) {']
['jp failure info ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5810

['}', 'private static ilist<resourcefile> uploadfilesmakeresfiles(stagingstorageaccount stagingcreds) {', 'cloudtask mytask = new cloudtask(id: "countwordstask", commandline: @"cmd /c dir /s .. & dir & type localwords.txt");', 'filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingcreds);', 'mytask.filestostage = new list<ifilestagingprovider>();', 'mytask.filestostage.add(wordsdottext);', 'mytask.stagefiles();', 'return mytask.resourcefiles;', '}', 'private void outputfailureinfo(taskfailureinformation failureinfo) {']
['category ', ['category']]
azure_sdk sample_5810

['}', 'private static ilist<resourcefile> uploadfilesmakeresfiles(stagingstorageaccount stagingcreds) {', 'cloudtask mytask = new cloudtask(id: "countwordstask", commandline: @"cmd /c dir /s .. & dir & type localwords.txt");', 'filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingcreds);', 'mytask.filestostage = new list<ifilestagingprovider>();', 'mytask.filestostage.add(wordsdottext);', 'mytask.stagefiles();', 'return mytask.resourcefiles;', '}', 'private void outputfailureinfo(taskfailureinformation failureinfo) {']
['code ', ['code']]
azure_sdk sample_5810

['filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingcreds);', 'mytask.filestostage = new list<ifilestagingprovider>();', 'mytask.filestostage.add(wordsdottext);', 'mytask.stagefiles();', 'return mytask.resourcefiles;', '}', 'private void outputfailureinfo(taskfailureinformation failureinfo) {', 'this.testoutputhelper.writeline("    details:" + (null == failureinfo.details ? " <null>" : string.empty));', 'if (null != failureinfo.details) {', 'foreach (namevaluepair curdetail in failureinfo.details) {']
['name value ', ['testoutputhelper', 'writeline', 'curdetail', 'name', 'curdetail', 'value']]
azure_sdk sample_5810

['mytask.filestostage.add(wordsdottext);', 'mytask.stagefiles();', 'return mytask.resourcefiles;', '}', 'private void outputfailureinfo(taskfailureinformation failureinfo) {', 'this.testoutputhelper.writeline("    details:" + (null == failureinfo.details ? " <null>" : string.empty));', 'if (null != failureinfo.details) {', 'foreach (namevaluepair curdetail in failureinfo.details) {', '}', '}']
['message ', ['message']]
azure_sdk sample_5810

['private void keymustthrowargumentexception( string paramname, jsonwebkey key ) {', 'var serialized = key.tostring();', 'try {', 'var deserialized = jsonconvert.deserializeobject<jsonwebkey>( serialized );', 'assert.equal( key, deserialized );', '}', 'catch ( targetinvocationexception ex ) {']
['warning key with bad value on can be serialized but not deserialized ', ['writeline', 'string', 'format', 'paramname', 'ex', 'message']]
azure_sdk sample_2122

['public static void emitvariable( string collectionname, int keysize, jsonwebkey key ) {', 'var text = key.tostring();', 'text = text.replace( "\\"", "\\\\\\"" );', 'text = text.replace( "\\r\\n", "\\\\r\\\\n" );']
['add ', ['writeline', 'collectionname', 'keysize', 'text']]
azure_sdk sample_2122

['public async task bug1360227_addtasksbatchfailure(bool usejoboperations) {', 'const string testname = "bug1360227_addtasksbatchfailure";', 'int count = 0;', 'const int counttofailat = 102;', 'const int taskcount = 407;', 'hashset<string> taskidsexpectedtofail = new hashset<string>();', 'func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {']
['task got status code ', ['testoutputhelper', 'writeline', 'result', 'taskid', 'result', 'status']]
azure_sdk sample_5795

['const int taskcount = 407;', 'hashset<string> taskidsexpectedtofail = new hashset<string>();', 'func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {', '++count;', 'if (taskidsexpectedtofail.contains(result.taskid)) {', 'return addtaskresultstatus.retry;', '}', 'else {', 'if (count >= counttofailat) {', 'taskidsexpectedtofail.add(result.taskid);']
['forcing a failure ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5795

['public async task bug1360227_addtasksbatchretry(bool usejoboperations) {', 'const string testname = "bug1360227_addtasksbatchretry";', 'random rand = new random();', 'object randlock = new object();', 'int numberoftaskswhichhitclienterror = 0;', 'int numberoftaskswhichwereforcedtoretry = 0;', 'func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {']
['task got status code ', ['testoutputhelper', 'writeline', 'result', 'taskid', 'result', 'status']]
azure_sdk sample_5795

['int numberoftaskswhichwereforcedtoretry = 0;', 'func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {', 'addtaskresultstatus resultaction;', 'if (result.status == addtaskstatus.clienterror) {', '++numberoftaskswhichhitclienterror;', 'return addtaskresultstatus.success;', '}', 'lock (randlock) {', 'double d = rand.nextdouble();', 'if (d > 0.8) {']
['forcing retry for task ', ['testoutputhelper', 'writeline', 'result', 'taskid']]
azure_sdk sample_5795

['return resultaction;', '};', 'await synchronizationcontexthelper.runtestasync(async () => {', 'stagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();', 'using (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {', 'batchclientparalleloptions paralleloptions = new batchclientparalleloptions() {', 'maxdegreeofparallelism = 2 };', 'await this.addtaskssimpletestasync( batchcli, testname, 1281, paralleloptions, resulthandlerfunc, storagecredentials, new list<string> { "testresources\\\\data.txt" }, usejoboperations: usejoboperations).configureawait(false);', '}', '}, longtesttimeout);']
['forced a total of tasks to retry ', ['testoutputhelper', 'writeline', 'numberoftaskswhichwereforcedtoretry']]
azure_sdk sample_5795

['public async task bug1360227_addtasksbatchcancelation(bool usejoboperations) {', 'const string testname = "bug1360227_addtasksbatchcancelation";', 'const int taskcount = 322;', 'await synchronizationcontexthelper.runtestasync(async () => {', 'using (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {', 'using (cancellationtokensource source = new cancellationtokensource()) {', 'batchclientparalleloptions paralleloptions = new batchclientparalleloptions() {', 'maxdegreeofparallelism = 2, cancellationtoken = source.token };', 'system.threading.tasks.task t = this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions, usejoboperations: usejoboperations);', 'thread.sleep(timespan.fromseconds(.3));']
['canceling the work flow ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5795

['legartifactscountlist.add(artifacts.count);', 'thread.sleep(timespan.fromseconds(1));', '}', '});', 'await synchronizationcontexthelper.runtestasync(async () => {', 'stagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();', 'using (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {', 'await this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions: new batchclientparalleloptions() { maxdegreeofparallelism = 2 }, storagecredentials: storagecredentials, localfilestostage: localfilestostage, filestagingartifacts: artifacts, usejoboperations: usejoboperations).configureawait(false);', 'cts.cancel();', 'await t.configureawait(false);']
['file staging leg count ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5795

['private async system.threading.tasks.task addtaskssimpletestasync( batchclient batchcli, string testname, int taskcount, batchclientparalleloptions paralleloptions = null, func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = null, stagingstorageaccount storagecredentials = null, ienumerable<string> localfilestostage = null, concurrentbag<concurrentdictionary<type, ifilestagingartifact>> filestagingartifacts = null, timespan? timeout = null, bool usejoboperations = true) {', 'joboperations joboperations = batchcli.joboperations;', 'string jobid = "bulk-" + testutilities.getmyname() + "-" + testname + "-" + usejoboperations;', 'try {', 'cloudjob unboundjob = joboperations.createjob();']
['initial job commit for job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5795

['}', '}', 'taskstoadd.add(mytask);', 'taskstovalidatewith.add(duplicatereadabletask);', '}', 'list<batchclientbehavior> behaviors = new list<batchclientbehavior>();', 'if (resulthandlerfunc != null) {', 'behaviors.add(new addtaskcollectionresulthandler(resulthandlerfunc));', '}', 'stopwatch stopwatch = new stopwatch();']
['starting task add ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5795

['}', 'stopwatch stopwatch = new stopwatch();', 'stopwatch.start();', 'if (usejoboperations) {', 'await joboperations.addtaskasync( jobid, taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'else {', 'await boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'stopwatch.stop();']
['task add finished took ', ['testoutputhelper', 'writeline', 'stopwatch', 'elapsed']]
azure_sdk sample_5795

['await boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'stopwatch.stop();', 'if (lastfilestostagelist != null) {', 'testutilities.assertthrows<invalidoperationexception>(() => lastfilestostagelist.add(new filetostage("test", null)));', '}', 'list<cloudtask> tasksfromservice = await joboperations.listtasks(jobid).tolistasync().configureawait(false);', 'ensuretaskslistsmatch(taskstovalidatewith, tasksfromservice);', '}', 'catch (exception e) {']
['exception ', ['testoutputhelper', 'writeline', 'e', 'tostring']]
azure_sdk sample_5795

['protected task removenode(servermanagementclient client, string nodename) {', 'try {']
['removing node ', ['string', 'format', 'resourcegroup', 'nodename']]
azure_sdk sample_7882

['protected async task removegateway(servermanagementclient client, string gatewayname) {', 'try {']
['removing gateway ', ['string', 'format', 'resourcegroup', 'gatewayname']]
azure_sdk sample_7882

['assert.true(boundpool.autoscaleenabled.hasvalue);', 'assert.true(boundpool.autoscaleenabled.value);', 'assert.equal(poolasformulaorig, boundpool.autoscaleformula);', 'autoscalerun eval = boundpool.evaluateautoscale(poolasformula2);', 'assert.contains(poolasformula2, eval.results);', 'boundpool.disableautoscale();', 'boundpool.refresh();', 'assert.true(boundpool.autoscaleenabled.hasvalue);', 'assert.false(boundpool.autoscaleenabled.value);', 'while (allocationstate.steady != boundpool.allocationstate) {']
['waiting for pool to be steady before enableautoscale call ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5804

['public void testpoolobjectresizestopresize() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string poolid = "testpoolobjectresizestopresize" + testutilities.getmyname();', 'const int targetdedicated = 0;', 'const int newtargetdedicated = 1;', 'try {', 'cloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);', 'pool.commit();']
['created pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5804

['cloudpool boundpool = batchcli.pooloperations.getpool(poolid);', 'boundpool.enableautoscale(autoscaleformula1);', 'datetime utcearliestcancallenableasagain = datetime.utcnow + enableautoscaleminimumdelay;', 'boundpool.refresh();', 'assert.true(boundpool.autoscaleenabled);', 'assert.equal(autoscaleformula1, boundpool.autoscaleformula);', 'assert.notnull(boundpool.autoscalerun);', 'assert.notnull(boundpool.autoscalerun.results);', 'assert.contains(autoscaleformula1, boundpool.autoscalerun.results);', 'autoscalerun evaluation = boundpool.evaluateautoscale(evaluateautoscaleformula);']
['autoscale evaluate results ', ['testoutputhelper', 'writeline', 'evaluation', 'results']]
azure_sdk sample_5804

['thread.sleep(delaybeforenextenableascall);', '}', 'batchcli.pooloperations.enableautoscale(poolid, autoscaleformula2);', 'boundpool.refresh();', 'assert.true(boundpool.autoscaleenabled);', 'assert.equal(autoscaleformula2, boundpool.autoscaleformula);', 'assert.notnull(boundpool.autoscalerun);', 'assert.notnull(boundpool.autoscalerun.results);', 'assert.contains(autoscaleformula2, boundpool.autoscalerun.results);', 'evaluation = batchcli.pooloperations.evaluateautoscale(poolid, evaluateautoscaleformula);']
['autoscale evaluate results ', ['testoutputhelper', 'writeline', 'evaluation', 'results']]
azure_sdk sample_5804

['public void longrunning_removepoolcomputenodesresizetimeout_resizeerrorspopulated() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string poolid = "bug2251050_testremovecomputenodesresizetimeout_lr" + testutilities.getmyname();', 'string jobid = "bug2251050job-" + testutilities.getmyname();', 'const int targetdedicated = 2;', 'try {', 'cloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);', 'pool.commit();']
['created pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5804

['taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( batchcli.joboperations.listtasks(jobid), microsoft.azure.batch.common.taskstate.running, timespan.fromminutes(20));', 'timespan resizetimeout = timespan.fromminutes(5);', 'batchcli.pooloperations.removefrompool(poolid, computenodes, computenodedeallocationoption.taskcompletion, resizetimeout);', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(6)).wait();', 'refreshablepool.refresh();', 'assert.notnull(refreshablepool.resizeerrors);', 'assert.equal(1, refreshablepool.resizeerrors.count);', 'var resizeerror = refreshablepool.resizeerrors.single();', 'assert.equal(poolresizeerrorcodes.allocationtimedout, resizeerror.code);']
['resize error ', ['message']]
azure_sdk sample_5804

['public void longrunning_testremovepoolcomputenodes() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string poolid = "testremovepoolcomputenodes_longrunning" + testutilities.getmyname();', 'const int targetdedicated = 3;', 'try {', 'cloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);', 'pool.commit();']
['created pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5804

['cloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);', 'pool.commit();', 'cloudpool refreshablepool = batchcli.pooloperations.getpool(poolid);', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'refreshablepool.refresh();', 'assert.equal(targetdedicated, refreshablepool.currentdedicatedcomputenodes);', 'ienumerable<computenode> computenodes = refreshablepool.listcomputenodes();', 'assert.equal(targetdedicated, computenodes.count());', 'computenode computenodetoremove = computenodes.first();', 'assert.null(computenodetoremove.starttask);']
['will remove compute node ', ['testoutputhelper', 'writeline', 'computenodetoremove', 'id']]
azure_sdk sample_5804

['assert.null(computenodetoremove.starttask);', 'refreshablepool.removefrompool(computenodetoremove);', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'refreshablepool.refresh();', 'list<computenode> computenodesafterremove = refreshablepool.listcomputenodes().tolist();', 'assert.equal(targetdedicated - 1, computenodesafterremove.count);', 'list<string> remainingcomputenodeids = computenodesafterremove.select(computenode => computenode.id).tolist();', 'foreach (computenode originalcomputenode in computenodes) {', 'assert.contains(originalcomputenode.id, remainingcomputenodeids);', '}']
['verified that the compute node was removed correctly ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5804

['foreach (computenode originalcomputenode in computenodes) {', 'assert.contains(originalcomputenode.id, remainingcomputenodeids);', '}', 'computenode secondcomputenodetoremove = computenodesafterremove.first();', 'string secondcomputenodetoremoveid = secondcomputenodetoremove.id;', 'refreshablepool.removefrompool(secondcomputenodetoremoveid);', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'refreshablepool.refresh();', 'computenodesafterremove = refreshablepool.listcomputenodes().tolist();', 'assert.equal(targetdedicated - 2, computenodesafterremove.count);']
['verified that the compute node was removed correctly ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5804

['}', 'computenode secondcomputenodetoremove = computenodesafterremove.first();', 'string secondcomputenodetoremoveid = secondcomputenodetoremove.id;', 'refreshablepool.removefrompool(secondcomputenodetoremoveid);', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'refreshablepool.refresh();', 'computenodesafterremove = refreshablepool.listcomputenodes().tolist();', 'assert.equal(targetdedicated - 2, computenodesafterremove.count);', 'computenode thirdcomputenodetoremove = computenodesafterremove.first();', 'string thirdcomputenodetoremoveid = thirdcomputenodetoremove.id;']
['will remove compute node ', ['testoutputhelper', 'writeline', 'thirdcomputenodetoremoveid']]
azure_sdk sample_5804

['testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'refreshablepool.refresh();', 'computenodesafterremove = refreshablepool.listcomputenodes().tolist();', 'assert.equal(targetdedicated - 2, computenodesafterremove.count);', 'computenode thirdcomputenodetoremove = computenodesafterremove.first();', 'string thirdcomputenodetoremoveid = thirdcomputenodetoremove.id;', 'thirdcomputenodetoremove.removefrompool();', 'testutilities.waitforpooltoreachstateasync(batchcli, poolid, allocationstate.steady, timespan.fromminutes(10)).wait();', 'computenodesafterremove = refreshablepool.listcomputenodes().tolist();', 'assert.equal(targetdedicated - 3, computenodesafterremove.count);']
['verified that the computenode was removed correctly ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5804

['public async task longrunning_lowprioritycomputenodeallocated_isdedicatedfalse() {', 'func<task> test = async () => {', 'using (batchclient batchcli = await testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment())) {', 'string poolid = "testlowpri_longrunning" + testutilities.getmyname();', 'const int targetlowpriority = 1;', 'try {', 'cloudpool pool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetlowprioritycomputenodes: targetlowpriority);', 'await pool.commitasync().configureawait(false);']
['created pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {']
['nas ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {']
['skuid ', ['testoutputhelper', 'writeline', 'curnas', 'id']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {']
['ostype ', ['testoutputhelper', 'writeline', 'curnas', 'ostype']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {', 'foreach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {']
['verifiedimagerefs publisher ', ['testoutputhelper', 'writeline', 'verifiedimagereference', 'publisher']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {', 'foreach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {']
['verifiedimagerefs offer ', ['testoutputhelper', 'writeline', 'verifiedimagereference', 'offer']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {', 'foreach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {']
['verifiedimagerefs sku ', ['testoutputhelper', 'writeline', 'verifiedimagereference', 'sku']]
azure_sdk sample_5804

['public void listnodeagentskus() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'var nas = batchcli.pooloperations.listnodeagentskus().tolist();', 'assert.true(nas.count > 0);', 'foreach (nodeagentsku curnas in nas) {', 'foreach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {']
['verifiedimagerefs version ', ['testoutputhelper', 'writeline', 'verifiedimagereference', 'version']]
azure_sdk sample_5804

['public static void deletejobifexistsnothrow(batchserviceclient client, string jobid, itestoutputhelper output) {', 'try {', 'client.job.delete(jobid);', '}', 'catch (batcherrorexception e) {']
['job failed to delete ', ['writeline', 'e']]
azure_sdk sample_5791

['public static void deletepoolifexistsnothrow(batchserviceclient client, string poolid, itestoutputhelper output) {', 'try {', 'client.pool.delete(poolid);', '}', 'catch (batcherrorexception e) {']
['pool failed to delete ', ['writeline', 'e']]
azure_sdk sample_5791

['public override bool execute() {', 'try {', 'strongnameutility utility = new strongnameutility();', 'if (!utility.validatestrongnametoolexistance(windowssdkpath)) {']
['the strong name tool sn exe could not be located within the windows sdk directory structure ', ['windowssdkpath']]
azure_sdk sample_10

['try {', 'strongnameutility utility = new strongnameutility();', 'if (!utility.validatestrongnametoolexistance(windowssdkpath)) {', 'return false;', '}', 'string path = assembly.itemspec;', 'string output;', 'string arguments = "-q -t \\"" + path + "\\"";', 'bool success = utility.execute(arguments, out output);', 'if (!success) {']
['the assembly path has not been strong named signed ', []]
azure_sdk sample_10

['bool success = utility.execute(arguments, out output);', 'if (!success) {', 'log.logerror(output);', 'return false;', '}', "int lastspace = output.lastindexof(' ');", 'if (lastspace >= 0) {', 'output = output.substring(lastspace + 1).trim();', '}', 'if (output != expectedtokensignature) {']
['the assembly had the strong name token of but was expected to have the token ', ['path', 'output', 'expectedtokensignature']]
azure_sdk sample_10

['new filetostage(resources.localwordsdottext, storagecreds) };', 'var artifacts = boundjob.addtask(mytask);', 'var specificartifact = artifacts[typeof(filetostage)];', 'sequentialfilestagingartifact sfsa = specificartifact as sequentialfilestagingartifact;', 'assert.notnull(sfsa);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {']
['issuing request type ', ['testoutputhelper', 'writeline', 'x', 'gettype', 'tostring']]
azure_sdk sample_5706

['var specificartifact = artifacts[typeof(filetostage)];', 'sequentialfilestagingartifact sfsa = specificartifact as sequentialfilestagingartifact;', 'assert.notnull(sfsa);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {', 'try {', 'list<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();']
['compute nodes ', ['testoutputhelper', 'writeline', 'allcomputenodes', 'count']]
azure_sdk sample_5706

['sequentialfilestagingartifact sfsa = specificartifact as sequentialfilestagingartifact;', 'assert.notnull(sfsa);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {', 'try {', 'list<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();', 'allcomputenodes.foreach( (icn) => {']
['computenode id state ', ['testoutputhelper', 'writeline', 'icn', 'id', 'icn', 'state']]
azure_sdk sample_5706

['allcomputenodes.foreach( (icn) => {', '});', '}', 'catch (exception ex) {', 'assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {']
['task id state ', ['testoutputhelper', 'writeline', 'curtask', 'id', 'curtask', 'state']]
azure_sdk sample_5706

['}', 'catch (exception ex) {', 'assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();']
['pool id state ', ['testoutputhelper', 'writeline', 'boundpool', 'id', 'boundpool', 'state']]
azure_sdk sample_5706

['assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5706

['}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5706

['}) });', 'list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);']
['task files ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5706

['list<cloudtask> tasks = boundjob.listtasks().tolist();', 'cloudtask mycompletedtask = tasks.single();', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'foreach (nodefile curfile in mycompletedtask.listnodefiles(recursive: true)) {']
['file path ', ['testoutputhelper', 'writeline', 'curfile', 'path']]
azure_sdk sample_5706

['while (!cts.token.iscancellationrequested) {', 'legartifactscountlist.add(artifacts.count);', 'thread.sleep(timespan.fromseconds(1));', '}', '});', 'stagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();', 'using (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {', 'await this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions: new batchclientparalleloptions() { maxdegreeofparallelism = 2 }, resulthandlerfunc: null, storagecredentials: storagecredentials, localfilestostage: localfilestostage, filestagingartifacts: artifacts, usejoboperations: usejoboperations).configureawait(false);', 'cts.cancel();', 'await t.configureawait(false);']
['file staging leg count ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5706

['private async system.threading.tasks.task addtaskssimpletestasync( batchclient batchcli, string testname, int taskcount, batchclientparalleloptions paralleloptions, func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc, stagingstorageaccount storagecredentials, ienumerable<string> localfilestostage, concurrentbag<concurrentdictionary<type, ifilestagingartifact>> filestagingartifacts = null, timespan? timeout = null, bool usejoboperations = true) {', 'joboperations joboperations = batchcli.joboperations;', 'string jobid = "bulk-" + testutilities.getmyname() + "-" + testname + "-" + usejoboperations;', 'try {', 'cloudjob unboundjob = joboperations.createjob();']
['initial job commit for job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5706

['}', '}', 'taskstoadd.add(mytask);', 'taskstovalidatewith.add(duplicatereadabletask);', '}', 'list<batchclientbehavior> behaviors = new list<batchclientbehavior>();', 'if (resulthandlerfunc != null) {', 'behaviors.add(new addtaskcollectionresulthandler(resulthandlerfunc));', '}', 'stopwatch stopwatch = new stopwatch();']
['starting task add ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5706

['}', 'stopwatch stopwatch = new stopwatch();', 'stopwatch.start();', 'if (usejoboperations) {', 'await joboperations.addtaskasync( jobid, taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'else {', 'await boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'stopwatch.stop();']
['task add finished took ', ['testoutputhelper', 'writeline', 'stopwatch', 'elapsed']]
azure_sdk sample_5706

['await boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);', '}', 'stopwatch.stop();', 'if (lastfilestostagelist != null) {', 'assert.throws<invalidoperationexception>(() => lastfilestostagelist.add(new filetostage("test", null)));', '}', 'list<cloudtask> tasksfromservice = await joboperations.listtasks(jobid).tolistasync().configureawait(false);', 'ensuretaskslistsmatch(taskstovalidatewith, tasksfromservice);', '}', 'catch (exception e) {']
['exception ', ['testoutputhelper', 'writeline', 'e', 'tostring']]
azure_sdk sample_5706

['public async task testcertificateverbs() {', 'func<task> test = async () => {', 'using (batchclient batchcli = await testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment())) {', 'const string certificateprefix = "testcertificatecrud";', 'string cerfilepath = integrationtestcommon.gettemporarycertificatefilepath(string.format("{0}.cer", certificateprefix));', 'string pfxfilepath = integrationtestcommon.gettemporarycertificatefilepath(string.format("{0}.pfx", certificateprefix));', 'ienumerable<certificate> certificates = generatecertificates(batchcli, cerfilepath, pfxfilepath);', 'try {', 'foreach (certificate certificate in certificates) {']
['adding certificate with thumbprint ', ['testoutputhelper', 'writeline', 'certificate', 'thumbprint']]
azure_sdk sample_5801

['public async task testpoolcertificatereferenceswithupdate() {', 'func<task> test = async () => {', 'using (batchclient batchcli = await testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment())) {', 'const string certificateprefix = "poolwithcertificatereferences";', 'string cerfilepath = integrationtestcommon.gettemporarycertificatefilepath(string.format("{0}.cer", certificateprefix));', 'string pfxfilepath = integrationtestcommon.gettemporarycertificatefilepath(string.format("{0}.pfx", certificateprefix));', 'ienumerable<certificate> certificates = generatecertificates(batchcli, cerfilepath, pfxfilepath);', 'try {', 'foreach (certificate certificate in certificates) {']
['adding certificate with thumbprint ', ['testoutputhelper', 'writeline', 'certificate', 'thumbprint']]
azure_sdk sample_5801

['else {', 'sdkprojects = projutil.getscopedsdkprojects(buildscope);', 'testprojects = projutil.getscopedtestprojects(buildscope);', '}', 'allprojects.addrange(sdkprojects);', 'allprojects.addrange(testprojects);', 'concurrentbag<sdkprojectmetadata> projwithmetadata = new concurrentbag<sdkprojectmetadata>();', 'var projtimebefore = datetime.now;', 'projwithmetadata = getprojectdata(allprojects, projwithmetadata);', 'var projtimeafter = datetime.now;']
['parsing projects took ', ['writeline', 'projtimeafter', 'projtimebefore', 'totalseconds', 'tostring']]
azure_sdk sample_6

['public void testhandcodedenumsmatchswaggergeneratedenums() {', 'typeinfo arbitraryhandcraftedenum = typeof(jobstate).gettypeinfo();', 'string handcraftedenumnamespace = arbitraryhandcraftedenum.namespace;', 'list<type> enumtypes = arbitraryhandcraftedenum.assembly.gettypes().where(t => t.gettypeinfo().isenum && t.namespace == handcraftedenumnamespace).tolist();', 'typeinfo arbitrarygeneratedenum = typeof(protocol.models.jobstate).gettypeinfo();', 'string generatedenumnamespace = arbitrarygeneratedenum.namespace;', 'list<type> generatedenumtypes = arbitrarygeneratedenum.assembly.gettypes().where(t => t.gettypeinfo().isenum && t.namespace == generatedenumnamespace).tolist();']
['generated types ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6441

['typeinfo arbitraryhandcraftedenum = typeof(jobstate).gettypeinfo();', 'string handcraftedenumnamespace = arbitraryhandcraftedenum.namespace;', 'list<type> enumtypes = arbitraryhandcraftedenum.assembly.gettypes().where(t => t.gettypeinfo().isenum && t.namespace == handcraftedenumnamespace).tolist();', 'typeinfo arbitrarygeneratedenum = typeof(protocol.models.jobstate).gettypeinfo();', 'string generatedenumnamespace = arbitrarygeneratedenum.namespace;', 'list<type> generatedenumtypes = arbitrarygeneratedenum.assembly.gettypes().where(t => t.gettypeinfo().isenum && t.namespace == generatedenumnamespace).tolist();', 'foreach (type generatedenumtype in generatedenumtypes) {', 'this.testoutputhelper.writeline(generatedenumtype.tostring());', '}', 'this.testoutputhelper.writeline("");']
['handcrafted types ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6441

['using (mockcontext context = mockcontext.start(this.gettype().fullname)) {', 'var resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);', 'var networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);', 'var location = networkmanagementtestutilities.getresourcelocation(resourcesclient, "microsoft.network/virtualnetworkgateways");', 'string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['"192.168.0.0/16", }', '}, bgpsettings = new bgpsettings() {', 'asn = 1234, bgppeeringaddress = "192.168.0.1", peerweight = 3 }', '};', 'var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {', 'id = nic1publicip.id }, subnet = new subresource() {', 'id = getsubnetresponse.id }', '}', '}, sku = new virtualnetworkgatewaysku() {', 'name = "standard", tier = "standard" }, bgpsettings = new bgpsettings() {', 'asn = 1337, bgppeeringaddress = null, peerweight = 5 }', '};', 'var putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);']
['virtual network gateway is deployed successfully ', ['writeline']]
azure_sdk sample_3235

['addressprefixes = new list<string>() {', '"192.168.0.0/16", }', '}', '};', 'var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['new virtualnetworkgatewayipconfiguration() {', 'name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {', 'id = nic1publicip.id }, subnet = new subresource() {', 'id = getsubnetresponse.id }', '}', '}, sku = new virtualnetworkgatewaysku() {', 'name = virtualnetworkgatewayskuname.standard, tier = virtualnetworkgatewayskutier.standard }', '};', 'var putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);']
['virtual network gateway is deployed successfully ', ['writeline']]
azure_sdk sample_3235

['addressprefixes = new list<string>() {', '"192.168.0.0/16", }', '}', '};', 'var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['id = getlocalnetworkgatewayresponse.id }, gatewaytype = virtualnetworkgatewaytype.vpn, vpntype = vpntype.routebased, ipconfigurations = new list<virtualnetworkgatewayipconfiguration>() {', 'new virtualnetworkgatewayipconfiguration() {', 'name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {', 'id = nic1publicip.id }, subnet = new subresource() {', 'id = getsubnetresponse.id }', '}', '}', '};', 'var putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);']
['virtual network gateway is deployed successfully ', ['writeline']]
azure_sdk sample_3235

['name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {', 'id = nic1publicip.id }, subnet = new subresource() {', 'id = getsubnetresponse.id }', '}', '}', '};', 'var putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);', 'var getvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.get(resourcegroupname, virtualnetworkgatewayname);', 'assert.notnull(getvirtualnetworkgatewayresponse.gatewaydefaultsite);']
['default site set at virtual network gateway ', ['writeline', 'getvirtualnetworkgatewayresponse', 'gatewaydefaultsite']]
azure_sdk sample_3235

['var getvirtualnetworkgatewayconnectionresponse = networkmanagementclient.virtualnetworkgatewayconnections.get(resourcegroupname, virtualnetworkgatewayconnectionname);', 'console.writeline("gatewayconnection details:- gatewaylocation: {0}, gatewayconnectionid:{1}, virtualnetworkgateway1 name={2} & id={3}, localnetworkgateway2 name={4} & id={5}, connectiontype={6} routingweight={7} sharedkey={8}" + "connectionstatus={9}, egressbytestransferred={10}, ingressbytestransferred={11}", getvirtualnetworkgatewayconnectionresponse.location, getvirtualnetworkgatewayconnectionresponse.id, getvirtualnetworkgatewayconnectionresponse.name, getvirtualnetworkgatewayconnectionresponse.virtualnetworkgateway1.name, getvirtualnetworkgatewayconnectionresponse.virtualnetworkgateway1.id, getvirtualnetworkgatewayconnectionresponse.localnetworkgateway2.name, getvirtualnetworkgatewayconnectionresponse.localnetworkgateway2.id, getvirtualnetworkgatewayconnectionresponse.connectiontype, getvirtualnetworkgatewayconnectionresponse.routingweight, getvirtualnetworkgatewayconnectionresponse.sharedkey, getvirtualnetworkgatewayconnectionresponse.connectionstatus, getvirtualnetworkgatewayconnectionresponse.egressbytestransferred, getvirtualnetworkgatewayconnectionresponse.ingressbytestransferred);', 'assert.equal(virtualnetworkgatewayconnectiontype.ipsec, getvirtualnetworkgatewayconnectionresponse.connectiontype);', 'assert.equal(3, getvirtualnetworkgatewayconnectionresponse.routingweight);', 'assert.equal("abc", getvirtualnetworkgatewayconnectionresponse.sharedkey);', 'getvirtualnetworkgatewayresponse.gatewaydefaultsite = null;', 'putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, getvirtualnetworkgatewayresponse);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);', 'getvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.get(resourcegroupname, virtualnetworkgatewayname);', 'assert.null(getvirtualnetworkgatewayresponse.gatewaydefaultsite);']
['default site removal from virtual network gateway is successful ', ['writeline', 'getvirtualnetworkgatewayresponse', 'gatewaydefaultsite']]
azure_sdk sample_3235

['using (mockcontext context = mockcontext.start(this.gettype().fullname)) {', 'var resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);', 'var networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);', 'var location = networkmanagementtestutilities.getresourcelocation(resourcesclient, "microsoft.network/connections");', 'string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['var putvirtualnetworkgatewayconnectionresponse = networkmanagementclient.virtualnetworkgatewayconnections.createorupdate(resourcegroupname, virtualnetworkgatewayconnectionname, virtualnetworkgatewayconneciton);', 'assert.equal("succeeded", putvirtualnetworkgatewayconnectionresponse.provisioningstate);', 'var getvirtualnetworkgatewayconnectionresponse = networkmanagementclient.virtualnetworkgatewayconnections.get(resourcegroupname, virtualnetworkgatewayconnectionname);', 'assert.equal("succeeded", getvirtualnetworkgatewayconnectionresponse.provisioningstate);', 'assert.equal("abc", getvirtualnetworkgatewayconnectionresponse.sharedkey);', 'string connectionsharedkeyname = virtualnetworkgatewayconnectionname;', 'var connectionresetsharedkey = new connectionresetsharedkey() {', 'keylength = 50 };', 'var resetconnectionresetsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.resetsharedkey(resourcegroupname, connectionsharedkeyname, connectionresetsharedkey);', 'var getconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.getsharedkey(resourcegroupname, connectionsharedkeyname);']
['connectionsharedkey details value ', ['writeline', 'getconnectionsharedkeyresponse', 'value']]
azure_sdk sample_3235

['string connectionsharedkeyname = virtualnetworkgatewayconnectionname;', 'var connectionresetsharedkey = new connectionresetsharedkey() {', 'keylength = 50 };', 'var resetconnectionresetsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.resetsharedkey(resourcegroupname, connectionsharedkeyname, connectionresetsharedkey);', 'var getconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.getsharedkey(resourcegroupname, connectionsharedkeyname);', 'assert.notequal("abc", getconnectionsharedkeyresponse.value);', 'var connectionsharedkey = new connectionsharedkey() {', 'value = "testsharedkeyvalue" };', 'var putconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.setsharedkey(resourcegroupname, connectionsharedkeyname, connectionsharedkey);', 'getconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.getsharedkey(resourcegroupname, connectionsharedkeyname);']
['connectionsharedkey details value ', ['writeline', 'getconnectionsharedkeyresponse', 'value']]
azure_sdk sample_3235

['addressprefixes = new list<string>() {', '"192.168.0.0/16", }', '}', '};', 'var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['using (mockcontext context = mockcontext.start(this.gettype().fullname)) {', 'var resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);', 'var networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);', 'var location = networkmanagementtestutilities.getresourcelocation(resourcesclient, "microsoft.network/virtualnetworkgateways");', 'string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname1 = testutilities.generatename();', 'string domainnamelabel1 = testutilities.generatename();', 'var nic1publicip1 = testhelper.createdefaultpublicipaddress(publicipname1, resourcegroupname, domainnamelabel1, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var location = networkmanagementtestutilities.getresourcelocation(resourcesclient, "microsoft.network/virtualnetworkgateways");', 'string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname1 = testutilities.generatename();', 'string domainnamelabel1 = testutilities.generatename();', 'var nic1publicip1 = testhelper.createdefaultpublicipaddress(publicipname1, resourcegroupname, domainnamelabel1, location, networkmanagementclient);', 'string publicipname2 = testutilities.generatename();', 'string domainnamelabel2 = testutilities.generatename();', 'var nic1publicip2 = testhelper.createdefaultpublicipaddress(publicipname2, resourcegroupname, domainnamelabel2, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['string publicipname1 = testutilities.generatename();', 'string domainnamelabel1 = testutilities.generatename();', 'var nic1publicip1 = testhelper.createdefaultpublicipaddress(publicipname1, resourcegroupname, domainnamelabel1, location, networkmanagementclient);', 'string publicipname2 = testutilities.generatename();', 'string domainnamelabel2 = testutilities.generatename();', 'var nic1publicip2 = testhelper.createdefaultpublicipaddress(publicipname2, resourcegroupname, domainnamelabel2, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['using (mockcontext context = mockcontext.start(this.gettype().fullname)) {', 'var resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);', 'var networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);', 'var location = networkmanagementtestutilities.getresourcelocation(resourcesclient, "microsoft.network/virtualnetworkgateways");', 'string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['string resourcegroupname = testutilities.generatename("csmrg");', 'resourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {', 'location = location });', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['addressprefixes = new list<string>() {', '"192.168.0.0/16", }', '}', '};', 'var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);']
['publicipaddress gateway ip ', ['writeline', 'id']]
azure_sdk sample_3235

['var putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);', 'assert.equal("succeeded", putlocalnetworkgatewayresponse.provisioningstate);', 'var getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);', 'string publicipname = testutilities.generatename();', 'string domainnamelabel = testutilities.generatename();', 'var nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);', 'string vnetname = testutilities.generatename();', 'string subnetname = "gatewaysubnet";', 'var virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3235

['new virtualnetworkgatewayipconfiguration() {', 'name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {', 'id = nic1publicip.id }, subnet = new subresource() {', 'id = getsubnetresponse.id }', '}', '}, sku = new virtualnetworkgatewaysku() {', 'name = virtualnetworkgatewayskuname.standard, tier = virtualnetworkgatewayskutier.standard }', '};', 'var putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);', 'assert.equal("succeeded", putvirtualnetworkgatewayresponse.provisioningstate);']
['virtual network gateway is deployed successfully ', ['writeline']]
azure_sdk sample_3235

['public override bool execute() {', 'if (timeoutmiliseconds == 0) timeoutmiliseconds = default_task_timeout;', 'threadtask.task waitingtask = threadtask.task.run(() => {']
['press any key to continue or it will continue in seconds ', ['writeline', 'timeoutmiliseconds']]
azure_sdk sample_7

['timespan duration = endtime.subtract(starttime);', 'taskcompletionsource.setresult(duration);', '});', 'cancellationduration = await taskcompletionsource.task;', 'token.throwifcancellationrequested();', 'return new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };', '};', '});', 'await assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync("dummy", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));', '}']
['there were requests executed ', ['testoutputhelper', 'writeline', 'observedrequestcount']]
azure_sdk sample_6443

['timespan duration = endtime.subtract(starttime);', 'taskcompletionsource.setresult(duration);', '});', 'cancellationduration = await taskcompletionsource.task;', 'token.throwifcancellationrequested();', 'return new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };', '};', '});', 'await assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync("dummy", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));', '}']
['took to cancel task ', ['testoutputhelper', 'writeline', 'cancellationduration']]
azure_sdk sample_6443

['});', 'cancellationduration = await taskcompletionsource.task;', 'token.throwifcancellationrequested();', 'return new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };', '};', '});', 'await assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync("dummy", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));', '}', 'assert.notnull(cancellationduration);', 'if (expectedcustomtokentimeouttohitfirst) {']
['expected custom token timeout to hit first ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6443

['return new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };', '};', '});', 'await assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync("dummy", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));', '}', 'assert.notnull(cancellationduration);', 'if (expectedcustomtokentimeouttohitfirst) {', 'assert.true(math.abs(clientrequesttimeoutviacustomtoken.value.totalseconds - cancellationduration.value.totalseconds) < timetolerance, string.format("expected timeout: {0}, observed timeout: {1}", clientrequesttimeoutviacustomtoken, cancellationduration));', '}', 'else {']
['expected client side timeout to hit first ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6443

['private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {', 'assert.notnull(clientrequesttimeoutviacustomtoken);', 'using (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {']
['invoking ', ['testoutputhelper', 'writeline', 'method', 'name']]
azure_sdk sample_6443

['private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {', 'assert.notnull(clientrequesttimeoutviacustomtoken);', 'using (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {', 'batchunittestcancellationexception e = await assert.throwsasync<batchunittestcancellationexception>( async () => await invokecancellationtokenmethodasync(method, o, cancellationtokensource.token));']
['there were requests executed ', ['testoutputhelper', 'writeline', 'e', 'observedrequestcount']]
azure_sdk sample_6443

['private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {', 'assert.notnull(clientrequesttimeoutviacustomtoken);', 'using (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {', 'batchunittestcancellationexception e = await assert.throwsasync<batchunittestcancellationexception>( async () => await invokecancellationtokenmethodasync(method, o, cancellationtokensource.token));']
['took to cancel task ', ['testoutputhelper', 'writeline', 'e', 'cancellationduration']]
azure_sdk sample_6443

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(id: "bug1480489task", commandline: @"md bug1480489directory");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['taskid ', ['testoutputhelper', 'writeline', 'mycompletedtask', 'id']]
azure_sdk sample_5799

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(id: "bug1480489task", commandline: @"md bug1480489directory");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(id: "bug1480489task", commandline: @"md bug1480489directory");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['cloudtask mytask = new cloudtask(id: "bug1480489task", commandline: @"md bug1480489directory");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);']
['task files ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'bool foundatleastonedir = false;', 'foreach (nodefile curfile in mycompletedtask.listnodefiles()) {']
['filepath ', ['testoutputhelper', 'writeline', 'curfile', 'path']]
azure_sdk sample_5799

['utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'bool foundatleastonedir = false;', 'foreach (nodefile curfile in mycompletedtask.listnodefiles()) {']
['isdirectory ', ['testoutputhelper', 'writeline', 'curfile', 'isdirectory', 'tostring']]
azure_sdk sample_5799

['cloudjob unboundjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'unboundjob.poolinformation.poolid = this.poolfixture.poolid;', 'unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'cloudtask directorycreationtask1 = new cloudtask(directorycreationtaskid1, string.format("cmd /c mkdir {0} && echo test > {0}/testfile.txt", directorynameone));', 'cloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format("cmd /c mkdir {0} && echo test > {0}/testfile.txt", directorynametwo));', 'boundjob.addtask(mytask);', 'boundjob.addtask(directorycreationtask1);', 'boundjob.addtask(directorycreationtask2);']
['initial job commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['cloudjob unboundjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'unboundjob.poolinformation.poolid = this.poolfixture.poolid;', 'unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'cloudtask directorycreationtask1 = new cloudtask(directorycreationtaskid1, string.format("cmd /c mkdir {0} && echo test > {0}/testfile.txt", directorynameone));', 'cloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format("cmd /c mkdir {0} && echo test > {0}/testfile.txt", directorynametwo));', 'boundjob.addtask(mytask);', 'boundjob.addtask(directorycreationtask1);', 'boundjob.addtask(directorycreationtask2);']
['initial job commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['cloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format("cmd /c mkdir {0} && echo test > {0}/testfile.txt", directorynametwo));', 'boundjob.addtask(mytask);', 'boundjob.addtask(directorycreationtask1);', 'boundjob.addtask(directorycreationtask2);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);']
['task ran on compute node ', ['testoutputhelper', 'writeline', 'computenodeid']]
azure_sdk sample_5799

['list<nodefile> filesbycomputenoderecursivefalse = batchcli.pooloperations.listnodefiles( this.poolfixture.poolid, computenodeid, recursive: false).tolist();', 'assertfilelistsmatch(filesbycomputenoderecursiveomitted, filesbycomputenoderecursivefalse);', '}', '{', 'list<nodefile> filesbytaskrecursiveomitted = batchcli.joboperations.listnodefiles( jobid, taskid).tolist();', 'list<nodefile> filesbytaskrecursivefalse = batchcli.joboperations.listnodefiles( jobid, taskid, recursive: false).tolist();', 'assertfilelistsmatch(filesbytaskrecursiveomitted, filesbytaskrecursivefalse);', '}', 'list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {']
['found file ', ['testoutputhelper', 'writeline', 'f', 'path']]
azure_sdk sample_5799

['list<nodefile> filesbytaskrecursiveomitted = batchcli.joboperations.listnodefiles( jobid, taskid).tolist();', 'list<nodefile> filesbytaskrecursivefalse = batchcli.joboperations.listnodefiles( jobid, taskid, recursive: false).tolist();', 'assertfilelistsmatch(filesbytaskrecursiveomitted, filesbytaskrecursivefalse);', '}', 'list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {']
['found file ', ['testoutputhelper', 'writeline', 'f', 'path']]
azure_sdk sample_5799

['}', 'list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;']
['getting file ', ['testoutputhelper', 'writeline', 'filepathtoget']]
azure_sdk sample_5799

['list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;', 'nodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);']
['successfully retrieved file ', ['testoutputhelper', 'writeline', 'filepathtoget']]
azure_sdk sample_5799

['list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;', 'nodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);']
['file data ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;', 'nodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);', 'this.testoutputhelper.writeline(computenodefilefrommanager.readasstring());']
['getting file ', ['testoutputhelper', 'writeline', 'filepathtoget']]
azure_sdk sample_5799

['}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;', 'nodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);', 'this.testoutputhelper.writeline(computenodefilefrommanager.readasstring());', 'nodefile filefromcomputenode = computenode.getnodefile(filepathtoget);']
['successfully retrieved file ', ['testoutputhelper', 'writeline', 'filepathtoget']]
azure_sdk sample_5799

['}', 'assert.contains("shared", filelistfromcomputenodeoperations.select(f => f.path));', 'list<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile f in filelistfromcomputenodeoperations) {', '}', 'assert.contains("shared", filelistfromcomputenode.select(f => f.path));', 'string filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;', 'nodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);', 'this.testoutputhelper.writeline(computenodefilefrommanager.readasstring());', 'nodefile filefromcomputenode = computenode.getnodefile(filepathtoget);']
['file data ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['joboperations joboperations = batchcli.joboperations;', '{', 'string jobid = "bug2338301job-" + testutilities.getmyname();', 'try {', 'const string taskid = "hiworld";', 'cloudjob unboundjob = joboperations.createjob(jobid, new poolinformation() { poolid = this.poolfixture.poolid });', 'unboundjob.commit();', 'cloudjob boundjob = joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);']
['initial job commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = "bug1480491job-" + testutilities.getmyname();', 'try {', 'const string taskid = "hiworld";', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'unboundjob.poolinformation.poolid = this.poolfixture.poolid;', 'unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);']
['initial job commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);']
['file has content length ', ['testoutputhelper', 'writeline', 'stdoutfilename', 'file', 'properties', 'contentlength']]
azure_sdk sample_5799

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);']
['file has content type ', ['testoutputhelper', 'writeline', 'stdoutfilename', 'file', 'properties', 'contenttype']]
azure_sdk sample_5799

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);']
['file has creation time ', ['testoutputhelper', 'writeline', 'stdoutfilename', 'file', 'properties', 'creationtime']]
azure_sdk sample_5799

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);']
['file has last modified time ', ['testoutputhelper', 'writeline', 'stdoutfilename', 'file', 'properties', 'lastmodified']]
azure_sdk sample_5799

['taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);', 'assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);']
['task ran on compute node ', ['testoutputhelper', 'writeline', 'computenodeid']]
azure_sdk sample_5799

['const int expectedfilesize = 13;', 'const string stdoutfilename = "stdout.txt";', 'nodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);', 'assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'list<nodefile> files = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile nodefile in files) {']
['found file ', ['testoutputhelper', 'writeline', 'nodefile', 'path']]
azure_sdk sample_5799

['assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'list<nodefile> files = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile nodefile in files) {', '}', 'string filepathtoget = string.format("workitems/{0}/{1}/{2}/{3}", jobid, "job-1", taskid, stdoutfilename);', 'file = computenode.getnodefile(filepathtoget);']
['file has content length ', ['testoutputhelper', 'writeline', 'filepathtoget', 'file', 'properties', 'contentlength']]
azure_sdk sample_5799

['assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'list<nodefile> files = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile nodefile in files) {', '}', 'string filepathtoget = string.format("workitems/{0}/{1}/{2}/{3}", jobid, "job-1", taskid, stdoutfilename);', 'file = computenode.getnodefile(filepathtoget);']
['file has content type ', ['testoutputhelper', 'writeline', 'filepathtoget', 'file', 'properties', 'contenttype']]
azure_sdk sample_5799

['assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'list<nodefile> files = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile nodefile in files) {', '}', 'string filepathtoget = string.format("workitems/{0}/{1}/{2}/{3}", jobid, "job-1", taskid, stdoutfilename);', 'file = computenode.getnodefile(filepathtoget);']
['file has creation time ', ['testoutputhelper', 'writeline', 'filepathtoget', 'file', 'properties', 'creationtime']]
azure_sdk sample_5799

['assert.equal(expectedfilesize, file.properties.contentlength);', 'assert.equal("application/octet-stream", file.properties.contenttype);', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'list<nodefile> files = computenode.listnodefiles(recursive: true).tolist();', 'foreach (nodefile nodefile in files) {', '}', 'string filepathtoget = string.format("workitems/{0}/{1}/{2}/{3}", jobid, "job-1", taskid, stdoutfilename);', 'file = computenode.getnodefile(filepathtoget);']
['file has last modified time ', ['testoutputhelper', 'writeline', 'filepathtoget', 'file', 'properties', 'lastmodified']]
azure_sdk sample_5799

['public void bug1501413testgetnodefilebytask() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'joboperations joboperations = batchcli.joboperations;', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-bug1501413testgetnodefilebytask";', 'try {', 'cloudjob job = joboperations.createjob(jobid, new poolinformation());', 'job.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };']
['initial job schedule commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['public void bug1501413testgetnodefilebytask() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'joboperations joboperations = batchcli.joboperations;', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-bug1501413testgetnodefilebytask";', 'try {', 'cloudjob job = joboperations.createjob(jobid, new poolinformation());', 'job.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'job.commit();']
['waiting for job ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['joboperations joboperations = batchcli.joboperations;', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-bug1501413testgetnodefilebytask";', 'try {', 'cloudjob job = joboperations.createjob(jobid, new poolinformation());', 'job.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'job.commit();', 'cloudjob boundjob = joboperations.getjob(jobid);', 'const string taskid = "t1";', 'const string taskmessage = "this is a test";']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5799

['try {', 'cloudjob job = joboperations.createjob(jobid, new poolinformation());', 'job.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'job.commit();', 'cloudjob boundjob = joboperations.getjob(jobid);', 'const string taskid = "t1";', 'const string taskmessage = "this is a test";', 'cloudtask task = new cloudtask(taskid, string.format("cmd /c echo {0}", taskmessage));', 'boundjob.addtask(task);']
['waiting for the task to complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['poolid = this.poolfixture.poolid };', 'job.commit();', 'cloudjob boundjob = joboperations.getjob(jobid);', 'const string taskid = "t1";', 'const string taskmessage = "this is a test";', 'cloudtask task = new cloudtask(taskid, string.format("cmd /c echo {0}", taskmessage));', 'boundjob.addtask(task);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( joboperations.listtasks(jobid), taskstate.completed, timespan.fromseconds(30));']
['downloading the stdout for the file ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5799

['cloudjob boundjob = joboperations.getjob(jobid);', 'const string taskid = "t1";', 'const string taskmessage = "this is a test";', 'cloudtask task = new cloudtask(taskid, string.format("cmd /c echo {0}", taskmessage));', 'boundjob.addtask(task);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( joboperations.listtasks(jobid), taskstate.completed, timespan.fromseconds(30));', 'nodefile file = joboperations.getnodefile(jobid, taskid, "stdout.txt");', 'string data = file.readasstring(encoding: encoding.utf8);']
['data ', ['testoutputhelper', 'writeline', 'data']]
azure_sdk sample_5799

['public void exceptionsthrowndirectlybyrestproxydontchange() {', 'const string exceptionnamecapturegroup = "exceptionname";', 'string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.proxysourcelocation, sourcefiletype, null, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 100;']
['found strings ', ['testoutputhelper', 'writeline', 'throw', 'new', 'exception', 'results', 'count']]
azure_sdk sample_6447

['string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.proxysourcelocation, sourcefiletype, null, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 100;', 'assert.true(results.count > expectedexceptioncount);', 'hashset<string> exceptionset = new hashset<string>();', 'foreach (sourceparserresult parserresult in results) {', 'string exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;', 'exceptionset.add(exceptionname);', '}']
['found types of exception thrown by rest proxy ', ['testoutputhelper', 'writeline', 'exceptionset', 'count']]
azure_sdk sample_6447

['string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.proxysourcelocation, sourcefiletype, null, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 100;', 'assert.true(results.count > expectedexceptioncount);', 'hashset<string> exceptionset = new hashset<string>();', 'foreach (sourceparserresult parserresult in results) {', 'string exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;', 'exceptionset.add(exceptionname);', '}']
['exceptions ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6447

['public void exceptionsthrowndirectlybyobjectmodeldontchange() {', 'const string exceptionnamecapturegroup = "exceptionname";', 'string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.sourcelocation, sourcefiletype, generatedprotocolfolder, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 50;']
['found strings ', ['testoutputhelper', 'writeline', 'throw', 'new', 'exception', 'results', 'count']]
azure_sdk sample_6447

['string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.sourcelocation, sourcefiletype, generatedprotocolfolder, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 50;', 'assert.true(results.count > expectedexceptioncount);', 'hashset<string> exceptionset = new hashset<string>();', 'foreach (sourceparserresult parserresult in results) {', 'string exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;', 'exceptionset.add(exceptionname);', '}']
['found types of exception thrown by object model ', ['testoutputhelper', 'writeline', 'exceptionset', 'count']]
azure_sdk sample_6447

['string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);', 'sourceparser sourceparser = new sourceparser(this.sourcelocation, sourcefiletype, generatedprotocolfolder, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'const int expectedexceptioncount = 50;', 'assert.true(results.count > expectedexceptioncount);', 'hashset<string> exceptionset = new hashset<string>();', 'foreach (sourceparserresult parserresult in results) {', 'string exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;', 'exceptionset.add(exceptionname);', '}']
['exceptions ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6447

['public void dotwaitanddotresultareneverused() {', 'const string pattern = "(?<! sourceparser sourceparser = new sourceparser(this.sourcelocation, sourcefiletype, null, pattern);', 'list<sourceparserresult> results = sourceparser.parse().tolist();', 'results.remove(results.first(r => r.file.contains("utilitiesinternal.cs")));', 'results.remove(results.first(r => r.file.contains("synchronousmethodexceptionbehavior.cs")));', 'foreach (sourceparserresult parserresult in results) {']
['found wait or result in at ', ['testoutputhelper', 'writeline', 'parserresult', 'file', 'parserresult', 'linenumber', 'parserresult', 'match']]
azure_sdk sample_6447

['for (int i = 0; i < 50; i++) {', 'cloudtask curtask = new cloudtask("bug957878-task-" + i.tostring(), "hostname");', 'thejob.addtask(curtask);', 'numtaskscreated++;', '}', 'int numtasksseen = 0;', 'bug957878replacementinterceptorbox box0 = new bug957878replacementinterceptorbox(this.testoutputhelper);', 'foreach (cloudtask curtask in thejob.listtasks(additionalbehaviors: new[] {', 'new microsoft.azure.batch.protocol.requestreplacementinterceptor(box0.bug957878requestreplacementinterceptoropcontextfactory)})) {', 'numtasksseen++;']
['task id ', ['testoutputhelper', 'writeline', 'curtask', 'id']]
azure_sdk sample_5808

['numtaskscreated++;', '}', 'int numtasksseen = 0;', 'bug957878replacementinterceptorbox box0 = new bug957878replacementinterceptorbox(this.testoutputhelper);', 'foreach (cloudtask curtask in thejob.listtasks(additionalbehaviors: new[] {', 'new microsoft.azure.batch.protocol.requestreplacementinterceptor(box0.bug957878requestreplacementinterceptoropcontextfactory)})) {', 'numtasksseen++;', '}', 'assert.equal(numtaskscreated, numtasksseen);', 'assert.true(box0.numtimescalled >= 10);']
['total tasks created ', ['testoutputhelper', 'writeline', 'numtaskscreated', 'tostring']]
azure_sdk sample_5808

['numtaskscreated++;', '}', 'int numtasksseen = 0;', 'bug957878replacementinterceptorbox box0 = new bug957878replacementinterceptorbox(this.testoutputhelper);', 'foreach (cloudtask curtask in thejob.listtasks(additionalbehaviors: new[] {', 'new microsoft.azure.batch.protocol.requestreplacementinterceptor(box0.bug957878requestreplacementinterceptoropcontextfactory)})) {', 'numtasksseen++;', '}', 'assert.equal(numtaskscreated, numtasksseen);', 'assert.true(box0.numtimescalled >= 10);']
['total tasks enumerated ', ['testoutputhelper', 'writeline', 'numtasksseen', 'tostring']]
azure_sdk sample_5808

['public void bug1719609odatadetaillevel() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {']
['job schedule tests ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['}', 'finally {', 'list<task> jobscheduledeletions = new list<task>();', 'foreach (string id in jobscheduleids) {', 'task t = testutilities.deletejobscheduleifexistsasync(batchcli, id);', 'jobscheduledeletions.add(t);', '}', 'task.whenall(jobscheduledeletions).wait();', '}', '}']
['job tests ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudjob lowdetaillevel = listfewerprops.single();', 'assert.equal(listallprops[0].id, lowdetaillevel.id);', 'assert.notequal(listallprops[0].creationtime, lowdetaillevel.creationtime);', 'lowdetaillevel.refresh();', 'assert.equal(listallprops[0].creationtime, lowdetaillevel.creationtime);', 'lowdetaillevel = batchcli.joboperations.getjob(lowdetaillevel.id);', 'assert.equal(listallprops[0].creationtime, lowdetaillevel.creationtime);', 'lowdetaillevel.refresh(detaillevel: new odatadetaillevel() { selectclause = "id,state" });', 'assert.notequal(listallprops[0].creationtime, lowdetaillevel.creationtime);', '}']
['task tests ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['matchingallpropstask = curallpropstask;', '}', '}', 'assert.notnull(matchingallpropstask);', 'assert.notequal(matchingallpropstask.creationtime, lowerdetailtask.creationtime);', 'lowerdetailtask.refresh();', 'assert.equal(matchingallpropstask.creationtime, lowerdetailtask.creationtime);', 'matchingallpropstask.refresh(detaillevel: new odatadetaillevel() { selectclause = "id,state" });', 'assert.notequal(lowerdetailtask.creationtime, matchingallpropstask.creationtime);', '}']
['task file tests ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'const string testname = "bug1996130_resourcedoublerefreshdoesntwork";', 'const string taskid = "bug1996130_resourcedoublerefreshdoesntwork_task1";', 'string jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-" + testname;', 'try {', 'cloudjobschedule jobschedule = batchcli.jobscheduleoperations.createjobschedule(jobscheduleid, null, null);', 'jobschedule.jobspecification = new jobspecification(new poolinformation() {', 'poolid = this.poolfixture.poolid });', 'jobschedule.schedule = new schedule() { recurrenceinterval = timespan.fromminutes(1) };']
['initial job schedule commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['try {', 'cloudjobschedule jobschedule = batchcli.jobscheduleoperations.createjobschedule(jobscheduleid, null, null);', 'jobschedule.jobspecification = new jobspecification(new poolinformation() {', 'poolid = this.poolfixture.poolid });', 'jobschedule.schedule = new schedule() { recurrenceinterval = timespan.fromminutes(1) };', 'jobschedule.commit();', 'cloudjobschedule boundjobschedule = testutilities.waitforjobonjobschedule(batchcli.jobscheduleoperations, jobscheduleid);', 'cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);', 'string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5808

['jobschedule.schedule = new schedule() { recurrenceinterval = timespan.fromminutes(1) };', 'jobschedule.commit();', 'cloudjobschedule boundjobschedule = testutilities.waitforjobonjobschedule(batchcli.jobscheduleoperations, jobscheduleid);', 'cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);', 'string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));']
['refreshing job schedule ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['jobschedule.commit();', 'cloudjobschedule boundjobschedule = testutilities.waitforjobonjobschedule(batchcli.jobscheduleoperations, jobscheduleid);', 'cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);', 'string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();']
['refreshing job schedule ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudjobschedule boundjobschedule = testutilities.waitforjobonjobschedule(batchcli.jobscheduleoperations, jobscheduleid);', 'cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);', 'string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();']
['refreshing job ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);', 'string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();']
['refreshing job ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['string jobid = boundjob.id;', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();']
['refreshing task ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();', 'boundtask.refresh();']
['refreshing task ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();', 'boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");']
['refreshing task file ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();', 'statemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));', 'boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();', 'boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");', 'nodefile.refresh();']
['refreshing task file ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundjobschedule.refresh();', 'boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();', 'boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");', 'nodefile.refresh();', 'nodefile.refresh();', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);']
['refreshing pool ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundjobschedule.refresh();', 'boundjob.refresh();', 'boundjob.refresh();', 'boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");', 'nodefile.refresh();', 'nodefile.refresh();', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'boundpool.refresh();']
['refreshing pool ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundjob.refresh();', 'boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");', 'nodefile.refresh();', 'nodefile.refresh();', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'boundpool.refresh();', 'boundpool.refresh();', 'computenode computenode = boundpool.listcomputenodes().first();']
['refreshing compute node ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundtask.refresh();', 'boundtask.refresh();', 'nodefile nodefile = boundtask.getnodefile("stdout.txt");', 'nodefile.refresh();', 'nodefile.refresh();', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'boundpool.refresh();', 'boundpool.refresh();', 'computenode computenode = boundpool.listcomputenodes().first();', 'computenode.refresh();']
['refreshing compute node ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['try {', 'int interceptorcount = 0;', 'batchcli.custombehaviors.add(new protocol.requestinterceptor((o) => { interceptorcount++; this.testoutputhelper.writeline("test: random interceptor"); }));', 'string taskidhello;', '{', 'int presetupcount = interceptorcount;', 'cloudpool sharedpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'testutilities.helloworld(batchcli, this.testoutputhelper, sharedpool, out bug1959324jobid, out taskidhello, deletejob: false);', 'assert.true(interceptorcount > presetupcount);', '}']
['listnodefiles ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['string taskidhello;', '{', 'int presetupcount = interceptorcount;', 'cloudpool sharedpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'testutilities.helloworld(batchcli, this.testoutputhelper, sharedpool, out bug1959324jobid, out taskidhello, deletejob: false);', 'assert.true(interceptorcount > presetupcount);', '}', 'int prelistnodefilescount = interceptorcount;', 'var files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();', 'assert.true(interceptorcount > prelistnodefilescount);']
['listjobs ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudpool sharedpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'testutilities.helloworld(batchcli, this.testoutputhelper, sharedpool, out bug1959324jobid, out taskidhello, deletejob: false);', 'assert.true(interceptorcount > presetupcount);', '}', 'int prelistnodefilescount = interceptorcount;', 'var files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();', 'assert.true(interceptorcount > prelistnodefilescount);', 'int prelistjobscount = interceptorcount;', 'var jobs = batchcli.joboperations.listjobs().tolist();', 'assert.true(interceptorcount > prelistjobscount);']
['listpools ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['}', 'int prelistnodefilescount = interceptorcount;', 'var files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();', 'assert.true(interceptorcount > prelistnodefilescount);', 'int prelistjobscount = interceptorcount;', 'var jobs = batchcli.joboperations.listjobs().tolist();', 'assert.true(interceptorcount > prelistjobscount);', 'int prelistpoolscount = interceptorcount;', 'var pools = batchcli.pooloperations.listpools().tolist();', 'assert.true(interceptorcount > prelistpoolscount);']
['getjob yield injector test ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['int prelistnodefilescount = interceptorcount;', 'var files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();', 'assert.true(interceptorcount > prelistnodefilescount);', 'int prelistjobscount = interceptorcount;', 'var jobs = batchcli.joboperations.listjobs().tolist();', 'assert.true(interceptorcount > prelistjobscount);', 'int prelistpoolscount = interceptorcount;', 'var pools = batchcli.pooloperations.listpools().tolist();', 'assert.true(interceptorcount > prelistpoolscount);', 'protocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {']
['yield injector ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['assert.true(interceptorcount > prelistnodefilescount);', 'int prelistjobscount = interceptorcount;', 'var jobs = batchcli.joboperations.listjobs().tolist();', 'assert.true(interceptorcount > prelistjobscount);', 'int prelistpoolscount = interceptorcount;', 'var pools = batchcli.pooloperations.listpools().tolist();', 'assert.true(interceptorcount > prelistpoolscount);', 'protocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {', 'var request = (jobgetbatchrequest)baserequest;', 'request.servicerequestfunc = (token) => { return request.restclient.job.getwithhttpmessagesasync(bug1959324jobid, request.options, cancellationtoken: token); };']
['leaving yield injector ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['var jobs = batchcli.joboperations.listjobs().tolist();', 'assert.true(interceptorcount > prelistjobscount);', 'int prelistpoolscount = interceptorcount;', 'var pools = batchcli.pooloperations.listpools().tolist();', 'assert.true(interceptorcount > prelistpoolscount);', 'protocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {', 'var request = (jobgetbatchrequest)baserequest;', 'request.servicerequestfunc = (token) => { return request.restclient.job.getwithhttpmessagesasync(bug1959324jobid, request.options, cancellationtoken: token); };', '};', 'cloudjob boundjob = batchcli.joboperations.getjob( "test value that can\'t possibly be found as a job id", additionalbehaviors: new[] { new protocol.requestinterceptor(yieldinjectioninterceptor) });']
['done got job ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudjobschedule boundjobschedule = null;', '{', 'string jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-" + testname;', 'try {', 'cloudpool pool = pooloperations.getpool(this.poolfixture.poolid);', 'pool.metadata = new list<metadataitem>();', 'pool.metadata.add(new metadataitem("test", "test"));', 'pool.commit();', 'pool = pooloperations.getpool(this.poolfixture.poolid);', 'assert.equal(1, pool.metadata.count);']
['creating job schedule ', ['testoutputhelper', 'writeline', 'jobscheduleid']]
azure_sdk sample_5808

['assert.null(poolspecification.metadata);', 'poolspecification.metadata = new list<metadataitem>() { new metadataitem("test", "test") };', 'poolinformation poolinformation = new poolinformation() {', 'autopoolspecification = new autopoolspecification() {', 'keepalive = false, poolspecification = poolspecification, poollifetimeoption = poollifetimeoption.jobschedule }', '};', 'unboundjobschedule.jobspecification = new jobspecification(poolinformation) {', 'jobmanagertask = jm, };', 'unboundjobschedule.schedule = new schedule() { recurrenceinterval = timespan.fromminutes(6) };', 'unboundjobschedule.commit();']
['getting job schedule to ensure that ilist properties were set correctly on server ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['assert.equal(1, boundjobschedule.metadata.count);', 'assert.equal(1, boundjobschedule.jobspecification.jobmanagertask.environmentsettings.count);', 'assert.equal(1, boundjobschedule.jobspecification.jobmanagertask.resourcefiles.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.resourcefiles.count);', 'boundjobschedule.metadata.add(new metadataitem("abc", "abc"));', 'boundjobschedule.jobspecification.jobmanagertask.resourcefiles.add(new resourcefile("http: boundjobschedule.jobspecification.jobmanagertask.environmentsettings.add(new environmentsetting("abc", "abc"));', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.add(new metadataitem("abc", "abc"));', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.add(new environmentsetting("abc", "abc"));']
['http this testoutputhelper writeline added ', ['autopoolspecification', 'poolspecification', 'starttask', 'resourcefiles', 'add', 'new', 'resourcefile', 'commiting', 'updated', 'job', 'schedule', 'with', 'more', 'ilist', 'stuff']]
azure_sdk sample_5808

['assert.equal(1, boundjobschedule.jobspecification.jobmanagertask.environmentsettings.count);', 'assert.equal(1, boundjobschedule.jobspecification.jobmanagertask.resourcefiles.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.count);', 'assert.equal(1, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.resourcefiles.count);', 'boundjobschedule.metadata.add(new metadataitem("abc", "abc"));', 'boundjobschedule.jobspecification.jobmanagertask.resourcefiles.add(new resourcefile("http: boundjobschedule.jobspecification.jobmanagertask.environmentsettings.add(new environmentsetting("abc", "abc"));', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.add(new metadataitem("abc", "abc"));', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.add(new environmentsetting("abc", "abc"));', 'boundjobschedule.commit();']
['getting job schedule to ensure that ilist properties were set correctly on server ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundjobschedule = jobscheduleoperations.getjobschedule(jobscheduleid);', 'assert.equal(2, boundjobschedule.metadata.count);', 'assert.equal(2, boundjobschedule.jobspecification.jobmanagertask.environmentsettings.count);', 'assert.equal(2, boundjobschedule.jobspecification.jobmanagertask.resourcefiles.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.resourcefiles.count);', 'boundjobschedule.metadata = null;', 'boundjobschedule.jobspecification.jobmanagertask.resourcefiles = null;', 'boundjobschedule.jobspecification.jobmanagertask.environmentsettings = null;']
['commiting updated job schedule with some ilist stuff removed ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['assert.equal(2, boundjobschedule.metadata.count);', 'assert.equal(2, boundjobschedule.jobspecification.jobmanagertask.environmentsettings.count);', 'assert.equal(2, boundjobschedule.jobspecification.jobmanagertask.resourcefiles.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.resourcefiles.count);', 'boundjobschedule.metadata = null;', 'boundjobschedule.jobspecification.jobmanagertask.resourcefiles = null;', 'boundjobschedule.jobspecification.jobmanagertask.environmentsettings = null;', 'boundjobschedule.commit();']
['getting job schedule to ensure that ilist properties were removed correctly on server ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['boundjobschedule = jobscheduleoperations.getjobschedule(jobscheduleid);', 'assert.null(boundjobschedule.metadata);', 'assert.null(boundjobschedule.jobspecification.jobmanagertask.environmentsettings);', 'assert.null(boundjobschedule.jobspecification.jobmanagertask.resourcefiles);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.count);', 'assert.equal(2, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.resourcefiles.count);', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.metadata.removeat(0);', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.starttask.environmentsettings.removeat(1);', 'boundjobschedule.commit();']
['getting job schedule to ensure that ilist properties were removed correctly on server ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['poolinformation poolinfo = new poolinformation();', 'poolinfo.autopoolspecification = autopoolspec;', 'jobspecification jobspec = new jobspecification(poolinfo);', 'jobspec.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundjobschedule.displayname);', 'jobspec.jobmanagertask = jobmanager;', 'unboundjobschedule.jobspecification = jobspec;', 'schedule schedule = new schedule();', 'schedule.donotrununtil = datetime.now.addyears(1);', 'unboundjobschedule.schedule = schedule;']
['creating job schedule ', ['testoutputhelper', 'writeline', 'jobscheduleid']]
azure_sdk sample_5808

['schedule schedule = new schedule();', 'schedule.donotrununtil = datetime.now.addyears(1);', 'unboundjobschedule.schedule = schedule;', 'unboundjobschedule.commit();', 'try {', 'cloudjobschedule boundjobschedule = batchcli.jobscheduleoperations.getjobschedule(jobscheduleid);', 'assert.equal(originaldisplayname, boundjobschedule.displayname);', 'assert.equal(originaldisplayname, boundjobschedule.jobspecification.displayname);', 'assert.equal(originaldisplayname, boundjobschedule.jobspecification.jobmanagertask.displayname);', 'assert.equal(originaldisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);']
['attempting to set display names on job schedule job specification pool specification and job manager task ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['assert.equal(originaldisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundjobschedule.displayname = updateddisplayname);', 'boundjobschedule.jobspecification.displayname = updateddisplayname;', 'boundjobschedule.jobspecification.jobmanagertask.displayname = updateddisplayname;', 'boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname = updateddisplayname;', 'assert.equal(updateddisplayname, boundjobschedule.jobspecification.displayname);', 'assert.equal(updateddisplayname, boundjobschedule.jobspecification.jobmanagertask.displayname);', 'assert.equal(updateddisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);', '}', 'finally {']
['deleting job schedule ', ['testoutputhelper', 'writeline', 'jobscheduleid']]
azure_sdk sample_5808

['}', 'finally {', 'batchcli.jobscheduleoperations.deletejobschedule(jobscheduleid);', '}', 'string jobid = testname + "_job_" + testutilities.getmyname();', 'cloudjob unboundjob = batchcli.joboperations.createjob();', 'unboundjob.id = jobid;', 'unboundjob.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundjob.displayname);', 'unboundjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };']
['creating job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5808

['string jobid = testname + "_job_" + testutilities.getmyname();', 'cloudjob unboundjob = batchcli.joboperations.createjob();', 'unboundjob.id = jobid;', 'unboundjob.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundjob.displayname);', 'unboundjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };', 'unboundjob.commit();', 'try {', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(originaldisplayname, boundjob.displayname);']
['attempting to set display name on job ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['unboundjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };', 'unboundjob.commit();', 'try {', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(originaldisplayname, boundjob.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundjob.displayname = updateddisplayname);', 'string taskid = testname + "_task_" + testutilities.getmyname();', 'cloudtask unboundtask = new cloudtask(taskid, "cmd /c echo hi");', 'unboundtask.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundtask.displayname);']
['adding task to job ', ['testoutputhelper', 'writeline', 'taskid', 'jobid']]
azure_sdk sample_5808

['assert.equal(originaldisplayname, boundjob.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundjob.displayname = updateddisplayname);', 'string taskid = testname + "_task_" + testutilities.getmyname();', 'cloudtask unboundtask = new cloudtask(taskid, "cmd /c echo hi");', 'unboundtask.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundtask.displayname);', 'boundjob.addtask(unboundtask);', 'try {', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'assert.equal(originaldisplayname, boundtask.displayname);']
['attempting to set display name on task ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudtask unboundtask = new cloudtask(taskid, "cmd /c echo hi");', 'unboundtask.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundtask.displayname);', 'boundjob.addtask(unboundtask);', 'try {', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'assert.equal(originaldisplayname, boundtask.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundtask.displayname = updateddisplayname);', '}', 'finally {']
['deleting task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5808

['try {', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'assert.equal(originaldisplayname, boundtask.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundtask.displayname = updateddisplayname);', '}', 'finally {', 'batchcli.joboperations.deletetask(jobid, taskid);', '}', '}', 'finally {']
['deleting job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5808

['batchcli.joboperations.deletetask(jobid, taskid);', '}', '}', 'finally {', 'batchcli.joboperations.deletejob(jobid);', '}', 'string poolid = testname + "_pool_" + testutilities.getmyname();', 'cloudpool unboundpool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), 0);', 'unboundpool.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundpool.displayname);']
['creating pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5808

['batchcli.joboperations.deletejob(jobid);', '}', 'string poolid = testname + "_pool_" + testutilities.getmyname();', 'cloudpool unboundpool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), 0);', 'unboundpool.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundpool.displayname);', 'unboundpool.commit();', 'try {', 'cloudpool boundpool = batchcli.pooloperations.getpool(poolid);', 'assert.equal(originaldisplayname, boundpool.displayname);']
['attempting to set display name on pool ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudpool unboundpool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), 0);', 'unboundpool.displayname = originaldisplayname;', 'assert.equal(originaldisplayname, unboundpool.displayname);', 'unboundpool.commit();', 'try {', 'cloudpool boundpool = batchcli.pooloperations.getpool(poolid);', 'assert.equal(originaldisplayname, boundpool.displayname);', 'testutilities.assertthrows<invalidoperationexception>(() => boundpool.displayname = updateddisplayname);', '}', 'finally {']
['deleting pool ', ['testoutputhelper', 'writeline', 'poolid']]
azure_sdk sample_5808

['return false;', '}', 'private class bug957878replacementinterceptorbox {', 'public int numtimescalled { get; private set; }', 'private readonly itestoutputhelper testoutputhelper;', 'public bug957878replacementinterceptorbox(itestoutputhelper testoutputhelper) {', 'this.testoutputhelper = testoutputhelper;', '}', 'internal void bug957878requestreplacementinterceptoropcontextfactory(ref protocol.ibatchrequest batchrequest) {', 'this.numtimescalled++;']
['movenextasync call to server ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['cloudpool unboundpool = batchcli.pooloperations.createpool( poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: 0);', 'bug1770942retrypolicy retrypolicy = new bug1770942retrypolicy(this.testoutputhelper);', 'testutilities.assertthrows<batchexception>(() => unboundpool.commit(new[] { new retrypolicyprovider(retrypolicy) }));', 'assert.equal(3, retrypolicy.numtimescalled);', '}', '{', 'foreach (string poolid in poolidstocreate) {', 'cloudpool unboundpool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: 0);', 'unboundpool.commit();', '}']
['all pools ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['{', 'foreach (string poolid in poolidstocreate) {', 'cloudpool unboundpool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: 0);', 'unboundpool.commit();', '}', 'var allpools = batchcli.pooloperations.listpools();', 'testutilities.displaypools(this.testoutputhelper, allpools);', 'var oddienum = batchcli.pooloperations.listpools(new odatadetaillevel() {', 'filterclause = "startswith(id, \'odd\')", selectclause = "id,state" });', 'list<cloudpool> oddlist = new list<cloudpool>(oddienum);']
['odd pools ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['}', 'var allpools = batchcli.pooloperations.listpools();', 'testutilities.displaypools(this.testoutputhelper, allpools);', 'var oddienum = batchcli.pooloperations.listpools(new odatadetaillevel() {', 'filterclause = "startswith(id, \'odd\')", selectclause = "id,state" });', 'list<cloudpool> oddlist = new list<cloudpool>(oddienum);', 'testutilities.displaypools(this.testoutputhelper, oddienum);', 'var evenienum = batchcli.pooloperations.listpools(new odatadetaillevel() {', 'filterclause = "startswith(id, \'even\')", selectclause = "id,state" });', 'list<cloudpool> evenlist = new list<cloudpool>(evenienum);']
['even pools ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['}', '#region test helpers private class bug1770942retrypolicy : iretrypolicy {', 'public int numtimescalled { get; private set; }', 'private readonly itestoutputhelper testoutputhelper;', 'public bug1770942retrypolicy(itestoutputhelper testoutputhelper) {', 'this.testoutputhelper = testoutputhelper;', '}', 'public task<retrydecision> shouldretryasync(exception exception, operationcontext operationcontext) {', 'timespan retryinterval = timespan.zero;', 'this.numtimescalled++;']
['exception ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5808

['var context = new authenticationcontext(authority, tokencache);', 'var result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);', 'return result.accesstoken;', '}', 'public async task<string> getuseraccesstoken(string authority, string resource, string scope) {', 'string clientid = testconfigurationmanager.trygetenvironmentorappsetting("nativeclientid");', 'var context = new authenticationcontext(authority, tokencache);', 'if (_devicecodeforstoragetests == null) {', '_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);', 'debug.writeline("############################################################################################");']
['test won t run until you perform following steps ', ['writeline']]
azure_sdk sample_2249

['var context = new authenticationcontext(authority, tokencache);', 'var result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);', 'return result.accesstoken;', '}', 'public async task<string> getuseraccesstoken(string authority, string resource, string scope) {', 'string clientid = testconfigurationmanager.trygetenvironmentorappsetting("nativeclientid");', 'var context = new authenticationcontext(authority, tokencache);', 'if (_devicecodeforstoragetests == null) {', '_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);', 'debug.writeline("############################################################################################");']
['go to following url devicecodeforstoragetests verificationurl ', ['writeline']]
azure_sdk sample_2249

['var context = new authenticationcontext(authority, tokencache);', 'var result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);', 'return result.accesstoken;', '}', 'public async task<string> getuseraccesstoken(string authority, string resource, string scope) {', 'string clientid = testconfigurationmanager.trygetenvironmentorappsetting("nativeclientid");', 'var context = new authenticationcontext(authority, tokencache);', 'if (_devicecodeforstoragetests == null) {', '_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);', 'debug.writeline("############################################################################################");']
['insert following user code devicecodeforstoragetests usercode ', ['writeline']]
azure_sdk sample_2249

['var context = new authenticationcontext(authority, tokencache);', 'var result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);', 'return result.accesstoken;', '}', 'public async task<string> getuseraccesstoken(string authority, string resource, string scope) {', 'string clientid = testconfigurationmanager.trygetenvironmentorappsetting("nativeclientid");', 'var context = new authenticationcontext(authority, tokencache);', 'if (_devicecodeforstoragetests == null) {', '_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);', 'debug.writeline("############################################################################################");']
['login with your username and password credentials ', ['writeline']]
azure_sdk sample_2249

['public void testireadonlymakespropertiesreadonly() {', 'type ireadonlytype = typeof(ireadonly);', 'list<type> typeswithireadonlybase = gettypeswhichimplementinterface(ireadonlytype.gettypeinfo().assembly, ireadonlytype, requirepublicconstructor: false).tolist();', 'foreach (type type in typeswithireadonlybase) {']
['reading setting properties of type ', ['testoutputhelper', 'writeline', 'type', 'tostring']]
azure_sdk sample_6462

['public void testireadonlymakespropertiesreadonly() {', 'type ireadonlytype = typeof(ireadonly);', 'list<type> typeswithireadonlybase = gettypeswhichimplementinterface(ireadonlytype.gettypeinfo().assembly, ireadonlytype, requirepublicconstructor: false).tolist();', 'foreach (type type in typeswithireadonlybase) {', 'ireadonly objectundertest = this.customizedobjectfactory.createinstance<ireadonly>(type);', 'objectundertest.isreadonly = true;', 'ienumerable<propertyinfo> properties = type.getproperties(bindingflags.public | bindingflags.instance);', 'foreach (propertyinfo property in properties.where(p => p.name != "custombehaviors")) {', 'if (property.canwrite) {']
['attempting to write property ', ['testoutputhelper', 'writeline', 'property', 'name']]
azure_sdk sample_6462

['foreach (type type in typeswithireadonlybase) {', 'ireadonly objectundertest = this.customizedobjectfactory.createinstance<ireadonly>(type);', 'objectundertest.isreadonly = true;', 'ienumerable<propertyinfo> properties = type.getproperties(bindingflags.public | bindingflags.instance);', 'foreach (propertyinfo property in properties.where(p => p.name != "custombehaviors")) {', 'if (property.canwrite) {', 'targetinvocationexception e = assert.throws<targetinvocationexception>(() => property.setvalue(objectundertest, null));', 'assert.istype<invalidoperationexception>(e.innerexception);', '}', 'if (property.canread) {']
['attempting to read property ', ['testoutputhelper', 'writeline', 'property', 'name']]
azure_sdk sample_6462

['public void testgettransportobjectdoesntmissproperties() {', 'const int objectstovalidate = 100;', 'type itransportobjectprovidertype = typeof(itransportobjectprovider<>);', 'ienumerable<type> types = gettypeswhichimplementinterface(itransportobjectprovidertype.gettypeinfo().assembly, itransportobjectprovidertype, requirepublicconstructor: false);', 'foreach (type type in types) {']
['generating objects of type ', ['testoutputhelper', 'writeline', 'objectstovalidate', 'type']]
azure_sdk sample_6462

['public void bug1910530_concurrentchangetrackedlistthreadsafetest() {', 'const string testname = "bug1910530_concurrentchangetrackedlistthreadsafetest";', 'using(batchclient batchcli = batchclient.open(clientunittestcommon.createdummysharedkeycredential())) {', 'jobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;', 'string jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + "-" + testname;']
['creating job schedule ', ['testoutputhelper', 'writeline', 'jobscheduleid']]
azure_sdk sample_6446

['public void bug1910530_concurrentchangetrackedlistthreadsafetest() {', 'const string testname = "bug1910530_concurrentchangetrackedlistthreadsafetest";', 'using(batchclient batchcli = batchclient.open(clientunittestcommon.createdummysharedkeycredential())) {', 'jobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;', 'string jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + "-" + testname;', 'cloudjobschedule unboundjobschedule = jobscheduleoperations.createjobschedule(jobscheduleid, null, null);', 'unboundjobschedule.metadata = new list<metadataitem>();', 'action addaction = () => {']
['adding an item ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6446

['const string testname = "bug1910530_concurrentchangetrackedlistthreadsafetest";', 'using(batchclient batchcli = batchclient.open(clientunittestcommon.createdummysharedkeycredential())) {', 'jobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;', 'string jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + "-" + testname;', 'cloudjobschedule unboundjobschedule = jobscheduleoperations.createjobschedule(jobscheduleid, null, null);', 'unboundjobschedule.metadata = new list<metadataitem>();', 'action addaction = () => {', 'unboundjobschedule.metadata.add(new metadataitem("test", "test"));', '};', 'action removeaction = () => {']
['removing an item ', ['testoutputhelper', 'writeline']]
azure_sdk sample_6446

['topic topic = new topic() {', 'location = location, tags = originaltagsdictionary };', 'var createtopicresponse = this.eventgridmanagementclient.topics.createorupdate(resourcegroup, topicname, topic);', 'assert.notnull(createtopicresponse);', 'assert.equal(createtopicresponse.name, topicname);', 'testutilities.wait(timespan.fromseconds(60));', 'topicsharedaccesskeys keys = this.eventgridmanagementclient.topics.listsharedaccesskeys(resourcegroup, topicname);', 'string topichostname = new uri(createtopicresponse.endpoint).host;', 'topiccredentials topiccredentials = new topiccredentials(keys.key1);', 'eventgridclient client =  eventgridmanagementhelper.geteventgridclient( context, topiccredentials, new recordeddelegatinghandler { statuscodetoreturn = httpstatuscode.ok });']
['publishing to azure event grid ', ['writeline']]
azure_sdk sample_6650

['location = location, tags = originaltagsdictionary };', 'var createtopicresponse = this.eventgridmanagementclient.topics.createorupdate(resourcegroup, topicname, topic);', 'assert.notnull(createtopicresponse);', 'assert.equal(createtopicresponse.name, topicname);', 'testutilities.wait(timespan.fromseconds(60));', 'topicsharedaccesskeys keys = this.eventgridmanagementclient.topics.listsharedaccesskeys(resourcegroup, topicname);', 'string topichostname = new uri(createtopicresponse.endpoint).host;', 'topiccredentials topiccredentials = new topiccredentials(keys.key1);', 'eventgridclient client =  eventgridmanagementhelper.geteventgridclient( context, topiccredentials, new recordeddelegatinghandler { statuscodetoreturn = httpstatuscode.ok });', 'client.publisheventsasync(topichostname, geteventslist()).getawaiter().getresult();']
['published successfully ', ['writeline']]
azure_sdk sample_6650

['var cerificatethumbprint = configurationmanager.appsettings["authcertthumbprint"];', 'var nativeclientid = "fc35ecf8-76f1-4e2c-a075-60d01dc4698f";', 'var certificate = findcertificatebythumbprint(cerificatethumbprint);', 'var assertioncert = new clientassertioncertificate(clientid, certificate);', 'keyvaultclient = new keyvaultclient(new keyvaultclient.authenticationcallback( (authority, resource, scope) => getaccesstoken(authority, resource, scope, assertioncert)), new injecthostheaderhttpmessagehandler());', 'userkeyvaultclient = new keyvaultclient(new keyvaultclient.authenticationcallback( (authority, resource, scope) => getuseraccesstoken(authority, resource, nativeclientid)), new injecthostheaderhttpmessagehandler());', 'list<keyoperationtype> successfuloperations = new list<keyoperationtype>();', 'list<keyoperationtype> failedoperations = new list<keyoperationtype>();', 'foreach (var operation in inputvalidator.getkeyoperations()) {', 'try {']
['is in process ', ['out', 'writeline', 'operation']]
azure_sdk sample_2141

['case keyoperationtype.list_storage_sas_definition: listsasdefinitions(storageaccountname);', 'break;', 'case keyoperationtype.delete_storage_sas_definition: deletesasdefinition(storageaccountname, sasdefinitionname);', 'break;', 'case keyoperationtype.delete_storage_account: deletestorageaccount(storageaccountname);', 'break;', '}', 'successfuloperations.add(operation);', '}', 'catch (keyvaulterrorexception exception) {']
['operation failed ', ['message']]
azure_sdk sample_2141

['break;', 'case keyoperationtype.delete_storage_account: deletestorageaccount(storageaccountname);', 'break;', '}', 'successfuloperations.add(operation);', '}', 'catch (keyvaulterrorexception exception) {', 'failedoperations.add(operation);', '}', '}']
['successful key vault operations ', ['out', 'writeline']]
azure_sdk sample_2141

['break;', '}', 'successfuloperations.add(operation);', '}', 'catch (keyvaulterrorexception exception) {', 'failedoperations.add(operation);', '}', '}', 'foreach (keyoperationtype type in successfuloperations) console.out.writeline("\\t{0}", type);', 'if (failedoperations.count > 0) {']
['failed key vault operations ', ['out', 'writeline']]
azure_sdk sample_2141

['private static keybundle updatekey(string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = (keyname == string.empty) ? inputvalidator.getkeyid() : keyname;', 'var keyattributes = inputvalidator.getupdatekeyattribute();', 'var updatedkey = task.run(() => keyvaultclient.updatekeyasync(vaultaddress, keyname, attributes: keyattributes)).configureawait(false).getawaiter().getresult();']
['updated key ', ['out', 'writeline']]
azure_sdk sample_2141

['private static keybundle importkey(out string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = inputvalidator.getkeyname();', 'var ishsm = inputvalidator.getkeytype() == jsonwebkeytype.rsahsm;', 'var keybundle = inputvalidator.getimportkeybundle();', 'var name = keyname;', 'var importedkey = task.run(() => keyvaultclient.importkeyasync(vaultaddress, name, keybundle, ishsm)).configureawait(false).getawaiter().getresult();']
['imported key ', ['out', 'writeline']]
azure_sdk sample_2141

['retrievedkey = task.run(() => keyvaultclient.getkeyasync(vaultaddress, keyname, keyversion)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'retrievedkey = task.run(() => keyvaultclient.getkeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();', '}', '}', 'else {', 'var keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();', 'retrievedkey = task.run(() => keyvaultclient.getkeyasync(keyid)).configureawait(false).getawaiter().getresult();', '}']
['retrived key ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void listkeyversions(string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = (keyname == string.empty) ? inputvalidator.getkeyid() : keyname;', 'var numkeyversions = 0;', 'var maxresults = 1;']
['list key versions ', ['out', 'writeline']]
azure_sdk sample_2141

['numkeyversions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}-{1}", m.identifier.name, m.identifier.version);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => keyvaultclient.getkeyversionsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null) {', 'numkeyversions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}-{1}", m.identifier.name, m.identifier.version);', '}', '}']
['number of versions of key in the vault ', ['out', 'writeline', 'keyname', 'numkeyversions']]
azure_sdk sample_2141

['private static keybundle createkey(keybundle keybundle, out string keyname) {', 'keybundle = keybundle ?? inputvalidator.getkeybundle();', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = inputvalidator.getkeyname();', 'var tags = inputvalidator.gettags();', 'var name = keyname;', 'var createdkey = task.run(() => keyvaultclient.createkeyasync(vaultaddress, name, keybundle.key.kty, keyattributes: keybundle.attributes, tags: tags)) .configureawait(false).getawaiter().getresult();']
['created key ', ['out', 'writeline']]
azure_sdk sample_2141

['private static secretbundle createsecret(out string secretname) {', 'secretname = inputvalidator.getsecretname();', 'string secretvalue = inputvalidator.getsecretvalue();', 'var tags = inputvalidator.gettags();', 'var contenttype = inputvalidator.getsecretcontenttype();', 'var name = secretname;', 'var secret = task.run(() => keyvaultclient.setsecretasync(inputvalidator.getvaultaddress(), name, secretvalue, tags, contenttype, inputvalidator.getsecretattributes())) .configureawait(false).getawaiter().getresult();']
['created updated secret ', ['out', 'writeline']]
azure_sdk sample_2141

['string secretversion = inputvalidator.getsecretversion();', 'if (secretversion != string.empty) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'string secretname = inputvalidator.getsecretname(true);', 'secret = task.run(() => keyvaultclient.getsecretasync(vaultaddress, secretname, secretversion)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'secretid = secretid ?? inputvalidator.getsecretid();', 'secret = task.run(() => keyvaultclient.getsecretasync(secretid)).configureawait(false).getawaiter().getresult();', '}']
['retrieved secret ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void listsecrets() {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var numsecretsinvault = 0;', 'var maxresults = 1;']
['list secrets ', ['out', 'writeline']]
azure_sdk sample_2141

['numsecretsinvault += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => keyvaultclient.getsecretsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null) {', 'numsecretsinvault += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', '}']
['number of secrets in the vault ', ['out', 'writeline', 'numsecretsinvault']]
azure_sdk sample_2141

['private static secretbundle deletesecret(string secretname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'secretname = (secretname == string.empty) ? inputvalidator.getsecretname() : secretname;', 'var secret = task.run(() => keyvaultclient.deletesecretasync(vaultaddress, secretname)).configureawait(false).getawaiter().getresult();']
['deleted secret ', ['out', 'writeline']]
azure_sdk sample_2141

['private static keybundle backuprestorekey(string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = inputvalidator.getkeyname();', 'var backupkeyresult = task.run(() => keyvaultclient.backupkeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();']
['the backup key value contains bytes to restore it into a key vault this value should be provided ', ['out', 'writeline', 'string', 'format', 'backupkeyresult', 'value', 'length']]
azure_sdk sample_2141

['private static keybundle backuprestorekey(string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = inputvalidator.getkeyname();', 'var backupkeyresult = task.run(() => keyvaultclient.backupkeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();', 'var newvaultaddress = inputvalidator.getvaultaddress();', 'task.run(() => keyvaultclient.deletekeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();', 'var restoredkey = task.run(() => keyvaultclient.restorekeyasync(newvaultaddress, backupkeyresult.value)).configureawait(false).getawaiter().getresult();']
['restored key ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void deletekey(string keyname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'keyname = (keyname == string.empty) ? inputvalidator.getkeyname() : keyname;', 'var keybundle = task.run(() => keyvaultclient.deletekeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();']
['key is deleted successfully ', ['out', 'writeline', 'string', 'format', 'keybundle', 'key', 'kid']]
azure_sdk sample_2141

['string keyversion = inputvalidator.getkeyversion();', 'if (keyversion != string.empty) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'string keyname = inputvalidator.getkeyname(true);', 'wrappedkey = task.run(() => keyvaultclient.wrapkeyasync(vaultaddress, keyname, keyversion, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'var keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();', 'wrappedkey = task.run(() => keyvaultclient.wrapkeyasync(keyid, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();', '}']
['the symmetric key is wrapped using key id and algorithm ', ['out', 'writeline', 'string', 'format', 'wrappedkey', 'kid', 'algorithm']]
azure_sdk sample_2141

['if (keyversion != string.empty) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'string keyname = inputvalidator.getkeyname(true);', 'wrappedkey = task.run(() => keyvaultclient.wrapkeyasync(vaultaddress, keyname, keyversion, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'var keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();', 'wrappedkey = task.run(() => keyvaultclient.wrapkeyasync(keyid, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();', '}', 'var unwrappedkey = task.run(() => keyvaultclient.unwrapkeyasync(wrappedkey.kid, algorithm, wrappedkey.result)).configureawait(false).getawaiter().getresult();']
['the unwrapped key is the same as the original key not ', ['out', 'writeline', 'string', 'format', 'symmetrickey', 'sequenceequal', 'unwrappedkey', 'result']]
azure_sdk sample_2141

['private static void encryptdecrypt(keybundle key) {', 'keyoperationresult operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var plaintext = inputvalidator.getplaintext();', 'string keyversion = inputvalidator.getkeyversion();', 'operationresult = _encrypt(key, keyversion, algorithm, plaintext);']
['the text is encrypted using key id and algorithm ', ['out', 'writeline', 'string', 'format', 'operationresult', 'kid', 'algorithm']]
azure_sdk sample_2141

['private static void encryptdecrypt(keybundle key) {', 'keyoperationresult operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var plaintext = inputvalidator.getplaintext();', 'string keyversion = inputvalidator.getkeyversion();', 'operationresult = _encrypt(key, keyversion, algorithm, plaintext);', 'var decryptedtext = task.run(() => keyvaultclient.decryptasync(operationresult.kid, algorithm, operationresult.result)).configureawait(false).getawaiter().getresult();']
['the decrypted text is the same as the original key not ', ['out', 'writeline', 'string', 'format', 'plaintext', 'sequenceequal', 'decryptedtext', 'result']]
azure_sdk sample_2141

['private static void encryptdecrypt(keybundle key) {', 'keyoperationresult operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var plaintext = inputvalidator.getplaintext();', 'string keyversion = inputvalidator.getkeyversion();', 'operationresult = _encrypt(key, keyversion, algorithm, plaintext);', 'var decryptedtext = task.run(() => keyvaultclient.decryptasync(operationresult.kid, algorithm, operationresult.result)).configureawait(false).getawaiter().getresult();']
['the decrypted text is ', ['out', 'writeline', 'string', 'format', 'encoding', 'getstring', 'decryptedtext', 'result']]
azure_sdk sample_2141

['private static void encrypt(keybundle key) {', 'keyoperationresult  operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var plaintext = inputvalidator.getplaintext();', 'string keyversion = inputvalidator.getkeyversion();', 'operationresult = _encrypt(key, keyversion, algorithm, plaintext);', 'file.writealltext("ciphertext.txt", convert.tobase64string(operationresult.result));']
['the text is encrypted using key id and algorithm ', ['out', 'writeline', 'string', 'format', 'operationresult', 'kid', 'algorithm']]
azure_sdk sample_2141

['private static void encrypt(keybundle key) {', 'keyoperationresult  operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var plaintext = inputvalidator.getplaintext();', 'string keyversion = inputvalidator.getkeyversion();', 'operationresult = _encrypt(key, keyversion, algorithm, plaintext);', 'file.writealltext("ciphertext.txt", convert.tobase64string(operationresult.result));']
['encrypted text base encoded ', ['out', 'writeline', 'string', 'format', 'convert', 'operationresult', 'result']]
azure_sdk sample_2141

['private static void decrypt(keybundle key) {', 'keyoperationresult operationresult;', 'var algorithm = inputvalidator.getencryptionalgorithm();', 'var ciphertext = inputvalidator.getciphertext();', 'keybundle   localkey;', 'localkey = (key ?? getkey(null));', 'operationresult = task.run(() => keyvaultclient.decryptasync(localkey.keyidentifier.tostring(), algorithm, ciphertext)).configureawait(false).getawaiter().getresult();']
['the decrypted text is ', ['out', 'writeline', 'string', 'format', 'encoding', 'getstring', 'operationresult', 'result']]
azure_sdk sample_2141

['string keyversion = inputvalidator.getkeyversion();', 'if (keyversion != string.empty) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'string keyname = inputvalidator.getkeyname(true);', 'signature = task.run(() => keyvaultclient.signasync(vaultaddress, keyname, keyversion, algorithm, digest)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'var keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();', 'signature = task.run(() => keyvaultclient.signasync(keyid, algorithm, digest)).configureawait(false).getawaiter().getresult();', '}']
['the signature is created using key id and algorithm ', ['out', 'writeline', 'string', 'format', 'signature', 'kid', 'algorithm']]
azure_sdk sample_2141

['if (keyversion != string.empty) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'string keyname = inputvalidator.getkeyname(true);', 'signature = task.run(() => keyvaultclient.signasync(vaultaddress, keyname, keyversion, algorithm, digest)).configureawait(false).getawaiter().getresult();', '}', 'else {', 'var keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();', 'signature = task.run(() => keyvaultclient.signasync(keyid, algorithm, digest)).configureawait(false).getawaiter().getresult();', '}', 'bool isverified = task.run(() => keyvaultclient.verifyasync(signature.kid, algorithm, digest, signature.result)).configureawait(false).getawaiter().getresult();']
['the signature is verified not ', ['out', 'writeline', 'string', 'format', 'isverified']]
azure_sdk sample_2141

['subject = "cn=keyvaultdemo" }', '};', 'var tags = inputvalidator.gettags();', 'var name = certificatename;', 'var pendingcertificate = task.run(() => keyvaultclient.createcertificateasync(vaultaddress, name, policy, new certificateattributes { enabled = true }, tags)).configureawait(false).getawaiter().getresult();', 'var pendingpollcount = 0;', 'while (pendingpollcount < 11) {', 'var pendingcertificateresponse = task.run(() => keyvaultclient.getcertificateoperationasync(vaultaddress, pendingcertificate.certificateoperationidentifier.name)) .configureawait(false).getawaiter().getresult();', 'printoutcertificateoperation(pendingcertificateresponse);', 'if (0 == string.compare(pendingcertificateresponse.status, "inprogress", true)) {']
['waiting on the long running operation to complete creating the certificate ', ['out', 'writeline']]
azure_sdk sample_2141

['while (pendingpollcount < 11) {', 'var pendingcertificateresponse = task.run(() => keyvaultclient.getcertificateoperationasync(vaultaddress, pendingcertificate.certificateoperationidentifier.name)) .configureawait(false).getawaiter().getresult();', 'printoutcertificateoperation(pendingcertificateresponse);', 'if (0 == string.compare(pendingcertificateresponse.status, "inprogress", true)) {', 'thread.sleep(timespan.fromseconds(5));', 'pendingpollcount++;', 'continue;', '}', 'if (0 == string.compare(pendingcertificateresponse.status, "completed", true)) {', 'var certbundle = task.run(() => keyvaultclient.getcertificateasync(pendingcertificateresponse.target)).configureawait(false).getawaiter().getresult();']
['created certificate ', ['out', 'writeline']]
azure_sdk sample_2141

['if (file.exists(pfxpath)) {', 'var x509collection = new x509certificate2collection();', 'x509collection.import(pfxpath, pfxpassword, x509keystorageflags.exportable);', 'var x509bytes = x509collection.cast<x509certificate2>().single(s => s.hasprivatekey).export(x509contenttype.pfx, pfxpassword);', 'base64x509 = convert.tobase64string(x509bytes);', '}', 'else {', 'base64x509 = "miijowibazcccpcgcsqgsib3dqehaacccogeggjkmiii4dccbgkgcsqgsib3dqehaaccbfoeggx2miif8jccbe4gcyqgsib3dqemcgecoiie }', 'var name = certificatename;', 'var certificate = task.run(() => keyvaultclient.importcertificateasync(vaultaddress, name, base64x509, pfxpassword, policy)).configureawait(false).getawaiter().getresult();']
['created certificate ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void listcertificates() {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var numsecretsinvault = 0;', 'var maxresults = 1;']
['list certificate ', ['out', 'writeline']]
azure_sdk sample_2141

['numsecretsinvault += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => keyvaultclient.getcertificatesnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null && results != null) {', 'numsecretsinvault += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', '}']
['number of certificates in the vault ', ['out', 'writeline', 'numsecretsinvault']]
azure_sdk sample_2141

['private static void listcertificateversions(string certificatename) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'certificatename = (certificatename == string.empty) ? inputvalidator.getkeyid() : certificatename;', 'var numkeyversions = 0;', 'var maxresults = 1;']
['list certificate versions ', ['out', 'writeline']]
azure_sdk sample_2141

['numkeyversions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}-{1}", m.identifier.name, m.identifier.version);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => keyvaultclient.getcertificateversionsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null && results != null) {', 'numkeyversions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}-{1}", m.identifier.name, m.identifier.version);', '}', '}']
['number of versions of certificate in the vault ', ['out', 'writeline', 'certificatename', 'numkeyversions']]
azure_sdk sample_2141

['private static certificatebundle deletecertificate(string certificatename) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'certificatename = (certificatename == string.empty) ? inputvalidator.getcertificatename() : certificatename;', 'var certificate = task.run(() => keyvaultclient.deletecertificateasync(vaultaddress, certificatename)).configureawait(false).getawaiter().getresult();']
['deleted certificate ', ['out', 'writeline']]
azure_sdk sample_2141

['private static storagebundle createstorageaccount(out string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'storageaccountname = inputvalidator.getstorageaccountname();', 'var name = storageaccountname;', 'var armstorageresourceid = configurationmanager.appsettings["armstorageaccountresourceid"];', 'var keyname = "key1";', 'var storageaccount = task.run( () => userkeyvaultclient.setstorageaccountasync(vaultaddress, name, armstorageresourceid, keyname, false)) .configureawait(false).getawaiter().getresult();']
['created storage account ', ['out', 'writeline']]
azure_sdk sample_2141

['private static storagebundle getstorageaccount(string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var storageaccount = task.run( () => userkeyvaultclient.getstorageaccountasync(vaultaddress, storageaccountname)) .configureawait(false).getawaiter().getresult();']
['retrieved storage account ', ['out', 'writeline']]
azure_sdk sample_2141

['private static storagebundle updatestorageaccount(string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var keyname = "key2";', 'var regenerationperiod = xmlconvert.tostring(timespan.fromdays(5));', 'var storageaccount = task.run( () => userkeyvaultclient.updatestorageaccountasync(vaultaddress, storageaccountname, keyname, false, regenerationperiod)) .configureawait(false).getawaiter().getresult();']
['updated storage account ', ['out', 'writeline']]
azure_sdk sample_2141

['private static storagebundle regeneratestorageaccountkey(string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var keyname = "key1";', 'var storageaccount = task.run( () => userkeyvaultclient.regeneratestorageaccountkeyasync(vaultaddress, storageaccountname, keyname)) .configureawait(false).getawaiter().getresult();']
['updated storage account ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void liststorageaccounts() {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var numstorageaccounts = 0;', 'var maxresults = 1;']
['list storage accounts ', ['out', 'writeline']]
azure_sdk sample_2141

['numstorageaccounts += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => userkeyvaultclient.getstorageaccountsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null && results != null) {', 'numstorageaccounts += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', '}']
['number of storage accounts in the vault ', ['out', 'writeline', 'numstorageaccounts']]
azure_sdk sample_2141

['private static storagebundle deletestorageaccount(string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var storageaccount = task.run( () => userkeyvaultclient.deletestorageaccountasync(vaultaddress, storageaccountname)) .configureawait(false).getawaiter().getresult();']
['delted storage account ', ['out', 'writeline']]
azure_sdk sample_2141

['private static sasdefinitionbundle createsasdefinition(string storageaccountname, out string sasdefinitionname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'sasdefinitionname = inputvalidator.getsasdefinitionname();', 'var name = sasdefinitionname;', 'var fields = new dictionary<string, string>() {', '{"sastype", "account"}, {"signedprotocols", "https"}, {"signedservices", "bq"}, {"signedresourcetypes", "sco"}, {"signedpermissions", "rw"}, {"signedversion", "2016-05-31"}, {"validityperiod", "pt10h"}', '};', 'var sasdefinition = task.run( () => userkeyvaultclient.setsasdefinitionasync(vaultaddress, storageaccountname, name, fields)) .configureawait(false).getawaiter().getresult();']
['created storage sas definition ', ['out', 'writeline']]
azure_sdk sample_2141

['private static sasdefinitionbundle getsasdefinition(string storageaccountname, string sasdefinitionname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var sasdefinition = task.run( () => userkeyvaultclient.getsasdefinitionasync(vaultaddress, storageaccountname, sasdefinitionname)) .configureawait(false).getawaiter().getresult();']
['retrieved storage sas definition ', ['out', 'writeline']]
azure_sdk sample_2141

['private static sasdefinitionbundle updatesasdefinition(string storageaccountname, string sasdefinitionname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var fields = new dictionary<string, string>() {', '{"sastype", "account"}, {"signedprotocols", "https"}, {"signedservices", "t"}, {"signedresourcetypes", "s"}, {"signedpermissions", "rl"}, {"signedversion", "2016-05-31"}, {"validityperiod", "p1d"}', '};', 'var sasdefinition = task.run( () => userkeyvaultclient.updatesasdefinitionasync(vaultaddress, storageaccountname, sasdefinitionname, fields)) .configureawait(false).getawaiter().getresult();']
['updated storage sas definition ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void listsasdefinitions(string storageaccountname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var numsasdefinitions = 0;', 'var maxresults = 1;']
['list storage sas definitions ', ['out', 'writeline']]
azure_sdk sample_2141

['numsasdefinitions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', 'while (results != null && !string.isnullorwhitespace(results.nextpagelink)) {', 'results = task.run(() => userkeyvaultclient.getsasdefinitionsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();', 'if (results != null && results != null) {', 'numsasdefinitions += results.count();', 'foreach (var m in results) console.out.writeline("\\t{0}", m.identifier.name);', '}', '}']
['number of storage sas definitions in the vault ', ['out', 'writeline', 'numsasdefinitions']]
azure_sdk sample_2141

['private static sasdefinitionbundle deletesasdefinition(string storageaccountname, string sasdefinitionname) {', 'var vaultaddress = inputvalidator.getvaultaddress();', 'var sasdefinition = task.run( () => keyvaultclient.deletesasdefinitionasync(vaultaddress, storageaccountname, sasdefinitionname)) .configureawait(false).getawaiter().getresult();']
['delted storage sas definition ', ['out', 'writeline']]
azure_sdk sample_2141

['private static void printoutkey(keybundle keybundle) {']
['key key id key type ', ['out', 'writeline', 'keybundle', 'key', 'kid', 'keybundle', 'key', 'kty']]
azure_sdk sample_2141

['private static void printoutkey(keybundle keybundle) {', 'var expirydatestr = keybundle.attributes.expires.hasvalue ? keybundle.attributes.expires.tostring() : "never";', 'var notbeforestr = keybundle.attributes.notbefore.hasvalue ? keybundle.attributes.notbefore.tostring() : unixtimejsonconverter.epochdate.tostring();']
['key attributes is the key enabled expiry date enable date ', ['out', 'writeline', 'keybundle', 'attributes', 'enabled', 'expirydatestr', 'notbeforestr']]
azure_sdk sample_2141

['private static void printoutsecret(secretbundle secret) {']
['secret id secret value ', ['out', 'writeline', 'secret', 'id', 'secret', 'value']]
azure_sdk sample_2141

['private static void printoutsecret(secretbundle secret) {', 'var expirydatestr = secret.attributes.expires.hasvalue ? secret.attributes.expires.tostring() : "never";', 'var notbeforestr = secret.attributes.notbefore.hasvalue ? secret.attributes.notbefore.tostring() : unixtimejsonconverter.epochdate.tostring();']
['secret attributes is the key enabled expiry date enable date content type ', ['out', 'writeline', 'secret', 'attributes', 'enabled', 'expirydatestr', 'notbeforestr', 'secret', 'contenttype']]
azure_sdk sample_2141

['private static void printoutcertificate(certificatebundle certificatebundle) {']
['certificate id ', ['out', 'writeline', 'certificatebundle', 'id']]
azure_sdk sample_2141

['private static void printoutcertificate(certificatebundle certificatebundle) {', 'var expirydatestr = certificatebundle.attributes.expires.hasvalue ? certificatebundle.attributes.expires.tostring() : "never";', 'var notbeforestr = certificatebundle.attributes.notbefore.hasvalue ? certificatebundle.attributes.notbefore.tostring() : unixtimejsonconverter.epochdate.tostring();']
['certificate attributes is enabled expiry date enable date thumbprint ', ['out', 'writeline', 'certificatebundle', 'attributes', 'enabled', 'expirydatestr', 'notbeforestr', 'tohexstring', 'certificatebundle']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['storage account id ', ['out', 'writeline', 'storagebundle', 'id']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['arm storage account resource id ', ['out', 'writeline', 'storagebundle', 'resourceid']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['storage account active key name ', ['out', 'writeline', 'storagebundle', 'activekeyname']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['storage account regeneration period days ', ['out', 'writeline', 'xmlconvert', 'totimespan', 'storagebundle', 'regenerationperiod', 'totaldays']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['storage account auto regeneration enabled ', ['out', 'writeline', 'storagebundle', 'autoregeneratekey']]
azure_sdk sample_2141

['private static void printoutstorageaccount(storagebundle storagebundle) {']
['storage account attributes is enabled ', ['out', 'writeline', 'storagebundle', 'attributes', 'enabled']]
azure_sdk sample_2141

['private static void printoutstoragesasdefinition(sasdefinitionbundle sasdefinitionbundle) {']
['storage sas definition id ', ['out', 'writeline', 'sasdefinitionbundle', 'id']]
azure_sdk sample_2141

['private static void printoutstoragesasdefinition(sasdefinitionbundle sasdefinitionbundle) {']
['storage sas token secret ', ['out', 'writeline', 'sasdefinitionbundle', 'secretid']]
azure_sdk sample_2141

['private static void printoutstoragesasdefinition(sasdefinitionbundle sasdefinitionbundle) {', 'console.out.writeline("storage sas definition parameters: {{ {0} }}", string.join(", ", sasdefinitionbundle.parameters.select(kvp => kvp.key + ":" + kvp.value.tostring())));']
['storage sas definition attributes is enabled ', ['out', 'writeline', 'sasdefinitionbundle', 'attributes', 'enabled']]
azure_sdk sample_2141

['private static void printoutcertificateoperation(certificateoperation certificateoperation) {']
['certificate id ', ['out', 'writeline', 'certificateoperation', 'id']]
azure_sdk sample_2141

['private static void printoutcertificateoperation(certificateoperation certificateoperation) {']
['certificate opeation status status detail target issuer reference name ', ['out', 'writeline', 'certificateoperation', 'status', 'certificateoperation', 'statusdetails', 'certificateoperation', 'target', 'certificateoperation', 'issuerparameters', 'name']]
azure_sdk sample_2141

['string jobid = "bug2329884job-" + testutilities.getmyname();', 'protocol.requestinterceptor interceptor = null;', 'try {', 'const string taskid = "hiworld";', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'unboundjob.poolinformation.poolid = this.poolfixture.poolid;', 'unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);']
['initial job commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5793

['unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, new timespan(0, 3 /*min*/, 0));', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);']
['recent tasks ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5793

['cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, new timespan(0, 3 /*min*/, 0));', 'cloudtask boundtask = boundjob.gettask(taskid);', "string computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];", 'computenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);', 'foreach (taskinformation recenttask in computenode.recenttasks) {']
['compute node has recent task job task state subtask ', ['testoutputhelper', 'writeline', 'recenttask', 'jobid', 'recenttask', 'taskid', 'recenttask', 'taskstate', 'recenttask', 'subtaskid']]
azure_sdk sample_5793

['public void bug2342986_starttaskmissingoncomputenode() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'cloudpool pool = batchcli.pooloperations.getpool(this.poolfixture.poolid);']
['getting pool ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5793

['public void bug2342986_starttaskmissingoncomputenode() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'cloudpool pool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'starttask poolstarttask = pool.starttask;', 'assert.notnull(poolstarttask);', 'assert.notnull(poolstarttask.environmentsettings);', 'ienumerable<computenode> computenodes = pool.listcomputenodes();', 'assert.true(computenodes.any());']
['checking every compute nodes start task in the pool matches the pools start task ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5793

['public void bug2342986_starttaskmissingoncomputenode() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'cloudpool pool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'starttask poolstarttask = pool.starttask;', 'assert.notnull(poolstarttask);', 'assert.notnull(poolstarttask.environmentsettings);', 'ienumerable<computenode> computenodes = pool.listcomputenodes();', 'assert.true(computenodes.any());', 'foreach (computenode computenode in computenodes) {']
['checking start task of compute node ', ['testoutputhelper', 'writeline', 'computenode', 'id']]
azure_sdk sample_5793

['}', '}', '}', 'finally {', 'try {', 'if (null != victim) {', 'victim.enablescheduling();', '}', '}', 'catch (exception ex) {']
['onlineofflinetest exception during exit trying to restore scheduling state ', ['testoutputhelper', 'writeline', 'string', 'format', 'ex', 'tostring']]
azure_sdk sample_5793

['bob.password = "password";', 'bob.sshpublickey = "base64==";', 'cnunamestodelete.add(bob.name);', 'bob.commit(computenodeusercommitsemantics.adduser);', 'bob.sshpublickey = "base65==";', 'bob.commit(computenodeusercommitsemantics.updateuser);', '}', 'finally {', 'try {', 'foreach (string curcnuname in cnunamestodelete) {']
['testcomputenodeuseriaas attempting to delete the following nodeid user ', ['testoutputhelper', 'writeline', 'cn', 'id', 'curcnuname']]
azure_sdk sample_5793

['bob.sshpublickey = "base65==";', 'bob.commit(computenodeusercommitsemantics.updateuser);', '}', 'finally {', 'try {', 'foreach (string curcnuname in cnunamestodelete) {', 'cn.deletecomputenodeuser(curcnuname);', '}', '}', 'catch (exception ex) {']
['testcomputenodeuseriaas exception deleting user account ex ', ['testoutputhelper', 'writeline', 'ex', 'tostring']]
azure_sdk sample_5793

['public void testjsonsamples<tsample, tresource>(itestoutputhelper logger) {', 'int failurecount = 0;', 'int samplecount = 0;', 'ienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();', 'foreach (jsonsampleinfo sampleinfo in samples) {', 'string samplename = sampleinfo.name;', 'string serializedjson = string.empty;', 'samplecount++;']
['testing json sample ', ['name']]
azure_sdk sample_2373

['public void testjsonsamples<tsample, tresource>(itestoutputhelper logger) {', 'int failurecount = 0;', 'int samplecount = 0;', 'ienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();', 'foreach (jsonsampleinfo sampleinfo in samples) {', 'string samplename = sampleinfo.name;', 'string serializedjson = string.empty;', 'samplecount++;', 'try {', 'testjsonsample<tresource>(sampleinfo);']
['passed ', ['writeline', 'samplename']]
azure_sdk sample_2373

['int samplecount = 0;', 'ienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();', 'foreach (jsonsampleinfo sampleinfo in samples) {', 'string samplename = sampleinfo.name;', 'string serializedjson = string.empty;', 'samplecount++;', 'try {', 'testjsonsample<tresource>(sampleinfo);', '}', 'catch (exception ex) {']
['failed exception json ', ['json', 'serializedjson']]
azure_sdk sample_2373

['"10.1.1.1", "10.1.2.4" }', '}, subnets = new list<subnet>() {', 'new subnet() {', 'name = gwsubnetname, addressprefix = "10.0.0.0/24", }, new subnet() {', 'name = subnet2name, addressprefix = "10.0.1.0/24", }', '}', '};', 'var putvnetresponse = networkmanagementclient.virtualnetworks.createorupdate(resourcegroupname, vnetname, vnet);', 'var getvnetresponse = networkmanagementclient.virtualnetworks.get(resourcegroupname, vnetname);', 'var getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, gwsubnetname);']
['virtual network gatewaysubnet id ', ['writeline', 'getsubnetresponse', 'id']]
azure_sdk sample_3229

['system.threading.thread.sleep(5000);', '{', 'bool repeat = true;', 'while (repeat) {', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'repeat = false;', 'foreach (cloudtask curtask in boundjob.listtasks()) {', 'if (curtask.state != microsoft.azure.batch.common.taskstate.completed) {', 'repeat = true;', 'this.testoutputhelper.writeline("manual wait task id: " + curtask.id + ", state = " + curtask.state);']
['poolstate currentdedicated ', ['testoutputhelper', 'writeline', 'boundpool', 'state', 'boundpool', 'currentdedicatedcomputenodes']]
azure_sdk sample_5797

['system.threading.thread.sleep(5000);', '{', 'bool repeat = true;', 'while (repeat) {', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'repeat = false;', 'foreach (cloudtask curtask in boundjob.listtasks()) {', 'if (curtask.state != microsoft.azure.batch.common.taskstate.completed) {', 'repeat = true;', 'this.testoutputhelper.writeline("manual wait task id: " + curtask.id + ", state = " + curtask.state);']
['compute nodes ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['{', 'bool repeat = true;', 'while (repeat) {', 'cloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);', 'repeat = false;', 'foreach (cloudtask curtask in boundjob.listtasks()) {', 'if (curtask.state != microsoft.azure.batch.common.taskstate.completed) {', 'repeat = true;', 'this.testoutputhelper.writeline("manual wait task id: " + curtask.id + ", state = " + curtask.state);', 'foreach (computenode curcomputenode in boundpool.listcomputenodes()) {']
['computenode id state ', ['testoutputhelper', 'writeline', 'curcomputenode', 'id', 'curcomputenode', 'state']]
azure_sdk sample_5797

['foreach (cloudtask curtask in boundjob.listtasks()) {', 'if (curtask.state != microsoft.azure.batch.common.taskstate.completed) {', 'repeat = true;', 'this.testoutputhelper.writeline("manual wait task id: " + curtask.id + ", state = " + curtask.state);', 'foreach (computenode curcomputenode in boundpool.listcomputenodes()) {', '}', '}', '}', '}', '}']
['adding longer running tasks ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['for (int i = 0; i < 15; i++) {', 'cloudtask unboundtask = new cloudtask(i.tostring() + "_a234567890a234567890a234567890a234567890a234567890a234567890", "cmd /c ping 127.0.0.1 -n 4");', 'boundjob.addtask(unboundtask);', '}', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor tsm = utilities.createtaskstatemonitor();', 'ipagedenumerable<cloudtask> tasklist = boundjob.listtasks();', 'odatamonitorcontrol odmc = new odatamonitorcontrol();', 'odmc.delaybetweendatafetch = new timespan(0);', 'assert.equal(500, odmc.delaybetweendatafetch.milliseconds);']
['calling taskstatemonitor waitall this will take a while ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-testboundjobverbs";', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'cloudjob.commit();', 'cloudjob job = batchcli.joboperations.getjob(jobid);', 'job.disable(disablejoboption.terminate);', 'cloudjob disabledjob = batchcli.joboperations.getjob(jobid);']
['disabledjob state ', ['testoutputhelper', 'writeline', 'disabledjob', 'state']]
azure_sdk sample_5797

['cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'cloudjob.commit();', 'cloudjob job = batchcli.joboperations.getjob(jobid);', 'job.disable(disablejoboption.terminate);', 'cloudjob disabledjob = batchcli.joboperations.getjob(jobid);', 'assert.true(disabledjob.state == jobstate.disabled || disabledjob.state == jobstate.disabling);', 'job.enable();', 'cloudjob enabledjob = batchcli.joboperations.getjob(jobid);']
['enabledjob state ', ['testoutputhelper', 'writeline', 'enabledjob', 'state']]
azure_sdk sample_5797

['cloudjob.commit();', 'cloudjob job = batchcli.joboperations.getjob(jobid);', 'job.disable(disablejoboption.terminate);', 'cloudjob disabledjob = batchcli.joboperations.getjob(jobid);', 'assert.true(disabledjob.state == jobstate.disabled || disabledjob.state == jobstate.disabling);', 'job.enable();', 'cloudjob enabledjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.active, jobstate.active);', 'batchcli.joboperations.disablejob(jobid, disablejoboption.terminate);', 'disabledjob = batchcli.joboperations.getjob(jobid);']
['disabledjob state ', ['testoutputhelper', 'writeline', 'disabledjob', 'state']]
azure_sdk sample_5797

['cloudjob disabledjob = batchcli.joboperations.getjob(jobid);', 'assert.true(disabledjob.state == jobstate.disabled || disabledjob.state == jobstate.disabling);', 'job.enable();', 'cloudjob enabledjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.active, jobstate.active);', 'batchcli.joboperations.disablejob(jobid, disablejoboption.terminate);', 'disabledjob = batchcli.joboperations.getjob(jobid);', 'assert.true(disabledjob.state == jobstate.disabled || disabledjob.state == jobstate.disabling);', 'batchcli.joboperations.enablejob(jobid);', 'enabledjob = batchcli.joboperations.getjob(jobid);']
['enabledjob state ', ['testoutputhelper', 'writeline', 'enabledjob', 'state']]
azure_sdk sample_5797

['cloudjob enabledjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.active, jobstate.active);', 'batchcli.joboperations.disablejob(jobid, disablejoboption.terminate);', 'disabledjob = batchcli.joboperations.getjob(jobid);', 'assert.true(disabledjob.state == jobstate.disabled || disabledjob.state == jobstate.disabling);', 'batchcli.joboperations.enablejob(jobid);', 'enabledjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.active, jobstate.active);', 'job.terminate("need some reason");', 'cloudjob terminatedjob = batchcli.joboperations.getjob(jobid);']
['terminatedjob state ', ['testoutputhelper', 'writeline', 'terminatedjob', 'state']]
azure_sdk sample_5797

['enabledjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.active, jobstate.active);', 'job.terminate("need some reason");', 'cloudjob terminatedjob = batchcli.joboperations.getjob(jobid);', 'assert.true(terminatedjob.state == jobstate.terminating || terminatedjob.state == jobstate.completed);', 'if (terminatedjob.state == jobstate.terminating) {', 'thread.sleep(timespan.fromseconds(5));', '}', 'job.delete();', 'try {']
['expected exception testing that job does not exist ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['try {', 'cloudjob deletedjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(jobstate.deleting, deletedjob.state);', '}', 'catch (exception e) {', 'assert.isassignablefrom<batchexception>(e);', 'batchexception be = e as batchexception;', 'assert.notnull(be.requestinformation);', 'assert.notnull(be.requestinformation.batcherror);', 'assert.equal(batcherrorcodestrings.jobnotfound, be.requestinformation.batcherror.code);']
['job was deleted successfully ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['public void bug1433069testboundjobcommit() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-testboundjobcommit";', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };']
['initial job schedule commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-testboundjobcommit";', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'cloudjob.commit();', 'cloudjob refreshablejob = batchcli.joboperations.getjob(jobid);', 'const int newjobpriority = 5;', 'onalltaskscomplete newonalltaskscomplete = onalltaskscomplete.noaction;']
['job priority is ', ['testoutputhelper', 'writeline', 'refreshablejob', 'priority']]
azure_sdk sample_5797

['autopoolspec.poolspecification = poolspec;', 'poolinformation poolinfo = new poolinformation();', 'poolinfo.autopoolspecification = autopoolspec;', 'unboundjob.poolinformation = poolinfo;', 'const int originalpriority = 0;', 'unboundjob.priority = originalpriority;', 'list<metadataitem> originalmetadata = new list<metadataitem>();', 'originalmetadata.add(new metadataitem("meta1", "value1"));', 'originalmetadata.add(new metadataitem("meta2", "value2"));', 'unboundjob.metadata = originalmetadata;']
['creating job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5797

['unboundjob.metadata = originalmetadata;', 'unboundjob.commit();', 'try {', 'cloudjob createdjob = batchcli.joboperations.getjob(jobid);', 'assert.notequal(jobstate.disabled, createdjob.state);', 'int updatedpriority = originalpriority + 1;', 'list<metadataitem> updatedmetadata = new list<metadataitem>();', 'updatedmetadata.add(new metadataitem("updatedmeta1", "value1"));', 'createdjob.priority = updatedpriority;', 'createdjob.metadata = updatedmetadata;']
['updating job without altering poolinformation ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5797

['list<metadataitem> updatedmetadata = new list<metadataitem>();', 'updatedmetadata.add(new metadataitem("updatedmeta1", "value1"));', 'createdjob.priority = updatedpriority;', 'createdjob.metadata = updatedmetadata;', 'createdjob.commit();', 'cloudjob updatedjob = batchcli.joboperations.getjob(jobid);', 'assert.equal(updatedpriority, updatedjob.priority);', 'assert.equal(updatedjob.metadata.count, updatedjob.priority);', 'assert.equal(updatedjob.metadata[0].name, updatedmetadata[0].name);', 'assert.equal(updatedjob.metadata[0].value, updatedmetadata[0].value);']
['disabling job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5797

['updatedjob.disable(disablejoboption.terminate);', 'while (updatedjob.state != jobstate.disabled) {', 'thread.sleep(500);', 'updatedjob.refresh();', '}', 'assert.equal(jobstate.disabled, updatedjob.state);', 'bool updatedkeepalive = !originalkeepalive;', 'updatedjob.poolinformation.autopoolspecification.keepalive = updatedkeepalive;', 'int updatedagainpriority = updatedpriority + 1;', 'updatedjob.priority = updatedagainpriority;']
['updating job properties including poolinformation ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5797

['bool updatedkeepalive = !originalkeepalive;', 'updatedjob.poolinformation.autopoolspecification.keepalive = updatedkeepalive;', 'int updatedagainpriority = updatedpriority + 1;', 'updatedjob.priority = updatedagainpriority;', 'updatedjob.commit();', 'cloudjob updatedpoolinfojob = batchcli.joboperations.getjob(jobid);', 'assert.equal(updatedkeepalive, updatedpoolinfojob.poolinformation.autopoolspecification.keepalive);', 'assert.equal(updatedagainpriority, updatedpoolinfojob.priority);', '}', 'finally {']
['deleting job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5797

['int updatedagainpriority = updatedpriority + 1;', 'updatedjob.priority = updatedagainpriority;', 'updatedjob.commit();', 'cloudjob updatedpoolinfojob = batchcli.joboperations.getjob(jobid);', 'assert.equal(updatedkeepalive, updatedpoolinfojob.poolinformation.autopoolspecification.keepalive);', 'assert.equal(updatedagainpriority, updatedpoolinfojob.priority);', '}', 'finally {', 'testutilities.deletejobifexistsasync(batchcli, jobid).wait();', 'foreach (cloudpool pool in batchcli.pooloperations.listpools(new odatadetaillevel(filterclause: string.format("startswith(id,\'{0}\')", autopoolprefix)))) {']
['deleting pool ', ['testoutputhelper', 'writeline', 'pool', 'id']]
azure_sdk sample_5797

['using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = "bug1965363job-" + testutilities.getmyname();', 'try {', 'poolinformation poolinfo = new poolinformation() {', 'autopoolspecification = new autopoolspecification() {', 'poollifetimeoption = poollifetimeoption.job, poolspecification = new poolspecification() {', 'cloudserviceconfiguration = new cloudserviceconfiguration(poolfixture.osfamily), virtualmachinesize = poolfixture.vmsize, targetdedicatedcomputenodes = 1 }', '}', '};', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, poolinfo);']
['commiting quickjob ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['autopoolspecification = new autopoolspecification() {', 'poollifetimeoption = poollifetimeoption.job, poolspecification = new poolspecification() {', 'cloudserviceconfiguration = new cloudserviceconfiguration(poolfixture.osfamily), virtualmachinesize = poolfixture.vmsize, targetdedicatedcomputenodes = 1 }', '}', '};', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, poolinfo);', 'unboundjob.commit();', 'cloudtask task = new cloudtask("bug1965363wat7osversionfeaturesquickjobwithautopooltask", "cmd /c echo bug1965363");', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(task);']
['getting pool name ', ['poolid']]
azure_sdk sample_5797

['};', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, poolinfo);', 'unboundjob.commit();', 'cloudtask task = new cloudtask("bug1965363wat7osversionfeaturesquickjobwithautopooltask", "cmd /c echo bug1965363");', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(task);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();', 'odatamonitorcontrol odcontrol = new odatamonitorcontrol();', 'odcontrol.delaybetweendatafetch = timespan.fromseconds(5);']
['invoking taskstatemonitor ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['unboundjob.commit();', 'cloudtask task = new cloudtask("bug1965363wat7osversionfeaturesquickjobwithautopooltask", "cmd /c echo bug1965363");', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(task);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();', 'odatamonitorcontrol odcontrol = new odatamonitorcontrol();', 'odcontrol.delaybetweendatafetch = timespan.fromseconds(5);', 'tsm.waitall( boundjob.listtasks(), taskstate.completed, timespan.fromminutes(15), odcontrol, new[] {', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {']
['issuing request type ', ['testoutputhelper', 'writeline', 'x', 'gettype', 'tostring']]
azure_sdk sample_5797

['cloudtask task = new cloudtask("bug1965363wat7osversionfeaturesquickjobwithautopooltask", "cmd /c echo bug1965363");', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(task);', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'taskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();', 'odatamonitorcontrol odcontrol = new odatamonitorcontrol();', 'odcontrol.delaybetweendatafetch = timespan.fromseconds(5);', 'tsm.waitall( boundjob.listtasks(), taskstate.completed, timespan.fromminutes(15), odcontrol, new[] {', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {', 'list<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();']
['comnpute nodes ', ['testoutputhelper', 'writeline', 'allcomputenodes', 'count']]
azure_sdk sample_5797

['action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientfromenvironmentasync().result) {', 'string jobid = "jobconditionalheaders-" + testutilities.getmyname();', 'try {', 'poolinformation poolinfo = new poolinformation() {', 'poolid = "fake" };', 'cloudjob unboundjob = batchcli.joboperations.createjob(jobid, poolinfo);', 'unboundjob.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'string capturedetag1 = boundjob.etag;']
['etag is ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5797

['private async task<ipage<noderesource>> listnodesinsubscription(servermanagementclient client) {', 'var nodes = await client.node.listasync();', 'assert.notnull(nodes);', 'var found = false;', 'foreach (var n in nodes) {', 'found = true;']
['found node in subscription ', ['string', 'format', 'n', 'name']]
azure_sdk sample_7881

['private async task<gatewayresource> createandconfiguregateway(servermanagementclient client, string gatewayname) {', 'gatewayresource gateway;', 'gateway = await client.gateway.createasync( resourcegroup, gatewayname, upgrademode: upgrademode.automatic, location: location );', 'assert.notnull(gateway);']
['created gateway ', ['string', 'format', 'gateway', 'name']]
azure_sdk sample_7881

['private async task<gatewayresource> createandconfiguregateway(servermanagementclient client, string gatewayname) {', 'gatewayresource gateway;', 'gateway = await client.gateway.createasync( resourcegroup, gatewayname, upgrademode: upgrademode.automatic, location: location );', 'assert.notnull(gateway);', 'var profile = await client.gateway.getprofileasync(resourcegroup, gatewayname);', 'if (testinginteractively) {', 'stopgateway();']
['profile ', ['string', 'format', 'profile', 'tojson']]
azure_sdk sample_7881

['gateway = await client.gateway.getasync(resourcegroup, gatewayone, gatewayexpandoption.status);', 'assert.notnull(gateway);', 'assert.notnull(gateway.latestpublishedmsiversion);', 'assert.notnull(gateway.activemessagecount);', 'writeline(gateway.tojson());', 'var gateways = await client.gateway.listasync();', 'assert.notnull(gateways);', 'var found = false;', 'foreach (var g in gateways) {', 'found = true;']
['found gateway in subscription ', ['string', 'format', 'g', 'name']]
azure_sdk sample_7881

['startgateway();', '}', 'catch {', '}', '}', 'try {', 'if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}']
['creating node ', []]
azure_sdk sample_7881

['catch {', '}', '}', 'try {', 'if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}', 'var node = await createnode(client, gateway, string.empty, string.empty);', 'assert.notnull(node);']
['getting node ', []]
azure_sdk sample_7881

['if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}', 'var node = await createnode(client, gateway, string.empty, string.empty);', 'assert.notnull(node);', 'node = await client.node.getasync(resourcegroup, nodename);', 'assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);']
['listing nodes ', []]
azure_sdk sample_7881

['}', 'var node = await createnode(client, gateway, string.empty, string.empty);', 'assert.notnull(node);', 'node = await client.node.getasync(resourcegroup, nodename);', 'assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var nodes = await listnodesinsubscription(client);', 'nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());']
['creating session ', []]
azure_sdk sample_7881

['node = await client.node.getasync(resourcegroup, nodename);', 'assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var nodes = await listnodesinsubscription(client);', 'nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);']
['getting session ', []]
azure_sdk sample_7881

['assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var nodes = await listnodesinsubscription(client);', 'nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);']
['session get response ', ['string', 'format', 'session', 'tojson']]
azure_sdk sample_7881

['assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var nodes = await listnodesinsubscription(client);', 'nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);']
['creating powershell session ', []]
azure_sdk sample_7881

['var nodes = await listnodesinsubscription(client);', 'nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);', 'var ps = await client.powershell.createsessionasync(resourcegroup, node.name, session.name, "00000000-0000-0000-0000-000000000000");', 'assert.notnull(ps);']
['running powershell command ', []]
azure_sdk sample_7881

['nodes = await client.node.listforresourcegroupasync(resourcegroup);', 'assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);', 'var ps = await client.powershell.createsessionasync(resourcegroup, node.name, session.name, "00000000-0000-0000-0000-000000000000");', 'assert.notnull(ps);', 'await runpowershellcommand(client, node, session, ps);']
['try tab completion ', []]
azure_sdk sample_7881

['assert.equal(1, nodes.count());', 'var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);', 'var ps = await client.powershell.createsessionasync(resourcegroup, node.name, session.name, "00000000-0000-0000-0000-000000000000");', 'assert.notnull(ps);', 'await runpowershellcommand(client, node, session, ps);', 'await gettabcompletionresults(client, node, session, ps);']
['list powershell sessions ', []]
azure_sdk sample_7881

['var session = await client.session.createasync(resourcegroup, node.name, sessionid, nodeusername, nodepassword);', 'assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);', 'var ps = await client.powershell.createsessionasync(resourcegroup, node.name, session.name, "00000000-0000-0000-0000-000000000000");', 'assert.notnull(ps);', 'await runpowershellcommand(client, node, session, ps);', 'await gettabcompletionresults(client, node, session, ps);', 'await listpowershellsessions(client, node, session);']
['try a long running command ', []]
azure_sdk sample_7881

['assert.notnull(session);', 'assert.equal(session.name, sessionid);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);', 'var ps = await client.powershell.createsessionasync(resourcegroup, node.name, session.name, "00000000-0000-0000-0000-000000000000");', 'assert.notnull(ps);', 'await runpowershellcommand(client, node, session, ps);', 'await gettabcompletionresults(client, node, session, ps);', 'await listpowershellsessions(client, node, session);', 'await runlongpowershellcommand(client, node, session, ps);']
['delete session ', []]
azure_sdk sample_7881

['startgateway();', '}', 'catch {', '}', '}', 'try {', 'if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}']
['creating node ', []]
azure_sdk sample_7881

['catch {', '}', '}', 'try {', 'if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}', 'var node = await createnode(client, gateway, string.empty, string.empty);', 'assert.notnull(node);']
['getting node ', []]
azure_sdk sample_7881

['if (gateway == null) {', 'await createandconfiguregateway(client, gatewaytwo);', 'gateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);', '}', 'var node = await createnode(client, gateway, string.empty, string.empty);', 'assert.notnull(node);', 'node = await client.node.getasync(resourcegroup, nodename);', 'assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);']
['creating session ', []]
azure_sdk sample_7881

['assert.notnull(node);', 'node = await client.node.getasync(resourcegroup, nodename);', 'assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var username =  utility.encryptusinggatewaysettings(gateway.instances[0], nodeusername);', 'var password =  utility.encryptusinggatewaysettings(gateway.instances[0], nodepassword);', 'var session = await client.session.createasync(resourcegroup, node.name, sessionidtwo, username, password, retentionperiod.session, credentialdataformat.rsaencrypted);', 'assert.notnull(session);', 'assert.equal(session.name, sessionidtwo);']
['getting session ', []]
azure_sdk sample_7881

['assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var username =  utility.encryptusinggatewaysettings(gateway.instances[0], nodeusername);', 'var password =  utility.encryptusinggatewaysettings(gateway.instances[0], nodepassword);', 'var session = await client.session.createasync(resourcegroup, node.name, sessionidtwo, username, password, retentionperiod.session, credentialdataformat.rsaencrypted);', 'assert.notnull(session);', 'assert.equal(session.name, sessionidtwo);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);']
['session get response ', ['string', 'format', 'session', 'tojson']]
azure_sdk sample_7881

['assert.notnull(node);', 'assert.equal(nodename, node.name);', 'assert.equal(nodename, node.connectionname);', 'var username =  utility.encryptusinggatewaysettings(gateway.instances[0], nodeusername);', 'var password =  utility.encryptusinggatewaysettings(gateway.instances[0], nodepassword);', 'var session = await client.session.createasync(resourcegroup, node.name, sessionidtwo, username, password, retentionperiod.session, credentialdataformat.rsaencrypted);', 'assert.notnull(session);', 'assert.equal(session.name, sessionidtwo);', 'session = await client.session.getasync(resourcegroup, node.name, session.name);', 'assert.notnull(session);']
['delete session ', []]
azure_sdk sample_7881

['utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];', 'assert.equal<taskstate?>(taskstate.completed, mycompletedtask.state);', 'assert.notnull(mycompletedtask.multiinstancesettings);', 'assert.equal(mycompletedtask.multiinstancesettings.numberofinstances, 3);', 'assert.equal(mycompletedtask.multiinstancesettings.coordinationcommandline, "cmd /c set");', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];', 'assert.equal<taskstate?>(taskstate.completed, mycompletedtask.state);', 'assert.notnull(mycompletedtask.multiinstancesettings);', 'assert.equal(mycompletedtask.multiinstancesettings.numberofinstances, 3);', 'assert.equal(mycompletedtask.multiinstancesettings.coordinationcommandline, "cmd /c set");', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['}', 'thread.sleep(500);', '} while (sw.elapsed <= checksubtasksstatetimeout);', 'assert.true(sw.elapsed <= checksubtasksstatetimeout, string.format("the subtasks state is not set to complete after {0} seconds", checksubtasksstatetimeout.totalseconds));', 'assert.equal(2, subtasks.count);', 'assert.equal(0, subtasks[0].exitcode);', 'assert.null(subtasks[0].failureinformation);', 'assert.equal(0, subtasks[1].exitcode);', 'assert.null(subtasks[1].failureinformation);', 'assert.true((subtasks[0].id == 1 && subtasks[1].id == 2) || (subtasks[0].id == 2 && subtasks[1].id == 1));']
['multi instance test complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['hwtask.multiinstancesettings = new multiinstancesettings(@"cmd /c start cmd /c ""%msmpi_bin%\\smpd.exe"" -d 3 -p 6050", 3);', 'hwtask.multiinstancesettings.commonresourcefiles = new list<resourcefile>();', 'hwtask.multiinstancesettings.commonresourcefiles.add(new resourcefile("https: boundjob.addtask(hwtask);', '{', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks()).single();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['{', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks()).single();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['sw.start();', 'do {', 'ipagedenumerable<subtaskinformation> results = batchcli.joboperations.listsubtasks(jobid, mycompletedtask.id);', 'subtasks = results.tolist();', 'if (subtasks.all(t => t.state == subtaskstate.completed)) {', 'break;', '}', 'thread.sleep(500);', '} while (sw.elapsed <= checksubtasksstatetimeout);', 'assert.true(sw.elapsed <= checksubtasksstatetimeout, string.format("the subtasks state is not set to complete after {0} seconds", checksubtasksstatetimeout.totalseconds));']
['mpi test complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['numenvsettings = newenvsettings.count;', 'hwtask.environmentsettings = newenvsettings;', 'boundjob.addtask(hwtask);', '{', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['{', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'ienumerable<environmentsetting> boundsettings = mycompletedtask.environmentsettings;', 'assert.notnull(boundsettings);', 'list<environmentsetting> compenvsettings = new list<environmentsetting>(boundsettings);', 'assert.equal(numenvsettings, compenvsettings.count);']
['environement settings ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'ienumerable<environmentsetting> boundsettings = mycompletedtask.environmentsettings;', 'assert.notnull(boundsettings);', 'list<environmentsetting> compenvsettings = new list<environmentsetting>(boundsettings);', 'assert.equal(numenvsettings, compenvsettings.count);', 'foreach (environmentsetting curenvsetting in boundsettings) {']
['name value ', ['testoutputhelper', 'writeline', 'curenvsetting', 'name', 'curenvsetting', 'value']]
azure_sdk sample_5796

['this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'ienumerable<environmentsetting> boundsettings = mycompletedtask.environmentsettings;', 'assert.notnull(boundsettings);', 'list<environmentsetting> compenvsettings = new list<environmentsetting>(boundsettings);', 'assert.equal(numenvsettings, compenvsettings.count);', 'foreach (environmentsetting curenvsetting in boundsettings) {', '}']
['env setting test complete ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['cloudtask mytask = new cloudtask(id: "bug1447214task", commandline: @"hostname");', 'taskconstraints ts = new taskconstraints(maxwallclocktime: timespan.fromhours(1), retentiontime: timespan.fromhours(1), maxtaskretrycount: 99);', 'mytask.constraints = ts;', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['taskid ', ['testoutputhelper', 'writeline', 'mycompletedtask', 'id']]
azure_sdk sample_5796

['cloudtask mytask = new cloudtask(id: "bug1447214task", commandline: @"hostname");', 'taskconstraints ts = new taskconstraints(maxwallclocktime: timespan.fromhours(1), retentiontime: timespan.fromhours(1), maxtaskretrycount: 99);', 'mytask.constraints = ts;', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['mytask.constraints = ts;', 'boundjob.addtask(mytask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");']
['taskconstraints ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'taskconstraints comptc = mycompletedtask.constraints;', 'assert.notnull(comptc);', 'if (null == comptc) {']
['null ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'taskconstraints comptc = mycompletedtask.constraints;', 'assert.notnull(comptc);', 'if (null == comptc) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['maxwallclocktime null ', ['testoutputhelper', 'writeline', 'comptc', 'maxwallclocktime', 'hasvalue', 'comptc', 'maxwallclocktime', 'tostring']]
azure_sdk sample_5796

['this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'taskconstraints comptc = mycompletedtask.constraints;', 'assert.notnull(comptc);', 'if (null == comptc) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['retentiontime null ', ['testoutputhelper', 'writeline', 'comptc', 'retentiontime', 'hasvalue', 'comptc', 'retentiontime', 'value', 'tostring']]
azure_sdk sample_5796

['this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline("");', 'this.testoutputhelper.writeline(stderr);', 'this.testoutputhelper.writeline("");', 'taskconstraints comptc = mycompletedtask.constraints;', 'assert.notnull(comptc);', 'if (null == comptc) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['maxtaskretrycount null ', ['testoutputhelper', 'writeline', 'comptc', 'maxtaskretrycount', 'hasvalue', 'comptc', 'maxtaskretrycount', 'value', 'tostring']]
azure_sdk sample_5796

['this.testoutputhelper.writeline("");', 'taskconstraints comptc = mycompletedtask.constraints;', 'assert.notnull(comptc);', 'if (null == comptc) {', '}', 'else {', 'this.testoutputhelper.writeline("");', 'assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}']
['taskexecutioninfo ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['if (null == comptc) {', '}', 'else {', 'this.testoutputhelper.writeline("");', 'assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {']
['null ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['this.testoutputhelper.writeline("");', 'assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['starttime null ', ['testoutputhelper', 'writeline', 'tei', 'starttime', 'hasvalue', 'tei', 'starttime', 'value', 'tostring']]
azure_sdk sample_5796

['this.testoutputhelper.writeline("");', 'assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['lastupdatetime null ', ['testoutputhelper', 'writeline', 'tei', 'endtime', 'hasvalue', 'tei', 'endtime', 'value', 'tostring']]
azure_sdk sample_5796

['this.testoutputhelper.writeline("");', 'assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");']
['exitcode null ', ['testoutputhelper', 'writeline', 'tei', 'exitcode', 'hasvalue', 'tei', 'exitcode', 'value', 'tostring']]
azure_sdk sample_5796

['assert.true(comptc.maxtaskretrycount.hasvalue);', 'assert.equal(99, comptc.maxtaskretrycount.value);', '}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");', '}']
['stats ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['}', 'taskexecutioninformation tei = mycompletedtask.executioninformation;', 'assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");', '}', 'taskstatistics compts = mycompletedtask.statistics;', 'if (null == compts) {']
['null ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['assert.notnull(tei);', 'if (null == tei) {', '}', 'else {', 'this.testoutputhelper.writeline("");', '}', 'taskstatistics compts = mycompletedtask.statistics;', 'if (null == compts) {', '}', 'else {']
['url ', ['testoutputhelper', 'writeline', 'compts', 'url']]
azure_sdk sample_5796

['cloudtask newtasktoadd = new cloudtask(id: "bug1535329newtask", commandline: "hostname");', 'filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingstorageaccount);', 'newtasktoadd.filestostage = new list<ifilestagingprovider>();', 'newtasktoadd.filestostage.add(wordsdottext);', 'batchcli.joboperations.addtask(jobid, newtasktoadd);', 'bool foundlocalwords = false;', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in boundjob.listtasks()) {']
['taskid ', ['testoutputhelper', 'writeline', 'curtask', 'id']]
azure_sdk sample_5796

['filetostage wordsdottext = new filetostage(resources.localwordsdottext, stagingstorageaccount);', 'newtasktoadd.filestostage = new list<ifilestagingprovider>();', 'newtasktoadd.filestostage.add(wordsdottext);', 'batchcli.joboperations.addtask(jobid, newtasktoadd);', 'bool foundlocalwords = false;', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in boundjob.listtasks()) {', 'foreach (nodefile curfile in curtask.listnodefiles(recursive: true)) {']
['filename ', ['testoutputhelper', 'writeline', 'curfile', 'path']]
azure_sdk sample_5796

['cloudtask untask = new cloudtask("bug1611592", "hostname");', 'testutilities.assertthrows<invalidoperationexception>(() => { var f = untask.computenodeinformation; });', 'cloudjob bndjob = batchcli.joboperations.getjob(jobid);', 'bndjob.addtask(untask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( bndjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in bndjob.listtasks()) {', 'computenodeinformation computenodeinfo = curtask.computenodeinformation;', 'assert.notnull(computenodeinfo);']
['task ', ['testoutputhelper', 'writeline', 'curtask', 'id']]
azure_sdk sample_5796

['cloudtask untask = new cloudtask("bug1611592", "hostname");', 'testutilities.assertthrows<invalidoperationexception>(() => { var f = untask.computenodeinformation; });', 'cloudjob bndjob = batchcli.joboperations.getjob(jobid);', 'bndjob.addtask(untask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( bndjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in bndjob.listtasks()) {', 'computenodeinformation computenodeinfo = curtask.computenodeinformation;', 'assert.notnull(computenodeinfo);']
['computenodeinfo ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['cloudtask untask = new cloudtask("bug1611592", "hostname");', 'testutilities.assertthrows<invalidoperationexception>(() => { var f = untask.computenodeinformation; });', 'cloudjob bndjob = batchcli.joboperations.getjob(jobid);', 'bndjob.addtask(untask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( bndjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in bndjob.listtasks()) {', 'computenodeinformation computenodeinfo = curtask.computenodeinformation;', 'assert.notnull(computenodeinfo);']
['poolid ', ['poolid']]
azure_sdk sample_5796

['cloudtask untask = new cloudtask("bug1611592", "hostname");', 'testutilities.assertthrows<invalidoperationexception>(() => { var f = untask.computenodeinformation; });', 'cloudjob bndjob = batchcli.joboperations.getjob(jobid);', 'bndjob.addtask(untask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( bndjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(5));', 'foreach (cloudtask curtask in bndjob.listtasks()) {', 'computenodeinformation computenodeinfo = curtask.computenodeinformation;', 'assert.notnull(computenodeinfo);']
['computenodeid ', ['computenodeid']]
azure_sdk sample_5796

['public void testboundtaskterminateanddelete() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-testboundtaskterminateanddelete";', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };']
['creating job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5796

['using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + "-testboundtaskterminateanddelete";', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'cloudjob.commit();', '{', 'const string taskid = "t1";', 'cloudtask tasktoadd = new cloudtask(taskid, "ping 127.0.0.1 -n 60");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['poolid = this.poolfixture.poolid };', 'cloudjob.commit();', '{', 'const string taskid = "t1";', 'cloudtask tasktoadd = new cloudtask(taskid, "ping 127.0.0.1 -n 60");', 'batchcli.joboperations.addtask(jobid, tasktoadd);', 'list<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();', 'assert.equal(1, tasks.count);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol {delaybetweendatafetch = timespan.fromseconds(5)});']
['terminating task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['batchcli.joboperations.addtask(jobid, tasktoadd);', 'list<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();', 'assert.equal(1, tasks.count);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol {delaybetweendatafetch = timespan.fromseconds(5)});', 'cloudtask runningtask = batchcli.joboperations.gettask(jobid, taskid);', 'runningtask.terminate();', 'runningtask.refresh();', 'assert.equal(taskstate.completed, runningtask.state);', 'runningtask.refresh();']
['deleting task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['runningtask.refresh();', 'assert.equal(taskstate.completed, runningtask.state);', 'runningtask.refresh();', 'runningtask.delete();', 'list<cloudtask> tasklistafterdelete = batchcli.joboperations.listtasks(jobid).tolist();', 'assert.equal(0, tasklistafterdelete.count);', '}', '{', 'const string taskid = "t2";', 'cloudtask tasktoadd = new cloudtask(taskid, "ping 127.0.0.1 -n 60");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['assert.equal(0, tasklistafterdelete.count);', '}', '{', 'const string taskid = "t2";', 'cloudtask tasktoadd = new cloudtask(taskid, "ping 127.0.0.1 -n 60");', 'batchcli.joboperations.addtask(jobid, tasktoadd);', 'list<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();', 'assert.equal(1, tasks.count);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol { delaybetweendatafetch = timespan.fromseconds(5) });']
['terminating task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['batchcli.joboperations.addtask(jobid, tasktoadd);', 'list<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();', 'assert.equal(1, tasks.count);', 'taskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol { delaybetweendatafetch = timespan.fromseconds(5) });', 'cloudtask runningtask = batchcli.joboperations.gettask(jobid, taskid);', 'batchcli.joboperations.terminatetask(jobid, taskid);', 'runningtask.refresh();', 'assert.equal(taskstate.completed, runningtask.state);', 'runningtask.refresh();']
['deleting task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['public void failedtaskcanbereactivated() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };']
['creating job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5796

['public void failedtaskcanbereactivated() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };', 'cloudjob.commit();', 'const string taskid = "t1";', 'cloudtask tasktoadd = new cloudtask(taskid, "cmd /c \\"ping 127.0.0.1 -n 20 > nul && exit /b 3\\"");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation() { poolid = this.poolfixture.poolid });', 'cloudjob.ontaskfailure = ontaskfailure.performexitoptionsjobaction;', 'cloudjob.usestaskdependencies = true;', 'cloudjob.commit();', 'const string taskid = "t1";', 'cloudtask tasktoadd = new cloudtask(taskid, "cmd /c \\"ping 127.0.0.1 \\"");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['public void accessscopecanberoundtripped() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();', 'try {', 'cloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());', 'cloudjob.poolinformation = new poolinformation { poolid = this.poolfixture.poolid };']
['creating job ', ['testoutputhelper', 'writeline', 'jobid']]
azure_sdk sample_5796

['action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'const string testname = "bug1770926_updatetask";', 'const string taskid = "bug1770926_updatetask_task1";', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + "-" + testname;', 'taskconstraints defaultconstraints = new taskconstraints(timespan.maxvalue, timespan.maxvalue, 0);', 'try {', 'cloudjob jobschedule = batchcli.joboperations.createjob(jobid, new poolinformation());', 'jobschedule.poolinformation = new poolinformation() {', 'poolid = "poolwhodoesntexist" };']
['initial job schedule commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['const string taskid = "bug1770926_updatetask_task1";', 'string jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + "-" + testname;', 'taskconstraints defaultconstraints = new taskconstraints(timespan.maxvalue, timespan.maxvalue, 0);', 'try {', 'cloudjob jobschedule = batchcli.joboperations.createjob(jobid, new poolinformation());', 'jobschedule.poolinformation = new poolinformation() {', 'poolid = "poolwhodoesntexist" };', 'jobschedule.commit();', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");']
['adding task ', ['testoutputhelper', 'writeline', 'taskid']]
azure_sdk sample_5796

['cloudtask mytask = new cloudtask(taskid, "cmd /c echo hello world");', 'boundjob.addtask(mytask);', 'cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);', 'assert.equal(defaultconstraints.maxtaskretrycount, boundtask.constraints.maxtaskretrycount);', 'assert.equal(defaultconstraints.maxwallclocktime, boundtask.constraints.maxwallclocktime);', 'assert.equal(defaultconstraints.retentiontime, boundtask.constraints.retentiontime);', 'timespan maxwallclocktime = timespan.fromhours(1);', 'timespan dataretentiontime = timespan.fromhours(2);', 'const int maxretrycount = 1;', 'boundtask.constraints = new taskconstraints(maxwallclocktime, dataretentiontime, maxretrycount);']
['updating task constraints ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5796

['public async task ifatrackedfileisisusewhenitisduetobeflushed_thennoerroroccursandchangesarepersisted() {', 'var file = path.gettempfilename();', 'try {', 'var taskoutputstorage = new taskoutputstorage(storageaccount, _jobid, _taskid);', 'using (await taskoutputstorage.savetrackedasync(taskoutputkind.tasklog, file, "tracked2.txt", timespan.frommilliseconds(5))) {', 'using (var writer = file.appendtext(file)) {', 'for (int i = 0; i < 100; ++i) {', 'await task.delay(timespan.frommilliseconds(3));']
['line i ', ['writer', 'writelineasync']]
azure_sdk sample_5734

['var taskoutputstorage = new taskoutputstorage(storageaccount, _jobid, _taskid);', 'using (await taskoutputstorage.savetrackedasync(taskoutputkind.tasklog, file, "tracked2.txt", timespan.frommilliseconds(5))) {', 'using (var writer = file.appendtext(file)) {', 'for (int i = 0; i < 100; ++i) {', 'await task.delay(timespan.frommilliseconds(3));', 'await task.delay(timespan.frommilliseconds(3));', '}', '}', 'using (var writer = file.appendtext(file)) {', 'for (int i = 0; i < 100; ++i) {']
['line i ', ['writer', 'writelineasync']]
azure_sdk sample_5734

['const string jobmanagercommandline = "ping 127.0.0.1 -n 500";', 'ilist<metadataitem> metadata = new list<metadataitem> { new metadataitem("key1", "test1"), new metadataitem("key2", "test2") };', 'cloudjobschedule jobschedule = batchcli.jobscheduleoperations.createjobschedule(jobscheduleid, null, null);', 'timespan firstrecurrenceinterval = timespan.fromminutes(2);', 'jobschedule.schedule = new schedule() { recurrenceinterval = firstrecurrenceinterval };', 'poolinformation poolinfo = new poolinformation() {', 'poolid = this.poolfixture.poolid };', 'jobschedule.jobspecification = new jobspecification(poolinfo) {', 'priority = jobschedulepriority, jobmanagertask = new jobmanagertask(jobmanagerid, jobmanagercommandline) };', 'jobschedule.metadata = metadata;']
['initial job schedule commit ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['poolid = this.poolfixture.poolid };', 'jobschedule.jobspecification = new jobspecification(poolinfo) {', 'priority = jobschedulepriority, jobmanagertask = new jobmanagertask(jobmanagerid, jobmanagercommandline) };', 'jobschedule.metadata = metadata;', 'jobschedule.commit();', 'cloudjobschedule boundjobschedule = batchcli.jobscheduleoperations.getjobschedule(jobscheduleid);', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, firstrecurrenceinterval, metadata);', 'timespan recurrenceinterval = timespan.fromminutes(5);', 'boundjobschedule.schedule = new schedule() {', 'recurrenceinterval = recurrenceinterval };']
['updating jobschedule schedule ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['jobschedule.commit();', 'cloudjobschedule boundjobschedule = batchcli.jobscheduleoperations.getjobschedule(jobscheduleid);', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, firstrecurrenceinterval, metadata);', 'timespan recurrenceinterval = timespan.fromminutes(5);', 'boundjobschedule.schedule = new schedule() {', 'recurrenceinterval = recurrenceinterval };', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);', 'const int newjobschedulepriority = 1;', 'boundjobschedule.jobspecification.priority = newjobschedulepriority;']
['updating jobspecification priority ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['boundjobschedule.schedule = new schedule() {', 'recurrenceinterval = recurrenceinterval };', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);', 'const int newjobschedulepriority = 1;', 'boundjobschedule.jobspecification.priority = newjobschedulepriority;', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);', 'const string newjobmanagercommandline = "ping 127.0.0.1 -n 150";', 'boundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;']
['updating jobspecification jobmanagertask commandline ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['const int newjobschedulepriority = 1;', 'boundjobschedule.jobspecification.priority = newjobschedulepriority;', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);', 'const string newjobmanagercommandline = "ping 127.0.0.1 -n 150";', 'boundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);', 'const string newpoolid = "testpool";', 'boundjobschedule.jobspecification.poolinformation = new poolinformation() { poolid = newpoolid };']
['updating poolinformation ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['const string newjobmanagercommandline = "ping 127.0.0.1 -n 150";', 'boundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;', 'boundjobschedule.commit();', 'assertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);', 'const string newpoolid = "testpool";', 'boundjobschedule.jobspecification.poolinformation = new poolinformation() { poolid = newpoolid };', 'boundjobschedule.commit();', 'assertjobschedulecorrectness( batchcli.jobscheduleoperations, boundjobschedule, newpoolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);', 'ilist<metadataitem> newmetadata = new list<metadataitem> { new metadataitem("object", "model") };', 'boundjobschedule.metadata = newmetadata;']
['updating metadata ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5803

['public list<keyoperationtype> getkeyoperations() {', 'list<keyoperationtype> keyoperations = new list<keyoperationtype>();', 'foreach ( var arg in args ) {', 'var result = new keyoperationtype();', 'if ( enum.tryparse<keyoperationtype>( arg, true, out result ) ) {', 'keyoperations.add( result );', '}', '}', 'if ( keyoperations.count == 0 ) {']
['no operation is provided executing all the key and secret operations ', ['out', 'writeline']]
azure_sdk sample_2140

['public byte[] getplaintext() {', 'var tag = "-text";', 'var text = getargumentvalue( tag );', 'if ( text == string.empty ) {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public byte[] getciphertext() {', 'var tag = "-text";', 'var text = getargumentvalue( tag );', 'if ( text == string.empty ) {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public byte[] getdigesthash() {', 'var tag = "-digestfile";', 'var digestfile = getargumentvalue( tag );', 'var digest = randomhash<sha256cryptoserviceprovider>( 32 );', 'if ( digestfile != string.empty ) {', 'digest = file.readallbytes( digestfile );', '}', 'else {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getsignalgorithm() {', 'var tag = "-algo";', 'var algorithm = getargumentvalue( tag );', 'if ( algorithm == string.empty ) {', 'algorithm = jsonwebkeysignaturealgorithm.rs256;']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getencryptionalgorithm() {', 'var tag = "-algo";', 'var algorithm = getargumentvalue( tag );', 'if ( algorithm == string.empty ) {', 'algorithm = jsonwebkeyencryptionalgorithm.rsaoaep;']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public byte[] getsymmetrickey() {', 'var tag = "-symkeyfile";', 'var symmetrickeyfile = getargumentvalue( tag );', 'var symmetrickey = symmetricalgorithm.create().key;', 'if ( symmetrickeyfile != string.empty ) {', 'symmetrickey = file.readallbytes( symmetrickeyfile );', '}', 'else {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getvaultaddress() {', 'var tag = "-vault";', 'string keyvaultvaultaddress = getargumentvalue( tag );', 'if ( keyvaultvaultaddress == string.empty ) {', 'keyvaultvaultaddress = configurationmanager.appsettings["vaulturl"];']
['is not provided using default value ', ['out', 'writeline', 'tag', 'keyvaultvaultaddress']]
azure_sdk sample_2140

['public string getsecretvalue() {', 'var tag = "-secretvalue";', 'string value = getargumentvalue( tag );', 'if ( value == string.empty ) {', 'value = "default secret value";']
['is not provided using new guid ', ['out', 'writeline', 'tag', 'value']]
azure_sdk sample_2140

['public string getpfxpath() {', 'var tag = "-pfxfilepath";', 'var path = getargumentvalue( tag );', 'if ( path == string.empty ) {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getpfxpassword() {', 'var tag = "-pfxfilepassword";', 'var password = getargumentvalue( tag );', 'if (password == string.empty) {']
['is not provided using default value ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getsecretcontenttype() {', 'var tag = "-secretcontenttype";', 'string value = getargumentvalue(tag);', 'if (value == string.empty) {', 'value = "plaintext";']
['is not provided using default value ', ['out', 'writeline', 'tag', 'value']]
azure_sdk sample_2140

['public string getkeyversion() {', 'var tag = "-keyversion";', 'string version = getargumentvalue( tag );', 'if ( version == string.empty ) {']
['is not provided ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public string getsecretversion() {', 'var tag = "-secretversion";', 'string version = getargumentvalue( tag );', 'if ( version == string.empty ) {']
['is not provided ', ['out', 'writeline', 'tag']]
azure_sdk sample_2140

['public static void assertisbatchexceptionandhascorrectazureerrorcode(exception ex, string correctcode, itestoutputhelper outputhelper) {', 'exception theoneinner = ex;', 'if (ex is aggregateexception) {', 'aggregateexception ae = (aggregateexception)ex;', 'assert.equal<int>(1, ae.innerexceptions.count);', 'theoneinner = ae.innerexceptions[0];', '}', 'if (!(theoneinner is microsoft.azure.batch.common.batchexception)) {']
['assertisbatchexceptionandhascorrectazureerrorcode incorrect exception ', ['writeline', 'string', 'format', 'ex', 'tostring']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");']
['pool count ', ['writeline', 'numpools']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");']
['allocationstate ', ['writeline', 'curpool', 'allocationstate']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");']
['state ', ['writeline', 'curpool', 'state']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");']
['targetdedicated ', ['writeline', 'curpool', 'targetdedicatedcomputenodes']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");']
['currentdedicated no value ', ['writeline', 'curpool', 'currentdedicatedcomputenodes', 'hasvalue', 'curpool', 'currentdedicatedcomputenodes', 'value', 'tostring']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['avgcpu avgdisk avgmemory diskreadbytes ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'averagecpupercentage', 'curpool', 'statistics', 'resourcestatistics', 'averagediskgib', 'curpool', 'statistics', 'resourcestatistics', 'averagememorygib', 'curpool', 'statistics', 'resourcestatistics', 'diskreadgib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['diskreadiops ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'diskreadiops']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['diskwritebytes ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'diskwritegib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['diskwriteiops ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'diskwriteiops']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['networkreadbytes ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'networkreadgib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['networkwritebytes ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'networkwritegib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['peakdisk ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'peakdiskgib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['peakmemory ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'peakmemorygib']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['starttime ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'starttime']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {']
['lastupdatetime ', ['writeline', 'curpool', 'statistics', 'resourcestatistics', 'lastupdatetime']]
azure_sdk sample_5823

['public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {', 'list<cloudpool> pools = new list<cloudpool>(poolsenumerable);', 'int numpools = (null != pools) ? pools.count : 0;', 'testoutputhelper.writeline("");', 'testoutputhelper.writeline("");', 'foreach (cloudpool curpool in pools) {', 'testoutputhelper.writeline(curpool.id + ":");', 'if (curpool.statistics != null) {', '}', 'else {']
['no value ', ['writeline']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {']
['id ', ['writeline', 'curwi', 'id']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {']
['state ', ['writeline', 'curwi', 'state', 'tostring']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {']
['url ', ['writeline', 'curwi', 'url']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {']
['lastmodified null ', ['writeline', 'curwi', 'lastmodified', 'hasvalue', 'curwi', 'lastmodified', 'value', 'tolongdatestring']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;']
['exeinfo ', ['writeline']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;']
['lastupdatetime null ', ['endtime', 'hasvalue', 'wiexinfo', 'endtime', 'value', 'tolongdatestring']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;']
['nextruntime null ', ['nextruntime', 'hasvalue', 'wiexinfo', 'nextruntime', 'value', 'tolongdatestring']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;']
['recentjob ', ['writeline']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;', 'recentjob rj = wiexinfo.recentjob;', 'if (null == rj) {']
['null ', ['writeline']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;', 'recentjob rj = wiexinfo.recentjob;', 'if (null == rj) {', '}', 'else {']
['id ', ['writeline', 'rj', 'id']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;', 'recentjob rj = wiexinfo.recentjob;', 'if (null == rj) {', '}', 'else {']
['url ', ['writeline', 'rj', 'url']]
azure_sdk sample_5823

['public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {', '{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;', 'recentjob rj = wiexinfo.recentjob;', 'if (null == rj) {', '}', 'else {', '}', '}', 'jobspecification jobspec = curwi.jobspecification;']
['jobspecification ', ['writeline']]
azure_sdk sample_5823

['{', 'jobscheduleexecutioninformation wiexinfo = curwi.executioninformation;', 'recentjob rj = wiexinfo.recentjob;', 'if (null == rj) {', '}', 'else {', '}', '}', 'jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {']
['null ', ['writeline']]
azure_sdk sample_5823

['if (null == rj) {', '}', 'else {', '}', '}', 'jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {', '}', 'else {', 'testoutputhelper.writeline("");']
['priority null ', ['writeline', 'jobspec', 'priority', 'hasvalue', 'jobspec', 'priority', 'tostring']]
azure_sdk sample_5823

['}', 'else {', '}', '}', 'jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {', '}', 'else {', 'testoutputhelper.writeline("");', 'jobconstraints jobcon = jobspec.constraints;']
['constraints ', ['writeline']]
azure_sdk sample_5823

['else {', '}', '}', 'jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {', '}', 'else {', 'testoutputhelper.writeline("");', 'jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {']
['null ', ['writeline']]
azure_sdk sample_5823

['jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {', '}', 'else {', 'testoutputhelper.writeline("");', 'jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");']
['maxtaskretrycount null ', ['writeline', 'jobcon', 'maxtaskretrycount', 'hasvalue', 'jobspec', 'constraints', 'maxtaskretrycount', 'value', 'tostring']]
azure_sdk sample_5823

['jobspecification jobspec = curwi.jobspecification;', 'if (null == jobspec) {', '}', 'else {', 'testoutputhelper.writeline("");', 'jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");']
['maxwallclocktime null ', ['writeline', 'jobcon', 'maxwallclocktime', 'hasvalue', 'jobspec', 'constraints', 'maxwallclocktime', 'value', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['else {', 'testoutputhelper.writeline("");', 'jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {']
['null ', ['writeline']]
azure_sdk sample_5823

['jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {']
['jobmanagertask ', ['writeline']]
azure_sdk sample_5823

['jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {']
['commandline ', ['writeline', 'ijm', 'commandline']]
azure_sdk sample_5823

['jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {']
['killjoboncompletion null ', ['writeline', 'ijm', 'killjoboncompletion', 'hasvalue', 'ijm', 'killjoboncompletion', 'value', 'tostring']]
azure_sdk sample_5823

['jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {']
['id ', ['writeline', 'ijm', 'id']]
azure_sdk sample_5823

['jobconstraints jobcon = jobspec.constraints;', 'if (null == jobcon) {', '}', 'else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {']
['runexclusive null ', ['writeline', 'ijm', 'runexclusive', 'hasvalue', 'ijm', 'runexclusive', 'value', 'tostring']]
azure_sdk sample_5823

['else {', 'testoutputhelper.writeline("");', '}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {', 'ienumerable<environmentsetting> envsettings = ijm.environmentsettings;', 'if (null != envsettings) {', 'list<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);']
['environmentsettings count ', ['writeline', 'envsettingslist', 'count']]
azure_sdk sample_5823

['}', 'jobmanagertask ijm = jobspec.jobmanagertask;', 'if (null == ijm) {', '}', 'else {', 'ienumerable<environmentsetting> envsettings = ijm.environmentsettings;', 'if (null != envsettings) {', 'list<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);', '}', 'else {']
['environmentsettings null ', ['writeline']]
azure_sdk sample_5823

['else {', 'ienumerable<environmentsetting> envsettings = ijm.environmentsettings;', 'if (null != envsettings) {', 'list<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);', '}', 'else {', '}', 'ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();']
['resourcefiles count ', ['writeline', 'resfiles', 'count']]
azure_sdk sample_5823

['if (null != envsettings) {', 'list<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);', '}', 'else {', '}', 'ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {']
['resourcefiles null ', ['writeline']]
azure_sdk sample_5823

['else {', '}', 'ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {']
['taskconstraints null ', ['writeline']]
azure_sdk sample_5823

['ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {']
['taskconstraints ', ['writeline']]
azure_sdk sample_5823

['ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {']
['maxtaskretrycount null ', ['writeline', 'tc', 'maxtaskretrycount', 'hasvalue', 'tc', 'maxtaskretrycount', 'value', 'tostring']]
azure_sdk sample_5823

['ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {']
['maxwallclocktime null ', ['writeline', 'tc', 'maxwallclocktime', 'hasvalue', 'tc', 'maxwallclocktime', 'value', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;', 'if (null != resfilesprop) {', 'list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {']
['retentiontime null ', ['writeline', 'tc', 'retentiontime', 'hasvalue', 'tc', 'retentiontime', 'value', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {', '}', 'if (ijm.useridentity != null) {']
['useridentity ', ['writeline']]
azure_sdk sample_5823

['list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {', '}', 'if (ijm.useridentity != null) {']
['username ', ['writeline', 'ijm', 'useridentity', 'username']]
azure_sdk sample_5823

['list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {', '}', 'if (ijm.useridentity != null) {']
['elevationlevel ', ['writeline', 'ijm', 'useridentity', 'autouser', 'elevationlevel']]
azure_sdk sample_5823

['list<resourcefile> resfiles = new list<resourcefile>();', '}', 'else {', '}', 'taskconstraints tc = ijm.constraints;', 'if (null == tc) {', '}', 'else {', '}', 'if (ijm.useridentity != null) {']
['scope ', ['writeline', 'ijm', 'useridentity', 'autouser', 'scope']]
azure_sdk sample_5823

['if (null == tc) {', '}', 'else {', '}', 'if (ijm.useridentity != null) {', '}', '}', '}', '{', 'ienumerable<metadataitem> mdis = curwi.metadata;']
['metadata ', ['writeline']]
azure_sdk sample_5823

['}', 'else {', '}', 'if (ijm.useridentity != null) {', '}', '}', '}', '{', 'ienumerable<metadataitem> mdis = curwi.metadata;', 'if (null == mdis) {']
['null ', ['writeline']]
azure_sdk sample_5823

['if (ijm.useridentity != null) {', '}', '}', '}', '{', 'ienumerable<metadataitem> mdis = curwi.metadata;', 'if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);']
['count ', ['writeline', 'meta', 'count']]
azure_sdk sample_5823

['{', 'ienumerable<metadataitem> mdis = curwi.metadata;', 'if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {']
['schedule null ', ['writeline']]
azure_sdk sample_5823

['if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {']
['schedule ', ['writeline']]
azure_sdk sample_5823

['if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {']
['donotrunafter null ', ['writeline', 'sched', 'donotrunafter', 'hasvalue', 'sched', 'donotrunafter', 'value', 'tolongdatestring']]
azure_sdk sample_5823

['if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {']
['donotrununtil null ', ['writeline', 'sched', 'donotrununtil', 'hasvalue', 'sched', 'donotrununtil', 'value', 'tolongdatestring']]
azure_sdk sample_5823

['if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {']
['recurrenceinterval null ', ['writeline', 'sched', 'recurrenceinterval', 'hasvalue', 'sched', 'recurrenceinterval', 'value', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['if (null == mdis) {', '}', 'else {', 'list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {']
['startwindow null ', ['writeline', 'sched', 'startwindow', 'hasvalue', 'sched', 'startwindow', 'value', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['list<metadataitem> meta = new list<metadataitem>(curwi.metadata);', '}', '}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {']
['stats null ', ['writeline']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['stats ', ['writeline']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['lastupdatetime ', ['writeline', 'stats', 'lastupdatetime', 'tolongdatestring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['kernelcputime ', ['writeline', 'stats', 'kernelcputime', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['numfailedtasks ', ['writeline', 'stats', 'failedtaskcount', 'tostring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['numtimescalled ', ['writeline', 'stats', 'taskretrycount']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['numsucceededtasks ', ['writeline', 'stats', 'succeededtaskcount']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['readiogib ', ['writeline', 'stats', 'readiogib']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['readiops ', ['writeline', 'stats', 'readiops']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['starttime ', ['writeline', 'stats', 'starttime', 'tolongdatestring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['url ', ['writeline', 'stats', 'url']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['usercputime ', ['writeline', 'stats', 'usercputime', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['waittime ', ['writeline', 'stats', 'waittime', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['wallclocktime ', ['writeline', 'stats', 'wallclocktime', 'totalmilliseconds', 'tostring']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['writeiogib ', ['writeline', 'stats', 'writeiogib']]
azure_sdk sample_5823

['}', 'schedule sched = curwi.schedule;', 'if (null == sched) {', '}', 'else {', '}', 'jobschedulestatistics stats = curwi.statistics;', 'if (null == stats) {', '}', 'else {']
['writeiops ', ['writeline', 'stats', 'writeiops']]
azure_sdk sample_5823

['public static void deletecertmonitor(certificateoperations certops, itestoutputhelper testoutputhelper, string thumbalgo, string thumb) {', 'bool found;']
['polling for deletion of thumbprint ', ['writeline', 'thumb']]
azure_sdk sample_5823

['public static void deletecertmonitor(certificateoperations certops, itestoutputhelper testoutputhelper, string thumbalgo, string thumb) {', 'bool found;', 'do {', 'found = false;', 'foreach (certificate curcert in certops.listcertificates()) {', 'if (thumbalgo.equals(curcert.thumbprintalgorithm, stringcomparison.invariantcultureignorecase) && thumb.equals(curcert.thumbprint, stringcomparison.invariantcultureignorecase)) {']
['deletecertmonitor thumb state ', ['writeline', 'curcert', 'thumbprint', 'curcert', 'state']]
azure_sdk sample_5823

['cloudtask hwtask = new cloudtask(id: taskid, commandline: winnertaskcmdline);', 'cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(hwtask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'assert.contains("hello world", stdout);']
['stdout ', ['writeline']]
azure_sdk sample_5823

['cloudjob boundjob = batchcli.joboperations.getjob(jobid);', 'boundjob.addtask(hwtask);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), taskstate.completed, timespan.fromminutes(3));', 'cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'assert.contains("hello world", stdout);', 'testoutputhelper.writeline(stdout);']
['stderr ', ['writeline']]
azure_sdk sample_5823

['private static void generatemodelfiles() {', 'var inputfolder = path.combine(getsourcedirectory(), @"spec");', 'var inputpattern = "*.json";', 'var model = new filereader(inputfolder, inputpattern).readtypes();', 'var seen = new hashset<string>();', 'foreach (var type in model.types) {', 'if (seen.contains(type.name)) {']
['duplicate type type name ', ['console', 'writeline']]
azure_sdk sample_5782

['var specificartifact = artifacts[typeof(filetostage)];', 'sequentialfilestagingartifact sfsa = specificartifact as sequentialfilestagingartifact;', 'assert.notnull(sfsa);', 'testutilities.assertthrows<invalidoperationexception>(() => mytask.filestostage = new list<ifilestagingprovider>());', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {']
['issuing request type ', ['testoutputhelper', 'writeline', 'x', 'gettype', 'tostring']]
azure_sdk sample_5807

['assert.notnull(sfsa);', 'testutilities.assertthrows<invalidoperationexception>(() => mytask.filestostage = new list<ifilestagingprovider>());', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {', 'try {', 'list<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();']
['compute nodes ', ['testoutputhelper', 'writeline', 'allcomputenodes', 'count']]
azure_sdk sample_5807

['testutilities.assertthrows<invalidoperationexception>(() => mytask.filestostage = new list<ifilestagingprovider>());', 'cloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);', 'utilities utilities = batchcli.utilities;', 'taskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();', 'taskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]', '{', 'new microsoft.azure.batch.protocol.requestinterceptor((x) => {', 'try {', 'list<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();', 'allcomputenodes.foreach( (icn) => {']
['computenode id state ', ['testoutputhelper', 'writeline', 'icn', 'id', 'icn', 'state']]
azure_sdk sample_5807

['allcomputenodes.foreach( (icn) => {', '});', '}', 'catch (exception ex) {', 'assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {']
['task id state ', ['testoutputhelper', 'writeline', 'curtask', 'id', 'curtask', 'state']]
azure_sdk sample_5807

['}', 'catch (exception ex) {', 'assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();']
['pool id state ', ['testoutputhelper', 'writeline', 'boundpool', 'id', 'boundpool', 'state']]
azure_sdk sample_5807

['assert.true(false, "samplewithfilesandpool probably can ignore this if its pool not found: " + ex.tostring());', '}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();']
['stdout ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5807

['}', '}) });', 'list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);']
['stderr ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5807

['}) });', 'list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);']
['task files ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5807

['list<cloudtask> tasks = boundjob.listtasks(null).tolist();', 'cloudtask mycompletedtask = tasks[0];', 'foreach (cloudtask curtask in tasks) {', '}', 'boundpool.refresh();', 'string stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();', 'string stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();', 'this.testoutputhelper.writeline(stdout);', 'this.testoutputhelper.writeline(stderr);', 'foreach (nodefile curfile in mycompletedtask.listnodefiles(recursive: true)) {']
['filepath ', ['testoutputhelper', 'writeline', 'curfile', 'path']]
azure_sdk sample_5807

['public void bug1965363_2384616_wat7osversionfeatures() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'pooloperations pooloperations = batchcli.pooloperations;', 'try {']
['listing os versions ', ['testoutputhelper', 'writeline']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['jobschedulestatistics starttime ', ['testoutputhelper', 'writeline', 'jobstatistics', 'starttime']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['jobschedulestatistics lastupdatetime ', ['testoutputhelper', 'writeline', 'jobstatistics', 'lastupdatetime']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['jobschedulestatistics numsucceededtasks ', ['testoutputhelper', 'writeline', 'jobstatistics', 'succeededtaskcount']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['jobschedulestatistics usercputime ', ['testoutputhelper', 'writeline', 'jobstatistics', 'usercputime']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['poolstatistics starttime ', ['testoutputhelper', 'writeline', 'poolstatistics', 'starttime']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['poolstatistics lastupdatetime ', ['testoutputhelper', 'writeline', 'poolstatistics', 'lastupdatetime']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['poolstatistics resourcestatistics avgmemory ', ['testoutputhelper', 'writeline', 'poolstatistics', 'resourcestatistics', 'averagememorygib']]
azure_sdk sample_5807

['public void bug1771070_1771072_jobandpoollifetimestats() {', 'action test = () => {', 'using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {', 'jobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();', 'poolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();', 'assert.notnull(jobstatistics);', 'assert.notnull(poolstatistics);']
['poolstatistics usagestatistics dedicatedcoretime ', ['testoutputhelper', 'writeline', 'poolstatistics', 'usagestatistics', 'dedicatedcoretime']]
azure_sdk sample_5807

