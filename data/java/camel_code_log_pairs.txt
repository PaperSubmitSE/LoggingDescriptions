['static void createSolrFixtures() throws Exception {', 'solrHttpsRunner = JettySolrFactory.createJettyTestFixture(true);', 'httpsPort = solrHttpsRunner.getLocalPort();']
['started https test server ', ['solrhttpsrunner', 'getbaseurl']]
camel sample_13988

['public void onApplicationEvent(ApplicationEvent event) {', 'for (EventEndpoint endpoint : endpoints) {', 'try {', 'endpoint.onApplicationEvent(event);', '} catch (Exception e) {']
['error on application event this exception will be ignored ', ['event', 'e']]
camel sample_16323

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<StubComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stub.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stub.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_879

['if (getISeriesEndpoint().getType() == Jt400Type.PGM) {', 'pgmCall = new ProgramCall(iSeries);', '} else {', 'pgmCall = new ServiceProgramCall(iSeries);', '((ServiceProgramCall)pgmCall).setProcedureName(getISeriesEndpoint().getProcedureName());', '((ServiceProgramCall)pgmCall).setReturnValueFormat(ServiceProgramCall.NO_RETURN_VALUE);', '}', 'pgmCall.setProgram(commandStr);', 'pgmCall.setParameterList(parameterList);', 'if (LOG.isDebugEnabled()) {']
['starting to call pgm in host authentication with the user ', ['new', 'object', 'commandstr', 'iseries', 'getsystemname', 'iseries', 'getuserid']]
camel sample_16773

['pgmCall = new ServiceProgramCall(iSeries);', '((ServiceProgramCall)pgmCall).setProcedureName(getISeriesEndpoint().getProcedureName());', '((ServiceProgramCall)pgmCall).setReturnValueFormat(ServiceProgramCall.NO_RETURN_VALUE);', '}', 'pgmCall.setProgram(commandStr);', 'pgmCall.setParameterList(parameterList);', 'if (LOG.isDebugEnabled()) {', '}', 'boolean result = pgmCall.run();', 'if (LOG.isTraceEnabled()) {']
['executed pgm in host success ', ['new', 'object', 'commandstr', 'iseries', 'getsystemname', 'result']]
camel sample_16773

['AS400DataType typeConverter;', 'if (getISeriesEndpoint().getFormat() == Jt400Configuration.Format.binary) {', 'typeConverter = new AS400ByteArray(length);', '} else {', 'typeConverter = new AS400Text(length, iSeries);', '}', 'inputData = typeConverter.toBytes(param);', '}', '}', 'if (input && output) {']
['parameter is both input and output ', ['i']]
camel sample_16773

['inputData = typeConverter.toBytes(param);', '}', '}', 'if (input && output) {', 'if (getISeriesEndpoint().getType() == Jt400Type.PGM) {', 'parameterList[i] = new ProgramParameter(inputData, length);', '} else {', 'parameterList[i] = new ProgramParameter(ProgramParameter.PASS_BY_REFERENCE, inputData, length);', '}', '} else if (input) {']
['parameter is input ', ['i']]
camel sample_16773

['}', '} else if (input) {', 'if (inputData != null) {', 'parameterList[i] = new ProgramParameter(inputData);', '} else {', 'parameterList[i] = new ProgramParameter();', 'parameterList[i].setParameterType(ProgramParameter.PASS_BY_REFERENCE);', 'parameterList[i].setNullParameter(true);', '}', '} else {']
['parameter is output ', ['i']]
camel sample_16773

['protected void doStart() throws Exception {', 'if (iSeries == null) {', 'iSeries = getISeriesEndpoint().getSystem();', '}', 'if (!iSeries.isConnected(AS400.COMMAND)) {']
['connecting to ', ['getiseriesendpoint']]
camel sample_16773

['protected void doStop() throws Exception {', 'if (iSeries != null) {']
['releasing connection to ', ['getiseriesendpoint']]
camel sample_16773

['public void process(Exchange exchange) throws Exception {']
['processing exchange in camel ', []]
camel sample_7960

['public void process(Exchange exchange) throws Exception {', 'BindingOperationInfo boi = (BindingOperationInfo)exchange.getProperty(BindingOperationInfo.class.getName());', 'if (boi != null) {']
['boi isunwrapped ', ['boi', 'isunwrapped']]
camel sample_7960

['public void process(Exchange exchange) throws Exception {', 'BindingOperationInfo boi = (BindingOperationInfo)exchange.getProperty(BindingOperationInfo.class.getName());', 'if (boi != null) {', '}', 'GetPerson person =  exchange.getIn().getBody(GetPerson.class);', 'String personId = person.getPersonId();', 'GetPersonResponse response = new GetPersonResponse();', 'if (personId == null || personId.length() == 0) {']
['person id so throwing exception ', []]
camel sample_7960

['org.apache.camel.non_wrapper.types.UnknownPersonFault personFault = new org.apache.camel.non_wrapper.types.UnknownPersonFault();', 'personFault.setPersonId("");', 'org.apache.camel.non_wrapper.UnknownPersonFault fault = new org.apache.camel.non_wrapper.UnknownPersonFault("Get the null value of person name", personFault);', 'exchange.getOut().setFault(true);', 'exchange.getOut().setBody(fault);', 'return;', '}', 'response.setPersonId(personId);', 'response.setName("Bonjour");', 'response.setSsn("123");']
['setting bonjour as the response ', []]
camel sample_7960

['public FreemarkerEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {', 'String newUri = uri.replace(getResourceUri(), newResourceUri);']
['getting endpoint with uri ', ['newuri']]
camel sample_9092

['protected void onExchange(Exchange exchange) throws Exception {', 'String path = getResourceUri();', 'ObjectHelper.notNull(configuration, "configuration");', 'ObjectHelper.notNull(path, "resourceUri");', 'String newResourceUri = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI, String.class);', 'if (newResourceUri != null) {', 'exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI);']
['set to creating new endpoint to handle exchange ', ['freemarkerconstants', 'freemarker', 'resource', 'uri', 'newresourceuri']]
camel sample_9092

['if (content != null) {', 'reader = new StringReader(content);', 'exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_TEMPLATE);', '}', 'Object dataModel = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_DATA_MODEL, Object.class);', 'if (dataModel == null) {', 'dataModel = ExchangeHelper.createVariableMap(exchange);', '}', 'Template template;', 'if (reader != null) {']
['freemarker is evaluating template read from header using context ', ['freemarkerconstants', 'freemarker', 'template', 'datamodel']]
camel sample_9092

['exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_TEMPLATE);', '}', 'Object dataModel = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_DATA_MODEL, Object.class);', 'if (dataModel == null) {', 'dataModel = ExchangeHelper.createVariableMap(exchange);', '}', 'Template template;', 'if (reader != null) {', 'template = new Template("temp", reader, new Configuration());', '} else {']
['freemarker is evaluating using context ', ['path', 'datamodel']]
camel sample_9092

['public void testListEndpoints() throws Exception {', 'template.sendBody("browse:foo", body1);', 'template.sendBody("browse:foo", body2);', 'Collection<Endpoint> list = context.getEndpoints();', 'assertEquals("number of endpoints", 2, list.size());', 'for (Endpoint endpoint : list) {', 'List<Exchange> exchanges = ((BrowseEndpoint) endpoint).getExchanges();']
['has ', ['endpoint', 'exchanges']]
camel sample_3535

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<ExchangePropertyLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.exchangeproperty.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.exchangeproperty.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_896

['public void onInit(Route route) {', 'ensureElectionIsCreated(route);']
['route managed by setting route autostartup flag to false ', ['this', 'getclass', 'route', 'getid']]
camel sample_12675

['private void startAllStoppedRoutes() {', 'try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {']
['route s have been stopped previously by policy restarting ', ['suspendedroutes', 'size']]
camel sample_12675

['private void startAllStoppedRoutes() {', 'try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {', '}', 'for (Route suspended : suspendedRoutes) {']
['starting route ', ['suspended', 'getid']]
camel sample_12675

['public void init(CamelContext camelContext, NettyServerBootstrapConfiguration configuration, ChannelPipelineFactory pipelineFactory) {', 'super.init(camelContext, configuration, pipelineFactory);', 'this.port = configuration.getPort();', 'this.bootstrapConfiguration = configuration;']
['bootstrapfactory on port is using bootstrap configuration ', ['port', 'bootstrapconfiguration', 'tostringbootstrapconfiguration']]
camel sample_8379

['public void addConsumer(NettyConsumer consumer) {', 'if (compatibleCheck) {', 'if (bootstrapConfiguration != consumer.getConfiguration() && !bootstrapConfiguration.compatible(consumer.getConfiguration())) {', 'throw new IllegalArgumentException("Bootstrap configuration must be identical when adding additional consumer: " + consumer.getEndpoint() + " on same port: " + port + ".\\n  Existing " + bootstrapConfiguration.toStringBootstrapConfiguration() + "\\n       New " + consumer.getConfiguration().toStringBootstrapConfiguration());', '}', '}', 'if (LOG.isDebugEnabled()) {', 'NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer;']
['bootstrapfactory on port is adding consumer with context path ', ['port', 'httpconsumer', 'getconfiguration', 'getpath']]
camel sample_8379

['public void removeConsumer(NettyConsumer consumer) {', 'if (LOG.isDebugEnabled()) {', 'NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer;']
['bootstrapfactory on port is removing consumer with context path ', ['port', 'httpconsumer', 'getconfiguration', 'getpath']]
camel sample_8379

['protected void doStart() throws Exception {']
['bootstrapfactory on port is starting ', ['port']]
camel sample_8379

['public void stop() throws Exception {', 'int consumers = channelFactory.consumers();', 'if (consumers == 0) {']
['bootstrapfactory on port is stopping ', ['port']]
camel sample_8379

['public void stop() throws Exception {', 'int consumers = channelFactory.consumers();', 'if (consumers == 0) {', 'super.stop();', '} else {']
['bootstrapfactory on port has registered consumers so cannot stop yet ', ['port', 'consumers']]
camel sample_8379

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNettyTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_195

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNettyTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("netty-http:http: Assert.assertEquals("netty-http:http: list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_195

['} else if (obj instanceof String) {', 'return Bytes.toBytes((String) obj);', '} else {', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'ObjectOutputStream oos = null;', 'try {', 'oos = new ObjectOutputStream(baos);', 'oos.writeObject(obj);', 'return baos.toByteArray();', '} catch (IOException e) {']
['error while serializing object null will be used ', ['e']]
camel sample_14522

['public Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {', 'try {', 'return classLoader.loadClass(desc.getName());', '} catch (Exception e) {', '}', 'return super.resolveClass(desc);', '}', '};', 'result = ois.readObject();', '} catch (IOException e) {']
['error while deserializing object null will be used ', ['e']]
camel sample_14522

['try {', 'return classLoader.loadClass(desc.getName());', '} catch (Exception e) {', '}', 'return super.resolveClass(desc);', '}', '};', 'result = ois.readObject();', '} catch (IOException e) {', '} catch (ClassNotFoundException e) {']
['could not find class while deserializing object null will be used ', ['e']]
camel sample_14522

['public ManagementStrategy create(CamelContext context, boolean disableJMX) {', 'ManagementStrategy answer;', 'if (disableJMX || Boolean.getBoolean(JmxSystemPropertyKeys.DISABLED)) {', 'answer = new DefaultManagementStrategy(context);', '} else {', 'try {', 'answer = new ManagedManagementStrategy(context, new DefaultManagementAgent(context));', 'context.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(context));', '} catch (Exception e) {']
['cannot create jmx lifecycle strategy will fallback and disable jmx ', ['e']]
camel sample_4589

['public void testSearchTimelineWithStaticQuery() throws Exception {', 'template.sendBody(null);', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14172

['public void testSearchTimelineWithDynamicQuery() throws Exception {', 'templateHeader.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14172

['public void testSearchTimelineWithDynamicQuerySinceId() throws Exception {', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put(TwitterConstants.TWITTER_KEYWORDS, "java");', 'headers.put(TwitterConstants.TWITTER_SINCEID, new Long(258347905419730944L));', 'templateHeader.sendBodyAndHeaders(null, headers);', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14172

['public void testDoubleSearchKeepingOld() throws Exception {', 'templateDouble.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14172

['public void start() {', 'if (nexusUrl == null || nexusUrl.isEmpty()) {']
['nexus service not found indexing nexus is not enabled ', []]
camel sample_316

['public void start() {', 'if (nexusUrl == null || nexusUrl.isEmpty()) {', 'return;', '}', 'if (!started.compareAndSet(false, true)) {']
['nexusrepository is already started ', []]
camel sample_316

['public void start() {', 'if (nexusUrl == null || nexusUrl.isEmpty()) {', 'return;', '}', 'if (!started.compareAndSet(false, true)) {', 'return;', '}']
['starting nexusrepository to scan every seconds ', ['delay']]
camel sample_316

['public void start() {', 'if (nexusUrl == null || nexusUrl.isEmpty()) {', 'return;', '}', 'if (!started.compareAndSet(false, true)) {', 'return;', '}', 'executorService = Executors.newScheduledThreadPool(1);', 'executorService.scheduleWithFixedDelay(() -> {', 'try {']
['indexing nexus start ', ['nexusurl']]
camel sample_316

['}', 'if (!started.compareAndSet(false, true)) {', 'return;', '}', 'executorService = Executors.newScheduledThreadPool(1);', 'executorService.scheduleWithFixedDelay(() -> {', 'try {', 'indexNexus();', '} catch (Throwable e) {', 'if (e.getMessage().contains("UnknownHostException")) {']
['error indexing nexus due unknown hosts ', ['nexusurl', 'e', 'getmessage']]
camel sample_316

['if (!started.compareAndSet(false, true)) {', 'return;', '}', 'executorService = Executors.newScheduledThreadPool(1);', 'executorService.scheduleWithFixedDelay(() -> {', 'try {', 'indexNexus();', '} catch (Throwable e) {', 'if (e.getMessage().contains("UnknownHostException")) {', '} else {']
['error indexing nexus due ', ['nexusurl', 'e', 'getmessage', 'e']]
camel sample_316

['}', 'executorService = Executors.newScheduledThreadPool(1);', 'executorService.scheduleWithFixedDelay(() -> {', 'try {', 'indexNexus();', '} catch (Throwable e) {', 'if (e.getMessage().contains("UnknownHostException")) {', '} else {', '}', '} finally {']
['indexing nexus end ', ['nexusurl']]
camel sample_316

['public void stop() {']
['stopping nexusrepository ', []]
camel sample_316

['String g = getNodeText(node.getChildNodes(), "groupId");', 'String a = getNodeText(node.getChildNodes(), "artifactId");', 'String v = getNodeText(node.getChildNodes(), "version");', 'String l = getNodeText(node.getChildNodes(), "artifactLink");', 'if (g != null & a != null & v != null & l != null) {', 'NexusArtifactDto dto = new NexusArtifactDto();', 'dto.setGroupId(g);', 'dto.setArtifactId(a);', 'dto.setVersion(v);', 'dto.setArtifactLink(l);']
['found ', ['dto', 'getgroupid', 'dto', 'getartifactid', 'dto', 'getversion']]
camel sample_316

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (killAfter != -1) {']
['warning killafter is now deprecated do you need it please comment on mexec ', []]
camel sample_73

['getLog().debug(msg);', '}', 'IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass /* name */);', 'Thread bootstrapThread = new Thread(threadGroup, new Runnable() {', 'public void run() {', 'try {', 'Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass) .getMethod("main", String[].class);', 'main.invoke(null, new Object[] {arguments});', '} catch (Exception e) {', 'getLog().error("*************************************");']
['error occurred while running main from ', ['mainclass']]
camel sample_73

['getLog().error("*************************************");', 'Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e);', '}', '}', '}, mainClass + ".main()");', 'bootstrapThread.setContextClassLoader(getClassLoader());', 'setSystemProperties();', 'bootstrapThread.start();', 'joinNonDaemonThreads(threadGroup);', 'if (keepAlive) {']
['warning keepalive is now deprecated and obsolete do you need it please comment on mexec ', []]
camel sample_73

['bootstrapThread.start();', 'joinNonDaemonThreads(threadGroup);', 'if (keepAlive) {', 'waitFor(0);', '}', 'if (cleanupDaemonThreads) {', 'terminateThreads(threadGroup);', 'try {', 'threadGroup.destroy();', '} catch (IllegalThreadStateException e) {']
['couldn t destroy thread group ', ['threadgroup', 'e']]
camel sample_73

['}', 'boolean doLog = false;', 'synchronized (this) {', 'if (uncaughtException == null) {', 'uncaughtException = throwable;', '} else {', 'doLog = true;', '}', '}', 'if (doLog) {']
['an additional exception was thrown ', ['throwable']]
camel sample_73

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {']
['joining on thread ', ['thread']]
camel sample_73

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {', 'thread.join(timeoutMsecs);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();']
['interrupted while joining against thread ', ['thread', 'e']]
camel sample_73

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {', 'thread.join(timeoutMsecs);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();', '}', 'if (thread.isAlive()) {']
['thread was interrupted but is still alive after waiting at least msecs ', ['thread', 'timeoutmsecs']]
camel sample_73

['private void terminateThreads(ThreadGroup threadGroup) {', 'long startTime = System.currentTimeMillis();', 'Set<Thread> uncooperativeThreads = new HashSet<Thread>();', 'for (Collection<Thread> threads = getActiveThreads(threadGroup); !threads.isEmpty(); threads = getActiveThreads(threadGroup), threads .removeAll(uncooperativeThreads)) {', 'for (Thread thread : threads) {']
['interrupting thread ', ['thread']]
camel sample_73

['}', 'long timeout = daemonThreadJoinTimeout - (System.currentTimeMillis() - startTime);', 'if (timeout > 0) {', 'joinThread(thread, timeout);', '}', 'if (!thread.isAlive()) {', 'continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {']
['thread will be thread stop ed ', ['thread']]
camel sample_73

['if (timeout > 0) {', 'joinThread(thread, timeout);', '}', 'if (!thread.isAlive()) {', 'continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {', 'thread.stop();', '} else {']
['thread will linger despite being asked to die via interruption ', ['thread']]
camel sample_73

['continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {', 'thread.stop();', '} else {', '}', '}', '}', 'if (!uncooperativeThreads.isEmpty()) {']
['note thread s did not finish despite being asked to via interruption this is not a problem with exec java it is a problem with the running code although not serious it should be remedied ', ['uncooperativethreads', 'size']]
camel sample_73

['}', '}', '}', 'if (!uncooperativeThreads.isEmpty()) {', '} else {', 'int activeCount = threadGroup.activeCount();', 'if (activeCount != 0) {', 'Thread[] threadsArray = new Thread[1];', 'threadGroup.enumerate(threadsArray);', 'if (getLog().isDebugEnabled()) {']
['strange thread s still active in the group such as ', ['activecount', 'threadgroup', 'threadsarray']]
camel sample_73

['private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {', 'if (hasCommandlineArgs()) {', 'arguments = parseCommandlineArgs();', '}', 'try {', 'Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator();', 'while (iter.hasNext()) {', 'Artifact classPathElement = iter.next();']
['adding plugin dependency artifact to classpath ', ['classpathelement', 'getartifactid']]
camel sample_73

['private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {']
['project dependencies will be included ', []]
camel sample_73

['private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {', 'URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL();']
['adding to classpath ', ['mainclasses']]
camel sample_73

['private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {', 'URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL();', 'path.add(mainClasses);', 'Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts());', 'dependencies.addAll(getAllNonTestScopedDependencies());', 'Iterator<Artifact> iter = dependencies.iterator();', 'while (iter.hasNext()) {', 'Artifact classPathElement = iter.next();']
['adding project dependency artifact to classpath ', ['classpathelement', 'getartifactid']]
camel sample_73

['Artifact classPathElement = iter.next();', 'File file = classPathElement.getFile();', 'if (file != null) {', 'path.add(file.toURI().toURL());', '}', '}', '} catch (MalformedURLException e) {', 'throw new MojoExecutionException("Error during setting up classpath", e);', '}', '} else {']
['project dependencies will be excluded ', []]
camel sample_73

['private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {', 'Set<Artifact> relevantDependencies;', 'if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {']
['all plugin dependencies will be included ', []]
camel sample_73

['private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {', 'Set<Artifact> relevantDependencies;', 'if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {', 'relevantDependencies = new HashSet<Artifact>(this.pluginDependencies);', '} else {']
['selected plugin dependencies will be included ', []]
camel sample_73

['if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {', 'relevantDependencies = new HashSet<Artifact>(this.pluginDependencies);', '} else {', 'Artifact executableArtifact = this.findExecutableArtifact();', 'Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact);', 'relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact);', '}', '} else {', 'relevantDependencies = Collections.emptySet();']
['plugin dependencies will be excluded ', []]
camel sample_73

['private void waitFor(long millis) {', 'Object lock = new Object();', 'synchronized (lock) {', 'try {', 'lock.wait(millis);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();']
['spuriously interrupted while waiting for ms ', ['millis', 'e']]
camel sample_73

['public void testHttpProxy() throws Exception {']
['sending messages to a http endpoint which is proxied bridged ', ['size']]
camel sample_10977

['public void testHttpProxy() throws Exception {', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < size; i++) {', 'String out = template.requestBody("http: assertEquals("Bye " + i, out);', '}']
['time taken ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_10977

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_11665

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<VelocityComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.velocity.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.velocity.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_984

['public static List<PGPPublicKey> findPublicKeys(List<String> useridParts, boolean forEncryption, PGPPublicKeyRingCollection pgpPublicKeyringCollection) {', 'List<PGPPublicKey> result = new ArrayList<PGPPublicKey>(useridParts.size());', 'for (Iterator<PGPPublicKeyRing> keyRingIter = pgpPublicKeyringCollection.getKeyRings(); keyRingIter.hasNext();) {', 'PGPPublicKeyRing keyRing = keyRingIter.next();', 'PGPPublicKey primaryKey = keyRing.getPublicKey();', 'String[] foundKeyUserIdForUserIdPart = findFirstKeyUserIdContainingOneOfTheParts(useridParts, primaryKey);', 'if (foundKeyUserIdForUserIdPart == null) {']
['no user id found in primary key with key id containing one of the parts ', ['primarykey', 'getkeyid', 'useridparts']]
camel sample_9180

['public static List<PGPPublicKey> findPublicKeys(List<String> useridParts, boolean forEncryption, PGPPublicKeyRingCollection pgpPublicKeyringCollection) {', 'List<PGPPublicKey> result = new ArrayList<PGPPublicKey>(useridParts.size());', 'for (Iterator<PGPPublicKeyRing> keyRingIter = pgpPublicKeyringCollection.getKeyRings(); keyRingIter.hasNext();) {', 'PGPPublicKeyRing keyRing = keyRingIter.next();', 'PGPPublicKey primaryKey = keyRing.getPublicKey();', 'String[] foundKeyUserIdForUserIdPart = findFirstKeyUserIdContainingOneOfTheParts(useridParts, primaryKey);', 'if (foundKeyUserIdForUserIdPart == null) {', 'continue;', '}']
['user id found in primary key with key id containing one of the parts ', ['new', 'object']]
camel sample_9180

['PGPPublicKey primaryKey = keyRing.getPublicKey();', 'String[] foundKeyUserIdForUserIdPart = findFirstKeyUserIdContainingOneOfTheParts(useridParts, primaryKey);', 'if (foundKeyUserIdForUserIdPart == null) {', 'continue;', '}', 'foundKeyUserIdForUserIdPart[0], primaryKey.getKeyID(), useridParts });', 'for (Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys(); keyIter.hasNext();) {', 'PGPPublicKey key = keyIter.next();', 'if (forEncryption) {', 'if (isEncryptionKey(key)) {']
['public encryption key with key user id and key id added to the encryption keys ', ['foundkeyuseridforuseridpart', 'long', 'tostring', 'key', 'getkeyid']]
camel sample_9180

['}', 'foundKeyUserIdForUserIdPart[0], primaryKey.getKeyID(), useridParts });', 'for (Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys(); keyIter.hasNext();) {', 'PGPPublicKey key = keyIter.next();', 'if (forEncryption) {', 'if (isEncryptionKey(key)) {', 'result.add(key);', '}', '} else if (!forEncryption && isSignatureKey(key)) {', 'result.add(key);']
['public key with key user id and key id added to the signing keys ', ['foundkeyuseridforuseridpart', 'long', 'tostring', 'key', 'getkeyid']]
camel sample_9180

['private static boolean isEncryptionKey(PGPPublicKey key) {', 'if (!key.isEncryptionKey()) {', 'return false;', '}', 'Boolean hasEncryptionKeyFlags = hasOneOfExpectedKeyFlags(key, new int[] {KeyFlags.ENCRYPT_COMMS, KeyFlags.ENCRYPT_STORAGE });', 'if (hasEncryptionKeyFlags != null && !hasEncryptionKeyFlags) {']
['public key with key key id found for specified user id but this key will not be used for the encryption because its key flags are not encryption key flags ', ['long', 'tostring', 'key', 'getkeyid']]
camel sample_9180

['public static List<PGPSecretKeyAndPrivateKeyAndUserId> findSecretKeysWithPrivateKeyAndUserId(Map<String, String> sigKeyUserId2Password, String provider, PGPSecretKeyRingCollection pgpSec) throws PGPException {', 'List<PGPSecretKeyAndPrivateKeyAndUserId> result = new ArrayList<PGPSecretKeyAndPrivateKeyAndUserId>(sigKeyUserId2Password.size());', 'for (Iterator<?> i = pgpSec.getKeyRings(); i.hasNext();) {', 'Object data = i.next();', 'if (data instanceof PGPSecretKeyRing) {', 'PGPSecretKeyRing keyring = (PGPSecretKeyRing) data;', 'PGPSecretKey primaryKey = keyring.getSecretKey();', 'List<String> useridParts = new ArrayList<String>(sigKeyUserId2Password.keySet());', 'String[] foundKeyUserIdForUserIdPart = findFirstKeyUserIdContainingOneOfTheParts(useridParts, primaryKey.getPublicKey());', 'if (foundKeyUserIdForUserIdPart == null) {']
['no user id found in primary key with key id containing one of the parts ', ['primarykey', 'getkeyid', 'useridparts']]
camel sample_9180

['for (Iterator<?> i = pgpSec.getKeyRings(); i.hasNext();) {', 'Object data = i.next();', 'if (data instanceof PGPSecretKeyRing) {', 'PGPSecretKeyRing keyring = (PGPSecretKeyRing) data;', 'PGPSecretKey primaryKey = keyring.getSecretKey();', 'List<String> useridParts = new ArrayList<String>(sigKeyUserId2Password.keySet());', 'String[] foundKeyUserIdForUserIdPart = findFirstKeyUserIdContainingOneOfTheParts(useridParts, primaryKey.getPublicKey());', 'if (foundKeyUserIdForUserIdPart == null) {', 'continue;', '}']
['user id found in primary key with key id containing one of the parts ', ['new', 'object']]
camel sample_9180

['if (foundKeyUserIdForUserIdPart == null) {', 'continue;', '}', 'foundKeyUserIdForUserIdPart[0], primaryKey.getKeyID(), useridParts });', 'for (Iterator<PGPSecretKey> iterKey = keyring.getSecretKeys(); iterKey.hasNext();) {', 'PGPSecretKey secKey = iterKey.next();', 'if (isSigningKey(secKey)) {', 'PGPPrivateKey privateKey = secKey.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider(provider) .build(sigKeyUserId2Password.get(foundKeyUserIdForUserIdPart[1]).toCharArray()));', 'if (privateKey != null) {', 'result.add(new PGPSecretKeyAndPrivateKeyAndUserId(secKey, privateKey, foundKeyUserIdForUserIdPart[0]));']
['private key with user id and key id added to the signing keys ', ['foundkeyuseridforuseridpart', 'long', 'tostring', 'privatekey', 'getkeyid']]
camel sample_9180

['private static boolean isSigningKey(PGPSecretKey secKey) {', 'if (!secKey.isSigningKey()) {', 'return false;', '}', 'Boolean hasSigningKeyFlag = hasOneOfExpectedKeyFlags(secKey.getPublicKey(), new int[] {KeyFlags.SIGN_DATA });', 'if (hasSigningKeyFlag != null && !hasSigningKeyFlag) {']
['secret key with key id found for specified user id part but this key will not be used for signing because of its key flags ', ['long', 'tostring', 'seckey', 'getkeyid']]
camel sample_9180

['public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection) throws PGPException {', 'PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId);', 'if (publicKeyring == null) {']
['no public key found for key id ', ['long', 'tostring', 'keyid']]
camel sample_9180

['private static boolean isAllowedKey(List<String> allowedUserIds, Iterator<String> verifyingPublicKeyUserIds) {', 'if (allowedUserIds == null || allowedUserIds.isEmpty()) {', 'return true;', '}', 'String keyUserId = null;', 'for (; verifyingPublicKeyUserIds.hasNext();) {', 'keyUserId = verifyingPublicKeyUserIds.next();', 'for (String userid : allowedUserIds) {', 'if (keyUserId != null && keyUserId.contains(userid)) {']
['public key with user id fulfills the user id restriction ', ['keyuserid', 'alloweduserids']]
camel sample_9180

['}', 'String keyUserId = null;', 'for (; verifyingPublicKeyUserIds.hasNext();) {', 'keyUserId = verifyingPublicKeyUserIds.next();', 'for (String userid : allowedUserIds) {', 'if (keyUserId != null && keyUserId.contains(userid)) {', 'return true;', '}', '}', '}']
['public key with user id does not fulfill the user id restriction ', ['keyuserid', 'alloweduserids']]
camel sample_9180

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to("sjms:queue:test.queue?transacted=true") .process( new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getHeader("isfailed", Boolean.class)) {']
['we failed should roll back ', []]
camel sample_12337

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to("sjms:queue:test.queue?transacted=true") .process( new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getHeader("isfailed", Boolean.class)) {', 'exchange.getOut().setFault(true);', '} else {']
['we passed should commit ', []]
camel sample_12337

['public synchronized void readFrom(Socket socket) throws MllpSocketException, SocketTimeoutException {']
['entering readfrom ', []]
camel sample_13875

['}', '} catch (SocketTimeoutException timeoutEx) {', 'throw timeoutEx;', '} catch (IOException ioEx) {', 'final String exceptionMessage = "Exception encountered reading Socket";', 'resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '} finally {', 'if (size() > 0 && !hasCompleteEnvelope()) {', 'if (!hasEndOfData() && hasEndOfBlock() && endOfBlockIndex < size() - 1) {']
['readfrom exiting with partial payload ', ['converttoprintfriendlystring', 'buffer', 'size']]
camel sample_13875

['final String exceptionMessage = "Exception encountered reading Socket";', 'resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '} finally {', 'if (size() > 0 && !hasCompleteEnvelope()) {', 'if (!hasEndOfData() && hasEndOfBlock() && endOfBlockIndex < size() - 1) {', '}', '}', '}', '} else {']
['socket is invalid no data read ', []]
camel sample_13875

['resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '} finally {', 'if (size() > 0 && !hasCompleteEnvelope()) {', 'if (!hasEndOfData() && hasEndOfBlock() && endOfBlockIndex < size() - 1) {', '}', '}', '}', '} else {', '}']
['exiting readfrom ', []]
camel sample_13875

['public synchronized void writeTo(Socket socket) throws MllpSocketException {']
['entering writeto ', []]
camel sample_13875

['socketOutputStream.write(buffer, 0, availableByteCount);', 'socketOutputStream.write(MllpProtocolConstants.PAYLOAD_TERMINATOR);', '}', 'socketOutputStream.flush();', '} catch (IOException ioEx) {', 'final String exceptionMessage = "Exception encountered writing Socket";', 'resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '}', '} else {']
['ignoring call to writeto byte payload mllp payload is null or empty ', []]
camel sample_13875

['}', 'socketOutputStream.flush();', '} catch (IOException ioEx) {', 'final String exceptionMessage = "Exception encountered writing Socket";', 'resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '}', '} else {', '}', '} else {']
['socket is invalid no data written ', []]
camel sample_13875

['socketOutputStream.flush();', '} catch (IOException ioEx) {', 'final String exceptionMessage = "Exception encountered writing Socket";', 'resetSocket(socket, exceptionMessage);', 'throw new MllpSocketException(exceptionMessage, ioEx);', '}', '} else {', '}', '} else {', '}']
['exiting writeto ', []]
camel sample_13875

['public synchronized String toHl7String(String charsetName) {', 'String hl7String = null;', 'if (hasCompleteEnvelope()) {', 'int offset = hasStartOfBlock() ? startOfBlockIndex + 1 : 1;', 'int length = hasEndOfBlock() ? endOfBlockIndex - offset : availableByteCount - startOfBlockIndex - 1;', 'if (length > 0) {', 'try {', 'hl7String = new String(buffer, offset, length, charsetName);', '} catch (UnsupportedEncodingException unsupportedEncodingEx) {']
['failed to create string using charset falling back to default charset ', ['charsetname', 'mllpprotocolconstants', 'default', 'charset']]
camel sample_13875

['public void process(final Exchange exchange) throws Exception {', 'final SMSMessage smsMessage = exchange.getIn().getMandatoryBody(SMSMessage.class);']
['validating smsmessage instance provided ', ['smsmessage', 'tostring']]
camel sample_12788

['final SMSMessage smsMessage = exchange.getIn().getMandatoryBody(SMSMessage.class);', 'final Set<ConstraintViolation<SMSMessage>> constraintViolations = getValidator().validate(smsMessage);', 'if (constraintViolations.size() > 0) {', 'final StringBuffer msg = new StringBuffer();', 'for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {', 'msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()));', '}', 'log.debug(msg.toString());', 'throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class);', '}']
['smsmessage instance is valid ', ['smsmessage', 'tostring']]
camel sample_12788

['final Set<ConstraintViolation<SMSMessage>> constraintViolations = getValidator().validate(smsMessage);', 'if (constraintViolations.size() > 0) {', 'final StringBuffer msg = new StringBuffer();', 'for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {', 'msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()));', '}', 'log.debug(msg.toString());', 'throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class);', '}', 'final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage());']
['cmmessage instance build from valid smsmessage instance ', []]
camel sample_12788

['for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {', 'msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()));', '}', 'log.debug(msg.toString());', 'throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class);', '}', 'final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage());', 'if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {', 'String df = getConfiguration().getDefaultFrom();', 'cmMessage.setSender(df);']
['dynamic sender is set to default dynamic sender ', ['df']]
camel sample_12788

['throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class);', '}', 'final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage());', 'if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {', 'String df = getConfiguration().getDefaultFrom();', 'cmMessage.setSender(df);', '}', 'cmMessage.setIdAsString(smsMessage.getId());', 'cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts());', 'sender.send(cmMessage);']
['request accepted by cm host ', ['cmmessage', 'tostring']]
camel sample_12788

['protected void doStart() throws Exception {']
['starting cmproducer ', []]
camel sample_12788

['protected void doStart() throws Exception {', 'final CMConfiguration configuration = getConfiguration();', 'if (configuration.isTestConnectionOnStartup()) {', 'try {']
['checking connection ', ['getendpoint', 'getcmurl']]
camel sample_12788

['protected void doStart() throws Exception {', 'final CMConfiguration configuration = getConfiguration();', 'if (configuration.isTestConnectionOnStartup()) {', 'try {', 'HttpClientBuilder.create().build().execute(new HttpHead(getEndpoint().getCMUrl()));']
['connection to ok ', ['getendpoint', 'getcmurl']]
camel sample_12788

['protected void doStart() throws Exception {', 'final CMConfiguration configuration = getConfiguration();', 'if (configuration.isTestConnectionOnStartup()) {', 'try {', 'HttpClientBuilder.create().build().execute(new HttpHead(getEndpoint().getCMUrl()));', '} catch (final Exception e) {', 'throw new HostUnavailableException(String.format("Connection to %s: NOT AVAILABLE", getEndpoint().getCMUrl()), e);', '}', '}', 'super.doStart();']
['cmproducer started ', []]
camel sample_12788

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SnmpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.snmp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.snmp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_438

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_3098

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['iso iso ', ['new', 'string', 'iso', 'charset', 'forname']]
camel sample_3098

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_3098

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {', '}', 'for (byte b : iso) {']
['iso byte ', ['b']]
camel sample_3098

['public void testInvokingSimpleServerWithParams() throws Exception {', 'Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut);', 'final List<String> params = new ArrayList<String>();', 'params.add(TEST_MESSAGE);', 'senderExchange.getIn().setBody(params);', 'senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION);', 'Exchange exchange = template.send("direct:EndpointA", senderExchange);', 'org.apache.camel.Message out = exchange.getOut();', 'MessageContentsList result = (MessageContentsList)out.getBody();']
['received output text ', ['result', 'get']]
camel sample_7872

['break;', '}', '} else {', 'any = true;', 'if (anySpoolRules) {', 'break;', '}', '}', '}', 'boolean answer = anySpoolRules ? any : all;']
['should spool cache ', ['length', 'answer']]
camel sample_4024

['public StreamCache cache(Exchange exchange) {', 'Message message = exchange.hasOut() ? exchange.getOut() : exchange.getIn();', 'StreamCache cache = message.getBody(StreamCache.class);', 'if (cache != null) {', 'if (LOG.isTraceEnabled()) {']
['cached stream to memory spool ', ['cache', 'inmemory', 'cache']]
camel sample_4024

['if (LOG.isTraceEnabled()) {', '}', 'if (statistics.isStatisticsEnabled()) {', 'try {', 'if (cache.inMemory()) {', 'statistics.updateMemory(cache.length());', '} else {', 'statistics.updateSpool(cache.length());', '}', '} catch (Exception e) {']
['error updating cache statistics this exception is ignored ', ['e']]
camel sample_4024

['protected void doStart() throws Exception {', 'if (!enabled) {']
['streamcaching is not enabled ', []]
camel sample_4024

['}', 'if (chiper != null) {', 'warn = true;', 'this.spoolChiper = chiper;', '}', 'if (dir != null) {', 'warn = true;', 'this.spoolDirectory = camelContext.getTypeConverter().convertTo(File.class, dir);', '}', 'if (warn) {']
['configuring of streamcaching using camelcontext properties is deprecated use streamcachingstrategy instead ', []]
camel sample_4024

['String name = resolveSpoolDirectory(spoolDirectoryName);', 'if (name != null) {', 'spoolDirectory = new File(name);', 'spoolDirectoryName = null;', '} else {', 'throw new IllegalStateException("Cannot resolve spool directory from pattern: " + spoolDirectoryName);', '}', '}', 'if (spoolDirectory.exists()) {', 'if (spoolDirectory.isDirectory()) {']
['using spool directory ', ['spooldirectory']]
camel sample_4024

['if (name != null) {', 'spoolDirectory = new File(name);', 'spoolDirectoryName = null;', '} else {', 'throw new IllegalStateException("Cannot resolve spool directory from pattern: " + spoolDirectoryName);', '}', '}', 'if (spoolDirectory.exists()) {', 'if (spoolDirectory.isDirectory()) {', '} else {']
['spool directory is not a directory this may cause problems spooling to disk for the stream caching ', ['spooldirectory']]
camel sample_4024

['throw new IllegalStateException("Cannot resolve spool directory from pattern: " + spoolDirectoryName);', '}', '}', 'if (spoolDirectory.exists()) {', 'if (spoolDirectory.isDirectory()) {', '} else {', '}', '} else {', 'boolean created = spoolDirectory.mkdirs();', 'if (!created) {']
['cannot create spool directory this may cause problems spooling to disk for the stream caching ', ['spooldirectory']]
camel sample_4024

['}', '}', 'if (spoolDirectory.exists()) {', 'if (spoolDirectory.isDirectory()) {', '} else {', '}', '} else {', 'boolean created = spoolDirectory.mkdirs();', 'if (!created) {', '} else {']
['created spool directory ', ['spooldirectory']]
camel sample_4024

['if (spoolThreshold > 0) {', 'spoolRules.add(new FixedThresholdSpoolRule());', '}', 'if (spoolUsedHeapMemoryThreshold > 0) {', 'if (spoolUsedHeapMemoryLimit == null) {', 'spoolUsedHeapMemoryLimit = SpoolUsedHeapMemoryLimit.Max;', '}', 'spoolRules.add(new UsedHeapMemorySpoolRule(spoolUsedHeapMemoryLimit));', '}', '}']
['streamcaching configuration ', ['this', 'tostring']]
camel sample_4024

['spoolRules.add(new FixedThresholdSpoolRule());', '}', 'if (spoolUsedHeapMemoryThreshold > 0) {', 'if (spoolUsedHeapMemoryLimit == null) {', 'spoolUsedHeapMemoryLimit = SpoolUsedHeapMemoryLimit.Max;', '}', 'spoolRules.add(new UsedHeapMemorySpoolRule(spoolUsedHeapMemoryLimit));', '}', '}', 'if (spoolDirectory != null) {']
['streamcaching in use with spool directory and rules ', ['spooldirectory', 'getpath', 'spoolrules', 'tostring']]
camel sample_4024

['}', 'if (spoolUsedHeapMemoryThreshold > 0) {', 'if (spoolUsedHeapMemoryLimit == null) {', 'spoolUsedHeapMemoryLimit = SpoolUsedHeapMemoryLimit.Max;', '}', 'spoolRules.add(new UsedHeapMemorySpoolRule(spoolUsedHeapMemoryLimit));', '}', '}', 'if (spoolDirectory != null) {', '} else {']
['streamcaching in use with rules ', ['spoolrules', 'tostring']]
camel sample_4024

['protected void doStop() throws Exception {', 'if (spoolThreshold > 0 & spoolDirectory != null  && isRemoveSpoolDirectoryWhenStopping()) {']
['removing spool directory ', ['spooldirectory']]
camel sample_4024

['protected void doStop() throws Exception {', 'if (spoolThreshold > 0 & spoolDirectory != null  && isRemoveSpoolDirectoryWhenStopping()) {', 'FileUtil.removeDir(spoolDirectory);', '}', 'if (LOG.isDebugEnabled() && statistics.isStatisticsEnabled()) {']
['stopping streamcachingstrategy with statistics ', ['statistics', 'tostring']]
camel sample_4024

['public boolean shouldSpoolCache(long length) {', 'if (spoolThreshold > 0 && length > spoolThreshold) {']
['should spool cache fixed threshold true ', ['length', 'spoolthreshold']]
camel sample_4024

['double upper = limit == SpoolUsedHeapMemoryLimit.Committed ? heapUsage.getHeapMemoryUsage().getCommitted() : heapUsage.getHeapMemoryUsage().getMax();', 'double calc = (used / upper) * 100;', 'int percentage = (int) calc;', 'if (LOG.isTraceEnabled()) {', 'long u = heapUsage.getHeapMemoryUsage().getUsed();', 'long c = heapUsage.getHeapMemoryUsage().getCommitted();', 'long m = heapUsage.getHeapMemoryUsage().getMax();', 'LOG.trace("Heap memory: [used={}M ({}%), committed={}M, max={}M]", new Object[]{u >> 20, percentage, c >> 20, m >> 20});', '}', 'if (percentage > spoolUsedHeapMemoryThreshold) {']
['should spool cache heap memory threshold true ', ['percentage', 'spoolusedheapmemorythreshold']]
camel sample_4024

['protected CamelContext createCamelContext() throws Exception {', 'if (isPlatform("windows")) {', 'return super.createCamelContext();', '}', 'CamelContext answer = super.createCamelContext();', 'RubyCamel.setCamelContext(answer);', 'RubyCamel.clearRoutes();', 'runScript(scriptName);', 'List<RouteBuilder> list = RubyCamel.getRoutes();']
['found route builders ', ['list']]
camel sample_14575

['protected void doStart() throws Exception {', 'super.doStart();', 'if (folder == null) {', 'return;', '}', 'File dir = new File(folder);', 'if (dir.exists() && dir.isDirectory()) {']
['starting reloadstrategy to watch directory ', ['dir']]
camel sample_4161

['if (clazz != null) {', 'WatchEvent.Modifier[] modifiers = clazz.getEnumConstants();', 'for (WatchEvent.Modifier mod : modifiers) {', 'if ("HIGH".equals(mod.name())) {', 'modifier = mod;', 'break;', '}', '}', '}', 'if (modifier != null) {']
['on mac os x the jdk watchservice is slow by default so enabling sensitivitywatcheventmodifier high as workaround ', []]
camel sample_4161

['WatchEvent.Modifier[] modifiers = clazz.getEnumConstants();', 'for (WatchEvent.Modifier mod : modifiers) {', 'if ("HIGH".equals(mod.name())) {', 'modifier = mod;', 'break;', '}', '}', '}', 'if (modifier != null) {', '} else {']
['on mac os x the jdk watchservice is slow and it may take up till seconds to notice file changes ', []]
camel sample_4161

['public void run() {']
['reloadstrategy is starting watching folder ', ['folder']]
camel sample_4161

['public void run() {', 'while (isStarting() || isRunAllowed()) {', 'running = true;', 'WatchKey key;', 'try {']
['reloadstrategy is polling for file changes in directory ', ['folder']]
camel sample_4161

['Path pathToReload = null;', 'if (isRecursive) {', 'pathToReload = folderKeys.get(key);', '} else {', 'pathToReload = folder;', '}', 'for (WatchEvent<?> event : key.pollEvents()) {', 'WatchEvent<Path> we = (WatchEvent<Path>) event;', 'Path path = we.context();', 'String name = pathToReload.resolve(path).toAbsolutePath().toFile().getAbsolutePath();']
['modified created file ', ['name']]
camel sample_4161

['if (isRecursive) {', 'pathToReload = folderKeys.get(key);', '} else {', 'pathToReload = folder;', '}', 'for (WatchEvent<?> event : key.pollEvents()) {', 'WatchEvent<Path> we = (WatchEvent<Path>) event;', 'Path path = we.context();', 'String name = pathToReload.resolve(path).toAbsolutePath().toFile().getAbsolutePath();', 'if (name.toLowerCase(Locale.US).endsWith(".xml")) {']
['modified created xml file ', ['name']]
camel sample_4161

['for (WatchEvent<?> event : key.pollEvents()) {', 'WatchEvent<Path> we = (WatchEvent<Path>) event;', 'Path path = we.context();', 'String name = pathToReload.resolve(path).toAbsolutePath().toFile().getAbsolutePath();', 'if (name.toLowerCase(Locale.US).endsWith(".xml")) {', 'try {', 'FileInputStream fis = new FileInputStream(name);', 'onReloadXml(getCamelContext(), name, fis);', 'IOHelper.close(fis);', '} catch (Exception e) {']
['error reloading routes from file due this exception is ignored ', ['name', 'e', 'getmessage', 'e']]
camel sample_4161

['}', '}', '}', 'boolean valid = key.reset();', 'if (!valid) {', 'break;', '}', '}', '}', 'running = false;']
['reloadstrategy is stopping watching folder ', ['folder']]
camel sample_4161

['public void doStart() throws Exception {', 'if (groupInterval != null) {', 'ObjectHelper.notNull(camelContext, "CamelContext", this);', 'logSchedulerService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "ThroughputLogger");', 'Runnable scheduledLogTask = new ScheduledLogTask();']
['scheduling throughput log to run every millis ', ['groupinterval']]
camel sample_4531

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {']
['throughputlogger cannot start because camelcontext has not been started yet ', ['camelcontext', 'getname']]
camel sample_4531

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<EhcacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ehcache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ehcache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_654

['StringBuilder sb = new StringBuilder();', 'for (char ch : hostName.toCharArray()) {', 'if (ch < 127) {', 'sb.append(ch);', '} else {', 'changed = true;', '}', '}', 'if (changed) {', 'String newHost = sb.toString();']
['sanitized hostname from to ', ['hostname', 'newhost']]
camel sample_3962

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("seda:start") .to("log:foo") .to("log:bar") .to("log:baz") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'try {', 'throw new IllegalArgumentException("Forced to dump stacktrace");', '} catch (Exception e) {', 'e.fillInStackTrace();']
['there are lines in the stacktrace ', ['e', 'getstacktrace', 'length']]
camel sample_2220

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("seda:start") .to("log:foo") .to("log:bar") .to("log:baz") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'try {', 'throw new IllegalArgumentException("Forced to dump stacktrace");', '} catch (Exception e) {', 'e.fillInStackTrace();']
['dump stacktrace to log ', ['e']]
camel sample_2220

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ClassComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.class.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.class.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_838

['public void testSedaQueue() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("seda:test.a").to("seda:test.b");', 'from("seda:test.b").process(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_3431

['public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("seda:test.a").to("seda:test.b");', 'from("seda:test.b").process(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_3431

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SnsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sns.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sns.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1119

['public void shutdown() throws Exception {']
['stopping ', []]
camel sample_12634

['public void shutdown() throws Exception {', 'controlledContext.stop();']
['stopped ', []]
camel sample_12634

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof RecipientListDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {']
['i m doing someting ', []]
camel sample_3827

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof RecipientListDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'return super.process(exchange, new AsyncCallback() {', 'public void done(final boolean doneSync) {']
['i m done ', []]
camel sample_3827

['if (EndpointHelper.isReferenceParameter(value)) {', 'String name = value.substring(1);', 'Object o = CamelContextHelper.mandatoryLookup(camelContext, name);', 'serverBootstrap.option(option, o);', '} else {', 'serverBootstrap.option(option, value);', '}', '}', '}', 'serverBootstrap.childHandler(pipelineFactory);']
['created serverbootstrap ', ['serverbootstrap']]
camel sample_10259

['if (EndpointHelper.isReferenceParameter(value)) {', 'String name = value.substring(1);', 'Object o = CamelContextHelper.mandatoryLookup(camelContext, name);', 'serverBootstrap.option(option, o);', '} else {', 'serverBootstrap.option(option, value);', '}', '}', '}', 'serverBootstrap.childHandler(pipelineFactory);']
['serverbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10259

['protected void stopServerBootstrap() {']
['serverbootstrap unbinding from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10259

['protected void stopServerBootstrap() {']
['closing channels ', ['allchannels', 'size']]
camel sample_10259

['private void getFunction(AWSLambda lambdaClient, Exchange exchange) {', 'GetFunctionResult result;', 'try {', 'result = lambdaClient.getFunction(new GetFunctionRequest().withFunctionName(getConfiguration().getFunction()));', '} catch (AmazonServiceException ase) {']
['getfunction command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['private void deleteFunction(AWSLambda lambdaClient, Exchange exchange) {', 'DeleteFunctionResult result;', 'try {', 'result = lambdaClient.deleteFunction(new DeleteFunctionRequest().withFunctionName(getConfiguration().getFunction()));', '} catch (AmazonServiceException ase) {']
['deletefunction command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['private void listFunctions(AWSLambda lambdaClient, Exchange exchange) {', 'ListFunctionsResult result;', 'try {', 'result = lambdaClient.listFunctions();', '} catch (AmazonServiceException ase) {']
['listfunctions command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['private void invokeFunction(AWSLambda lambdaClient, Exchange exchange) {', 'InvokeResult result;', 'try {', 'InvokeRequest request = new InvokeRequest() .withFunctionName(getConfiguration().getFunction()) .withPayload(exchange.getIn().getBody(String.class));', 'result = lambdaClient.invoke(request);', '} catch (AmazonServiceException ase) {']
['invokefunction command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['if (securityGroupIds != null) {', 'vpcConfig.withSecurityGroupIds(securityGroupIds);', '}', 'if (subnetIds != null) {', 'vpcConfig.withSubnetIds(subnetIds);', '}', 'request.withVpcConfig(vpcConfig);', '}', 'result = lambdaClient.createFunction(request);', '} catch (AmazonServiceException ase) {']
['createfunction command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(LambdaConstants.SDK_CLIENT_EXECUTION_TIMEOUT))) {', 'Integer timeout = exchange.getIn().getHeader(LambdaConstants.SDK_CLIENT_EXECUTION_TIMEOUT, Integer.class);', 'request.withSdkClientExecutionTimeout(timeout);', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(LambdaConstants.SDK_REQUEST_TIMEOUT))) {', 'Integer timeout = exchange.getIn().getHeader(LambdaConstants.SDK_REQUEST_TIMEOUT, Integer.class);', 'request.withSdkRequestTimeout(timeout);', '}', 'result = lambdaClient.updateFunctionCode(request);', '} catch (AmazonServiceException ase) {']
['updatefunction command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8768

['public void sleep(long redeliveryDelay) throws InterruptedException {']
['sleeping for millis until attempting redelivery ', ['redeliverydelay']]
camel sample_4462

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'throw new IllegalArgumentException("Forced to dump stacktrace");', '} catch (Exception e) {', 'e.fillInStackTrace();']
['there are lines in the stacktrace ', ['e', 'getstacktrace', 'length']]
camel sample_1660

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'throw new IllegalArgumentException("Forced to dump stacktrace");', '} catch (Exception e) {', 'e.fillInStackTrace();']
['dump stacktrace to log ', ['e']]
camel sample_1660

['public boolean register(HealthCheck check) {', 'boolean result = checks.add(check);', 'if (result) {', 'if (check instanceof CamelContextAware) {', '((CamelContextAware) check).setCamelContext(camelContext);', '}']
['healthcheck with id successfully registered ', ['check', 'getid']]
camel sample_4032

['public boolean unregister(HealthCheck check) {', 'boolean result = checks.remove(check);', 'if (result) {']
['healthcheck with id successfully un registered ', ['check', 'getid']]
camel sample_4032

['public boolean addRepository(HealthCheckRepository repository) {', 'boolean result = repositories.add(repository);', 'if (result) {', 'if (repository instanceof CamelContextAware) {', '((CamelContextAware) repository).setCamelContext(getCamelContext());']
['healthcheckrepository successfully registered ', ['repository']]
camel sample_4032

['public boolean removeRepository(HealthCheckRepository repository) {', 'boolean result = repositories.remove(repository);', 'if (result) {']
['healthcheckrepository with successfully un registered ', ['repository']]
camel sample_4032

['private StatusLine sendRoomMessage(String room, Exchange exchange) throws IOException, InvalidPayloadException {', 'String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_ROOM_NOTIFY), room);', 'String backGroundColor = exchange.getIn().getHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, String.class);', 'Map<String, String> jsonParam = getCommonHttpPostParam(exchange);', 'if (backGroundColor != null) {', 'jsonParam.put(HipchatApiConstants.API_MESSAGE_COLOR, backGroundColor);', '}']
['sending message to room ', ['room', 'mapper', 'writevalueasstring', 'jsonparam']]
camel sample_11331

['private StatusLine sendRoomMessage(String room, Exchange exchange) throws IOException, InvalidPayloadException {', 'String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_ROOM_NOTIFY), room);', 'String backGroundColor = exchange.getIn().getHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, String.class);', 'Map<String, String> jsonParam = getCommonHttpPostParam(exchange);', 'if (backGroundColor != null) {', 'jsonParam.put(HipchatApiConstants.API_MESSAGE_COLOR, backGroundColor);', '}', 'StatusLine statusLine = post(encodeHttpURI(urlPath), jsonParam);']
['response status for send room message ', ['statusline']]
camel sample_11331

['private StatusLine sendUserMessage(String user, Exchange exchange) throws IOException, InvalidPayloadException {', 'String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_USER_MESSAGE), user);', 'Map<String, String> jsonParam = getCommonHttpPostParam(exchange);']
['sending message to user ', ['user', 'mapper', 'writevalueasstring', 'jsonparam']]
camel sample_11331

['private StatusLine sendUserMessage(String user, Exchange exchange) throws IOException, InvalidPayloadException {', 'String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_USER_MESSAGE), user);', 'Map<String, String> jsonParam = getCommonHttpPostParam(exchange);', 'StatusLine statusLine = post(urlPath, jsonParam);']
['response status for send user message ', ['statusline']]
camel sample_11331

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NovaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-nova.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-nova.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1230

["int endIndex = queryString.indexOf('&', startIndex);", 'if (endIndex == -1) {', 'endIndex = queryString.length() - 1;', '}', 'final String strSince = queryString.substring(startIndex, endIndex);', 'try {', 'this.sinceTime = URLDecoder.decode(strSince, "UTF-8");', '} catch (UnsupportedEncodingException e) {', 'throw new RuntimeCamelException(String.format("Error decoding %s.since with value %s due to: %s", READING_PREFIX, strSince, e.getMessage()), e);', '}']
['using supplied property since value ', ['reading', 'prefix', 'this', 'sincetime']]
camel sample_9600

['endIndex = queryString.length() - 1;', '}', 'final String strSince = queryString.substring(startIndex, endIndex);', 'try {', 'this.sinceTime = URLDecoder.decode(strSince, "UTF-8");', '} catch (UnsupportedEncodingException e) {', 'throw new RuntimeCamelException(String.format("Error decoding %s.since with value %s due to: %s", READING_PREFIX, strSince, e.getMessage()), e);', '}', '}', 'if (queryString.contains("until=")) {']
['overriding configured property until ', ['reading', 'prefix']]
camel sample_9600

['argNames.addAll(FacebookPropertiesHelper.getEndpointPropertyNames(endpoint.getConfiguration()));', 'argNames.add(READING_PROPERTY);', 'final String[] argNamesArray = argNames.toArray(new String[argNames.size()]);', 'List<FacebookMethodsType> filteredMethods = filterMethods( endpoint.getCandidates(), MatchType.SUPER_SET, argNamesArray);', 'if (filteredMethods.isEmpty()) {', 'throw new IllegalArgumentException( String.format("Missing properties for %s, need one or more from %s", endpoint.getMethod(), getMissingProperties(endpoint.getMethod(), endpoint.getNameStyle(), argNames)));', '} else if (filteredMethods.size() == 1) {', 'result = filteredMethods.get(0);', '} else {', 'result = getHighestPriorityMethod(filteredMethods);']
['using highest priority method from methods ', ['method', 'filteredmethods']]
camel sample_9600

['return;', '}', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("netty4:tcp: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'SSLSession session = exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION, SSLSession.class);', 'if (session != null) {', 'javax.security.cert.X509Certificate cert = session.getPeerCertificateChain()[0];', 'Principal principal = cert.getSubjectDN();']
['client cert subjectdn ', ['principal', 'getname']]
camel sample_10170

['afterPropertiesSet();', 'RemoteFileConsumer<T> consumer = buildConsumer(processor);', 'if (isDelete() && getMove() != null) {', 'throw new IllegalArgumentException("You cannot both set delete=true and move options");', '}', 'if (isNoop() && !isIdempotentSet()) {', 'log.info("Endpoint is configured with noop=true so forcing endpoint to be idempotent as well");', 'setIdempotent(true);', '}', 'if (isIdempotentSet() && isIdempotent() && idempotentRepository == null) {']
['using default memory based idempotent repository with cache max size ', ['default', 'idempotent', 'cache', 'size']]
camel sample_15372

['public PollingConsumer createPollingConsumer() throws Exception {', 'if (log.isDebugEnabled()) {']
['creating genericfilepollingconsumer with queuesize blockwhenfull blocktimeout ', ['getpollingconsumerqueuesize', 'ispollingconsumerblockwhenfull', 'getpollingconsumerblocktimeout']]
camel sample_15372

['public boolean isValid(CacheManager cacheManager, String cacheName, String key) {']
['cache name ', ['cachename']]
camel sample_10520

['public boolean isValid(CacheManager cacheManager, String cacheName, String key) {', 'if (!cacheManager.cacheExists(cacheName)) {']
['no existing cache found with name please ensure a cache is first instantiated using a cache consumer or cache producer replacement will not be performed since the cache does not presently exist ', ['cachename', 'cachename']]
camel sample_10520

['public boolean isValid(CacheManager cacheManager, String cacheName, String key) {', 'if (!cacheManager.cacheExists(cacheName)) {', 'return false;', '}']
['found an existing cache ', ['cachename']]
camel sample_10520

['public boolean isValid(CacheManager cacheManager, String cacheName, String key) {', 'if (!cacheManager.cacheExists(cacheName)) {', 'return false;', '}', 'if (LOG.isTraceEnabled()) {']
['cache currently contains elements ', ['cachename', 'cachemanager', 'getcache', 'cachename', 'getsize']]
camel sample_10520

['public boolean isValid(CacheManager cacheManager, String cacheName, String key) {', 'if (!cacheManager.cacheExists(cacheName)) {', 'return false;', '}', 'if (LOG.isTraceEnabled()) {', '}', 'Ehcache cache = cacheManager.getCache(cacheName);', 'if (!cache.isKeyInCache(key)) {']
['no key with name presently exists in the cache it is also possible that the key may have expired in the cache replacement will not be performed until an appropriate key value pair is added to or found in the cache ', ['key']]
camel sample_10520

['protected void doStart() throws Exception {', 'super.doStart();', 'if (endpoint.getDelay() >= 0) {', 'task = new TimerTask() {', 'private final AtomicLong counter = new AtomicLong();', 'public void run() {', 'if (!isTaskRunAllowed()) {']
['run now allowed for timer ', ['endpoint']]
camel sample_4874

['public void run() {', 'if (!isTaskRunAllowed()) {', 'return;', '}', 'try {', 'long count = counter.incrementAndGet();', 'boolean fire = endpoint.getRepeatCount() <= 0 || count <= endpoint.getRepeatCount();', 'if (fire) {', 'sendTimerExchange(count);', '} else {']
['cancelling timer as repeat count limit reached after counts ', ['endpoint', 'gettimername', 'endpoint', 'getrepeatcount']]
camel sample_4874

['}', 'try {', 'long count = counter.incrementAndGet();', 'boolean fire = endpoint.getRepeatCount() <= 0 || count <= endpoint.getRepeatCount();', 'if (fire) {', 'sendTimerExchange(count);', '} else {', 'cancel();', '}', '} catch (Throwable e) {']
['error processing exchange this exception will be ignored to let the timer be able to trigger again ', ['e']]
camel sample_4874

['protected void sendTimerExchange(long counter) {', 'final Exchange exchange = endpoint.createExchange();', 'exchange.setProperty(Exchange.TIMER_COUNTER, counter);', 'exchange.setProperty(Exchange.TIMER_NAME, endpoint.getTimerName());', 'exchange.setProperty(Exchange.TIMER_TIME, endpoint.getTime());', 'exchange.setProperty(Exchange.TIMER_PERIOD, endpoint.getPeriod());', 'Date now = new Date();', 'exchange.setProperty(Exchange.TIMER_FIRED_TIME, now);', 'exchange.getIn().setHeader("firedTime", now);', 'if (LOG.isTraceEnabled()) {']
['timer is firing count ', ['endpoint', 'gettimername', 'counter']]
camel sample_4874

['private static void doGetBlob(CloudBlob client, Exchange exchange, BlobServiceConfiguration cfg) throws Exception {', 'BlobServiceUtil.configureCloudBlobForRead(client, cfg);', 'BlobServiceRequestOptions opts = getRequestOptions(exchange);']
['getting a blob from exchange ', ['cfg', 'getblobname', 'exchange']]
camel sample_9968

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";', 'onException(MllpInvalidMessageException.class) .to(invalid);']
['mllp mllpclient getmllphost mllpclient getmllpport connect timeout response timeout validatepayload requireendofdata routeid routeid log logginglevel info routeid message to complete ', ['test', 'route', 'received']]
camel sample_13834

['public void testOpenMllpEnvelopeWithReset() throws Exception {', 'expectedCompleteCount = 4;', 'expectedInvalidCount = 1;', 'setExpectedCounts();', 'NotifyBuilder notify1 = new NotifyBuilder(context).whenDone(2).create();', 'NotifyBuilder notify2 = new NotifyBuilder(context).whenDone(5).create();', 'mllpClient.connect();', 'mllpClient.setSoTimeout(10000);']
['sending test message ', []]
camel sample_13834

['public void testOpenMllpEnvelopeWithReset() throws Exception {', 'expectedCompleteCount = 4;', 'expectedInvalidCount = 1;', 'setExpectedCounts();', 'NotifyBuilder notify1 = new NotifyBuilder(context).whenDone(2).create();', 'NotifyBuilder notify2 = new NotifyBuilder(context).whenDone(5).create();', 'mllpClient.connect();', 'mllpClient.setSoTimeout(10000);', 'String acknowledgement1 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(1));']
['sending test message ', []]
camel sample_13834

['expectedCompleteCount = 4;', 'expectedInvalidCount = 1;', 'setExpectedCounts();', 'NotifyBuilder notify1 = new NotifyBuilder(context).whenDone(2).create();', 'NotifyBuilder notify2 = new NotifyBuilder(context).whenDone(5).create();', 'mllpClient.connect();', 'mllpClient.setSoTimeout(10000);', 'String acknowledgement1 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(1));', 'String acknowledgement2 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(2));', 'assertTrue("First two normal exchanges did not complete", notify1.matches(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS));']
['sending test message ', []]
camel sample_13834

['mllpClient.connect();', 'mllpClient.setSoTimeout(10000);', 'String acknowledgement1 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(1));', 'String acknowledgement2 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(2));', 'assertTrue("First two normal exchanges did not complete", notify1.matches(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS));', 'mllpClient.setSendEndOfBlock(false);', 'mllpClient.setSendEndOfData(false);', 'try {', 'mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(3));', '} catch (MllpJUnitResourceException resourceEx) {']
['expected exception reading response ', []]
camel sample_13834

['assertTrue("First two normal exchanges did not complete", notify1.matches(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS));', 'mllpClient.setSendEndOfBlock(false);', 'mllpClient.setSendEndOfData(false);', 'try {', 'mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(3));', '} catch (MllpJUnitResourceException resourceEx) {', '}', 'mllpClient.disconnect();', 'Thread.sleep(1000);', 'mllpClient.connect();']
['sending test message ', []]
camel sample_13834

['try {', 'mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(3));', '} catch (MllpJUnitResourceException resourceEx) {', '}', 'mllpClient.disconnect();', 'Thread.sleep(1000);', 'mllpClient.connect();', 'mllpClient.setSendEndOfBlock(true);', 'mllpClient.setSendEndOfData(true);', 'String acknowledgement4 = mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(4));']
['sending test message ', []]
camel sample_13834

['public abstract void testNthMessageContainingEmbeddedStartOfBlock() throws Exception;', 'protected void runNthMessageContainingEmbeddedStartOfBlock() throws Exception {', 'int messageCount = 10;', 'expectedCompleteCount = messageCount - expectedInvalidCount;', 'setExpectedCounts();', 'for (int i = 0; i < messageCount; ++i) {', 'String message = (i == (messageCount / 2)) ? Hl7TestMessageGenerator.generateMessage(i + 1).replaceFirst("EVN", "EVN" + MllpProtocolConstants.START_OF_BLOCK) : Hl7TestMessageGenerator.generateMessage(i + 1);']
['sending message ', ['converttoprintfriendlystring', 'message']]
camel sample_13834

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<GroovyLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.groovy.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.groovy.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_496

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10000).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_2627

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10000).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_2627

['errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10000).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_2627

['public String sayHello(String name) {']
['invoked sayhello with ', ['name']]
camel sample_8416

['} else {', 'resultEntries.put(atmosPath, AtmosResultCode.OK);', '}', '} catch (Exception ex) {', 'resultEntries.put(atmosPath, AtmosResultCode.KO);', '} finally {', 'result.setResultEntries(resultEntries);', '}', 'return result;', '} else {']
['uploading a dir ', []]
camel sample_7219

['resultEntries = new HashMap<String, AtmosResultCode>(listFiles.size());', 'for (File file : listFiles) {', 'String absPath = file.getAbsolutePath();', 'int indexRemainingPath = localPath.length();', 'if (!localPath.endsWith("/")) {', 'indexRemainingPath += 1;', '}', 'String remainingPath = absPath.substring(indexRemainingPath);', 'atmosPath = atmosPath + remainingPath;', 'try {']
['uploading to ', ['filelocalpath', 'atmospath']]
camel sample_7219

['private void downloadFilesInFolder(String atmosPath, Map<String, ByteArrayOutputStream> resultEntries) throws AtmosException {', 'ObjectPath atmosEntry = new ObjectPath(atmosPath);', 'if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {', 'throw new AtmosException(atmosPath + " does not exist or cannot obtain metadata");', '}', 'if (!atmosEntry.isDirectory()) {']
['downloading a single file ', []]
camel sample_7219

['downloadSingleFile(atmosPath, resultEntries);', 'return;', '}', 'ListDirectoryRequest listRequest = new ListDirectoryRequest().path(atmosEntry);', 'AtmosAPIFacade.client.listDirectory(listRequest);', 'for (DirectoryEntry entry : AtmosAPIFacade.client.listDirectory(listRequest).getEntries()) {', 'if (!entry.isDirectory()) {', 'try {', 'downloadSingleFile(atmosEntry.getPath().concat(entry.getFilename()), resultEntries);', '} catch (AtmosException e) {']
['cannot download from ', ['entry', 'getfilename']]
camel sample_7219

['ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'byte[] content = null;', 'try {', 'content = AtmosAPIFacade.client.readObject(new ObjectPath(path), byte[].class);', 'baos.write(content);', '} catch (IOException e) {', 'throw new AtmosException(path + " cannot obtain a stream", e);', '}', 'if (content != null) {', 'resultEntries.put(path, baos);']
['downloaded path size ', ['path', 'baos', 'size']]
camel sample_7219

['});', 'main.start();', 'List<CamelContext> contextList = main.getCamelContexts();', 'assertNotNull(contextList);', 'assertEquals("size", 1, contextList.size());', 'CamelContext camelContext = contextList.get(0);', 'MockEndpoint endpoint = camelContext.getEndpoint("mock:results", MockEndpoint.class);', 'endpoint.expectedMinimumMessageCount(2);', 'endpoint.assertIsSatisfied();', 'List<Exchange> list = endpoint.getReceivedExchanges();']
['received ', ['list']]
camel sample_16159

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<WsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ahc-ws.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ahc-ws.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1267

['public void run() {', 'Map<String, Object> headers = new HashMap<String, Object>();', 'String arguments = "foo";', 'headers.put(ScriptBuilder.ARGUMENTS, arguments);', 'sendBody("direct:start", "hello", headers);', '}', '});', '}', 'assertMockEndpointsSatisfied();', 'long delta = System.currentTimeMillis() - start;']
['processing the request tooks ms ', ['delta']]
camel sample_11223

['protected void doStart() throws Exception {', 'super.doStart();', 'if (reporter == null) {', 'reporter = createReporter();', '}']
['expecting messages ', ['this', 'getexpectedcount']]
camel sample_4823

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<EtcdComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.etcd.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.etcd.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_615

['return null;', '}', 'String existingGitUrl = (String) dto.get("gitUrl");', 'if (existingGitUrl == null || !existingGitUrl.equals(gitUrl)) {', 'dto.put("gitUrl", gitUrl);', 'File file = new File(classesDirectory, "camel-connector.json");', 'mapper.writerWithDefaultPrettyPrinter().writeValue(file, dto);', 'File root = classesDirectory.getParentFile().getParentFile();', 'File sourceFile = new File(root, "src/main/resources/camel-connector.json");', 'if (sourceFile.exists()) {']
['updating giturl to in ', ['giturl', 'sourcefile']]
camel sample_65

['period.put("name", "schedulerPeriod");', 'period.put("kind", "parameter");', 'period.put("displayName", "Period");', 'period.put("group", "consumer");', 'period.put("type", "integer");', 'period.put("javaType", "long");', 'period.put("deprecated", "false");', 'period.put("secret", "false");', 'period.put("defaultValue", "1000");', 'period.put("description", "Delay in milli seconds between scheduling (executing)");']
['connector is using scheduler timer ', []]
camel sample_65

['if (is != null) {', 'List<String> schema = FileHelper.loadFile(is);', 'is.close();', 'File out = new File(classesDirectory, "camel-component-schema.json");', 'FileOutputStream fos = new FileOutputStream(out, false);', 'for (String line : schema) {', 'fos.write(line.getBytes());', 'fos.write("\\n".getBytes());', '}', 'fos.close();']
['embedded camel component schema json file for camel component ', ['scheme']]
camel sample_65

['ObjectMapper mapper = new ObjectMapper();', 'Map dto = mapper.readValue(file, Map.class);', 'if (version != null) {', 'String existingVersion = (String) dto.get(qualifier);', 'if (existingVersion == null || !existingVersion.equals(version)) {', 'dto.put(qualifier, version);', 'mapper.writerWithDefaultPrettyPrinter().writeValue(file, dto);', 'File root = classesDirectory.getParentFile().getParentFile();', 'file = new File(root, "src/main/resources/camel-connector.json");', 'if (file.exists()) {']
['updating to in ', ['qualifier', 'version', 'file']]
camel sample_65

['runWithTransaction(runnable, true);', '} catch (Throwable e) {', 'rollback = true;', 'throw e;', '} finally {', 'try {', 'if (rollback) {', 'rollback(false);', '}', '} catch (Exception e) {']
['could not do rollback of outer transaction ', ['e']]
camel sample_9856

['} finally {', 'try {', 'if (rollback) {', 'rollback(false);', '}', '} catch (Exception e) {', '}', 'try {', 'resumeTransaction(suspendedTransaction);', '} catch (Exception e) {']
['could not resume outer transaction ', ['e']]
camel sample_9856

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ses.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ses.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1135

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HttpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.http4.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.http4.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_951

['vertxOptions.setClustered(true);', '}', 'if (port > 0) {', 'vertxOptions.setClusterPort(port);', 'vertxOptions.setClustered(true);', '}', '}', 'createdVertx = true;', 'final CountDownLatch latch = new CountDownLatch(1);', 'if (vertxOptions.isClustered()) {']
['creating clustered vertx ', ['vertxoptions', 'getclusterhost', 'vertxoptions', 'getclusterport']]
camel sample_11521

['vertxOptions.setClusterPort(port);', 'vertxOptions.setClustered(true);', '}', '}', 'createdVertx = true;', 'final CountDownLatch latch = new CountDownLatch(1);', 'if (vertxOptions.isClustered()) {', 'vertxFactory.clusteredVertx(vertxOptions, new Handler<AsyncResult<Vertx>>() {', 'public void handle(AsyncResult<Vertx> event) {', 'if (event.cause() != null) {']
['error creating clustered vertx due ', ['host', 'port', 'event', 'cause', 'getmessage', 'event', 'cause']]
camel sample_11521

['}', '}', 'createdVertx = true;', 'final CountDownLatch latch = new CountDownLatch(1);', 'if (vertxOptions.isClustered()) {', 'vertxFactory.clusteredVertx(vertxOptions, new Handler<AsyncResult<Vertx>>() {', 'public void handle(AsyncResult<Vertx> event) {', 'if (event.cause() != null) {', '} else if (event.succeeded()) {', 'vertx = event.result();']
['eventbus is ready ', ['vertx']]
camel sample_11521

['vertxFactory.clusteredVertx(vertxOptions, new Handler<AsyncResult<Vertx>>() {', 'public void handle(AsyncResult<Vertx> event) {', 'if (event.cause() != null) {', '} else if (event.succeeded()) {', 'vertx = event.result();', '}', 'latch.countDown();', '}', '});', '} else {']
['creating non clustered vertx ', []]
camel sample_11521

['public void handle(AsyncResult<Vertx> event) {', 'if (event.cause() != null) {', '} else if (event.succeeded()) {', 'vertx = event.result();', '}', 'latch.countDown();', '}', '});', '} else {', 'vertx = vertxFactory.vertx();']
['eventbus is ready ', ['vertx']]
camel sample_11521

['vertx = event.result();', '}', 'latch.countDown();', '}', '});', '} else {', 'vertx = vertxFactory.vertx();', 'latch.countDown();', '}', 'if (latch.getCount() > 0) {']
['waiting for eventbus to be ready using sec as timeout ', ['timeout']]
camel sample_11521

['}', '});', '} else {', 'vertx = vertxFactory.vertx();', 'latch.countDown();', '}', 'if (latch.getCount() > 0) {', 'latch.await(timeout, TimeUnit.SECONDS);', '}', '} else {']
['using vert x instance set on the component level ', []]
camel sample_11521

['protected void doStop() throws Exception {', 'super.doStop();', 'if (createdVertx && vertx != null) {']
['stopping vertx ', ['vertx']]
camel sample_11521

['public Exchange add(final CamelContext camelContext, final String correlationId, final Exchange exchange) {', 'return transactionTemplate.execute(new TransactionCallback<Exchange>() {', 'public Exchange doInTransaction(TransactionStatus status) {', 'Exchange result = null;', 'final String key = correlationId;', 'try {']
['adding exchange with key ', ['key']]
camel sample_9010

['public Exchange get(final CamelContext camelContext, final String correlationId) {', 'final String key = correlationId;', 'Exchange result = get(key, getRepositoryName(), camelContext);']
['getting key ', ['key', 'result']]
camel sample_9010

['public void remove(final CamelContext camelContext, final String correlationId, final Exchange exchange) {', 'transactionTemplate.execute(new TransactionCallbackWithoutResult() {', 'protected void doInTransactionWithoutResult(TransactionStatus status) {', 'final String key = correlationId;', 'final String confirmKey = exchange.getExchangeId();', 'try {']
['removing key ', ['key']]
camel sample_9010

['public void confirm(final CamelContext camelContext, final String exchangeId) {', 'transactionTemplate.execute(new TransactionCallbackWithoutResult() {', 'protected void doInTransactionWithoutResult(TransactionStatus status) {']
['confirming exchangeid ', ['exchangeid']]
camel sample_9010

['protected Set<String> getKeys(final String repositoryName) {', 'return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {', 'public LinkedHashSet<String> doInTransaction(TransactionStatus status) {', 'List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName, new RowMapper<String>() {', 'public String mapRow(ResultSet rs, int rowNum) throws SQLException {', 'String id = rs.getString(ID);']
['getkey ', ['id']]
camel sample_9010

['public Exchange recover(CamelContext camelContext, String exchangeId) {', 'final String key = exchangeId;', 'Exchange answer = get(key, getRepositoryNameCompleted(), camelContext);']
['recovering exchangeid ', ['key', 'answer']]
camel sample_9010

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(repositoryName, "RepositoryName");', 'ObjectHelper.notNull(transactionManager, "TransactionManager");', 'ObjectHelper.notNull(dataSource, "DataSource");', 'int current = getKeys().size();', 'int completed = scan(null).size();', 'if (current > 0) {']
['on startup there are aggregate exchanges not completed in repository ', ['current', 'getrepositoryname']]
camel sample_9010

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(repositoryName, "RepositoryName");', 'ObjectHelper.notNull(transactionManager, "TransactionManager");', 'ObjectHelper.notNull(dataSource, "DataSource");', 'int current = getKeys().size();', 'int completed = scan(null).size();', 'if (current > 0) {', '} else {']
['on startup there are no existing aggregate exchanges not completed in repository ', ['getrepositoryname']]
camel sample_9010

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(repositoryName, "RepositoryName");', 'ObjectHelper.notNull(transactionManager, "TransactionManager");', 'ObjectHelper.notNull(dataSource, "DataSource");', 'int current = getKeys().size();', 'int completed = scan(null).size();', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {']
['on startup there are completed exchanges to be recovered in repository ', ['completed', 'getrepositorynamecompleted']]
camel sample_9010

['ObjectHelper.notNull(repositoryName, "RepositoryName");', 'ObjectHelper.notNull(transactionManager, "TransactionManager");', 'ObjectHelper.notNull(dataSource, "DataSource");', 'int current = getKeys().size();', 'int completed = scan(null).size();', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {', '} else {']
['on startup there are no completed exchanges to be recovered in repository ', ['getrepositorynamecompleted']]
camel sample_9010

['public void testGetRecentReports() throws Exception {', 'final List recentReports = template().requestBody("direct:getRecentReports", null, List.class);', 'assertNotNull("getRecentReports", recentReports);', 'assertFalse("getRecentReports empty", recentReports.isEmpty());']
['getrecentreports ', ['recentreports']]
camel sample_14689

['public void testReport(String reportName) throws Exception {']
['testing report ', ['reportname']]
camel sample_14689

['public void testReport(String reportName) throws Exception {', 'final QueryRecordsReport reports = template().requestBody("direct:queryReport", "SELECT Id FROM Report WHERE DeveloperName=\'" + reportName + "\'", QueryRecordsReport.class);', 'assertNotNull("query", reports);', 'final List<Report> reportsRecords = reports.getRecords();', 'assertFalse("Report not found", reportsRecords.isEmpty());', 'final String testReportId = reportsRecords.get(0).getId();', 'assertNotNull(testReportId);', 'final ReportDescription reportDescription = template().requestBody("direct:getReportDescription", testReportId, ReportDescription.class);', 'assertNotNull("getReportDescriptions", reportDescription);']
['getreportdescriptions ', ['reportdescription']]
camel sample_14689

['assertNotNull("query", reports);', 'final List<Report> reportsRecords = reports.getRecords();', 'assertFalse("Report not found", reportsRecords.isEmpty());', 'final String testReportId = reportsRecords.get(0).getId();', 'assertNotNull(testReportId);', 'final ReportDescription reportDescription = template().requestBody("direct:getReportDescription", testReportId, ReportDescription.class);', 'assertNotNull("getReportDescriptions", reportDescription);', 'final ReportMetadata testReportMetadata = reportDescription.getReportMetadata();', 'SyncReportResults reportResults = template().requestBodyAndHeader("direct:executeSyncReport", testReportId, SalesforceEndpointConfig.INCLUDE_DETAILS, Boolean.TRUE, SyncReportResults.class);', 'assertNotNull("executeSyncReport", reportResults);']
['executesyncreport ', ['reportresults']]
camel sample_14689

['headers.put(SalesforceEndpointConfig.INCLUDE_DETAILS, Boolean.FALSE);', 'Object body;', 'if (!bodyMetadata) {', 'headers.put(SalesforceEndpointConfig.REPORT_METADATA, testReportMetadata);', 'body = testReportId;', '} else {', 'body = testReportMetadata;', '}', 'reportResults = template().requestBodyAndHeaders("direct:executeSyncReport", body, headers, SyncReportResults.class);', 'assertNotNull("executeSyncReport with metadata", reportResults);']
['executesyncreport with metadata ', ['reportresults']]
camel sample_14689

['if (!bodyMetadata) {', 'headers.put(SalesforceEndpointConfig.REPORT_METADATA, testReportMetadata);', 'body = testReportId;', '} else {', 'body = testReportMetadata;', '}', 'reportResults = template().requestBodyAndHeaders("direct:executeSyncReport", body, headers, SyncReportResults.class);', 'assertNotNull("executeSyncReport with metadata", reportResults);', 'ReportInstance reportInstance = template().requestBodyAndHeader("direct:executeAsyncReport", testReportId, SalesforceEndpointConfig.INCLUDE_DETAILS, true, ReportInstance.class);', 'assertNotNull("executeAsyncReport", reportInstance);']
['executeasyncreport ', ['reportinstance']]
camel sample_14689

['if (!bodyMetadata) {', 'headers.put(SalesforceEndpointConfig.REPORT_METADATA, testReportMetadata);', 'body = testReportId;', 'bodyMetadata = true;', '} else {', 'body = testReportMetadata;', 'bodyMetadata = false;', '}', 'reportInstance = template().requestBodyAndHeaders("direct:executeAsyncReport", body, headers, ReportInstance.class);', 'assertNotNull("executeAsyncReport with metadata", reportInstance);']
['executeasyncreport with metadata ', ['reportinstance']]
camel sample_14689

['} else {', 'body = testReportMetadata;', 'bodyMetadata = false;', '}', 'reportInstance = template().requestBodyAndHeaders("direct:executeAsyncReport", body, headers, ReportInstance.class);', 'assertNotNull("executeAsyncReport with metadata", reportInstance);', 'final String testReportInstanceId = reportInstance.getId();', 'final List reportInstances = template().requestBody("direct:getReportInstances", testReportId, List.class);', 'assertNotNull("getReportInstances", reportInstances);', 'assertFalse("getReportInstances empty", reportInstances.isEmpty());']
['getreportinstances ', ['reportinstances']]
camel sample_14689

['if (!done) {', 'Thread.sleep(RETRY_DELAY);', 'if (++tries > REPORT_RESULT_RETRIES) {', 'final long retrySeconds = TimeUnit.SECONDS.convert(tries * RETRY_DELAY, TimeUnit.MILLISECONDS);', 'fail("Async report result not available in " + retrySeconds + " seconds");', '}', '}', '}', 'assertNotNull("getReportResults", asyncReportResults);', 'assertEquals("getReportResults status", ReportStatusEnum.Success, asyncReportResults.getAttributes().getStatus());']
['getreportresults ', ['asyncreportresults']]
camel sample_14689

['if (++tries > REPORT_RESULT_RETRIES) {', 'final long retrySeconds = TimeUnit.SECONDS.convert(tries * RETRY_DELAY, TimeUnit.MILLISECONDS);', 'fail("Async report result not available in " + retrySeconds + " seconds");', '}', '}', '}', 'assertNotNull("getReportResults", asyncReportResults);', 'assertEquals("getReportResults status", ReportStatusEnum.Success, asyncReportResults.getAttributes().getStatus());', 'String convertResults = template.requestBody("direct:convertResults", asyncReportResults, String.class);', 'assertNotNull("default convertResults", convertResults);']
['default options ', ['convertresults']]
camel sample_14689

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesPersistentVolumesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-persistent-volumes.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-persistent-volumes.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_547

['protected void doStart() throws Exception {', 'super.doStart();', 'this.value = getAtomixEndpoint() .getAtomix() .getValue( resourceName, new DistributedValue.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedValue.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))) .join();']
['subscribe to events for queue ', ['resourcename']]
camel sample_10330

['final String[] argTypes = typeArgs.split(",");', 'boolean ignore = false;', 'final int nTypes = argTypes.length;', 'int i = 0;', 'for (String argType : argTypes) {', 'try {', 'parameterizedType.append(getCanonicalName(getProjectClassLoader().loadClass(argType)));', '} catch (ClassNotFoundException e) {', 'try {', 'if (log.isDebugEnabled()) {']
['could not load trying to load java lang ', ['argtype', 'argtype']]
camel sample_117

['int i = 0;', 'for (String argType : argTypes) {', 'try {', 'parameterizedType.append(getCanonicalName(getProjectClassLoader().loadClass(argType)));', '} catch (ClassNotFoundException e) {', 'try {', 'if (log.isDebugEnabled()) {', '}', 'parameterizedType.append( getCanonicalName(getProjectClassLoader().loadClass("java.lang." + argType)));', '} catch (ClassNotFoundException e1) {']
['ignoring type parameters for argument unable to load parametric type argument ', ['typeargs', 'argument', 'getname', 'argtype']]
camel sample_117

['protected FtpServerFactory createFtpServerFactory() throws Exception {', 'try {', 'return doCreateFtpServerFactory();', '} catch (Exception e) {', 'NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e);', 'if (nsae != null) {', 'String name = System.getProperty("os.name");', 'String message = nsae.getMessage();']
['is not avail on this platform testing is skipped real cause ', ['name', 'message']]
camel sample_15098

['protected void doGetServiceAccount(Exchange exchange, String operation) throws Exception {', 'ServiceAccount sa = null;', 'String saName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(saName)) {']
['get a specific service account require specify a service account name ', []]
camel sample_13265

['protected void doGetServiceAccount(Exchange exchange, String operation) throws Exception {', 'ServiceAccount sa = null;', 'String saName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(saName)) {', 'throw new IllegalArgumentException( "Get a specific Service Account require specify a Service Account name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific service account require specify a namespace name ', []]
camel sample_13265

['protected void doCreateServiceAccount(Exchange exchange, String operation) throws Exception {', 'ServiceAccount sa = null;', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ServiceAccount saToCreate = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT, ServiceAccount.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific service account require specify a namespace name ', []]
camel sample_13265

['protected void doCreateServiceAccount(Exchange exchange, String operation) throws Exception {', 'ServiceAccount sa = null;', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ServiceAccount saToCreate = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT, ServiceAccount.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific Service Account require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(saToCreate)) {']
['create a specific service account require specify a service account bean ', []]
camel sample_13265

['protected void doDeleteServiceAccount(Exchange exchange, String operation) throws Exception {', 'String saName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(saName)) {']
['delete a specific service account require specify a service account name ', []]
camel sample_13265

['protected void doDeleteServiceAccount(Exchange exchange, String operation) throws Exception {', 'String saName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(saName)) {', 'throw new IllegalArgumentException( "Delete a specific Service Account require specify a Service Account name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific service account require specify a namespace name ', []]
camel sample_13265

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes services consumer ', []]
camel sample_13320

['Integer keyId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'String fingerprint = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_FINGERPRINT, String.class);', 'Key key;', 'if (ObjectHelper.isNotEmpty(keyId)) {', 'key = getEndpoint().getDigitalOceanClient().getKeyInfo(keyId);', '} else if (ObjectHelper.isNotEmpty(fingerprint)) {', 'key = getEndpoint().getDigitalOceanClient().getKeyInfo(fingerprint);', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified");', '}']
['key ', ['key']]
camel sample_8894

['private void getKeys(Exchange exchange) throws Exception {', 'Keys keys = getEndpoint().getDigitalOceanClient().getAvailableKeys(configuration.getPage());']
['all keys page ', ['configuration', 'getpage', 'keys', 'getkeys']]
camel sample_8894

['Integer keyId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'String fingerprint = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_FINGERPRINT, String.class);', 'Delete delete;', 'if (ObjectHelper.isNotEmpty(keyId)) {', 'delete = getEndpoint().getDigitalOceanClient().deleteKey(keyId);', '} else if (ObjectHelper.isNotEmpty(fingerprint)) {', 'delete = getEndpoint().getDigitalOceanClient().deleteKey(fingerprint);', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified");', '}']
['delete key ', ['delete']]
camel sample_8894

['} else {', 'key.setName(name);', '}', 'String publicKey = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_PUBLIC_KEY, String.class);', 'if (ObjectHelper.isEmpty(publicKey)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.KEY_PUBLIC_KEY + " must be specified");', '} else {', 'key.setPublicKey(publicKey);', '}', 'key = getEndpoint().getDigitalOceanClient().createKey(key);']
['key created ', ['key']]
camel sample_8894

['if (ObjectHelper.isEmpty(name)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'if (ObjectHelper.isNotEmpty(keyId)) {', 'key = getEndpoint().getDigitalOceanClient().updateKey(keyId, name);', '} else if (ObjectHelper.isNotEmpty(fingerprint)) {', 'key = getEndpoint().getDigitalOceanClient().updateKey(fingerprint, name);', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified");', '}']
['update key ', ['key']]
camel sample_8894

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<FileLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.file.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.file.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_906

['public PullRequestStateProducer(GitHubEndpoint endpoint) throws Exception {', 'super(endpoint);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_COMMIT_SERVICE);', 'if (service != null) {']
['using commitservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14261

['public void testRead() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'final Edm metadata = (Edm)requestBodyAndHeaders("direct: assertNotNull(metadata);', 'assertEquals(1, metadata.getSchemas().size());', 'final ClientServiceDocument document = (ClientServiceDocument)requestBodyAndHeaders("direct: assertNotNull(document);', 'assertTrue(document.getEntitySets().size() > 1);']
['service document has entity sets ', ['document', 'getentitysets', 'size']]
camel sample_15470

['public void testCreateUpdateDelete() throws Exception {', 'final ClientEntity clientEntity = createEntity();', 'ClientEntity entity = requestBody("direct: assertNotNull(entity);', 'assertEquals("Lewis", entity.getProperty("FirstName").getValue().toString());', 'assertEquals("", entity.getProperty("MiddleName").getValue().toString());', 'clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Lewis")));', 'HttpStatusCode status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['update entity status ', ['status']]
camel sample_15470

['public void testCreateUpdateDelete() throws Exception {', 'final ClientEntity clientEntity = createEntity();', 'ClientEntity entity = requestBody("direct: assertNotNull(entity);', 'assertEquals("Lewis", entity.getProperty("FirstName").getValue().toString());', 'assertEquals("", entity.getProperty("MiddleName").getValue().toString());', 'clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Lewis")));', 'HttpStatusCode status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());', 'status = requestBody("direct: assertNotNull("Delete status", status);', 'assertEquals("Delete status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['delete status ', ['status']]
camel sample_15470

['public void testCreateUpdateDeleteFromJson() throws Exception {', 'ClientEntity entity = requestBody("direct: assertNotNull(entity);', 'assertEquals("Lewis", entity.getProperty("FirstName").getValue().toString());', 'assertEquals("Black", entity.getProperty("LastName").getValue().toString());', 'assertEquals("lewisblack", entity.getProperty("UserName").getValue().toString());', 'assertEquals("", entity.getProperty("MiddleName").getValue().toString());', 'HttpStatusCode status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['update entity status ', ['status']]
camel sample_15470

['public void testCreateUpdateDeleteFromJson() throws Exception {', 'ClientEntity entity = requestBody("direct: assertNotNull(entity);', 'assertEquals("Lewis", entity.getProperty("FirstName").getValue().toString());', 'assertEquals("Black", entity.getProperty("LastName").getValue().toString());', 'assertEquals("lewisblack", entity.getProperty("UserName").getValue().toString());', 'assertEquals("", entity.getProperty("MiddleName").getValue().toString());', 'HttpStatusCode status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());', 'status = requestBody("direct: assertNotNull("Delete status", status);', 'assertEquals("Delete status", HttpStatusCode.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['delete status ', ['status']]
camel sample_15470

['ClientEntity clientEntity = createEntity();', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).contentId(TEST_CREATE_RESOURCE_CONTENT_ID).operation(Operation.CREATE) .body(clientEntity).build());', 'clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Lewis")));', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).contentId(TEST_UPDATE_RESOURCE_CONTENT_ID) .operation(Operation.UPDATE).body(clientEntity).build());', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).operation(Operation.DELETE).build());', 'batchParts.add(Olingo4BatchQueryRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).build());', 'final List<Olingo4BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'final Edm edm = (Edm)responseParts.get(0).getBody();', 'assertNotNull(edm);']
['edm entity sets ', ['edm', 'getentitycontainer', 'getentitysets']]
camel sample_15470

['clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Lewis")));', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).contentId(TEST_UPDATE_RESOURCE_CONTENT_ID) .operation(Operation.UPDATE).body(clientEntity).build());', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).operation(Operation.DELETE).build());', 'batchParts.add(Olingo4BatchQueryRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).build());', 'final List<Olingo4BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'final Edm edm = (Edm)responseParts.get(0).getBody();', 'assertNotNull(edm);', 'ClientEntitySet entitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(entitySet);']
['read entities ', ['entityset', 'getentities']]
camel sample_15470

['batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).operation(Operation.DELETE).build());', 'batchParts.add(Olingo4BatchQueryRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).build());', 'final List<Olingo4BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'final Edm edm = (Edm)responseParts.get(0).getBody();', 'assertNotNull(edm);', 'ClientEntitySet entitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(entitySet);', 'clientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(clientEntity);']
['read entiry properties ', ['cliententity', 'getproperties']]
camel sample_15470

['ClientEntitySet entitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(entitySet);', 'clientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(clientEntity);', 'ClientEntitySet entitySetWithTop = (ClientEntitySet)responseParts.get(3).getBody();', 'assertNotNull(entitySetWithTop);', 'assertEquals(5, entitySetWithTop.getEntities().size());', 'LOG.info("Read entities with $top=5: {}", entitySet.getEntities());', 'clientEntity = (ClientEntity)responseParts.get(4).getBody();', 'assertNotNull(clientEntity);']
['created entity ', ['cliententity', 'getproperties']]
camel sample_15470

['clientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(clientEntity);', 'ClientEntitySet entitySetWithTop = (ClientEntitySet)responseParts.get(3).getBody();', 'assertNotNull(entitySetWithTop);', 'assertEquals(5, entitySetWithTop.getEntities().size());', 'LOG.info("Read entities with $top=5: {}", entitySet.getEntities());', 'clientEntity = (ClientEntity)responseParts.get(4).getBody();', 'assertNotNull(clientEntity);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCode.NO_CONTENT.getStatusCode(), statusCode);']
['update mdiddlename status ', ['statuscode']]
camel sample_15470

['ClientEntitySet entitySetWithTop = (ClientEntitySet)responseParts.get(3).getBody();', 'assertNotNull(entitySetWithTop);', 'assertEquals(5, entitySetWithTop.getEntities().size());', 'LOG.info("Read entities with $top=5: {}", entitySet.getEntities());', 'clientEntity = (ClientEntity)responseParts.get(4).getBody();', 'assertNotNull(clientEntity);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCode.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(6).getStatusCode();', 'assertEquals(HttpStatusCode.NO_CONTENT.getStatusCode(), statusCode);']
['delete entity status ', ['statuscode']]
camel sample_15470

['LOG.info("Read entities with $top=5: {}", entitySet.getEntities());', 'clientEntity = (ClientEntity)responseParts.get(4).getBody();', 'assertNotNull(clientEntity);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCode.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(6).getStatusCode();', 'assertEquals(HttpStatusCode.NO_CONTENT.getStatusCode(), statusCode);', 'assertEquals(HttpStatusCode.NOT_FOUND.getStatusCode(), responseParts.get(7).getStatusCode());', 'final ODataError error = (ODataError)responseParts.get(7).getBody();', 'assertNotNull(error);']
['read deleted entity error ', ['getmessage']]
camel sample_15470

['private void verifyTheRecivedEmail(String expectString) throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.assertIsSatisfied();', 'Exchange out = mock.assertExchangeReceived(0);', 'ByteArrayOutputStream baos = new ByteArrayOutputStream(((MailMessage)out.getIn()).getMessage().getSize());', '((MailMessage)out.getIn()).getMessage().writeTo(baos);', 'String dumpedMessage = baos.toString();', 'assertTrue("There should have the " + expectString, dumpedMessage.indexOf(expectString) > 0);']
['multipart alternative ', ['dumpedmessage']]
camel sample_11825

['xmlReader = sfactory.newSAXParser().getXMLReader();', '}', '}', 'if (xmlReader == null) {', 'if (xmlReaderPool == null) {', 'xmlReaderPool = new XMLReaderPool(createSAXParserFactory());', '}', 'xmlReader = xmlReaderPool.createXMLReader();', '}', '} catch (Exception ex) {']
['cannot create the saxparser xmlreader due to ', ['ex']]
camel sample_4225

['List<String> features = new ArrayList<String>();', 'for (Map.Entry<Object, Object> prop : properties.entrySet()) {', 'String key = (String) prop.getKey();', 'if (key.startsWith(XmlConverter.DOCUMENT_BUILDER_FACTORY_FEATURE)) {', 'String uri = ObjectHelper.after(key, ":");', 'Boolean value = Boolean.valueOf((String)prop.getValue());', 'try {', 'factory.setFeature(uri, value);', 'features.add("feature " + uri + " value " + value);', '} catch (ParserConfigurationException e) {']
['documentbuilderfactory doesn t support the feature with value due to ', ['new', 'object', 'uri', 'value', 'e']]
camel sample_4225

['}', '}', 'if (features.size() > 0) {', 'StringBuilder featureString = new StringBuilder();', 'for (String feature : features) {', 'if (featureString.length() != 0) {', 'featureString.append(", ");', '}', 'featureString.append(feature);', '}']
['documentbuilderfactory has been set with features ', ['featurestring', 'tostring']]
camel sample_4225

['} else {', 'reply = outputChannel;', 'if (reply == null) {', 'throw new IllegalArgumentException("OutputChannel has not been configured on " + getEndpoint());', '}', '}', 'if (reply == null) {', 'throw new IllegalArgumentException("Cannot resolve ReplyChannel from message: " + siInMessage);', '}', 'org.springframework.messaging.Message<?> siOutMessage = SpringIntegrationBinding.storeToSpringIntegrationMessage(exchange.getOut());']
['sending to replychannel ', ['sioutmessage', 'reply']]
camel sample_11126

['if (userMap != null) {', 'tokenPolicies.add(OpcUaServerConfig.USER_TOKEN_POLICY_USERNAME);', '}', 'this.serverConfig.setUserTokenPolicies(tokenPolicies);', '}', 'if (this.bindAddresses != null) {', 'this.serverConfig.setBindAddresses(new ArrayList<>(this.bindAddresses));', '}', 'if (this.certificateValidator != null) {', 'final CertificateValidator validator = this.certificateValidator.get();']
['using validator ', ['validator']]
camel sample_17271

['this.serverConfig.setUserTokenPolicies(tokenPolicies);', '}', 'if (this.bindAddresses != null) {', 'this.serverConfig.setBindAddresses(new ArrayList<>(this.bindAddresses));', '}', 'if (this.certificateValidator != null) {', 'final CertificateValidator validator = this.certificateValidator.get();', 'if (validator instanceof Closeable) {', 'runOnStop(() -> {', 'try {']
['closing ', ['validator']]
camel sample_17271

['if (this.bindAddresses != null) {', 'this.serverConfig.setBindAddresses(new ArrayList<>(this.bindAddresses));', '}', 'if (this.certificateValidator != null) {', 'final CertificateValidator validator = this.certificateValidator.get();', 'if (validator instanceof Closeable) {', 'runOnStop(() -> {', 'try {', '((Closeable)validator).close();', '} catch (final IOException e) {']
['failed to close ', ['e']]
camel sample_17271

['protected void doStop() throws Exception {', 'this.server.shutdown();', 'super.doStop();', 'this.runOnStop.forEach(runnable -> {', 'try {', 'runnable.run();', '} catch (final Exception e) {']
['failed to run on stop ', ['e']]
camel sample_17271

['public static void assertInMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getIn().getMandatoryBody();', 'assertEquals("in body of: " + exchange, expected, actual);', '} else {', 'actual = exchange.getIn().getMandatoryBody(expected.getClass());', '}', 'assertEquals("in body of: " + exchange, expected, actual);']
['received response with in ', ['exchange', 'exchange', 'getin']]
camel sample_6832

['public static void assertOutMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getOut().getMandatoryBody();', 'assertEquals("output body of: " + exchange, expected, actual);', '} else {', 'actual = exchange.getOut().getMandatoryBody(expected.getClass());', '}', 'assertEquals("output body of: " + exchange, expected, actual);']
['received response with out ', ['exchange', 'exchange', 'getout']]
camel sample_6832

['public static Object assertExpression(Expression expression, Exchange exchange, Object expected) {', 'Object value;', 'if (expected != null) {', 'value = expression.evaluate(exchange, expected.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_6832

['public static void assertPredicateDoesNotMatch(Predicate predicate, Exchange exchange) {', 'try {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate should match: ", exchange);', '} catch (AssertionError e) {']
['caught expected assertion error ', ['e']]
camel sample_6832

['public static boolean assertPredicate(final Predicate predicate, Exchange exchange, boolean expected) {', 'if (expected) {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate failed: ", exchange);', '}', 'boolean value = predicate.matches(exchange);']
['evaluated predicate on exchange result ', ['predicate', 'exchange', 'value']]
camel sample_6832

['return;', '}', 'if (file.isDirectory()) {', 'File[] files = file.listFiles();', 'for (File child : files) {', 'recursivelyDeleteDirectory(child);', '}', '}', 'boolean success = file.delete();', 'if (!success) {']
['deletion of file failed ', ['file', 'getabsolutepath']]
camel sample_6832

['public Object extractBodyFromJms(Exchange exchange, Message message) {', 'try {', 'if (LOG.isTraceEnabled()) {']
['extracting body using a custom messageconverter from jms message ', ['endpoint', 'getmessageconverter', 'message']]
camel sample_12423

['public Object extractBodyFromJms(Exchange exchange, Message message) {', 'try {', 'if (LOG.isTraceEnabled()) {', '}', 'return endpoint.getMessageConverter().fromMessage(message);', '}', 'if (!mapJmsMessage) {']
['option map jms message is false so using jms message as body ', ['message']]
camel sample_12423

['public Object extractBodyFromJms(Exchange exchange, Message message) {', 'try {', 'if (LOG.isTraceEnabled()) {', '}', 'return endpoint.getMessageConverter().fromMessage(message);', '}', 'if (!mapJmsMessage) {', 'return message;', '}', 'if (message instanceof ObjectMessage) {']
['extracting body as a objectmessage from jms message ', ['message']]
camel sample_12423

['ObjectMessage objectMessage = (ObjectMessage)message;', 'Object payload = objectMessage.getObject();', 'if (payload instanceof DefaultExchangeHolder) {', 'DefaultExchangeHolder holder = (DefaultExchangeHolder) payload;', 'DefaultExchangeHolder.unmarshal(exchange, holder);', 'return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {']
['extracting body as a textmessage from jms message ', ['message']]
camel sample_12423

['DefaultExchangeHolder holder = (DefaultExchangeHolder) payload;', 'DefaultExchangeHolder.unmarshal(exchange, holder);', 'return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {']
['extracting body as a mapmessage from jms message ', ['message']]
camel sample_12423

['return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {', 'return createMapFromMapMessage((MapMessage)message);', '} else if (message instanceof BytesMessage) {']
['extracting body as a bytesmessage from jms message ', ['message']]
camel sample_12423

['return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {', 'return createMapFromMapMessage((MapMessage)message);', '} else if (message instanceof BytesMessage) {', 'return createByteArrayFromBytesMessage((BytesMessage)message);', '} else if (message instanceof StreamMessage) {']
['extracting body as a streammessage from jms message ', ['message']]
camel sample_12423

['protected byte[] createByteArrayFromBytesMessage(BytesMessage message) throws JMSException {', 'if (message.getBodyLength() > Integer.MAX_VALUE) {']
['length of bytesmessage is too long ', ['message', 'getbodylength']]
camel sample_12423

['answer = answer instanceof ObjectMessage ? answer : null;', '} else if (type == JmsMessageType.Stream) {', 'answer = answer instanceof StreamMessage ? answer : null;', '}', '}', '}', '}', '}', 'if (answer == null) {', 'if (cause != null) {']
['will create jmsmessage with caused exception ', ['cause']]
camel sample_12423

['JmsMessageHelper.setJMSReplyTo(jmsMessage, replyTo);', '} else if (headerName.equals("JMSType")) {', 'jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue));', '} else if (headerName.equals("JMSPriority")) {', 'jmsMessage.setJMSPriority(ExchangeHelper.convertToType(exchange, Integer.class, headerValue));', '} else if (headerName.equals("JMSDeliveryMode")) {', 'JmsMessageHelper.setJMSDeliveryMode(exchange, jmsMessage, headerValue);', '} else if (headerName.equals("JMSExpiration")) {', 'jmsMessage.setJMSExpiration(ExchangeHelper.convertToType(exchange, Long.class, headerValue));', '} else {']
['ignoring jms header with value ', ['headername', 'headervalue']]
camel sample_12423

['} else if (headerName.equals("JMSExpiration")) {', 'jmsMessage.setJMSExpiration(ExchangeHelper.convertToType(exchange, Long.class, headerValue));', '} else {', '}', '} else if (shouldOutputHeader(headerName, headerValue, exchange)) {', 'Object value = getValidJMSHeaderValue(headerName, headerValue);', 'if (value != null) {', 'String key = jmsJmsKeyFormatStrategy.encodeKey(headerName);', 'JmsMessageHelper.setProperty(jmsMessage, key, value);', '} else if (LOG.isDebugEnabled()) {']
['ignoring non primitive header of class with value ', ['new', 'object', 'headername', 'headervalue', 'getclass', 'getname', 'headervalue']]
camel sample_12423

['protected Message createJmsMessage(Exception cause, Session session) throws JMSException {']
['using jmsmessagetype ', ['jmsmessagetype', 'object']]
camel sample_12423

['JmsMessageType type = null;', 'if (endpoint != null && endpoint.isTransferExchange()) {', 'LOG.trace("Option transferExchange=true so we use JmsMessageType: Object");', 'Serializable holder = DefaultExchangeHolder.marshal(exchange);', 'Message answer = session.createObjectMessage(holder);', 'answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);', 'return answer;', '}', 'if (endpoint != null && endpoint.getMessageConverter() != null) {', 'if (LOG.isTraceEnabled()) {']
['creating jmsmessage using a custom messageconverter with body ', ['endpoint', 'getmessageconverter', 'body']]
camel sample_12423

['if (headers.containsKey(JmsConstants.JMS_MESSAGE_TYPE)) {', 'type = context.getTypeConverter().convertTo(JmsMessageType.class, headers.get(JmsConstants.JMS_MESSAGE_TYPE));', '} else if (endpoint != null && endpoint.getConfiguration().getJmsMessageType() != null) {', 'type = endpoint.getConfiguration().getJmsMessageType();', '} else {', 'type = getJMSMessageTypeForBody(exchange, body, headers, session, context);', 'if (type != null) {', 'if (body == null && !allowNullBody) {', 'throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}']
['using jmsmessagetype ', ['type']]
camel sample_12423

['throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}', 'Message answer = createJmsMessageForType(exchange, body, headers, session, context, type);', 'answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);', 'return answer;', '}', 'if (body == null && !allowNullBody) {', 'throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}', 'if (body != null && LOG.isWarnEnabled()) {']
['cannot determine specific jmsmessage type to use from body class will use generic jmsmessage body class if you want to send a pojo then your class might need to implement java io serializable or you can force a specific type by setting the jmsmessagetype option on the jms endpoint ', ['objecthelper', 'classcanonicalname', 'body']]
camel sample_12423

['public Object postProcessBeforeInitialization(Object bean, String beanName) throws Exception {']
['camel bean processing before initialization for bean ', ['beanname']]
camel sample_4049

['public Object postProcessBeforeInitialization(Object bean, String beanName) throws Exception {', 'if (!canPostProcessBean(bean, beanName)) {', 'return bean;', '}', 'injectFields(bean, beanName);', 'injectMethods(bean, beanName);', 'if (bean instanceof CamelContextAware && canSetCamelContext(bean, beanName)) {', 'CamelContextAware contextAware = (CamelContextAware)bean;', 'CamelContext context = getOrLookupCamelContext();', 'if (context == null) {']
['no camelcontext defined yet so cannot inject into bean ', ['beanname']]
camel sample_4049

['public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception {']
['camel bean processing after initialization for bean ', ['beanname']]
camel sample_4049

['protected boolean canSetCamelContext(Object bean, String beanName) {', 'if (bean instanceof CamelContextAware) {', 'CamelContextAware camelContextAware = (CamelContextAware) bean;', 'CamelContext context = camelContextAware.getCamelContext();', 'if (context != null) {']
['camelcontext already set on bean with id will keep existing camelcontext on bean ', ['beanname']]
camel sample_4049

['public void setterInjection(Method method, Object bean, String beanName, String endpointUri, String endpointRef, String endpointProperty) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_4049

['public void setterPropertyInjection(Method method, String propertyValue, String propertyDefaultValue, Object bean, String beanName) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_4049

['public void setterBeanInjection(Method method, String name, Object bean, String beanName) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_4049

['if (config.getApiContextPath() != null) {', 'boolean hasRestApi = false;', 'for (RouteDefinition route : camelContext.getRouteDefinitions()) {', 'FromDefinition from = route.getInputs().get(0);', 'if (from.getUri() != null && from.getUri().startsWith("rest-api:")) {', 'hasRestApi = true;', '}', '}', 'if (!hasRestApi) {', 'RouteDefinition route = RestDefinition.asRouteApiDefinition(camelContext, config);']
['adding routeid as rest api route ', ['route', 'getid']]
camel sample_5658

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IrcComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.irc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.irc.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_443

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {']
['callback ', ['callback']]
camel sample_8355

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {', 'if (callback instanceof PasswordCallback) {', 'PasswordCallback pc = (PasswordCallback) callback;']
['setting password on callback ', ['pc']]
camel sample_8355

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {', 'if (callback instanceof PasswordCallback) {', 'PasswordCallback pc = (PasswordCallback) callback;', 'pc.setPassword(principal.getPassword().toCharArray());', '} else if (callback instanceof NameCallback) {', 'NameCallback nc = (NameCallback) callback;']
['setting username on callback ', ['nc']]
camel sample_8355

['DefaultCamelContext context = new DefaultCamelContext();', 'final CountDownLatch logoutLatch = new CountDownLatch(1);', 'RouteBuilder routes = new RouteBuilder() {', 'public void configure() throws Exception {', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"). filter(PredicateBuilder.and( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageSent), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))). bean(new CredentialInjector("PASSWORD"));', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogoff)). bean(new CountDownLatchDecrementer("logout", logoutLatch));', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER"). filter(PredicateBuilder.and( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))). bean(new LogonAuthenticator());', '}', '};', 'context.addRoutes(routes);']
['starting camel context ', []]
camel sample_10664

['from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogoff)). bean(new CountDownLatchDecrementer("logout", logoutLatch));', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER"). filter(PredicateBuilder.and( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))). bean(new LogonAuthenticator());', '}', '};', 'context.addRoutes(routes);', 'context.start();', 'if (!logoutLatch.await(5L, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Logout was not received");', '}', 'context.stop();']
['example complete ', []]
camel sample_10664

['public void inject(Exchange exchange) throws CamelExchangeException {']
['injecting password into outgoing logon message ', []]
camel sample_10664

['public OperationResult<Boolean> getResult() {', 'try {', 'connection.delete(node, version);', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {']
['set data of node s ', ['format', 'node']]
camel sample_12659

['public OperationResult<Boolean> getResult() {', 'try {', 'connection.delete(node, version);', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {', '} else {']
['set data of node s ', ['format', 'node']]
camel sample_12659

['public void process(Exchange exchange) throws Exception {', 'Exchange result;', 'if ((((RouteboxDirectEndpoint)getRouteboxEndpoint()).getConsumer() == null) && (getRouteboxEndpoint().getConfig().isSendToConsumer())) {', 'throw new CamelExchangeException("No consumers available on endpoint: " + getRouteboxEndpoint(), exchange);', '} else {']
['dispatching to inner route ', ['exchange']]
camel sample_14627

['public boolean process(Exchange exchange, final AsyncCallback callback) {', 'boolean flag = true;', 'if ((((RouteboxDirectEndpoint)getRouteboxEndpoint()).getConsumer() == null) && ((getRouteboxEndpoint()).getConfig().isSendToConsumer())) {', 'exchange.setException(new CamelExchangeException("No consumers available on endpoint: " + getRouteboxEndpoint(), exchange));', 'callback.done(true);', 'flag = true;', '} else {', 'try {']
['dispatching to inner route ', ['exchange']]
camel sample_14627

['private void safeCloseResultSet() {', 'try {', 'resultSet.close();', '} catch (SQLException e) {']
['error by closing result set ', ['e', 'e']]
camel sample_9051

['private void safeCloseStatement() {', 'try {', 'statement.close();', '} catch (SQLException e) {']
['error by closing statement ', ['e', 'e']]
camel sample_9051

['private void safeCloseConnection() {', 'try {', 'connection.close();', '} catch (SQLException e) {']
['error by closing connection ', ['e', 'e']]
camel sample_9051

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BeanComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bean.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bean.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_855

['private void commitOutputMessage() throws IOException {', 'ExchangePattern pattern;', 'if (isOneWay) {', 'pattern = ExchangePattern.InOnly;', '} else {', 'pattern = ExchangePattern.InOut;', '}']
['send the message to endpoint ', ['this', 'targetcamelendpointuri']]
camel sample_6577

['if (isOneWay) {', 'pattern = ExchangePattern.InOnly;', '} else {', 'pattern = ExchangePattern.InOut;', '}', 'final org.apache.camel.Exchange exchange = this.producer.createExchange(pattern);', 'exchange.setProperty(Exchange.TO_ENDPOINT, this.targetCamelEndpointUri);', 'CachedOutputStream outputStream = (CachedOutputStream) outMessage.getContent(OutputStream.class);', 'CxfHeaderHelper.propagateCxfToCamel(this.headerFilterStrategy, outMessage, exchange.getIn(), exchange);', 'exchange.getIn().setBody(outputStream.getInputStream());']
['template sending request ', ['exchange', 'getin']]
camel sample_6577

['} else {', 'WorkQueueManager mgr = outMessage.getExchange().get(Bus.class) .getExtension(WorkQueueManager.class);', 'AutomaticWorkQueue qu = mgr.getNamedWorkQueue("camel-cxf-conduit");', 'if (qu == null) {', 'qu = mgr.getAutomaticWorkQueue();', '}', 'qu.execute(runnable);', '}', '} catch (RejectedExecutionException rex) {', 'if (!hasLoggedAsyncWarning) {']
['executor rejected background task to retrieve the response suggest increasing the workqueue settings ', []]
camel sample_6577

['AutomaticWorkQueue qu = mgr.getNamedWorkQueue("camel-cxf-conduit");', 'if (qu == null) {', 'qu = mgr.getAutomaticWorkQueue();', '}', 'qu.execute(runnable);', '}', '} catch (RejectedExecutionException rex) {', 'if (!hasLoggedAsyncWarning) {', 'hasLoggedAsyncWarning = true;', '}']
['executor rejected background task to retrieve the response running on current thread ', []]
camel sample_6577

['public void process(Exchange exchange) throws Exception {', 'String command = ExchangeHelper.getMandatoryHeader(exchange, NetWeaverConstants.COMMAND, String.class);', 'Exchange httpExchange = getEndpoint().createExchange();', 'httpExchange.getIn().setHeader(Exchange.HTTP_PATH, command);', 'if (getEndpoint().isJson()) {', 'httpExchange.getIn().setHeader("Accept", "application/json");', '}']
['calling sap net weaver with command ', ['http', 'command']]
camel sample_16860

['protected void doStart() throws Exception {', 'String url = getEndpoint().getUrl() + "?authUsername=" + getEndpoint().getUsername() + "&authPassword=" + getEndpoint().getPassword() + "&authMethod=Basic";', 'if (log.isInfoEnabled()) {']
['creating netweaverproducer using url ', ['urisupport', 'sanitizeuri', 'url']]
camel sample_16860

['public static void main(String[] args) throws Exception {']
['about to run splunk camel integration ', []]
camel sample_17772

['account.setFirstName("James");', 'account.setLastName("Strachan");', 'account.setEmailAddress("TryGuessing@gmail.com");', 'template.sendBody("direct:start", account);', 'assertMockEndpointsSatisfied();', 'List<?> body = template.requestBody("ibatis:selectAllAccounts?statementType=QueryForList", null, List.class);', 'assertEquals("Wrong size: " + body, 1, body.size());', 'Account actual = assertIsInstanceOf(Account.class, body.get(0));', 'assertEquals("Account.getFirstName()", "James", actual.getFirstName());', 'assertEquals("Account.getLastName()", "Strachan", actual.getLastName());']
['found ', ['actual']]
camel sample_17288

['public void start(BundleContext bundleContext) throws Exception {', 'try {', 'this.bundleContext = bundleContext;']
['initializing bundle ', ['bundlecontext', 'getbundle', 'getbundleid']]
camel sample_12989

['Configuration camelKuraConfig = configurationAdmin.getConfiguration(camelXmlRoutesPid());', 'if (camelKuraConfig != null && camelKuraConfig.getProperties() != null) {', 'Object routePropertyValue = camelKuraConfig.getProperties().get(camelXmlRoutesProperty());', 'if (routePropertyValue != null) {', 'InputStream routesXml = new ByteArrayInputStream(routePropertyValue.toString().getBytes());', 'RoutesDefinition loadedRoutes = camelContext.loadRoutesDefinition(routesXml);', 'camelContext.addRouteDefinitions(loadedRoutes.getRoutes());', '}', '}', 'beforeStart(camelContext);']
['about to start camel kura router ', ['getclass', 'getname']]
camel sample_12989

['if (routePropertyValue != null) {', 'InputStream routesXml = new ByteArrayInputStream(routePropertyValue.toString().getBytes());', 'RoutesDefinition loadedRoutes = camelContext.loadRoutesDefinition(routesXml);', 'camelContext.addRouteDefinitions(loadedRoutes.getRoutes());', '}', '}', 'beforeStart(camelContext);', 'camelContext.start();', 'producerTemplate = camelContext.createProducerTemplate();', 'consumerTemplate = camelContext.createConsumerTemplate();']
['bundle started ', ['bundlecontext', 'getbundle', 'getbundleid']]
camel sample_12989

['public void stop(BundleContext bundleContext) throws Exception {']
['stopping bundle ', ['bundlecontext', 'getbundle', 'getbundleid']]
camel sample_12989

['public void stop(BundleContext bundleContext) throws Exception {', 'camelContext.stop();']
['bundle stopped ', ['bundlecontext', 'getbundle', 'getbundleid']]
camel sample_12989

['public void configure() throws Exception {']
['no programmatic routes configuration found ', []]
camel sample_12989

['protected void beforeStart(CamelContext camelContext) {']
['empty kurarouter camelcontext before start configuration skipping ', []]
camel sample_12989

['public void testSendingToProcessorEndpoint() throws Exception {', 'ProcessorStub processor = getMandatoryBean(ProcessorStub.class, "myProcessor");', 'template.sendBody("myProcessor", body);', 'List<Exchange> list = processor.getExchanges();', 'assertEquals("Received exchange list: " + list, 1, list.size());']
['found exchanges ', ['list']]
camel sample_16163

['public void testSendingToNonExistentEndpoint() throws Exception {', 'String uri = "unknownEndpoint";', 'Endpoint endpoint = context.getEndpoint(uri);', 'assertNull("Should not have found an endpoint! Was: " + endpoint, endpoint);', 'try {', 'template.sendBody(uri, body);', 'fail("We should have failed as this is a bad endpoint URI");', '} catch (NoSuchEndpointException e) {']
['caught expected exception ', ['e', 'e']]
camel sample_16163

['if (endpoint.isBridgeEndpoint()) {', 'exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);', 'exchange.getIn().getHeaders().remove("host");', '}', 'RequestBuilder builder = new RequestBuilder();', 'URI uri;', 'try {', 'String url = AhcHelper.createURL(exchange, endpoint);', 'uri = AhcHelper.createURI(exchange, url, endpoint);', 'url = uri.toASCIIString();']
['setting url ', ['url']]
camel sample_16499

['URI uri;', 'try {', 'String url = AhcHelper.createURL(exchange, endpoint);', 'uri = AhcHelper.createURI(exchange, url, endpoint);', 'url = uri.toASCIIString();', 'builder.setUrl(url);', '} catch (Exception e) {', 'throw new CamelExchangeException("Error creating URL", exchange, e);', '}', 'String method = extractMethod(exchange);']
['setting method ', ['method']]
camel sample_16499

['body = new InputStreamBodyGenerator(is);', '}', '}', '} catch (UnsupportedEncodingException e) {', 'throw new CamelExchangeException("Error creating BodyGenerator from message body", exchange, e);', '} catch (IOException e) {', 'throw new CamelExchangeException("Error serializing message body", exchange, e);', '}', '}', 'if (body != null) {']
['setting body ', ['body']]
camel sample_16499

['} catch (UnsupportedEncodingException e) {', 'throw new CamelExchangeException("Error creating BodyGenerator from message body", exchange, e);', '} catch (IOException e) {', 'throw new CamelExchangeException("Error serializing message body", exchange, e);', '}', '}', 'if (body != null) {', 'builder.setBody(body);', '}', 'if (charset != null) {']
['setting body charset ', ['charset']]
camel sample_16499

['} catch (IOException e) {', 'throw new CamelExchangeException("Error serializing message body", exchange, e);', '}', '}', 'if (body != null) {', 'builder.setBody(body);', '}', 'if (charset != null) {', 'builder.setCharset(Charset.forName(charset));', '}']
['setting content type ', ['contenttype']]
camel sample_16499

['public void testXslt() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:xslt");', 'execute(1000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6432

['private DirectConsumer awaitConsumer() throws InterruptedException {', 'DirectConsumer answer = null;', 'StopWatch watch = new StopWatch();', 'boolean done = false;', 'while (!done) {', 'Thread.sleep(500);', 'if (LOG.isDebugEnabled()) {']
['waited for consumer to be ready ', ['watch', 'taken']]
camel sample_4771

['}', 'if (close == null) {', 'close = exchange.getProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = consumer.getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['remoteaddress']]
camel sample_10263

['public void execute() {', 'BatchDeleteAttributesRequest request = new BatchDeleteAttributesRequest() .withDomainName(determineDomainName()) .withItems(determineDeletableItems());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8752

['public void execute() {', 'BatchDeleteAttributesRequest request = new BatchDeleteAttributesRequest() .withDomainName(determineDomainName()) .withItems(determineDeletableItems());', 'this.sdbClient.batchDeleteAttributes(request);']
['request sent ', []]
camel sample_8752

['String projectId = properties.getProperty("pubsub.projectId");', 'String topic = properties.getProperty("pubsub.topic");', 'String subscriptionName = properties.getProperty("pubsub.subscription");', 'String topicFullName = String.format("projects/%s/topics/%s", projectId, topic);', 'String subscriptionFullName = String.format("projects/%s/subscriptions/%s", projectId, subscriptionName);', 'Pubsub pubsub = PubsubUtil .createConnectionFactory(properties) .getDefaultClient();', 'try {', 'pubsub.projects() .topics() .create(topicFullName, new Topic()) .execute();', '} catch (GoogleJsonResponseException e) {', 'if (409 == e.getStatusCode()) {']
['topic already exist ', ['topic']]
camel sample_17549

['if (409 == e.getStatusCode()) {', '} else {', 'throw e;', '}', '}', 'try {', 'Subscription subscription = new Subscription() .setTopic(topicFullName) .setAckDeadlineSeconds(ackDeadlineSeconds);', 'pubsub.projects() .subscriptions() .create(subscriptionFullName, subscription) .execute();', '} catch (GoogleJsonResponseException e) {', 'if (409 == e.getStatusCode()) {']
['subscription already exist ', ['subscriptionname']]
camel sample_17549

['public void dispose(T context) {', 'super.dispose(context);', 'if (!context.getStatus().isStopped()) {']
['camel cdi is stopping camel context ', ['context', 'getname']]
camel sample_9905

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesNamespacesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-namespaces.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-namespaces.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_551

['public void testQueryLifecycle(ContentType contentType) throws Exception {']
['testing query lifecycle with content ', ['contenttype']]
camel sample_14735

['JobInfo jobInfo = new JobInfo();', 'jobInfo.setOperation(OperationEnum.QUERY);', 'jobInfo.setContentType(contentType);', 'jobInfo.setObject(Merchandise__c.class.getSimpleName());', 'jobInfo = createJob(jobInfo);', 'BatchInfo batchInfo = template().requestBody("direct:createBatchQuery", jobInfo, BatchInfo.class);', 'assertNotNull("Null batch query", batchInfo);', 'assertNotNull("Null batch query id", batchInfo.getId());', 'InputStream requestStream = template().requestBody("direct:getRequest", batchInfo, InputStream.class);', 'assertNotNull("Null batch request", requestStream);']
['waiting for query batch to finish ', []]
camel sample_14735

['jobInfo = createJob(jobInfo);', 'BatchInfo batchInfo = template().requestBody("direct:createBatchQuery", jobInfo, BatchInfo.class);', 'assertNotNull("Null batch query", batchInfo);', 'assertNotNull("Null batch query id", batchInfo.getId());', 'InputStream requestStream = template().requestBody("direct:getRequest", batchInfo, InputStream.class);', 'assertNotNull("Null batch request", requestStream);', 'while (!batchProcessed(batchInfo)) {', 'Thread.sleep(5000);', 'batchInfo = getBatchInfo(batchInfo);', '}']
['query finished with state ', ['batchinfo', 'getstate']]
camel sample_14735

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastReplicatedmapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-replicatedmap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-replicatedmap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_678

['if (allowSimple) {', 'Matcher matcher = SIMPLE_PATTERN.matcher(expression);', 'if (matcher.find()) {', 'hasSimple = true;', '}', '}', 'if (hasSimple) {', 'this.path = null;', '} else {', 'this.path = JsonPath.compile(expression);']
['compiled static jsonpath ', ['expression']]
camel sample_16972

['public Object read(Exchange exchange) throws Exception {', 'Object answer;', 'if (path == null) {', 'Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression);', 'String text = exp.evaluate(exchange, String.class);', 'JsonPath path = JsonPath.compile(text);']
['compiled dynamic jsonpath ', ['expression']]
camel sample_16972

['JsonPath path = JsonPath.compile(text);', 'answer = doRead(path, exchange);', '} else {', 'answer = doRead(path, exchange);', '}', 'if (writeAsString) {', 'if (!initJsonAdapter) {', 'doInitAdapter(exchange);', '}', 'if (adapter == null) {']
['cannot writeasstring as adapter cannot be initialized ', []]
camel sample_16972

['private Object doRead(JsonPath path, Exchange exchange) throws IOException, CamelExchangeException {', 'Object json = headerName != null ? exchange.getIn().getHeader(headerName) : exchange.getIn().getBody();', 'if (json instanceof InputStream) {', 'return readWithInputStream(path, exchange);', '} else if (json instanceof GenericFile) {']
['jsonpath is read as generic file ', ['path', 'json']]
camel sample_16972

['if (json instanceof InputStream) {', 'return readWithInputStream(path, exchange);', '} else if (json instanceof GenericFile) {', 'GenericFile<?> genericFile = (GenericFile<?>) json;', 'if (genericFile.getCharset() != null) {', 'InputStream inputStream = new FileInputStream((File) genericFile.getFile());', 'return path.read(inputStream, genericFile.getCharset(), configuration);', '}', '}', 'if (json instanceof String) {']
['jsonpath is read as string ', ['path', 'json']]
camel sample_16972

['GenericFile<?> genericFile = (GenericFile<?>) json;', 'if (genericFile.getCharset() != null) {', 'InputStream inputStream = new FileInputStream((File) genericFile.getFile());', 'return path.read(inputStream, genericFile.getCharset(), configuration);', '}', '}', 'if (json instanceof String) {', 'String str = (String) json;', 'return path.read(str, configuration);', '} else if (json instanceof Map) {']
['jsonpath is read as map ', ['path', 'json']]
camel sample_16972

['return path.read(inputStream, genericFile.getCharset(), configuration);', '}', '}', 'if (json instanceof String) {', 'String str = (String) json;', 'return path.read(str, configuration);', '} else if (json instanceof Map) {', 'Map map = (Map) json;', 'return path.read(map, configuration);', '} else if (json instanceof List) {']
['jsonpath is read as list ', ['path', 'json']]
camel sample_16972

['private Object readWithInputStream(JsonPath path, Exchange exchange) throws IOException {', 'Object json = headerName != null ? exchange.getIn().getHeader(headerName) : exchange.getIn().getBody();']
['jsonpath is read as inputstream ', ['path', 'json']]
camel sample_16972

['private Object readWithAdapter(JsonPath path, Exchange exchange) {', 'Object json = headerName != null ? exchange.getIn().getHeader(headerName) : exchange.getIn().getBody();']
['jsonpath is read with adapter ', ['path', 'json']]
camel sample_16972

['private Object readWithAdapter(JsonPath path, Exchange exchange) {', 'Object json = headerName != null ? exchange.getIn().getHeader(headerName) : exchange.getIn().getBody();', 'doInitAdapter(exchange);', 'if (adapter != null) {']
['attempting to use jacksonjsonadapter ', ['adapter']]
camel sample_16972

['private Object readWithAdapter(JsonPath path, Exchange exchange) {', 'Object json = headerName != null ? exchange.getIn().getHeader(headerName) : exchange.getIn().getBody();', 'doInitAdapter(exchange);', 'if (adapter != null) {', 'Map map = adapter.readValue(json, exchange);', 'if (map != null) {', 'if (LOG.isDebugEnabled()) {']
['jacksonjsonadapter converted object from to java util map ', ['objecthelper', 'classcanonicalname', 'json']]
camel sample_16972

['private void doInitAdapter(Exchange exchange) {', 'if (!initJsonAdapter) {', 'try {']
['attempting to enable jacksonjsonadapter by resolving from classpath ', ['jackson', 'json', 'adapter']]
camel sample_16972

['private void doInitAdapter(Exchange exchange) {', 'if (!initJsonAdapter) {', 'try {', 'Class<?> clazz = exchange.getContext().getClassResolver().resolveClass(JACKSON_JSON_ADAPTER);', 'if (clazz != null) {', 'Object obj = exchange.getContext().getInjector().newInstance(clazz);', 'if (obj instanceof JsonPathAdapter) {', 'adapter = (JsonPathAdapter) obj;', 'adapter.init(exchange.getContext());']
['jacksonjsonadapter found on classpath and enabled for camel jsonpath ', ['adapter']]
camel sample_16972

['public void testXml() throws Exception {', 'InputStream is = new FileInputStream("src/test/resources/org/apache/camel/parser/xml/myroutes.xml");', 'String key = "_camelContext1/cbr-route/_from1";', 'Element element = CamelXmlHelper.getSelectedCamelElementNode(key, is);', 'assertNotNull("Could not find Element for key " + key, element);']
['found element ', ['element', 'gettagname']]
camel sample_228

['public String noParamOperation() {']
['processing no param ', []]
camel sample_7761

['protected JAXBContext createContext() throws JAXBException {', 'if (contextPath != null) {', 'ClassLoader cl = camelContext.getApplicationContextClassLoader();', 'if (cl != null) {']
['creating jaxbcontext with contextpath and applicationcontextclassloader ', ['contextpath', 'cl']]
camel sample_13789

['protected JAXBContext createContext() throws JAXBException {', 'if (contextPath != null) {', 'ClassLoader cl = camelContext.getApplicationContextClassLoader();', 'if (cl != null) {', 'return JAXBContext.newInstance(contextPath, cl);', '} else {']
['creating jaxbcontext with contextpath ', ['contextpath']]
camel sample_13789

['protected JAXBContext createContext() throws JAXBException {', 'if (contextPath != null) {', 'ClassLoader cl = camelContext.getApplicationContextClassLoader();', 'if (cl != null) {', 'return JAXBContext.newInstance(contextPath, cl);', '} else {', 'return JAXBContext.newInstance(contextPath);', '}', '} else {']
['creating jaxbcontext ', []]
camel sample_13789

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_2975

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['iso iso ', ['new', 'string', 'iso', 'charset', 'forname']]
camel sample_2975

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_2975

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {', '}', 'for (byte b : iso) {']
['iso byte ', ['b']]
camel sample_2975

['File file = new File("target/charset/output.txt");', 'assertTrue("File should exist", file.exists());', 'InputStream fis = Files.newInputStream(Paths.get(file.getAbsolutePath()));', 'byte[] buffer = new byte[100];', 'int len = fis.read(buffer);', 'assertTrue("Should read data: " + len, len != -1);', 'byte[] data = new byte[len];', 'System.arraycopy(buffer, 0, data, 0, len);', 'fis.close();', 'for (byte b : data) {']
['loaded byte ', ['b']]
camel sample_2975

['private void doSendMessages(int messageCount) throws Exception {']
['sending messages ', ['messagecount']]
camel sample_3667

['switch (i % 3) {', 'case 0: template.sendBody("seda:foo", XMLTEST1);', 'break;', 'case 1: template.sendBody("seda:foo", XMLTEST2);', 'break;', 'case 2: template.sendBody("seda:foo", XMLTEST3);', 'break;', 'default: break;', '}', '}']
['sent messages in ms ', ['messagecount', 'system', 'currenttimemillis', 'now']]
camel sample_3667

['case 0: template.sendBody("seda:foo", XMLTEST1);', 'break;', 'case 1: template.sendBody("seda:foo", XMLTEST2);', 'break;', 'case 2: template.sendBody("seda:foo", XMLTEST3);', 'break;', 'default: break;', '}', '}', 'assertMockEndpointsSatisfied();']
['processed messages in ms ', ['messagecount', 'system', 'currenttimemillis', 'now']]
camel sample_3667

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_8928

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';"]
['sending with id ', ['value', 'id']]
camel sample_8928

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'template.sendBodyAndHeader("seda:start?size=" + SIZE, value, "id", "" + id);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_8928

['public void validate(Message message, DataType type) throws ValidationException {', 'Object body = message.getBody();']
['validating message body ', ['body']]
camel sample_17725

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastMultimapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-multimap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-multimap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_697

['sslContext.setSSLContext(getServerSSLContext());', 'brokerService.setSslContext(sslContext);', 'brokerService.addConnector("stomp+ssl: } else {', 'brokerService.addConnector("stomp: }', 'brokerService.start();', 'brokerService.waitUntilStarted();', 'super.setUp();', 'canTest = true;', '} catch (Exception e) {', 'System.err.println("Cannot test due " + e.getMessage() + " more details in the log");']
['cannot test due ', ['e', 'getmessage', 'e']]
camel sample_16513

['public void testPerformance() {', 'ActiveMQUuidGenerator uuidGenerator = new ActiveMQUuidGenerator();', 'StopWatch watch = new StopWatch();']
['first id ', ['uuidgenerator', 'generateuuid']]
camel sample_1292

['public void testPerformance() {', 'ActiveMQUuidGenerator uuidGenerator = new ActiveMQUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['last id ', ['uuidgenerator', 'generateuuid']]
camel sample_1292

['public void testPerformance() {', 'ActiveMQUuidGenerator uuidGenerator = new ActiveMQUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['took ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_1292

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'Message message = exchange.getIn();', 'DockerClient client = DockerClientFactory.getDockerClient(component, configuration, message);', 'DockerOperation operation = configuration.getOperation();', 'Object result = null;', 'switch (operation) {', 'case BUILD_IMAGE: result = executeBuildImageRequest(client, message).exec(new BuildImageResultCallback() {', 'public void onNext(BuildResponseItem item) {']
['build image callback ', ['item']]
camel sample_6557

['}', '});', 'if (result != null) {', 'String imageId = ((BuildImageResultCallback)result).awaitImageId();', '((BuildImageResultCallback)result).close();', 'result = imageId;', '}', 'break;', 'case PULL_IMAGE: result = executePullImageRequest(client, message).exec(new PullImageResultCallback() {', 'public void onNext(PullResponseItem item) {']
['pull image callback ', ['item']]
camel sample_6557

['super.onNext(item);', '}', '});', 'if (result != null) {', 'result = ((PullImageResultCallback)result).awaitCompletion();', '((PullImageResultCallback)result).close();', '}', 'break;', 'case PUSH_IMAGE: result = executePushImageRequest(client, message).exec(new PushImageResultCallback() {', 'public void onNext(PushResponseItem item) {']
['push image callback ', ['item']]
camel sample_6557

['super.onNext(item);', '}', '});', 'if (result != null) {', 'result = ((PushImageResultCallback)result).awaitCompletion();', '((PushImageResultCallback)result).close();', '}', 'break;', 'case ATTACH_CONTAINER: result = executeAttachContainerRequest(client, message).exec(new AttachContainerResultCallback() {', 'public void onNext(Frame item) {']
['attach container callback ', ['item']]
camel sample_6557

['super.onNext(item);', '}', '});', 'if (result != null) {', 'result = ((AttachContainerResultCallback)result).awaitCompletion();', '((AttachContainerResultCallback)result).close();', '}', 'break;', 'case LOG_CONTAINER: result = executeLogContainerRequest(client, message).exec(new LogContainerResultCallback() {', 'public void onNext(Frame item) {']
['log container callback ', ['item']]
camel sample_6557

['super.onNext(item);', '}', '});', 'if (result != null) {', 'result = ((LogContainerResultCallback)result).awaitCompletion();', '((LogContainerResultCallback)result).close();', '}', 'break;', 'case WAIT_CONTAINER: result = executeWaitContainerRequest(client, message).exec(new WaitContainerResultCallback() {', 'public void onNext(WaitResponse item) {']
['wait contanier callback ', ['item']]
camel sample_6557

['}', '});', 'if (result != null) {', 'Integer statusCode = ((WaitContainerResultCallback)result).awaitStatusCode();', '((WaitContainerResultCallback)result).close();', 'result = statusCode;', '}', 'break;', 'case EXEC_START: result = executeExecStartRequest(client, message).exec(new ExecStartResultCallback() {', 'public void onNext(Frame item) {']
['exec start callback ', ['item']]
camel sample_6557

['private BuildImageCmd executeBuildImageRequest(DockerClient client, Message message) throws DockerException {']
['executing docker build image request ', []]
camel sample_6557

['private PullImageCmd executePullImageRequest(DockerClient client, Message message) {']
['executing docker pull image request ', []]
camel sample_6557

['private PushImageCmd executePushImageRequest(DockerClient client, Message message) {']
['executing docker push image request ', []]
camel sample_6557

['private AttachContainerCmd executeAttachContainerRequest(DockerClient client, Message message) {']
['executing docker attach container request ', []]
camel sample_6557

['private WaitContainerCmd executeWaitContainerRequest(DockerClient client, Message message) {']
['executing docker wait container request ', []]
camel sample_6557

['private ExecStartCmd executeExecStartRequest(DockerClient client, Message message) {']
['executing docker exec create request ', []]
camel sample_6557

['public void testSearchTimelineWithStaticQuery() throws Exception {', 'template.sendBody(null);', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14191

['public void testSearchTimelineWithDynamicQuery() throws Exception {', 'templateHeader.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14191

['public void testSearchTimelineWithDynamicQuerySinceId() throws Exception {', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put(TwitterConstants.TWITTER_KEYWORDS, "java");', 'headers.put(TwitterConstants.TWITTER_SINCEID, new Long(258347905419730944L));', 'templateHeader.sendBodyAndHeaders(null, headers);', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14191

['public void testDoubleSearchKeepingOld() throws Exception {', 'templateDouble.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14191

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from(directIn) .to("seda:seda");']
['seda seda Async to sendresult ', ['routeid', 'inonly', 'bigqueryendpoint', 'log', 'logginglevel', 'info', 'to', 'sendresult']]
camel sample_9358

['public void invoke(Object pojo, Exchange exchange) {', 'try {']
['invoking method with args ', ['getmethod', 'getargs']]
camel sample_4839

['public void invoke(Object pojo, Exchange exchange) {', 'try {', 'Object response = getMethod().invoke(pojo, getArgs());']
['got response ', ['response']]
camel sample_4839

['public void afterTestMethod(TestContext testContext) throws Exception {', 'StopWatch watch = threadStopWatch.get();', 'if (watch != null) {', 'long time = watch.stop();', 'Logger log = LoggerFactory.getLogger(testContext.getTestClass());', 'log.info("********************************************************************************");']
['testing done ', ['testcontext', 'gettestmethod', 'getname', 'testcontext', 'gettestclass', 'getname']]
camel sample_10582

['public void afterTestMethod(TestContext testContext) throws Exception {', 'StopWatch watch = threadStopWatch.get();', 'if (watch != null) {', 'long time = watch.stop();', 'Logger log = LoggerFactory.getLogger(testContext.getTestClass());', 'log.info("********************************************************************************");']
['took millis ', ['timeutils', 'printduration', 'time', 'time']]
camel sample_10582

['public void afterPropertiesSet() throws Exception {', 'if (Strings.isNullOrEmpty(loggerId)) {', 'log = LoggerFactory.getLogger(this.getClass().getName());', '} else {', 'log = LoggerFactory.getLogger(loggerId);', '}', 'pubsub = getConnectionFactory().getDefaultClient();']
['credential file location ', ['getconnectionfactory', 'getcredentialsfilelocation']]
camel sample_17247

['public void afterPropertiesSet() throws Exception {', 'if (Strings.isNullOrEmpty(loggerId)) {', 'log = LoggerFactory.getLogger(this.getClass().getName());', '} else {', 'log = LoggerFactory.getLogger(loggerId);', '}', 'pubsub = getConnectionFactory().getDefaultClient();']
['project id ', ['this', 'projectid']]
camel sample_17247

['public void afterPropertiesSet() throws Exception {', 'if (Strings.isNullOrEmpty(loggerId)) {', 'log = LoggerFactory.getLogger(this.getClass().getName());', '} else {', 'log = LoggerFactory.getLogger(loggerId);', '}', 'pubsub = getConnectionFactory().getDefaultClient();']
['destination name ', ['this', 'destinationname']]
camel sample_17247

['protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {', 'CMSSignedDataStreamGenerator gen = new CMSSignedDataStreamGenerator();', 'if (config.getSigner().isEmpty()) {', 'throw new CryptoCmsException("No signer information configured");', '}', 'for (SignerInfo signer : config.getSigner()) {']
['signer info ', ['signer']]
camel sample_11540

['throw new CryptoCmsInvalidKeyException("The private key of the signer information  \'" + signer + "\' does not fit to the specified signature algorithm \'" + signer.getSignatureAlgorithm(exchange) + "\': " + e.getMessage(), e);', '}', 'JcaSignerInfoGeneratorBuilder signerBuilder = new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME) .build());', 'signerBuilder.setSignedAttributeGenerator(signer.getSignedAttributeGenerator(exchange)).setUnsignedAttributeGenerator(signer.getUnsignedAttributeGenerator(exchange));', 'gen.addSignerInfoGenerator(signerBuilder.build(contentSigner, signerCert));', 'List<Certificate> certificateList = new ArrayList<Certificate>();', 'for (Certificate cert : signer.getCertificateChain(exchange)) {', 'if (!certificateList.contains(cert)) {', 'certificateList.add(cert);', 'gen.addCertificate(new X509CertificateHolder(cert.getEncoded()));']
['certificate added to signed data certificate list ', ['cert']]
camel sample_11540

['gen.addCertificate(new X509CertificateHolder(cert.getEncoded()));', '}', '}', '}', 'OutputStream sigOut = gen.open(os, config.getIncludeContent());', 'try {', 'IOHelper.copyAndCloseInput(is, sigOut);', '} finally {', 'IOHelper.close(sigOut);', '}']
['cms signed data generation successful ', []]
camel sample_11540

['protected void doStart() throws Exception {', 'super.doStart();', 'String topic = getEndpoint().getTopic();', 'getEndpoint().getClient().subscribe(topic, getEndpoint().getQos());', 'getEndpoint().getClient().setCallback(new MqttCallbackExtended() {', 'public void connectComplete(boolean reconnect, String serverURI) {', 'if (reconnect) {', 'try {', 'getEndpoint().getClient().subscribe(topic, getEndpoint().getQos());', '} catch (MqttException e) {']
['mqtt resubscribe failed ', ['e', 'getmessage', 'e']]
camel sample_9071

['getEndpoint().getClient().setCallback(new MqttCallbackExtended() {', 'public void connectComplete(boolean reconnect, String serverURI) {', 'if (reconnect) {', 'try {', 'getEndpoint().getClient().subscribe(topic, getEndpoint().getQos());', '} catch (MqttException e) {', '}', '}', '}', 'public void connectionLost(Throwable cause) {']
['mqtt broker connection lost due ', ['cause', 'getmessage', 'cause']]
camel sample_9071

['if (reconnect) {', 'try {', 'getEndpoint().getClient().subscribe(topic, getEndpoint().getQos());', '} catch (MqttException e) {', '}', '}', '}', 'public void connectionLost(Throwable cause) {', '}', 'public void messageArrived(String topic, MqttMessage message) throws Exception {']
['message arrived on topic ', ['topic', 'message']]
camel sample_9071

['public void connectionLost(Throwable cause) {', '}', 'public void messageArrived(String topic, MqttMessage message) throws Exception {', 'Exchange exchange = getEndpoint().createExchange(message, topic);', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', '}', '});', '}', 'public void deliveryComplete(IMqttDeliveryToken token) {']
['delivery complete token ', ['token']]
camel sample_9071

['private DataFormat getDataFormat(String name, CamelContext context, boolean create) {']
['finding dataformat ', ['name']]
camel sample_13087

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<VmComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.vm.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.vm.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_875

['if (getEndpoint().getHttpClientParameters() != null) {', 'String timeout = (String)getEndpoint().getHttpClientParameters().get("timeout");', 'if (timeout != null) {', 'httpExchange.setTimeout(new Long(timeout));', '}', 'String supportRedirect = (String)getEndpoint().getHttpClientParameters().get("supportRedirect");', 'if (supportRedirect != null) {', 'httpExchange.setSupportRedirect(Boolean.valueOf(supportRedirect));', '}', '}']
['using url with method ', ['url', 'methodname']]
camel sample_17494

['if (getEndpoint().isConnectionClose()) {', 'httpExchange.addRequestHeader("Connection", "close");', '}', 'if (getEndpoint().isPreserveHostHeader()) {', 'String hostHeader = exchange.getIn().getHeader("Host", String.class);', 'if (hostHeader != null) {', 'httpExchange.addRequestHeader("Host", hostHeader);', '}', '}', 'if (LOG.isDebugEnabled()) {']
['sending http request to ', ['httpexchange', 'geturl']]
camel sample_17494

['protected void doStart() throws Exception {', 'if (!sharedClient && client != null) {', 'client.start();', 'Object tp = getClientThreadPool();', 'if (tp instanceof LifeCycle) {']
['starting client thread pool ', ['tp']]
camel sample_17494

['protected void doStop() throws Exception {', 'super.doStop();', 'if (!sharedClient && client != null) {', 'client.stop();', 'Object tp = getClientThreadPool();', 'if (tp instanceof LifeCycle) {']
['stopping client thread pool ', ['tp']]
camel sample_17494

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'HttpRequest request = (HttpRequest) messageEvent.getMessage();']
['message received ', ['request']]
camel sample_8375

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {', 'HttpServerChannelHandler handler = (HttpServerChannelHandler) ctx.getAttachment();', 'if (handler != null) {', 'handler.exceptionCaught(ctx, e);', '} else {', 'if (e.getCause() instanceof ClosedChannelException) {']
['channel already closed ignoring this exception ', []]
camel sample_8375

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {', 'HttpServerChannelHandler handler = (HttpServerChannelHandler) ctx.getAttachment();', 'if (handler != null) {', 'handler.exceptionCaught(ctx, e);', '} else {', 'if (e.getCause() instanceof ClosedChannelException) {', 'return;', '} else {', 'if ("Broken pipe".equals(e.getCause().getMessage())) {']
['channel pipe is broken closing channel now ', ['e']]
camel sample_8375

['HttpServerChannelHandler handler = (HttpServerChannelHandler) ctx.getAttachment();', 'if (handler != null) {', 'handler.exceptionCaught(ctx, e);', '} else {', 'if (e.getCause() instanceof ClosedChannelException) {', 'return;', '} else {', 'if ("Broken pipe".equals(e.getCause().getMessage())) {', 'ctx.getChannel().close();', '} else {']
['httpserverchannelhandler is not found as attachment to handle exception send back to the client ', ['e', 'getcause']]
camel sample_8375

['private void initInsertStatement() {', 'Insert insert = generateInsert(table, getAllColumns(), false, ttl);', 'insert = applyConsistencyLevel(insert, writeConsistencyLevel);']
['generated insert ', ['insert']]
camel sample_15446

['public Exchange add(CamelContext camelContext, String key, Exchange exchange) {', 'final Object[] idValues = getPKValues(key);']
['inserting key exchange ', ['idvalues', 'exchange']]
camel sample_15446

['protected void initSelectStatement() {', 'Select select = generateSelect(table, getAllColumns(), pkColumns);', 'select = applyConsistencyLevel(select, readConsistencyLevel);']
['generated select ', ['select']]
camel sample_15446

['public Exchange get(CamelContext camelContext, String key) {', 'Object[] pkValues = getPKValues(key);']
['selecting key ', ['pkvalues']]
camel sample_15446

['private void initDeleteIfIdStatement() {', 'Delete delete = generateDelete(table, pkColumns, false);', 'Delete.Conditions deleteIf = delete.onlyIf(eq(exchangeIdColumn, bindMarker()));', 'deleteIf = applyConsistencyLevel(deleteIf, writeConsistencyLevel);']
['generated delete if id ', ['deleteif']]
camel sample_15446

['public void confirm(CamelContext camelContext, String exchangeId) {', 'String keyColumn = getKeyColumn();']
['selecting ids ', []]
camel sample_15446

['public void confirm(CamelContext camelContext, String exchangeId) {', 'String keyColumn = getKeyColumn();', 'List<Row> rows = selectKeyIds();', 'for (Row row : rows) {', 'if (row.getString(exchangeIdColumn).equals(exchangeId)) {', 'String key = row.getString(keyColumn);', 'Object[] cqlParams = append(getPKValues(key), exchangeId);']
['deleting if id ', ['cqlparams']]
camel sample_15446

['private void initDeleteStatement() {', 'Delete delete = generateDelete(table, pkColumns, false);', 'delete = applyConsistencyLevel(delete, writeConsistencyLevel);']
['generated delete ', ['delete']]
camel sample_15446

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'Object[] idValues = getPKValues(key);']
['deleting key ', ['object', 'idvalues']]
camel sample_15446

['private void initSelectKeyIdStatement() {', 'Select select = generateSelect(table, new String[]{getKeyColumn(), exchangeIdColumn}, pkColumns, pkColumns.length - 1);', 'select = applyConsistencyLevel(select, readConsistencyLevel);']
['generated select keys ', ['select']]
camel sample_15446

['protected List<Row> selectKeyIds() {']
['selecting keys ', ['getprefixpkvalues']]
camel sample_15446

['public void testDefaultPrefixInRootElementWithCopyTransformer() throws Exception {', 'TransformerFactory trf = TransformerFactory.newInstance();', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'XMLStreamReader reader = context.getTypeConverter().mandatoryConvertTo(XMLStreamReader.class, new StringReader(TEST_XML));', 'Exchange exchange = new DefaultExchange(context);', 'exchange.setProperty(Exchange.CHARSET_NAME, UTF_8.toString());', 'XMLStreamWriter writer = context.getTypeConverter().mandatoryConvertTo(XMLStreamWriter.class, exchange, baos);', 'StAX2SAXSource staxSource = new StAX2SAXSource(reader);', 'StreamSource templateSource = new StreamSource(getClass().getResourceAsStream("/xslt/common/copy.xsl"));', 'Transformer transformer = trf.newTransformer(templateSource);']
['used transformer ', ['transformer', 'getclass', 'getname']]
camel sample_1504

['public CamelSpringBootApplicationController(final ApplicationContext applicationContext, final CamelContext camelContext) {', 'this.main = new Main() {', 'protected ProducerTemplate findOrCreateCamelTemplate() {', 'return applicationContext.getBean(ProducerTemplate.class);', '}', 'protected Map<String, CamelContext> getCamelContextMap() {', 'return Collections.singletonMap("camelContext", camelContext);', '}', 'protected void doStop() throws Exception {']
['controller is shutting down camelcontext ', []]
camel sample_13438

['public void run() {']
['controller is starting and waiting for spring boot to stop or jvm to terminate ', []]
camel sample_13438

['public void run() {', 'try {', 'main.run();']
['waiting for camelcontext to complete shutdown ', []]
camel sample_13438

['public void run() {', 'try {', 'main.run();', 'latch.await();', '} catch (Exception e) {', 'throw new RuntimeException(e);', '}']
['camelcontext shutdown complete ', []]
camel sample_13438

['public PullRequestFilesProducer(GitHubEndpoint endpoint) throws Exception {', 'super(endpoint);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_PULL_REQUEST_SERVICE);', 'if (service != null) {']
['using pullrequestservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14257

['public void populateCxfRequestFromExchange( org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange, Map<String, Object> requestContext) {', 'Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders();', 'extractInvocationContextFromCamel(camelExchange, camelHeaders, requestContext, Client.REQUEST_CONTEXT);', 'propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, requestContext);', 'String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class);', 'if (overrideAddress != null) {']
['client address is overridden by header to value ', ['exchange', 'destination', 'override', 'url', 'overrideaddress']]
camel sample_7983

['public void populateExchangeFromCxfResponse(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange, Map<String, Object> responseContext) {', 'Message cxfMessage = cxfExchange.getInMessage();', 'if (cxfMessage == null) {', 'return;', '}']
['populate exchange from cxf response message ', ['cxfmessage']]
camel sample_7983

['LOG.trace("Set IN header: {}={}", CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI());', 'LOG.trace("Set IN header: {}={}", CxfConstants.OPERATION_NAME, boi.getName().getLocalPart());', '}', '} else if (method != null) {', 'camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName());', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("Set IN header: {}={}", CxfConstants.OPERATION_NAME, method.getName());', '}', '}', 'camelExchange.setPattern(mep);']
['set exchange mep ', ['mep']]
camel sample_7983

['public void populateCxfResponseFromExchange(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) {', 'if (cxfExchange.isOneWay()) {', 'return;', '}', 'Map<String, Object> responseContext = new HashMap<String, Object>();', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();']
['get the response from the out message ', []]
camel sample_7983

['if (cxfExchange.isOneWay()) {', 'return;', '}', 'Map<String, Object> responseContext = new HashMap<String, Object>();', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();', '} else {', 'response = camelExchange.getIn();']
['get the response from the in message as a fallback ', []]
camel sample_7983

['Map<String, Object> responseContext = new HashMap<String, Object>();', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();', '} else {', 'response = camelExchange.getIn();', '}', '} else {', 'response = camelExchange.getIn();']
['get the response from the in message ', []]
camel sample_7983

['CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange);', 'if (cxfHeaders != null) {', 'for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {', 'if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {', 'if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0 && entry.getValue().get(0) != null && entry.getValue().get(0).startsWith("multipart/related")) {', 'DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class);', 'if (dataFormat.equals(DataFormat.RAW)) {', 'camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()));', '} else {', 'String contentType = replaceMultiPartContentType(entry.getValue().get(0));']
['find the multi part conent type and replace it with ', ['contenttype']]
camel sample_7983

['transportHeaders.putAll(h);', '}', '}', 'Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>)camelHeaders.get(Message.PROTOCOL_HEADERS));', 'if (headers != null) {', 'transportHeaders.putAll(headers);', '}', 'DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class);', 'for (Map.Entry<String, Object> entry : camelHeaders.entrySet()) {', 'if (Message.RESPONSE_CODE.equals(entry.getKey()) || Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())) {']
['propagate to cxf header value ', ['message', 'response', 'code', 'entry', 'getvalue']]
camel sample_7983

['if (headers != null) {', 'transportHeaders.putAll(headers);', '}', 'DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class);', 'for (Map.Entry<String, Object> entry : camelHeaders.entrySet()) {', 'if (Message.RESPONSE_CODE.equals(entry.getKey()) || Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())) {', 'cxfContext.put(Message.RESPONSE_CODE, entry.getValue());', 'continue;', '}', 'if (Message.CONTENT_TYPE.equalsIgnoreCase(entry.getKey()) && dataFormat.equals(DataFormat.RAW)) {']
['propagate to cxf header value ', ['message', 'content', 'type', 'entry', 'getvalue']]
camel sample_7983

['continue;', '}', 'if (entry.getKey().equalsIgnoreCase("User-Agent")) {', 'List<String> listValue = new ArrayList<String>();', 'listValue.add(entry.getValue().toString());', 'transportHeaders.put("User-Agent", listValue);', '}', 'if (headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {', 'continue;', '}']
['propagate to cxf header value ', ['entry', 'getkey', 'entry', 'getvalue']]
camel sample_7983

['listValue.add(entry.getValue().toString());', 'transportHeaders.put("User-Agent", listValue);', '}', 'if (headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {', 'continue;', '}', 'if (Header.HEADER_LIST.equals(entry.getKey())) {', 'List<Header> headerList = (List<Header>)entry.getValue();', 'for (Header header : headerList) {', 'header.setDirection(Header.Direction.DIRECTION_OUT);']
['propagate soap protocol header ', ['header', 'getname', 'header', 'getobject']]
camel sample_7983

['answer.add((Source)part);', '}', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("Extract body element {}", element == null ? "null" : getXMLString(element));', '}', '} else if (part instanceof Element) {', 'addNamespace((Element)part, nsMap);', 'answer.add(new DOMSource((Element)part));', '} else {', 'if (LOG.isDebugEnabled()) {']
['unhandled part type ', ['part', 'getclass']]
camel sample_7983

['private static void changeToOneway(org.apache.cxf.message.Exchange cxfExchange) {', 'cxfExchange.setOneWay(true);', 'Object httpresp = cxfExchange.getInMessage().get("HTTP.RESPONSE");', 'if (httpresp != null) {', 'try {', 'Method m = findMethod(httpresp.getClass(), "setStatus", int.class);', 'if (m != null) {', 'm.invoke(httpresp, 202);', '}', '} catch (Exception e) {']
['unable to set the http ', ['e']]
camel sample_7983

['private synchronized void getOrRefreshAccessToken() {', 'if (token == null) {']
['generate oauth token ', []]
camel sample_13592

['private synchronized void getOrRefreshAccessToken() {', 'if (token == null) {', 'token = OAuthClientUtils.getAccessToken( WebClient.create(configuration.getOauthTokenUrl()), new Consumer( configuration.getOauthClientId(), configuration.getOauthClientSecret()), new ResourceOwnerGrant( configuration.getUserName(), configuration.getPassword()), true );']
['oauth token expires in s ', ['token', 'getexpiresin']]
camel sample_13592

['private synchronized void getOrRefreshAccessToken() {', 'if (token == null) {', 'token = OAuthClientUtils.getAccessToken( WebClient.create(configuration.getOauthTokenUrl()), new Consumer( configuration.getOauthClientId(), configuration.getOauthClientSecret()), new ResourceOwnerGrant( configuration.getUserName(), configuration.getPassword()), true );', 'token.setIssuedAt(System.currentTimeMillis());', 'token.setExpiresIn(TimeUnit.MILLISECONDS.convert(token.getExpiresIn(), TimeUnit.SECONDS));', 'authString = token.toString();', 'if (token.getExpiresIn() > 0) {', 'expireAt = token.getIssuedAt() + token.getExpiresIn();', '}', '} else if (expireAt > 0 && System.currentTimeMillis() >= expireAt) {']
['oauth token is expired refresh it ', []]
camel sample_13592

['if (token == null) {', 'token = OAuthClientUtils.getAccessToken( WebClient.create(configuration.getOauthTokenUrl()), new Consumer( configuration.getOauthClientId(), configuration.getOauthClientSecret()), new ResourceOwnerGrant( configuration.getUserName(), configuration.getPassword()), true );', 'token.setIssuedAt(System.currentTimeMillis());', 'token.setExpiresIn(TimeUnit.MILLISECONDS.convert(token.getExpiresIn(), TimeUnit.SECONDS));', 'authString = token.toString();', 'if (token.getExpiresIn() > 0) {', 'expireAt = token.getIssuedAt() + token.getExpiresIn();', '}', '} else if (expireAt > 0 && System.currentTimeMillis() >= expireAt) {', 'token = OAuthClientUtils.refreshAccessToken( WebClient.create(configuration.getOauthTokenUrl()), new Consumer( configuration.getOauthClientId(), configuration.getOauthClientSecret()), token, null, false );']
['refreshed oauth token expires in s ', ['token', 'getexpiresin']]
camel sample_13592

['protected boolean canScheduleOrExecute() {', 'if (queueSize <= 0) {', 'return true;', '}', 'int size = delegate.getQueue().size();', 'boolean answer = size < queueSize;', 'if (LOG.isTraceEnabled()) {']
['canscheduleorexecute ', ['new', 'object', 'size', 'queuesize', 'answer']]
camel sample_4356

['if (exchange.getException(exception) != null) {', 'answer = true;', 'break;', '}', '}', '}', 'if (answer) {', 'statistics.onHandledFailure(exchange.getException());', '}', '}']
['failed for exchangeid ', ['answer', 'exchange', 'getexchangeid']]
camel sample_4478

['public boolean isRunAllowed() {', 'boolean forceShutdown = camelContext.getShutdownStrategy().forceShutdown(this);', 'if (forceShutdown) {']
['run not allowed as shutdownstrategy is forcing shutting down ', []]
camel sample_4478

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'if (!isRunAllowed()) {']
['run not allowed will reject executing exchange ', ['exchange']]
camel sample_4478

['boolean sync = albp.process(exchange, new CircuitBreakerCallback(exchange, callback));', 'if (sync) {', 'boolean failed = hasFailed(exchange);', 'if (!failed) {', 'failures.set(0);', '} else {', 'failures.incrementAndGet();', 'lastFailure = System.currentTimeMillis();', '}', '} else {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4478

['boolean failed = hasFailed(exchange);', 'if (!failed) {', 'failures.set(0);', '} else {', 'failures.incrementAndGet();', 'lastFailure = System.currentTimeMillis();', '}', '} else {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4478

['customer.setName("Willem");', 'exchange.getIn().setBody(customer);', '}', '});', 'results = entityManager.createQuery(queryText).getResultList();', 'assertEquals("Should have results: " + results, 1, results.size());', 'Customer customer = (Customer)results.get(0);', 'assertEquals("name property", "Willem", customer.getName());', 'consumer = endpoint.createConsumer(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_14083

['public void setNode(ProcessorDefinition<?> node) {', 'this.node = node;']
['node is now ', ['node']]
camel sample_14579

['public void process(Exchange exchange) throws Exception {', 'final String msg = exchange.getIn().getBody(String.class);', 'final String targetChannel = exchange.getIn().getHeader(IrcConstants.IRC_TARGET, String.class);', 'if (!connection.isConnected()) {', 'throw new RuntimeCamelException("Lost connection to " + connection.getHost());', '}', 'if (msg != null) {', 'if (isMessageACommand(msg)) {']
['sending command ', ['msg']]
camel sample_12157

['public void process(Exchange exchange) throws Exception {', 'final String msg = exchange.getIn().getBody(String.class);', 'final String targetChannel = exchange.getIn().getHeader(IrcConstants.IRC_TARGET, String.class);', 'if (!connection.isConnected()) {', 'throw new RuntimeCamelException("Lost connection to " + connection.getHost());', '}', 'if (msg != null) {', 'if (isMessageACommand(msg)) {', 'connection.send(msg);', '} else if (targetChannel != null) {']
['sending to message ', ['targetchannel', 'msg']]
camel sample_12157

['if (!connection.isConnected()) {', 'throw new RuntimeCamelException("Lost connection to " + connection.getHost());', '}', 'if (msg != null) {', 'if (isMessageACommand(msg)) {', 'connection.send(msg);', '} else if (targetChannel != null) {', 'connection.doPrivmsg(targetChannel, msg);', '} else {', 'for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {']
['sending to message ', ['channel', 'msg']]
camel sample_12157

['protected void doStop() throws Exception {', 'if (connection != null) {', 'for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {']
['parting ', ['channel']]
camel sample_12157

['public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {', 'if (consumer instanceof RemoteFileConsumer) {', 'RemoteFileConsumer<?> rfc = (RemoteFileConsumer<?>) consumer;', 'if (rfc.isRunAllowed()) {']
['trying to recover by force disconnecting from remote server and re connecting at next poll ', ['rfc', 'remoteserver']]
camel sample_15368

['public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {', 'if (consumer instanceof RemoteFileConsumer) {', 'RemoteFileConsumer<?> rfc = (RemoteFileConsumer<?>) consumer;', 'if (rfc.isRunAllowed()) {', 'try {', 'rfc.forceDisconnect();', '} catch (Throwable t) {']
['error occurred during force disconnecting from this exception will be ignored ', ['rfc', 'remoteserver', 't']]
camel sample_15368

['public void processExpired(ActivityState activityState) throws Exception {', 'Processor processor = getOverdueAction();', 'if (processor != null) {', 'Date now = new Date();', "TODO this doesn't work and returns null for some strange reason ProcessInstance instance = activityState.getProcessInstance();", 'ActivityState secondState = second.getActivityState(instance);', 'if (secondState == null) {']
['could not find the second state process is with first state and the state i was called with was ', ['instance', 'first', 'getactivitystate', 'instance', 'activitystate']]
camel sample_12507

['ActivityState secondState = second.getActivityState(instance);', 'if (secondState == null) {', '}', 'ActivityState secondState = activityState;', 'Date overdue = secondState.getTimeOverdue();', 'if (now.compareTo(overdue) >= 0) {', 'Exchange exchange = createExchange();', 'exchange.getIn().setBody(activityState);', 'processor.process(exchange);', '} else {']
['process has not actually expired the time is but the overdue time is ', ['now', 'overdue']]
camel sample_12507

['public void run() {', 'try {']
['waiting for latch ', []]
camel sample_6916

['public void run() {', 'try {', 'latch.await();', 'Thread.sleep(1000);', '} catch (Exception e) {', '}']
['sending late reply ', []]
camel sample_6916

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(componentName + ":queue:hello").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals("Hello World", exchange.getIn().getBody());', 'myReplyTo = exchange.getIn().getHeader("MyReplyQeueue", String.class);']
['replyto ', ['myreplyto']]
camel sample_6916

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(componentName + ":queue:hello").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals("Hello World", exchange.getIn().getBody());', 'myReplyTo = exchange.getIn().getHeader("MyReplyQeueue", String.class);']
['ahh i cannot send a reply someone else must do it ', []]
camel sample_6916

['protected Object evaluateAs(Exchange exchange, QName resultQName) {', 'XPathExpression xpathExpression = pool.poll();', 'if (xpathExpression == null) {']
['creating new xpathexpression as none was available from pool ', []]
camel sample_5639

['XPathExpression xpathExpression = pool.poll();', 'if (xpathExpression == null) {', 'try {', 'xpathExpression = createXPathExpression();', '} catch (XPathExpressionException e) {', 'throw new InvalidXPathExpression(getText(), e);', '} catch (Exception e) {', 'throw new RuntimeExpressionException("Cannot create xpath expression", e);', '}', '} else {']
['acquired xpathexpression from pool ', []]
camel sample_5639

['}', '} else {', '}', 'try {', 'if (logNamespaces && LOG.isInfoEnabled()) {', 'logNamespaces(exchange);', '}', 'return doInEvaluateAs(xpathExpression, exchange, resultQName);', '} finally {', 'pool.add(xpathExpression);']
['released xpathexpression back to pool ', []]
camel sample_5639

['protected Object doInEvaluateAs(XPathExpression xpathExpression, Exchange exchange, QName resultQName) {']
['evaluating exchange as ', ['exchange', 'resultqname']]
camel sample_5639

['} finally {', 'IOHelper.close(is);', '}', 'if (threadSafety && answer != null && answer instanceof NodeList) {', 'try {', 'NodeList list = (NodeList) answer;', 'boolean threadSafetyNeeded = list.getLength() >= 2;', 'if (threadSafetyNeeded) {', 'answer = new ThreadSafeNodeList(list);', 'if (LOG.isDebugEnabled()) {']
['created thread safe result from as ', ['list', 'getclass', 'getname', 'answer', 'getclass', 'getname']]
camel sample_5639

['if (threadSafetyNeeded) {', 'answer = new ThreadSafeNodeList(list);', 'if (LOG.isDebugEnabled()) {', '}', '}', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', '}', 'if (LOG.isTraceEnabled()) {']
['done evaluating exchange as with result ', ['new', 'object', 'exchange', 'resultqname', 'answer']]
camel sample_5639

['protected synchronized XPathExpression createXPathExpression() throws XPathExpressionException, XPathFactoryConfigurationException {', 'try {', 'start();', '} catch (Exception e) {', 'throw new RuntimeExpressionException("Error starting XPathBuilder", e);', '}', 'XPath xPath = getXPathFactory().newXPath();', 'if (!logNamespaces && LOG.isTraceEnabled()) {']
['creating new xpath expression in pool namespaces on xpath expression ', ['getnamespacecontext', 'tostring']]
camel sample_5639

['protected synchronized XPathExpression createXPathExpression() throws XPathExpressionException, XPathFactoryConfigurationException {', 'try {', 'start();', '} catch (Exception e) {', 'throw new RuntimeExpressionException("Error starting XPathBuilder", e);', '}', 'XPath xPath = getXPathFactory().newXPath();', 'if (!logNamespaces && LOG.isTraceEnabled()) {', '} else if (logNamespaces && LOG.isInfoEnabled()) {']
['creating new xpath expression in pool namespaces on xpath expression ', ['getnamespacecontext', 'tostring']]
camel sample_5639

['protected synchronized XPathFactory createXPathFactory() throws XPathFactoryConfigurationException {', 'if (objectModelUri != null) {', 'String xpathFactoryClassName = factoryClassName;', 'if (objectModelUri.equals(SAXON_OBJECT_MODEL_URI) && (xpathFactoryClassName == null || SAXON_FACTORY_CLASS_NAME.equals(xpathFactoryClassName))) {', 'try {', 'if (camelContext != null) {', 'Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {']
['creating saxon xpathfactory using class ', ['clazz']]
camel sample_5639

['protected synchronized XPathFactory createXPathFactory() throws XPathFactoryConfigurationException {', 'if (objectModelUri != null) {', 'String xpathFactoryClassName = factoryClassName;', 'if (objectModelUri.equals(SAXON_OBJECT_MODEL_URI) && (xpathFactoryClassName == null || SAXON_FACTORY_CLASS_NAME.equals(xpathFactoryClassName))) {', 'try {', 'if (camelContext != null) {', 'Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {', 'xpathFactory = camelContext.getInjector().newInstance(clazz);']
['created saxon xpathfactory ', ['xpathfactory']]
camel sample_5639

['String xpathFactoryClassName = factoryClassName;', 'if (objectModelUri.equals(SAXON_OBJECT_MODEL_URI) && (xpathFactoryClassName == null || SAXON_FACTORY_CLASS_NAME.equals(xpathFactoryClassName))) {', 'try {', 'if (camelContext != null) {', 'Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {', 'xpathFactory = camelContext.getInjector().newInstance(clazz);', '}', '}', '} catch (Throwable e) {']
['attempted to create saxon xpathfactory by creating a new instance of failed will fallback and create xpathfactory using jdk api this exception is ignored stacktrace in debug logging level ', ['saxon', 'factory', 'class', 'name']]
camel sample_5639

['String xpathFactoryClassName = factoryClassName;', 'if (objectModelUri.equals(SAXON_OBJECT_MODEL_URI) && (xpathFactoryClassName == null || SAXON_FACTORY_CLASS_NAME.equals(xpathFactoryClassName))) {', 'try {', 'if (camelContext != null) {', 'Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {', 'xpathFactory = camelContext.getInjector().newInstance(clazz);', '}', '}', '} catch (Throwable e) {']
['error creating saxon xpathfactory this exception is ignored ', ['e']]
camel sample_5639

['if (camelContext != null) {', 'Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {', 'xpathFactory = camelContext.getInjector().newInstance(clazz);', '}', '}', '} catch (Throwable e) {', '}', '}', 'if (xpathFactory == null) {']
['creating xpathfactory from objectmodeluri ', ['objectmodeluri']]
camel sample_5639

['Class<XPathFactory> clazz = camelContext.getClassResolver().resolveClass(SAXON_FACTORY_CLASS_NAME, XPathFactory.class);', 'if (clazz != null) {', 'xpathFactory = camelContext.getInjector().newInstance(clazz);', '}', '}', '} catch (Throwable e) {', '}', '}', 'if (xpathFactory == null) {', 'xpathFactory = ObjectHelper.isEmpty(xpathFactoryClassName) ? XPathFactory.newInstance(objectModelUri) : XPathFactory.newInstance(objectModelUri, xpathFactoryClassName, null);']
['created xpathfactory from objectmodeluri ', ['xpathfactory', 'objectmodeluri']]
camel sample_5639

['protected static XPathFactory createDefaultXPathFactory() throws XPathFactoryConfigurationException {', 'XPathFactory factory = null;', 'Properties properties = System.getProperties();', 'for (Map.Entry<Object, Object> prop : properties.entrySet()) {', 'String key = (String) prop.getKey();', 'if (key.startsWith(XPathFactory.DEFAULT_PROPERTY_NAME)) {', 'String uri = ObjectHelper.after(key, ":");', 'if (uri != null) {', 'factory = XPathFactory.newInstance(uri);']
['using system property with value when created default xpathfactory ', ['new', 'object', 'key', 'uri', 'factory']]
camel sample_5639

['String key = (String) prop.getKey();', 'if (key.startsWith(XPathFactory.DEFAULT_PROPERTY_NAME)) {', 'String uri = ObjectHelper.after(key, ":");', 'if (uri != null) {', 'factory = XPathFactory.newInstance(uri);', '}', '}', '}', 'if (factory == null) {', 'factory = XPathFactory.newInstance();']
['created default xpathfactory ', ['factory']]
camel sample_5639

['public String[] doSomething(String body) {']
['received body ', ['body']]
camel sample_15738

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyFieldMethodCallRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_208

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyFieldMethodCallRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("netty-http:http: Assert.assertEquals("netty-http:http: list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_208

['protected boolean doConnect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {']
['connecting using ftpclient ', ['client']]
camel sample_15387

['protected boolean doConnect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {', 'String host = configuration.getHost();', 'int port = configuration.getPort();', 'String username = configuration.getUsername();', 'String account = ((FtpConfiguration) configuration).getAccount();', 'if (clientConfig != null) {']
['configuring ftpclient with config ', ['clientconfig']]
camel sample_15387

['protected boolean doConnect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {', 'String host = configuration.getHost();', 'int port = configuration.getPort();', 'String username = configuration.getUsername();', 'String account = ((FtpConfiguration) configuration).getAccount();', 'if (clientConfig != null) {', 'client.configure(clientConfig);', '}', 'if (log.isTraceEnabled()) {']
['connecting to using connection timeout ', ['configuration', 'remoteserverinformation', 'client', 'getconnecttimeout']]
camel sample_15387

['if (clientConfig != null) {', 'client.configure(clientConfig);', '}', 'if (log.isTraceEnabled()) {', '}', 'boolean connected = false;', 'int attempt = 0;', 'while (!connected) {', 'try {', 'if (log.isTraceEnabled() && attempt > 0) {']
['reconnect attempt connecting to ', ['attempt', 'configuration', 'remoteserverinformation']]
camel sample_15387

['} catch (Exception e) {', 'if (Thread.currentThread().isInterrupted()) {', 'throw new GenericFileOperationFailedException("Interrupted during connecting", new InterruptedException("Interrupted during connecting"));', '}', 'GenericFileOperationFailedException failed;', 'if (e instanceof GenericFileOperationFailedException) {', 'failed = (GenericFileOperationFailedException) e;', '} else {', 'failed = new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '}']
['cannot connect due ', ['failed', 'getmessage']]
camel sample_15387

['Thread.sleep(endpoint.getReconnectDelay());', '} catch (InterruptedException ie) {', 'Thread.currentThread().interrupt();', 'throw new GenericFileOperationFailedException("Interrupted during sleeping", ie);', '}', '}', '}', '}', 'clientActivityListener.onConnected(host);', 'if (configuration.isPassiveMode()) {']
['using passive mode connections ', []]
camel sample_15387

['} catch (IOException e) {', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '}', '}', '}', 'try {', 'clientActivityListener.onLogin(host);', 'boolean login;', 'if (username != null) {', 'if (account != null) {']
['attempting to login user using password and account ', ['new', 'object', 'username', 'account']]
camel sample_15387

['}', '}', '}', 'try {', 'clientActivityListener.onLogin(host);', 'boolean login;', 'if (username != null) {', 'if (account != null) {', 'login = client.login(username, configuration.getPassword(), account);', '} else {']
['attempting to login user using password ', ['username']]
camel sample_15387

['clientActivityListener.onLogin(host);', 'boolean login;', 'if (username != null) {', 'if (account != null) {', 'login = client.login(username, configuration.getPassword(), account);', '} else {', 'login = client.login(username, configuration.getPassword());', '}', '} else {', 'if (account != null) {']
['attempting to login anonymous using account ', ['account']]
camel sample_15387

['if (username != null) {', 'if (account != null) {', 'login = client.login(username, configuration.getPassword(), account);', '} else {', 'login = client.login(username, configuration.getPassword());', '}', '} else {', 'if (account != null) {', 'login = client.login("anonymous", "", account);', '} else {']
['attempting to login anonymous ', []]
camel sample_15387

['clientActivityListener.onLoginComplete(host);', 'client.setFileType(configuration.isBinary() ? FTP.BINARY_FILE_TYPE : FTP.ASCII_FILE_TYPE);', '} catch (IOException e) {', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '}', 'if (endpoint.getConfiguration().getSiteCommand() != null) {', 'Iterator<?> it = ObjectHelper.createIterator(endpoint.getConfiguration().getSiteCommand(), "\\n");', 'while (it.hasNext()) {', 'Object next = it.next();', 'String command = endpoint.getCamelContext().getTypeConverter().convertTo(String.class, next);']
['site command to send ', ['command']]
camel sample_15387

['protected void doDisconnect() throws GenericFileOperationFailedException {', 'clientActivityListener.onDisconnecting(endpoint.getConfiguration().remoteServerInformation());', 'try {']
['client logout ', []]
camel sample_15387

['protected void doDisconnect() throws GenericFileOperationFailedException {', 'clientActivityListener.onDisconnecting(endpoint.getConfiguration().remoteServerInformation());', 'try {', 'client.logout();', '} catch (IOException e) {', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '} finally {', 'try {']
['client disconnect ', []]
camel sample_15387

['public boolean deleteFile(String name) throws GenericFileOperationFailedException {']
['deleting file ', ['name']]
camel sample_15387

['if (endpoint.getConfiguration().isStepwise()) {', 'currentDir = getCurrentDirectory();', 'target = FileUtil.stripPath(name);', 'try {', 'changeCurrentDirectory(FileUtil.onlyPath(name));', '} catch (GenericFileOperationFailedException e) {', 'changeCurrentDirectory(currentDir);', 'throw e;', '}', '}']
['client deletefile ', ['target']]
camel sample_15387

['public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {']
['renaming file to ', ['from', 'to']]
camel sample_15387

['public boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {', 'directory = endpoint.getConfiguration().normalizePath(directory);']
['builddirectory ', ['directory']]
camel sample_15387

['public boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {', 'directory = endpoint.getConfiguration().normalizePath(directory);', 'try {', 'String originalDirectory = client.printWorkingDirectory();', 'boolean success;', 'try {', 'success = client.changeWorkingDirectory(directory);', 'if (!success) {']
['trying to build remote directory ', ['directory']]
camel sample_15387

['public boolean retrieveFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'clientActivityListener.setDownload(true);', 'clientActivityListener.setRemoteFileName(name);', 'clientActivityListener.setRemoteFileSize(size);', 'clientActivityListener.onBeginDownloading(endpoint.getConfiguration().remoteServerInformation(), name);', 'boolean answer;', 'try {']
['retrievefile ', ['name']]
camel sample_15387

['String remoteName = name;', 'String currentDir = null;', 'if (endpoint.getConfiguration().isStepwise()) {', 'currentDir = getCurrentDirectory();', 'String path = FileUtil.onlyPath(name);', 'if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}']
['client retrievefile ', ['remotename']]
camel sample_15387

['if (endpoint.getConfiguration().isStepwise()) {', 'currentDir = getCurrentDirectory();', 'String path = FileUtil.onlyPath(name);', 'if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}', 'if (resumeDownload && existingSize > 0) {', 'clientActivityListener.onResumeDownloading(endpoint.getConfiguration().remoteServerInformation(), name, existingSize);']
['client restartoffset ', ['existingsize']]
camel sample_15387

['if (endpoint.getConfiguration().isStepwise()) {', 'currentDir = getCurrentDirectory();', 'String path = FileUtil.onlyPath(name);', 'if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}', 'if (resumeDownload && existingSize > 0) {', 'clientActivityListener.onResumeDownloading(endpoint.getConfiguration().remoteServerInformation(), name, existingSize);']
['resuming download of file at position ', ['remotename', 'existingsize']]
camel sample_15387

['String path = FileUtil.onlyPath(name);', 'if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}', 'if (resumeDownload && existingSize > 0) {', 'clientActivityListener.onResumeDownloading(endpoint.getConfiguration().remoteServerInformation(), name, existingSize);', 'client.setRestartOffset(existingSize);', '}']
['client retrievefile ', ['remotename']]
camel sample_15387

['clientActivityListener.onResumeDownloading(endpoint.getConfiguration().remoteServerInformation(), name, existingSize);', 'client.setRestartOffset(existingSize);', '}', 'result = client.retrieveFile(remoteName, os);', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'if (endpoint.getConfiguration().isStepwise()) {', 'changeCurrentDirectory(currentDir);', '}', '} catch (IOException e) {']
['error occurred during retrieving file to local directory ', ['name']]
camel sample_15387

['client.setRestartOffset(existingSize);', '}', 'result = client.retrieveFile(remoteName, os);', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'if (endpoint.getConfiguration().isStepwise()) {', 'changeCurrentDirectory(currentDir);', '}', '} catch (IOException e) {', 'if (!resumeDownload) {']
['deleting local work file ', ['name', 'temp']]
camel sample_15387

['exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'if (endpoint.getConfiguration().isStepwise()) {', 'changeCurrentDirectory(currentDir);', '}', '} catch (IOException e) {', 'if (!resumeDownload) {', 'IOHelper.close(os, "retrieve: " + name, log);', 'boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {']
['error occurred during retrieving file to local directory cannot delete local work file ', ['name', 'temp']]
camel sample_15387

['if (!resumeDownload) {', 'IOHelper.close(os, "retrieve: " + name, log);', 'boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {', '}', '}', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '} finally {', 'IOHelper.close(os, "retrieve: " + name, log);', '}']
['retrieve file to local work file result ', ['result']]
camel sample_15387

['IOHelper.close(os, "retrieve: " + name, log);', 'boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {', '}', '}', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), e.getMessage(), e);', '} finally {', 'IOHelper.close(os, "retrieve: " + name, log);', '}', 'if (result) {']
['renaming local in progress file from to ', ['temp', 'local']]
camel sample_15387

['public boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'name = endpoint.getConfiguration().normalizePath(name);', 'clientActivityListener.setDownload(false);', 'clientActivityListener.setRemoteFileName(name);', 'clientActivityListener.setRemoteFileSize(size);', 'clientActivityListener.onBeginUploading(endpoint.getConfiguration().remoteServerInformation(), name);']
['storefile ', ['name']]
camel sample_15387

['private boolean doStoreFile(String name, String targetName, Exchange exchange) throws GenericFileOperationFailedException {']
['dostorefile ', ['targetname']]
camel sample_15387

['private boolean doStoreFile(String name, String targetName, Exchange exchange) throws GenericFileOperationFailedException {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore || endpoint.getFileExist() == GenericFileExist.Fail || endpoint.getFileExist() == GenericFileExist.Move) {', 'boolean existFile = existsFile(targetName);', 'if (existFile && endpoint.getFileExist() == GenericFileExist.Ignore) {']
['an existing file already exists ignore and do not override it ', ['name']]
camel sample_15387

['return true;', '} else if (existFile && endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + name + ". Cannot write new file.");', '} else if (existFile && endpoint.getFileExist() == GenericFileExist.Move) {', 'doMoveExistingFile(name, targetName);', '}', '}', 'InputStream is = null;', 'if (exchange.getIn().getBody() == null) {', 'if (endpoint.isAllowNullBody()) {']
['writing empty file ', []]
camel sample_15387

['is = new ByteArrayInputStream(new byte[]{});', '} else {', 'throw new GenericFileOperationFailedException("Cannot write null body to file: " + name);', '}', '}', 'try {', 'if (is == null) {', 'String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));']
['using inputstream with charset ', ['is', 'charset']]
camel sample_15387

['if (is == null) {', 'String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();', 'boolean answer;']
['about to store file using stream ', ['targetname', 'is']]
camel sample_15387

['String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();', 'boolean answer;', 'if (endpoint.getFileExist() == GenericFileExist.Append) {']
['client appendfile ', ['targetname']]
camel sample_15387

['is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();', 'boolean answer;', 'if (endpoint.getFileExist() == GenericFileExist.Append) {', 'answer = client.appendFile(targetName, is);', '} else {']
['client storefile ', ['targetname']]
camel sample_15387

['}', 'final StopWatch watch = new StopWatch();', 'boolean answer;', 'if (endpoint.getFileExist() == GenericFileExist.Append) {', 'answer = client.appendFile(targetName, is);', '} else {', 'answer = client.storeFile(targetName, is);', '}', 'if (log.isDebugEnabled()) {', 'long time = watch.taken();']
['took millis to store file and ftp client returned ', ['new', 'object', 'timeutils', 'printduration', 'time', 'time', 'targetname', 'answer']]
camel sample_15387

['} else {', 'answer = client.storeFile(targetName, is);', '}', 'if (log.isDebugEnabled()) {', 'long time = watch.taken();', '}', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'String chmod = endpoint.getConfiguration().getChmod();', 'if (ObjectHelper.isNotEmpty(chmod)) {']
['setting chmod on file ', ['chmod', 'targetname']]
camel sample_15387

['answer = client.storeFile(targetName, is);', '}', 'if (log.isDebugEnabled()) {', 'long time = watch.taken();', '}', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'String chmod = endpoint.getConfiguration().getChmod();', 'if (ObjectHelper.isNotEmpty(chmod)) {', 'String command = "chmod " + chmod + " " + targetName;']
['client sendsitecommand ', ['command']]
camel sample_15387

['}', 'if (log.isDebugEnabled()) {', 'long time = watch.taken();', '}', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE, client.getReplyCode());', 'exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING, client.getReplyString());', 'String chmod = endpoint.getConfiguration().getChmod();', 'if (ObjectHelper.isNotEmpty(chmod)) {', 'String command = "chmod " + chmod + " " + targetName;', 'boolean success = client.sendSiteCommand(command);']
['client sendsitecommand successful ', ['success']]
camel sample_15387

['to = endpoint.getConfiguration().normalizePath(to);', 'if (ObjectHelper.isEmpty(to)) {', 'throw new GenericFileOperationFailedException("moveExisting evaluated as empty String, cannot move existing file: " + name);', '}', 'String dir = FileUtil.onlyPath(to);', 'if (dir != null) {', 'buildDirectory(dir, false);', '}', 'if (existsFile(to)) {', 'if (endpoint.isEagerDeleteTargetFile()) {']
['deleting existing file ', ['to']]
camel sample_15387

['if (!result) {', 'throw new GenericFileOperationFailedException("Cannot delete file: " + to);', '}', '} catch (IOException e) {', 'throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), "Cannot delete file: " + to, e);', '}', '} else {', 'throw new GenericFileOperationFailedException("Cannot moved existing file from: " + name + " to: " + to + " as there already exists a file: " + to);', '}', '}']
['moving existing file to ', ['name', 'to']]
camel sample_15387

['public boolean existsFile(String name) throws GenericFileOperationFailedException {']
['existsfile ', ['name']]
camel sample_15387

['String[] names;', 'if (directory != null) {', 'names = client.listNames(directory);', '} else {', 'names = client.listNames();', '}', 'if (names == null) {', 'return false;', '}', 'for (String existing : names) {']
['existing file target file ', ['existing', 'name']]
camel sample_15387

['protected boolean fastExistsFile(String name) throws GenericFileOperationFailedException {']
['fastexistsfile ', ['name']]
camel sample_15387

['public String getCurrentDirectory() throws GenericFileOperationFailedException {']
['getcurrentdirectory ', []]
camel sample_15387

['public String getCurrentDirectory() throws GenericFileOperationFailedException {', 'try {', 'String answer = client.printWorkingDirectory();']
['current dir ', ['answer']]
camel sample_15387

['public void changeCurrentDirectory(String path) throws GenericFileOperationFailedException {']
['changecurrentdirectory ', ['path']]
camel sample_15387

['private void doChangeDirectory(String path) {', 'if (path == null || ".".equals(path) || ObjectHelper.isEmpty(path)) {', 'return;', '}']
['changing directory ', ['path']]
camel sample_15387

['public List<FTPFile> listFiles() throws GenericFileOperationFailedException {']
['listfiles ', []]
camel sample_15387

['public List<FTPFile> listFiles(String path) throws GenericFileOperationFailedException {']
['listfiles ', ['path']]
camel sample_15387

['public boolean sendNoop() throws GenericFileOperationFailedException {']
['sendNoOp ', []]
camel sample_15387

['public boolean sendSiteCommand(String command) throws GenericFileOperationFailedException {']
['sendsitecommand ', ['command']]
camel sample_15387

['private boolean buildDirectoryChunks(String dirName) throws IOException {', 'final StringBuilder sb = new StringBuilder(dirName.length());', 'final String[] dirs = dirName.split("/|\\\\\\\\");', 'boolean success = false;', 'for (String dir : dirs) {', "sb.append(dir).append('/');", 'String directory = endpoint.getConfiguration().normalizePath(sb.toString());', 'if (!(directory.equals("/") || directory.equals("\\\\"))) {']
['trying to build remote directory by chunk ', ['directory']]
camel sample_15387

['public void connect() {', 'if (managerConnection == null) {']
['asterisk connection attempt to username ', ['host', 'username']]
camel sample_12911

['public void connect() {', 'if (managerConnection == null) {', 'ManagerConnectionFactory factory = new ManagerConnectionFactory(host, username, password);', 'managerConnection = factory.createManagerConnection();']
['asterisk connection established ', []]
camel sample_12911

['public void addListener(ManagerEventListener listener) throws CamelAsteriskException {', 'if (managerConnection != null) {', 'managerConnection.addEventListener(listener);']
['asterisk added listener ', ['listener']]
camel sample_12911

['public void removeListener(ManagerEventListener listener) throws CamelAsteriskException {', 'if (managerConnection != null) {', 'managerConnection.removeEventListener(listener);']
['asterisk removed listener ', ['listener']]
camel sample_12911

['protected void doGetResourceQuota(Exchange exchange, String operation) throws Exception {', 'ResourceQuota rq = null;', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rqName)) {']
['get a specific resource quota require specify a resource quota name ', []]
camel sample_13253

['protected void doGetResourceQuota(Exchange exchange, String operation) throws Exception {', 'ResourceQuota rq = null;', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rqName)) {', 'throw new IllegalArgumentException( "Get a specific Resource Quota require specify a Resource Quota name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific resource quota require specify a namespace name ', []]
camel sample_13253

['protected void doCreateResourceQuota(Exchange exchange, String operation) throws Exception {', 'ResourceQuota rq = null;', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ResourceQuotaSpec rqSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCE_QUOTA_SPEC, ResourceQuotaSpec.class);', 'if (ObjectHelper.isEmpty(rqName)) {']
['create a specific resource quota require specify a resource quota name ', []]
camel sample_13253

['protected void doCreateResourceQuota(Exchange exchange, String operation) throws Exception {', 'ResourceQuota rq = null;', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ResourceQuotaSpec rqSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCE_QUOTA_SPEC, ResourceQuotaSpec.class);', 'if (ObjectHelper.isEmpty(rqName)) {', 'throw new IllegalArgumentException( "Create a specific resource quota require specify a resource quota name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific resource quota require specify a namespace name ', []]
camel sample_13253

['String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ResourceQuotaSpec rqSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCE_QUOTA_SPEC, ResourceQuotaSpec.class);', 'if (ObjectHelper.isEmpty(rqName)) {', 'throw new IllegalArgumentException( "Create a specific resource quota require specify a resource quota name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific resource quota require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(rqSpec)) {']
['create a specific resource quota require specify a resource quota spec bean ', []]
camel sample_13253

['protected void doDeleteResourceQuota(Exchange exchange, String operation) throws Exception {', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rqName)) {']
['delete a specific resource quota require specify a resource quota name ', []]
camel sample_13253

['protected void doDeleteResourceQuota(Exchange exchange, String operation) throws Exception {', 'String rqName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rqName)) {', 'throw new IllegalArgumentException( "Delete a specific resource quota require specify a resource quota name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific resource quota require specify a namespace name ', []]
camel sample_13253

['private void verifyTheRecivedEmail(String expectString) throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.assertIsSatisfied();', 'Exchange out = mock.assertExchangeReceived(0);', 'ByteArrayOutputStream baos = new ByteArrayOutputStream(((MailMessage)out.getIn()).getMessage().getSize());', '((MailMessage)out.getIn()).getMessage().writeTo(baos);', 'String dumpedMessage = baos.toString();', 'assertTrue("There should have the " + expectString, dumpedMessage.indexOf(expectString) > 0);']
['multipart alternative ', ['dumpedmessage']]
camel sample_11844

['private void executeComponent() throws MojoExecutionException, MojoFailureException {', 'List<String> componentNames = findComponentNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!componentNames.isEmpty()) {']
['found components ', ['componentnames', 'size']]
camel sample_121

['updated |= updateAvailableFrom(file, model.getFirstVersion());', 'boolean hasOptions = model.getComponentOptions().stream().anyMatch(o -> !o.getName().equals("resolvePropertyPlaceholders"));', 'if (!hasOptions) {', 'model.getComponentOptions().clear();', '}', 'String options = templateComponentOptions(model);', 'updated |= updateComponentOptions(file, options);', 'options = templateEndpointOptions(model);', 'updated |= updateEndpointOptions(file, options);', 'if (updated) {']
['updated doc file ', ['file']]
camel sample_121

['boolean hasOptions = model.getComponentOptions().stream().anyMatch(o -> !o.getName().equals("resolvePropertyPlaceholders"));', 'if (!hasOptions) {', 'model.getComponentOptions().clear();', '}', 'String options = templateComponentOptions(model);', 'updated |= updateComponentOptions(file, options);', 'options = templateEndpointOptions(model);', 'updated |= updateEndpointOptions(file, options);', 'if (updated) {', '} else if (exists) {']
['no changes to doc file ', ['file']]
camel sample_121

['if (!hasOptions) {', 'model.getComponentOptions().clear();', '}', 'String options = templateComponentOptions(model);', 'updated |= updateComponentOptions(file, options);', 'options = templateEndpointOptions(model);', 'updated |= updateEndpointOptions(file, options);', 'if (updated) {', '} else if (exists) {', '} else {']
['no component doc file ', ['file']]
camel sample_121

['private void executeDataFormat() throws MojoExecutionException, MojoFailureException {', 'List<String> dataFormatNames = findDataFormatNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!dataFormatNames.isEmpty()) {']
['found dataformats ', ['dataformatnames', 'size']]
camel sample_121

['if (deprecated) {', 'docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateDataFormatOptions(model);', 'updated |= updateDataFormatOptions(file, options);', 'if (updated) {']
['updated doc file ', ['file']]
camel sample_121

['docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateDataFormatOptions(model);', 'updated |= updateDataFormatOptions(file, options);', 'if (updated) {', '} else if (exists) {']
['no changes to doc file ', ['file']]
camel sample_121

['}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateDataFormatOptions(model);', 'updated |= updateDataFormatOptions(file, options);', 'if (updated) {', '} else if (exists) {', '} else {']
['no dataformat doc file ', ['file']]
camel sample_121

['private void executeLanguage() throws MojoExecutionException, MojoFailureException {', 'List<String> languageNames = findLanguageNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!languageNames.isEmpty()) {']
['found languages ', ['languagenames', 'size']]
camel sample_121

['if (deprecated) {', 'docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateLanguageOptions(model);', 'updated |= updateLanguageOptions(file, options);', 'if (updated) {']
['updated doc file ', ['file']]
camel sample_121

['docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateLanguageOptions(model);', 'updated |= updateLanguageOptions(file, options);', 'if (updated) {', '} else if (exists) {']
['no changes to doc file ', ['file']]
camel sample_121

['}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'updated |= updateAvailableFrom(file, model.getFirstVersion());', 'String options = templateLanguageOptions(model);', 'updated |= updateLanguageOptions(file, options);', 'if (updated) {', '} else if (exists) {', '} else {']
['no language doc file ', ['file']]
camel sample_121

['if (!currentDir.endsWith("camel-core")) {', 'return;', '}', 'final Set<File> jsonFiles = new TreeSet<File>();', 'File coreDir = new File(".");', 'if (coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes/org/apache/camel/model");', 'PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', '}', 'if (!jsonFiles.isEmpty()) {']
['found eips ', ['jsonfiles', 'size']]
camel sample_121

['boolean deprecated = model.isDeprecated();', 'if (deprecated) {', 'docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'String options = templateEipOptions(model);', 'updated |= updateEipOptions(file, options);', 'if (updated) {']
['updated doc file ', ['file']]
camel sample_121

['if (deprecated) {', 'docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'String options = templateEipOptions(model);', 'updated |= updateEipOptions(file, options);', 'if (updated) {', '} else if (exists) {']
['no changes to doc file ', ['file']]
camel sample_121

['docTitle += " (deprecated)";', '}', 'boolean exists = file.exists();', 'boolean updated;', 'updated = updateTitles(file, docTitle);', 'String options = templateEipOptions(model);', 'updated |= updateEipOptions(file, options);', 'if (updated) {', '} else if (exists) {', '} else {']
['no eip doc file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'if', 'isfailfast']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'if', 'isfailfast']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'if', 'isfailfast']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'if', 'isfailfast']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_121

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'if', 'isfailfast']]
camel sample_121

['desc = option.getDescription();', 'if (!desc.endsWith(".")) {', 'desc = desc + ". Deprecation note: " + option.getDeprecationNote();', '} else {', 'desc = desc + " Deprecation note: " + option.getDeprecationNote();', '}', 'option.setDescription(desc);', '}', '}', 'if ("id".equals(option.getName())) {']
['skipping option ', ['option', 'getname']]
camel sample_121

['desc = option.getDescription();', 'if (!desc.endsWith(".")) {', 'desc = desc + ". Deprecation note: " + option.getDeprecationNote();', '} else {', 'desc = desc + " Deprecation note: " + option.getDeprecationNote();', '}', 'option.setDescription(desc);', '}', '}', 'if ("id".equals(option.getName()) || "expression".equals(option.getName())) {']
['skipping option ', ['option', 'getname']]
camel sample_121

['desc = option.getDescription();', 'if (!desc.endsWith(".")) {', 'desc = desc + ". Deprecation note: " + option.getDeprecationNote();', '} else {', 'desc = desc + " Deprecation note: " + option.getDeprecationNote();', '}', 'option.setDescription(desc);', '}', '}', 'if ("id".equals(option.getName()) || "description".equals(option.getName()) || "expression".equals(option.getName()) || "outputs".equals(option.getName())) {']
['skipping option ', ['option', 'getname']]
camel sample_121

['private void afterBeanDiscovery(@Observes AfterBeanDiscovery abd, BeanManager manager) {', 'Set<SyntheticBean<?>> extraBeans = new HashSet<>();', 'for (ImportResource resource : resources) {', 'XmlCdiBeanFactory factory = XmlCdiBeanFactory.with(manager, environment, this);', 'for (String path : resource.value()) {', 'try {', 'extraBeans.addAll(factory.beansFrom(path));', '} catch (NoClassDefFoundError cause) {', 'if (cause.getMessage().contains("AbstractCamelContextFactoryBean")) {']
['importing camel xml requires to have the camel core xml dependency in the classpath ', []]
camel sample_9925

['return;', '}', '}', 'eagerBeans.forEach(type -> getReferencesByType(manager, type.getJavaClass(), ANY).toString());', 'manager.getBeans(Object.class, ANY, STARTUP) .forEach(bean -> getReference(manager, bean.getBeanClass(), bean).toString());', 'if (configuration.autoStartContexts()) {', 'for (CamelContext context : contexts) {', 'if (ServiceStatus.Started.equals(context.getStatus())) {', 'continue;', '}']
['camel cdi is starting camel context ', ['context', 'getname']]
camel sample_9925

['public void mapToMessage(Input input, Message output) throws Exception {', 'Node node;', 'boolean removeSignatureElements = false;', 'if (OUTPUT_NODE_SEARCH_TYPE_DEFAULT.equals(input.getOutputNodeSearchType())) {']
['searching for output node via default search ', []]
camel sample_6783

['node = input.getMessageBodyDocument().getDocumentElement();', 'removeSignatureElements = true;', '}', '} else if (OUTPUT_NODE_SEARCH_TYPE_ELEMENT_NAME.equals(input.getOutputNodeSearchType())) {', 'node = getOutputElementViaLocalNameAndNamespace(input);', '} else if (OUTPUT_NODE_SEARCH_TYPE_XPATH.equals(input.getOutputNodeSearchType())) {', 'node = getOutputNodeViaXPath(input);', '} else {', 'throw new XmlSignatureException(String.format("Wrong configuration: The output node search type %s is not supported.", input.getOutputNodeSearchType()));', '}']
['output node with local name and namespace found ', ['node', 'getlocalname', 'node', 'getnamespaceuri']]
camel sample_6783

['protected void checkSearchValueNotNull(Input input) throws Exception {']
['searching for output element with search value and sarch type ', ['input', 'getoutputnodesearch', 'input', 'getoutputnodesearchtype']]
camel sample_6783

['protected String getSameDocumentReferenceUri(Reference ref) {', 'String refUri = ref.getURI();', 'if (refUri == null) {']
['ignoring reference which has no uri ', ['ref']]
camel sample_6783

['protected String getSameDocumentReferenceUri(Reference ref) {', 'String refUri = ref.getURI();', 'if (refUri == null) {', 'return null;', '}', 'if (!refUri.startsWith("#")) {']
['ignoring non same document reference ', ['refuri']]
camel sample_6783

['private static void run(String id) {', 'try {', 'int events = ThreadLocalRandom.current().nextInt(2, 6);', 'CountDownLatch contextLatch = new CountDownLatch(events);', 'ConsulClusterService service = new ConsulClusterService();', 'service.setId("node-" + id);']
['http logger info service geturl ', ['seturl', 'string', 'format', 'consul', 'url']]
camel sample_14345

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:consul?delay=1s&period=1s") .routeId("route-" + id) .routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_14345

['public int commit(final DefaultSqlEndpoint endpoint, final Exchange exchange, final Object data, final JdbcTemplate jdbcTemplate, final String query) throws Exception {', 'final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), exchange);', 'return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {', 'int expected = ps.getParameterMetaData().getParameterCount();', 'Iterator<?> iterator = sqlPrepareStatementStrategy.createPopulateIterator(query, preparedQuery, expected, exchange, data);', 'if (iterator != null) {', 'sqlPrepareStatementStrategy.populateStatement(ps, iterator, expected);']
['execute query ', ['query']]
camel sample_9026

['final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), exchange);', 'return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {', 'int expected = ps.getParameterMetaData().getParameterCount();', 'Iterator<?> iterator = sqlPrepareStatementStrategy.createPopulateIterator(query, preparedQuery, expected, exchange, data);', 'if (iterator != null) {', 'sqlPrepareStatementStrategy.populateStatement(ps, iterator, expected);', 'ps.execute();', 'int updateCount = ps.getUpdateCount();', 'if (LOG.isTraceEnabled()) {']
['update count ', ['updatecount']]
camel sample_9026

['public int commitBatchComplete(final DefaultSqlEndpoint endpoint, final JdbcTemplate jdbcTemplate, final String query) throws Exception {', 'final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), null);', 'return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {', 'int expected = ps.getParameterMetaData().getParameterCount();', 'if (expected != 0) {', 'throw new IllegalArgumentException("Query onConsumeBatchComplete " + query + " cannot have parameters, was " + expected);', '}']
['execute query ', ['query']]
camel sample_9026

['final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), null);', 'return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {', 'int expected = ps.getParameterMetaData().getParameterCount();', 'if (expected != 0) {', 'throw new IllegalArgumentException("Query onConsumeBatchComplete " + query + " cannot have parameters, was " + expected);', '}', 'ps.execute();', 'int updateCount = ps.getUpdateCount();', 'if (LOG.isTraceEnabled()) {']
['update count ', ['updatecount']]
camel sample_9026

['contentType = exchange.getIn().getHeader(CONTENT_TYPE, String.class);', 'if (contentType == null) {', 'return stream;', '}', 'try {', 'ContentType ct = new ContentType(contentType);', 'if (!ct.match("multipart/*")) {', 'return stream;', '}', '} catch (ParseException e) {']
['invalid content type ignored ', ['contenttype']]
camel sample_11901

['bos.close();', '}', 'DataHandler dh;', 'try {', 'dh = mimeMessage.getDataHandler();', 'if (dh != null) {', 'content = dh.getContent();', 'contentType = dh.getContentType();', '}', '} catch (MessagingException e) {']
['cannot parse message no unmarshalling done ', []]
camel sample_11901

['contentType = bp.getContentType();', 'if (contentType != null && !DEFAULT_CONTENT_TYPE.equals(contentType)) {', 'camelMessage.setHeader(CONTENT_TYPE, contentType);', 'ContentType ct = new ContentType(contentType);', 'String charset = ct.getParameter("charset");', 'if (charset != null) {', 'camelMessage.setHeader(Exchange.CONTENT_ENCODING, MimeUtility.javaCharset(charset));', '}', '}', '} else {']
['no mime part found ', []]
camel sample_11901

['public void testList() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'final com.google.api.services.drive.model.PropertyList result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15411

['public static void main(String[] args) throws Exception {']
['about to run kafka camel integration ', []]
camel sample_17586

['public static void main(String[] args) throws Exception {', 'CamelContext camelContext = new DefaultCamelContext();', 'camelContext.addRoutes(new RouteBuilder() {', 'public void configure() {', 'PropertiesComponent pc = getContext().getComponent("properties", PropertiesComponent.class);', 'pc.setLocation("classpath:application.properties");']
['about to start route kafka server log ', []]
camel sample_17586

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HdfsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hdfs.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hdfs.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_434

['public abstract void run(Runnable runnable) throws Throwable;', 'public Processor wrap(RouteContext routeContext, Processor processor) {', 'JtaTransactionErrorHandler answer;', 'ErrorHandlerBuilder builder = (ErrorHandlerBuilder) routeContext.getRoute().getErrorHandlerBuilder();', 'if (builder instanceof ErrorHandlerBuilderRef) {', 'ErrorHandlerBuilderRef builderRef = (ErrorHandlerBuilderRef) builder;', 'String ref = builderRef.getRef();', 'if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {']
['looking up errorhandlerbuilder with ref ', ['ref']]
camel sample_9860

['String ref = builderRef.getRef();', 'if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {', 'builder = (ErrorHandlerBuilder) ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);', '}', '}', 'JtaTransactionErrorHandlerBuilder txBuilder;', 'if ((builder != null) && builder.supportTransacted()) {', 'if (!(builder instanceof JtaTransactionErrorHandlerBuilder)) {', 'throw new RuntimeCamelException("The given transactional error handler builder \'" + builder + "\' is not of type \'" + JtaTransactionErrorHandlerBuilder.class.getName() + "\' which is required in this environment!");', '}']
['the errorhandlerbuilder configured is a jtatransactionerrorhandlerbuilder ', ['builder']]
camel sample_9860

['builder = (ErrorHandlerBuilder) ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);', '}', '}', 'JtaTransactionErrorHandlerBuilder txBuilder;', 'if ((builder != null) && builder.supportTransacted()) {', 'if (!(builder instanceof JtaTransactionErrorHandlerBuilder)) {', 'throw new RuntimeCamelException("The given transactional error handler builder \'" + builder + "\' is not of type \'" + JtaTransactionErrorHandlerBuilder.class.getName() + "\' which is required in this environment!");', '}', 'txBuilder = (JtaTransactionErrorHandlerBuilder) builder.cloneBuilder();', '} else {']
['no or no transactional errorhandlerbuilder configured will use default jtatransactionerrorhandlerbuilder settings ', []]
camel sample_9860

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_13896

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';"]
['sending with id ', ['value', 'id']]
camel sample_13896

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'template.sendBodyAndHeader("seda:start?size=" + SIZE, value, "id", "" + id);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_13896

['public Message toCamelMessage(Request request, Exchange exchange, SparkConfiguration configuration) throws Exception {']
['tocamelmessage ', ['request']]
camel sample_7612

['public void toSparkResponse(Message message, Response response, SparkConfiguration configuration) throws Exception {']
['tosparkresponse ', ['message']]
camel sample_7612

['public void toSparkResponse(Message message, Response response, SparkConfiguration configuration) throws Exception {', 'boolean failed = message.getExchange().isFailed();', 'int defaultCode = failed ? 500 : 200;', 'int code = message.getHeader(Exchange.HTTP_RESPONSE_CODE, defaultCode, int.class);', 'response.status(code);']
['http status code ', ['code']]
camel sample_7612

['String headerValue = tc.convertTo(String.class, it.next());', 'if (headerValue != null && headerFilterStrategy != null && !headerFilterStrategy.applyFilterToCamelHeaders(key, headerValue, message.getExchange())) {', 'LOG.trace("HTTP-Header: {}={}", key, headerValue);', 'response.header(key, headerValue);', '}', '}', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'response.header(Exchange.CONTENT_TYPE, contentType);']
['content type ', ['contenttype']]
camel sample_7612

['public void setUp() throws Exception {', 'log.info("*******************************************************************");']
['test ', ['testname', 'getmethodname']]
camel sample_12511

['server = new Server(PORT);', 'port = PORT;', 'ServletContextHandler servletContext = new ServletContextHandler(ServletContextHandler.SESSIONS);', 'servletContext.setSecurityHandler(basicAuth("camel", "camelPass", "Private!"));', 'servletContext.setContextPath("/");', 'server.setHandler(servletContext);', 'servletContext.addServlet(new ServletHolder(new MyHttpServlet()), "/*");', 'try {', 'server.start();', '} catch (Exception ex) {']
['could not start server ', ['ex']]
camel sample_7242

['public void stopServer() {', 'if (server != null) {', 'try {', 'server.stop();', '} catch (Exception ex) {']
['server doesn t stop normal ', ['ex']]
camel sample_7242

['public static void main(String[] args) throws Exception {', 'try {', 'overrideLoggingConfig();', 'SpringApplication.run(ITestApplication.class, args);', '} catch (Throwable t) {']
['error while executing test ', ['t']]
camel sample_6003

['public List<ServiceDefinition> getServices(String name) {']
['discovering endpoints from namespace with name ', ['getnamespace', 'name']]
camel sample_13300

['public List<ServiceDefinition> getServices(String name) {', 'Endpoints endpoints = client.endpoints().inNamespace(getNamespace()).withName(name).get();', 'List<ServiceDefinition> result = new ArrayList<>();', 'if (endpoints != null) {', 'if (LOG.isDebugEnabled()) {']
['found endpoints in namespace for name and portname ', ['endpoints', 'getsubsets', 'size', 'getnamespace', 'name', 'getportname']]
camel sample_13300

['context.addService(service);', 'context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:file-lock?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_2943

['if (!getEndpoint().isUsePersist()) {', 'exchange.getIn().setBody(managedEntity);', '}', '}', 'if (getEndpoint().isFlushOnSend()) {', 'entityManager.flush();', '}', 'return null;', '}', 'private Object save(final Object entity) {']
['save ', ['entity']]
camel sample_14095

['}', 'private Object save(final Object entity) {', 'if (getEndpoint().isUsePersist()) {', 'entityManager.persist(entity);', 'return entity;', '} else {', 'return entityManager.merge(entity);', '}', '}', 'private Object remove(final Object entity) {']
['remove ', ['entity']]
camel sample_14095

['protected void doStart() throws Exception {']
['starting kafka consumer on topic with breakonfirsterror ', ['endpoint', 'getconfiguration', 'gettopic', 'endpoint', 'getconfiguration', 'isbreakonfirsterror']]
camel sample_16417

['protected void doStop() throws Exception {']
['stopping kafka consumer on topic ', ['endpoint', 'getconfiguration', 'gettopic']]
camel sample_16417

['public void run() {', 'boolean first = true;', 'boolean reConnect = true;', 'while (reConnect) {', 'try {', 'if (!first) {', 'doInit();', '}', '} catch (Throwable e) {']
['error creating org apache kafka clients consumer kafkaconsumer due ', ['e', 'getmessage', 'e']]
camel sample_16417

['boolean reConnect = true;', 'while (reConnect) {', 'try {', 'if (!first) {', 'doInit();', '}', '} catch (Throwable e) {', '}', 'if (!first) {', 'long delay = endpoint.getConfiguration().getPollTimeoutMs();']
['reconnecting to topic after ms ', ['threadid', 'topicname', 'delay']]
camel sample_16417

['protected boolean doRun() {', 'boolean reConnect = false;', 'boolean unsubscribing = false;', 'try {', 'if (topicPattern != null) {']
['subscribing to topic pattern ', ['threadid', 'topicname']]
camel sample_16417

['protected boolean doRun() {', 'boolean reConnect = false;', 'boolean unsubscribing = false;', 'try {', 'if (topicPattern != null) {', 'consumer.subscribe(topicPattern, this);', '} else {']
['subscribing to topic ', ['threadid', 'topicname']]
camel sample_16417

['} else {', 'consumer.subscribe(Arrays.asList(topicName.split(",")));', '}', 'StateRepository<String, String> offsetRepository = endpoint.getConfiguration().getOffsetRepository();', 'if (offsetRepository != null) {', 'ConsumerRecords poll = consumer.poll(100);', 'for (TopicPartition topicPartition : (Set<TopicPartition>) consumer.assignment()) {', 'String offsetState = offsetRepository.getState(serializeOffsetKey(topicPartition));', 'if (offsetState != null && !offsetState.isEmpty()) {', 'long offset = deserializeOffsetValue(offsetState) + 1;']
['resuming partition from offset from state ', ['topicpartition', 'partition', 'offset']]
camel sample_16417

['ConsumerRecords poll = consumer.poll(100);', 'for (TopicPartition topicPartition : (Set<TopicPartition>) consumer.assignment()) {', 'String offsetState = offsetRepository.getState(serializeOffsetKey(topicPartition));', 'if (offsetState != null && !offsetState.isEmpty()) {', 'long offset = deserializeOffsetValue(offsetState) + 1;', 'consumer.seek(topicPartition, offset);', '} else {', 'List<ConsumerRecord<Object, Object>> partitionRecords = poll.records(topicPartition);', 'if (!partitionRecords.isEmpty()) {', 'long offset = partitionRecords.get(0).offset();']
['resuming partition from offset ', ['topicpartition', 'partition', 'offset']]
camel sample_16417

['} else {', 'List<ConsumerRecord<Object, Object>> partitionRecords = poll.records(topicPartition);', 'if (!partitionRecords.isEmpty()) {', 'long offset = partitionRecords.get(0).offset();', 'consumer.seek(topicPartition, offset);', '}', '}', '}', '} else if (endpoint.getConfiguration().getSeekTo() != null) {', 'if (endpoint.getConfiguration().getSeekTo().equals("beginning")) {']
['is seeking to the beginning on topic ', ['threadid', 'topicname']]
camel sample_16417

['long offset = partitionRecords.get(0).offset();', 'consumer.seek(topicPartition, offset);', '}', '}', '}', '} else if (endpoint.getConfiguration().getSeekTo() != null) {', 'if (endpoint.getConfiguration().getSeekTo().equals("beginning")) {', 'consumer.poll(100);', 'consumer.seekToBeginning(consumer.assignment());', '} else if (endpoint.getConfiguration().getSeekTo().equals("end")) {']
['is seeking to the end on topic ', ['threadid', 'topicname']]
camel sample_16417

['if (endpoint.getConfiguration().getSeekTo().equals("beginning")) {', 'consumer.poll(100);', 'consumer.seekToBeginning(consumer.assignment());', '} else if (endpoint.getConfiguration().getSeekTo().equals("end")) {', 'consumer.poll(100);', 'consumer.seekToEnd(consumer.assignment());', '}', '}', 'while (isRunAllowed() && !reConnect && !isStoppingOrStopped() && !isSuspendingOrSuspended()) {', 'boolean breakOnErrorHit = false;']
['polling from topic with timeout ', ['threadid', 'topicname', 'polltimeoutms']]
camel sample_16417

['KafkaManualCommit manual = endpoint.getComponent().getKafkaManualCommitFactory().newInstance(exchange, consumer, topicName, threadId, offsetRepository, partition, partitionLastOffset);', 'exchange.getIn().setHeader(KafkaConstants.MANUAL_COMMIT, manual);', '}', 'try {', 'processor.process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'if (exchange.getException() != null) {', 'if (endpoint.getConfiguration().isBreakOnFirstError()) {']
['error during processing from topic will seek consumer to offset and re connect and start polling again ', ['exchange', 'topicname', 'partitionlastoffset']]
camel sample_16417

['}', '}', '}', 'if (breakOnErrorHit) {', 'reConnect = true;', '}', '}', 'if (!reConnect) {', 'if (isAutoCommitEnabled()) {', 'if ("async".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {']
['auto commitasync on stop from topic ', ['threadid', 'topicname']]
camel sample_16417

['}', 'if (breakOnErrorHit) {', 'reConnect = true;', '}', '}', 'if (!reConnect) {', 'if (isAutoCommitEnabled()) {', 'if ("async".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {', 'consumer.commitAsync();', '} else if ("sync".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {']
['auto commitsync on stop from topic ', ['threadid', 'topicname']]
camel sample_16417

['}', 'if (!reConnect) {', 'if (isAutoCommitEnabled()) {', 'if ("async".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {', 'consumer.commitAsync();', '} else if ("sync".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {', 'consumer.commitSync();', '}', '}', '}']
['unsubscribing from topic ', ['threadid', 'topicname']]
camel sample_16417

['consumer.commitAsync();', '} else if ("sync".equals(endpoint.getConfiguration().getAutoCommitOnStop())) {', 'consumer.commitSync();', '}', '}', '}', 'unsubscribing = true;', 'consumer.unsubscribe();', '} catch (InterruptException e) {', 'getExceptionHandler().handleException("Interrupted while consuming " + threadId + " from kafka topic", e);']
['unsubscribing from topic ', ['threadid', 'topicname']]
camel sample_16417

['unsubscribing = true;', 'consumer.unsubscribe();', '} catch (InterruptException e) {', 'getExceptionHandler().handleException("Interrupted while consuming " + threadId + " from kafka topic", e);', 'consumer.unsubscribe();', 'Thread.currentThread().interrupt();', '} catch (KafkaException e) {', 'if (unsubscribing) {', 'getExceptionHandler().handleException("Error unsubscribing " + threadId + " from kafka topic " + topicName, e);', '} else {']
['kafkaexception consuming from topic will attempt to re connect on next run ', ['threadid', 'topicname']]
camel sample_16417

['Thread.currentThread().interrupt();', '} catch (KafkaException e) {', 'if (unsubscribing) {', 'getExceptionHandler().handleException("Error unsubscribing " + threadId + " from kafka topic " + topicName, e);', '} else {', 'reConnect = true;', '}', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error consuming " + threadId + " from kafka topic", e);', '} finally {']
['closing ', ['threadid']]
camel sample_16417

['private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {', 'if (partitionLastOffset != -1) {', 'if (offsetRepository != null) {']
['saving offset repository state from topic with offset ', ['threadid', 'topicname', 'partitionlastoffset']]
camel sample_16417

['private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {', 'if (partitionLastOffset != -1) {', 'if (offsetRepository != null) {', 'offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));', '} else if (forceCommit) {']
['forcing commitsync from topic with offset ', ['threadid', 'topicname', 'partitionlastoffset']]
camel sample_16417

['private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {', 'if (partitionLastOffset != -1) {', 'if (offsetRepository != null) {', 'offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));', '} else if (forceCommit) {', 'consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)));', '} else if (endpoint.getConfiguration().isAutoCommitEnable() != null && !endpoint.getConfiguration().isAutoCommitEnable()) {']
['auto commitsync from topic with offset ', ['threadid', 'topicname', 'partitionlastoffset']]
camel sample_16417

['public void onPartitionsRevoked(Collection<TopicPartition> partitions) {']
['onpartitionsrevoked from topic ', ['threadid', 'topicname']]
camel sample_16417

['public void onPartitionsRevoked(Collection<TopicPartition> partitions) {', 'StateRepository<String, String> offsetRepository = endpoint.getConfiguration().getOffsetRepository();', 'if (offsetRepository != null) {', 'for (TopicPartition partition : partitions) {', 'long offset = consumer.position(partition);']
['saving offset repository state from topic with offset ', ['threadid', 'topicname', 'offset']]
camel sample_16417

['public void onPartitionsAssigned(Collection<TopicPartition> partitions) {']
['onpartitionsassigned from topic ', ['threadid', 'topicname']]
camel sample_16417

['public void onPartitionsAssigned(Collection<TopicPartition> partitions) {', 'StateRepository<String, String> offsetRepository = endpoint.getConfiguration().getOffsetRepository();', 'if (offsetRepository != null) {', 'for (TopicPartition partition : partitions) {', 'String offsetState = offsetRepository.getState(serializeOffsetKey(partition));', 'if (offsetState != null && !offsetState.isEmpty()) {', 'long offset = deserializeOffsetValue(offsetState) + 1;']
['resuming partition from offset from state ', ['partition', 'partition', 'offset']]
camel sample_16417

['public void index(Exchange exchange) throws Exception {']
['indexing ', ['exchange']]
camel sample_6845

['private void add(String field, String value, boolean analyzed) throws IOException {', 'if (LOG.isTraceEnabled()) {']
['adding field ', ['field']]
camel sample_6845

['private void add(String field, String value, boolean analyzed) throws IOException {', 'if (LOG.isTraceEnabled()) {']
['value ', ['value']]
camel sample_6845

['private void add(File file) throws IOException {', 'if (file.canRead()) {', 'if (file.isDirectory()) {', 'String[] files = file.list();', 'if (files != null) {', 'for (String child : files) {', 'add(new File(file.getAbsolutePath() + "/" + child));', '}', '}', '} else {']
['adding ', ['file']]
camel sample_6845

['if (files != null) {', 'for (String child : files) {', 'add(new File(file.getAbsolutePath() + "/" + child));', '}', '}', '} else {', 'openIndexWriter();', 'add("path", file.getPath(), false);', 'add("contents", new String(IOConverter.toByteArray(file)), true);', 'closeIndexWriter();']
['added successfully ', ['file']]
camel sample_6845

['add(new File(file.getAbsolutePath() + "/" + child));', '}', '}', '} else {', 'openIndexWriter();', 'add("path", file.getPath(), false);', 'add("contents", new String(IOConverter.toByteArray(file)), true);', 'closeIndexWriter();', '}', '} else {']
['directory file could not be read this directory will not be indexed please check permissions and rebuild indexes ', ['file', 'getabsolutepath']]
camel sample_6845

['if (ftpClientConfig == null) {', 'ftpClientConfig = new FTPClientConfig();', '}', 'Map<String, Object> localConfigParameters = new HashMap<String, Object>(ftpClientConfigParameters);', 'setProperties(ftpClientConfig, localConfigParameters);', '}', 'if (dataTimeout > 0) {', 'client.setDataTimeout(dataTimeout);', '}', 'if (log.isDebugEnabled()) {']
['created ftpclient connecttimeout sotimeout datatimeout buffersize receivedatasocketbuffersize senddatasocketbuffersize ', ['new', 'object', 'client', 'getconnecttimeout', 'getsotimeout', 'datatimeout', 'client', 'getbuffersize', 'client', 'getreceivedatasocketbuffersize', 'client', 'getsenddatasocketbuffersize', 'client']]
camel sample_15391

['exp = getEndpoint().getLanguage().createExpression(script);', 'getEndpoint().setContentResolvedFromResource(true);', 'if (getEndpoint().isCacheScript()) {', 'getEndpoint().setExpression(exp);', '}', '}', 'Object result;', 'if (exp != null) {', 'try {', 'result = exp.evaluate(exchange, Object.class);']
['evaluated expression as with ', ['result', 'exchange']]
camel sample_4878

['public void testQuartz() throws Exception {', 'resultEndpoint = getMockEndpoint("mock:result");', 'resultEndpoint.expectedMessageCount(2);', 'resultEndpoint.message(0).header("triggerName").isEqualTo("myTimerName");', 'resultEndpoint.message(0).header("triggerGroup").isEqualTo("myGroup");', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'Message in = exchange.getIn();']
['received with headers ', ['in', 'in', 'getheaders']]
camel sample_14979

['private void dispatchExchange(Object response) throws CamelException {']
['consumer dispatching the received notification along the route ', []]
camel sample_8508

['public void processRequest(RequestEvent requestReceivedEvent) {', 'Request request = requestReceivedEvent.getRequest();', 'ServerTransaction serverTransactionId = requestReceivedEvent .getServerTransaction();', 'String viaBranch = ((ViaHeader)(request.getHeaders(ViaHeader.NAME).next())).getParameter("branch");']
['request ', ['request', 'getmethod']]
camel sample_8508

['public void processRequest(RequestEvent requestReceivedEvent) {', 'Request request = requestReceivedEvent.getRequest();', 'ServerTransaction serverTransactionId = requestReceivedEvent .getServerTransaction();', 'String viaBranch = ((ViaHeader)(request.getHeaders(ViaHeader.NAME).next())).getParameter("branch");']
['server transaction id ', ['servertransactionid']]
camel sample_8508

['public void processRequest(RequestEvent requestReceivedEvent) {', 'Request request = requestReceivedEvent.getRequest();', 'ServerTransaction serverTransactionId = requestReceivedEvent .getServerTransaction();', 'String viaBranch = ((ViaHeader)(request.getHeaders(ViaHeader.NAME).next())).getParameter("branch");']
['received from branch ', ['viabranch']]
camel sample_8508

['public synchronized void processNotify(RequestEvent requestEvent, ServerTransaction serverTransactionId) {']
['notification received at subscriber ', []]
camel sample_8508

['public synchronized void processNotify(RequestEvent requestEvent, ServerTransaction serverTransactionId) {', 'SipProvider provider = (SipProvider) requestEvent.getSource();', 'Request notify = requestEvent.getRequest();', 'try {', 'if (serverTransactionId == null) {']
['servertransaction is null creating new server transaction ', []]
camel sample_8508

['Dialog dialog = serverTransactionId.getDialog();', 'if (dialog != subscriberDialog) {', 'forkedDialog = dialog;', '}', 'dispatchExchange(notify.getContent());', 'Response response = sipSubscriber.getConfiguration().getMessageFactory().createResponse(200, notify);', 'response.addHeader(sipSubscriber.getConfiguration().getContactHeader());', 'serverTransactionId.sendResponse(response);', 'SubscriptionStateHeader subscriptionState = (SubscriptionStateHeader) notify .getHeader(SubscriptionStateHeader.NAME);', 'if (subscriptionState.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {']
['subscription state is terminated deleting the current dialog ', []]
camel sample_8508

['}', 'dispatchExchange(notify.getContent());', 'Response response = sipSubscriber.getConfiguration().getMessageFactory().createResponse(200, notify);', 'response.addHeader(sipSubscriber.getConfiguration().getContactHeader());', 'serverTransactionId.sendResponse(response);', 'SubscriptionStateHeader subscriptionState = (SubscriptionStateHeader) notify .getHeader(SubscriptionStateHeader.NAME);', 'if (subscriptionState.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {', 'dialog.delete();', '}', '} catch (Exception e) {']
['exception thrown during notify processing in the sipsubscriptionlistener ', ['e']]
camel sample_8508

['public void processResponse(ResponseEvent responseReceivedEvent) {']
['response received at subscriber ', []]
camel sample_8508

['public void processResponse(ResponseEvent responseReceivedEvent) {', 'Response response = responseReceivedEvent.getResponse();', 'Transaction clientTransactionId = responseReceivedEvent.getClientTransaction();']
['response received with client transaction id ', ['clienttransactionid', 'response', 'getstatuscode']]
camel sample_8508

['public void processResponse(ResponseEvent responseReceivedEvent) {', 'Response response = responseReceivedEvent.getResponse();', 'Transaction clientTransactionId = responseReceivedEvent.getClientTransaction();', 'if (clientTransactionId == null) {', 'if (LOG.isWarnEnabled()) {']
['stray response dropping ', []]
camel sample_8508

['public void processIOException(IOExceptionEvent exceptionEvent) {', 'if (LOG.isWarnEnabled()) {']
['ioexceptionevent received at sip subscription listener ', []]
camel sample_8508

['public void processTransactionTerminated( TransactionTerminatedEvent transactionTerminatedEvent) {', 'if (LOG.isWarnEnabled()) {']
['transactionterminatedevent received at sip subscription listener ', []]
camel sample_8508

['public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {', 'if (LOG.isWarnEnabled()) {']
['timeoutevent received at sip subscription listener ', []]
camel sample_8508

['public void testJaxrsAsyncRelayRoute() throws Exception {', 'final Main main = new Main();', 'try {', 'main.setApplicationContextUri("org/apache/camel/component/cxf/jaxrs/CxfRsSpringAsyncRelay.xml");', 'main.start();', 'Thread t = new Thread(new Runnable() {', 'public void run() {', 'try {', 'JAXRSClientFactory.create("http: .upload(CamelRouteBuilder.class.getResourceAsStream(SAMPLE_CONTENT_PATH), SAMPLE_NAME);', '} catch (Exception e) {']
['error uploading to http ', []]
camel sample_7887

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<SqlLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.sql.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.sql.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_567

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'getContext().setHandleFault(true);']
['mock error ', ['deadletterchannel', 'maximumredeliveries', 'logginglevel', 'logginglevel', 'debug']]
camel sample_2369

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JCacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jcache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jcache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_588

['public Optional<CamelClusterMember> getLeader() {', 'if (leaderSelector == null || isStoppingOrStopped()) {', 'return Optional.empty();', '}', 'try {', 'Participant participant = leaderSelector.getLeader();', 'return ObjectHelper.equal(participant.getId(), localMember.getId()) ? Optional.of(localMember) : Optional.of(new CuratorClusterMember(participant));', '} catch (KeeperException.NoNodeException e) {']
['failed to get get master because node does not yet exist error ', ['configuration', 'getbasepath', 'e', 'getmessage']]
camel sample_12638

['public List<CamelClusterMember> getMembers() {', 'if (leaderSelector == null) {', 'return Collections.emptyList();', '}', 'try {', 'return leaderSelector.getParticipants() .stream() .map(CuratorClusterMember::new) .collect(Collectors.toList());', '} catch (KeeperException.NoNodeException e) {']
['failed to get members because node does not yet exist error ', ['configuration', 'getbasepath', 'e', 'getmessage']]
camel sample_12638

['public Consumer createConsumer(CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {', 'RestConfiguration config = configuration;', 'if (config == null) {', 'config = getCamelContext().getRestConfiguration("coap", true);', '}', 'if (config.isEnableCORS()) {']
['cors configuration will be ignored as cors is not supported by the coap component ', []]
camel sample_16381

['MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class);', 'mockEndpoint.expectedMessageCount(1);', 'template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_12815

['template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();', 'checkHeaders(headers);', 'String body = in.getBody(String.class);']
['body ', ['body']]
camel sample_12815

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'Request request = getEndpoint().getBinding().prepareRequest(getEndpoint(), exchange);']
['executing request ', ['request']]
camel sample_16505

['public void onThrowable(Throwable t) {', 'if (log.isTraceEnabled()) {']
['onthrowable ', ['exchange', 'getexchangeid', 't']]
camel sample_16505

['public Exchange onCompleted() throws Exception {', 'if (log.isTraceEnabled()) {']
['oncompleted ', ['exchange', 'getexchangeid']]
camel sample_16505

['public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {', 'os.write(bodyPart.getBodyPartBytes());', 'if (log.isTraceEnabled()) {']
['onbodypartreceived bytes ', ['exchange', 'getexchangeid', 'bodypart', 'length']]
camel sample_16505

['public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {', 'if (log.isTraceEnabled()) {']
['onstatusreceived ', ['exchange', 'getexchangeid', 'responsestatus']]
camel sample_16505

['public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {', 'if (log.isTraceEnabled()) {']
['onheadersreceived ', ['exchange', 'getexchangeid', 'headers']]
camel sample_16505

['public void setUp() throws Exception {', 'log.info("********************************************************************************");']
['testing ', ['gettestmethodname', 'getclass', 'getname']]
camel sample_11690

['private void doSetUp() throws Exception {']
['setup test ', []]
camel sample_11690

['}', 'pattern = isMockEndpointsAndSkip();', 'if (pattern != null) {', 'context.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(pattern, true));', '}', 'context.getComponent("properties", PropertiesComponent.class);', 'postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {']
['using created route builder ', ['builder']]
camel sample_11690

['}', 'context.getComponent("properties", PropertiesComponent.class);', 'postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['skipping starting camelcontext as system property skipstartingcamelcontext is set to be true ', []]
camel sample_11690

['context.getComponent("properties", PropertiesComponent.class);', 'postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {']
['skipping starting camelcontext as isuseadvicewith is set to true ', []]
camel sample_11690

['for (RoutesBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {', '} else {', 'startCamelContext();', '}', '} else {']
['using route builder from the created context ', ['context']]
camel sample_11690

['context.addRoutes(builder);', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {', '} else {', 'startCamelContext();', '}', '} else {', '}']
['routing rules are ', ['context', 'getroutes']]
camel sample_11690

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");']
['testing done ', ['gettestmethodname', 'getclass', 'getname']]
camel sample_11690

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");']
['took millis ', ['timeutils', 'printduration', 'time', 'time']]
camel sample_11690

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");', 'log.info("********************************************************************************");', 'if (isCreateCamelContextPerClass()) {', 'return;', '}']
['teardown test ', []]
camel sample_11690

['public static void tearDownAfterClass() throws Exception {', 'INIT.remove();']
['teardownafterclass test ', []]
camel sample_11690

['protected Context createJndiContext() throws Exception {', 'Properties properties = new Properties();', 'InputStream in = getClass().getClassLoader().getResourceAsStream("jndi.properties");', 'if (in != null) {']
['using jndi properties from classpath root ', []]
camel sample_11690

['protected void sendMessagesTo(String endpointName, int count) throws InterruptedException {', 'MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class);', 'mockEndpoint.expectedMessageCount(count);', 'for (int i = 0; i < count; i++) {', 'template.sendBody(endpointName, null);', '}', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'String body = exchange.getIn().getBody(String.class);']
['body ', ['body']]
camel sample_10982

['ObjectHelper.notEmpty(message, "message", this);', 'Expression exp = routeContext.getCamelContext().resolveLanguage("simple").createExpression(message);', 'Logger logger = this.getLogger();', 'if (logger == null && ObjectHelper.isNotEmpty(loggerRef)) {', 'logger = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), loggerRef, Logger.class);', '}', 'if (logger == null) {', 'Map<String, Logger> availableLoggers = routeContext.lookupByType(Logger.class);', 'if (availableLoggers.size() == 1) {', 'logger = availableLoggers.values().iterator().next();']
['using custom logger ', ['logger']]
camel sample_5228

['Expression exp = routeContext.getCamelContext().resolveLanguage("simple").createExpression(message);', 'Logger logger = this.getLogger();', 'if (logger == null && ObjectHelper.isNotEmpty(loggerRef)) {', 'logger = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), loggerRef, Logger.class);', '}', 'if (logger == null) {', 'Map<String, Logger> availableLoggers = routeContext.lookupByType(Logger.class);', 'if (availableLoggers.size() == 1) {', 'logger = availableLoggers.values().iterator().next();', '} else if (availableLoggers.size() > 1) {']
['more than one instance found in the registry falling back to create logger by name ', ['logger', 'class', 'getname']]
camel sample_5228

['if (availableLoggers.size() == 1) {', 'logger = availableLoggers.values().iterator().next();', '} else if (availableLoggers.size() > 1) {', '}', '}', 'if (logger == null) {', 'String name = getLogName();', 'if (name == null) {', 'name = routeContext.getCamelContext().getGlobalOption(Exchange.LOG_EIP_NAME);', 'if (name != null) {']
['using logname from camelcontext properties ', ['name']]
camel sample_5228

['}', 'if (logger == null) {', 'String name = getLogName();', 'if (name == null) {', 'name = routeContext.getCamelContext().getGlobalOption(Exchange.LOG_EIP_NAME);', 'if (name != null) {', '}', '}', 'if (name == null) {', 'name = routeContext.getRoute().getId();']
['logname is not configured using route id as logname ', ['name']]
camel sample_5228

['private void writeSlowFile() throws Exception {']
['writing slow file ', []]
camel sample_15329

['private void writeSlowFile() throws Exception {', 'createDirectory(FTP_ROOT_DIR + "/");', 'FileOutputStream fos = new FileOutputStream(FTP_ROOT_DIR + "/slowfile.dat", true);', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());']
['writing line ', ['i']]
camel sample_15329

['private void writeSlowFile() throws Exception {', 'createDirectory(FTP_ROOT_DIR + "/");', 'FileOutputStream fos = new FileOutputStream(FTP_ROOT_DIR + "/slowfile.dat", true);', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());', 'Thread.sleep(200);', '}', 'fos.flush();', 'fos.close();']
['writing slow file done ', []]
camel sample_15329

['public void execute() throws MojoExecutionException, MojoFailureException {', 'CamelCatalog catalog = new DefaultCamelCatalog();', 'catalog.addComponent("activemq", "org.apache.activemq.camel.component.ActiveMQComponent");', 'catalog.setSuggestionStrategy(new LuceneSuggestionStrategy());', 'catalog.setVersionManager(new MavenVersionManager());', 'catalog.enableCache();', 'String detectedVersion = findCamelVersion(project);', 'if (detectedVersion != null) {']
['detected camel version used in project ', ['detectedversion']]
camel sample_69

['catalog.setSuggestionStrategy(new LuceneSuggestionStrategy());', 'catalog.setVersionManager(new MavenVersionManager());', 'catalog.enableCache();', 'String detectedVersion = findCamelVersion(project);', 'if (detectedVersion != null) {', '}', 'if (downloadVersion) {', 'String catalogVersion = catalog.getCatalogVersion();', 'String version = findCamelVersion(project);', 'if (version != null && !version.equals(catalogVersion)) {']
['downloading camel version ', ['version']]
camel sample_69

['catalog.enableCache();', 'String detectedVersion = findCamelVersion(project);', 'if (detectedVersion != null) {', '}', 'if (downloadVersion) {', 'String catalogVersion = catalog.getCatalogVersion();', 'String version = findCamelVersion(project);', 'if (version != null && !version.equals(catalogVersion)) {', 'boolean loaded = catalog.loadVersion(version);', 'if (!loaded) {']
['error downloading camel version ', ['version']]
camel sample_69

['if (downloadVersion) {', 'String catalogVersion = catalog.getCatalogVersion();', 'String version = findCamelVersion(project);', 'if (version != null && !version.equals(catalogVersion)) {', 'boolean loaded = catalog.loadVersion(version);', 'if (!loaded) {', '}', '}', '}', 'if (catalog.getLoadedVersion() != null) {']
['validating using downloaded camel version ', ['catalog', 'getloadedversion']]
camel sample_69

['String catalogVersion = catalog.getCatalogVersion();', 'String version = findCamelVersion(project);', 'if (version != null && !version.equals(catalogVersion)) {', 'boolean loaded = catalog.loadVersion(version);', 'if (!loaded) {', '}', '}', '}', 'if (catalog.getLoadedVersion() != null) {', '} else {']
['validating using camel version ', ['catalog', 'getcatalogversion']]
camel sample_69

['RouteBuilderParser.parseRouteBuilderEndpoints(clazz, baseDir, fqn, fileEndpoints, unparsable, includeTest);', 'RouteBuilderParser.parseRouteBuilderSimpleExpressions(clazz, baseDir, fqn, fileSimpleExpressions);', 'if (duplicateRouteId) {', 'RouteBuilderParser.parseRouteBuilderRouteIds(clazz, baseDir, fqn, fileRouteIds);', '}', 'endpoints.addAll(fileEndpoints);', 'simpleExpressions.addAll(fileSimpleExpressions);', 'routeIds.addAll(fileRouteIds);', 'if (logUnparseable && !unparsable.isEmpty()) {', 'for (String uri : unparsable) {']
['cannot parse endpoint uri in java file ', ['uri', 'file']]
camel sample_69

['}', 'endpoints.addAll(fileEndpoints);', 'simpleExpressions.addAll(fileSimpleExpressions);', 'routeIds.addAll(fileRouteIds);', 'if (logUnparseable && !unparsable.isEmpty()) {', 'for (String uri : unparsable) {', '}', '}', '}', '} catch (Exception e) {']
['error parsing java file code due ', ['file', 'e', 'getmessage', 'e']]
camel sample_69

['is.close();', 'if (duplicateRouteId) {', 'is = new FileInputStream(file);', 'XmlRouteParser.parseXmlRouteRouteIds(is, baseDir, fqn, fileRouteIds);', 'is.close();', '}', 'endpoints.addAll(fileEndpoints);', 'simpleExpressions.addAll(fileSimpleExpressions);', 'routeIds.addAll(fileRouteIds);', '} catch (Exception e) {']
['error parsing xml file code due ', ['file', 'e', 'getmessage', 'e']]
camel sample_69

['simpleExpressions.addAll(fileSimpleExpressions);', 'routeIds.addAll(fileRouteIds);', '} catch (Exception e) {', '}', '}', '}', 'int endpointErrors = 0;', 'int unknownComponents = 0;', 'int incapableErrors = 0;', 'for (CamelEndpointDetails detail : endpoints) {']
['validating endpoint ', ['detail', 'getendpointuri']]
camel sample_69

['if (endpointErrors > 0) {', 'getLog().warn(endpointSummary);', '} else {', 'getLog().info(endpointSummary);', '}', 'int simpleErrors = 0;', 'for (CamelSimpleExpressionDetails detail : simpleExpressions) {', 'SimpleValidationResult result;', 'boolean predicate = detail.isPredicate();', 'if (predicate) {']
['validating simple predicate ', ['detail', 'getsimple']]
camel sample_69

['} else {', 'getLog().info(endpointSummary);', '}', 'int simpleErrors = 0;', 'for (CamelSimpleExpressionDetails detail : simpleExpressions) {', 'SimpleValidationResult result;', 'boolean predicate = detail.isPredicate();', 'if (predicate) {', 'result = catalog.validateSimplePredicate(detail.getSimple());', '} else {']
['validating simple expression ', ['detail', 'getsimple']]
camel sample_69

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<EventComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-event.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-event.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_619

['public void testProcessor() throws Exception {', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < size; i++) {', 'Object out = template.requestBody("direct:a", "" + i);', 'assertEquals("Bye " + i, out);', '}']
['processor took ms ', ['watch', 'taken']]
camel sample_3313

['public void testBean() throws Exception {', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < size; i++) {', 'Object out = template.requestBody("direct:b", "" + i);', 'assertEquals("Bye " + i, out);', '}']
['bean took ms ', ['watch', 'taken']]
camel sample_3313

['private void listBlobs(Exchange exchange) throws Exception {', 'CloudBlobContainer client = BlobServiceUtil.createBlobContainerClient(getConfiguration());', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);']
['getting the blob list from the container from exchange ', ['getconfiguration', 'getcontainername', 'exchange']]
camel sample_9964

['private void updateBlockBlob(Exchange exchange) throws Exception {', 'CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration());', 'configureCloudBlobForWrite(client);', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);', 'InputStream inputStream = getInputStreamFromExchange(exchange);']
['putting a block blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['blobBlocks = (List<BlobBlock>)blobBlocks;', '} else if (object instanceof BlobBlock) {', 'blobBlocks = Collections.singletonList((BlobBlock)object);', '}', 'if (blobBlocks == null || blobBlocks.isEmpty()) {', 'throw new IllegalArgumentException("Illegal storageBlocks payload");', '}', 'CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration());', 'configureCloudBlobForWrite(client);', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);']
['putting a blob from blocks from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['if (object instanceof List) {', 'blockEntries = (List<BlockEntry>)blockEntries;', '} else if (object instanceof BlockEntry) {', 'blockEntries = Collections.singletonList((BlockEntry)object);', '}', 'if (blockEntries == null || blockEntries.isEmpty()) {', 'throw new IllegalArgumentException("Illegal commit block list payload");', '}', 'CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration());', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);']
['putting a blob block list from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void getBlobBlockList(Exchange exchange) throws Exception {', 'CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration());', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);']
['getting the blob block list from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void doCreateAppendBlob(CloudAppendBlob client, BlobServiceRequestOptions opts, Exchange exchange) throws Exception {']
['creating an append blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void doCreatePageBlob(CloudPageBlob client, BlobServiceRequestOptions opts, Exchange exchange) throws Exception {']
['creating a page blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void uploadPageBlob(Exchange exchange) throws Exception {']
['updating a page blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void resizePageBlob(Exchange exchange) throws Exception {']
['resizing a page blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void clearPageBlob(Exchange exchange) throws Exception {']
['clearing a page blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void getPageBlobRanges(Exchange exchange) throws Exception {', 'CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration());', 'BlobServiceUtil.configureCloudBlobForRead(client, getConfiguration());', 'BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange);']
['getting the page blob ranges from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['private void doDeleteBlock(CloudBlob client, Exchange exchange) throws Exception {']
['deleting a blob from exchange ', ['getconfiguration', 'getblobname', 'exchange']]
camel sample_9964

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwilioComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twilio.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twilio.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_530

['public Class<?> loadClass(String className) {']
['loading class from classloader ', ['thread', 'currentthread', 'getcontextclassloader']]
camel sample_9437

['public URL loadResource(String uri) {', 'URL answer = null;', 'ClassLoader cl = Thread.currentThread().getContextClassLoader();', 'if (cl != null) {']
['loading resource from classloader ', ['cl']]
camel sample_9437

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SchedulerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.scheduler.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.scheduler.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_863

['if ((seconds > 59) && foundFlag) {', 'throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);', '}', 'foundFlag = true;', 'milliseconds = milliseconds + (1000 * seconds);', '}', 'if (!foundFlag) {', 'milliseconds = Long.valueOf(source);', '}', '}']
['source milliseconds ', ['source', 'milliseconds']]
camel sample_4205

['public YqlResponse get(final YqlConfiguration yqlConfiguration) throws Exception {', 'final URI uri = new URIBuilder() .setScheme(yqlConfiguration.isHttps() ? "https" : "http") .setHost("query.yahooapis.com") .setPath("/v1/public/yql") .setParameters(buildParameters(yqlConfiguration)) .build();']
['yql query ', ['uri']]
camel sample_9067

['public YqlResponse get(final YqlConfiguration yqlConfiguration) throws Exception {', 'final URI uri = new URIBuilder() .setScheme(yqlConfiguration.isHttps() ? "https" : "http") .setHost("query.yahooapis.com") .setPath("/v1/public/yql") .setParameters(buildParameters(yqlConfiguration)) .build();', 'final HttpGet httpget = new HttpGet(uri);', 'try (final CloseableHttpResponse response = httpClient.execute(httpget)) {', 'final YqlResponse yqlResponse = YqlResponse.builder() .httpRequest(uri.toString()) .status(response.getStatusLine().getStatusCode()) .body(EntityUtils.toString(response.getEntity())) .build();']
['yql response ', ['yqlresponse', 'getbody']]
camel sample_9067

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JBPMComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jbpm.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jbpm.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_926

['connectionlessBootstrap.setOption("receiveBufferSizePredictorFactory", new FixedReceiveBufferSizePredictorFactory(configuration.getReceiveBufferSizePredictor()));', '}', 'if (configuration.getBacklog() > 0) {', 'connectionlessBootstrap.setOption("backlog", configuration.getBacklog());', '}', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'connectionlessBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}']
['created connectionlessbootstrap with options ', ['connectionlessbootstrap', 'connectionlessbootstrap', 'getoptions']]
camel sample_6687

['}', '}', 'connectionlessBootstrap.setPipelineFactory(pipelineFactory);', 'InetSocketAddress hostAddress = new InetSocketAddress(configuration.getHost(), configuration.getPort());', 'IpV4Subnet multicastSubnet = new IpV4Subnet(MULTICAST_SUBNET);', 'if (multicastSubnet.contains(configuration.getHost())) {', 'datagramChannel = (DatagramChannel)connectionlessBootstrap.bind(hostAddress);', 'String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();', 'multicastNetworkInterface = NetworkInterface.getByName(networkInterface);', 'ObjectHelper.notNull(multicastNetworkInterface, "No network interface found for \'" + networkInterface + "\'.");']
['connectionlessbootstrap joining using network interface ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'multicastnetworkinterface', 'getname']]
camel sample_6687

['InetSocketAddress hostAddress = new InetSocketAddress(configuration.getHost(), configuration.getPort());', 'IpV4Subnet multicastSubnet = new IpV4Subnet(MULTICAST_SUBNET);', 'if (multicastSubnet.contains(configuration.getHost())) {', 'datagramChannel = (DatagramChannel)connectionlessBootstrap.bind(hostAddress);', 'String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();', 'multicastNetworkInterface = NetworkInterface.getByName(networkInterface);', 'ObjectHelper.notNull(multicastNetworkInterface, "No network interface found for \'" + networkInterface + "\'.");', 'datagramChannel.joinGroup(hostAddress, multicastNetworkInterface).syncUninterruptibly();', 'allChannels.add(datagramChannel);', '} else {']
['connectionlessbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6687

['protected void stopServerBootstrap() {']
['connectionlessbootstrap disconnecting from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6687

['protected void stopServerBootstrap() {']
['closing channels ', ['allchannels', 'size']]
camel sample_6687

['public void testGeoCoder() throws Exception {', 'GeoCoderEndpoint endpoint = context.getEndpoint( "geocoder:address:current?headersOnly=true&proxyHost=localhost&proxyPort=3128&proxyAuthMethod=Basic&proxyAuthUsername=proxy&proxyAuthPassword=proxy", GeoCoderEndpoint.class);', 'Geocoder geocoder = endpoint.createGeocoder();', 'GeocoderRequest req = new GeocoderRequest();', 'req.setLocation(new LatLng("45.4643", "9.1895"));', 'GeocodeResponse res = geocoder.geocode(req);']
['response ', ['res']]
camel sample_9572

['});', 'sshd.setPublickeyAuthenticator(new PublickeyAuthenticator() {', 'public boolean authenticate(String username, PublicKey key, ServerSession session) {', 'return true;', '}', '});', 'try {', 'sshd.start();', 'return true;', '} catch (IOException e) {']
['failed to start ssh server ', ['e']]
camel sample_9122

['protected void setupKnownHosts() {', 'knownHostsFile = SCP_ROOT_DIR + "/" + KNOWN_HOSTS;', 'if (!acceptLocalhostConnections) {', 'return;', '}', 'JSch jsch = new JSch();', 'try {']
['using for known hosts ', ['knownhostsfile']]
camel sample_9122

['}', 'public boolean promptYesNo(String message) {', 'return true;', '}', 'public void showMessage(String message) {', '}', '});', 's.connect();', 's.disconnect();', '} catch (JSchException e) {']
['could not add localhost to known hosts ', ['e']]
camel sample_9122

['protected static void traceSecurityProviders() {', 'for (Provider p : Security.getProviders()) {', 'for (Service s : p.getServices()) {']
['security provider for algorithm ', ['s', 'getclassname', 's', 'getalgorithm']]
camel sample_9122

['public void decrement(Exchange exchange) {']
['decrementing latch count ', ['label']]
camel sample_10652

['public HttpClientPipelineFactory(NettyHttpProducer nettyProducer) {', 'this.producer = nettyProducer;', 'try {', 'this.sslContext = createSSLContext(producer);', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_8363

['public ChannelPipeline getPipeline() throws Exception {', 'ChannelPipeline pipeline = Channels.pipeline();', 'SslHandler sslHandler = configureClientSSLOnDemand();', 'if (sslHandler != null) {', 'sslHandler.setCloseOnSSLException(true);']
['client ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_8363

['List<ChannelHandler> encoders = producer.getConfiguration().getEncoders();', 'for (int x = 0; x < encoders.size(); x++) {', 'ChannelHandler encoder = encoders.get(x);', 'if (encoder instanceof ChannelHandlerFactory) {', 'encoder = ((ChannelHandlerFactory) encoder).newChannelHandler();', '}', 'pipeline.addLast("encoder-" + x, encoder);', '}', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {']
['using request timeout millis ', ['producer', 'getconfiguration', 'getrequesttimeout']]
camel sample_8363

['private SSLContext createSSLContext(NettyProducer producer) throws Exception {', 'NettyConfiguration configuration = producer.getConfiguration();', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_8363

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_8363

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_8363

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PrinterComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lpr.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lpr.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_475

['int tmax = conf.getTmax();', 'if (message.getHeaders().containsKey(GangliaConstants.METRIC_TMAX)) {', 'tmax = message.getHeader(GangliaConstants.METRIC_TMAX, Integer.class);', '}', 'int dmax = conf.getDmax();', 'if (message.getHeaders().containsKey(GangliaConstants.METRIC_DMAX)) {', 'dmax = message.getHeader(GangliaConstants.METRIC_DMAX, Integer.class);', '}', 'String value = message.getBody(String.class);', 'if ((value == null || value.length() == 0) && (type == GMetricType.FLOAT || type == GMetricType.DOUBLE)) {']
['metric string value was null using nan ', ['metricname']]
camel sample_12028

['}', 'int dmax = conf.getDmax();', 'if (message.getHeaders().containsKey(GangliaConstants.METRIC_DMAX)) {', 'dmax = message.getHeader(GangliaConstants.METRIC_DMAX, Integer.class);', '}', 'String value = message.getBody(String.class);', 'if ((value == null || value.length() == 0) && (type == GMetricType.FLOAT || type == GMetricType.DOUBLE)) {', 'value = "NaN";', '}', 'if (log.isDebugEnabled()) {']
['sending metric to ganglia ', ['metricname', 'value']]
camel sample_12028

['if (message.getHeaders().containsKey(GangliaConstants.METRIC_DMAX)) {', 'dmax = message.getHeader(GangliaConstants.METRIC_DMAX, Integer.class);', '}', 'String value = message.getBody(String.class);', 'if ((value == null || value.length() == 0) && (type == GMetricType.FLOAT || type == GMetricType.DOUBLE)) {', 'value = "NaN";', '}', 'if (log.isDebugEnabled()) {', '}', 'publisher.publish(groupName, metricName, value, type, slope, tmax, dmax, units);']
['sending metric done ', []]
camel sample_12028

['public void onClose(WebSocket webSocket) {']
['closing websocket ', []]
camel sample_10015

['public void onClose(WebSocket webSocket) {', 'String connectionKey = store.getConnectionKey(webSocket);', 'sendEventNotification(connectionKey, WebsocketConstants.ONCLOSE_EVENT_TYPE);', 'store.removeWebSocket(webSocket);']
['websocket closed ', []]
camel sample_10015

['public void onError(WebSocket webSocket, WebSocketException t) {']
['websocket on error ', ['t']]
camel sample_10015

['public void onOpen(WebSocket webSocket) {']
['opening websocket ', []]
camel sample_10015

['public void onOpen(WebSocket webSocket) {', 'String connectionKey = UUID.randomUUID().toString();', 'store.addWebSocket(connectionKey, webSocket);', 'sendEventNotification(connectionKey, WebsocketConstants.ONOPEN_EVENT_TYPE);']
['websocket opened ', []]
camel sample_10015

['public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {']
['processing text message ', ['data']]
camel sample_10015

['public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {', 'String connectionKey = store.getConnectionKey(webSocket);', 'consumer.sendMessage(connectionKey, data);']
['text message sent ', []]
camel sample_10015

['public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {']
['processing byte message ', ['data']]
camel sample_10015

['public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {', 'String connectionKey = store.getConnectionKey(webSocket);', 'if (length < data.length) {', 'byte[] rawdata = data;', 'data = new byte[length];', 'System.arraycopy(rawdata, offset, data, 0, length);', '}', 'consumer.sendMessage(connectionKey, data);']
['byte message sent ', []]
camel sample_10015

['protected RoutesBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['caught error while performing task reason exception message stacktrace exception stacktrace ', ['exception', 'class', 'process', 'new', 'exceptionprocessor', 'maximumredeliveries', 'redeliverydelay', 'useexponentialbackoff', 'backoffmultiplier', 'onredelivery', 'new', 'exceptionretryprocessor', 'handled', 'true', 'log', 'logginglevel', 'warn', 'end']]
camel sample_8174

['public void process(Exchange exchange) throws Exception {', 'Exception ex = (Exception)exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT);']
['processing caught exception ', ['ex', 'getlocalizedmessage']]
camel sample_8174

['public void process(Exchange exchange) throws Exception {', 'Exception ex = (Exception)exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT);']
['attempting redelivery of handled exception with message ', ['ex', 'getclass', 'getsimplename', 'ex', 'getlocalizedmessage']]
camel sample_8174

['MockEndpoint mockEndpoint = getMockEndpoint("mock:a");', 'mockEndpoint.expectedBodiesReceived("<b>Hello World</b>");', 'template.requestBodyAndHeader(uri, new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml");', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_10916

['public void setBatchSize(int batchSize) {', 'if (batchSize <= 0) {']
['disabling batch size will only be triggered by timeout ', []]
camel sample_4507

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'if (isBatchConsumer()) {', 'int size = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class);', 'if (batchSize != size) {', 'batchSize = size;']
['using batch consumer completion so setting batch size to ', ['batchsize']]
camel sample_4507

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'if (isBatchConsumer()) {', 'int size = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class);', 'if (batchSize != size) {', 'batchSize = size;', '}', '}', 'if (!isValid(exchange)) {', 'if (isIgnoreInvalidExchanges()) {']
['invalid exchange this exchange will be ignored ', ['exchange']]
camel sample_4507

['public void run() {', 'queueLock.lock();', 'try {', 'do {', 'try {', 'if (!exchangeEnqueued.get()) {']
['waiting for new exchange to arrive or batchtimeout to occur after ms ', ['batchtimeout']]
camel sample_4507

['try {', 'if (!exchangeEnqueued.get()) {', 'exchangeEnqueuedCondition.await(batchTimeout, TimeUnit.MILLISECONDS);', '}', 'String id = null;', 'if (!completionPredicateMatched.isEmpty()) {', 'id = completionPredicateMatched.poll();', '}', 'if (id != null || !exchangeEnqueued.get()) {', 'if (id != null) {']
['collecting exchanges to be aggregated triggered by completion predicate ', []]
camel sample_4507

['if (!exchangeEnqueued.get()) {', 'exchangeEnqueuedCondition.await(batchTimeout, TimeUnit.MILLISECONDS);', '}', 'String id = null;', 'if (!completionPredicateMatched.isEmpty()) {', 'id = completionPredicateMatched.poll();', '}', 'if (id != null || !exchangeEnqueued.get()) {', 'if (id != null) {', '} else {']
['collecting exchanges to be aggregated triggered by batch timeout ', []]
camel sample_4507

['}', 'drainQueueTo(collection, batchSize, id);', '} else {', 'exchangeEnqueued.set(false);', 'boolean drained = false;', 'while (isInBatchCompleted(queue.size())) {', 'drained = true;', 'drainQueueTo(collection, batchSize, id);', '}', 'if (drained) {']
['collecting exchanges to be aggregated triggered by new exchanges received ', []]
camel sample_4507

['public void enqueueExchange(Exchange exchange) {']
['received exchange to be batched ', ['exchange']]
camel sample_4507

['public void enqueueExchange(Exchange exchange) {', 'queueLock.lock();', 'try {', 'if (completionPredicate != null) {', 'boolean matches = completionPredicate.matches(exchange);', 'if (matches) {']
['exchange matched completion predicate ', ['exchange']]
camel sample_4507

['private void sendExchanges() throws Exception {', 'Iterator<Exchange> iter = collection.iterator();', 'while (iter.hasNext()) {', 'Exchange exchange = iter.next();', 'iter.remove();', 'try {']
['sending aggregated exchange ', ['exchange']]
camel sample_4507

['} else {', 'boolean singleton = false;', 'if (pollingConsumer instanceof IsSingleton) {', 'singleton = ((IsSingleton) pollingConsumer).isSingleton();', '}', 'String key = endpoint.getEndpointUri();', 'boolean cached = consumers.containsKey(key);', 'if (!singleton || !cached) {', 'try {', 'if (!singleton) {']
['released pollingconsumer is stopped as consumer is not singleton ', ['endpoint']]
camel sample_4157

['boolean singleton = false;', 'if (pollingConsumer instanceof IsSingleton) {', 'singleton = ((IsSingleton) pollingConsumer).isSingleton();', '}', 'String key = endpoint.getEndpointUri();', 'boolean cached = consumers.containsKey(key);', 'if (!singleton || !cached) {', 'try {', 'if (!singleton) {', '} else {']
['released pollingconsumer is stopped as consumer cache is full ', ['endpoint']]
camel sample_4157

['pool.acquire(endpoint);', '}', 'if (answer == null) {', 'try {', 'answer = endpoint.createPollingConsumer();', 'answer.start();', '} catch (Throwable e) {', 'throw new FailedToCreateConsumerException(endpoint, e);', '}', 'if (pooled && answer instanceof ServicePoolAware) {']
['adding to producer service pool with key for producer ', ['endpoint', 'answer']]
camel sample_4157

['throw new FailedToCreateConsumerException(endpoint, e);', '}', 'if (pooled && answer instanceof ServicePoolAware) {', 'answer = pool.addAndAcquire(endpoint, answer);', '} else {', 'boolean singleton = false;', 'if (answer instanceof IsSingleton) {', 'singleton = ((IsSingleton) answer).isSingleton();', '}', 'if (singleton) {']
['adding to consumer cache with key for consumer ', ['endpoint', 'answer']]
camel sample_4157

['if (pooled && answer instanceof ServicePoolAware) {', 'answer = pool.addAndAcquire(endpoint, answer);', '} else {', 'boolean singleton = false;', 'if (answer instanceof IsSingleton) {', 'singleton = ((IsSingleton) answer).isSingleton();', '}', 'if (singleton) {', 'consumers.put(key, answer);', '} else {']
['consumer for endpoint is not singleton and thus not added to consumer cache ', ['key']]
camel sample_4157

['protected void doGetPersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'PersistentVolumeClaim pvc = null;', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvcName)) {']
['get a specific persistent volume claim require specify a persistent volume claim name ', []]
camel sample_13269

['protected void doGetPersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'PersistentVolumeClaim pvc = null;', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvcName)) {', 'throw new IllegalArgumentException( "Get a specific Persistent Volume Claim require specify a Persistent Volume Claim name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific persistent volume claim require specify a namespace name ', []]
camel sample_13269

['protected void doCreatePersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'PersistentVolumeClaim pvc = null;', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PersistentVolumeClaimSpec pvcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_SPEC, PersistentVolumeClaimSpec.class);', 'if (ObjectHelper.isEmpty(pvcName)) {']
['create a specific persistent volume claim require specify a persistent volume claim name ', []]
camel sample_13269

['protected void doCreatePersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'PersistentVolumeClaim pvc = null;', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PersistentVolumeClaimSpec pvcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_SPEC, PersistentVolumeClaimSpec.class);', 'if (ObjectHelper.isEmpty(pvcName)) {', 'throw new IllegalArgumentException( "Create a specific Persistent Volume Claim require specify a Persistent Volume Claim name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific persistent volume claim require specify a namespace name ', []]
camel sample_13269

['String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PersistentVolumeClaimSpec pvcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_SPEC, PersistentVolumeClaimSpec.class);', 'if (ObjectHelper.isEmpty(pvcName)) {', 'throw new IllegalArgumentException( "Create a specific Persistent Volume Claim require specify a Persistent Volume Claim name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific Persistent Volume Claim require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(pvcSpec)) {']
['create a specific persistent volume claim require specify a persistent volume claim spec bean ', []]
camel sample_13269

['protected void doDeletePersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvcName)) {']
['delete a specific persistent volume claim require specify a persistent volume claim name ', []]
camel sample_13269

['protected void doDeletePersistentVolumeClaim(Exchange exchange, String operation) throws Exception {', 'String pvcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvcName)) {', 'throw new IllegalArgumentException( "Delete a specific Persistent Volume Claim require specify a Persistent Volume Claim name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific persistent volume claim require specify a namespace name ', []]
camel sample_13269

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes namespace consumer ', []]
camel sample_13286

['protected void unknownPropertyName(String name) {', 'if (isStrictOnParameterNames()) {', 'throw new InvalidPropertyException(this, name, endpointClass);', '} else {']
['using parameter on endpoint which does not have a uriparam annotation please add the uriparam annotation to the field ', ['name', 'getendpointclass', 'getname', 'name']]
camel sample_4012

['public void nettyProducerHangsOnTheSecondRequestToTheSocketWhichIsClosed() throws Exception {', 'new Thread(new Runnable() {', 'public void run() {', 'try {', 'acceptReplyAcceptClose();', 'acceptReplyAcceptClose();', '} catch (IOException e) {']
['exception occured ', ['e', 'getmessage', 'e']]
camel sample_10150

['private void acceptReplyAcceptClose() throws IOException {', 'byte buf[] = new byte[128];', 'ServerSocket serverSocket = new ServerSocket(PORT);', 'Socket soc = serverSocket.accept();']
['open socket and accept data ', []]
camel sample_10150

['Socket soc = serverSocket.accept();', 'try (InputStream is = soc.getInputStream();', 'OutputStream os = soc.getOutputStream()) {', 'is.read(buf);', 'os.write("response\\n".getBytes());', 'is.read(buf);', '} finally {', 'soc.close();', 'serverSocket.close();', '}']
['close socket ', []]
camel sample_10150

['public void run() {']
['starting to poll for timeout events ', []]
camel sample_12497

['params.put("timeNow", timeNow);', 'String activityStateQuery = "select x from " + QueryUtils.getTypeName(ActivityState.class) + " x where x.timeOverdue < :timeNow";', 'List<ActivityState> list = entityManagerTemplate.find(ActivityState.class, activityStateQuery, params);', 'for (ActivityState activityState : list) {', 'fireExpiredEvent(activityState);', '}', '}', '});', 'long timeToSleep = nextPoll - System.currentTimeMillis();', 'if (timeToSleep > 0) {']
['sleeping for millis ', ['timetosleep']]
camel sample_12497

['}', '});', 'long timeToSleep = nextPoll - System.currentTimeMillis();', 'if (timeToSleep > 0) {', 'try {', 'Thread.sleep(timeToSleep);', '} catch (InterruptedException e) {', '}', '}', '} catch (Exception e) {']
['error during running activitymonitorengine this exception is ignored ', ['e']]
camel sample_12497

['protected void fireExpiredEvent(final ActivityState activityState) {']
['trying to fire expiration of ', ['activitystate']]
camel sample_12497

['protected void fireExpiredEvent(final ActivityState activityState) {', 'entityManagerTemplate.execute(new EntityManagerCallback<Object>() {', 'public Object execute(EntityManager entityManager) throws PersistenceException {', 'if (isUseLocking()) {']
['attempting to lock ', ['activitystate']]
camel sample_12497

['protected void fireExpiredEvent(final ActivityState activityState) {', 'entityManagerTemplate.execute(new EntityManagerCallback<Object>() {', 'public Object execute(EntityManager entityManager) throws PersistenceException {', 'if (isUseLocking()) {', 'entityManager.lock(activityState, LockModeType.WRITE);']
['grabbed lock ', ['activitystate']]
camel sample_12497

['protected void fireExpiredEvent(final ActivityState activityState) {', 'entityManagerTemplate.execute(new EntityManagerCallback<Object>() {', 'public Object execute(EntityManager entityManager) throws PersistenceException {', 'if (isUseLocking()) {', 'entityManager.lock(activityState, LockModeType.WRITE);', '}', 'try {', 'rules.processExpired(activityState);', '} catch (Exception e) {']
['failed to process expiration of reason ', ['activitystate', 'e', 'e']]
camel sample_12497

['public void testCacheBasedTokenReplacer() throws Exception {']
['beginning test testcachebasedtokenreplacer ', []]
camel sample_10500

['in.setBody("Omar Khayyam");', '} else if (key.equalsIgnoreCase("number")) {', 'in.setBody("one");', '} else {', 'in.setBody(quote);', '}', '}', '});', '}', 'resultEndpoint.assertIsSatisfied();']
['completed test testcachebasedtokenreplacer ', []]
camel sample_10500

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['payload replacement results ', []]
camel sample_10500

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['the following payload was replaced from cache ', []]
camel sample_10500

['from("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .process(new CacheBasedTokenReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {', 'log.debug("key = {}", key);', 'log.debug("Before Value = {}", quote);', 'log.debug("After value = {}", data);']
['end ', []]
camel sample_10500

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MongoDbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb3.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb3.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1093

['public void testLookupOfTypedObject() throws Exception {', 'Object value = assertLookup("example");', 'ExampleBean bean = assertIsInstanceOf(ExampleBean.class, value);', 'assertEquals("Bean.name", "James", bean.getName());', 'assertEquals("Bean.price", 2.34, bean.getPrice());']
['found bean ', ['bean']]
camel sample_1569

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {']
['callback ', ['callback']]
camel sample_16657

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {', 'if (callback instanceof PasswordCallback) {', 'PasswordCallback pc = (PasswordCallback) callback;']
['setting password on callback ', ['pc']]
camel sample_16657

['public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {', 'for (Callback callback : callbacks) {', 'if (callback instanceof PasswordCallback) {', 'PasswordCallback pc = (PasswordCallback) callback;', 'pc.setPassword(principal.getPassword().toCharArray());', '} else if (callback instanceof NameCallback) {', 'NameCallback nc = (NameCallback) callback;']
['setting username on callback ', ['nc']]
camel sample_16657

['public void process(Exchange exchange) {', 'Object input = exchange.getIn().getBody();', 'if (input instanceof XOrderResponse) {']
['endpoint xorderresponse xml ', []]
camel sample_15581

['public void process(Exchange exchange) {', 'Object input = exchange.getIn().getBody();', 'if (input instanceof XOrderResponse) {', 'exchange.getIn().setBody("<XOrderResponse/>");', '} else {', 'assertEquals("<XOrder/>", input);']
['endpoint xml xorder ', []]
camel sample_15581

['public void testThreeMessagesMDC() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Bye Camel", "Bye Camel", "Bye Camel");']
['message ', []]
camel sample_1990

['public void testThreeMessagesMDC() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Bye Camel", "Bye Camel", "Bye Camel");', 'template.sendBody("direct:a", "Hello World");']
['message ', []]
camel sample_1990

['public void testThreeMessagesMDC() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Bye Camel", "Bye Camel", "Bye Camel");', 'template.sendBody("direct:a", "Hello World");', 'template.sendBody("direct:a", "Hello Camel");']
['message ', []]
camel sample_1990

['public void process(Exchange msg) {']
['processing msg ', ['msg']]
camel sample_17553

['public void process(Exchange msg) {', 'Map<String, Object> record = msg.getIn().getBody(Map.class);']
['processing record ', ['record']]
camel sample_17553

['public void changeFileName(String newName) {']
['changing name to ', ['newname']]
camel sample_4784

['public void changeFileName(String newName) {', 'String newFileName = FileUtil.normalizePath(newName);', 'String newEndpointPath = FileUtil.normalizePath(endpointPath.endsWith("" + File.separatorChar) ? endpointPath : endpointPath + File.separatorChar);']
['normalized endpointpath ', ['newendpointpath']]
camel sample_4784

['public void changeFileName(String newName) {', 'String newFileName = FileUtil.normalizePath(newName);', 'String newEndpointPath = FileUtil.normalizePath(endpointPath.endsWith("" + File.separatorChar) ? endpointPath : endpointPath + File.separatorChar);']
['normalized newfilename ', ['newfilename']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['filenameonly ', ['getfilenameonly']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['filename ', ['getfilename']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['absolute ', ['isabsolute']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['relative path ', ['getrelativefilepath']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['absolute path ', ['getabsolutefilepath']]
camel sample_4784

['}', 'if (isAbsolute(newFileName)) {', 'setAbsolute(true);', 'setAbsoluteFilePath(newFileName);', '} else {', 'setAbsolute(false);', 'String path = ObjectHelper.isEmpty(endpointPath) ? "" : endpointPath + getFileSeparator();', 'setAbsoluteFilePath(path + getRelativeFilePath());', '}', 'if (LOG.isTraceEnabled()) {']
['name changed to ', ['this']]
camel sample_4784

['public void startScheduler() {', 'if (futures.size() == 0) {', 'if (isUseFixedDelay()) {', 'if (LOG.isDebugEnabled()) {']
['scheduling poll fixed delay with initialdelay delay for ', ['new', 'object', 'getinitialdelay', 'getdelay', 'gettimeunit', 'name', 'tolowercase', 'locale', 'english', 'consumer', 'getendpoint']]
camel sample_4100

['public void startScheduler() {', 'if (futures.size() == 0) {', 'if (isUseFixedDelay()) {', 'if (LOG.isDebugEnabled()) {', '}', 'for (int i = 0; i < concurrentTasks; i++) {', 'futures.add(scheduledExecutorService.scheduleWithFixedDelay(task, getInitialDelay(), getDelay(), getTimeUnit()));', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['scheduling poll fixed rate with initialdelay delay for ', ['new', 'object', 'getinitialdelay', 'getdelay', 'gettimeunit', 'name', 'tolowercase', 'locale', 'english', 'consumer', 'getendpoint']]
camel sample_4100

['protected void doStop() throws Exception {', 'if (isSchedulerStarted()) {']
['this consumer is stopping so cancelling scheduled task ', ['futures']]
camel sample_4100

['public void testOIDPolling() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> oids = mock.getExchanges();', 'if (LOG.isInfoEnabled()) {', 'for (Exchange e : oids) {']
['oid ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_8820

['public void invoke() throws Exception {', 'for (Operation op : operations) {', 'try {', 'op.invoke();', 'if (Thread.currentThread().isInterrupted()) {']
['interrupting composite operation ', []]
camel sample_9698

['public void invoke() throws Exception {', 'for (Operation op : operations) {', 'try {', 'op.invoke();', 'if (Thread.currentThread().isInterrupted()) {', 'Thread.currentThread().interrupt();', 'break;', '}', '} catch (InterruptedException e) {']
['interrupting composite operation ', []]
camel sample_9698

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'Operation operation = getOperation(exchange);']
['executing operation ', ['operation']]
camel sample_11653

['private void doPublish(Exchange exchange, AsyncCallback callback) {', 'Object body = exchange.getIn().getBody();', 'if (ObjectHelper.isEmpty(body)) {', 'throw new RuntimeException("Can not publish empty message");', '}']
['sending message to channel ', ['body', 'getchannel', 'exchange']]
camel sample_11653

['private void doFire(Exchange exchange, AsyncCallback callback) {', 'Object body = exchange.getIn().getBody();', 'if (ObjectHelper.isEmpty(body)) {', 'exchange.setException(new CamelException("Can not fire empty message"));', 'callback.done(true);', '}']
['sending message to channel ', ['body', 'getchannel', 'exchange']]
camel sample_11653

['private void doGetHistory(Exchange exchange, AsyncCallback callback) {', 'endpoint.getPubnub() .history() .channel(getChannel(exchange)) .async(new PNCallback<PNHistoryResult>() {', 'public void onResponse(PNHistoryResult result, PNStatus status) {']
['got history message ', ['result']]
camel sample_11653

['private void doSetState(Exchange exchange, AsyncCallback callback) {', 'Object body = exchange.getIn().getBody();', 'if (ObjectHelper.isEmpty(body)) {', 'exchange.setException(new CamelException("Can not publish empty message"));', 'callback.done(true);', '}']
['sending setstate to channel ', ['body', 'getchannel', 'exchange']]
camel sample_11653

['private void doSetState(Exchange exchange, AsyncCallback callback) {', 'Object body = exchange.getIn().getBody();', 'if (ObjectHelper.isEmpty(body)) {', 'exchange.setException(new CamelException("Can not publish empty message"));', 'callback.done(true);', '}', 'endpoint.getPubnub() .setPresenceState() .channels(Arrays.asList(getChannel(exchange))) .state(body) .uuid(getUUID(exchange)) .async(new PNCallback<PNSetStateResult>() {', 'public void onResponse(PNSetStateResult result, PNStatus status) {']
['got setstate responsee ', ['result']]
camel sample_11653

['private void doGetState(Exchange exchange, AsyncCallback callback) {', 'endpoint.getPubnub() .getPresenceState() .channels(Arrays.asList(getChannel(exchange))) .uuid(getUUID(exchange)) .async(new PNCallback<PNGetStateResult>() {', 'public void onResponse(PNGetStateResult result, PNStatus status) {']
['got state ', ['result', 'getstatebyuuid']]
camel sample_11653

['private void doHereNow(Exchange exchange, AsyncCallback callback) {', 'endpoint.getPubnub() .hereNow() .channels(Arrays.asList(getChannel(exchange))) .includeState(true) .includeUUIDs(true) .async(new PNCallback<PNHereNowResult>() {', 'public void onResponse(PNHereNowResult result, PNStatus status) {']
['got hernow message ', ['result']]
camel sample_11653

['private void doWhereNow(Exchange exchange, AsyncCallback callback) {', 'endpoint.getPubnub() .whereNow() .uuid(getUUID(exchange)) .async(new PNCallback<PNWhereNowResult>() {', 'public void onResponse(PNWhereNowResult result, PNStatus status) {']
['got wherenow message ', ['result', 'getchannels']]
camel sample_11653

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("jetty:http: from("direct:leak").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['url is url ', ['exchange', 'getin', 'getheader']]
camel sample_10941

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("master:ns:timer:test?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_14451

['public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) throws Exception {', 'this.endpoint = endpoint;']
['using fileidempotentrepositoryreadlockstrategy on endpoint ', ['idempotentrepository', 'endpoint']]
camel sample_4803

['public void addPropertyPlaceholder(String id) {', 'Object component = container.getComponentInstance(id);', 'if (component instanceof AbstractPropertyPlaceholder) {', 'AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;', 'placeholders.add(placeholder);']
['adding blueprint propertyplaceholder ', ['id']]
camel sample_8123

['public String parseProperty(String key, String value, Properties properties) {']
['parsing property key with value ', ['key', 'value']]
camel sample_8123

['answer = (String) propertiesComponent.getOverrideProperties().get(key);', '}', 'if (answer == null && key != null) {', 'for (AbstractPropertyPlaceholder placeholder : placeholders) {', 'boolean isDefault = false;', 'if (placeholders.size() > 1) {', 'if (placeholder instanceof PropertyPlaceholder) {', 'Map map = ((PropertyPlaceholder) placeholder).getDefaultProperties();', 'isDefault = map != null && map.containsKey(key);', '}']
['blueprint property key is part of default properties ', ['key', 'isdefault']]
camel sample_8123

['if (placeholders.size() > 1) {', 'if (placeholder instanceof PropertyPlaceholder) {', 'Map map = ((PropertyPlaceholder) placeholder).getDefaultProperties();', 'isDefault = map != null && map.containsKey(key);', '}', '}', 'try {', 'String candidate = (String) ObjectHelper.invokeMethod(method, placeholder, key);', 'if (candidate != null) {', 'if (answer == null || !isDefault) {']
['blueprint parsed candidate property key as value ', ['key', 'answer']]
camel sample_8123

['try {', 'String candidate = (String) ObjectHelper.invokeMethod(method, placeholder, key);', 'if (candidate != null) {', 'if (answer == null || !isDefault) {', 'answer = candidate;', '}', '}', '} catch (Exception ex) {', '}', '}']
['blueprint parsed property key as value ', ['key', 'answer']]
camel sample_8123

['}', '}', '} catch (Exception ex) {', '}', '}', '}', 'if (delegate != null) {', 'String delegateAnswer = delegate.parseProperty(key, answer != null ? answer : value, properties);', 'if (delegateAnswer != null) {', 'answer = delegateAnswer;']
['delegate property parser parsed the property key as value ', ['key', 'answer']]
camel sample_8123

['} catch (Exception ex) {', '}', '}', '}', 'if (delegate != null) {', 'String delegateAnswer = delegate.parseProperty(key, answer != null ? answer : value, properties);', 'if (delegateAnswer != null) {', 'answer = delegateAnswer;', '}', '}']
['returning parsed property key as value ', ['key', 'answer']]
camel sample_8123

['public void setEncoding(String encoding) {', 'if (!Charset.isSupported(encoding)) {']
['unsupported encoding is being set ', ['encoding']]
camel sample_16895

['public void configure() throws Exception {']
['about to setup splunk search route splunk server log results ', []]
camel sample_17768

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NettyComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_770

['properties.timestamp(convertTimestamp(timestamp));', '}', 'final Map<String, Object> headers = msg.getHeaders();', 'Map<String, Object> filteredHeaders = new HashMap<>();', 'for (Map.Entry<String, Object> header : headers.entrySet()) {', 'Object value = getValidRabbitMQHeaderValue(header.getValue());', 'if (value != null) {', 'filteredHeaders.put(header.getKey(), header.getValue());', '} else if (LOG.isDebugEnabled()) {', 'if (header.getValue() == null) {']
['ignoring header with null value ', ['header', 'getkey']]
camel sample_14144

['}', 'final Map<String, Object> headers = msg.getHeaders();', 'Map<String, Object> filteredHeaders = new HashMap<>();', 'for (Map.Entry<String, Object> header : headers.entrySet()) {', 'Object value = getValidRabbitMQHeaderValue(header.getValue());', 'if (value != null) {', 'filteredHeaders.put(header.getKey(), header.getValue());', '} else if (LOG.isDebugEnabled()) {', 'if (header.getValue() == null) {', '} else {']
['ignoring header of class with value ', ['header', 'getkey', 'objecthelper', 'classcanonicalname', 'header', 'getvalue', 'header', 'getvalue']]
camel sample_14144

['private void deserializeBody(final Exchange camelExchange, final Message message, final byte[] body) {', 'Object messageBody = null;', 'try (InputStream b = new ByteArrayInputStream(body);', 'ObjectInputStream o = new ObjectInputStream(b)) {', 'messageBody = o.readObject();', '} catch (IOException | ClassNotFoundException e) {']
['could not deserialize the object ', []]
camel sample_14144

['private void deserializeBody(final Exchange camelExchange, final Message message, final byte[] body) {', 'Object messageBody = null;', 'try (InputStream b = new ByteArrayInputStream(body);', 'ObjectInputStream o = new ObjectInputStream(b)) {', 'messageBody = o.readObject();', '} catch (IOException | ClassNotFoundException e) {', 'camelExchange.setException(e);', '}', 'if (messageBody instanceof Throwable) {']
['reply was an exception setting the exception on the exchange ', []]
camel sample_14144

['private static void manageCamelContext(Container container, CamelContext context) {', 'try {', 'container.manage(context);', '} catch (Throwable t) {']
['error during manage camelcontext this exception is ignored ', ['context', 'getname', 't']]
camel sample_5087

['boolean fixed = false;', 'String newName = findFreeName(mc, context.getManagementNameStrategy(), name);', 'if (newName != null) {', 'fixed = true;', 'done = true;', 'managementName = newName;', '}', 'if (!fixed) {', 'throw new VetoCamelContextStartException("CamelContext (" + context.getName() + ") with ObjectName[" + on + "] is already registered." + " Make sure to use unique names on CamelContext when using multiple CamelContexts in the same MBeanServer.", context);', '} else {']
['this camelcontext will be registered using the name due to clash with an existing name already registered in mbeanserver ', ['context', 'getname', 'managementname']]
camel sample_4696

['camelContextMBean = (ManagedCamelContext) mc;', '}', 'enlistPreRegisteredServices();', 'try {', 'Object me = getManagementObjectStrategy().getManagedObjectForCamelHealth(camelContext);', 'if (me == null) {', 'return;', '}', 'manageObject(me);', '} catch (Exception e) {']
['could not register camelhealth mbean this exception will be ignored ', ['e']]
camel sample_4696

['manageObject(me);', '} catch (Exception e) {', '}', 'try {', 'Object me = getManagementObjectStrategy().getManagedObjectForRouteController(camelContext);', 'if (me == null) {', 'return;', '}', 'manageObject(me);', '} catch (Exception e) {']
['could not register routecontroller mbean this exception will be ignored ', ['e']]
camel sample_4696

['if (strategy.isFixedName()) {', 'return null;', '}', 'boolean done = false;', 'String newName = null;', 'while (!done) {', 'newName = strategy.getNextName();', 'ObjectName on = getManagementStrategy().getManagementNamingStrategy().getObjectNameForCamelContext(newName, name);', 'done = !getManagementStrategy().isManaged(mc, on);', 'if (LOG.isTraceEnabled()) {']
['using name in objectname exists ', ['new', 'object', 'name', 'on', 'done']]
camel sample_4696

['private void enlistPreRegisteredServices() {', 'if (preServices.isEmpty()) {', 'return;', '}']
['registering pre registered services ', ['preservices', 'size']]
camel sample_4696

['public void onContextStop(CamelContext context) {', 'if (!initialized) {', 'return;', '}', 'try {', 'Object mc = getManagementObjectStrategy().getManagedObjectForRouteController(context);', 'if (getManagementStrategy().isManaged(mc, null)) {', 'unmanageObject(mc);', '}', '} catch (Exception e) {']
['could not unregister routecontroller mbean ', ['e']]
camel sample_4696

['unmanageObject(mc);', '}', '} catch (Exception e) {', '}', 'try {', 'Object mc = getManagementObjectStrategy().getManagedObjectForCamelHealth(context);', 'if (getManagementStrategy().isManaged(mc, null)) {', 'unmanageObject(mc);', '}', '} catch (Exception e) {']
['could not unregister camelhealth mbean ', ['e']]
camel sample_4696

['unmanageObject(mc);', '}', '} catch (Exception e) {', '}', 'try {', 'Object mc = getManagementObjectStrategy().getManagedObjectForCamelContext(context);', 'if (getManagementStrategy().isManaged(mc, null)) {', 'unmanageObject(mc);', '}', '} catch (Exception e) {']
['could not unregister camelcontext mbean ', ['e']]
camel sample_4696

['if (!initialized) {', 'PreRegisterService pre = new PreRegisterService();', 'pre.onComponentAdd(name, component);', 'preServices.add(pre);', 'return;', '}', 'try {', 'Object mc = getManagementObjectStrategy().getManagedObjectForComponent(camelContext, component, name);', 'manageObject(mc);', '} catch (Exception e) {']
['could not register component mbean ', ['e']]
camel sample_4696

['public void onComponentRemove(String name, Component component) {', 'if (!initialized) {', 'return;', '}', 'try {', 'Object mc = getManagementObjectStrategy().getManagedObjectForComponent(camelContext, component, name);', 'unmanageObject(mc);', '} catch (Exception e) {']
['could not unregister component mbean ', ['e']]
camel sample_4696

['if (!shouldRegister(endpoint, null)) {', 'return;', '}', 'try {', 'Object me = getManagementObjectStrategy().getManagedObjectForEndpoint(camelContext, endpoint);', 'if (me == null) {', 'return;', '}', 'manageObject(me);', '} catch (Exception e) {']
['could not register endpoint mbean for endpoint this exception will be ignored ', ['endpoint', 'e']]
camel sample_4696

['public void onEndpointRemove(Endpoint endpoint) {', 'if (!initialized) {', 'return;', '}', 'try {', 'Object me = getManagementObjectStrategy().getManagedObjectForEndpoint(camelContext, endpoint);', 'unmanageObject(me);', '} catch (Exception e) {']
['could not unregister endpoint mbean for endpoint this exception will be ignored ', ['endpoint', 'e']]
camel sample_4696

['return;', '}', 'if (!shouldRegister(service, route)) {', 'return;', '}', 'Object managedObject = getManagedObjectForService(context, service, route);', 'if (managedObject == null) {', 'return;', '}', 'if (getManagementStrategy().isManaged(managedObject, null)) {']
['the service is already managed ', ['service']]
camel sample_4696

['Object managedObject = getManagedObjectForService(context, service, route);', 'if (managedObject == null) {', 'return;', '}', 'if (getManagementStrategy().isManaged(managedObject, null)) {', 'return;', '}', 'try {', 'manageObject(managedObject);', '} catch (Exception e) {']
['could not register service as service mbean ', ['service', 'e']]
camel sample_4696

['public void onServiceRemove(CamelContext context, Service service, Route route) {', 'if (!initialized) {', 'return;', '}', 'Object managedObject = getManagedObjectForService(context, service, route);', 'if (managedObject != null) {', 'try {', 'unmanageObject(managedObject);', '} catch (Exception e) {']
['could not unregister service as service mbean ', ['service', 'e']]
camel sample_4696

['public void onRoutesAdd(Collection<Route> routes) {', 'for (Route route : routes) {', 'if (getCamelContext().getStatus().isStarting() || getManagementStrategy().getManagementAgent().getRegisterAlways() || getManagementStrategy().getManagementAgent().getRegisterNewRoutes()) {', 'knowRouteIds.add(route.getId());', '}', 'if (!shouldRegister(route, route)) {', 'continue;', '}', 'Object mr = getManagementObjectStrategy().getManagedObjectForRoute(camelContext, route);', 'if (getManagementStrategy().isManaged(mr, null)) {']
['the route is already managed ', ['route']]
camel sample_4696

['task.setCounter(wrapper);', '} else {', 'task.setCounter(routeMBean);', '}', '}', '}', '}', 'try {', 'manageObject(mr);', '} catch (JMException e) {']
['could not register route mbean ', ['e']]
camel sample_4696

['} else {', 'task.setCounter(routeMBean);', '}', '}', '}', '}', 'try {', 'manageObject(mr);', '} catch (JMException e) {', '} catch (Exception e) {']
['could not create route mbean ', ['e']]
camel sample_4696

['public void onRoutesRemove(Collection<Route> routes) {', 'if (!initialized) {', 'return;', '}', 'for (Route route : routes) {', 'Object mr = getManagementObjectStrategy().getManagedObjectForRoute(camelContext, route);', 'if (!getManagementStrategy().isManaged(mr, null)) {']
['the route is not managed ', ['route']]
camel sample_4696

['return;', '}', 'for (Route route : routes) {', 'Object mr = getManagementObjectStrategy().getManagedObjectForRoute(camelContext, route);', 'if (!getManagementStrategy().isManaged(mr, null)) {', 'continue;', '}', 'try {', 'unmanageObject(mr);', '} catch (Exception e) {']
['could not unregister route mbean ', ['e']]
camel sample_4696

['public void onErrorHandlerAdd(RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder) {', 'if (!shouldRegister(errorHandler, null)) {', 'return;', '}', 'Object me = getManagementObjectStrategy().getManagedObjectForErrorHandler(camelContext, routeContext, errorHandler, errorHandlerBuilder);', 'if (getManagementStrategy().isManaged(me, null)) {']
['the error handler builder is already managed ', ['errorhandlerbuilder']]
camel sample_4696

['if (!shouldRegister(errorHandler, null)) {', 'return;', '}', 'Object me = getManagementObjectStrategy().getManagedObjectForErrorHandler(camelContext, routeContext, errorHandler, errorHandlerBuilder);', 'if (getManagementStrategy().isManaged(me, null)) {', 'return;', '}', 'try {', 'manageObject(me);', '} catch (Exception e) {']
['could not register error handler builder as errorhandler mbean ', ['errorhandlerbuilder', 'e']]
camel sample_4696

['public void onErrorHandlerRemove(RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder) {', 'if (!initialized) {', 'return;', '}', 'Object me = getManagementObjectStrategy().getManagedObjectForErrorHandler(camelContext, routeContext, errorHandler, errorHandlerBuilder);', 'if (me != null) {', 'try {', 'unmanageObject(me);', '} catch (Exception e) {']
['could not unregister error handler as errorhandler mbean ', ['me', 'e']]
camel sample_4696

['public void onThreadPoolAdd(CamelContext camelContext, ThreadPoolExecutor threadPool, String id, String sourceId, String routeId, String threadPoolProfileId) {', 'if (!shouldRegister(threadPool, null)) {', 'return;', '}', 'Object mtp = getManagementObjectStrategy().getManagedObjectForThreadPool(camelContext, threadPool, id, sourceId, routeId, threadPoolProfileId);', 'if (getManagementStrategy().isManaged(mtp, null)) {']
['the thread pool is already managed ', ['threadpool']]
camel sample_4696

['return;', '}', 'Object mtp = getManagementObjectStrategy().getManagedObjectForThreadPool(camelContext, threadPool, id, sourceId, routeId, threadPoolProfileId);', 'if (getManagementStrategy().isManaged(mtp, null)) {', 'return;', '}', 'try {', 'manageObject(mtp);', 'managedThreadPools.put(threadPool, mtp);', '} catch (Exception e) {']
['could not register thread pool as threadpool mbean ', ['threadpool', 'e']]
camel sample_4696

['public void onThreadPoolRemove(CamelContext camelContext, ThreadPoolExecutor threadPool) {', 'if (!initialized) {', 'return;', '}', 'Object mtp = managedThreadPools.remove(threadPool);', 'if (mtp != null) {', 'if (!getManagementStrategy().isManaged(mtp, null)) {']
['the thread pool is not managed ', ['threadpool']]
camel sample_4696

['return;', '}', 'Object mtp = managedThreadPools.remove(threadPool);', 'if (mtp != null) {', 'if (!getManagementStrategy().isManaged(mtp, null)) {', 'return;', '}', 'try {', 'unmanageObject(mtp);', '} catch (Exception e) {']
['could not unregister threadpool mbean ', ['e']]
camel sample_4696

['protected boolean shouldRegister(Object service, Route route) {', 'if (!initialized) {', 'return false;', '}']
['checking whether to register from route ', ['service', 'route']]
camel sample_4696

['public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {', 'boolean load = camelContext.getManagementStrategy().getManagementAgent().getLoadStatisticsEnabled() != null && camelContext.getManagementStrategy().getManagementAgent().getLoadStatisticsEnabled();', 'boolean disabled = !load || camelContext.getManagementStrategy().getStatisticsLevel() == ManagementStatisticsLevel.Off;']
['load performance statistics disabled enabled ', ['disabled']]
camel sample_4696

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GooglePubsubComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-pubsub.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-pubsub.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1181

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['mock exception ', ['exception', 'class', 'maximumredeliveries', 'redelivery', 'count', 'retryattemptedloglevel', 'logginglevel', 'info', 'retriesexhaustedloglevel', 'logginglevel', 'error', 'redeliverydelay', 'to', 'handled', 'true']]
camel sample_6644

['protected void doStart() throws Exception {', 'super.doStart();']
['using schema resource ', ['this', 'resourceuri']]
camel sample_16745

['public void run() {', 'String threadName = Thread.currentThread().getName();']
['runnable starting ', ['threadname', 'id']]
camel sample_13814

['public void run() {', 'String threadName = Thread.currentThread().getName();', 'int currentRun = 0;', 'started = true;', 'try {', 'while (started && ++currentRun <= runCount) {', 'Thread.sleep(SLEEP_MILLIS);']
['runnable running of runs ', ['threadname', 'id', 'currentrun', 'runcount']]
camel sample_13814

['public void run() {', 'String threadName = Thread.currentThread().getName();', 'int currentRun = 0;', 'started = true;', 'try {', 'while (started && ++currentRun <= runCount) {', 'Thread.sleep(SLEEP_MILLIS);', '}', '} catch (InterruptedException e) {']
['runnable interrupted on run ', ['threadname', 'id', 'currentrun']]
camel sample_13814

['public void run() {', 'String threadName = Thread.currentThread().getName();', 'int currentRun = 0;', 'started = true;', 'try {', 'while (started && ++currentRun <= runCount) {', 'Thread.sleep(SLEEP_MILLIS);', '}', '} catch (InterruptedException e) {', '} finally {']
['runnable exiting after runs ', ['threadname', 'id', 'currentrun']]
camel sample_13814

['if (sync) {', 'latch = new CountDownLatch(1);', 'ResponseHandler handler = (ResponseHandler) session.getHandler();', 'handler.reset();', '}', 'if (LOG.isDebugEnabled()) {', 'Object out = body;', 'if (body instanceof byte[]) {', 'out = exchange.getContext().getTypeConverter().convertTo(String.class, body);', '}']
['writing body ', ['out']]
camel sample_7690

['handler.reset();', '}', 'if (LOG.isDebugEnabled()) {', 'Object out = body;', 'if (body instanceof byte[]) {', 'out = exchange.getContext().getTypeConverter().convertTo(String.class, body);', '}', '}', 'MinaHelper.writeBody(session, body, exchange);', 'if (sync) {']
['waiting for response using timeout millis ', ['timeout']]
camel sample_7690

['close = exchange.getOut().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getEndpoint().getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {', 'if (LOG.isDebugEnabled()) {']
['closing session when complete at address ', ['getendpoint', 'getaddress']]
camel sample_7690

['protected void doStop() throws Exception {', 'if (LOG.isDebugEnabled()) {']
['stopping connector at address ', ['connector', 'getendpoint', 'getaddress']]
camel sample_7690

['private void openConnection() {', 'SocketAddress address = getEndpoint().getAddress();', 'connector = getEndpoint().getConnector();', 'if (LOG.isDebugEnabled()) {']
['creating connector to address using connector timeout millis ', ['new', 'object', 'address', 'connector', 'timeout']]
camel sample_7690

['public void messageReceived(IoSession ioSession, Object message) throws Exception {']
['message received ', ['message']]
camel sample_7690

['public void sessionClosed(IoSession session) throws Exception {', 'if (sync && !messageReceived) {', 'if (LOG.isDebugEnabled()) {']
['session closed but no message received from address ', ['this', 'endpoint', 'getaddress']]
camel sample_7690

['public void exceptionCaught(IoSession ioSession, Throwable cause) {']
['exception on receiving message from address using connector ', ['this', 'endpoint', 'getaddress', 'this', 'endpoint', 'getconnector', 'cause']]
camel sample_7690

['if (channel == null) {', 'channel = new JChannel(jgroupsConfig);', 'lockService = new LockService(channel);', '}', 'channel.connect(jgroupsClusterName);', 'lock = lockService.getLock(lockName);', 'final CamelContext context = ObjectHelper.notNull(getCamelContext(), "CamelContext");', 'executor = context.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "JGroupsLockClusterView-" + getClusterService().getId() + "-" + lockName);', 'executor.execute(new Runnable() {', 'public void run() {']
['attempting to become master acquiring the lock for group in jgroups cluster with configuration ', ['lockname', 'jgroupsclustername', 'jgroupsconfig']]
camel sample_16929

['}', 'channel.connect(jgroupsClusterName);', 'lock = lockService.getLock(lockName);', 'final CamelContext context = ObjectHelper.notNull(getCamelContext(), "CamelContext");', 'executor = context.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "JGroupsLockClusterView-" + getClusterService().getId() + "-" + lockName);', 'executor.execute(new Runnable() {', 'public void run() {', 'lock.lock();', 'isMaster = true;', 'fireLeadershipChangedEvent(Optional.ofNullable(localMember));']
['became master by acquiring the lock for group in jgroups cluster with configuration ', ['lockname', 'jgroupsclustername', 'jgroupsconfig']]
camel sample_16929

['public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) {', 'if (deleteOrphanLockFiles) {', 'String dir = endpoint.getConfiguration().getDirectory();', 'File file = new File(dir);']
['prepare on startup by deleting orphaned lock files from ', ['dir']]
camel sample_4815

['public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) {', 'if (deleteOrphanLockFiles) {', 'String dir = endpoint.getConfiguration().getDirectory();', 'File file = new File(dir);', 'Pattern excludePattern = endpoint.getExcludePattern();', 'Pattern includePattern = endpoint.getIncludePattern();', 'String endpointPath = endpoint.getConfiguration().getDirectory();', 'StopWatch watch = new StopWatch();', 'deleteLockFiles(file, endpoint.isRecursive(), endpointPath, endpoint.getFilter(), endpoint.getAntFilter(), excludePattern, includePattern);', 'if (watch.taken() > 1000) {']
['prepared on startup by deleting orphaned lock files from took millis to complete ', ['dir', 'watch', 'taken']]
camel sample_4815

['public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {', 'if (!markerFile) {', 'return true;', '}', 'String lockFileName = getLockFileName(file);']
['locking the file using the lock file name ', ['file', 'lockfilename']]
camel sample_4815

['protected void doReleaseExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {', 'if (!markerFile) {', 'return;', '}', 'boolean acquired = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_ACQUIRED), false, Boolean.class);', 'if (acquired) {', 'String lockFileName = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_NAME), String.class);', 'File lock = new File(lockFileName);', 'if (lock.exists()) {']
['unlocking file ', ['lockfilename']]
camel sample_4815

['protected void doReleaseExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {', 'if (!markerFile) {', 'return;', '}', 'boolean acquired = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_ACQUIRED), false, Boolean.class);', 'if (acquired) {', 'String lockFileName = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_NAME), String.class);', 'File lock = new File(lockFileName);', 'if (lock.exists()) {', 'boolean deleted = FileUtil.deleteFile(lock);']
['lock file was deleted ', ['lockfilename', 'deleted']]
camel sample_4815

['} else {', 'targetFile = new File(target);', '}', '}', 'boolean accept = acceptFile(targetFile, endpointPath, filter, antFilter, excludePattern, includePattern);', 'if (!accept) {', 'continue;', '}', '}', 'if (file.getName().endsWith(FileComponent.DEFAULT_LOCK_FILE_POSTFIX)) {']
['deleting orphaned lock file ', ['file']]
camel sample_4815

['public void testJettyAsyncTimeout() throws Exception {', 'getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");', 'StopWatch watch = new StopWatch();', 'try {', 'template.requestBody("http: fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['timeout hit and client got reply with failure status code ', []]
camel sample_10957

['public void testPerformance() {', 'DefaultUuidGenerator uuidGenerator = new DefaultUuidGenerator();', 'StopWatch watch = new StopWatch();']
['first id ', ['uuidgenerator', 'generateuuid']]
camel sample_1314

['public void testPerformance() {', 'DefaultUuidGenerator uuidGenerator = new DefaultUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['last id ', ['uuidgenerator', 'generateuuid']]
camel sample_1314

['public void testPerformance() {', 'DefaultUuidGenerator uuidGenerator = new DefaultUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['took ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_1314

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Pod pod = exchange.getIn().getBody(Pod.class);']
['got event with pod name and action ', ['pod', 'getmetadata', 'getname', 'in', 'getheader', 'kubernetesconstants', 'kubernetes', 'event', 'action']]
camel sample_13228

['private boolean execute(ServiceDefinition server, Exchange exchange, AsyncCallback callback) throws Exception {', 'String host = server.getHost();', 'int port = server.getPort();']
['service active at server ', ['name', 'host', 'port']]
camel sample_4116

['protected final void bind(String key, Processor processor) {', 'if (handlers.containsKey(key)) {']
['a processor is already set for action ', ['key']]
camel sample_4053

['protected void doStart() throws Exception {', 'if ("1.2".equals(version)) {']
['using soap adapter ', []]
camel sample_9661

['protected void doStart() throws Exception {', 'if ("1.2".equals(version)) {', 'adapter = new Soap12DataFormatAdapter(this);', '} else {']
['using soap adapter ', []]
camel sample_9661

['bodyParts.add(o);', '}', '}', '} else {', 'bodyParts.add(inputObject);', '}', 'List<Object> bodyElements = new ArrayList<Object>();', 'for (Object bodyObj : bodyParts) {', 'QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass());', 'if (name == null) {']
['could not find qname for class ', ['bodyobj', 'getclass', 'getname']]
camel sample_9661

['QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass());', 'if (name == null) {', 'continue;', '} else {', 'bodyElements.add(getElement(bodyObj, name));', '}', '}', 'for (Object headerObj : headerParts) {', 'QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass());', 'if (name == null) {']
['could not find qname for class ', ['headerobj', 'getclass', 'getname']]
camel sample_9661

['public <T> T evaluate(Exchange exchange, Class<T> tClass) {', 'ExpressionFactory factory = getExpressionFactory(exchange.getContext());', 'ELContext context = populateContext(createContext(), exchange);', 'ValueExpression valueExpression = factory.createValueExpression(context, expression, type);', 'Object value = valueExpression.getValue(context);']
['value returned ', ['value']]
camel sample_12985

['public synchronized ExpressionFactory getExpressionFactory(CamelContext context) {', 'if (expressionFactory == null && context != null) {', 'try {', 'FactoryFinder finder = context.getFactoryFinder("META-INF/services/org/apache/camel/language/");', 'Class<?> clazz = finder.findClass("el", "impl.", ExpressionFactory.class);', 'if (clazz != null) {', 'expressionFactory = (ExpressionFactory)clazz.newInstance();', '}', '} catch (ClassNotFoundException e) {']
['impl class not found ', ['e']]
camel sample_12985

['public synchronized ExpressionFactory getExpressionFactory(CamelContext context) {', 'if (expressionFactory == null && context != null) {', 'try {', 'FactoryFinder finder = context.getFactoryFinder("META-INF/services/org/apache/camel/language/");', 'Class<?> clazz = finder.findClass("el", "impl.", ExpressionFactory.class);', 'if (clazz != null) {', 'expressionFactory = (ExpressionFactory)clazz.newInstance();', '}', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {']
['no impl class for juel expressionfactory defined in meta inf services org apache camel language el ', ['e']]
camel sample_12985

['if (expressionFactory == null && context != null) {', 'try {', 'FactoryFinder finder = context.getFactoryFinder("META-INF/services/org/apache/camel/language/");', 'Class<?> clazz = finder.findClass("el", "impl.", ExpressionFactory.class);', 'if (clazz != null) {', 'expressionFactory = (ExpressionFactory)clazz.newInstance();', '}', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {', '} catch (InstantiationException e) {']
['failed to instantiate juel expressionfactory implementation class ', ['e']]
camel sample_12985

['try {', 'FactoryFinder finder = context.getFactoryFinder("META-INF/services/org/apache/camel/language/");', 'Class<?> clazz = finder.findClass("el", "impl.", ExpressionFactory.class);', 'if (clazz != null) {', 'expressionFactory = (ExpressionFactory)clazz.newInstance();', '}', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {', '} catch (InstantiationException e) {', '} catch (IllegalAccessException e) {']
['failed to instantiate juel expressionfactory implementation class ', ['e']]
camel sample_12985

['public RouteDefinition adviceWith(ModelCamelContext camelContext, RouteBuilder builder) throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext");', 'ObjectHelper.notNull(builder, "RouteBuilder");']
['advicewith route before ', ['this']]
camel sample_5212

['public RouteDefinition adviceWith(ModelCamelContext camelContext, RouteBuilder builder) throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext");', 'ObjectHelper.notNull(builder, "RouteBuilder");', 'if (builder instanceof AdviceWithRouteBuilder) {', '((AdviceWithRouteBuilder) builder).setOriginalRoute(this);', '}', 'RoutesDefinition routes = builder.configureRoutes(camelContext);']
['advicewith routes ', ['routes']]
camel sample_5212

['}', 'camelContext.removeRouteDefinition(this);', 'if (builder instanceof AdviceWithRouteBuilder) {', 'List<AdviceWithTask> tasks = ((AdviceWithRouteBuilder) builder).getAdviceWithTasks();', 'for (AdviceWithTask task : tasks) {', 'task.task();', '}', '}', 'RouteDefinition merged = routes.route(this);', 'camelContext.getRouteDefinitions().add(0, merged);']
['advicewith route after ', ['merged']]
camel sample_5212

['protected RouteContext addRoutes(CamelContext camelContext, Collection<Route> routes, FromDefinition fromType) throws Exception {', 'RouteContext routeContext = new DefaultRouteContext(camelContext, this, fromType, routes);', 'if (trace != null) {', 'Boolean isTrace = CamelContextHelper.parseBoolean(camelContext, getTrace());', 'if (isTrace != null) {', 'routeContext.setTracing(isTrace);', 'if (isTrace) {']
['tracing is enabled on route ', ['getid']]
camel sample_5212

['routeContext.setTracing(isTrace);', 'if (isTrace) {', '}', '}', '}', 'if (messageHistory != null) {', 'Boolean isMessageHistory = CamelContextHelper.parseBoolean(camelContext, getMessageHistory());', 'if (isMessageHistory != null) {', 'routeContext.setMessageHistory(isMessageHistory);', 'if (isMessageHistory) {']
['message history is enabled on route ', ['getid']]
camel sample_5212

['routeContext.setMessageHistory(isMessageHistory);', 'if (isMessageHistory) {', '}', '}', '}', 'if (logMask != null) {', 'Boolean isLogMask = CamelContextHelper.parseBoolean(camelContext, getLogMask());', 'if (isLogMask != null) {', 'routeContext.setLogMask(isLogMask);', 'if (isLogMask) {']
['security mask for logging is enabled on route ', ['getid']]
camel sample_5212

['routeContext.setLogMask(isLogMask);', 'if (isLogMask) {', '}', '}', '}', 'if (streamCache != null) {', 'Boolean isStreamCache = CamelContextHelper.parseBoolean(camelContext, getStreamCache());', 'if (isStreamCache != null) {', 'routeContext.setStreamCaching(isStreamCache);', 'if (isStreamCache) {']
['streamcaching is enabled on route ', ['getid']]
camel sample_5212

['routeContext.setStreamCaching(isStreamCache);', 'if (isStreamCache) {', '}', '}', '}', 'if (handleFault != null) {', 'Boolean isHandleFault = CamelContextHelper.parseBoolean(camelContext, getHandleFault());', 'if (isHandleFault != null) {', 'routeContext.setHandleFault(isHandleFault);', 'if (isHandleFault) {']
['handlefault is enabled on route ', ['getid']]
camel sample_5212

['addInterceptStrategy(new HandleFault());', '}', '}', '}', '}', 'if (delayer != null) {', 'Long delayer = CamelContextHelper.parseLong(camelContext, getDelayer());', 'if (delayer != null) {', 'routeContext.setDelayer(delayer);', 'if (delayer > 0) {']
['delayer is enabled with ms on route ', ['delayer', 'getid']]
camel sample_5212

['}', '}', '}', '}', 'if (delayer != null) {', 'Long delayer = CamelContextHelper.parseLong(camelContext, getDelayer());', 'if (delayer != null) {', 'routeContext.setDelayer(delayer);', 'if (delayer > 0) {', '} else {']
['delayer is disabled on route ', ['getid']]
camel sample_5212

['Long delayer = CamelContextHelper.parseLong(camelContext, getDelayer());', 'if (delayer != null) {', 'routeContext.setDelayer(delayer);', 'if (delayer > 0) {', '} else {', '}', '}', '}', 'if (routePolicies != null && !routePolicies.isEmpty()) {', 'for (RoutePolicy policy : routePolicies) {']
['routepolicy is enabled on route ', ['policy', 'getid']]
camel sample_5212

['if (routePolicies != null && !routePolicies.isEmpty()) {', 'for (RoutePolicy policy : routePolicies) {', 'routeContext.getRoutePolicyList().add(policy);', '}', '}', 'if (routePolicyRef != null) {', 'StringTokenizer policyTokens = new StringTokenizer(routePolicyRef, ",");', 'while (policyTokens.hasMoreTokens()) {', 'String ref = policyTokens.nextToken().trim();', 'RoutePolicy policy = CamelContextHelper.mandatoryLookup(camelContext, ref, RoutePolicy.class);']
['routepolicy is enabled on route ', ['policy', 'getid']]
camel sample_5212

['while (policyTokens.hasMoreTokens()) {', 'String ref = policyTokens.nextToken().trim();', 'RoutePolicy policy = CamelContextHelper.mandatoryLookup(camelContext, ref, RoutePolicy.class);', 'routeContext.getRoutePolicyList().add(policy);', '}', '}', 'if (camelContext.getRoutePolicyFactories() != null) {', 'for (RoutePolicyFactory factory : camelContext.getRoutePolicyFactories()) {', 'RoutePolicy policy = factory.createRoutePolicy(camelContext, getId(), this);', 'if (policy != null) {']
['routepolicy is enabled on route ', ['policy', 'getid']]
camel sample_5212

['if (camelContext.getRoutePolicyFactories() != null) {', 'for (RoutePolicyFactory factory : camelContext.getRoutePolicyFactories()) {', 'RoutePolicy policy = factory.createRoutePolicy(camelContext, getId(), this);', 'if (policy != null) {', 'routeContext.getRoutePolicyList().add(policy);', '}', '}', '}', 'Boolean isAutoStartup = CamelContextHelper.parseBoolean(camelContext, getAutoStartup());', 'if (isAutoStartup != null) {']
['using autostartup on route ', ['isautostartup', 'getid']]
camel sample_5212

['if (policy != null) {', 'routeContext.getRoutePolicyList().add(policy);', '}', '}', '}', 'Boolean isAutoStartup = CamelContextHelper.parseBoolean(camelContext, getAutoStartup());', 'if (isAutoStartup != null) {', 'routeContext.setAutoStartup(isAutoStartup);', '}', 'if (shutdownRoute != null) {']
['using shutdownroute on route ', ['getshutdownroute', 'getid']]
camel sample_5212

['}', '}', 'Boolean isAutoStartup = CamelContextHelper.parseBoolean(camelContext, getAutoStartup());', 'if (isAutoStartup != null) {', 'routeContext.setAutoStartup(isAutoStartup);', '}', 'if (shutdownRoute != null) {', 'routeContext.setShutdownRoute(getShutdownRoute());', '}', 'if (shutdownRunningTask != null) {']
['using shutdownrunningtask on route ', ['getshutdownrunningtask', 'getid']]
camel sample_5212

['public void doSomething(String body) {', 'ObjectHelper.notNull(destination, "destination");']
['received body ', ['body']]
camel sample_15743

['protected void doStart() throws Exception {', 'try {', 'super.doStart();', '} finally {', 'final HttpClient httpClient = getConfiguration().getHttpClient();', 'if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {', 'final String endpointUri = getEndpointUri();']
['starting http client for ', ['endpointuri']]
camel sample_14781

['protected void doStart() throws Exception {', 'try {', 'super.doStart();', '} finally {', 'final HttpClient httpClient = getConfiguration().getHttpClient();', 'if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {', 'final String endpointUri = getEndpointUri();', 'httpClient.start();']
['started http client for ', ['endpointuri']]
camel sample_14781

['protected void doStop() throws Exception {', 'try {', 'super.doStop();', '} finally {', 'final HttpClient httpClient = getConfiguration().getHttpClient();', 'if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {', 'final String endpointUri = getEndpointUri();']
['stopping http client for ', ['endpointuri']]
camel sample_14781

['protected void doStop() throws Exception {', 'try {', 'super.doStop();', '} finally {', 'final HttpClient httpClient = getConfiguration().getHttpClient();', 'if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {', 'final String endpointUri = getEndpointUri();', 'httpClient.stop();']
['stopped http client for ', ['endpointuri']]
camel sample_14781

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BoonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.boon.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.boon.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1178

['private void updateValue(final ObjectAddress address, final Value<?> value) {', 'try {', 'final Exchange exchange = getEndpoint().createExchange();', 'exchange.setIn(mapMessage(value));', 'getAsyncProcessor().process(exchange);', '} catch (final Exception e) {']
['failed to process message ', ['e']]
camel sample_6717

['public static Exchange toExchange(Endpoint endpoint, SessionID sessionID, Message message, QuickfixjEventCategory eventCategory, ExchangePattern exchangePattern) {', 'Exchange exchange = endpoint.createExchange(exchangePattern);', 'org.apache.camel.Message camelMessage = exchange.getIn();', 'camelMessage.setHeader(EVENT_CATEGORY_KEY, eventCategory);', 'camelMessage.setHeader(SESSION_ID_KEY, sessionID);', 'if (message != null) {', 'try {', 'camelMessage.setHeader(MESSAGE_TYPE_KEY, message.getHeader().getString(MsgType.FIELD));', '} catch (FieldNotFound e) {']
['message type field not found in qfj message continuing ', ['message']]
camel sample_10668

['protected void assertCorrectBytesReceived() {', 'Exchange exchange = endpoint.getReceivedExchanges().get(0);', 'assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class));', 'JmsMessage in = (JmsMessage) exchange.getIn();', 'assertNotNull(in);', 'byte[] bytes = exchange.getIn().getBody(byte[].class);']
['received bytes ', ['arrays', 'tostring', 'bytes']]
camel sample_7043

['private void doStopRoute(RouteHolder route,  boolean checker, ThrowingConsumer<RouteHolder, Exception> consumer) throws Exception {', 'synchronized (lock) {', 'if (checker) {', 'routeManager.release(route);', '}']
['route has been requested to stop stop supervising it ', ['route', 'getid']]
camel sample_4141

['public void onInit(Route route) {', 'final String autoStartup = route.getRouteContext().getRoute().getAutoStartup();', 'if (ObjectHelper.equalIgnoreCase("false", autoStartup)) {']
['route won t be supervised reason has explicit auto startup flag set to false ', ['route', 'getid']]
camel sample_4141

['public void onInit(Route route) {', 'final String autoStartup = route.getRouteContext().getRoute().getAutoStartup();', 'if (ObjectHelper.equalIgnoreCase("false", autoStartup)) {', 'return;', '}', 'for (Filter filter : filters) {', 'FilterResult result = filter.apply(route);', 'if (!result.supervised()) {']
['route won t be supervised reason ', ['route', 'getid', 'result', 'reason']]
camel sample_4141

['FilterResult result = filter.apply(route);', 'if (!result.supervised()) {', 'return;', '}', '}', 'RouteHolder holder = new RouteHolder(route, routeCount.incrementAndGet());', 'if (routes.add(holder)) {', 'holder.getContext().setRouteController(SupervisingRouteController.this);', 'holder.getDefinition().setAutoStartup("false");', 'if (contextStarted.get()) {']
['context is already started attempt to start route ', ['route', 'getid']]
camel sample_4141

['if (!result.supervised()) {', 'return;', '}', '}', 'RouteHolder holder = new RouteHolder(route, routeCount.incrementAndGet());', 'if (routes.add(holder)) {', 'holder.getContext().setRouteController(SupervisingRouteController.this);', 'holder.getDefinition().setAutoStartup("false");', 'if (contextStarted.get()) {', 'if (initialDelay.toMillis() > 0) {']
['route will be started in ', ['holder', 'getid', 'initialdelay']]
camel sample_4141

['if (routes.add(holder)) {', 'holder.getContext().setRouteController(SupervisingRouteController.this);', 'holder.getDefinition().setAutoStartup("false");', 'if (contextStarted.get()) {', 'if (initialDelay.toMillis() > 0) {', 'executorService.schedule(() -> startRoute(holder), initialDelay.toMillis(), TimeUnit.MILLISECONDS);', '} else {', 'startRoute(holder);', '}', '} else {']
['context is not yet started defer route start ', ['holder', 'getid']]
camel sample_4141

['private void onCamelContextStarted() {', 'if (contextStarted.compareAndSet(false, true)) {', 'if (initialDelay.toMillis() > 0) {']
['routes will be started in ', ['initialdelay']]
camel sample_4141

['public void testSuspendResume() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();']
['Suspending ', []]
camel sample_1343

['mock.expectedMessageCount(0);', 'context.suspendRoute("foo");', 'assertEquals("Suspended", context.getRouteStatus("foo").name());', 'Route route = context.getRoute("foo");', 'if (route instanceof StatefulService) {', 'assertEquals("Suspended", ((StatefulService) route).getStatus().name());', '}', 'await().atMost(1, TimeUnit.SECONDS).until(() -> context.getEndpoint("seda:foo", SedaEndpoint.class).getQueue().size() == 0);', 'template.sendBody("seda:foo", "B");', 'mock.assertIsSatisfied(100);']
['Resuming ', []]
camel sample_1343

['conn.setAutoCommit(false);', '}', 'shouldCloseResources = createAndExecuteSqlStatement(exchange, sql, conn);', 'conn.commit();', '} catch (Exception e) {', 'try {', 'if (conn != null) {', 'conn.rollback();', '}', '} catch (Throwable sqle) {']
['error occurred during jdbc rollback this exception will be ignored ', ['sqle']]
camel sample_14040

['throw new IllegalArgumentException( "Header specifying expected returning columns isn\'t an instance of String[] or int[] but " + expectedGeneratedColumns.getClass());', '}', '} else {', 'ps = conn.prepareStatement(preparedQuery);', '}', 'int expectedCount = ps.getParameterMetaData().getParameterCount();', 'if (expectedCount > 0) {', 'Iterator<?> it = getEndpoint().getPrepareStatementStrategy() .createPopulateIterator(sql, preparedQuery, expectedCount, exchange, exchange.getIn().getBody());', 'getEndpoint().getPrepareStatementStrategy().populateStatement(ps, it, expectedCount);', '}']
['executing jdbc preparedstatement ', ['sql']]
camel sample_14040

['private boolean doCreateAndExecuteSqlStatement(Exchange exchange, String sql, Connection conn) throws Exception {', 'Statement stmt = null;', 'ResultSet rs = null;', 'boolean shouldCloseResources = true;', 'try {', 'stmt = conn.createStatement();', 'if (parameters != null && !parameters.isEmpty()) {', 'Map<String, Object> copy = new HashMap<String, Object>(parameters);', 'IntrospectionSupport.setProperties(stmt, copy);', '}']
['executing jdbc statement ', ['sql']]
camel sample_14040

['private void closeQuietly(ResultSet rs) {', 'if (rs != null) {', 'try {', 'if (!rs.isClosed()) {', 'rs.close();', '}', '} catch (Throwable sqle) {']
['error by closing result set ', ['sqle']]
camel sample_14040

['private void closeQuietly(Statement stmt) {', 'if (stmt != null) {', 'try {', 'if (!stmt.isClosed()) {', 'stmt.close();', '}', '} catch (Throwable sqle) {']
['error by closing statement ', ['sqle']]
camel sample_14040

['private void resetAutoCommit(Connection con, Boolean autoCommit) {', 'if (con != null && autoCommit != null) {', 'try {', 'con.setAutoCommit(autoCommit);', '} catch (Throwable sqle) {']
['error by resetting auto commit to its original value ', ['sqle']]
camel sample_14040

['private void closeQuietly(Connection con) {', 'if (con != null) {', 'try {', 'if (!con.isClosed()) {', 'con.close();', '}', '} catch (Throwable sqle) {']
['error by closing connection ', ['sqle']]
camel sample_14040

['}', 'final ExchangePattern existingPattern = exchange.getPattern();', 'final Endpoint endpoint;', 'final ExchangePattern destinationExchangePattern;', 'Object recipient = null;', 'try {', 'recipient = expression.evaluate(exchange, Object.class);', 'endpoint = resolveEndpoint(exchange, recipient);', 'if (endpoint == null) {', 'if (LOG.isDebugEnabled()) {']
['send dynamic evaluated as null so cannot send to any endpoint ', []]
camel sample_4511

['if (endpoint == null) {', 'if (LOG.isDebugEnabled()) {', '}', 'callback.done(true);', 'return true;', '}', 'destinationExchangePattern = EndpointHelper.resolveExchangePatternFromUrl(endpoint.getEndpointUri());', '} catch (Throwable e) {', 'if (isIgnoreInvalidEndpoint()) {', 'if (LOG.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['recipient', 'e']]
camel sample_4511

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);']
['dynamicsendto is not using producercache ', ['this']]
camel sample_4511

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);', '} else if (cacheSize == 0) {', 'producerCache = new ProducerCache(this, camelContext);']
['dynamicsendto using producercache with default cache size ', ['this']]
camel sample_4511

['public void process(Exchange exchange) throws Exception {', 'String remotePath = DropboxHelper.getRemotePath(configuration, exchange);', 'DropboxConfigurationValidator.validateDelOp(remotePath);', 'DropboxDelResult result = new DropboxAPIFacade(configuration.getClient(), exchange) .del(remotePath);', 'exchange.getIn().setHeader(DropboxResultHeader.DELETED_PATH.name(), result.getEntry());', 'exchange.getIn().setBody(result.getEntry());']
['deleted ', ['remotepath']]
camel sample_8498

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final long priority = BeanstalkExchangeHelper.getPriority(endpoint, exchange.getIn());', 'final boolean result = client.bury(jobId, priority);', 'if (!result && LOG.isWarnEnabled()) {']
['failed to bury job d with priority d ', ['string', 'format', 'jobid', 'priority']]
camel sample_8162

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final long priority = BeanstalkExchangeHelper.getPriority(endpoint, exchange.getIn());', 'final boolean result = client.bury(jobId, priority);', 'if (!result && LOG.isWarnEnabled()) {', '} else if (LOG.isDebugEnabled()) {']
['job d buried with priority d result is b ', ['string', 'format', 'jobid', 'priority', 'result']]
camel sample_8162

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_14943

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_14943

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_14943

['sshd.setCommandFactory(new ScpCommandFactory());', 'sshd.setPasswordAuthenticator((username, password, session) -> true);', 'sshd.setPublickeyAuthenticator((username, password, session) -> true);', 'sshd.start();', '} catch (Exception e) {', 'NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e);', 'if (nsae != null) {', 'canTest = false;', 'String name = System.getProperty("os.name");', 'String message = nsae.getMessage();']
['is not avail on this platform testing is skipped real cause ', ['name', 'message']]
camel sample_15201

['public void testReceivingFileFromCache() throws Exception {']
['beginning test testreceivingfilefromcache ', []]
camel sample_10516

['public void process(Exchange exchange) throws Exception {', 'exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8");', 'Message in = exchange.getIn();', 'in.setHeader(CacheConstants.CACHE_OPERATION, operation);', 'in.setHeader(CacheConstants.CACHE_KEY, "greeting");', 'in.setBody("Hello World");', '}', '});', '}', 'resultEndpoint.assertIsSatisfied();']
['completed test testreceivingfilefromcache ', []]
camel sample_10516

['public void testReceivingSerializedObjectFromCache() throws Exception {']
['beginning test testreceivingserializedobjectfromcache ', []]
camel sample_10516

['p.setPoem("Brahma");', 'exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8");', 'Message in = exchange.getIn();', 'in.setHeader(CacheConstants.CACHE_OPERATION, operation);', 'in.setHeader(CacheConstants.CACHE_KEY, "poetry");', 'in.setBody(p);', '}', '});', '}', 'resultEndpoint.assertIsSatisfied();']
['completed test testreceivingfilefromcache ', []]
camel sample_10516

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['cache event notification ', []]
camel sample_10516

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['received notification for the following activity in cache ', []]
camel sample_10516

['public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {', 'log.debug("Operation = {}", operation);', 'log.debug("key = {}", key);', 'log.debug("value = {}", data);']
['end cache event notification ', []]
camel sample_10516

['public void testCreate() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("create result", result);']
['create ', ['result']]
camel sample_17379

['public void testFind() throws Exception {', 'final com.braintreegateway.PaymentMethodNonce result = requestBody("direct: assertNotNull("find result", result);']
['find ', ['result']]
camel sample_17379

['addServicesOnStartup(map);', 'List<KeyValueHolder<String, KeyValueHolder<Object, Dictionary>>> servicesList = new LinkedList<KeyValueHolder<String, KeyValueHolder<Object, Dictionary>>>();', 'for (Map.Entry<String, KeyValueHolder<Object, Dictionary>> entry : map.entrySet()) {', 'servicesList.add(asKeyValueService(entry.getKey(), entry.getValue().getKey(), entry.getValue().getValue()));', '}', 'addServicesOnStartup(servicesList);', 'for (KeyValueHolder<String, KeyValueHolder<Object, Dictionary>> item : servicesList) {', 'String clazz = item.getKey();', 'Object service = item.getValue().getKey();', 'Dictionary dict = item.getValue().getValue();']
['registering service ', ['clazz', 'service']]
camel sample_10146

['if (currentProperties == null) {', 'currentProperties = newProps;', '}', 'for (Enumeration<String> ek = currentProperties.keys(); ek.hasMoreElements();) {', 'String k = ek.nextElement();', 'newProps.put(k, currentProperties.get(k));', '}', 'for (String p : ((Properties) props).stringPropertyNames()) {', 'newProps.put(p, ((Properties) props).getProperty(p));', '}']
['updating configadmin by overriding properties ', ['config', 'newprops']]
camel sample_10146

['if (isCreateCamelContextPerClass()) {', 'boolean first = threadLocalBundleContext.get() == null;', 'if (first) {', 'threadLocalBundleContext.set(createBundleContext());', '}', 'bundleContext = threadLocalBundleContext.get();', '} else {', 'bundleContext = createBundleContext();', '}', 'super.setUp();']
['starting camelcontext ', ['context', 'getname']]
camel sample_10146

['boolean first = threadLocalBundleContext.get() == null;', 'if (first) {', 'threadLocalBundleContext.set(createBundleContext());', '}', 'bundleContext = threadLocalBundleContext.get();', '} else {', 'bundleContext = createBundleContext();', '}', 'super.setUp();', 'if (isUseAdviceWith()) {']
['skipping starting camelcontext as isuseadvicewith is set to true ', []]
camel sample_10146

['QName elName2 = strategy.findQNameForSoapActionOrType("getCustomersByName", GetCustomersByName.class);', 'assertEquals("http: assertEquals("getCustomersByName", elName2.getLocalPart());', 'QName elName3 = strategy.findQNameForSoapActionOrType("http: null);', 'assertNull(elName3);', 'QName elName4 = strategy.findQNameForSoapActionOrType("http: null);', 'assertNull(elName4);', 'try {', 'elName = strategy.findQNameForSoapActionOrType("test", Class.class);', 'fail();', '} catch (RuntimeCamelException e) {']
['caught expected message ', ['e', 'getmessage']]
camel sample_9636

['public void testServiceInterfaceStrategyWithServer() {', 'ServiceInterfaceStrategy strategy = new ServiceInterfaceStrategy(CustomerService.class, false);', 'QName elName = strategy.findQNameForSoapActionOrType("", GetCustomersByNameResponse.class);', 'assertEquals("http: assertEquals("getCustomersByNameResponse", elName.getLocalPart());', 'QName elName2 = strategy.findQNameForSoapActionOrType("http: GetCustomersByName.class);', 'assertEquals("http: assertEquals("getCustomersByNameResponse", elName2.getLocalPart());', 'try {', 'elName = strategy.findQNameForSoapActionOrType("test", Class.class);', 'fail();', '} catch (RuntimeCamelException e) {']
['caught expected message ', ['e', 'getmessage']]
camel sample_9636

['public void testServiceInterfaceStrategyWithRequestWrapperAndClient() {', 'ServiceInterfaceStrategy strategy = new ServiceInterfaceStrategy( com.example.customerservice2.CustomerService.class, true);', 'QName elName = strategy.findQNameForSoapActionOrType("", com.example.customerservice2.GetCustomersByName.class);', 'assertEquals("http: assertEquals("getCustomersByName", elName.getLocalPart());', 'try {', 'elName = strategy.findQNameForSoapActionOrType("test", Class.class);', 'fail();', '} catch (RuntimeCamelException e) {']
['caught expected message ', ['e', 'getmessage']]
camel sample_9636

['public void testWithNonWebservice() {', 'try {', 'new ServiceInterfaceStrategy(Object.class, true);', 'fail("Should throw an exception for a class that is no webservice");', '} catch (IllegalArgumentException e) {']
['caught expected message ', ['e', 'getmessage']]
camel sample_9636

['private void appendToStore(String key, String value) {', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Appending {}={} to state filestore: {}", new Object[]{key, value, fileStore});', '}', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {']
['parent directory of file store doesn t exist creating ', ['filestore']]
camel sample_4004

['private void appendToStore(String key, String value) {', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Appending {}={} to state filestore: {}", new Object[]{key, value, fileStore});', '}', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {', 'if (fileStore.getParentFile().mkdirs()) {']
['parent directory of file store successfully created ', ['filestore']]
camel sample_4004

['private void appendToStore(String key, String value) {', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Appending {}={} to state filestore: {}", new Object[]{key, value, fileStore});', '}', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {', 'if (fileStore.getParentFile().mkdirs()) {', '} else {']
['parent directory of file store cannot be created ', ['filestore']]
camel sample_4004

['protected void trunkStore() {']
['trunking state filestore ', ['filestore']]
camel sample_4004

['protected void loadStore() throws IOException {', 'if (!fileStore.exists()) {']
['creating filestore ', ['filestore']]
camel sample_4004

['if (!fileStore.exists()) {', 'File parent = fileStore.getParentFile();', 'if (parent != null) {', 'parent.mkdirs();', '}', 'boolean created = FileUtil.createNewFile(fileStore);', 'if (!created) {', 'throw new IOException("Cannot create filestore: " + fileStore);', '}', '}']
['loading to level cache from state filestore ', ['filestore']]
camel sample_4004

['String value = line.substring(separatorIndex + KEY_VALUE_DELIMITER.length());', 'cache.put(key, value);', '}', '} catch (IOException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'if (scanner != null) {', 'scanner.close();', '}', '}']
['loaded to the level cache from state filestore ', ['cache', 'size', 'filestore']]
camel sample_4004

['protected void doGetBuildConfig(Exchange exchange, String operation) throws Exception {', 'BuildConfig buildConfig = null;', 'String buildConfigName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_BUILD_CONFIG_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(buildConfigName)) {']
['get a specific build config require specify a build config name ', []]
camel sample_13290

['protected void doGetBuildConfig(Exchange exchange, String operation) throws Exception {', 'BuildConfig buildConfig = null;', 'String buildConfigName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_BUILD_CONFIG_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(buildConfigName)) {', 'throw new IllegalArgumentException("Get a specific Build Config require specify a Build Config name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific build config require specify a namespace name ', []]
camel sample_13290

['URL blueprintUrl = ObjectHelper.loadResourceAsURL("org/apache/camel/itest/CamelTypeConverterTest.xml", CamelTypeConverterTest.class.getClassLoader());', 'installBlueprintAsBundle("CamelTypeConverterTest", blueprintUrl, true, bundle -> {', '((TinyBundle) bundle) .add("META-INF/services/org/apache/camel/TypeConverter", new ByteArrayInputStream("org.apache.camel.itest.typeconverter.MyConverter".getBytes())) .add(MyConverter.class, InnerClassStrategy.NONE) .set(Constants.DYNAMICIMPORT_PACKAGE, "*");', '});', 'CamelContext camel = getOsgiService(bundleContext, CamelContext.class);', 'final Pojo pojo = new Pojo();', 'String pojoName = "Constantine";', 'pojo.setName(pojoName);', 'final DefaultExchange exchange = new DefaultExchange(camel);', 'final String string = camel.getTypeConverter().mandatoryConvertTo(String.class, exchange, pojo);']
['pojo string ', ['string']]
camel sample_6469

['installBlueprintAsBundle("CamelTypeConverterTest", blueprintUrl, true, bundle -> {', '((TinyBundle) bundle) .add("META-INF/services/org/apache/camel/TypeConverter", new ByteArrayInputStream("org.apache.camel.itest.typeconverter.MyConverter".getBytes())) .add(MyConverter.class, InnerClassStrategy.NONE) .set(Constants.DYNAMICIMPORT_PACKAGE, "*");', '});', 'CamelContext camel = getOsgiService(bundleContext, CamelContext.class);', 'final Pojo pojo = new Pojo();', 'String pojoName = "Constantine";', 'pojo.setName(pojoName);', 'final DefaultExchange exchange = new DefaultExchange(camel);', 'final String string = camel.getTypeConverter().mandatoryConvertTo(String.class, exchange, pojo);', 'final Pojo copy = camel.getTypeConverter().mandatoryConvertTo(Pojo.class, exchange, string);']
['string pojo ', ['copy']]
camel sample_6469

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JmsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jms.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jms.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_418

['public void testBigPayload() throws Exception {']
['running test for millis ', ['time']]
camel sample_13910

['public void testBigPayload() throws Exception {', 'Thread.sleep(60 * 1000);', 'File file = new File("target/data/leveldb.dat");', 'assertTrue(file + " should exists", file.exists());', 'long size = file.length();']
['size is ', ['file', 'size']]
camel sample_13910

['public void testSyncSyncMethodInSync() throws Exception {']
['grpc pingsyncsync method blocking test start ', []]
camel sample_7501

['public void testSyncAsyncMethodInSync() throws Exception {']
['grpc pingsyncasync method blocking test start ', []]
camel sample_7501

['public void testSyncSyncMethodInAsync() throws Exception {']
['grpc pingsyncsync method aync test start ', []]
camel sample_7501

['public void testSyncAsyncMethodInAsync() throws Exception {']
['grpc pingsyncasync method aync test start ', []]
camel sample_7501

['public void testAsyncSyncMethodInAsync() throws Exception {']
['grpc pingasyncsync method aync test start ', []]
camel sample_7501

['public void testAsyncAsyncMethodInAsync() throws Exception {']
['grpc pingasyncasync method aync test start ', []]
camel sample_7501

['public void onError(Throwable t) {']
['Exception ', ['t']]
camel sample_7501

['public void startThriftZlibClient() throws IOException, TTransportException {', 'if (transport == null) {']
['connecting to the thrift server with zlib compression on port ', ['thrift', 'test', 'port']]
camel sample_13013

['public void startThriftZlibClient() throws IOException, TTransportException {', 'if (transport == null) {', 'transport = new TSocket("localhost", THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT);', 'protocol = new TBinaryProtocol(new TZlibTransport(transport));', 'thriftClient = new Calculator.Client(protocol);', 'transport.open();']
['connected to the thrift server with zlib compression ', []]
camel sample_13013

['public void stopThriftClient() throws Exception {', 'if (transport != null) {', 'transport.close();', 'transport = null;']
['connection to the thrift server closed ', []]
camel sample_13013

['public void testCalculateMethodInvocation() throws Exception {']
['test calculate method invocation ', []]
camel sample_13013

['public void testEchoMethodInvocation() throws Exception {']
['test echo method invocation ', []]
camel sample_13013

['public void testWSHttpCallEcho() throws Exception {', 'final List<String> received = new ArrayList<String>();', 'final CountDownLatch latch = new CountDownLatch(2);', 'DefaultAsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13156

['protected boolean pollDirectory(String fileName, List<GenericFile<File>> fileList, int depth) {']
['polldirectory from filename ', ['filename']]
camel sample_4792

['protected boolean pollDirectory(String fileName, List<GenericFile<File>> fileList, int depth) {', 'depth++;', 'File directory = new File(fileName);', 'if (!directory.exists() || !directory.isDirectory()) {']
['cannot poll as directory does not exists or its not a directory ', ['directory']]
camel sample_4792

['protected boolean pollDirectory(String fileName, List<GenericFile<File>> fileList, int depth) {', 'depth++;', 'File directory = new File(fileName);', 'if (!directory.exists() || !directory.isDirectory()) {', 'if (getEndpoint().isDirectoryMustExist()) {', 'throw new GenericFileOperationFailedException("Directory does not exist: " + directory);', '}', 'return true;', '}']
['polling directory ', ['directory', 'getpath']]
camel sample_4792

['File directory = new File(fileName);', 'if (!directory.exists() || !directory.isDirectory()) {', 'if (getEndpoint().isDirectoryMustExist()) {', 'throw new GenericFileOperationFailedException("Directory does not exist: " + directory);', '}', 'return true;', '}', 'File[] dirFiles = directory.listFiles();', 'if (dirFiles == null || dirFiles.length == 0) {', 'if (log.isTraceEnabled()) {']
['no files found in directory ', ['directory', 'getpath']]
camel sample_4792

['}', 'return true;', '}', 'File[] dirFiles = directory.listFiles();', 'if (dirFiles == null || dirFiles.length == 0) {', 'if (log.isTraceEnabled()) {', '}', 'return true;', '} else {', 'if (log.isTraceEnabled()) {']
['found in directory ', ['dirfiles', 'length', 'directory', 'getpath']]
camel sample_4792

['}', 'List<File> files = Arrays.asList(dirFiles);', 'if (getEndpoint().isPreSort()) {', 'Collections.sort(files, (a, b) -> a.getAbsoluteFile().compareTo(a.getAbsoluteFile()));', '}', 'for (File file : dirFiles) {', 'if (!canPollMoreFiles(fileList)) {', 'return false;', '}', 'if (log.isTraceEnabled()) {']
['found file isabsolute isdirectory isfile ishidden ', ['new', 'object', 'file', 'file', 'isabsolute', 'file', 'isdirectory', 'file', 'isfile', 'file', 'ishidden']]
camel sample_4792

['if (file.isDirectory()) {', 'if (endpoint.isRecursive() && depth < endpoint.getMaxDepth() && isValidFile(gf, true, files)) {', 'String subDirectory = fileName + File.separator + file.getName();', 'boolean canPollMore = pollDirectory(subDirectory, fileList, depth);', 'if (!canPollMore) {', 'return false;', '}', '}', '} else {', 'if (depth >= endpoint.minDepth && isValidFile(gf, false, files)) {']
['adding valid file ', ['file']]
camel sample_4792

['allAttributes.put(prefix + entry.getKey(), entry.getValue());', '}', '}', '} else if (!attribute.contains(":")) {', 'allAttributes.put("basic:" + attribute, Files.getAttribute(path, attribute));', '} else {', 'allAttributes.put(attribute, Files.getAttribute(path, attribute));', '}', '} catch (IOException e) {', 'if (log.isDebugEnabled()) {']
['unable to read attribute on file ', ['attribute', 'file', 'e']]
camel sample_4792

['protected boolean isMatched(GenericFile<File> file, String doneFileName, List<File> files) {', 'String onlyName = FileUtil.stripPath(doneFileName);', 'for (File f : files) {', 'if (f.getName().equals(onlyName)) {', 'return true;', '}', '}']
['done file does not exist ', ['donefilename']]
camel sample_4792

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("seda:async").to("direct:foo");', 'from("direct:foo").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['received ', ['exchange']]
camel sample_2216

['});', 'exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {', 'public void onFailure(Exchange exchange) {', 'failed = exchange;', 'baz = exchange.getIn().getHeader("baz");', 'doneLatch.countDown();', '}', '});', 'String name = getName();', 'if (name.equals("testFail")) {']
['failing test ', []]
camel sample_2216

['failed = exchange;', 'baz = exchange.getIn().getHeader("baz");', 'doneLatch.countDown();', '}', '});', 'String name = getName();', 'if (name.equals("testFail")) {', 'exchange.getOut().setFault(true);', 'exchange.getOut().setBody("testFail() should always fail with a fault!");', '} else if (name.equals("testException")) {']
['throwing exception ', []]
camel sample_2216

['public BindyAbstractFactory(Class<?> type) throws Exception {', 'this.type = type;', 'if (LOG.isDebugEnabled()) {']
['class name ', ['type', 'getname']]
camel sample_7444

['private void loadModels(Class<?> root) {', 'models.add(root);', 'modelClassNames.add(root.getName());', 'for (Field field : root.getDeclaredFields()) {', 'Link linkField = field.getAnnotation(Link.class);', 'if (linkField != null) {', 'if (LOG.isDebugEnabled()) {']
['class linked field ', ['field', 'gettype', 'field']]
camel sample_7444

['if (linkField != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'models.add(field.getType());', 'modelClassNames.add(field.getType().getName());', 'loadModels(field.getType());', '}', 'OneToMany oneToManyField = field.getAnnotation(OneToMany.class);', 'if (oneToManyField != null) {', 'if (LOG.isDebugEnabled()) {']
['class onetomany linked field ', ['field', 'gettype', 'field']]
camel sample_7444

['if (EtcdHelper.isOutdatedIndexException(exception)) {', 'LOGGER.debug("Outdated index, key={}, cause={}", servicePath, exception.etcdCause);', 'index.set(exception.index + 1);', '}', '} else {', 'try {', 'EtcdKeysResponse response = promise.get();', 'EtcdHelper.setIndex(index, response);', 'serversRef.set(getServices());', '} catch (TimeoutException e) {']
['timeout watching for ', ['getconfiguration', 'getservicepath']]
camel sample_12253

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler().maximumRedeliveries(2).redeliveryDelay(0));', 'onException(IllegalArgumentException.class).onRedelivery(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['onredelivery invoked ', []]
camel sample_3810

['public void onError(Throwable t) {']
['Exception ', ['t']]
camel sample_7500

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixMultiMapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-multimap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-multimap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1084

['public void testCalculateMethodInvocation() throws Exception {']
['thrift calculate method async test start ', []]
camel sample_13012

['public void testAddMethodInvocation() throws Exception {']
['thrift add method primitive parameters only async test start ', []]
camel sample_13012

['public void testCalculateWithException() throws Exception {']
['thrift calculate method with business exception async test start ', []]
camel sample_13012

['public void testVoidMethodInvocation() throws Exception {']
['thrift method with empty parameters and void output async test start ', []]
camel sample_13012

['public void testOneWayMethodInvocation() throws Exception {']
['thrift one way method async test start ', []]
camel sample_13012

['public void testAllTypesMethodInvocation() throws Exception {']
['thrift method with all possile types async test start ', []]
camel sample_13012

['public void testEchoMethodInvocation() throws Exception {']
['thrift echo method return output as pass input parameter async test start ', []]
camel sample_13012

['public GenericFileProcessStrategy<T> getGenericFileProcessStrategy() {', 'if (processStrategy == null) {', 'processStrategy = createGenericFileStrategy();']
['using generic file process strategy ', ['processstrategy']]
camel sample_4793

['});', 'consumer.setStartScheduler(false);', 'ServiceHelper.startService(consumer);', 'consumer.poll();', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'try {', 'ServiceHelper.stopService(consumer);', '} catch (Exception e) {']
['error stopping consumer used for browsing exchanges this exception will be ignored ', ['e']]
camel sample_4793

['protected GenericFileProcessStrategy<T> createGenericFileStrategy() {', 'Class<?> factory = null;', 'try {', 'FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/");']
['using factoryfinder ', ['finder']]
camel sample_4793

['protected GenericFileProcessStrategy<T> createGenericFileStrategy() {', 'Class<?> factory = null;', 'try {', 'FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/");', 'factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class);', '} catch (ClassNotFoundException e) {']
['strategy factory class not found ', ['e']]
camel sample_4793

['protected GenericFileProcessStrategy<T> createGenericFileStrategy() {', 'Class<?> factory = null;', 'try {', 'FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/");', 'factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class);', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {']
['no strategy factory defined in meta inf services org apache camel component ', ['e']]
camel sample_4793

['protected GenericFileProcessStrategy<T> createGenericFileStrategy() {', 'Class<?> factory = null;', 'try {', 'FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/");', 'factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class);', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {', '}', 'if (factory == null) {', 'try {']
['using classresolver to resolve class ', ['default', 'strategyfactory', 'class']]
camel sample_4793

['try {', 'FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/");', 'factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class);', '} catch (ClassNotFoundException e) {', '} catch (IOException e) {', '}', 'if (factory == null) {', 'try {', 'factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS);', '} catch (Exception e) {']
['cannot load class ', ['default', 'strategyfactory', 'class', 'e']]
camel sample_4793

['} catch (ClassNotFoundException e) {', '} catch (IOException e) {', '}', 'if (factory == null) {', 'try {', 'factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS);', '} catch (Exception e) {', '}', 'try {', 'if (log.isTraceEnabled()) {']
['using classloader to resolve class ', ['this', 'getclass', 'getclassloader', 'default', 'strategyfactory', 'class']]
camel sample_4793

['try {', 'factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS);', '} catch (Exception e) {', '}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS, this.getClass().getClassLoader());', '} catch (Exception e) {', 'if (log.isTraceEnabled()) {']
['cannot load class using classloader ', ['this', 'getclass', 'getclassloader', 'default', 'strategyfactory', 'class', 'e']]
camel sample_4793

['if (log.isTraceEnabled()) {', '}', '}', 'if (factory == null) {', 'throw new TypeNotPresentException(DEFAULT_STRATEGYFACTORY_CLASS + " class not found", null);', '}', '}', 'try {', 'Method factoryMethod = factory.getMethod("createGenericFileProcessStrategy", CamelContext.class, Map.class);', 'Map<String, Object> params = getParamsAsMap();']
['parameters for generic file process strategy ', ['params']]
camel sample_4793

['exchange.setException(e);', 'logTransactionRollback(redelivered, ids, e, false);', '} finally {', 'exchange.getUnitOfWork().endTransactedBy(transactionKey);', '}', 'Boolean onlyLast = (Boolean) exchange.removeProperty(Exchange.ROLLBACK_ONLY_LAST);', 'if (onlyLast != null && onlyLast) {', 'if (log.isDebugEnabled()) {', 'Exception cause = exchange.getException();', 'if (cause != null) {']
['transaction rollback redelivered for due exchange was marked for rollbackonlylast and caught ', ['transactionkey', 'redelivered', 'ids', 'cause']]
camel sample_16355

['logTransactionRollback(redelivered, ids, e, false);', '} finally {', 'exchange.getUnitOfWork().endTransactedBy(transactionKey);', '}', 'Boolean onlyLast = (Boolean) exchange.removeProperty(Exchange.ROLLBACK_ONLY_LAST);', 'if (onlyLast != null && onlyLast) {', 'if (log.isDebugEnabled()) {', 'Exception cause = exchange.getException();', 'if (cause != null) {', '} else {']
['transaction rollback redelivered for due exchange was marked for rollbackonlylast ', ['new', 'object', 'transactionkey', 'redelivered', 'ids']]
camel sample_16355

['if (exchange.getException() != null || exchange.isRollbackOnly()) {', 'if (exchange.getException() != null) {', 'rce = ObjectHelper.wrapRuntimeCamelException(exchange.getException());', '} else {', 'rce = new TransactionRollbackException();', '}', 'if (!status.isRollbackOnly()) {', 'status.setRollbackOnly();', '}', 'if (log.isTraceEnabled()) {']
['throwing runtime exception to force transaction to rollback on ', ['transactiontemplate', 'getname']]
camel sample_16355

['protected void processByErrorHandler(final Exchange exchange) {', 'final CountDownLatch latch = new CountDownLatch(1);', 'boolean sync = super.process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'if (!doneSync) {']
['asynchronous callback received for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_16355

['public void done(boolean doneSync) {', 'if (!doneSync) {', 'latch.countDown();', '}', '}', 'public String toString() {', 'return "Done " + TransactionErrorHandler.this.toString();', '}', '});', 'if (!sync) {']
['waiting for asynchronous callback before continuing for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_16355

['public String toString() {', 'return "Done " + TransactionErrorHandler.this.toString();', '}', '});', 'if (!sync) {', 'try {', 'latch.await();', '} catch (InterruptedException e) {', 'exchange.setException(e);', '}']
['asynchronous callback received will continue routing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_16355

['}', '}', 'public void onNext(Exchange ex) {', 'if (!active.get()) {', 'return;', '}', 'R r;', 'try {', 'r = converter.apply(ex);', '} catch (TypeConversionException e) {']
['unable to convert body to the specified type ', ['type', 'getname', 'e']]
camel sample_11490

['final int tempI = i;', 'Runnable worker = new Runnable() {', 'public void run() {', 'try {', 'final String requestText = "Message " + tempI;', 'final String responseText = "Response Message " + tempI;', 'String response = template.requestBody("direct:start", requestText, String.class);', 'assertNotNull(response);', 'assertEquals(responseText, response);', '} catch (Exception e) {']
['todo auto generated catch block ', ['e']]
camel sample_12316

['private FactoryRegistry tryToGetFactoryRegistry() {', 'Function<CamelContext, Registry> f = CamelContext::getRegistry;', 'Function<Registry, Set<FactoryRegistry>> g = r -> r.findByType(FactoryRegistry.class);', 'Function<Set<FactoryRegistry>, FactoryRegistry> h = factoryRegistries -> {', 'if (factoryRegistries.size() > 1) {']
['number of registered ', ['factoryregistry', 'class', 'getcanonicalname', 'factoryregistries', 'size']]
camel sample_7445

['public void startView(String namespace) throws Exception {', 'LockHelper.doWithWriteLockT( lock, () -> {', 'ViewHolder<T> holder = views.get(namespace);', 'if (holder != null) {']
['force start of view ', ['namespace']]
camel sample_3955

['public void startView(String namespace) throws Exception {', 'LockHelper.doWithWriteLockT( lock, () -> {', 'ViewHolder<T> holder = views.get(namespace);', 'if (holder != null) {', 'holder.startView();', '} else {']
['error forcing start of view it does not exist ', ['namespace']]
camel sample_3955

['public void stopView(String namespace) throws Exception {', 'LockHelper.doWithWriteLockT( lock, () -> {', 'ViewHolder<T> holder = views.get(namespace);', 'if (holder != null) {']
['force stop of view ', ['namespace']]
camel sample_3955

['public void stopView(String namespace) throws Exception {', 'LockHelper.doWithWriteLockT( lock, () -> {', 'ViewHolder<T> holder = views.get(namespace);', 'if (holder != null) {', 'holder.stopView();', '} else {']
['error forcing stop of view it does not exist ', ['namespace']]
camel sample_3955

['LOGGER.debug("Retain view {}, old-refs={}", view.getNamespace(), count.get());', 'count.retain();', 'return get();', '}', 'void release() {', 'LOGGER.debug("Release view {}, old-refs={}", view.getNamespace(), count.get());', 'count.release();', '}', 'void startView() throws Exception {', 'if (AbstractCamelClusterService.this.isRunAllowed()) {']
['start view ', ['view', 'getnamespace']]
camel sample_3955

['return get();', '}', 'void release() {', 'LOGGER.debug("Release view {}, old-refs={}", view.getNamespace(), count.get());', 'count.release();', '}', 'void startView() throws Exception {', 'if (AbstractCamelClusterService.this.isRunAllowed()) {', 'view.start();', '} else {']
['can t start view as cluster service is not running view will be started on service start up ', ['view', 'getnamespace']]
camel sample_3955

['LOGGER.debug("Release view {}, old-refs={}", view.getNamespace(), count.get());', 'count.release();', '}', 'void startView() throws Exception {', 'if (AbstractCamelClusterService.this.isRunAllowed()) {', 'view.start();', '} else {', '}', '}', 'void stopView() throws Exception {']
['stop view ', ['view', 'getnamespace']]
camel sample_3955

['}', '} else {', 'StringBuilder pathsExtracted = new StringBuilder();', 'for (Map.Entry<String, DropboxResultCode> entry : map.entrySet()) {', 'pathsExtracted.append(entry.getKey()).append("\\n");', '}', 'exchange.getIn().setHeader(DropboxResultHeader.UPLOADED_FILES.name(), pathsExtracted.toString());', 'exchange.getIn().setBody(map);', '}', 'if (LOG.isDebugEnabled()) {']
['uploaded ', ['result', 'tostring']]
camel sample_8499

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = ExchangeHelper.getMandatoryHeader(exchange, Headers.JOB_ID, Long.class);', 'final boolean result = client.touch(jobId);', 'if (!result && LOG.isWarnEnabled()) {']
['failed to touch job d ', ['string', 'format', 'jobid']]
camel sample_8163

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = ExchangeHelper.getMandatoryHeader(exchange, Headers.JOB_ID, Long.class);', 'final boolean result = client.touch(jobId);', 'if (!result && LOG.isWarnEnabled()) {', '} else if (LOG.isDebugEnabled()) {']
['job d touched result is b ', ['string', 'format', 'jobid', 'result']]
camel sample_8163

['public void testGenerate() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("generate result", result);']
['generate ', ['result']]
camel sample_17378

['public void testGenerateWithCustomFields() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBraintree.settlementDate", null);', 'headers.put("CamelBraintree.groupByCustomField", null);', 'final com.braintreegateway.Result result = requestBodyAndHeaders("direct: assertNotNull("generate result", result);']
['generate ', ['result']]
camel sample_17378

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BarcodeDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.barcode.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.barcode.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_730

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PahoComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.paho.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.paho.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1207

['public boolean apply(Event event) {', 'Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'in.setBody(event);', 'try {', 'if (LOG.isTraceEnabled()) {']
['processing ignite event ', ['event']]
camel sample_11306

['Message in = exchange.getIn();', 'in.setBody(event);', 'try {', 'if (LOG.isTraceEnabled()) {', '}', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', '}', '});', '} catch (Exception e) {']
['exception while processing ignite event s ', ['string', 'format', 'event', 'e']]
camel sample_11306

['protected void doStart() throws Exception {', 'super.doStart();', 'if (endpoint.getEvents() != null && endpoint.getEvents().size() > 0) {', 'eventTypes = new int[endpoint.getEvents().size()];', 'int counter = 0;', 'for (Integer i : endpoint.getEvents()) {', 'eventTypes[counter++] = i;', '}', '}', 'events.localListen(predicate, eventTypes);']
['started local ignite events consumer for events ', ['arrays', 'aslist', 'eventtypes']]
camel sample_11306

['protected void doStop() throws Exception {', 'super.doStop();', 'events.stopLocalListen(predicate, eventTypes);']
['stopped local ignite events consumer for events ', ['arrays', 'aslist', 'eventtypes']]
camel sample_11306

['private void doUpdateCronDetails() throws Exception {', 'String trigger = "myTimer";', 'String group = "myGroup";', 'String cronExpression = "0 * * * * ?";', 'MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();', 'Set<ObjectName> objectNames = mBeanServer.queryNames( new ObjectName("quartz:type=QuartzScheduler,name=*,instance=NON_CLUSTERED"), null);', 'assertFalse("There should be a quartz scheduler MBean", objectNames.isEmpty());', 'ObjectName oName = objectNames.stream().findFirst().get();']
['scheduler mbean ', ['oname']]
camel sample_6468

['public boolean process(Exchange exchange, AsyncCallback callback) {']
['processing ', ['salesforceendpoint', 'getendpoint', 'getoperationname']]
camel sample_14780

['private void writeFile() throws Exception {']
['writing file ', []]
camel sample_3144

['private void writeFile() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/changed/in/file.dat");', 'fos.write("Line".getBytes());', 'fos.flush();', 'fos.close();']
['writing file done ', []]
camel sample_3144

['String message = exchange.getIn().getBody(String.class);', 'Level level = exchange.getIn().getHeader(LEVEL, Level.class);', 'if (level == null) {', 'String name = exchange.getIn().getHeader(LEVEL, Level.OK.name(), String.class);', 'level = Level.valueOf(name);', '}', 'String serviceName = exchange.getIn().getHeader(SERVICE_NAME, exchange.getContext().getName(), String.class);', 'String hostName = exchange.getIn().getHeader(HOST_NAME, "localhost", String.class);', 'MessagePayload payload = new MessagePayload(hostName, level, serviceName, message);', 'if (log.isDebugEnabled()) {']
['sending notification to nagios ', ['payload', 'getmessage']]
camel sample_9119

['if (level == null) {', 'String name = exchange.getIn().getHeader(LEVEL, Level.OK.name(), String.class);', 'level = Level.valueOf(name);', '}', 'String serviceName = exchange.getIn().getHeader(SERVICE_NAME, exchange.getContext().getName(), String.class);', 'String hostName = exchange.getIn().getHeader(HOST_NAME, "localhost", String.class);', 'MessagePayload payload = new MessagePayload(hostName, level, serviceName, message);', 'if (log.isDebugEnabled()) {', '}', 'sender.send(payload);']
['sending notification done ', []]
camel sample_9119

['isSleepycatStore(settings, impliedMessageStoreFactories);', 'if (impliedMessageStoreFactories.size() > 1) {', 'throw new ConfigError("Ambiguous message store implied in configuration.");', '}', 'MessageStoreFactory messageStoreFactory;', 'if (impliedMessageStoreFactories.size() == 1) {', 'messageStoreFactory = impliedMessageStoreFactories.iterator().next();', '} else {', 'messageStoreFactory = new MemoryStoreFactory();', '}']
['inferring message store factory ', ['messagestorefactory', 'getclass', 'getname']]
camel sample_10669

['protected void installWatch() {', 'connection.exists(getNode(), this, new StatCallback() {', 'public void processResult(int rc, String path, Object ctx, Stat stat) {', '}', '}, null);', 'if (LOG.isDebugEnabled()) {']
['installed exists watch ', []]
camel sample_12654

['private void doTestWSHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17456

['public void testSendToAlotOfMessageToQueues() throws Exception {', 'int size = 100;']
['about to send messages ', ['size']]
camel sample_7107

['public void testSendToAlotOfMessageToQueues() throws Exception {', 'int size = 100;', 'for (int i = 0; i < size; i++) {', 'if (i > 0 && i % 50 == 0) {']
['send messages so far ', ['i']]
camel sample_7107

['public void testSendToAlotOfMessageToQueues() throws Exception {', 'int size = 100;', 'for (int i = 0; i < size; i++) {', 'if (i > 0 && i % 50 == 0) {', '}', 'template.sendBodyAndHeader(URI, ExchangePattern.InOnly, "Hello " + i, JmsConstants.JMS_DESTINATION_NAME, "foo" + i);', '}']
['send complete use jconsole to view ', []]
camel sample_7107

['public void testJavaVersion() throws Exception {', 'ExecResult body = templateJavaVersion.requestBody((Object)"test", ExecResult.class);', 'InputStream out = body.getStdout();', 'InputStream err = body.getStderr();', 'assertNull(out);', 'assertNotNull(err);', 'String outString = IOUtils.toString(err);']
['received stdout ', ['outstring']]
camel sample_12204

['public void testWinJavaVersionWorkingDir() throws Exception {', 'ExecResult body = templateJavaVersionWorkingDir.requestBody((Object)"test", ExecResult.class);', 'InputStream out = body.getStdout();', 'InputStream err = body.getStderr();', 'assertNull(out);', 'assertNotNull(err);', 'String outerr = IOUtils.toString(err);']
['received stderr ', ['outerr']]
camel sample_12204

['public void run() {', 'try {', 'context.getTypeConverter().mandatoryConvertTo(MyCamelBean.class, "1;MyCamel");', 'latch.countDown();', '} catch (NoTypeConversionAvailableException e) {', '}', '}', '});', '}', 'assertTrue("The expected mandatory conversions failed!", latch.await(1, TimeUnit.MINUTES));']
['took millis to convert objects ', ['watch', 'taken', 'size']]
camel sample_3902

['private void dumpThreads() {', 'ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();', 'for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {', 'if (Thread.State.BLOCKED.equals(threadInfo.getThreadState())) {']
['blocked thread ', ['threadinfo']]
camel sample_12341

['private void dumpThreads() {', 'ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();', 'for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {', 'if (Thread.State.BLOCKED.equals(threadInfo.getThreadState())) {', '} else {']
['normal thread ', ['threadinfo']]
camel sample_12341

['private void dumpThreads() {', 'ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();', 'for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {', 'if (Thread.State.BLOCKED.equals(threadInfo.getThreadState())) {', '} else {', '}']
['full stack t ', ['arrays', 'stream', 'threadinfo', 'getstacktrace', 'map', 'object', 'tostring', 'collect', 'collectors', 'joining']]
camel sample_12341

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ControlBusComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.controlbus.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.controlbus.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_858

['protected void onRequestComplete() {']
['onRequestComplete ', []]
camel sample_11097

['protected void onResponseComplete(Result result, byte[] content) {']
['onResponseComplete ', []]
camel sample_11097

['protected void onExpire() {']
['onExpire ', []]
camel sample_11097

['protected void onException(Throwable ex) {']
['onexception ', ['ex']]
camel sample_11097

['protected void onConnectionFailed(Throwable ex) {']
['onconnectionfailed ', ['ex']]
camel sample_11097

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<YqlComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.yql.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.yql.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1196

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SmppComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.smpp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.smpp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_622

['public static void assertInMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = ExchangeHelper.getMandatoryInBody(exchange);', 'assertEquals("in body of: " + exchange, expected, actual);', '} else {', 'actual = ExchangeHelper.getMandatoryInBody(exchange, expected.getClass());', '}', 'assertEquals("in body of: " + exchange, expected, actual);']
['received response with in ', ['exchange', 'exchange', 'getin']]
camel sample_6829

['public static void assertOutMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = ExchangeHelper.getMandatoryOutBody(exchange);', 'assertEquals("output body of: " + exchange, expected, actual);', '} else {', 'actual = ExchangeHelper.getMandatoryOutBody(exchange, expected.getClass());', '}', 'assertEquals("output body of: " + exchange, expected, actual);']
['received response with out ', ['exchange', 'exchange', 'getout']]
camel sample_6829

['public static Object assertExpression(Expression expression, Exchange exchange, Object expected) {', 'Object value;', 'if (expected != null) {', 'value = expression.evaluate(exchange, expected.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_6829

['public static void assertPredicateDoesNotMatch(Predicate predicate, Exchange exchange) {', 'try {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate should match: ", exchange);', '} catch (AssertionError e) {']
['caught expected assertion error ', ['e']]
camel sample_6829

['public static boolean assertPredicate(final Predicate predicate, Exchange exchange, boolean expected) {', 'if (expected) {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate failed: ", exchange);', '}', 'boolean value = predicate.matches(exchange);']
['evaluated predicate on exchange result ', ['predicate', 'exchange', 'value']]
camel sample_6829

['return;', '}', 'if (file.isDirectory()) {', 'File[] files = file.listFiles();', 'for (File child : files) {', 'recursivelyDeleteDirectory(child);', '}', '}', 'boolean success = file.delete();', 'if (!success) {']
['deletion of file failed ', ['file', 'getabsolutepath']]
camel sample_6829

['public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {', 'if (!super.acquireExclusiveReadLock(operations, file, exchange)) {', 'return false;', '}', 'File target = new File(file.getAbsoluteFilePath());', 'boolean exclusive = false;']
['waiting for exclusive read lock to file ', ['file']]
camel sample_4814

['if (timeout > 0) {', 'long delta = watch.taken();', 'if (delta > timeout) {', 'CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = target.lastModified();', 'long newLength = target.length();', 'long newOlderThan = startTime + watch.taken() - minAge;']
['previous last modified new last modified ', ['lastmodified', 'newlastmodified']]
camel sample_4814

['if (timeout > 0) {', 'long delta = watch.taken();', 'if (delta > timeout) {', 'CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = target.lastModified();', 'long newLength = target.length();', 'long newOlderThan = startTime + watch.taken() - minAge;']
['previous length new length ', ['length', 'newlength']]
camel sample_4814

['if (timeout > 0) {', 'long delta = watch.taken();', 'if (delta > timeout) {', 'CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = target.lastModified();', 'long newLength = target.length();', 'long newOlderThan = startTime + watch.taken() - minAge;']
['new older than threshold ', ['newolderthan']]
camel sample_4814

['long delta = watch.taken();', 'if (delta > timeout) {', 'CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = target.lastModified();', 'long newLength = target.length();', 'long newOlderThan = startTime + watch.taken() - minAge;', 'if (newLength >= minLength && ((minAge == 0 && newLastModified == lastModified && newLength == length) || (minAge != 0 && newLastModified < newOlderThan))) {']
['read lock acquired ', []]
camel sample_4814

['private boolean sleep() {']
['exclusive read lock not granted sleeping for millis ', ['checkinterval']]
camel sample_4814

['private boolean sleep() {', 'try {', 'Thread.sleep(checkInterval);', 'return false;', '} catch (InterruptedException e) {']
['sleep interrupted while waiting for exclusive read lock so breaking out ', []]
camel sample_4814

['public void destroy() {', 'DefaultHttpRegistry.removeHttpRegistry(getServletName());', 'if (httpRegistry != null) {', 'httpRegistry.unregister(this);', 'httpRegistry = null;', '}']
['destroyed camelhttptransportservlet ', ['getservletname']]
camel sample_14446

['public void initializeConnection() throws Exception {']
['initialize gridfs endpoint ', ['this', 'tostring']]
camel sample_8837

['protected void doStart() throws Exception {', 'if (writeConcern != null && writeConcernRef != null) {', 'String msg = "Cannot set both writeConcern and writeConcernRef at the same time. Respective values: " + writeConcern + ", " + writeConcernRef + ". Aborting initialization.";', 'throw new IllegalArgumentException(msg);', '}', 'mongoConnection = CamelContextHelper.mandatoryLookup(getCamelContext(), connectionBean, MongoClient.class);']
['resolved the connection with the name as ', ['connectionbean', 'mongoconnection']]
camel sample_8837

['protected void doStop() throws Exception {', 'super.doStop();', 'if (mongoConnection != null) {']
['closing connection ', []]
camel sample_8837

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();']
['got event with body and action ', ['in', 'getbody', 'in', 'getheader', 'kubernetesconstants', 'kubernetes', 'event', 'action']]
camel sample_13229

['public static Collection<HealthCheck.Result> invoke( CamelContext camelContext, Function<HealthCheck, Map<String, Object>> optionsSupplier, HealthCheckFilter filter) {', 'final HealthCheckRegistry registry = camelContext.getHealthCheckRegistry();', 'final HealthCheckService service = camelContext.hasService(HealthCheckService.class);', 'if (service != null) {', 'return service.getResults().stream() .filter(result -> !filter.test(result.getCheck())) .collect(Collectors.toList());', '} else if (registry != null) {', 'return registry.stream() .collect(Collectors.groupingBy(HealthCheckHelper::getGroup)) .entrySet().stream() .map(Map.Entry::getValue) .flatMap(Collection::stream) .filter(check -> !filter.test(check)) .sorted(Comparator.comparingInt(HealthCheck::getOrder)) .map(check -> check.call(optionsSupplier.apply(check))) .collect(Collectors.toList());', '} else {']
['no health check source found ', []]
camel sample_4402

['public static Optional<HealthCheck.Result> query(CamelContext camelContext, String id, Map<String, Object> options) {', 'final HealthCheckRegistry registry = camelContext.getHealthCheckRegistry();', 'final HealthCheckService service = camelContext.hasService(HealthCheckService.class);', 'if (service != null) {', 'return service.getResults().stream() .filter(result -> ObjectHelper.equal(result.getCheck().getId(), id)) .findFirst();', '} else if (registry != null) {', 'return registry.getCheck(id).map(check -> check.call(options));', '} else {']
['no health check source found ', []]
camel sample_4402

['public static Optional<HealthCheck.Result> invoke(CamelContext camelContext, String id, Map<String, Object> options) {', 'final HealthCheckRegistry registry = camelContext.getHealthCheckRegistry();', 'final HealthCheckService service = camelContext.hasService(HealthCheckService.class);', 'if (service != null) {', 'return service.call(id, options);', '} else if (registry != null) {', 'return registry.getCheck(id).map(check -> check.call(options));', '} else {']
['no health check source found ', []]
camel sample_4402

['UriParams uriParams = fieldType.getAnnotation(UriParams.class);', 'if (uriParams != null) {', 'String nestedPrefix = uriParams.prefix();', 'if (nestedPrefix == null) {', 'nestedPrefix = "";', '}', 'nestedPrefix = (prefix + nestedPrefix).trim();', 'populateParameterConfigurationMap(parameterMap, fieldType, nestedPrefix);', '} else {', 'if (parameterMap.containsKey(propertyName)) {']
['duplicate property name defined on field ', ['propertyname', 'field']]
camel sample_4052

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GoogleBigQueryComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-bigquery.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-bigquery.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1250

['public void filter(Direction direction, List<Header> headers) {', 'if (headers == null) {', 'return;', '}', 'Iterator<Header> iterator = headers.iterator();', 'while (iterator.hasNext()) {', 'Header header = iterator.next();']
['processing header ', ['header']]
camel sample_6595

['public void filter(Direction direction, List<Header> headers) {', 'if (headers == null) {', 'return;', '}', 'Iterator<Header> iterator = headers.iterator();', 'while (iterator.hasNext()) {', 'Header header = iterator.next();', 'if (!(header instanceof SoapHeader)) {']
['skipped header since it is not a soapheader ', ['header']]
camel sample_6595

['Iterator<Header> iterator = headers.iterator();', 'while (iterator.hasNext()) {', 'Header header = iterator.next();', 'if (!(header instanceof SoapHeader)) {', 'continue;', '}', 'SoapHeader soapHeader = SoapHeader.class.cast(header);', 'for (Iterator<SoapVersion> itv = SoapVersionFactory.getInstance().getVersions(); itv.hasNext();) {', 'SoapVersion version = itv.next();', 'if (soapHeader.getActor() != null && soapHeader.getActor().equals(version.getNextRole())) {']
['filtered header ', ['header']]
camel sample_6595

['public List<CamelContext> getLocalCamelContexts() {', 'List<CamelContext> camelContexts = new ArrayList<CamelContext>();', 'try {', 'camelContexts.addAll(beanFactory.getBeansOfType(CamelContext.class).values());', '} catch (Exception e) {']
['cannot retrieve the list of camel contexts ', ['e']]
camel sample_337

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_10540

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SchematronComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.schematron.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.schematron.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_458

['public static File getClasspathResourceFileOrNull(String classpathResource) {', 'if (classpathResource == null) {', 'return null;', '}', 'try {', 'Resource resource = new ClassPathResource(classpathResource);', 'File resourceFile = resource.getFile();', 'return resourceFile;', '} catch (IOException ioe) {']
['the resource does not exist ', ['classpathresource', 'ioe']]
camel sample_12212

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'onException(IllegalArgumentException.class) .handled(true) .to("mock:handled");']
['seda a mock dead a mock a forced a ', ['errorhandler', 'deadletterchannel', 'maximumredeliveries', 'redeliverydelay', 'retryattemptedloglevel', 'logginglevel', 'warn', 'asyncdelayedredelivery', 'to', 'throwexception', 'new', 'illegalargumentexception']]
camel sample_3851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'onException(IllegalArgumentException.class) .handled(true) .to("mock:handled");']
['seda b mock dead b mock b some io error ', ['errorhandler', 'deadletterchannel', 'maximumredeliveries', 'redeliverydelay', 'retryattemptedloglevel', 'logginglevel', 'warn', 'to', 'throwexception', 'new', 'ioexception']]
camel sample_3851

['public Object evaluate(Exchange exchange) {', 'try {']
['evaluation for exchange ', ['expression', 'exchange']]
camel sample_16744

['public List<?> evaluateAsList(Exchange exchange) throws Exception {']
['evaluateaslist for exchange ', ['expression', 'exchange']]
camel sample_16744

['public Object evaluateAsStringSource(Exchange exchange) throws Exception {']
['evaluateasstring for exchange ', ['expression', 'exchange']]
camel sample_16744

['public Object evaluateAsBytesSource(Exchange exchange) throws Exception {']
['evaluateasbytessource for exchange ', ['expression', 'exchange']]
camel sample_16744

['public Node evaluateAsDOM(Exchange exchange) throws Exception {']
['evaluateasdom for exchange ', ['expression', 'exchange']]
camel sample_16744

['public byte[] evaluateAsBytes(Exchange exchange) throws Exception {']
['evaluateasbytes for exchange ', ['expression', 'exchange']]
camel sample_16744

['public String evaluateAsString(Exchange exchange) throws Exception {']
['evaluateasstring for exchange ', ['expression', 'exchange']]
camel sample_16744

['public boolean matches(Exchange exchange) {']
['matches for exchange ', ['expression', 'exchange']]
camel sample_16744

['protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {', 'if (!initialized.get()) {']
['initializing xquerybuilder ', ['this']]
camel sample_16744

['protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {', 'if (!initialized.get()) {', 'if (configuration == null) {', 'configuration = new Configuration();', 'configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);']
['created new configuration ', ['configuration']]
camel sample_16744

['protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {', 'if (!initialized.get()) {', 'if (configuration == null) {', 'configuration = new Configuration();', 'configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);', '} else {']
['using existing configuration ', ['configuration']]
camel sample_16744

['public void testValidXML() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"));']
['validating payload ', ['payload']]
camel sample_11982

['public void testValidXML() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"));', 'String result = getProcessor("sch/schematron-1.sch", null).validate(payload);']
['schematron report ', ['result']]
camel sample_11982

['public void testInvalidXMLWithClientResolver() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-3.xml"));']
['validating payload ', ['payload']]
camel sample_11982

['public void testInvalidXMLWithClientResolver() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-3.xml"));', 'String result = getProcessor("sch/schematron-3.sch", new ClientUriResolver()).validate(payload);']
['schematron report ', ['result']]
camel sample_11982

['public void testInValidXML() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"));']
['validating payload ', ['payload']]
camel sample_11982

['public void testInValidXML() throws Exception {', 'String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"));', 'String result = getProcessor("sch/schematron-2.sch", null).validate(payload);']
['schematron report ', ['result']]
camel sample_11982

['public void testInOut() throws Exception {', 'getMockEndpoint("mock:log").expectedBodiesReceived("Logging: Bye World");', 'final String out = template.requestBody("direct:start", "Hello World", String.class);', 'assertEquals("Bye World", out);']
['got reply ', ['out']]
camel sample_10690

['public void traceExchange(ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange) throws Exception {', 'if (tracer.getDestination() != null || tracer.getDestinationUri() != null) {', 'Date timestamp = new Date();', 'Exchange event = new DefaultExchange(exchange);', 'event.setProperty(Exchange.TRACE_EVENT_NODE_ID, node.getId());', 'event.setProperty(Exchange.TRACE_EVENT_TIMESTAMP, timestamp);', 'event.setProperty(Exchange.TRACE_EVENT_EXCHANGE, exchange);', 'TraceEventMessage msg = new DefaultTraceEventMessage(timestamp, node, exchange);', 'if (tracer.isUseJpa()) {', 'if (LOG.isTraceEnabled()) {']
['using class for tracing event messages ', ['this', 'jpatraceeventmessageclassname']]
camel sample_4551

['IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(), jpa, options);', 'IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(), jpa, "timestamp", msg.getTimestamp());', 'event.getIn().setBody(jpa);', '} else {', 'event.getIn().setBody(msg);', '}', 'event.setProperty(Exchange.TRACE_EVENT, Boolean.TRUE);', 'try {', 'getTraceEventProducer(exchange).process(event);', '} catch (Exception e) {']
['error processing trace event original exchange will continue ', ['event', 'e']]
camel sample_4551

['private Bigquery buildClient(HttpTransport httpTransport) throws Exception {', 'GoogleCredential credential = null;', 'if (!Strings.isNullOrEmpty(serviceAccount) && !Strings.isNullOrEmpty(serviceAccountKey)) {', 'if (logger.isDebugEnabled()) {']
['service account and key have been set explicitly initialising bigquery using service account ', ['serviceaccount']]
camel sample_9363

['private Bigquery buildClient(HttpTransport httpTransport) throws Exception {', 'GoogleCredential credential = null;', 'if (!Strings.isNullOrEmpty(serviceAccount) && !Strings.isNullOrEmpty(serviceAccountKey)) {', 'if (logger.isDebugEnabled()) {', '}', 'credential = createFromAccountKeyPair(httpTransport);', '}', 'if (credential == null && !Strings.isNullOrEmpty(credentialsFileLocation)) {', 'if (logger.isDebugEnabled()) {']
['key file name has been set explicitly initialising bigquery using key file ', ['credentialsfilelocation']]
camel sample_9363

['}', 'credential = createFromAccountKeyPair(httpTransport);', '}', 'if (credential == null && !Strings.isNullOrEmpty(credentialsFileLocation)) {', 'if (logger.isDebugEnabled()) {', '}', 'credential = createFromFile();', '}', 'if (credential == null) {', 'if (logger.isDebugEnabled()) {']
['no explicit service account or key file name have been provided initialising bigquery using defaults ', []]
camel sample_9363

['public void register(HttpConsumer consumer) {', 'if (LOG.isDebugEnabled()) {']
['registering consumer for path providers present ', ['consumer', 'getpath', 'providers', 'size']]
camel sample_14450

['public void unregister(HttpConsumer consumer) {', 'if (LOG.isDebugEnabled()) {']
['unregistering consumer for path ', ['consumer', 'getpath']]
camel sample_14450

['public void register(CamelServlet provider) {', 'if (LOG.isDebugEnabled()) {']
['registering camelservlet with name consumers present ', ['provider', 'getservletname', 'consumers', 'size']]
camel sample_14450

['public void unregister(CamelServlet provider) {', 'if (LOG.isDebugEnabled()) {']
['unregistering camelservlet with name ', ['provider', 'getservletname']]
camel sample_14450

['public void testAsyncInvocation() throws Exception {', 'endpoint.expectedMessageCount(1);', 'myService.doSomethingAsync("Hello");', 'endpoint.assertIsSatisfied();', 'List<Exchange> list = endpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received ', ['exchange', 'getin', 'getbody']]
camel sample_15611

['public void execute(Exchange exchange) throws SmppException {', 'SubmitSm[] submitSms = createSubmitSm(exchange);', 'List<String> messageIDs = new ArrayList<String>(submitSms.length);', 'for (int i = 0; i < submitSms.length; i++) {', 'SubmitSm submitSm = submitSms[i];', 'String messageID;', 'if (log.isDebugEnabled()) {']
['sending short message for exchange id ', ['i', 'exchange', 'getexchangeid']]
camel sample_16894

['if (log.isDebugEnabled()) {', '}', 'try {', 'messageID = session.submitShortMessage( submitSm.getServiceType(), TypeOfNumber.valueOf(submitSm.getSourceAddrTon()), NumberingPlanIndicator.valueOf(submitSm.getSourceAddrNpi()), submitSm.getSourceAddr(), TypeOfNumber.valueOf(submitSm.getDestAddrTon()), NumberingPlanIndicator.valueOf(submitSm.getDestAddrNpi()), submitSm.getDestAddress(), new ESMClass(submitSm.getEsmClass()), submitSm.getProtocolId(), submitSm.getPriorityFlag(), submitSm.getScheduleDeliveryTime(), submitSm.getValidityPeriod(), new RegisteredDelivery(submitSm.getRegisteredDelivery()), submitSm.getReplaceIfPresent(), DataCodings.newInstance(submitSm.getDataCoding()), (byte) 0, submitSm.getShortMessage(), submitSm.getOptionalParameters());', '} catch (Exception e) {', 'throw new SmppException(e);', '}', 'messageIDs.add(messageID);', '}', 'if (log.isDebugEnabled()) {']
['sent short message for exchange id and received message ids ', ['exchange', 'getexchangeid', 'messageids']]
camel sample_16894

['protected void doStart() throws Exception {', 'super.doStart();']
['binding to server address using acceptor ', ['address', 'acceptor']]
camel sample_7687

['protected void doStop() throws Exception {']
['unbinding from server address using acceptor ', ['address', 'acceptor']]
camel sample_7687

['public void exceptionCaught(IoSession session, Throwable cause) throws Exception {', 'if (session != null) {']
['closing session as an exception was thrown from mina ', []]
camel sample_7687

['public void messageReceived(IoSession session, Object object) throws Exception {', 'if (LOG.isDebugEnabled()) {', 'Object in = object;', 'if (in instanceof byte[]) {', 'in = getEndpoint().getCamelContext().getTypeConverter().convertTo(String.class, in);', '}']
['received body ', ['in']]
camel sample_7687

['if (failed && !getEndpoint().getConfiguration().isTransferExchange()) {', 'if (exchange.getException() != null) {', 'body = exchange.getException();', '} else {', 'body = exchange.getOut().getBody();', '}', '}', 'if (body == null) {', 'noReplyLogger.log("No payload to send as reply for exchange: " + exchange);', 'if (getEndpoint().getConfiguration().isDisconnectOnNoReply()) {']
['closing session as no payload to send as reply at address ', ['address']]
camel sample_7687

['} else {', 'body = exchange.getOut().getBody();', '}', '}', 'if (body == null) {', 'noReplyLogger.log("No payload to send as reply for exchange: " + exchange);', 'if (getEndpoint().getConfiguration().isDisconnectOnNoReply()) {', 'session.close();', '}', '} else {']
['writing body ', ['body']]
camel sample_7687

['if (ExchangeHelper.isOutCapable(exchange)) {', 'close = exchange.getOut().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getEndpoint().getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {']
['closing session when complete at address ', ['address']]
camel sample_7687

['protected Object assertReceivedValidExchange() throws Exception {', 'assertTrue(latch.await(5, TimeUnit.SECONDS));', 'assertNotNull(receivedExchange);', 'XmppMessage receivedMessage = (XmppMessage)receivedExchange.getIn();', 'assertEquals("cheese header", 123, receivedMessage.getHeader("cheese"));', 'Object body = receivedMessage.getBody();']
['received body ', ['body']]
camel sample_12584

['protected Object assertReceivedValidExchange() throws Exception {', 'assertTrue(latch.await(5, TimeUnit.SECONDS));', 'assertNotNull(receivedExchange);', 'XmppMessage receivedMessage = (XmppMessage)receivedExchange.getIn();', 'assertEquals("cheese header", 123, receivedMessage.getHeader("cheese"));', 'Object body = receivedMessage.getBody();', 'Message xmppMessage = receivedMessage.getXmppMessage();', 'assertNotNull(xmppMessage);']
['received xmpp message ', ['xmppmessage', 'getbody']]
camel sample_12584

['protected void setUp() throws Exception {', 'client = new ProducerCache(this, container, 10);', 'String uriPrefix = getUriPrefix();', 'final String uri1 = uriPrefix + "&resource=camel-test-from&nickname=came-test-from";', 'final String uri2 = uriPrefix + "&resource=camel-test-to&nickname=came-test-to";', 'final String uri3 = uriPrefix + "&resource=camel-test-from-processor&nickname=came-test-from-processor";']
['using uri and ', []]
camel sample_12584

['final String uri1 = uriPrefix + "&resource=camel-test-from&nickname=came-test-from";', 'final String uri2 = uriPrefix + "&resource=camel-test-to&nickname=came-test-to";', 'final String uri3 = uriPrefix + "&resource=camel-test-from-processor&nickname=came-test-from-processor";', 'endpoint = container.getEndpoint(uri1);', 'assertNotNull("No endpoint found!", endpoint);', 'container.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(uri1).to(uri2);', 'from(uri3).process(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e']]
camel sample_12584

['public void configure() throws Exception {']
['about to setup splunk saved search route splunk server log results ', []]
camel sample_17769

['public void testMarshallMessage() {', 'String message = "8=FIX 4.1\x019=20\x0135=0\x0134=1\x0149=INVMGR\x0156=BRKR\x011=BE.CHM.001\x0122=4\x0111=CHM0001-01\x0148=BE0001245678\x0154=1\x0158=this is a camel - bindy test\x0110=220\x01\\r\\n";', 'result.expectedBodiesReceived(message);', 'template.sendBody(generateModel());', 'try {', 'result.assertIsSatisfied();', '} catch (InterruptedException e) {']
['unit test error ', ['e']]
camel sample_7392

['public boolean matches() {', 'for (EventPredicate predicate : predicates) {', 'boolean answer = predicate.matches();']
['matches ', ['predicate', 'answer']]
camel sample_5655

['public void reset() {', 'for (EventPredicate predicate : predicates) {']
['reset ', ['predicate']]
camel sample_5655

['public boolean onExchangeCreated(Exchange exchange) {', 'for (EventPredicate predicate : predicates) {', 'boolean answer = predicate.onExchangeCreated(exchange);']
['onexchangecreated ', ['predicate', 'answer']]
camel sample_5655

['public boolean onExchangeCompleted(Exchange exchange) {', 'for (EventPredicate predicate : predicates) {', 'boolean answer = predicate.onExchangeCompleted(exchange);']
['onexchangecompleted ', ['predicate', 'answer']]
camel sample_5655

['public boolean onExchangeFailed(Exchange exchange) {', 'for (EventPredicate predicate : predicates) {', 'boolean answer = predicate.onExchangeFailed(exchange);']
['onexchangefailed ', ['predicate', 'answer']]
camel sample_5655

['public boolean onExchangeSent(Exchange exchange, Endpoint endpoint, long timeTaken) {', 'for (EventPredicate predicate : predicates) {', 'boolean answer = predicate.onExchangeSent(exchange, endpoint, timeTaken);']
['onexchangesent ', ['endpoint', 'predicate', 'answer']]
camel sample_5655

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwitterDirectMessageComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-directmessage.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-directmessage.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_771

['private Message resolveMessageFrom(final Exchange camelExchange) {', 'Message message = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn();', 'if (message.getHeaders() != null && message.getHeaders().containsKey(RabbitMQEndpoint.SERIALIZE_HEADER)) {']
['removing the header ', ['rabbitmqendpoint', 'serialize', 'header']]
camel sample_14145

['properties = endpoint.getMessageConverter().buildProperties(camelExchange).build();', '} catch (NoTypeConversionAvailableException | TypeConversionException e) {', 'if (message.getBody() instanceof Serializable) {', 'message.getHeaders().put(RabbitMQEndpoint.SERIALIZE_HEADER, true);', 'properties = endpoint.getMessageConverter().buildProperties(camelExchange).build();', 'body = serializeBodyFrom(message);', '} else if (message.getBody() == null) {', 'properties = endpoint.getMessageConverter().buildProperties(camelExchange).build();', 'body = null;', '} else {']
['could not convert to byte ', ['message', 'getbody']]
camel sample_14145

['private void waitForConfirmation() throws IOException {', 'try {']
['waiting for publisher acknowledgements for ms ', ['endpoint', 'getpublisheracknowledgementstimeout']]
camel sample_14145

['private void waitForConfirmation() throws IOException {', 'try {', 'channel.waitForConfirmsOrDie(endpoint.getPublisherAcknowledgementsTimeout());', 'if (basicReturnReceived) {', 'throw new RuntimeCamelException("Failed to deliver message; basic.return received");', '}', '} catch (InterruptedException | TimeoutException e) {']
['acknowledgement error for ', ['camelexchange']]
camel sample_14145

['private byte[] serializeBodyFrom(final Message msg) throws IOException {', 'try (ByteArrayOutputStream b = new ByteArrayOutputStream(); ObjectOutputStream o = new ObjectOutputStream(b)) {', 'o.writeObject(msg.getBody());', 'return b.toByteArray();', '} catch (NotSerializableException nse) {']
['can not send object via rabbitmq because it contains non serializable objects ', ['msg', 'getbody', 'getclass']]
camel sample_14145

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SjmsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1246

['if (contains(o)) {', 'return false;', '}', 'byte[] b = HBaseHelper.toBytes(o);', 'Put put = new Put(b);', 'put.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(qualifier), b);', 'table.put(put);', 'return true;', '}', '} catch (Exception e) {']
['error adding object to hbase repository ', ['o']]
camel sample_14515

['public boolean contains(Object o) {', 'try {', 'byte[] b = HBaseHelper.toBytes(o);', 'Get get = new Get(b);', 'get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(qualifier));', 'return table.exists(get);', '} catch (Exception e) {']
['error reading object from hbase repository ', ['o']]
camel sample_14515

['try {', 'byte[] b = HBaseHelper.toBytes(o);', 'if (table.exists(new Get(b))) {', 'Delete delete = new Delete(b);', 'table.delete(delete);', 'return true;', '} else {', 'return false;', '}', '} catch (Exception e) {']
['error removing object from hbase repository ', ['o']]
camel sample_14515

['public void clear() {', 'Scan s = new Scan();', 'ResultScanner scanner;', 'try {', 'scanner = table.getScanner(s);', 'for (Result rr : scanner) {', 'Delete d = new Delete(rr.getRow());', 'table.delete(d);', '}', '} catch (Exception e) {']
['error clear hbase repository ', ['table']]
camel sample_14515

['public void testPutAndGetNotFound() {', 'HawtDBAggregationRepository repo = new HawtDBAggregationRepository();', 'repo.setHawtDBFile(hawtDBFile);', 'repo.setRepositoryName("repo1");', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");']
['created ', ['exchange', 'getexchangeid']]
camel sample_11717

['HawtDBAggregationRepository repo = new HawtDBAggregationRepository();', 'repo.setHawtDBFile(hawtDBFile);', 'repo.setRepositoryName("repo1");', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");', 'repo.add(context, exchange.getExchangeId(), exchange);', 'Exchange out = repo.get(context, exchange.getExchangeId());', 'assertNotNull("Should find exchange", out);', 'Exchange exchange2 = new DefaultExchange(context);', 'exchange2.getIn().setBody("Bye World");']
['created ', ['getexchangeid']]
camel sample_11717

['public void testSecureProxy() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6429

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SWFComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-swf.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-swf.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1138

['public Exchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange) throws OptimisticLockingException {', 'if (!optimistic) {', 'throw new UnsupportedOperationException();', '}']
['adding an exchange with id for key in an optimistic manner ', ['newexchange', 'getexchangeid', 'key']]
camel sample_9508

['final DefaultExchangeHolder misbehaviorHolder = cache.putIfAbsent(key, holder);', 'if (misbehaviorHolder != null) {', 'Exchange misbehaviorEx = unmarshallExchange(camelContext, misbehaviorHolder);', 'LOG.error("Optimistic locking failed for exchange with key {}: IMap#putIfAbsend returned Exchange with ID {}, while it\'s expected no exchanges to be returned", key, misbehaviorEx != null ? misbehaviorEx.getExchangeId() : "<null>");', 'throw  new OptimisticLockingException();', '}', '} else {', 'DefaultExchangeHolder oldHolder = DefaultExchangeHolder.marshal(oldExchange, true, allowSerializedHeaders);', 'DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders);', 'if (!cache.replace(key, oldHolder, newHolder)) {']
['optimistic locking failed for exchange with key imap replace returned no exchanges while it s expected to replace one ', ['key']]
camel sample_9508

['LOG.error("Optimistic locking failed for exchange with key {}: IMap#putIfAbsend returned Exchange with ID {}, while it\'s expected no exchanges to be returned", key, misbehaviorEx != null ? misbehaviorEx.getExchangeId() : "<null>");', 'throw  new OptimisticLockingException();', '}', '} else {', 'DefaultExchangeHolder oldHolder = DefaultExchangeHolder.marshal(oldExchange, true, allowSerializedHeaders);', 'DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders);', 'if (!cache.replace(key, oldHolder, newHolder)) {', 'throw new OptimisticLockingException();', '}', '}']
['added an exchange with id for key in optimistic manner ', ['newexchange', 'getexchangeid', 'key']]
camel sample_9508

['public Exchange add(CamelContext camelContext, String key, Exchange exchange) {', 'if (optimistic) {', 'throw new UnsupportedOperationException();', '}']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['if (optimistic) {', 'throw new UnsupportedOperationException();', '}', 'Lock l = hzInstance.getLock(mapName);', 'try {', 'l.lock();', 'DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'DefaultExchangeHolder oldHolder = cache.put(key, newHolder);', 'return unmarshallExchange(camelContext, oldHolder);', '} finally {']
['added an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['public Set<String> scan(CamelContext camelContext) {', 'if (useRecovery) {']
['scanning for exchanges to recover in context ', ['camelcontext', 'getname']]
camel sample_9508

['public Set<String> scan(CamelContext camelContext) {', 'if (useRecovery) {', 'Set<String> scanned = Collections.unmodifiableSet(persistedCache.keySet());']
['found keys for exchanges to recover in context ', ['scanned', 'size', 'camelcontext', 'getname']]
camel sample_9508

['public Set<String> scan(CamelContext camelContext) {', 'if (useRecovery) {', 'Set<String> scanned = Collections.unmodifiableSet(persistedCache.keySet());', 'return scanned;', '} else {']
['what for to run recovery scans in context while repository is running in non recoverable aggregation repository mode ', ['camelcontext', 'getname', 'mapname']]
camel sample_9508

['public Exchange recover(CamelContext camelContext, String exchangeId) {']
['recovering an exchange with id ', ['exchangeid']]
camel sample_9508

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {']
['removing an exchange with id for key in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {']
['optimistic locking failed for exchange with key imap remove removed no exchanges while it s expected to remove one ', ['key']]
camel sample_9508

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {', 'throw new OptimisticLockingException();', '}']
['removed an exchange with id for key in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {', 'throw new OptimisticLockingException();', '}', 'if (useRecovery) {']
['putting an exchange with id for key into a recoverable storage in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {', 'throw new OptimisticLockingException();', '}', 'if (useRecovery) {', 'persistedCache.put(exchange.getExchangeId(), holder);']
['put an exchange with id for key into a recoverable storage in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {', 'throw new OptimisticLockingException();', '}', 'if (useRecovery) {', 'persistedCache.put(exchange.getExchangeId(), holder);', '}', '} else {', 'if (useRecovery) {']
['removing an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['} else {', 'if (useRecovery) {', 'TransactionOptions tOpts = new TransactionOptions();', 'tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE);', 'TransactionContext tCtx = hzInstance.newTransactionContext(tOpts);', 'try {', 'tCtx.beginTransaction();', 'TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName());', 'TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName());', 'DefaultExchangeHolder removedHolder = tCache.remove(key);']
['putting an exchange with id for key into a recoverable storage in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['TransactionOptions tOpts = new TransactionOptions();', 'tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE);', 'TransactionContext tCtx = hzInstance.newTransactionContext(tOpts);', 'try {', 'tCtx.beginTransaction();', 'TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName());', 'TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName());', 'DefaultExchangeHolder removedHolder = tCache.remove(key);', 'tPersistentCache.put(exchange.getExchangeId(), removedHolder);', 'tCtx.commitTransaction();']
['removed an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['TransactionOptions tOpts = new TransactionOptions();', 'tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE);', 'TransactionContext tCtx = hzInstance.newTransactionContext(tOpts);', 'try {', 'tCtx.beginTransaction();', 'TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName());', 'TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName());', 'DefaultExchangeHolder removedHolder = tCache.remove(key);', 'tPersistentCache.put(exchange.getExchangeId(), removedHolder);', 'tCtx.commitTransaction();']
['put an exchange with id for key into a recoverable storage in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9508

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_9508

['if (secureRandom != null) {', 'secureRandom.setCamelContext(camelContext);', '}', 'if (clientParameters != null) {', 'clientParameters.setCamelContext(camelContext);', '}', 'if (serverParameters != null) {', 'serverParameters.setCamelContext(camelContext);', '}', '}']
['creating sslcontext from sslcontextparameters ', ['this']]
camel sample_4290

['if (secureRandom != null) {', 'secureRandom.setCamelContext(camelContext);', '}', 'if (clientParameters != null) {', 'clientParameters.setCamelContext(camelContext);', '}', 'if (serverParameters != null) {', 'serverParameters.setCamelContext(camelContext);', '}', '}']
['available providers ', ['security', 'getproviders']]
camel sample_4290

['for (int idx = 0; idx < keyManagers.length; idx++) {', 'if (keyManagers[idx] instanceof X509KeyManager) {', 'try {', 'keyManagers[idx] = new AliasedX509ExtendedKeyManager(this.getCertAlias(), (X509KeyManager)keyManagers[idx]);', '} catch (Exception e) {', 'throw new GeneralSecurityException(e);', '}', '}', '}', '}']
['sslcontext initialized from is using provider protocol key managers trust managers and secure random ', ['new', 'object', 'context', 'this', 'context', 'getprovider', 'context', 'getprotocol', 'keymanagers', 'trustmanagers', 'securerandom']]
camel sample_4290

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {']
['configuring client and server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4290

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'super.configureSSLContext(context);', 'if (this.getClientParameters() != null) {']
['overriding client side sslcontext parameters on sslcontext with configured client parameters ', ['context']]
camel sample_4290

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'super.configureSSLContext(context);', 'if (this.getClientParameters() != null) {', 'this.getClientParameters().configureSSLContext(context);', '}', 'if (this.getServerParameters() != null) {']
['overriding server side sslcontext parameters on sslcontext with configured server parameters ', ['context']]
camel sample_4290

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'super.configureSSLContext(context);', 'if (this.getClientParameters() != null) {', 'this.getClientParameters().configureSSLContext(context);', '}', 'if (this.getServerParameters() != null) {', 'this.getServerParameters().configureSSLContext(context);', '}']
['configured client and server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {']
['collecting client and server side sslengine configurers on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {', 'List<Configurer<SSLEngine>> configurers = super.getSSLEngineConfigurers(context);', 'if (this.getClientParameters() != null) {']
['augmenting sslengine configurers with configurers from client parameters on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {', 'List<Configurer<SSLEngine>> configurers = super.getSSLEngineConfigurers(context);', 'if (this.getClientParameters() != null) {', 'configurers.addAll(this.getClientParameters().getSSLEngineConfigurers(context));', '}', 'if (this.getServerParameters() != null) {']
['augmenting sslengine configurers with configurers from server parameters on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {', 'List<Configurer<SSLEngine>> configurers = super.getSSLEngineConfigurers(context);', 'if (this.getClientParameters() != null) {', 'configurers.addAll(this.getClientParameters().getSSLEngineConfigurers(context));', '}', 'if (this.getServerParameters() != null) {', 'configurers.addAll(this.getServerParameters().getSSLEngineConfigurers(context));', '}']
['collected client and server side sslengine configurers on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLSocketFactory>> getSSLSocketFactoryConfigurers(SSLContext context) {']
['collecting sslsocketfactory configurers on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLSocketFactory>> getSSLSocketFactoryConfigurers(SSLContext context) {', 'List<Configurer<SSLSocketFactory>> configurers = super.getSSLSocketFactoryConfigurers(context);', 'if (this.getClientParameters() != null) {']
['augmenting sslsocketfactory configurers with configurers from client parameters on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLSocketFactory>> getSSLSocketFactoryConfigurers(SSLContext context) {', 'List<Configurer<SSLSocketFactory>> configurers = super.getSSLSocketFactoryConfigurers(context);', 'if (this.getClientParameters() != null) {', 'configurers.addAll(this.getClientParameters().getSSLSocketFactoryConfigurers(context));', '}']
['collected sslsocketfactory configurers on sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLServerSocketFactory>> getSSLServerSocketFactoryConfigurers(SSLContext context) {']
['collecting sslserversocketfactory configurers for sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLServerSocketFactory>> getSSLServerSocketFactoryConfigurers(SSLContext context) {', 'List<Configurer<SSLServerSocketFactory>> configurers = super.getSSLServerSocketFactoryConfigurers(context);', 'if (this.getServerParameters() != null) {']
['augmenting sslserversocketfactory configurers with configurers from server parameters for sslcontext ', ['context']]
camel sample_4290

['protected List<Configurer<SSLServerSocketFactory>> getSSLServerSocketFactoryConfigurers(SSLContext context) {', 'List<Configurer<SSLServerSocketFactory>> configurers = super.getSSLServerSocketFactoryConfigurers(context);', 'if (this.getServerParameters() != null) {', 'configurers.addAll(this.getServerParameters().getSSLServerSocketFactoryConfigurers(context));', '}']
['collected client and server side sslserversocketfactory configurers for sslcontext ', ['context']]
camel sample_4290

['if (IntrospectionSupport.getProperties(bootstrapConfiguration, options, null, false)) {', 'IntrospectionSupport.setProperties(getCamelContext().getTypeConverter(), config, options);', '}', '}', 'NettyHttpSecurityConfiguration securityConfiguration = resolveAndRemoveReferenceParameter(parameters, "securityConfiguration", NettyHttpSecurityConfiguration.class);', 'Map<String, Object> securityOptions = IntrospectionSupport.extractProperties(parameters, "securityConfiguration.");', 'NettyHttpBinding bindingFromUri = resolveAndRemoveReferenceParameter(parameters, "nettyHttpBinding", NettyHttpBinding.class);', 'int sharedPort = -1;', 'NettySharedHttpServer shared = resolveAndRemoveReferenceParameter(parameters, "nettySharedHttpServer", NettySharedHttpServer.class);', 'if (shared != null) {']
['using nettysharedhttpserver with port ', ['shared', 'shared', 'getport']]
camel sample_16656

['if (shared != null) {', 'sharedPort = shared.getPort();', '}', 'boolean hasProtocol = remaining.startsWith("http: || remaining.startsWith("https: if (!hasProtocol) {', 'remaining = "http: }', 'boolean hasSlash = remaining.startsWith("http: if (!hasSlash) {', 'if (remaining.startsWith("http:")) {', 'remaining = "http: } else {', 'remaining = "https: }', '}']
['netty http url ', ['remaining']]
camel sample_16656

['private static SessionFactory loadSessionFactoryFromClassPath() {', 'try {', 'Class<?> factoryClass = null;', 'factoryClass = Class.forName("org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl");', 'if (factoryClass != null) {', 'Method method = factoryClass.getMethod("newInstance", new Class<?>[0]);', 'return (SessionFactory)method.invoke(null, new Object[0]);', '}', '} catch (Exception ex) {']
['cannot create the sessionfactoryimpl due to ', ['ex']]
camel sample_9158

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'return new DelegateAsyncProcessor(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'count++;']
['i am the container wide interceptor intercepted total count ', ['count']]
camel sample_3806

['public void execute() {', 'DeleteAttributesRequest request = new DeleteAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withExpected(determineUpdateCondition()) .withAttributes(determineAttributes());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8749

['public void execute() {', 'DeleteAttributesRequest request = new DeleteAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withExpected(determineUpdateCondition()) .withAttributes(determineAttributes());', 'this.sdbClient.deleteAttributes(request);']
['request sent ', []]
camel sample_8749

['public static void main(String[] args) throws Exception {']
['about to run google pubsub camel integration ', []]
camel sample_17552

['public static void main(String[] args) throws Exception {', 'CamelContext camelContext = new DefaultCamelContext();', 'GooglePubsubComponent googlePubsub = PubsubUtil.createComponent();', 'camelContext.addComponent("google-pubsub", googlePubsub);', 'camelContext.addRoutes(new RouteBuilder() {', 'public void configure() {', 'PropertiesComponent pc = getContext().getComponent("properties", PropertiesComponent.class);', 'pc.setLocation("classpath:example.properties");']
['about to start route google pubsub log ', []]
camel sample_17552

['parametersBuilder.addLong(headerKey, (Long) headerValue);', '} else if (headerValue instanceof Double) {', 'parametersBuilder.addDouble(headerKey, (Double) headerValue);', '} else if (headerValue != null) {', 'parametersBuilder.addString(headerKey, headerValue.toString());', '} else {', 'parametersBuilder.addString(headerKey, null);', '}', '}', 'JobParameters jobParameters = parametersBuilder.toJobParameters();']
['prepared parameters for spring batch job ', ['jobparameters']]
camel sample_12750

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<InfinispanComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.infinispan.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.infinispan.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_819

['public String greetMe(String me) {']
['executing operation greetme ', []]
camel sample_17801

['public void greetMeOneWay(String me) {']
['executing operation greetmeoneway ', []]
camel sample_17801

['public String sayHi() {']
['executing operation sayhi ', []]
camel sample_17801

['public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader data) {']
['processing reader message ', ['data']]
camel sample_10014

['public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader data) {', 'String connectionKey = store.getConnectionKey(webSocket);', 'consumer.sendMessage(connectionKey, data);']
['reader message sent ', []]
camel sample_10014

['public List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream data) {']
['processing inputstream message ', ['data']]
camel sample_10014

['public List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream data) {', 'String connectionKey = store.getConnectionKey(webSocket);', 'consumer.sendMessage(connectionKey, data);']
['reader message sent ', []]
camel sample_10014

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DigitalSignatureComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.crypto.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.crypto.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_663

['}', 'SplitStrategy idleStrategy = null;', 'for (SplitStrategy strategy : config.getSplitStrategies()) {', 'if (strategy.type == SplitStrategyType.IDLE) {', 'idleStrategy = strategy;', 'break;', '}', '}', 'if (idleStrategy != null) {', 'scheduler = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "HdfsIdleCheck");']
['creating idlecheck task scheduled to run every millis ', ['config', 'getcheckidleinterval']]
camel sample_12183

['private synchronized HdfsOutputStream setupHdfs(boolean onStartup) throws Exception {', 'if (ostream != null) {', 'return ostream;', '}', 'StringBuilder actualPath = new StringBuilder(hdfsPath);', 'if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_12183

['if (ostream != null) {', 'return ostream;', '}', 'StringBuilder actualPath = new StringBuilder(hdfsPath);', 'if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_12183

['if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsOutputStream answer = HdfsOutputStream.createOutputStream(actualPath.toString(), config);', 'if (onStartup) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_12183

['}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsOutputStream answer = HdfsOutputStream.createOutputStream(actualPath.toString(), config);', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_12183

['public void run() {', 'if (ostream == null) {', 'return;', '}']
['idlecheck running ', []]
camel sample_12183

['public void run() {', 'if (ostream == null) {', 'return;', '}', 'if (System.currentTimeMillis() - ostream.getLastAccess() > strategy.value && !idle.get() && !ostream.isBusy().get()) {', 'idle.set(true);', 'try {']
['closing stream as idle ', []]
camel sample_12183

['public Object evaluate(Exchange exchange) {', 'try {', 'Object result = evaluateJsonPath(exchange, engine);', 'if (resultType != null) {', 'boolean resultIsCollection = Collection.class.isAssignableFrom(resultType);', 'boolean singleElement = result instanceof List && ((List) result).size() == 1;', 'if (singleElement && !resultIsCollection) {', 'result = ((List) result).get(0);']
['unwrapping result from single element list before converting to ', ['result', 'resulttype']]
camel sample_16969

['public void init() {', 'String exp = expression;', 'if (predicate && isAllowEasyPredicate()) {', 'EasyPredicateParser parser = new EasyPredicateParser();', 'exp = parser.parse(expression);', 'if (!exp.equals(expression)) {']
['easypredicateparser parsed ', ['expression', 'exp']]
camel sample_16969

['public void init() {', 'String exp = expression;', 'if (predicate && isAllowEasyPredicate()) {', 'EasyPredicateParser parser = new EasyPredicateParser();', 'exp = parser.parse(expression);', 'if (!exp.equals(expression)) {', '}', '}']
['initializing using predicate expression ', ['predicate', 'exp']]
camel sample_16969

['}', '}', '}', 'index++;', '}', '} else {', 'BeanInvocation invocation = new BeanInvocation(method, args);', 'exchange.getIn().setBody(invocation);', '}', 'if (binding) {']
['binding to service interface as body header exchangeproperty detected when calling proxy method ', ['method']]
camel sample_4855

['}', '}', 'index++;', '}', '} else {', 'BeanInvocation invocation = new BeanInvocation(method, args);', 'exchange.getIn().setBody(invocation);', '}', 'if (binding) {', '} else {']
['no binding to service interface as body header exchangeproperty not detected using beaninvocation as message body when calling proxy method ', []]
camel sample_4855

['protected Object doInvoke(final Method method, final Exchange exchange) throws Throwable {', 'final boolean isFuture = method.getReturnType() == Future.class;', 'FutureTask<Object> task = new FutureTask<Object>(new Callable<Object>() {', 'public Object call() throws Exception {']
['proxied method call invoking producer ', ['method', 'getname', 'producer']]
camel sample_4855

['protected Object doInvoke(final Method method, final Exchange exchange) throws Throwable {', 'final boolean isFuture = method.getReturnType() == Future.class;', 'FutureTask<Object> task = new FutureTask<Object>(new Callable<Object>() {', 'public Object call() throws Exception {', 'producer.process(exchange);', 'Object answer = afterInvoke(method, exchange, exchange.getPattern(), isFuture);']
['proxied method call returning ', ['method', 'getname', 'answer']]
camel sample_4855

['final boolean isFuture = method.getReturnType() == Future.class;', 'FutureTask<Object> task = new FutureTask<Object>(new Callable<Object>() {', 'public Object call() throws Exception {', 'producer.process(exchange);', 'Object answer = afterInvoke(method, exchange, exchange.getPattern(), isFuture);', 'return answer;', '}', '});', 'if (isFuture) {', 'if (LOG.isTraceEnabled()) {']
['submitting task for exchange id ', ['exchange', 'getexchangeid']]
camel sample_4855

['public void testAll() throws Exception {', 'final List<Discount> result = requestBody("direct: assertNotNull("all result", result);']
['all ', ['result']]
camel sample_17381

['public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");']
['file log info file ', ['sendbodyandheader', 'sleeping', 'for', 'sec', 'before', 'writing', 'enrichdata']]
camel sample_1704

['public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");', 'Thread.sleep(250);']
['file log info done ', ['sendbodyandheader', 'write']]
camel sample_1704

['public void messageReceived(IoSession session, Object message) throws Exception {']
['udpserver received body ', ['message']]
camel sample_11605

['public void exceptionCaught(IoSession session, Throwable cause) throws Exception {']
['ooops something went wrong ', ['cause']]
camel sample_11605

['public void messageReceived(IoSession session, Object message) throws Exception {']
['client received body ', ['message']]
camel sample_11605

['public void exceptionCaught(IoSession session, Throwable cause) throws Exception {']
['ooops something went wrong ', ['cause']]
camel sample_11605

['protected <T> T unmarshall(Class<T> type, Exchange exchange, Object value) throws Exception {']
['unmarshal to with value ', ['type', 'value']]
camel sample_13792

['}', 'Unmarshaller unmarshaller = getUnmarshaller(type);', 'if (parentTypeConverter != null) {', 'if (!needFiltering(exchange)) {', 'XMLStreamReader xmlReader = parentTypeConverter.convertTo(XMLStreamReader.class, exchange, value);', 'if (xmlReader != null) {', 'try {', 'Object unmarshalled = unmarshal(unmarshaller, exchange, xmlReader);', 'return castJaxbType(unmarshalled, type);', '} catch (Exception ex) {']
['cannot use staxstreamreader to unmarshal the message due to ', ['ex']]
camel sample_13792

['protected <T> T marshall(Class<T> type, Exchange exchange, Object value, Method objectFactoryMethod) throws JAXBException, XMLStreamException, FactoryConfigurationError, TypeConversionException {']
['marshal from value to type ', ['value', 'type']]
camel sample_13792

['marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));', '}', 'Object toMarshall = value;', 'if (objectFactoryMethod != null) {', 'try {', 'Object instance = objectFactoryMethod.getDeclaringClass().newInstance();', 'if (instance != null) {', 'toMarshall = objectFactoryMethod.invoke(instance, value);', '}', '} catch (Exception e) {']
['unable to create jaxbelement object for type due to ', ['value', 'getclass', 'e', 'getmessage', 'e']]
camel sample_13792

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, Processor target, Processor nextTarget) throws Exception {', 'definition.idOrCreate(context.getNodeIdFactory());', 'return new DelegateProcessor(target) {', 'protected void processNext(Exchange exchange) throws Exception {']
['debugging at with id with exchange ', ['definition', 'tostring', 'definition', 'getid', 'exchange']]
camel sample_1354

['public void testLoadTestHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_11740

['public void testLoadTestHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';"]
['sending with id ', ['value', 'id']]
camel sample_11740

['public void testLoadTestHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'template.sendBodyAndHeader("seda:start?size=" + SIZE, value, "id", "" + id);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_11740

['public void testRead() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'final ServiceDocument document = requestBodyAndHeaders("direct: assertNotNull(document);', 'assertFalse("ServiceDocument entity sets", document.getEntitySetsInfo().isEmpty());']
['service document has entity sets ', ['document', 'getentitysetsinfo', 'size']]
camel sample_14542

['public void testRead() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'final ServiceDocument document = requestBodyAndHeaders("direct: assertNotNull(document);', 'assertFalse("ServiceDocument entity sets", document.getEntitySetsInfo().isEmpty());', 'final HashMap<String, String> queryParams = new HashMap<String, String>();', 'queryParams.put(SystemQueryOption.$top.name(), "5");', 'headers.put("CamelOlingo2.queryParams", queryParams);', 'final ODataFeed manufacturers = requestBodyAndHeaders("direct: assertNotNull(manufacturers);', 'final List<ODataEntry> manufacturersEntries = manufacturers.getEntries();', 'assertFalse("Manufacturers empty entries", manufacturersEntries.isEmpty());']
['manufacturers feed has entries ', ['manufacturersentries', 'size']]
camel sample_14542

['queryParams.put(SystemQueryOption.$top.name(), "5");', 'headers.put("CamelOlingo2.queryParams", queryParams);', 'final ODataFeed manufacturers = requestBodyAndHeaders("direct: assertNotNull(manufacturers);', 'final List<ODataEntry> manufacturersEntries = manufacturers.getEntries();', 'assertFalse("Manufacturers empty entries", manufacturersEntries.isEmpty());', 'headers.clear();', 'headers.put(Olingo2Constants.PROPERTY_PREFIX + "keyPredicate", "\'1\'");', 'final ODataEntry manufacturer = requestBodyAndHeaders("direct: assertNotNull(manufacturer);', 'final Map<String, Object> properties = manufacturer.getProperties();', 'assertEquals("Manufacturer Id", "1", properties.get(ID_PROPERTY));']
['manufacturer ', ['properties', 'tostring']]
camel sample_14542

['public void testCreateUpdateDelete() throws Exception {', 'final Map<String, Object> data = getEntityData();', 'Map<String, Object> address;', 'final ODataEntry manufacturer = requestBody("direct: assertNotNull("Created Manufacturer", manufacturer);', 'final Map<String, Object> properties = manufacturer.getProperties();', 'assertEquals("Created Manufacturer Id", "123", properties.get(ID_PROPERTY));']
['created manufacturer ', ['properties']]
camel sample_14542

['final Map<String, Object> data = getEntityData();', 'Map<String, Object> address;', 'final ODataEntry manufacturer = requestBody("direct: assertNotNull("Created Manufacturer", manufacturer);', 'final Map<String, Object> properties = manufacturer.getProperties();', 'assertEquals("Created Manufacturer Id", "123", properties.get(ID_PROPERTY));', 'data.put("Name", "MyCarManufacturer Renamed");', 'address = (Map<String, Object>)data.get("Address");', 'address.put("Street", "Main Street");', 'HttpStatusCodes status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCodes.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['update status ', ['status']]
camel sample_14542

['final ODataEntry manufacturer = requestBody("direct: assertNotNull("Created Manufacturer", manufacturer);', 'final Map<String, Object> properties = manufacturer.getProperties();', 'assertEquals("Created Manufacturer Id", "123", properties.get(ID_PROPERTY));', 'data.put("Name", "MyCarManufacturer Renamed");', 'address = (Map<String, Object>)data.get("Address");', 'address.put("Street", "Main Street");', 'HttpStatusCodes status = requestBody("direct: assertNotNull("Update status", status);', 'assertEquals("Update status", HttpStatusCodes.NO_CONTENT.getStatusCode(), status.getStatusCode());', 'status = requestBody("direct: assertNotNull("Delete status", status);', 'assertEquals("Delete status", HttpStatusCodes.NO_CONTENT.getStatusCode(), status.getStatusCode());']
['delete status ', ['status']]
camel sample_14542

['address.put("Street", "Main Street");', 'batchParts.add( Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE_ADDRESS).operation(Operation.UPDATE).body(address).build());', 'updateData.put("Name", "MyCarManufacturer Renamed");', 'batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE) .body(updateData).build());', 'batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());', 'batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());', 'final List<Olingo2BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 9, responseParts.size());', 'final Edm edm = (Edm) responseParts.get(0).getBody();', 'assertNotNull(edm);']
['edm entity sets ', ['edm', 'getentitysets']]
camel sample_14542

['updateData.put("Name", "MyCarManufacturer Renamed");', 'batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE) .body(updateData).build());', 'batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());', 'batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());', 'final List<Olingo2BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 9, responseParts.size());', 'final Edm edm = (Edm) responseParts.get(0).getBody();', 'assertNotNull(edm);', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);']
['read feed ', ['feed', 'getentries']]
camel sample_14542

['batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());', 'batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());', 'final List<Olingo2BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 9, responseParts.size());', 'final Edm edm = (Edm) responseParts.get(0).getBody();', 'assertNotNull(edm);', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);']
['read entry ', ['dataentry', 'getproperties']]
camel sample_14542

['final List<Olingo2BatchResponse> responseParts = requestBody("direct: assertNotNull("Batch response", responseParts);', 'assertEquals("Batch responses expected", 9, responseParts.size());', 'final Edm edm = (Edm) responseParts.get(0).getBody();', 'assertNotNull(edm);', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);']
['read entry with expand ', ['dataentry', 'getproperties']]
camel sample_14542

['final Edm edm = (Edm) responseParts.get(0).getBody();', 'assertNotNull(edm);', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);']
['created entry ', ['dataentry', 'getproperties']]
camel sample_14542

['final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);']
['update address status ', ['statuscode']]
camel sample_14542

['ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(6).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);']
['update entry status ', ['statuscode']]
camel sample_14542

['dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(6).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(7).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);']
['delete status ', ['statuscode']]
camel sample_14542

['assertNotNull(dataEntry);', 'int statusCode = responseParts.get(5).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(6).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'statusCode = responseParts.get(7).getStatusCode();', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);', 'assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(), responseParts.get(8).getStatusCode());', 'final Exception exception = (Exception) responseParts.get(8).getBody();', 'assertNotNull(exception);']
['read deleted entry exception ', ['exception']]
camel sample_14542

['protected void doListNamespaceByLabel(Exchange exchange, String operation) {', 'Map<String, String> labels = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_LABELS, Map.class);', 'if (ObjectHelper.isEmpty(labels)) {']
['get a specific namespace by labels require specify a labels set ', []]
camel sample_13287

['protected void doGetNamespace(Exchange exchange, String operation) {', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific namespace require specify a namespace name ', []]
camel sample_13287

['protected void doCreateNamespace(Exchange exchange, String operation) {', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific namespace require specify a namespace name ', []]
camel sample_13287

['protected void doDeleteNamespace(Exchange exchange, String operation) {', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific namespace require specify a namespace name ', []]
camel sample_13287

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LumberjackComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lumberjack.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lumberjack.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1211

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LdifComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ldif.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ldif.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_726

['protected T loadEntity(Exchange exchange, Object key) throws Exception {', 'LOCK.lock();', 'try {']
['loadentity call ', []]
camel sample_12496

['protected T loadEntity(Exchange exchange, Object key) throws Exception {', 'LOCK.lock();', 'try {', 'T entity = findEntityByCorrelationKey(key);', 'if (entity == null) {', 'entity = createEntity(exchange, key);', 'setKeyProperty(entity, key);', 'ProcessDefinition definition = ProcessDefinition.getRefreshedProcessDefinition(entityManagerTemplate, getActivityRules().getProcessRules().getProcessDefinition());', 'setProcessDefinitionProperty(entity, definition);', 'entityManagerTemplate.persist(entity);']
['about to flush on entity with key ', ['entity', 'key']]
camel sample_12496

['protected Class<?> getKeyType() {', 'try {', 'Method getter = IntrospectionSupport.getPropertyGetter(getEntityType(), getKeyPropertyName());', 'return getter.getReturnType();', '} catch (NoSuchMethodException e) {']
['no such getter for on this exception will be ignored ', ['getkeypropertyname', 'getentitytype', 'e']]
camel sample_12496

['protected void assertCorrectMapReceived() {', 'Exchange exchange = endpoint.getReceivedExchanges().get(0);', 'assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class));', 'JmsMessage in = (JmsMessage) exchange.getIn();', 'assertNotNull(in);', 'Map<?, ?> map = exchange.getIn().getBody(Map.class);']
['received map ', ['map']]
camel sample_6887

['public void notify(EventObject event) throws Exception {', 'boolean begin = event instanceof ExchangeCreatedEvent;', 'boolean complete = event instanceof ExchangeCompletedEvent || event instanceof ExchangeFailedEvent;', 'if (maxMessages > 0 && complete) {', 'doneMessages++;', 'boolean result = doneMessages >= maxMessages;', 'LOG.trace("Duration max messages check {} >= {} -> {}", doneMessages, maxMessages, result);', 'if (result) {', 'if (completed.compareAndSet(false, true)) {']
['duration max messages triggering shutdown of the jvm ', []]
camel sample_5602

['doneMessages++;', 'boolean result = doneMessages >= maxMessages;', 'LOG.trace("Duration max messages check {} >= {} -> {}", doneMessages, maxMessages, result);', 'if (result) {', 'if (completed.compareAndSet(false, true)) {', 'try {', 'if (stopCamelContext) {', 'camelContext.stop();', '}', '} catch (Exception e) {']
['error during stopping camelcontext this exception is ignored ', ['e']]
camel sample_5602

['camelContext.stop();', '}', '} catch (Exception e) {', '} finally {', 'latch.countDown();', '}', '}', '}', '}', 'if (maxIdleSeconds > 0 && (begin || complete)) {']
['message activity so restarting stop watch ', []]
camel sample_5602

['protected void doStart() throws Exception {', 'if (maxIdleSeconds > 0) {', 'camelContext.addStartupListener((context, alreadyStarted) -> watch = new StopWatch());', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "MainDurationIdleChecker");', 'Runnable task = () -> {', 'if (watch == null) {', 'return;', '}', 'int inflight = camelContext.getInflightRepository().size();', 'if (inflight > 0) {']
['duration max idle check is skipped due inflight messages ', ['inflight']]
camel sample_5602

['}', 'int inflight = camelContext.getInflightRepository().size();', 'if (inflight > 0) {', 'return;', '}', 'long seconds = watch.taken() / 1000;', 'boolean result = seconds >= maxIdleSeconds;', 'LOG.trace("Duration max idle check {} >= {} -> {}", seconds, maxIdleSeconds, result);', 'if (result) {', 'if (completed.compareAndSet(false, true)) {']
['duration max idle triggering shutdown of the jvm ', []]
camel sample_5602

['long seconds = watch.taken() / 1000;', 'boolean result = seconds >= maxIdleSeconds;', 'LOG.trace("Duration max idle check {} >= {} -> {}", seconds, maxIdleSeconds, result);', 'if (result) {', 'if (completed.compareAndSet(false, true)) {', 'try {', 'if (stopCamelContext) {', 'camelContext.stop();', '}', '} catch (Exception e) {']
['error during stopping camelcontext this exception is ignored ', ['e']]
camel sample_5602

['public void testCacheBasedBodyReplacer() throws Exception {']
['beginning test testcachebasedbodyreplacer ', []]
camel sample_10501

['in.setHeader(CacheConstants.CACHE_KEY, key);', 'if (key.equalsIgnoreCase("greeting")) {', 'in.setBody("Hello World");', '} else {', 'in.setBody("Bye World");', '}', '}', '});', '}', 'resultEndpoint.assertIsSatisfied();']
['completed test testcachebasedbodyreplacer ', []]
camel sample_10501

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedMessageBodyReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['payload replacement results ', []]
camel sample_10501

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedMessageBodyReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['the following payload was replaced from cache ', []]
camel sample_10501

['from("cache: .process(new CacheBasedMessageBodyReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {', 'log.debug("key = {}", key);', 'log.debug("Before value = Hello World");', 'log.debug("After value = {}", data);']
['end ', []]
camel sample_10501

['private void shutdownServer(SolrClient server) throws IOException {', 'if (server != null) {']
['shutting down solr server ', ['server']]
camel sample_13993

['public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {', 'ClassLoader tccl = Thread.currentThread().getContextClassLoader();', 'try {', 'ClassLoader appcl = camelContext.getApplicationContextClassLoader();', 'if (appcl != null) {', 'Thread.currentThread().setContextClassLoader(appcl);', '}']
['using dozerbeanmapperconfiguration ', ['configuration']]
camel sample_9436

['if (configurations != null) {', 'for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {', 'String id = entry.getKey();', 'MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue());', 'Mapper beanMapper = factory.create();', 'if (!mappers.containsValue(beanMapper)) {', 'mappers.put(id, beanMapper);', '}', '}', '}']
['loaded dozer mappers from camel registry ', ['mappers', 'size']]
camel sample_9436

['for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {', 'String id = entry.getKey();', 'MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue());', 'Mapper beanMapper = factory.create();', 'if (!mappers.containsValue(beanMapper)) {', 'mappers.put(id, beanMapper);', '}', '}', '}', 'if (mappers.size() == 0) {']
['no dozer mappers found in camel registry you should add dozer mappers as beans to the registry of the type ', ['mapper', 'class', 'getname']]
camel sample_9436

['protected void addDozerTypeConverter(TypeConverterRegistry registry, DozerTypeConverter converter, String dozerId, Class<?> to, Class<?> from) {', 'if (log.isInfoEnabled()) {', 'if (dozerId != null) {']
['added dozer as camel type converter ', ['new', 'object', 'dozerid', 'from', 'to']]
camel sample_9436

['protected void addDozerTypeConverter(TypeConverterRegistry registry, DozerTypeConverter converter, String dozerId, Class<?> to, Class<?> from) {', 'if (log.isInfoEnabled()) {', 'if (dozerId != null) {', '} else {']
['added dozer as camel type converter ', ['new', 'object', 'from', 'to']]
camel sample_9436

['public void afterPropertiesSet() throws Exception {', 'StopWatch watch = new StopWatch();', 'super.afterPropertiesSet();', 'Boolean shutdownEager = CamelContextHelper.parseBoolean(getContext(), getShutdownEager());', 'if (shutdownEager != null) {']
['using shutdowneager ', ['shutdowneager']]
camel sample_16338

['public void afterPropertiesSet() throws Exception {', 'StopWatch watch = new StopWatch();', 'super.afterPropertiesSet();', 'Boolean shutdownEager = CamelContextHelper.parseBoolean(getContext(), getShutdownEager());', 'if (shutdownEager != null) {', 'getContext().setShutdownEager(shutdownEager);', '}']
['afterpropertiesset took millis ', ['watch', 'stop']]
camel sample_16338

['protected void initCustomRegistry(SpringCamelContext context) {', 'Registry registry = getBeanForType(Registry.class);', 'if (registry != null) {']
['using custom registry ', ['registry']]
camel sample_16338

['protected void initPropertyPlaceholder() throws Exception {', 'super.initPropertyPlaceholder();', 'Map<String, BridgePropertyPlaceholderConfigurer> beans = applicationContext.getBeansOfType(BridgePropertyPlaceholderConfigurer.class);', 'if (beans.size() == 1) {', 'BridgePropertyPlaceholderConfigurer configurer = beans.values().iterator().next();', 'String id = beans.keySet().iterator().next();']
['bridging camel and spring property placeholder configurer with id ', ['id']]
camel sample_16338

['}', 'pc.setSystemPropertiesMode(configurer.getSystemPropertiesMode());', 'configurer.setResolver(pc.getPropertiesResolver());', 'configurer.setParser(pc.getPropertiesParser());', 'pc.setPropertiesResolver(configurer);', 'pc.setPropertiesParser(configurer);', 'List<PropertiesLocation> locations = new ArrayList<>(pc.getLocations());', 'locations.add(0, new PropertiesLocation("ref", id));', 'pc.setLocations(locations);', '} else if (beans.size() > 1) {']
['cannot bridge camel and spring property placeholders as exact only bean of type bridgepropertyplaceholderconfigurer must be defined was beans defined ', ['beans', 'size']]
camel sample_16338

['private InputStream consume(URL url, final Consumer<String> consumer) throws IOException {', 'final InputStream stream = url.openConnection().getInputStream();', 'new Thread() {', 'public void run() {', 'try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {', 'String line;', 'while ((line = reader.readLine()) != null) {', 'consumer.accept(line);', '}', '} catch (IOException ex) {']
['consumer thread is terminating ', ['ex']]
camel sample_1006

['public void onRemoval(K key, V value, RemovalCause cause) {', 'if (cause.wasEvicted()) {', 'evicted.increment();']
['onremoval ', ['key', 'value']]
camel sample_4341

['public void onRemoval(K key, V value, RemovalCause cause) {', 'if (cause.wasEvicted()) {', 'evicted.increment();', 'if (stopOnEviction) {', 'try {', 'ServiceHelper.stopService(value);', '} catch (Exception e) {']
['error stopping service this exception will be ignored ', ['value', 'e']]
camel sample_4341

['public boolean process(Exchange camelExchange, AsyncCallback callback) {']
['process exchange in an async way ', ['camelexchange']]
camel sample_7994

['public void process(Exchange camelExchange) throws Exception {']
['process exchange in sync way ', ['camelexchange']]
camel sample_7994

['camelExchange.setException(exception);', '} finally {', 'if (endpoint.getCookieHandler() != null) {', 'try {', 'Message inMessage = cxfExchange.getInMessage();', 'if (inMessage != null) {', 'Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS));', 'endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);', '}', '} catch (IOException e) {']
['cannot store cookies ', ['e']]
camel sample_7994

['transportHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER);', 'added = true;', '} else {', 'added = false;', '}', 'transportHeaders.putAll(endpoint.getCookieHandler().loadCookies(camelExchange, endpoint.getRequestUri(camelExchange)));', 'if (added && transportHeaders.size() > 0) {', 'requestContext.put(Message.PROTOCOL_HEADERS, transportHeaders);', '}', '} catch (IOException e) {']
['cannot load cookies ', ['e']]
camel sample_7994

['private BindingOperationInfo prepareBindingOperation(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) {', 'BindingOperationInfo boi = getBindingOperationInfo(camelExchange);', 'ObjectHelper.notNull(boi, "BindingOperationInfo");', 'if (endpoint.getDataFormat() == DataFormat.PAYLOAD && boi.isUnwrapped()) {', 'boi = boi.getWrappedOperation();', 'cxfExchange.put(BindingOperationInfo.class, boi);', '}', 'camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);']
['set exchange property bindingoperationinfo ', ['boi']]
camel sample_7994

['BindingOperationInfo boi = getBindingOperationInfo(camelExchange);', 'ObjectHelper.notNull(boi, "BindingOperationInfo");', 'if (endpoint.getDataFormat() == DataFormat.PAYLOAD && boi.isUnwrapped()) {', 'boi = boi.getWrappedOperation();', 'cxfExchange.put(BindingOperationInfo.class, boi);', '}', 'camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);', 'if (endpoint.getDataFormat() != DataFormat.PAYLOAD && !endpoint.isWrapped() && boi != null) {', 'if (boi.isUnwrappedCapable()) {', 'boi = boi.getUnwrappedOperation();']
['unwrapped boi ', ['boi']]
camel sample_7994

['private BindingOperationInfo getBindingOperationInfo(Exchange ex) {', 'CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint();', 'BindingOperationInfo answer = null;', 'String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class);', 'if (lp == null) {']
['cxfproducer cannot find the from message header trying with defaultoperationname ', ['cxfconstants', 'operation', 'name']]
camel sample_7994

['private BindingOperationInfo getBindingOperationInfo(Exchange ex) {', 'CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint();', 'BindingOperationInfo answer = null;', 'String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class);', 'if (lp == null) {', 'lp = endpoint.getDefaultOperationName();', '}', 'if (lp == null) {']
['cxfproducer cannot find the from message header and there is no defaultoperationname setting cxfproducer will pick up the first available operation ', ['cxfconstants', 'operation', 'name']]
camel sample_7994

['if (iter.hasNext()) {', 'answer = iter.next();', '}', '} else {', 'String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class);', 'if (ns == null) {', 'ns = endpoint.getDefaultOperationNamespace();', '}', 'if (ns == null) {', 'ns = client.getEndpoint().getService().getName().getNamespaceURI();']
['operation namespace not in header set it to ', ['ns']]
camel sample_7994

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AvroComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.avro.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.avro.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1143

['protected void doResume() throws Exception {', 'if (channel != null) {']
['serverbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6686

['protected void doSuspend() throws Exception {', 'if (channel != null) {']
['serverbootstrap unbinding from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6686

['serverBootstrap.setOption("child.reuseAddress", configuration.isReuseAddress());', 'serverBootstrap.setOption("child.connectTimeoutMillis", configuration.getConnectTimeout());', 'if (configuration.getBacklog() > 0) {', 'serverBootstrap.setOption("backlog", configuration.getBacklog());', '}', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'serverBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}']
['created serverbootstrap with options ', ['serverbootstrap', 'serverbootstrap', 'getoptions']]
camel sample_6686

['serverBootstrap.setOption("child.connectTimeoutMillis", configuration.getConnectTimeout());', 'if (configuration.getBacklog() > 0) {', 'serverBootstrap.setOption("backlog", configuration.getBacklog());', '}', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'serverBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}', 'serverBootstrap.setPipelineFactory(pipelineFactory);']
['serverbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6686

['protected void stopServerBootstrap() {']
['serverbootstrap unbinding from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6686

['protected void stopServerBootstrap() {']
['closing channels ', ['allchannels', 'size']]
camel sample_6686

['public void testTimerUsingStopWatch() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(2);', 'StopWatch watch = new StopWatch();', 'assertMockEndpointsSatisfied();', 'long interval = watch.taken();']
['should take approx milliseconds was ', ['interval']]
camel sample_1513

['final CountDownLatch receivedMessageLatch = new CountDownLatch(1);', 'RouteBuilder routes = new RouteBuilder() {', 'public void configure() throws Exception {', 'from("quickfix:examples/gateway.cfg"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)). bean(new CountDownLatchDecrementer("logon", logonLatch));', 'from("quickfix:examples/gateway.cfg"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived)). recipientList(method(new FixMessageRouter("quickfix:examples/gateway.cfg")));', 'from("quickfix:examples/gateway.cfg"). filter(PredicateBuilder.or( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived), header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageSent))). bean(new QuickfixjMessageJsonPrinter());', 'from("quickfix:examples/gateway.cfg?sessionID=FIX.4.2:TRADER@2->GATEWAY"). filter(PredicateBuilder.and( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.EMAIL))). bean(new CountDownLatchDecrementer("message", receivedMessageLatch));', '}', '};', 'context.addRoutes(routes);']
['starting camel context ', []]
camel sample_10653

['context.addRoutes(routes);', 'context.start();', 'if (!logonLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Logon did not complete");', '}', 'String gatewayUri = "quickfix:examples/gateway.cfg?sessionID=FIX.4.2:TRADER@1->GATEWAY";', 'Endpoint gatewayEndpoint = context.getEndpoint(gatewayUri);', 'Producer producer = gatewayEndpoint.createProducer();', 'Email email = TestSupport.createEmailMessage("Dynamic Routing Example");', 'email.getHeader().setString(DeliverToCompID.FIELD, "TRADER@2");']
['sending routed message ', []]
camel sample_10653

['Endpoint gatewayEndpoint = context.getEndpoint(gatewayUri);', 'Producer producer = gatewayEndpoint.createProducer();', 'Email email = TestSupport.createEmailMessage("Dynamic Routing Example");', 'email.getHeader().setString(DeliverToCompID.FIELD, "TRADER@2");', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(email);', 'producer.process(exchange);', 'if (!receivedMessageLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Message did not reach target");', '}']
['message received shutting down camel context ', []]
camel sample_10653

['Producer producer = gatewayEndpoint.createProducer();', 'Email email = TestSupport.createEmailMessage("Dynamic Routing Example");', 'email.getHeader().setString(DeliverToCompID.FIELD, "TRADER@2");', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(email);', 'producer.process(exchange);', 'if (!receivedMessageLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Message did not reach target");', '}', 'context.stop();']
['dynamic routing example complete ', []]
camel sample_10653

['CamelContext camelContext = getCamelContext(context);', 'QuartzEndpoint endpoint = lookupQuartzEndpoint(camelContext, context);', 'exchange = endpoint.createExchange();', 'exchange.setIn(new QuartzMessage(exchange, context));', 'endpoint.getConsumerLoadBalancer().process(exchange);', 'if (exchange.getException() != null) {', 'throw new JobExecutionException(exchange.getException());', '}', '} catch (Exception e) {', 'if (exchange != null) {']
['error processing exchange ', ['camelexchangeexception', 'createexceptionmessage', 'exchange', 'e']]
camel sample_15001

['QuartzEndpoint endpoint = lookupQuartzEndpoint(camelContext, context);', 'exchange = endpoint.createExchange();', 'exchange.setIn(new QuartzMessage(exchange, context));', 'endpoint.getConsumerLoadBalancer().process(exchange);', 'if (exchange.getException() != null) {', 'throw new JobExecutionException(exchange.getException());', '}', '} catch (Exception e) {', 'if (exchange != null) {', '} else {']
['failed to execute cameljob ', ['e']]
camel sample_15001

['}', 'if (triggerKey.equals(checkTriggerKey) || (jobDetail.requestsRecovery() && jobKey.getGroup().equals(checkTriggerKey.getGroup()) && jobKey.getName().equals(checkTriggerKey.getName()))) {', 'return quartzEndpoint;', '}', '}', '}', 'String endpointUri = quartzContext.getMergedJobDataMap().getString(QuartzConstants.QUARTZ_ENDPOINT_URI);', 'QuartzEndpoint result = null;', 'if (camelContext.hasEndpoint(endpointUri) != null) {', 'if (LOG.isDebugEnabled()) {']
['getting endpoint from camelcontext ', []]
camel sample_15001

['QuartzEndpoint result = null;', 'if (camelContext.hasEndpoint(endpointUri) != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'result = camelContext.getEndpoint(endpointUri, QuartzEndpoint.class);', '} else if ((result = searchForEndpointMatch(camelContext, endpointUri)) != null) {', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Found match for endpoint URI = " + endpointUri + " by searching endpoint list.");', '}', '} else {']
['cannot find existing quartzendpoint with uri creating new endpoint instance ', ['endpointuri']]
camel sample_15001

['MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class);', 'mockEndpoint.expectedMessageCount(1);', 'template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_12814

['template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();', 'checkHeaders(headers);', 'String body = in.getBody(String.class);']
['body ', ['body']]
camel sample_12814

['protected static void setupClient() throws Exception {', 'olingoApp = new Olingo2AppImpl(TEST_SERVICE_URL + "/");', 'olingoApp.setContentType(TEST_FORMAT_STRING);']
['read edm ', []]
camel sample_14539

['protected static void setupClient() throws Exception {', 'olingoApp = new Olingo2AppImpl(TEST_SERVICE_URL + "/");', 'olingoApp.setContentType(TEST_FORMAT_STRING);', 'final TestOlingo2ResponseHandler<Edm> responseHandler = new TestOlingo2ResponseHandler<Edm>();', 'olingoApp.read(null, Olingo2AppImpl.METADATA, null, null, responseHandler);', 'edm = responseHandler.await();']
['read default entitycontainer ', ['responsehandler', 'await', 'getdefaultentitycontainer', 'getname']]
camel sample_14539

['public void testServiceDocument() throws Exception {', 'final TestOlingo2ResponseHandler<ServiceDocument> responseHandler = new TestOlingo2ResponseHandler<ServiceDocument>();', 'olingoApp.read(null, "", null, null, responseHandler);', 'final ServiceDocument serviceDocument = responseHandler.await();', 'final List<Collection> collections = serviceDocument.getAtomInfo().getWorkspaces().get(0).getCollections();', 'assertEquals("Service Atom Collections", 3, collections.size());']
['service atom collections ', ['collections']]
camel sample_14539

['public void testServiceDocument() throws Exception {', 'final TestOlingo2ResponseHandler<ServiceDocument> responseHandler = new TestOlingo2ResponseHandler<ServiceDocument>();', 'olingoApp.read(null, "", null, null, responseHandler);', 'final ServiceDocument serviceDocument = responseHandler.await();', 'final List<Collection> collections = serviceDocument.getAtomInfo().getWorkspaces().get(0).getCollections();', 'assertEquals("Service Atom Collections", 3, collections.size());', 'final List<EdmEntitySetInfo> entitySetsInfo = serviceDocument.getEntitySetsInfo();', 'assertEquals("Service Entity Sets", 3, entitySetsInfo.size());']
['service document entries ', ['entitysetsinfo']]
camel sample_14539

['public void testReadFeed() throws Exception {', 'final TestOlingo2ResponseHandler<ODataFeed> responseHandler = new TestOlingo2ResponseHandler<ODataFeed>();', 'olingoApp.read(edm, MANUFACTURERS, null, null, responseHandler);', 'final ODataFeed dataFeed = responseHandler.await();', 'assertNotNull("Data feed", dataFeed);']
['entries ', ['prettyprint', 'datafeed']]
camel sample_14539

['public void testReadUnparsedFeed() throws Exception {', 'final TestOlingo2ResponseHandler<InputStream> responseHandler = new TestOlingo2ResponseHandler<InputStream>();', 'olingoApp.uread(edm, MANUFACTURERS, null, null, responseHandler);', 'final InputStream rawfeed = responseHandler.await();', 'assertNotNull("Data feed", rawfeed);', 'final ODataFeed dataFeed = EntityProvider.readFeed(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawfeed, EntityProviderReadProperties.init().build());']
['entries ', ['prettyprint', 'datafeed']]
camel sample_14539

['public void testReadEntry() throws Exception {', 'final TestOlingo2ResponseHandler<ODataEntry> responseHandler = new TestOlingo2ResponseHandler<ODataEntry>();', 'olingoApp.read(edm, TEST_MANUFACTURER, null, null, responseHandler);', 'ODataEntry entry = responseHandler.await();']
['single entry ', ['prettyprint', 'entry']]
camel sample_14539

['public void testReadEntry() throws Exception {', 'final TestOlingo2ResponseHandler<ODataEntry> responseHandler = new TestOlingo2ResponseHandler<ODataEntry>();', 'olingoApp.read(edm, TEST_MANUFACTURER, null, null, responseHandler);', 'ODataEntry entry = responseHandler.await();', 'responseHandler.reset();', 'olingoApp.read(edm, TEST_CAR, null, null, responseHandler);', 'entry = responseHandler.await();']
['single entry ', ['prettyprint', 'entry']]
camel sample_14539

['olingoApp.read(edm, TEST_MANUFACTURER, null, null, responseHandler);', 'ODataEntry entry = responseHandler.await();', 'responseHandler.reset();', 'olingoApp.read(edm, TEST_CAR, null, null, responseHandler);', 'entry = responseHandler.await();', 'responseHandler.reset();', 'final Map<String, String> queryParams = new HashMap<String, String>();', 'queryParams.put(SystemQueryOption.$expand.toString(), CARS);', 'olingoApp.read(edm, TEST_MANUFACTURER, queryParams, null, responseHandler);', 'ODataEntry entryExpanded = responseHandler.await();']
['single entry with expanded cars relation ', ['prettyprint', 'entryexpanded']]
camel sample_14539

['public void testReadUnparsedEntry() throws Exception {', 'final TestOlingo2ResponseHandler<InputStream> responseHandler = new TestOlingo2ResponseHandler<InputStream>();', 'olingoApp.uread(edm, TEST_MANUFACTURER, null, null, responseHandler);', 'InputStream rawentry = responseHandler.await();', 'ODataEntry entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawentry, EntityProviderReadProperties.init().build());']
['single entry ', ['prettyprint', 'entry']]
camel sample_14539

['public void testReadUnparsedEntry() throws Exception {', 'final TestOlingo2ResponseHandler<InputStream> responseHandler = new TestOlingo2ResponseHandler<InputStream>();', 'olingoApp.uread(edm, TEST_MANUFACTURER, null, null, responseHandler);', 'InputStream rawentry = responseHandler.await();', 'ODataEntry entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawentry, EntityProviderReadProperties.init().build());', 'responseHandler.reset();', 'olingoApp.uread(edm, TEST_CAR, null, null, responseHandler);', 'rawentry = responseHandler.await();', 'entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(CARS), rawentry, EntityProviderReadProperties.init().build());']
['single entry ', ['prettyprint', 'entry']]
camel sample_14539

['responseHandler.reset();', 'olingoApp.uread(edm, TEST_CAR, null, null, responseHandler);', 'rawentry = responseHandler.await();', 'entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(CARS), rawentry, EntityProviderReadProperties.init().build());', 'responseHandler.reset();', 'final Map<String, String> queryParams = new HashMap<String, String>();', 'queryParams.put(SystemQueryOption.$expand.toString(), CARS);', 'olingoApp.uread(edm, TEST_MANUFACTURER, queryParams, null, responseHandler);', 'rawentry = responseHandler.await();', 'ODataEntry entryExpanded = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawentry, EntityProviderReadProperties.init().build());']
['single entry with expanded cars relation ', ['prettyprint', 'entryexpanded']]
camel sample_14539

['public void testReadUpdateProperties() throws Exception {', 'final TestOlingo2ResponseHandler<Map<String, Object>> propertyHandler = new TestOlingo2ResponseHandler<Map<String, Object>>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, null, propertyHandler);', 'Calendar founded = (Calendar) propertyHandler.await().get(FOUNDED_PROPERTY);']
['founded property ', ['founded', 'tostring']]
camel sample_14539

['public void testReadUpdateProperties() throws Exception {', 'final TestOlingo2ResponseHandler<Map<String, Object>> propertyHandler = new TestOlingo2ResponseHandler<Map<String, Object>>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, null, propertyHandler);', 'Calendar founded = (Calendar) propertyHandler.await().get(FOUNDED_PROPERTY);', 'final TestOlingo2ResponseHandler<Calendar> valueHandler = new TestOlingo2ResponseHandler<Calendar>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, null, valueHandler);', 'founded = valueHandler.await();']
['founded property ', ['founded', 'tostring']]
camel sample_14539

['final TestOlingo2ResponseHandler<Map<String, Object>> propertyHandler = new TestOlingo2ResponseHandler<Map<String, Object>>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, null, propertyHandler);', 'Calendar founded = (Calendar) propertyHandler.await().get(FOUNDED_PROPERTY);', 'final TestOlingo2ResponseHandler<Calendar> valueHandler = new TestOlingo2ResponseHandler<Calendar>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, null, valueHandler);', 'founded = valueHandler.await();', 'final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<HttpStatusCodes>();', 'final HashMap<String, Object> properties = new HashMap<String, Object>();', 'properties.put(FOUNDED_PROPERTY, new Date());', 'olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, new Date(), statusHandler);']
['founded property updated with status ', ['statushandler', 'await', 'getstatuscode']]
camel sample_14539

['Calendar founded = (Calendar) propertyHandler.await().get(FOUNDED_PROPERTY);', 'final TestOlingo2ResponseHandler<Calendar> valueHandler = new TestOlingo2ResponseHandler<Calendar>();', 'olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, null, valueHandler);', 'founded = valueHandler.await();', 'final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<HttpStatusCodes>();', 'final HashMap<String, Object> properties = new HashMap<String, Object>();', 'properties.put(FOUNDED_PROPERTY, new Date());', 'olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, new Date(), statusHandler);', 'statusHandler.reset();', 'olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, new Date(), statusHandler);']
['founded property updated with status ', ['statushandler', 'await', 'getstatuscode']]
camel sample_14539

['founded = valueHandler.await();', 'final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<HttpStatusCodes>();', 'final HashMap<String, Object> properties = new HashMap<String, Object>();', 'properties.put(FOUNDED_PROPERTY, new Date());', 'olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, new Date(), statusHandler);', 'statusHandler.reset();', 'olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, new Date(), statusHandler);', 'propertyHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, null, null, propertyHandler);', 'final Map<String, Object> address = propertyHandler.await();']
['address property ', ['prettyprint', 'address']]
camel sample_14539

['propertyHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, null, null, propertyHandler);', 'final Map<String, Object> address = propertyHandler.await();', 'statusHandler.reset();', 'address.clear();', 'address.put("Street", "Star Street 137");', 'address.put("City", "Stuttgart");', 'address.put("ZipCode", "70173");', 'address.put("Country", "Germany");', 'olingoApp.merge(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, null, address, statusHandler);']
['address property updated with status ', ['statushandler', 'await', 'getstatuscode']]
camel sample_14539

['public void testReadDeleteCreateLinks() throws Exception {', 'final TestOlingo2ResponseHandler<List<String>> linksHandler = new TestOlingo2ResponseHandler<List<String>>();', 'olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS, null, null, linksHandler);', 'final List<String> links = linksHandler.await();', 'assertFalse(links.isEmpty());']
['read links ', ['links']]
camel sample_14539

['public void testReadDeleteCreateLinks() throws Exception {', 'final TestOlingo2ResponseHandler<List<String>> linksHandler = new TestOlingo2ResponseHandler<List<String>>();', 'olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS, null, null, linksHandler);', 'final List<String> links = linksHandler.await();', 'assertFalse(links.isEmpty());', 'final TestOlingo2ResponseHandler<String> linkHandler = new TestOlingo2ResponseHandler<String>();', 'olingoApp.read(edm, TEST_CAR_LINK_MANUFACTURER, null, null, linkHandler);', 'final String link = linkHandler.await();']
['read link ', ['link']]
camel sample_14539

['public void testReadCount() throws Exception {', 'final TestOlingo2ResponseHandler<Long> countHandler = new TestOlingo2ResponseHandler<Long>();', 'olingoApp.read(edm, MANUFACTURERS + COUNT_OPTION, null, null, countHandler);']
['manufacturers count ', ['counthandler', 'await']]
camel sample_14539

['public void testReadCount() throws Exception {', 'final TestOlingo2ResponseHandler<Long> countHandler = new TestOlingo2ResponseHandler<Long>();', 'olingoApp.read(edm, MANUFACTURERS + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER + COUNT_OPTION, null, null, countHandler);']
['manufacturer count ', ['counthandler', 'await']]
camel sample_14539

['public void testReadCount() throws Exception {', 'final TestOlingo2ResponseHandler<Long> countHandler = new TestOlingo2ResponseHandler<Long>();', 'olingoApp.read(edm, MANUFACTURERS + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS + COUNT_OPTION, null, null, countHandler);']
['manufacturers links count ', ['counthandler', 'await']]
camel sample_14539

['public void testReadCount() throws Exception {', 'final TestOlingo2ResponseHandler<Long> countHandler = new TestOlingo2ResponseHandler<Long>();', 'olingoApp.read(edm, MANUFACTURERS + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS + COUNT_OPTION, null, null, countHandler);', 'countHandler.reset();', 'olingoApp.read(edm, TEST_CAR_LINK_MANUFACTURER + COUNT_OPTION, null, null, countHandler);']
['manufacturer link count ', ['counthandler', 'await']]
camel sample_14539

['public void testCreateUpdateDeleteEntry() throws Exception {', 'final TestOlingo2ResponseHandler<ODataEntry> entryHandler = new TestOlingo2ResponseHandler<ODataEntry>();', 'olingoApp.create(edm, MANUFACTURERS, null, getEntityData(), entryHandler);', 'ODataEntry createdEntry = entryHandler.await();']
['created entry ', ['prettyprint', 'createdentry']]
camel sample_14539

['final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<HttpStatusCodes>();', 'olingoApp.update(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler);', 'statusHandler.await();', 'statusHandler.reset();', 'data.put("Name", "MyCarManufacturer Patched");', 'olingoApp.patch(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler);', 'ODataEntry updatedEntry = entryHandler.await();']
['updated entry successfully ', ['prettyprint', 'updatedentry']]
camel sample_14539

['statusHandler.reset();', 'data.put("Name", "MyCarManufacturer Patched");', 'olingoApp.patch(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler);', 'ODataEntry updatedEntry = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_MANUFACTURER, null, statusHandler);', 'HttpStatusCodes statusCode = statusHandler.await();']
['deletion of entry was successful ', ['statuscode', 'getstatuscode', 'statuscode', 'getinfo']]
camel sample_14539

['data.put("Name", "MyCarManufacturer Patched");', 'olingoApp.patch(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler);', 'ODataEntry updatedEntry = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_MANUFACTURER, null, statusHandler);', 'HttpStatusCodes statusCode = statusHandler.await();', 'try {']
['verify delete entry ', []]
camel sample_14539

['ODataEntry updatedEntry = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_MANUFACTURER, null, statusHandler);', 'HttpStatusCodes statusCode = statusHandler.await();', 'try {', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler);', 'entryHandler.await();', 'fail("Entry not deleted!");', '} catch (Exception e) {']
['deleted entry not found ', ['e', 'getmessage']]
camel sample_14539

['batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE) .body(updateData).build());', 'batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());', 'final TestOlingo2ResponseHandler<List<Olingo2BatchResponse>> responseHandler = new TestOlingo2ResponseHandler<List<Olingo2BatchResponse>>();', 'batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());', 'olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo2BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);']
['batch feed ', ['prettyprint', 'feed']]
camel sample_14539

['final TestOlingo2ResponseHandler<List<Olingo2BatchResponse>> responseHandler = new TestOlingo2ResponseHandler<List<Olingo2BatchResponse>>();', 'batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());', 'olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo2BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);']
['batch read entry ', ['prettyprint', 'dataentry']]
camel sample_14539

['olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo2BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);']
['batch read entry with expand ', ['prettyprint', 'dataentry']]
camel sample_14539

['assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();', 'assertNotNull(feed);', 'ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);']
['batch create entry ', ['prettyprint', 'dataentry']]
camel sample_14539

['assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(3).getBody();', 'assertNotNull(dataEntry);', 'dataEntry = (ODataEntry) responseParts.get(4).getBody();', 'assertNotNull(dataEntry);', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), responseParts.get(5).getStatusCode());', 'assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), responseParts.get(6).getStatusCode());', 'assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(), responseParts.get(7).getStatusCode());', 'final Exception exception = (Exception) responseParts.get(7).getBody();', 'assertNotNull(exception);']
['batch retrieve deleted entry ', ['exception']]
camel sample_14539

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ODataFeed) {']
['received response ', ['prettyprint', 'odatafeed', 'response']]
camel sample_14539

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ODataFeed) {', '} else if (response instanceof ODataEntry) {']
['received response ', ['prettyprint', 'odataentry', 'response']]
camel sample_14539

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ODataFeed) {', '} else if (response instanceof ODataEntry) {', '} else {']
['received response ', ['response']]
camel sample_14539

['protected Enumeration<URL> getResources(ClassLoader loader, String packageName) throws IOException {', 'Enumeration<URL> enumeration = super.getResources(loader, packageName);', 'if (!enumeration.hasMoreElements()) {']
['using websphere workaround to load the camel jars with the annotated converters ', []]
camel sample_4068

['public static void setUpClass() throws Exception {', 'try {', 'hbaseUtil.startMiniCluster(numServers);', '} catch (Exception e) {']
['couldn t start hbase cluster test is not started but passed ', ['e']]
camel sample_14493

['public void setUp() throws Exception {', 'super.setUp();', 'File directory = new File(PATH);', 'if (!directory.isDirectory() || !directory.exists()) {']
['cannot delete files from directory s because path is not a directory or it doesn t exist ', ['string', 'format', 'path']]
camel sample_12117

['public void setUp() throws Exception {', 'super.setUp();', 'File directory = new File(PATH);', 'if (!directory.isDirectory() || !directory.exists()) {', '} else {']
['deleting files from ', ['path']]
camel sample_12117

['public void setUp() throws Exception {', 'super.setUp();', 'File directory = new File(PATH);', 'if (!directory.isDirectory() || !directory.exists()) {', '} else {', 'File[] files = directory.listFiles();', 'for (File file : files) {']
['deleting s ', ['string', 'format', 'file', 'getname']]
camel sample_12117

['public void onFailure(Exchange exchange) {', 'try {', 'lock.readLock().lock();', 'if (commitStrategy.rollback(exchange)) {', 'if (LOG.isDebugEnabled()) {']
['processing failure of exchange id ', ['exchange', 'getexchangeid']]
camel sample_12402

['try {', 'lock.readLock().lock();', 'if (commitStrategy.rollback(exchange)) {', 'if (LOG.isDebugEnabled()) {', '}', 'if (session != null && session.getTransacted()) {', 'session.rollback();', '}', '}', '} catch (Exception e) {']
['failed to rollback the session this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_12402

['public void onComplete(Exchange exchange) {', 'try {', 'lock.readLock().lock();', 'if (commitStrategy.commit(exchange)) {', 'if (LOG.isDebugEnabled()) {']
['processing completion of exchange id ', ['exchange', 'getexchangeid']]
camel sample_12402

['try {', 'lock.readLock().lock();', 'if (commitStrategy.commit(exchange)) {', 'if (LOG.isDebugEnabled()) {', '}', 'if (session != null && session.getTransacted()) {', 'session.commit();', '}', '}', '} catch (Exception e) {']
['failed to commit the session this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_12402

['public void run() {']
['batch transaction timer expired ', []]
camel sample_12402

['public void run() {', 'try {', 'lock.writeLock().lock();']
['committing the current transactions ', []]
camel sample_12402

['public void run() {', 'try {', 'lock.writeLock().lock();', 'try {', 'if (session != null && session.getTransacted()) {', 'session.commit();', '}', '((BatchTransactionCommitStrategy) commitStrategy).reset();', '} catch (Exception e) {']
['failed to commit the session during timeout this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_12402

['public boolean cancel() {']
['cancelling the timeouttask ', []]
camel sample_12402

['protected int poll() throws Exception {']
['going to execute the weather query ', ['query']]
camel sample_11384

['protected int poll() throws Exception {', 'HttpClient httpClient = ((WeatherComponent) getEndpoint().getComponent()).getHttpClient();', 'GetMethod getMethod = new GetMethod(query);', 'try {', 'int status = httpClient.executeMethod(getMethod);', 'if (status != HttpStatus.SC_OK) {']
['http call for weather returned error status code as a result with query ', ['status', 'getmethod', 'getstatusline', 'query']]
camel sample_11384

['protected int poll() throws Exception {', 'HttpClient httpClient = ((WeatherComponent) getEndpoint().getComponent()).getHttpClient();', 'GetMethod getMethod = new GetMethod(query);', 'try {', 'int status = httpClient.executeMethod(getMethod);', 'if (status != HttpStatus.SC_OK) {', 'return 0;', '}', 'String weather = getEndpoint().getCamelContext().getTypeConverter().mandatoryConvertTo(String.class, getMethod.getResponseBodyAsStream());']
['got back the weather information ', ['weather']]
camel sample_11384

['public void testPostStatusUpdateRequestResponse() throws Exception {', 'Date now = new Date();', 'String tweet = "UserProducerInOutTest: This is a tweet posted on " + now.toString();']
['tweet ', ['tweet']]
camel sample_14186

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BoxComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.box.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.box.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_566

['public void updateCorrelationId(String correlationId, String newCorrelationId, long requestTimeout) {']
['updated provisional correlationid to expected correlationid ', ['correlationid', 'newcorrelationid']]
camel sample_7185

['protected void handleReplyMessage(String correlationID, Message message, Session session) {', 'ReplyHandler handler = correlation.get(correlationID);', 'if (handler == null && endpoint.isUseMessageIDAsCorrelationID()) {', 'handler = waitForProvisionCorrelationToBeUpdated(correlationID, message);', '}', 'if (handler != null) {', 'correlation.remove(correlationID);', 'handler.onReply(correlationID, message, session);', '} else {']
['reply received for unknown correlationid on reply destination current correlation map size the message will be ignored ', ['new', 'object', 'correlationid', 'replyto', 'correlation', 'size', 'message']]
camel sample_7185

['if (type == null) {', 'type = ReplyToType.Shared;', '}', 'if (ReplyToType.Shared == type) {', 'String replyToSelectorName = endpoint.getReplyToDestinationSelectorName();', 'if (replyToSelectorName != null) {', 'replyToSelectorValue = "ID:" + new BigInteger(24 * 8, new Random()).toString(16);', 'String fixedMessageSelector = replyToSelectorName + "=\'" + replyToSelectorValue + "\'";', 'answer = new SharedQueueMessageListenerContainer(endpoint, fixedMessageSelector);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);']
['using shared queue with fixed message selector as reply listener ', ['endpoint', 'getreplyto', 'fixedmessageselector', 'answer']]
camel sample_7185

['String replyToSelectorName = endpoint.getReplyToDestinationSelectorName();', 'if (replyToSelectorName != null) {', 'replyToSelectorValue = "ID:" + new BigInteger(24 * 8, new Random()).toString(16);', 'String fixedMessageSelector = replyToSelectorName + "=\'" + replyToSelectorValue + "\'";', 'answer = new SharedQueueMessageListenerContainer(endpoint, fixedMessageSelector);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);', '} else {', 'dynamicMessageSelector = new MessageSelectorCreator(correlation);', 'answer = new SharedQueueMessageListenerContainer(endpoint, dynamicMessageSelector);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_SESSION);']
['using shared queue with dynamic message selector as reply listener ', ['endpoint', 'getreplyto', 'answer']]
camel sample_7185

['answer = new SharedQueueMessageListenerContainer(endpoint, fixedMessageSelector);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);', '} else {', 'dynamicMessageSelector = new MessageSelectorCreator(correlation);', 'answer = new SharedQueueMessageListenerContainer(endpoint, dynamicMessageSelector);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_SESSION);', '}', 'log.warn("{} is using a shared reply queue, which is not as fast as alternatives." + " See more detail at the section \'Request-reply over JMS\' at http: } else if (ReplyToType.Exclusive == type) {', 'answer = new ExclusiveQueueMessageListenerContainer(endpoint);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);']
['using exclusive queue as reply listener ', ['endpoint', 'getreplyto', 'answer']]
camel sample_7185

['}', 'log.warn("{} is using a shared reply queue, which is not as fast as alternatives." + " See more detail at the section \'Request-reply over JMS\' at http: } else if (ReplyToType.Exclusive == type) {', 'answer = new ExclusiveQueueMessageListenerContainer(endpoint);', 'answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);', '} else {', 'throw new IllegalArgumentException("ReplyToType " + type + " is not supported for reply queues");', '}', 'String replyToCacheLevelName = endpoint.getConfiguration().getReplyToCacheLevelName();', 'if (replyToCacheLevelName != null) {', 'answer.setCacheLevelName(replyToCacheLevelName);']
['setting the replycachelevel to be ', ['replytocachelevelname']]
camel sample_7185

['} else {', 'answer.setErrorHandler(new DefaultSpringErrorHandler(endpoint.getCamelContext(), QueueReplyManager.class, endpoint.getErrorHandlerLoggingLevel(), endpoint.isErrorHandlerLogStackTrace()));', '}', 'if (endpoint.getReceiveTimeout() >= 0) {', 'answer.setReceiveTimeout(endpoint.getReceiveTimeout());', '}', 'if (endpoint.getRecoveryInterval() >= 0) {', 'answer.setRecoveryInterval(endpoint.getRecoveryInterval());', '}', 'if (endpoint.getTaskExecutor() != null) {']
['using custom taskexecutor on listener container ', ['endpoint', 'gettaskexecutor', 'answer']]
camel sample_7185

['if (endpoint.getRecoveryInterval() >= 0) {', 'answer.setRecoveryInterval(endpoint.getRecoveryInterval());', '}', 'if (endpoint.getTaskExecutor() != null) {', 'answer.setTaskExecutor(endpoint.getTaskExecutor());', '}', 'String name = "QueueReplyManager[" + answer.getDestinationName() + "]";', 'answer.setBeanName(name);', 'if (answer.getConcurrentConsumers() > 1) {', 'if (ReplyToType.Shared == type) {']
['using concurrent consumer on with shared queue may not work properly with all message brokers ', ['new', 'object', 'answer', 'getconcurrentconsumers', 'answer', 'getmaxconcurrentconsumers', 'name', 'endpoint', 'getreplyto']]
camel sample_7185

['answer.setRecoveryInterval(endpoint.getRecoveryInterval());', '}', 'if (endpoint.getTaskExecutor() != null) {', 'answer.setTaskExecutor(endpoint.getTaskExecutor());', '}', 'String name = "QueueReplyManager[" + answer.getDestinationName() + "]";', 'answer.setBeanName(name);', 'if (answer.getConcurrentConsumers() > 1) {', 'if (ReplyToType.Shared == type) {', '} else {']
['using concurrent consumers on ', ['new', 'object', 'answer', 'getconcurrentconsumers', 'answer', 'getmaxconcurrentconsumers', 'name']]
camel sample_7185

['protected void doStart() throws Exception {', 'super.doStart();']
['netty consumer binding to ', ['configuration', 'getaddress']]
camel sample_10254

['nettyServerBootstrapFactory = new ClientModeTCPNettyServerBootstrapFactory();', '} else {', 'nettyServerBootstrapFactory = new SingleTCPNettyServerBootstrapFactory();', '}', '} else {', 'nettyServerBootstrapFactory = new SingleUDPNettyServerBootstrapFactory();', '}', 'nettyServerBootstrapFactory.init(context, configuration, pipelineFactory);', '}', 'ServiceHelper.startServices(nettyServerBootstrapFactory);']
['netty consumer bound to ', ['configuration', 'getaddress']]
camel sample_10254

['protected void doStop() throws Exception {']
['netty consumer unbinding from ', ['configuration', 'getaddress']]
camel sample_10254

['protected void doStop() throws Exception {', 'ServiceHelper.stopService(nettyServerBootstrapFactory);']
['netty consumer unbound from ', ['configuration', 'getaddress']]
camel sample_10254

['public void run() {']
['running scheduled timerlistener task ', []]
camel sample_5157

['public void run() {', 'if (!isRunAllowed()) {']
['timerlistener task cannot run as its not allowed ', []]
camel sample_5157

['public void run() {', 'if (!isRunAllowed()) {', 'return;', '}', 'for (TimerListener listener : listeners) {', 'try {']
['invoking ontimer on ', ['listener']]
camel sample_5157

['public void run() {', 'if (!isRunAllowed()) {', 'return;', '}', 'for (TimerListener listener : listeners) {', 'try {', 'listener.onTimer();', '} catch (Throwable e) {']
['error occurred during ontimer for timerlistener this exception will be ignored ', ['listener', 'e']]
camel sample_5157

['public void addTimerListener(TimerListener listener) {', 'listeners.add(listener);']
['added timerlistener ', ['listener']]
camel sample_5157

['public void removeTimerListener(TimerListener listener) {', 'listeners.remove(listener);']
['removed timerlistener ', ['listener']]
camel sample_5157

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "camelContext", this);', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "ManagementLoadTask");', 'task = executorService.scheduleAtFixedRate(this, interval, interval, TimeUnit.MILLISECONDS);']
['started scheduled timerlistener task to run with interval ms ', ['interval']]
camel sample_5157

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CouchDbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.couchdb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.couchdb.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_423

['protected void setUp() throws Exception {', 'registryPort = 30000 + new Random().nextInt(10000);']
['using port ', ['registryport']]
camel sample_2738

['protected void doStart() throws Exception {', 'super.doStart();', 'connection = zkm.getConnection();', 'if (log.isDebugEnabled()) {']
['connected to zookeeper cluster s ', ['string', 'format', 'configuration', 'getconnectstring']]
camel sample_12639

['protected void doStop() throws Exception {', 'super.doStop();', 'shuttingDown = true;', 'if (log.isTraceEnabled()) {']
['shutting down zookeeper consumer of s ', ['string', 'format', 'configuration', 'getpath']]
camel sample_12639

['private void initializeDataConsumer(String node) {', 'if (!shuttingDown) {', 'if (log.isDebugEnabled()) {']
['initializing consumption of data on node s ', ['string', 'format', 'node']]
camel sample_12639

['private void initializeChildListingConsumer(String node) {', 'if (!shuttingDown) {', 'if (log.isDebugEnabled()) {']
['initializing child listing of node s ', ['string', 'format', 'node']]
camel sample_12639

['public void run() {', 'while (isRunAllowed()) {', 'try {', 'current = operations.take();', 'if (log.isTraceEnabled()) {']
['processing s operation ', ['string', 'format', 'current', 'getclass', 'getsimplename']]
camel sample_12639

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KinesisComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-kinesis.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-kinesis.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1114

['final String key = entry.getKey();', 'if (key.startsWith(propertyPrefix)) {', 'properties.put(key.substring(prefixLength), entry.getValue());', 'nProperties++;', '} else if (camelCasePrefix != null && key.startsWith(camelCasePrefix)) {', 'final String propertyName = String.valueOf(Character.toLowerCase(key.charAt(prefixLength - 1))) + key.substring(prefixLength);', 'properties.put(propertyName, entry.getValue());', 'nProperties++;', '}', '}']
['found properties in exchange ', ['nproperties']]
camel sample_4316

['public void getEndpointProperties(Object endpointConfiguration, Map<String, Object> properties) {', 'Set<String> names = null;', 'if (IntrospectionSupport.getProperties(endpointConfiguration, properties, null, false)) {', 'names = properties.keySet();', 'names.removeAll(componentConfigFields);', '}']
['found endpoint properties ', ['names']]
camel sample_4316

['public void testIrcMessages() throws Exception {', 'resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceived(body1, body2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_12140

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'AbstractIgniteEndpoint answer = null;', 'URI remainingUri = new URI(URISupport.normalizeUri(remaining));', 'String scheme = remainingUri.getScheme();']
['the scheme syntax ignite has been deprecated use ignite instead ', ['scheme', 'scheme']]
camel sample_11296

['MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class);', 'mockEndpoint.expectedMessageCount(1);', 'template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_12843

['template.sendBody("direct:start", null);', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();', 'checkHeaders(headers);', 'String body = in.getBody(String.class);']
['body ', ['body']]
camel sample_12843

['public void testSuspendResume() throws Exception {', 'assertFalse(context.isSuspended());', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();']
['Suspending ', []]
camel sample_1397

['resetMocks();', 'mock.expectedMessageCount(0);', 'context.suspend();', 'Thread.sleep(100);', 'template.sendBody("seda:foo", "B");', 'mock.assertIsSatisfied(1000);', 'assertTrue(context.isSuspended());', 'assertFalse(context.getStatus().isStarted());', 'assertTrue(context.getStatus().isSuspended());', 'assertFalse(context.getStatus().isStopped());']
['Resuming ', []]
camel sample_1397

['public void process(Exchange exchange) throws Exception {', 'AsteriskAction action = exchange.getIn().getHeader(AsteriskConstants.ACTION, AsteriskAction.class);', 'if (action == null) {', 'action = endpoint.getAction();', '}', 'ObjectHelper.notNull(action, "action");']
['send action ', ['action']]
camel sample_12906

['protected void doStart() throws Exception {', 'boolean startScheduler = isStartScheduler();', 'setStartScheduler(false);', 'try {', 'super.doStart();', 'if (endpoint.isAutoCreate()) {']
['auto creating directory ', ['endpoint', 'getconfiguration', 'getdirectory']]
camel sample_15390

['protected void doStart() throws Exception {', 'boolean startScheduler = isStartScheduler();', 'setStartScheduler(false);', 'try {', 'super.doStart();', 'if (endpoint.isAutoCreate()) {', 'try {', 'connectIfNecessary();', 'operations.buildDirectory(endpoint.getConfiguration().getDirectory(), true);', '} catch (GenericFileOperationFailedException e) {']
['error auto creating directory due this exception is ignored ', ['endpoint', 'getconfiguration', 'getdirectory', 'e', 'getmessage', 'e']]
camel sample_15390

['protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<FTPFile>> fileList, int depth) {']
['dopolldirectory from absolutepath dirname ', ['absolutepath', 'dirname']]
camel sample_15390

['protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<FTPFile>> fileList, int depth) {', 'depth++;', 'dirName = FileUtil.stripTrailingSeparator(dirName);', 'String dir;', 'if (isStepwise()) {', 'dir = ObjectHelper.isNotEmpty(dirName) ? dirName : absolutePath;', 'operations.changeCurrentDirectory(dir);', '} else {', 'dir = absolutePath;', '}']
['polling directory ', ['dir']]
camel sample_15390

['FTPFile file = new FTPFile();', 'file.setType(FTPFile.FILE_TYPE);', 'fileExpressionResult = evaluateFileExpression();', 'if (fileExpressionResult != null) {', 'file.setName(fileExpressionResult);', 'files = new ArrayList<FTPFile>(1);', 'files.add(file);', '}', '}', 'if (files == null || files.isEmpty()) {']
['no files found in directory ', ['dir']]
camel sample_15390

['fileExpressionResult = evaluateFileExpression();', 'if (fileExpressionResult != null) {', 'file.setName(fileExpressionResult);', 'files = new ArrayList<FTPFile>(1);', 'files.add(file);', '}', '}', 'if (files == null || files.isEmpty()) {', 'return true;', '} else {']
['found in directory ', ['files', 'size', 'dir']]
camel sample_15390

['if (!canPollMore) {', 'return false;', '}', '}', '} else if (file.isFile()) {', 'RemoteFile<FTPFile> remote = asRemoteFile(absolutePath, file, getEndpoint().getCharset());', 'if (depth >= endpoint.getMinDepth() && isValidFile(remote, false, files)) {', 'fileList.add(remote);', '}', '} else {']
['ignoring unsupported remote file type ', ['file']]
camel sample_15390

['protected boolean isMatched(GenericFile<FTPFile> file, String doneFileName, List<FTPFile> files) {', 'String onlyName = FileUtil.stripPath(doneFileName);', 'for (FTPFile f : files) {', 'if (f.getName().equals(onlyName)) {', 'return true;', '}', '}']
['done file does not exist ', ['donefilename']]
camel sample_15390

['Future<String> out = executor.submit(new Callable<String>() {', 'public String call() throws Exception {', 'String reply = template.requestBody("netty4:tcp: log.debug("Sent {} received {}", index, reply);', 'assertEquals("Bye " + index, reply);', 'return reply;', '}', '});', 'responses.put(index, out);', '}', 'notify.matches(2, TimeUnit.MINUTES);']
['took millis to process messages using client threads ', ['watch', 'taken', 'files', 'poolsize']]
camel sample_10192

['AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppOne.xml");', 'app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();']
['the first app is going to crash now ', []]
camel sample_14978

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14978

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14978

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14978

['public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {', 'if (LOG.isWarnEnabled()) {']
['processtimeout received at sip publish listener ', []]
camel sample_8509

['public void processIOException(IOExceptionEvent ioExceptionEvent) {', 'if (LOG.isWarnEnabled()) {']
['ioexceptionevent received at sip publish listener ', []]
camel sample_8509

['public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {', 'if (LOG.isWarnEnabled()) {']
['processtransactionterminated received at sip publish listener ', []]
camel sample_8509

['public void configureListenerContainer(AbstractMessageListenerContainer listenerContainer, JmsConsumer consumer) {', 'if (destinationName != null) {', 'listenerContainer.setDestinationName(destinationName);']
['using destinationname on listenercontainer ', ['destinationname', 'listenercontainer']]
camel sample_7193

['public void configureListenerContainer(AbstractMessageListenerContainer listenerContainer, JmsConsumer consumer) {', 'if (destinationName != null) {', 'listenerContainer.setDestinationName(destinationName);', '} else if (destination != null) {', 'listenerContainer.setDestination(destination);']
['using destination on listenercontainer ', ['destinationname', 'listenercontainer']]
camel sample_7193

['listenerContainer.setDestinationName(destinationName);', '} else if (destination != null) {', 'listenerContainer.setDestination(destination);', '} else {', 'DestinationResolver resolver = getDestinationResolver();', 'if (resolver != null) {', 'listenerContainer.setDestinationResolver(resolver);', '} else {', 'throw new IllegalArgumentException("Neither destination, destinationName or destinationResolver are specified on this endpoint!");', '}']
['using destinationresolver on listenercontainer ', ['resolver', 'listenercontainer']]
camel sample_7193

['if (resolver != null) {', 'listenerContainer.setDestinationResolver(resolver);', '} else {', 'throw new IllegalArgumentException("Neither destination, destinationName or destinationResolver are specified on this endpoint!");', '}', '}', 'listenerContainer.setPubSubDomain(pubSubDomain);', 'String consumerName = getThreadName();', 'if (configuration.getTaskExecutor() != null) {', 'if (log.isDebugEnabled()) {']
['using custom taskexecutor on listener container ', ['configuration', 'gettaskexecutor', 'listenercontainer']]
camel sample_7193

['}', 'setContainerTaskExecutor(listenerContainer, configuration.getTaskExecutor());', 'if (configuration.getTaskExecutor() instanceof ExecutorService) {', 'consumer.setListenerContainerExecutorService((ExecutorService) configuration.getTaskExecutor(), false);', '}', '} else if ((listenerContainer instanceof DefaultJmsMessageListenerContainer && configuration.getDefaultTaskExecutorType() == null) || !(listenerContainer instanceof DefaultJmsMessageListenerContainer)) {', 'ExecutorService executor = getCamelContext().getExecutorServiceManager().newCachedThreadPool(consumer, consumerName);', 'setContainerTaskExecutor(listenerContainer, executor);', 'consumer.setListenerContainerExecutorService(executor, true);', '} else {']
['deferring creation of taskexecutor for listener container as per policy ', ['listenercontainer', 'getdefaulttaskexecutortype']]
camel sample_7193

['public void stop() throws Exception {', 'int running = runningMessageListeners.get();', 'if (running <= 0) {', 'super.stop();', '} else {']
['there are still running message listeners cannot stop endpoint ', ['running', 'this']]
camel sample_7193

['public void shutdown() throws Exception {', 'int running = runningMessageListeners.get();', 'if (running <= 0) {', 'super.shutdown();', '} else {']
['there are still running message listeners cannot shutdown endpoint ', ['running', 'this']]
camel sample_7193

['try {', 'beforePoll(0);', 'return queue.take();', '} catch (InterruptedException e) {', 'handleInterruptedException(e);', '} finally {', 'afterPoll();', '}', '}', '}']
['consumer is not running so returning null ', []]
camel sample_3979

['try {', 'if (getBlockTimeout() <= 0) {', 'queue.put(exchange);', '} else {', 'boolean added = queue.offer(exchange, getBlockTimeout(), TimeUnit.MILLISECONDS);', 'if (!added) {', 'throw new ExchangeTimedOutException(exchange, getBlockTimeout());', '}', '}', '} catch (InterruptedException e) {']
['put interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_3979

['protected long beforePoll(long timeout) {', 'if (consumer instanceof PollingConsumerPollingStrategy) {', 'PollingConsumerPollingStrategy strategy = (PollingConsumerPollingStrategy) consumer;', 'try {', 'timeout = strategy.beforePoll(timeout);', '} catch (Exception e) {']
['error occurred before polling this exception will be ignored ', ['consumer', 'e']]
camel sample_3979

['protected void afterPoll() {', 'if (consumer instanceof PollingConsumerPollingStrategy) {', 'PollingConsumerPollingStrategy strategy = (PollingConsumerPollingStrategy) consumer;', 'try {', 'strategy.afterPoll();', '} catch (Exception e) {']
['error occurred after polling this exception will be ignored ', ['consumer', 'e']]
camel sample_3979

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NettyComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty4.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty4.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_570

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NettyHttpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty4-http.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty4-http.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1047

['private static void run(String id) {', 'try {', 'int events = ThreadLocalRandom.current().nextInt(2, 6);', 'CountDownLatch contextLatch = new CountDownLatch(events);', 'ConsulClusterService service = new ConsulClusterService();', 'service.setId("node-" + id);']
['http logger info service geturl ', ['seturl', 'string', 'format', 'consul', 'url']]
camel sample_14344

['context.addService(service);', 'context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:consul?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_14344

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<UndertowComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.undertow.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.undertow.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_823

['public void read(String body, @XQuery("/foo/@id") String foo) {', 'this.foo = foo;', 'this.body = body;']
['read method called on ', ['this']]
camel sample_16729

['public void testVertxMessages() throws Exception {', 'resultEndpoint = context.getEndpoint(resultUri, MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceivedInAnyOrder(body1, body2);', 'template.sendBody(startUri, body1);', 'template.sendBody(startUri, body2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_11516

['public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {', 'ClassResolver resolver = camelContext.getClassResolver();']
['finding all components using class resolver ', ['new', 'object', 'resolver']]
camel sample_4300

['public static SortedMap<String, Properties> findComponents(CamelContext camelContext, Enumeration<URL> componentDescriptionIter) throws LoadPropertiesException {', 'SortedMap<String, Properties> map = new TreeMap<String, Properties>();', 'while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {', 'URL url = componentDescriptionIter.nextElement();']
['finding components in url ', ['url']]
camel sample_4300

['public static SortedMap<String, Properties> findEips(CamelContext camelContext) throws LoadPropertiesException {', 'SortedMap<String, Properties> answer = new TreeMap<String, Properties>();', 'ClassResolver resolver = camelContext.getClassResolver();']
['finding all eips using class resolver ', ['new', 'object', 'resolver']]
camel sample_4300

['public static Component lookupPropertiesComponent(CamelContext camelContext, boolean autoCreate) {', 'PropertiesComponent answer = (PropertiesComponent) camelContext.hasComponent("properties");', 'if (answer == null) {', 'Object found = camelContext.getRegistry().lookupByName("properties");', 'if (found instanceof PropertiesComponent) {', 'answer = (PropertiesComponent) found;', 'camelContext.addComponent("properties", answer);', '}', '}', 'if (answer == null && autoCreate) {']
['no existing propertiescomponent has been configured creating a new default propertiescomponent with name properties ', []]
camel sample_4300

['public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception {']
['resolving property placeholders for ', ['target']]
camel sample_4300

['public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception {', 'Map<String, Object> properties = new HashMap<String, Object>();', 'IntrospectionSupport.getProperties(target, properties, null);', 'Map<String, Object> changedProperties = new HashMap<String, Object>();', 'if (!properties.isEmpty()) {']
['there are properties on ', ['properties', 'size', 'target']]
camel sample_4300

['if (value instanceof String) {', 'String text = (String) value;', 'text = camelContext.resolvePropertyPlaceholders(text);', 'if (text != value) {', 'boolean changed = IntrospectionSupport.setProperty(camelContext.getTypeConverter(), target, name, text);', 'if (!changed) {', 'throw new IllegalArgumentException("No setter to set property: " + name + " to: " + text + " on: " + target);', '}', 'changedProperties.put(name, value);', 'if (LOG.isDebugEnabled()) {']
['changed property from to ', ['new', 'object', 'name', 'value', 'text']]
camel sample_4300

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GeoCoderComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.geocoder.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.geocoder.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1102

['public void onEvent(EventIterator events) {']
['onevent start ', []]
camel sample_11453

['public void onEvent(EventIterator events) {']
['consumer received jcr events ', ['endpoint', 'events']]
camel sample_11453

['public void onEvent(EventIterator events) {', 'RuntimeCamelException rce = null;', 'try {', 'final Exchange exchange = createExchange(events);', 'try {']
['processor is processing exchange ', ['processor', 'exchange']]
camel sample_11453

['try {', 'processor.process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'rce = exchange.getException(RuntimeCamelException.class);', '} catch (Exception e) {', 'rce = wrapRuntimeCamelException(e);', '}', 'if (rce != null) {']
['onevent end throwing exception ', ['rce', 'tostring']]
camel sample_11453

['} catch (Exception e) {', 'exchange.setException(e);', '}', 'rce = exchange.getException(RuntimeCamelException.class);', '} catch (Exception e) {', 'rce = wrapRuntimeCamelException(e);', '}', 'if (rce != null) {', 'throw rce;', '}']
['onevent end ', []]
camel sample_11453

['public void process(final Exchange exchange) throws Exception {', 'final Object data = exchange.getIn().getBody();', 'final SqlParameterSource param = new ElsqlSqlMapSource(exchange, data);', 'final String sql = elSql.getSql(elSqlName, new SpringSqlParams(param));']
['elsqlproducer using sql ', ['elsqlname', 'sql']]
camel sample_13194

['public void process(final Exchange exchange) throws Exception {', 'final Object data = exchange.getIn().getBody();', 'final SqlParameterSource param = new ElsqlSqlMapSource(exchange, data);', 'final String sql = elSql.getSql(elSqlName, new SpringSqlParams(param));', 'final SqlOutputType outputType = getEndpoint().getOutputType();', 'if (outputType == SqlOutputType.StreamList) {', 'processStreamList(exchange, sql, param);', 'return;', '}']
['jdbctemplate execute ', ['sql']]
camel sample_13194

['protected void processStreamList(final Exchange exchange, final PreparedStatementCreator statementCreator, final String preparedQuery) throws Exception {']
['processstreamlist ', ['preparedquery']]
camel sample_13194

['public void testGet() throws Exception {', 'final com.google.api.services.drive.model.ChangeList list = requestBody("direct: List<Change> items = list.getItems();', 'if (!items.isEmpty()) {', 'Change change = items.get(0);', 'Long id = change.getId();', 'final com.google.api.services.drive.model.Change result = requestBody("direct: assertNotNull("get result", result);']
['get ', ['result']]
camel sample_15410

['public void testList() throws Exception {', 'final com.google.api.services.drive.model.ChangeList result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15410

['public void configure() {']
['adding route from to ', ['a', 'b']]
camel sample_6444

['public void testGrowIssue() throws Exception {', 'StringBuilder sb = new StringBuilder(SIZE);', 'for (int i = 0; i < SIZE; i++) {', 'sb.append("X");', '}', 'Exchange item = new DefaultExchange(context);', 'item.getIn().setBody(sb.toString(), String.class);', 'final String key = "foo";', 'for (int i = 0; i < SIZE; i++) {']
['updating ', ['i']]
camel sample_8909

['public boolean matches(Exchange exchange) {']
['matches exchange called with ', ['exchange']]
camel sample_3216

['} else {', 'endpoint = new RabbitMQEndpoint(uri, this, connectionFactory);', '}', 'endpoint.setHostname(hostname);', 'endpoint.setPortNumber(portNumber);', 'endpoint.setExchangeName(exchangeName);', 'endpoint.setClientProperties(clientProperties);', 'endpoint.setTrustManager(trustManager);', 'setProperties(endpoint, params);', 'if (LOG.isDebugEnabled()) {']
['creating rabbitmqendpoint with host and exchangename ', ['new', 'object', 'endpoint', 'gethostname', 'endpoint', 'getportnumber', 'endpoint', 'getexchangename']]
camel sample_14128

['}', '}', 'if (found != null) {', 'String xml;', 'if (supportResolvePlaceholder) {', 'xml = (String) server.invoke(found, "dumpRestsAsXml", new Object[]{true}, new String[]{"boolean"});', '} else {', 'xml = (String) server.invoke(found, "dumpRestsAsXml", null, null);', '}', 'if (xml != null) {']
['dumprestasxml ', ['xml']]
camel sample_17354

['public void renderResourceListing(RestApiResponseAdapter response, BeanConfig swaggerConfig, String contextId, String route, boolean json, boolean yaml, ClassResolver classResolver, RestConfiguration configuration) throws Exception {']
['renderResourceListing ', []]
camel sample_17354

['public void renderCamelContexts(RestApiResponseAdapter response, String contextId, String contextIdPattern, boolean json, boolean yaml, RestConfiguration configuration) throws Exception {']
['renderCamelContexts ', []]
camel sample_17354

['}', 'String allowHeaders = corsHeaders != null ? corsHeaders.get("Access-Control-Allow-Headers") : null;', 'if (allowHeaders == null) {', 'allowHeaders = RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS;', '}', 'String maxAge = corsHeaders != null ? corsHeaders.get("Access-Control-Max-Age") : null;', 'if (maxAge == null) {', 'maxAge = RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE;', '}', 'if (LOG.isTraceEnabled()) {']
['using cors headers ', []]
camel sample_17354

['protected boolean prePollCheck() throws Exception {', 'if (log.isTraceEnabled()) {']
['prepollcheck on ', ['getendpoint', 'getconfiguration', 'remoteserverinformation']]
camel sample_15369

['protected void postPollCheck(int polledMessages) {', 'if (log.isTraceEnabled()) {']
['postpollcheck on ', ['getendpoint', 'getconfiguration', 'remoteserverinformation']]
camel sample_15369

['protected void postPollCheck(int polledMessages) {', 'if (log.isTraceEnabled()) {', '}', 'if (polledMessages == 0) {', 'if (getEndpoint().isDisconnect()) {']
['postpollcheck disconnect from ', ['getendpoint']]
camel sample_15369

['protected boolean processExchange(Exchange exchange) {', 'exchange.setProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC, Boolean.TRUE);', 'boolean isLast = exchange.getProperty(Exchange.BATCH_COMPLETE, true, Boolean.class);', 'if (isLast && getEndpoint().isDisconnect()) {', 'exchange.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange exchange) {']
['postpollcheck disconnect from ', ['getendpoint']]
camel sample_15369

['protected void disconnect() {', 'loggedIn = false;', 'try {', 'if (getOperations().isConnected()) {', 'if (log.isDebugEnabled()) {']
['disconnecting from ', ['remoteserver']]
camel sample_15369

['protected void disconnect() {', 'loggedIn = false;', 'try {', 'if (getOperations().isConnected()) {', 'if (log.isDebugEnabled()) {', '}', 'getOperations().disconnect();', '}', '} catch (GenericFileOperationFailedException e) {']
['error occurred while disconnecting from due this exception will be ignored ', ['remoteserver', 'e', 'getmessage']]
camel sample_15369

['protected void forceDisconnect() {', 'loggedIn = false;', 'try {', 'if (log.isDebugEnabled()) {']
['force disconnecting from ', ['remoteserver']]
camel sample_15369

['protected void forceDisconnect() {', 'loggedIn = false;', 'try {', 'if (log.isDebugEnabled()) {', '}', 'getOperations().forceDisconnect();', '} catch (GenericFileOperationFailedException e) {']
['error occurred while disconnecting from due this exception will be ignored ', ['remoteserver', 'e', 'getmessage']]
camel sample_15369

['protected void recoverableConnectIfNecessary() throws Exception {', 'try {', 'connectIfNecessary();', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {']
['could not connect to will try to recover ', ['getendpoint', 'e']]
camel sample_15369

['protected void recoverableConnectIfNecessary() throws Exception {', 'try {', 'connectIfNecessary();', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {', '}', 'loggedIn = false;', '}', 'if (!loggedIn) {']
['trying to recover connection to with a fresh client ', ['getendpoint']]
camel sample_15369

['protected void connectIfNecessary() throws IOException {', 'boolean isConnected = false;', 'try {', 'isConnected = getOperations().sendNoop();', '} catch (Exception ex) {', 'if (log.isDebugEnabled()) {']
['exception checking connection status ', ['ex', 'getmessage']]
camel sample_15369

['protected void connectIfNecessary() throws IOException {', 'boolean isConnected = false;', 'try {', 'isConnected = getOperations().sendNoop();', '} catch (Exception ex) {', 'if (log.isDebugEnabled()) {', '}', '}', 'if (!loggedIn || !isConnected) {', 'if (log.isDebugEnabled()) {']
['not connected logged in connecting to ', ['remoteserver']]
camel sample_15369

['isConnected = getOperations().sendNoop();', '} catch (Exception ex) {', 'if (log.isDebugEnabled()) {', '}', '}', 'if (!loggedIn || !isConnected) {', 'if (log.isDebugEnabled()) {', '}', 'loggedIn = getOperations().connect((RemoteFileConfiguration) endpoint.getConfiguration());', 'if (loggedIn) {']
['connected and logged in to ', ['remoteserver']]
camel sample_15369

['protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {', 'try {']
['polling sub directory from ', ['absolutepath', 'endpoint']]
camel sample_15369

['protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {', 'try {', 'return doPollDirectory(absolutePath, dirName, fileList, depth);', '} catch (Exception e) {']
['caught exception ', ['e', 'getmessage']]
camel sample_15369

['protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {', 'try {', 'return doPollDirectory(absolutePath, dirName, fileList, depth);', '} catch (Exception e) {', 'if (ignoreCannotRetrieveFile(absolutePath, null, e)) {']
['ignoring file error for ', ['e', 'getmessage', 'absolutepath']]
camel sample_15369

['protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {', 'try {', 'return doPollDirectory(absolutePath, dirName, fileList, depth);', '} catch (Exception e) {', 'if (ignoreCannotRetrieveFile(absolutePath, null, e)) {', 'return true;', '} else {']
['not ignoring file error for ', ['e', 'getmessage', 'absolutepath']]
camel sample_15369

['public void testThrottlingRoutePolicyStartWithAlwaysOpenOn() throws Exception {']
['sending some messages ', []]
camel sample_2112

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/SplitTokenizeTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, "src/test/java", "org/apache/camel/parser/SplitTokenizeTest.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_209

['for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:a", list.get(0).getElement());', 'Assert.assertEquals("direct:b", list.get(1).getElement());', 'Assert.assertEquals("direct:c", list.get(2).getElement());', 'Assert.assertEquals("direct:d", list.get(3).getElement());', 'Assert.assertEquals("direct:e", list.get(4).getElement());', 'Assert.assertEquals("direct:f", list.get(5).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_209

['public void process(Exchange exchange) throws Exception {', 'InputStream signature = exchange.getIn().getHeader(CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA, InputStream.class);', 'if (signature == null) {']
['no signed data found in header assuming signed data contained in message body ', ['cryptocmsconstants', 'camel', 'crypto', 'cms', 'signed', 'data']]
camel sample_11541

['public void process(Exchange exchange) throws Exception {', 'InputStream signature = exchange.getIn().getHeader(CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA, InputStream.class);', 'if (signature == null) {', 'super.process(exchange);', '} else {']
['signed data header found ', ['cryptocmsconstants', 'camel', 'crypto', 'cms', 'signed', 'data']]
camel sample_11541

['try {', 'sp = new CMSSignedDataParser(new JcaDigestCalculatorProviderBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME).build(), new CMSTypedStream(is), signature);', '} catch (CMSException e) {', 'throw new CryptoCmsFormatException(getFormatErrorMessage(), e);', '}', 'try {', 'sp.getSignedContent().drain();', '} catch (NullPointerException e) {', 'throw getContentMissingException(e);', '}']
['signed data found ', []]
camel sample_11541

['public Class<?> resolveClass(String name) {']
['resolve class ', ['name']]
camel sample_13086

['public Class<?> resolveClass(String name) {', 'name = ObjectHelper.normalizeClassName(name);', 'if (ObjectHelper.isEmpty(name)) {', 'return null;', '}', 'Class<?> clazz = ObjectHelper.loadSimpleType(name);', 'if (clazz == null) {', 'clazz = doLoadClass(name, bundleContext.getBundle());', 'if (LOG.isTraceEnabled()) {']
['loading class using bundlecontext ', ['new', 'object', 'name', 'bundlecontext', 'getbundle', 'clazz']]
camel sample_13086

['}', 'Class<?> clazz = ObjectHelper.loadSimpleType(name);', 'if (clazz == null) {', 'clazz = doLoadClass(name, bundleContext.getBundle());', 'if (LOG.isTraceEnabled()) {', '}', '}', 'if (clazz == null && camelContext != null) {', 'clazz = super.loadClass(name, camelContext.getApplicationContextClassLoader());', 'if (LOG.isTraceEnabled()) {']
['loading class using camelcontext ', ['new', 'object', 'name', 'camelcontext', 'clazz']]
camel sample_13086

['try {', 'String resolvedName = resolveUriPath(uri);', 'Enumeration<URL> e = bundleContext.getBundle().getResources(resolvedName);', 'while (e != null && e.hasMoreElements()) {', 'answer.add(e.nextElement());', '}', 'String path = FileUtil.onlyPath(uri);', 'String name = FileUtil.stripPath(uri);', 'if (path != null && name != null) {', 'for (Bundle bundle : bundleContext.getBundles()) {']
['finding all entries in path with pattern ', ['path', 'name']]
camel sample_13086

['protected Class<?> doLoadClass(String name, Bundle loader) {', 'ObjectHelper.notEmpty(name, "name");', 'Class<?> answer = null;', 'if (loader != null) {', 'try {', 'answer = loader.loadClass(name);', '} catch (ClassNotFoundException e) {', 'if (LOG.isTraceEnabled()) {']
['cannot load class using classloader this exception will be ignored ', ['name', 'loader', 'e']]
camel sample_13086

['protected abstract JettyHttpEndpoint createEndpoint(URI endpointUri, URI httpUri) throws URISyntaxException;', 'public void connect(HttpConsumer consumer) throws Exception {', 'JettyHttpEndpoint endpoint = (JettyHttpEndpoint)consumer.getEndpoint();', 'String connectorKey = getConnectorKey(endpoint);', 'synchronized (CONNECTORS) {', 'ConnectorRef connectorRef = CONNECTORS.get(connectorKey);', 'if (connectorRef == null) {', 'Server server = createServer();', 'Connector connector = getConnector(server, endpoint);', 'if ("localhost".equalsIgnoreCase(endpoint.getHttpUri().getHost())) {']
['you use localhost interface it means that no external connections will be available don t you want to use instead all network interfaces ', ['endpoint']]
camel sample_17495

['CONNECTORS.put(connectorKey, connectorRef);', '} else {', 'if (endpoint.getHandlers() != null && !endpoint.getHandlers().isEmpty()) {', 'List<Handler> existingHandlers = new ArrayList<>();', 'if (connectorRef.server.getHandlers() != null && connectorRef.server.getHandlers().length > 0) {', 'existingHandlers = Arrays.asList(connectorRef.server.getHandlers());', '}', 'List<Handler> newHandlers = new ArrayList<>(endpoint.getHandlers());', 'boolean changed = !existingHandlers.containsAll(newHandlers) && !newHandlers.containsAll(existingHandlers);', 'if (changed) {']
['restarting jetty server due to adding new jetty handlers ', ['newhandlers']]
camel sample_17495

['private void enableJmx(Server server) {', 'MBeanContainer containerToRegister = getMbContainer();', 'if (containerToRegister != null) {']
['jetty jmx extensions is enabled ', []]
camel sample_17495

['}', 'filterHolder.setFilter(new CamelFilterWrapper(filter));', 'String pathSpec = endpoint.getPath();', 'if (pathSpec == null || "".equals(pathSpec)) {', 'pathSpec = "/";', '}', 'if (endpoint.isMatchOnUriPrefix()) {', 'pathSpec = pathSpec.endsWith("/") ? pathSpec + "*" : pathSpec + "/*";', '}', 'addFilter(context, filterHolder, pathSpec);']
['using multipart filter implementation for path ', ['filter', 'getclass', 'getname', 'pathspec']]
camel sample_17495

['public CamelHttpClient createHttpClient(JettyHttpEndpoint endpoint, Integer minThreads, Integer maxThreads, SSLContextParameters ssl) throws Exception {', 'SslContextFactory sslContextFactory = createSslContextFactory(ssl);', 'HttpClientTransport transport = createHttpClientTransport(maxThreads);', 'CamelHttpClient httpClient = createCamelHttpClient(transport, sslContextFactory);', 'CamelContext context = endpoint.getCamelContext();', 'if (context != null && ObjectHelper.isNotEmpty(context.getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(context.getProperty("http.proxyPort"))) {', 'String host = context.getProperty("http.proxyHost");', 'int port = Integer.parseInt(context.getProperty("http.proxyPort"));']
['camelcontext properties http proxyhost and http proxyport detected using http proxy host port ', ['host', 'port']]
camel sample_17495

['CamelHttpClient httpClient = createCamelHttpClient(transport, sslContextFactory);', 'CamelContext context = endpoint.getCamelContext();', 'if (context != null && ObjectHelper.isNotEmpty(context.getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(context.getProperty("http.proxyPort"))) {', 'String host = context.getProperty("http.proxyHost");', 'int port = Integer.parseInt(context.getProperty("http.proxyPort"));', 'httpClient.setProxy(host, port);', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getProxyHost()) && endpoint.getProxyPort() > 0) {', 'String host = endpoint.getProxyHost();', 'int port = endpoint.getProxyPort();']
['proxyhost and proxyport options detected using http proxy host port ', ['host', 'port']]
camel sample_17495

['}', 'QueuedThreadPool qtp = new QueuedThreadPool();', 'qtp.setMinThreads(minThreads.intValue());', 'qtp.setMaxThreads(maxThreads.intValue());', 'qtp.setDaemon(true);', 'qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(httpClient) + ")");', 'httpClient.setThreadPoolOrExecutor(qtp);', '}', 'if (LOG.isDebugEnabled()) {', 'if (minThreads != null) {']
['created httpclient with thread pool ', ['new', 'object', 'minthreads', 'maxthreads', 'httpclient']]
camel sample_17495

['QueuedThreadPool qtp = new QueuedThreadPool();', 'qtp.setMinThreads(minThreads.intValue());', 'qtp.setMaxThreads(maxThreads.intValue());', 'qtp.setDaemon(true);', 'qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(httpClient) + ")");', 'httpClient.setThreadPoolOrExecutor(qtp);', '}', 'if (LOG.isDebugEnabled()) {', 'if (minThreads != null) {', '} else {']
['created httpclient with default thread pool size ', ['httpclient']]
camel sample_17495

['MBeanServer mbs = null;', 'final ManagementStrategy mStrategy = this.getCamelContext().getManagementStrategy();', 'final ManagementAgent mAgent = mStrategy.getManagementAgent();', 'if (mAgent != null) {', 'mbs = mAgent.getMBeanServer();', '}', 'if (mbs != null) {', 'mbContainer = new MBeanContainer(mbs);', 'startMbContainer();', '} else {']
['jmx disabled in camelcontext jetty jmx extensions will remain disabled ', []]
camel sample_17495

['protected void startMbContainer() {', 'if (mbContainer != null && Server.getVersion().startsWith("8")) {', 'try {', 'boolean b = (Boolean)mbContainer.getClass().getMethod("isStarted").invoke(mbContainer);', 'if (b) {', 'mbContainer.getClass().getMethod("start").invoke(mbContainer);', 'mbContainer.getClass().getMethod("addBean", Object.class).invoke(mbContainer, mbContainer);', '}', '} catch (Throwable e) {']
['could not start jetty mbeancontainer jetty jmx extensions will remain disabled ', ['e']]
camel sample_17495

['protected void doStart() throws Exception {', 'super.doStart();', 'this.queue = getAtomixEndpoint() .getAtomix() .getQueue( resourceName, new DistributedQueue.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedQueue.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))) .join();']
['subscribe to events for queue ', ['resourcename']]
camel sample_10350

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler() .maximumRedeliveries(5).redeliveryDelay(10));', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_2329

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler() .maximumRedeliveries(5).redeliveryDelay(10));', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_2329

['errorHandler(defaultErrorHandler() .maximumRedeliveries(5).redeliveryDelay(10));', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_2329

['ReceiveMessageRequest request = new ReceiveMessageRequest(getQueueUrl());', 'request.setMaxNumberOfMessages(getMaxMessagesPerPoll() > 0 ? getMaxMessagesPerPoll() : null);', 'request.setVisibilityTimeout(getConfiguration().getVisibilityTimeout() != null ? getConfiguration().getVisibilityTimeout() : null);', 'request.setWaitTimeSeconds(getConfiguration().getWaitTimeSeconds() != null ? getConfiguration().getWaitTimeSeconds() : null);', 'if (attributeNames != null) {', 'request.setAttributeNames(attributeNames);', '}', 'if (messageAttributeNames != null) {', 'request.setMessageAttributeNames(messageAttributeNames);', '}']
['receiving messages with request ', ['request']]
camel sample_8724

['if (attributeNames != null) {', 'request.setAttributeNames(attributeNames);', '}', 'if (messageAttributeNames != null) {', 'request.setMessageAttributeNames(messageAttributeNames);', '}', 'ReceiveMessageResult messageResult = null;', 'try {', 'messageResult = getClient().receiveMessage(request);', '} catch (QueueDoesNotExistException e) {']
['queue does not exist recreating now ', []]
camel sample_8724

['request.setMessageAttributeNames(messageAttributeNames);', '}', 'ReceiveMessageResult messageResult = null;', 'try {', 'messageResult = getClient().receiveMessage(request);', '} catch (QueueDoesNotExistException e) {', 'reConnectToQueue();', 'messageResult = getClient().receiveMessage(request);', '}', 'if (LOG.isTraceEnabled()) {']
['received messages ', ['messageresult', 'getmessages', 'size']]
camel sample_8724

['public void reConnectToQueue() {', 'try {', 'getEndpoint().createQueue(getClient());', '} catch (QueueDeletedRecentlyException qdr) {']
['queue recently deleted will retry in seconds ', []]
camel sample_8724

['public void reConnectToQueue() {', 'try {', 'getEndpoint().createQueue(getClient());', '} catch (QueueDeletedRecentlyException qdr) {', 'try {', 'Thread.sleep(30000);', 'getEndpoint().createQueue(getClient());', '} catch (Exception e) {']
['failed to retry queue connection ', ['e']]
camel sample_8724

['public void reConnectToQueue() {', 'try {', 'getEndpoint().createQueue(getClient());', '} catch (QueueDeletedRecentlyException qdr) {', 'try {', 'Thread.sleep(30000);', 'getEndpoint().createQueue(getClient());', '} catch (Exception e) {', '}', '} catch (Exception e) {']
['could not connect to queue in amazon ', ['e']]
camel sample_8724

['protected Queue<Exchange> createExchanges(List<Message> messages) {', 'if (LOG.isTraceEnabled()) {']
['received messages in this poll ', ['messages', 'size']]
camel sample_8724

['exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;', 'Integer visibilityTimeout = getConfiguration().getVisibilityTimeout();', 'if (this.scheduledExecutor != null && visibilityTimeout != null && (visibilityTimeout.intValue() / 2) > 0) {', 'int delay = visibilityTimeout.intValue() / 2;', 'int period = visibilityTimeout.intValue();', 'int repeatSeconds = Double.valueOf(visibilityTimeout.doubleValue() * 1.5).intValue();', 'if (LOG.isDebugEnabled()) {']
['scheduled timeoutextender task to start after delay and run with period repeat seconds to extend exchangeid ', ['new', 'object', 'delay', 'period', 'repeatseconds', 'exchange', 'getexchangeid']]
camel sample_8724

['}', 'final ScheduledFuture<?> scheduledFuture = this.scheduledExecutor.scheduleAtFixedRate( new TimeoutExtender(exchange, repeatSeconds), delay, period, TimeUnit.SECONDS);', 'exchange.addOnCompletion(new Synchronization() {', 'public void onComplete(Exchange exchange) {', 'cancelExtender(exchange);', '}', 'public void onFailure(Exchange exchange) {', 'cancelExtender(exchange);', '}', 'private void cancelExtender(Exchange exchange) {']
['processing done so cancelling timeoutextender task for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_8724

['public void onComplete(Exchange exchange) {', 'processCommit(exchange);', '}', 'public void onFailure(Exchange exchange) {', 'processRollback(exchange);', '}', 'public String toString() {', 'return "SqsConsumerOnCompletion";', '}', '});']
['processing exchange ', ['exchange']]
camel sample_8724

['}', 'public void onFailure(Exchange exchange) {', 'processRollback(exchange);', '}', 'public String toString() {', 'return "SqsConsumerOnCompletion";', '}', '});', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['processing exchange done ', ['exchange']]
camel sample_8724

['protected void processCommit(Exchange exchange) {', 'try {', 'if (shouldDelete(exchange)) {', 'String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class);', 'DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle);']
['deleting message with receipt handle ', ['receipthandle']]
camel sample_8724

['protected void processCommit(Exchange exchange) {', 'try {', 'if (shouldDelete(exchange)) {', 'String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class);', 'DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle);', 'getClient().deleteMessage(deleteRequest);']
['deleted message with receipt handle ', ['receipthandle']]
camel sample_8724

['public void run() {', 'ChangeMessageVisibilityRequest request = new ChangeMessageVisibilityRequest(getQueueUrl(), exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class), repeatSeconds);', 'try {']
['extending visibility window by seconds for exchange ', ['this', 'repeatseconds', 'this', 'exchange']]
camel sample_8724

['public void run() {', 'ChangeMessageVisibilityRequest request = new ChangeMessageVisibilityRequest(getQueueUrl(), exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class), repeatSeconds);', 'try {', 'getEndpoint().getClient().changeMessageVisibility(request);']
['extended visibility window by seconds for exchange ', ['this', 'repeatseconds', 'this', 'exchange']]
camel sample_8724

['public void run() {', 'ChangeMessageVisibilityRequest request = new ChangeMessageVisibilityRequest(getQueueUrl(), exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class), repeatSeconds);', 'try {', 'getEndpoint().getClient().changeMessageVisibility(request);', '} catch (ReceiptHandleIsInvalidException e) {', '} catch (MessageNotInflightException e) {', '} catch (Exception e) {']
['extending visibility window failed for exchange will not attempt to extend visibility further this exception will be ignored ', ['exchange', 'e']]
camel sample_8724

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<SyslogDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_462

['private boolean isKey(ResultSet resultSet) {', 'Row row = resultSet.one();', 'if (row == null) {']
['no row to check key ', []]
camel sample_15447

['private boolean isKey(ResultSet resultSet) {', 'Row row = resultSet.one();', 'if (row == null) {', 'return false;', '} else {']
['row with columns to check key ', ['row', 'getcolumndefinitions']]
camel sample_15447

['protected void initInsertStatement() {', 'Insert insert = generateInsert(table, pkColumns, true, ttl);', 'insert = applyConsistencyLevel(insert, writeConsistencyLevel);']
['generated insert ', ['insert']]
camel sample_15447

['public boolean add(K key) {', 'Object[] idValues = getPKValues(key);']
['inserting key ', ['object', 'idvalues']]
camel sample_15447

['protected void initSelectStatement() {', 'Select select = generateSelect(table, pkColumns, pkColumns);', 'select = applyConsistencyLevel(select, readConsistencyLevel);']
['generated select ', ['select']]
camel sample_15447

['public boolean contains(K key) {', 'Object[] idValues = getPKValues(key);']
['checking key ', ['object', 'idvalues']]
camel sample_15447

['protected void initDeleteStatement() {', 'Delete delete = generateDelete(table, pkColumns, true);', 'delete = applyConsistencyLevel(delete, writeConsistencyLevel);']
['generated delete ', ['delete']]
camel sample_15447

['public boolean remove(K key) {', 'Object[] idValues = getPKValues(key);']
['deleting key ', ['object', 'idvalues']]
camel sample_15447

['protected void initClearStatement() {', 'Truncate truncate = generateTruncate(table);', 'truncate = applyConsistencyLevel(truncate, writeConsistencyLevel);']
['generated truncate for clear operation ', ['truncate']]
camel sample_15447

['public void clear() {']
['clear table ', ['table']]
camel sample_15447

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'HttpRequest request = (HttpRequest) messageEvent.getMessage();']
['message received ', ['request']]
camel sample_8374

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'HttpRequest request = (HttpRequest) messageEvent.getMessage();', 'if (consumer.isSuspended()) {']
['consumer suspended cannot service request ', ['request']]
camel sample_8374

['boolean inRole = true;', 'if (principal != null) {', 'subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {']
['http basic auth required for resource ', ['url']]
camel sample_8374

['if (principal != null) {', 'subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {', '} else if (subject == null) {']
['http basic auth not authorized for username ', ['principal', 'getusername']]
camel sample_8374

['subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {', '} else if (subject == null) {', '} else {']
['http basic auth not in role for username ', ['principal', 'getusername']]
camel sample_8374

['}', 'HttpResponse response = new DefaultHttpResponse(HTTP_1_1, UNAUTHORIZED);', 'response.headers().set("WWW-Authenticate", "Basic realm=\\"" + security.getRealm() + "\\"");', 'response.headers().set(Exchange.CONTENT_TYPE, "text/plain");', 'response.headers().set(Exchange.CONTENT_LENGTH, 0);', 'response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));', 'messageEvent.getChannel().write(response).syncUninterruptibly();', 'messageEvent.getChannel().close();', 'return;', '} else {']
['http basic auth authorized for username ', ['principal', 'getusername']]
camel sample_8374

['String constraint = ObjectHelper.before(auth, " ");', 'if (constraint != null) {', 'if ("Basic".equalsIgnoreCase(constraint.trim())) {', 'String decoded = ObjectHelper.after(auth, " ");', 'ChannelBuffer buf = ChannelBuffers.copiedBuffer(decoded.getBytes());', 'ChannelBuffer out = Base64.decode(buf);', 'String userAndPw = out.toString(Charset.defaultCharset());', 'String username = ObjectHelper.before(userAndPw, ":");', 'String password = ObjectHelper.after(userAndPw, ":");', 'HttpPrincipal principal = new HttpPrincipal(username, password);']
['extracted basic auth principal from http header ', ['principal']]
camel sample_8374

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent exceptionEvent) throws Exception {', 'if (consumer.isRunAllowed()) {', 'if (exceptionEvent.getCause() instanceof ClosedChannelException) {']
['channel already closed ignoring this exception ', []]
camel sample_8374

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent exceptionEvent) throws Exception {', 'if (consumer.isRunAllowed()) {', 'if (exceptionEvent.getCause() instanceof ClosedChannelException) {', '} else {']
['closing channel as an exception was thrown from netty ', ['exceptionevent', 'getcause']]
camel sample_8374

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<Base64DataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.base64.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.base64.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1155

['}', 'if (close == null) {', 'close = exchange.getProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = consumer.getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['remoteaddress']]
camel sample_6690

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<Olingo2Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.olingo2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.olingo2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_931

['public Thread newThread(Runnable runnable) {', 'String threadName = ThreadHelper.resolveThreadName(pattern, name);', 'Thread answer = new Thread(runnable, threadName);', 'answer.setDaemon(daemon);']
['created thread ', ['threadname', 'answer']]
camel sample_4357

['public void testMqttDuplicatesAfterBrokerRestartWithoutClientID() throws Exception {', 'brokerService.stop();', 'brokerService.waitUntilStopped();']
['restarting broker ', []]
camel sample_16841

['public void testMqttDuplicatesAfterBrokerRestartWithoutClientID() throws Exception {', 'brokerService.stop();', 'brokerService.waitUntilStopped();', 'brokerService = new BrokerService();', 'brokerService.setPersistent(false);', 'brokerService.setAdvisorySupport(false);', 'brokerService.addConnector(MQTTTestSupport.getConnection() + "?trace=true");', 'brokerService.start();', 'brokerService.waitUntilStarted();']
['broker restarted ', []]
camel sample_16841

['public void testMqttDuplicatesAfterBrokerRestartWithClientID() throws Exception {', 'brokerService.stop();', 'brokerService.waitUntilStopped();']
['restarting broker ', []]
camel sample_16841

['public void testMqttDuplicatesAfterBrokerRestartWithClientID() throws Exception {', 'brokerService.stop();', 'brokerService.waitUntilStopped();', 'brokerService = new BrokerService();', 'brokerService.setPersistent(false);', 'brokerService.setAdvisorySupport(false);', 'brokerService.addConnector(MQTTTestSupport.getConnection() + "?trace=true");', 'brokerService.start();', 'brokerService.waitUntilStarted();']
['broker restarted ', []]
camel sample_16841

['Language language = assertResolveLanguage(getLanguageName());', 'Expression expression = language.createExpression(expressionText);', 'assertNotNull(expression, "No Expression could be created for text: " + expressionText + " language: " + language);', 'Object value;', 'if (expectedValue != null) {', 'value = expression.evaluate(exchange, expectedValue.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}', 'if (log.isDebugEnabled()) {']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_11687

['public synchronized boolean setConfigMap(ConfigMap map, boolean insert) {', 'if (insert && currentMap != null) {']
['current map should have been null ', []]
camel sample_13205

['public synchronized boolean setConfigMap(ConfigMap map, boolean insert) {', 'if (insert && currentMap != null) {', 'return false;', '}', 'if (!insert && currentMap == null) {']
['current map should not have been null ', []]
camel sample_13205

['if (insert && currentMap != null) {', 'return false;', '}', 'if (!insert && currentMap == null) {', 'return false;', '}', 'String version = map.getMetadata() != null ? map.getMetadata().getResourceVersion() : null;', 'if (version != null) {', 'long versionLong = Long.parseLong(version);', 'if (versionLong != versionCounter) {']
['current resource version is while the update is related to version ', ['versioncounter', 'versionlong']]
camel sample_13205

['ObjectHelper.notNull(camelContext, "CamelContext");', 'ObjectHelper.notEmpty("groupName", groupName);', 'String path = getCamelClusterPath(groupName);', 'this.groupListener = new ZookeeperGroupListenerSupport(path, route.getEndpoint(), onLockOwned(), onDisconnected());', 'this.groupListener.setCamelContext(camelContext);', 'this.groupListener.setCurator(curator);', 'this.groupListener.setMaximumConnectionTimeout(maximumConnectionTimeout);', 'this.groupListener.setZooKeeperUrl(zooKeeperUrl);', 'this.groupListener.setZooKeeperPassword(zooKeeperPassword);', 'ServiceHelper.startService(groupListener);']
['attempting to become master for endpoint in with singletonid ', ['route', 'getendpoint', 'getcamelcontext', 'getgroupname']]
camel sample_9709

['protected Runnable onLockOwned() {', 'return () -> {', 'if (masterConsumer.compareAndSet(false, true)) {', 'try {']
['elected as master starting consumer ', ['route', 'getendpoint']]
camel sample_9709

['protected Runnable onLockOwned() {', 'return () -> {', 'if (masterConsumer.compareAndSet(false, true)) {', 'try {', 'startConsumer(route.getConsumer());', 'thisNodeState = createNodeState();', 'thisNodeState.setStarted(true);', 'groupListener.updateState(thisNodeState);', '} catch (Exception e) {']
['failed to start master consumer for ', ['route', 'getendpoint', 'e']]
camel sample_9709

['protected Runnable onLockOwned() {', 'return () -> {', 'if (masterConsumer.compareAndSet(false, true)) {', 'try {', 'startConsumer(route.getConsumer());', 'thisNodeState = createNodeState();', 'thisNodeState.setStarted(true);', 'groupListener.updateState(thisNodeState);', '} catch (Exception e) {', '}']
['elected as master consumer started ', ['route', 'getendpoint']]
camel sample_9709

['protected Runnable onDisconnected() {', 'return () -> {', 'masterConsumer.set(false);', 'try {', 'stopConsumer(route.getConsumer());', '} catch (Exception e) {']
['failed to stop master consumer ', ['route', 'getendpoint', 'e']]
camel sample_9709

['private AuthCmd executeAuthRequest(DockerClient client, Message message) {']
['executing docker auth request ', []]
camel sample_6556

['private InfoCmd executeInfoRequest(DockerClient client, Message message) {']
['executing docker info request ', []]
camel sample_6556

['private PingCmd executePingRequest(DockerClient client, Message message) {']
['executing docker ping request ', []]
camel sample_6556

['private VersionCmd executeVersionRequest(DockerClient client, Message message) {']
['executing docker version request ', []]
camel sample_6556

['private CreateImageCmd executeCreateImageRequest(DockerClient client, Message message) {']
['executing docker create image request ', []]
camel sample_6556

['private InspectImageCmd executeInspectImageRequest(DockerClient client, Message message) {']
['executing docker inspect image request ', []]
camel sample_6556

['private ListImagesCmd executeListImagesRequest(DockerClient client, Message message) {']
['executing docker images list request ', []]
camel sample_6556

['private RemoveImageCmd executeRemoveImageRequest(DockerClient client, Message message) {']
['executing docker remove image request ', []]
camel sample_6556

['private SearchImagesCmd executeSearchImageRequest(DockerClient client, Message message) {']
['executing docker search image request ', []]
camel sample_6556

['private TagImageCmd executeTagImageRequest(DockerClient client, Message message) {']
['executing docker tag image request ', []]
camel sample_6556

['private CommitCmd executeCommitContainerRequest(DockerClient client, Message message) throws DockerException {']
['executing docker commit container request ', []]
camel sample_6556

['private CopyFileFromContainerCmd executeCopyFileContainerRequest(DockerClient client, Message message) {']
['executing docker copy file folder container request ', []]
camel sample_6556

['private CreateContainerCmd executeCreateContainerRequest(DockerClient client, Message message) {']
['executing docker create container request ', []]
camel sample_6556

['private ContainerDiffCmd executeDiffContainerRequest(DockerClient client, Message message) {']
['executing docker diff container request ', []]
camel sample_6556

['private InspectContainerCmd executeInspectContainerRequest(DockerClient client, Message message) {']
['executing docker inspect container request ', []]
camel sample_6556

['private KillContainerCmd executeKillContainerRequest(DockerClient client, Message message) {']
['executing docker kill container request ', []]
camel sample_6556

['private ListContainersCmd executeListContainersRequest(DockerClient client, Message message) {']
['executing docker list container request ', []]
camel sample_6556

['private PauseContainerCmd executePauseContainerRequest(DockerClient client, Message message) {']
['executing docker pause container request ', []]
camel sample_6556

['private RemoveContainerCmd executeRemoveContainerRequest(DockerClient client, Message message) {']
['executing docker remove container request ', []]
camel sample_6556

['private RestartContainerCmd executeRestartContainerRequest(DockerClient client, Message message) throws DockerException {']
['executing docker restart container request ', []]
camel sample_6556

['private StartContainerCmd executeStartContainerRequest(DockerClient client, Message message) {']
['executing docker start container request ', []]
camel sample_6556

['private StopContainerCmd executeStopContainerRequest(DockerClient client, Message message) {']
['executing docker kill container request ', []]
camel sample_6556

['private TopContainerCmd executeTopContainerRequest(DockerClient client, Message message) {']
['executing docker top container request ', []]
camel sample_6556

['private UnpauseContainerCmd executeUnpauseContainerRequest(DockerClient client, Message message) {']
['executing docker unpause container request ', []]
camel sample_6556

['private ExecCreateCmd executeExecCreateRequest(DockerClient client, Message message) {']
['executing docker exec create request ', []]
camel sample_6556

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_11668

['public HeadersMapFactory resolve(CamelContext context) {', 'Class<?> type = null;', 'try {', 'type = findFactory("headers-map-factory", context);', '} catch (Exception e) {', '}', 'if (type != null) {', 'if (LOG.isDebugEnabled()) {']
['found headersmapfactory via headers map factory ', ['type', 'getname', 'factoryfinder', 'getresourcepath']]
camel sample_4091

['Class<?> type = null;', 'try {', 'type = findFactory("headers-map-factory", context);', '} catch (Exception e) {', '}', 'if (type != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'if (HeadersMapFactory.class.isAssignableFrom(type)) {', 'HeadersMapFactory answer = (HeadersMapFactory) context.getInjector().newInstance(type);']
['detected and using custom headersmapfactory ', ['answer']]
camel sample_4091

['if (type != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'if (HeadersMapFactory.class.isAssignableFrom(type)) {', 'HeadersMapFactory answer = (HeadersMapFactory) context.getInjector().newInstance(type);', 'return answer;', '} else {', 'throw new IllegalArgumentException("Type is not a HeadersMapFactory implementation. Found: " + type.getName());', '}', '}']
['creating default headersmapfactory ', []]
camel sample_4091

['result.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'exchange.setException(new ThrottlingException(msg));', '}', '});', 'sendMessage("Message One");', 'sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);']
['sending message three ', []]
camel sample_1769

['sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);', 'sendMessage("Message Three");', 'assertMockEndpointsSatisfied();', 'result.reset();', 'result.expectedMessageCount(1);', 'bodies = Arrays.asList("Message Four");', 'result.expectedBodiesReceivedInAnyOrder(bodies);', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isStarted);']
['sending message four ', []]
camel sample_1769

['protected void sendMessage(String bodyText) {', 'try {', 'template.sendBody(url, bodyText);', '} catch (Exception e) {']
['error sending ', ['e', 'getcause', 'getmessage']]
camel sample_1769

['public void execute(Exchange exchange) throws SmppException {', 'DataSm dataSm = createDataSm(exchange);', 'if (log.isDebugEnabled()) {']
['sending a data short message for exchange id ', ['exchange', 'getexchangeid']]
camel sample_16904

['DataSm dataSm = createDataSm(exchange);', 'if (log.isDebugEnabled()) {', '}', 'DataSmResult result;', 'try {', 'result = session.dataShortMessage( dataSm.getServiceType(), TypeOfNumber.valueOf(dataSm.getSourceAddrTon()), NumberingPlanIndicator.valueOf(dataSm.getSourceAddrNpi()), dataSm.getSourceAddr(), TypeOfNumber.valueOf(dataSm.getDestAddrTon()), NumberingPlanIndicator.valueOf(dataSm.getDestAddrNpi()), dataSm.getDestAddress(), new ESMClass(dataSm.getEsmClass()), new RegisteredDelivery(dataSm.getRegisteredDelivery()), DataCodings.newInstance(dataSm.getDataCoding()), dataSm.getOptionalParameters());', '} catch (Exception e) {', 'throw new SmppException(e);', '}', 'if (log.isDebugEnabled()) {']
['sent a data short message for exchange id and message id ', ['exchange', 'getexchangeid', 'result', 'getmessageid']]
camel sample_16904

['public String say(String name) {']
['invoking say method with ', ['name']]
camel sample_6872

['public void notification(int processId, String channel, String payload) {', 'if (LOG.isDebugEnabled()) {']
['notification processid channel payload ', ['new', 'object', 'processid', 'channel', 'payload']]
camel sample_12463

['public void testFetcher() throws Exception {', 'final Account result = requestBody("direct: assertNotNull("fetcher result not null", result);', 'assertNotNull("fetcher result sid not null", result.getSid());']
['fetcher ', ['result']]
camel sample_16420

['public void testFetcherWithPathSid() throws Exception {', 'TwilioConfiguration configuration = ((TwilioComponent) context().getComponent("twilio")) .getConfiguration();', 'final Account result = requestBodyAndHeaders("direct: headers("CamelTwilioPathSid", configuration.getAccountSid()));', 'assertNotNull("fetcher result not null", result);', 'assertNotNull("fetcher result sid not null", result.getSid());']
['fetcher ', ['result']]
camel sample_16420

['public void testReader() throws Exception {', 'final ResourceSet<Account> result = requestBody("direct: assertNotNull("reader result not null", result);', 'result.forEach(account -> {', 'assertNotNull("reader result account not null", account);']
['reader ', ['account']]
camel sample_16420

['public void testReaderWithStatusActive() throws Exception {', 'final ResourceSet<Account> result = requestBodyAndHeaders("direct: headers("CamelTwilioStatus", "active"));', 'assertNotNull("reader result not null", result);', 'result.forEach(account -> {', 'assertEquals("reader result account active", Account.Status.ACTIVE, account.getStatus());']
['reader ', ['account']]
camel sample_16420

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes nodes consumer ', []]
camel sample_13272

['public <T> T doInProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, ProducerCallback<T> callback) {', 'T answer = null;', 'Producer producer = doGetProducer(endpoint, true);', 'if (producer == null) {', 'if (isStopped()) {']
['ignoring exchange sent after processor is stopped ', ['exchange']]
camel sample_4009

['if (exchange != null) {', 'exchange.setException(e);', '}', '} finally {', 'if (producer instanceof ServicePoolAware) {', 'pool.release(endpoint, producer);', '} else if (!producer.isSingleton()) {', 'try {', 'ServiceHelper.stopAndShutdownService(producer);', '} catch (Exception e) {']
['error stopping shutting down producer ', ['producer', 'e']]
camel sample_4009

['public boolean doInAsyncProducer(final Endpoint endpoint, final Exchange exchange, final ExchangePattern pattern, final AsyncCallback callback, final AsyncProducerCallback producerCallback) {', 'Producer target;', 'try {', 'target = doGetProducer(endpoint, true);', 'if (target == null) {', 'if (isStopped()) {']
['ignoring exchange sent after processor is stopped ', ['exchange']]
camel sample_4009

['if (eventNotifierEnabled && watch != null) {', 'long timeTaken = watch.taken();', 'EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);', '}', 'if (producer instanceof ServicePoolAware) {', 'pool.release(endpoint, producer);', '} else if (!producer.isSingleton()) {', 'try {', 'ServiceHelper.stopAndShutdownService(producer);', '} catch (Exception e) {']
['error stopping shutting down producer ', ['producer', 'e']]
camel sample_4009

['boolean add = answer.isSingleton() || answer instanceof ServicePoolAware;', 'if (add) {', 'getCamelContext().addService(answer, false);', '} else {', 'ServiceHelper.startService(answer);', '}', '} catch (Throwable e) {', 'throw new FailedToCreateProducerException(endpoint, e);', '}', 'if (pooled && answer instanceof ServicePoolAware) {']
['adding to producer service pool with key for producer ', ['endpoint', 'answer']]
camel sample_4009

['getCamelContext().addService(answer, false);', '} else {', 'ServiceHelper.startService(answer);', '}', '} catch (Throwable e) {', 'throw new FailedToCreateProducerException(endpoint, e);', '}', 'if (pooled && answer instanceof ServicePoolAware) {', 'answer = pool.addAndAcquire(endpoint, answer);', '} else if (answer.isSingleton()) {']
['adding to producer cache with key for producer ', ['endpoint', 'answer']]
camel sample_4009

['public void testSendEndReceive() throws Exception {', 'int nbMessages = 50;', 'int failedMessages = 0;', 'for (int i = 0; i < nbMessages; i++) {', 'try {', 'directProducer.sendBodyAndHeader("Message #" + i, RabbitMQConstants.ROUTING_KEY, "rk3");', '} catch (CamelExecutionException e) {']
['can not send message ', ['e']]
camel sample_14108

['MockEndpoint mockEndpoint = getMockEndpoint("mock:a");', 'mockEndpoint.expectedBodiesReceived(expectedBody);', 'invokeHttpEndpoint();', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_11023

['exchange.getOut().setFault(true);', 'exchange.getOut().setBody(e);', '}', 'exchange.getOut().setBody("<b>Hello World</b>");', '}', '};', 'from("jetty:http: Processor printProcessor = new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Message out = exchange.getOut();', 'out.copyFrom(exchange.getIn());']
['the body s object is ', ['exchange', 'getin', 'getbody']]
camel sample_11023

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SqsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sqs.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sqs.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1122

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixSetComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-set.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-set.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1088

['public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getBody() == null) {']
['received exchange with empty body skipping ', []]
camel sample_11920

['public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getBody() == null) {', 'return;', '}', 'TelegramConfiguration config = endpoint.getConfiguration();', 'OutgoingMessage message = exchange.getIn().getBody(OutgoingMessage.class);', 'if (message == null) {', 'throw new IllegalArgumentException("Cannot convert the content to a Telegram OutgoingMessage");', '}', 'if (message.getChatId() == null) {']
['chat id is null on outgoing message trying resolution ', []]
camel sample_11920

['if (exchange.getIn().getBody() == null) {', 'return;', '}', 'TelegramConfiguration config = endpoint.getConfiguration();', 'OutgoingMessage message = exchange.getIn().getBody(OutgoingMessage.class);', 'if (message == null) {', 'throw new IllegalArgumentException("Cannot convert the content to a Telegram OutgoingMessage");', '}', 'if (message.getChatId() == null) {', 'String chatId = resolveChatId(config, message, exchange);']
['resolved chat id is ', ['chatid']]
camel sample_11920

['TelegramConfiguration config = endpoint.getConfiguration();', 'OutgoingMessage message = exchange.getIn().getBody(OutgoingMessage.class);', 'if (message == null) {', 'throw new IllegalArgumentException("Cannot convert the content to a Telegram OutgoingMessage");', '}', 'if (message.getChatId() == null) {', 'String chatId = resolveChatId(config, message, exchange);', 'message.setChatId(chatId);', '}', 'TelegramService service = TelegramServiceProvider.get().getService();']
['message being sent is ', ['message']]
camel sample_11920

['TelegramConfiguration config = endpoint.getConfiguration();', 'OutgoingMessage message = exchange.getIn().getBody(OutgoingMessage.class);', 'if (message == null) {', 'throw new IllegalArgumentException("Cannot convert the content to a Telegram OutgoingMessage");', '}', 'if (message.getChatId() == null) {', 'String chatId = resolveChatId(config, message, exchange);', 'message.setChatId(chatId);', '}', 'TelegramService service = TelegramServiceProvider.get().getService();']
['headers of message being sent are ', ['exchange', 'getin', 'getheaders']]
camel sample_11920

['public void onReloadXml(CamelContext camelContext, String name, InputStream resource) {']
['reloading routes from xml resource ', ['name']]
camel sample_5161

['public void onReloadXml(CamelContext camelContext, String name, InputStream resource) {', 'Document dom;', 'String xml;', 'try {', 'xml = camelContext.getTypeConverter().mandatoryConvertTo(String.class, resource);', 'dom = XmlLineNumberParser.parseXml(new ByteArrayInputStream(xml.getBytes()), null, "camelContext,routeContext,routes", "http: } catch (Exception e) {', 'failed++;']
['cannot load the resource as xml ', ['name']]
camel sample_5161

['if (list != null && list.getLength() > 0) {', 'for (int i = 0; i < list.getLength(); i++) {', 'Node node = list.item(i);', 'String lineNumber = (String) node.getUserData(XmlLineNumberParser.LINE_NUMBER);', 'String lineNumberEnd = (String) node.getUserData(XmlLineNumberParser.LINE_NUMBER_END);', 'if (lineNumber != null && lineNumberEnd != null && !changed.isEmpty()) {', 'int start = Integer.valueOf(lineNumber);', 'int end = Integer.valueOf(lineNumberEnd);', 'boolean within = withinChanged(start, end, changed);', 'if (within) {']
['updating route in lines ', ['start', 'end']]
camel sample_5161

['for (int i = 0; i < list.getLength(); i++) {', 'Node node = list.item(i);', 'String lineNumber = (String) node.getUserData(XmlLineNumberParser.LINE_NUMBER);', 'String lineNumberEnd = (String) node.getUserData(XmlLineNumberParser.LINE_NUMBER_END);', 'if (lineNumber != null && lineNumberEnd != null && !changed.isEmpty()) {', 'int start = Integer.valueOf(lineNumber);', 'int end = Integer.valueOf(lineNumberEnd);', 'boolean within = withinChanged(start, end, changed);', 'if (within) {', '} else {']
['no changes to route in lines ', ['start', 'end']]
camel sample_5161

['}', 'if (!routes.isEmpty()) {', 'try {', 'boolean unassignedRouteIds = false;', 'CollectionStringBuffer csb = new CollectionStringBuffer(",");', 'for (RouteDefinition route : routes) {', 'unassignedRouteIds |= !route.hasCustomIdAssigned();', 'String id = route.idOrCreate(camelContext.getNodeIdFactory());', 'csb.append(id);', '}']
['reloading routes from xml resource ', ['csb', 'name']]
camel sample_5161

['if (!routes.isEmpty()) {', 'try {', 'boolean unassignedRouteIds = false;', 'CollectionStringBuffer csb = new CollectionStringBuffer(",");', 'for (RouteDefinition route : routes) {', 'unassignedRouteIds |= !route.hasCustomIdAssigned();', 'String id = route.idOrCreate(camelContext.getNodeIdFactory());', 'csb.append(id);', '}', 'if (unassignedRouteIds) {']
['routes with no id s detected its recommended to assign id s to your routes so camel can reload the routes correctly ', []]
camel sample_5161

['boolean unassignedRouteIds = false;', 'CollectionStringBuffer csb = new CollectionStringBuffer(",");', 'for (RouteDefinition route : routes) {', 'unassignedRouteIds |= !route.hasCustomIdAssigned();', 'String id = route.idOrCreate(camelContext.getNodeIdFactory());', 'csb.append(id);', '}', 'if (unassignedRouteIds) {', '}', 'camelContext.addRouteDefinitions(routes);']
['reloaded routes from xml resource ', ['csb', 'name']]
camel sample_5161

['private boolean withinChanged(int start, int end, List<Integer> changed) {', 'for (int change : changed) {']
['changed line within ', ['change', 'start', 'end']]
camel sample_5161

['public void channelActive(ChannelHandlerContext ctx) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel open ', ['ctx', 'channel']]
camel sample_10262

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['exception caught at channel ', ['ctx', 'channel', 'cause']]
camel sample_10262

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (LOG.isTraceEnabled()) {', '}', 'if (exceptionHandled) {', 'return;', '}', 'exceptionHandled = true;', 'if (LOG.isDebugEnabled()) {']
['closing channel as an exception was thrown from netty ', ['cause']]
camel sample_10262

['public void channelInactive(ChannelHandlerContext ctx) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel closed ', ['ctx', 'channel']]
camel sample_10262

['Exchange exchange = getExchange(ctx);', 'AsyncCallback callback = getAsyncCallback(ctx);', 'producer.removeState(ctx.channel());', 'producer.getAllChannels().remove(ctx.channel());', 'boolean doneUoW = exchange.getUnitOfWork() == null;', 'NettyConfiguration configuration = producer.getConfiguration();', 'if (configuration.isSync() && !doneUoW && !messageReceived && !exceptionHandled) {', 'exceptionHandled = true;', 'String address = configuration != null ? configuration.getAddress() : "";', 'if (LOG.isDebugEnabled()) {']
['channel closed but no message received from address ', ['address']]
camel sample_10262

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'messageReceived = true;', 'if (LOG.isTraceEnabled()) {']
['message received ', ['msg']]
camel sample_10262

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'messageReceived = true;', 'if (LOG.isTraceEnabled()) {', '}', 'ChannelHandler handler = ctx.pipeline().get("timeout");', 'if (handler != null) {']
['removing timeout channel as we received message ', []]
camel sample_10262

['}', 'if (close == null) {', 'close = exchange.getProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = producer.getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (!producer.getConfiguration().isReuseChannel() && disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['producer', 'getconfiguration', 'getaddress']]
camel sample_10262

['protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {', 'Object body = message;', 'if (LOG.isDebugEnabled()) {']
['channel received body ', ['new', 'object', 'ctx', 'channel', 'body']]
camel sample_10262

['for (EndpointMappingKey key : endpoints.keySet()) {', 'String compositeOrSimpleKey = null;', 'switch (key.getType()) {', 'case ACTION: compositeOrSimpleKey = getActionCompositeLookupKey(map);', 'break;', 'case TO: compositeOrSimpleKey = getToCompositeLookupKey(map);', 'break;', 'default: throw new RuntimeCamelException( "Invalid mapping type specified. Supported types are: spring-ws:action:<WS-Addressing Action>(optional:<WS-Addressing To>?<params...>\\n)" + "spring-ws:to:<WS-Addressing To>(optional:<WS-Addressing Action>?<params...>)");', '}', 'if (compositeOrSimpleKey != null && key.getLookupKey().equals(compositeOrSimpleKey)) {']
['found mapping for key ', ['key']]
camel sample_17118

['simpleKey = map.getAction().toString();', '}', 'break;', 'case TO: if (map.getTo() != null) {', 'simpleKey = map.getTo().toString();', '}', 'break;', 'default: throw new RuntimeCamelException( "Invalid mapping type specified. Supported types are: spring-ws:action:<WS-Addressing Action>(optional:<WS-Addressing To>?<params...>\\n)" + "spring-ws:to:<WS-Addressing To>(optional:<WS-Addressing Action>?<params...>)");', '}', 'if (simpleKey != null && key.getLookupKey().equals(simpleKey)) {']
['found mapping for key ', ['key']]
camel sample_17118

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ZooKeeperComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zookeeper.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zookeeper.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1067

['public Processor wrap(RouteContext routeContext, Processor processor) {', 'TransactionErrorHandler answer;', 'ErrorHandlerBuilder builder = (ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder();', 'if (builder instanceof ErrorHandlerBuilderRef) {', 'ErrorHandlerBuilderRef builderRef = (ErrorHandlerBuilderRef) builder;', 'String ref = builderRef.getRef();', 'if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {']
['looking up errorhandlerbuilder with ref ', ['ref']]
camel sample_16359

['TransactionErrorHandler answer;', 'ErrorHandlerBuilder builder = (ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder();', 'if (builder instanceof ErrorHandlerBuilderRef) {', 'ErrorHandlerBuilderRef builderRef = (ErrorHandlerBuilderRef) builder;', 'String ref = builderRef.getRef();', 'if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {', 'builder = (ErrorHandlerBuilder)ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);', '}', '}', 'if (builder != null && builder.supportTransacted()) {']
['the errorhandlerbuilder configured is already a transactionerrorhandlerbuilder ', ['builder']]
camel sample_16359

['if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {', 'builder = (ErrorHandlerBuilder)ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);', '}', '}', 'if (builder != null && builder.supportTransacted()) {', 'answer = createTransactionErrorHandler(routeContext, processor, builder);', 'answer.setExceptionPolicy(builder.getExceptionPolicyStrategy());', 'builder.configure(routeContext, answer);', '} else {', 'if (builder != null) {']
['the errorhandlerbuilder configured is not a transactionerrorhandlerbuilder ', ['builder']]
camel sample_16359

['builder = (ErrorHandlerBuilder)ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref);', '}', '}', 'if (builder != null && builder.supportTransacted()) {', 'answer = createTransactionErrorHandler(routeContext, processor, builder);', 'answer.setExceptionPolicy(builder.getExceptionPolicyStrategy());', 'builder.configure(routeContext, answer);', '} else {', 'if (builder != null) {', '} else {']
['no errorhandlerbuilder configured will use default transactionerrorhandlerbuilder settings ', []]
camel sample_16359

['public static int subnumbers(int val1, int val2) {']
['calling subnumbers ', []]
camel sample_8991

['protected void setDataValue(final DataValue value) {']
['setvalue ', ['value']]
camel sample_17266

['public void testOneGroupMessage() throws Exception {', 'String message = "8=FIX 4.1\x019=20\x0134=1\x0135=0\x0149=INVMGR\x0156=BRKR" + "\x011=BE.CHM.001\x0111=CHM0001-01\x0158=this is a camel - bindy test" + "\x0122=4\x0148=BE0001245678\x0154=1" + "\x0110=220" + "\x01777=22-06-2013 12:21:11";', 'List<String> data = Arrays.asList(message.split("\\\\u0001"));', 'CamelContext camelContext = new DefaultCamelContext();', 'factory.bind(camelContext, data, model, counter);']
['model ', ['model', 'tostring']]
camel sample_7388

['public void testSeveralGroupMessage() throws Exception {', 'String message = "8=FIX 4.1\x019=20\x0134=1\x0135=0\x0149=INVMGR\x0156=BRKR" + "\x011=BE.CHM.001\x0111=CHM0001-01\x0158=this is a camel - bindy test" + "\x0122=4\x0148=BE0001245678\x0154=1" + "\x0122=5\x0148=BE0009876543\x0154=2" + "\x0122=6\x0148=BE0009999999\x0154=3" + "\x0110=220" + "\x01777=22-06-2013 12:21:11";', 'List<String> data = Arrays.asList(message.split("\\\\u0001"));', 'CamelContext camelContext = new DefaultCamelContext();', 'factory.bind(camelContext, data, model, counter);']
['model ', ['model', 'tostring']]
camel sample_7388

['public void testNoGroupMessage() throws Exception {', 'String message = "8=FIX 4.1\x019=20\x0134=1\x0135=0\x0149=INVMGR\x0156=BRKR" + "\x011=BE.CHM.001\x0111=CHM0001-01\x0158=this is a camel - bindy test" + "\x0110=220" + "\x01777=22-06-2013 12:21:11";', 'List<String> data = Arrays.asList(message.split("\\\\u0001"));', 'CamelContext camelContext = new DefaultCamelContext();', 'factory.bind(camelContext, data, model, counter);']
['model ', ['model', 'tostring']]
camel sample_7388

['public final void addToHintMap(final EncodeHintType hintType, final Object value) {', 'this.writerHintMap.put(hintType, value);']
['added s with value s to writer hint map ', ['string', 'format', 'hinttype', 'tostring', 'value', 'tostring']]
camel sample_12121

['public final void removeFromHintMap(final EncodeHintType hintType) {', 'if (this.writerHintMap.containsKey(hintType)) {', 'this.writerHintMap.remove(hintType);']
['removed s from writer hint map ', ['string', 'format', 'hinttype', 'tostring']]
camel sample_12121

['public final void removeFromHintMap(final EncodeHintType hintType) {', 'if (this.writerHintMap.containsKey(hintType)) {', 'this.writerHintMap.remove(hintType);', '} else {']
['could not find encode hint type s in writer hint map ', ['string', 'format', 'hinttype', 'tostring']]
camel sample_12121

['public final void removeFromHintMap(final DecodeHintType hintType) {', 'if (this.readerHintMap.containsKey(hintType)) {', 'this.readerHintMap.remove(hintType);']
['removed s from reader hint map ', ['string', 'format', 'hinttype', 'tostring']]
camel sample_12121

['public final void removeFromHintMap(final DecodeHintType hintType) {', 'if (this.readerHintMap.containsKey(hintType)) {', 'this.readerHintMap.remove(hintType);', '} else {']
['could not find decode hint type s in reader hint map ', ['string', 'format', 'hinttype', 'tostring']]
camel sample_12121

['public void testChoice() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6433

['public void testFilter() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6433

['Exchange exchange = executeScript(scriptFile, NO_TIMEOUT, classpathArg, PRINT_IN_STDOUT);', 'if (exchange != null) {', 'String out = exchange.getIn().getBody(String.class);', 'String err = (String)exchange.getIn().getHeader(EXEC_STDERR);', 'assertNotNull(out);', 'assertTrue(out.contains(PRINT_IN_STDOUT));', 'assertNull(err);', '}', '} else {', 'String os = System.getProperty("os.name");']
['executing batch scripts is not tested on ', ['os']]
camel sample_12208

['private File getExecScriptFileOrNull(String scriptNameBase) {', 'String resource = null;', 'if (OS.isFamilyWindows()) {', 'resource = scriptNameBase + ".bat";', '} else if (OS.isFamilyUnix()) {', 'resource = scriptNameBase + ".sh";', '}', 'File resourceFile = getClasspathResourceFileOrNull(resource);', 'if (resourceFile != null && !resourceFile.canRead()) {']
['the resource is not readable ', ['resourcefile', 'getabsolutepath']]
camel sample_12208

['Map<String, Object> options = new HashMap<String, Object>();', 'if (IntrospectionSupport.getProperties(bootstrapConfiguration, options, null, false)) {', 'IntrospectionSupport.setProperties(getCamelContext().getTypeConverter(), config, options);', '}', '}', 'NettyHttpSecurityConfiguration securityConfiguration = resolveAndRemoveReferenceParameter(parameters, "securityConfiguration", NettyHttpSecurityConfiguration.class);', 'Map<String, Object> securityOptions = IntrospectionSupport.extractProperties(parameters, "securityConfiguration.");', 'int sharedPort = -1;', 'NettySharedHttpServer shared = resolveAndRemoveReferenceParameter(parameters, "nettySharedHttpServer", NettySharedHttpServer.class);', 'if (shared != null) {']
['using nettysharedhttpserver with port ', ['shared', 'shared', 'getport']]
camel sample_8354

['if (shared != null) {', 'sharedPort = shared.getPort();', '}', 'boolean hasProtocol = remaining.startsWith("http: || remaining.startsWith("https: if (!hasProtocol) {', 'remaining = "http: }', 'boolean hasSlash = remaining.startsWith("http: if (!hasSlash) {', 'if (remaining.startsWith("http:")) {', 'remaining = "http: } else {', 'remaining = "https: }', '}']
['netty http url ', ['remaining']]
camel sample_8354

['parser.setContentHandler(createContentHandler(w));', 'try {', 'parser.parse(new InputSource(inputStream));', 'return w.toString();', '} catch (Exception e) {', 'throw new CamelException("Failed to convert the HTML to tidy Markup", e);', '} finally {', 'try {', 'inputStream.close();', '} catch (Exception e) {']
['failed to close the inputstream ', []]
camel sample_11977

['protected Object decode(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {', 'ByteBuf buf = (ByteBuf) super.decode(ctx, buffer);', 'if (buf != null) {', 'try {', 'int pos = buf.bytesBefore((byte) config.getStartByte());', 'if (pos >= 0) {', 'ByteBuf msg = buf.readerIndex(pos + 1).slice();']
['message ends with length ', ['msg', 'readablebytes']]
camel sample_11424

['if (pos >= 0) {', 'ByteBuf msg = buf.readerIndex(pos + 1).slice();', 'return config.isProduceString() ? asString(msg) : asByteArray(msg);', '} else {', 'throw new DecoderException("Did not find start byte " + (int) config.getStartByte());', '}', '} finally {', 'buf.release();', '}', '}']
['no complete messages yet at position ', ['buffer', 'readablebytes']]
camel sample_11424

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteEventsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-events.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-events.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1175

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<HeaderLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.header.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.header.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_911

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MustacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mustache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mustache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1030

['mock.expectedBodiesReceived(expected);', 'ProducerTemplate triggerTemplate = context.createProducerTemplate();', 'triggerTemplate.sendBody("vm:trigger", "");', 'assertMockEndpointsSatisfied();', 'long startFileDeletionCheckTime = System.currentTimeMillis();', 'boolean fileExists = true;', 'while (System.currentTimeMillis() - startFileDeletionCheckTime < 3000) {', 'File file = new File(FTP_ROOT_DIR + "/hello.txt");', 'fileExists = file.exists();', 'if (fileExists) {']
['will check that file has been deleted again in ', []]
camel sample_15172

['public void process(Exchange exchange) throws Exception {', 'String container = getContainerName(exchange);', 'String blobName = getBlobName(exchange);', 'String operation = getOperation(exchange);', 'List blobNames = getBlobNameList(exchange);', 'if (LOG.isTraceEnabled()) {']
['processing operation on ', ['operation', 'container', 'blobname']]
camel sample_8084

['protected void doStart() throws Exception {', 'super.doStart();']
['connecting receiver to the cluster ', ['receiver', 'clustername']]
camel sample_16932

['protected void doStop() throws Exception {']
['closing connection to cluster from receiver ', ['clustername', 'receiver']]
camel sample_16932

['public void initializeProcess() throws Exception {', 'if (LOG.isInfoEnabled()) {']
['starting mongodb tailable cursor consumer binding to collection db col ', ['endpoint', 'getmongodatabase', 'endpoint', 'getcollection']]
camel sample_16461

['public void run() {', 'stoppedLatch = new CountDownLatch(1);', 'while (keepRunning) {', 'doRun();', 'if (keepRunning) {', 'cursor.close();', 'if (LOG.isDebugEnabled()) {']
['regenerating cursor with lastval waiting ms first ', ['tailtracking', 'lastval', 'cursorregenerationdelay']]
camel sample_16461

['protected void stop() throws Exception {', 'if (LOG.isInfoEnabled()) {']
['stopping mongodb tailable cursor consumer bound to collection db col ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_16461

['protected void stop() throws Exception {', 'if (LOG.isInfoEnabled()) {', '}', 'keepRunning = false;', 'if (cursor != null) {', 'cursor.close();', '}', 'awaitStopped();', 'if (LOG.isInfoEnabled()) {']
['stopped mongodb tailable cursor consumer bound to collection db col ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_16461

['private void doRun() {', 'int counter = 0;', 'int persistRecords = endpoint.getPersistRecords();', 'boolean persistRegularly = persistRecords > 0;', 'try {', 'while (cursor.hasNext() && keepRunning) {', 'DBObject dbObj = cursor.next();', 'Exchange exchange = endpoint.createMongoDbExchange(dbObj);', 'try {', 'if (LOG.isTraceEnabled()) {']
['sending exchange objectid id ', ['exchange', 'dbobj', 'get']]
camel sample_16461

['consumer.getProcessor().process(exchange);', '} catch (Exception e) {', '}', 'tailTracking.setLastVal(dbObj);', 'if (persistRegularly && counter++ % persistRecords == 0) {', 'tailTracking.persistToStore();', '}', '}', '} catch (MongoCursorNotFoundException e) {', 'if (keepRunning) {']
['cursor not found exception from mongodb will regenerate cursor this is normal behaviour with tailable cursors ', ['e']]
camel sample_16461

['private void awaitStopped() throws InterruptedException {', 'if (!stopped) {']
['going to wait for stopping ', []]
camel sample_16461

['public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService) {']
['creating zk group for path path ', []]
camel sample_9695

['public void start() {']
['starting zk group for path ', ['path']]
camel sample_9695

['public void close() throws IOException {']
['close connected ', ['this', 'connected']]
camel sample_9695

['protected void doUpdate(T state) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['doupdate state id ', ['this', 'state', 'id']]
camel sample_9695

['try {', 'if (isConnected()) {', 'client.delete().guaranteed().forPath(id);', 'unstable.set(false);', '}', '} catch (KeeperException.NoNodeException e) {', '} finally {', 'id = null;', '}', '} else if (creating.get()) {']
['ephemeral node could be created in the registry but zookeeper group didn t record its id ', []]
camel sample_9695

['private String createEphemeralNode(T state) throws Exception {', 'state.uuid = uuid;', 'creating.set(true);', 'String pathId = client.create().creatingParentsIfNeeded() .withMode(CreateMode.EPHEMERAL_SEQUENTIAL) .forPath(path + "/0", encode(state));', 'creating.set(false);', 'unstable.set(false);', 'if (LOG.isTraceEnabled()) {']
['state new ephemeralsequential path ', ['this', 'state', 'pathid']]
camel sample_9695

['private void prunePartialState(final T ourState, final String pathId) throws Exception {', 'if (ourState.uuid != null) {', 'clearAndRefresh(true, true);', 'List<ChildData<T>> children = new ArrayList<ChildData<T>>(currentData.values());', 'for (ChildData<T> child : children) {', 'if (ourState.uuid.equals(child.getNode().uuid) && !child.getPath().equals(pathId)) {']
['deleting partially created znode ', ['child', 'getpath']]
camel sample_9695

['protected void doStart() throws Exception {', 'super.doStart();']
['starting nats consumer ', []]
camel sample_12971

['protected void doStart() throws Exception {', 'super.doStart();', 'executor = getEndpoint().createExecutor();']
['getting nats connection ', []]
camel sample_12971

['protected void doStop() throws Exception {', 'super.doStop();', 'if (getEndpoint().getNatsConfiguration().isFlushConnection()) {']
['flushing messages before stopping ', []]
camel sample_12971

['protected void doStop() throws Exception {', 'super.doStop();', 'if (getEndpoint().getNatsConfiguration().isFlushConnection()) {', 'connection.flush(getEndpoint().getNatsConfiguration().getFlushTimeout());', '}', 'try {', 'sid.unsubscribe();', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error during unsubscribing", e);', '}']
['stopping nats consumer ', []]
camel sample_12971

['getExceptionHandler().handleException("Error during unsubscribing", e);', '}', 'if (executor != null) {', 'if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {', 'getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);', '} else {', 'executor.shutdownNow();', '}', '}', 'executor = null;']
['closing nats connection ', []]
camel sample_12971

['public void run() {', 'try {', 'if (ObjectHelper.isNotEmpty(configuration.getQueueName())) {', 'sid = connection.subscribe(getEndpoint().getNatsConfiguration().getTopic(), getEndpoint().getNatsConfiguration().getQueueName(), new MessageHandler() {', 'public void onMessage(Message msg) {']
['received message ', ['msg']]
camel sample_12971

['});', 'if (ObjectHelper.isNotEmpty(getEndpoint().getNatsConfiguration().getMaxMessages())) {', 'sid.autoUnsubscribe(Integer.parseInt(getEndpoint().getNatsConfiguration().getMaxMessages()));', '}', 'if (sid.isValid()) {', 'setSubscribed(true);', '}', '} else {', 'sid = connection.subscribe(getEndpoint().getNatsConfiguration().getTopic(), new MessageHandler() {', 'public void onMessage(Message msg) {']
['received message ', ['msg']]
camel sample_12971

['public void testHttpHbr() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6425

['exchange.setException(e);', 'callback.done(true);', 'return true;', '}', '}', 'callback = new InternalCallback(states, exchange, callback, resultProcessor);', 'Object synchronous = exchange.removeProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC);', 'if (exchange.isTransacted() || synchronous != null) {', 'if (LOG.isTraceEnabled()) {', 'if (exchange.isTransacted()) {']
['transacted exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4418

['callback.done(true);', 'return true;', '}', '}', 'callback = new InternalCallback(states, exchange, callback, resultProcessor);', 'Object synchronous = exchange.removeProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC);', 'if (exchange.isTransacted() || synchronous != null) {', 'if (LOG.isTraceEnabled()) {', 'if (exchange.isTransacted()) {', '} else {']
['synchronous unitofwork exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4418

['}', 'callback.done(true);', 'return true;', '} else {', 'final UnitOfWork uow = exchange.getUnitOfWork();', 'AsyncCallback async = callback;', 'if (uow != null) {', 'async = uow.beforeProcess(processor, exchange, callback);', '}', 'if (LOG.isTraceEnabled()) {']
['processing exchange for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4418

['if (uow != null) {', 'async = uow.beforeProcess(processor, exchange, callback);', '}', 'if (LOG.isTraceEnabled()) {', '}', 'boolean sync = processor.process(exchange, async);', 'if (uow != null) {', 'uow.afterProcess(processor, exchange, callback, sync);', '}', 'if (LOG.isTraceEnabled()) {']
['exchange processed and is continued routed for exchangeid synchronously asynchronously ', ['new', 'object', 'sync', 'exchange', 'getexchangeid', 'exchange']]
camel sample_4418

['protected boolean continueProcessing(Exchange exchange, AsyncProcessor processor) {', 'Object stop = exchange.getProperty(Exchange.ROUTE_STOP);', 'if (stop != null) {', 'boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, stop);', 'if (doStop) {']
['exchange is marked to stop routing ', ['exchange']]
camel sample_4418

['public void start(BundleContext context) throws Exception {']
['camel activator starting ', []]
camel sample_4048

['public void start(BundleContext context) throws Exception {', 'cachePackageCapabilities(context);', 'bundleId = context.getBundle().getBundleId();', 'BundleContext systemBundleContext = context.getBundle(0).getBundleContext();', 'tracker = new BundleTracker(systemBundleContext, Bundle.ACTIVE, this);', 'tracker.open();']
['camel activator started ', []]
camel sample_4048

['public void stop(BundleContext context) throws Exception {']
['camel activator stopping ', []]
camel sample_4048

['public void stop(BundleContext context) throws Exception {', 'tracker.close();', 'packageCapabilities.clear();']
['camel activator stopped ', []]
camel sample_4048

['public Object addingBundle(Bundle bundle, BundleEvent event) {']
['bundle started ', ['bundle', 'getsymbolicname']]
camel sample_4048

['private boolean extenderCapabilityWired(Bundle bundle) {', 'BundleWiring wiring = bundle.adapt(BundleWiring.class);', 'if (wiring == null) {', 'return true;', '}', 'List<BundleWire> requiredWires = wiring.getRequiredWires(EXTENDER_NAMESPACE);', 'for (BundleWire requiredWire : requiredWires) {', 'if (CAMEL_EXTENDER.equals(requiredWire.getCapability().getAttributes().get(EXTENDER_NAMESPACE))) {', 'if (this.bundleId == requiredWire.getProviderWiring().getBundle().getBundleId()) {']
['camel extender requirement of bundle correctly wired to this implementation ', ['bundle', 'getbundleid']]
camel sample_4048

['BundleWiring wiring = bundle.adapt(BundleWiring.class);', 'if (wiring == null) {', 'return true;', '}', 'List<BundleWire> requiredWires = wiring.getRequiredWires(EXTENDER_NAMESPACE);', 'for (BundleWire requiredWire : requiredWires) {', 'if (CAMEL_EXTENDER.equals(requiredWire.getCapability().getAttributes().get(EXTENDER_NAMESPACE))) {', 'if (this.bundleId == requiredWire.getProviderWiring().getBundle().getBundleId()) {', 'return true;', '} else {']
['not processing bundle as it requires a camel extender but is not wired to the this implementation ', ['bundle', 'getbundleid']]
camel sample_4048

['public void removedBundle(Bundle bundle, BundleEvent event, Object object) {']
['bundle stopped ', ['bundle', 'getsymbolicname']]
camel sample_4048

['protected void registerComponents(Bundle bundle, List<BaseService> resolvers) {', 'if (canSee(bundle, Component.class)) {', 'Map<String, String> components = new HashMap<String, String>();', 'for (Enumeration<?> e = bundle.getEntryPaths(META_INF_COMPONENT); e != null && e.hasMoreElements();) {', 'String path = (String) e.nextElement();']
['found entry in bundle ', ['path', 'bundle', 'getsymbolicname']]
camel sample_4048

['protected void registerLanguages(Bundle bundle, List<BaseService> resolvers) {', 'if (canSee(bundle, Language.class)) {', 'Map<String, String> languages = new HashMap<String, String>();', 'for (Enumeration<?> e = bundle.getEntryPaths(META_INF_LANGUAGE); e != null && e.hasMoreElements();) {', 'String path = (String) e.nextElement();']
['found entry in bundle ', ['path', 'bundle', 'getsymbolicname']]
camel sample_4048

['for (Enumeration<?> e = bundle.getEntryPaths(META_INF_LANGUAGE); e != null && e.hasMoreElements();) {', 'String path = (String) e.nextElement();', 'String name = path.substring(path.lastIndexOf("/") + 1);', 'languages.put(name, path);', '}', 'if (!languages.isEmpty()) {', 'resolvers.add(new BundleLanguageResolver(bundle, languages));', '}', 'for (Enumeration<?> e = bundle.getEntryPaths(META_INF_LANGUAGE_RESOLVER); e != null && e.hasMoreElements();) {', 'String path = (String) e.nextElement();']
['found entry in bundle ', ['path', 'bundle', 'getsymbolicname']]
camel sample_4048

['protected void registerDataFormats(Bundle bundle, List<BaseService> resolvers) {', 'if (canSee(bundle, DataFormat.class)) {', 'Map<String, String> dataformats = new HashMap<String, String>();', 'for (Enumeration<?> e = bundle.getEntryPaths(META_INF_DATAFORMAT); e != null && e.hasMoreElements();) {', 'String path = (String) e.nextElement();']
['found entry in bundle ', ['path', 'bundle', 'getsymbolicname']]
camel sample_4048

['protected void registerTypeConverterLoader(Bundle bundle, List<BaseService> resolvers) {', 'if (canSee(bundle, TypeConverter.class)) {', 'URL url1 = bundle.getEntry(META_INF_TYPE_CONVERTER);', 'URL url2 = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);', 'if (url1 != null || url2 != null) {']
['found typeconverter in bundle ', ['bundle', 'getsymbolicname']]
camel sample_4048

['public void load(TypeConverterRegistry registry) throws TypeConverterLoaderException {', 'PackageScanFilter test = new AnnotatedWithPackageScanFilter(Converter.class, true);', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'Set<String> packages = getConverterPackages(bundle.getEntry(META_INF_TYPE_CONVERTER));', 'if (LOG.isTraceEnabled()) {']
['found packages ', ['new', 'object', 'packages', 'size', 'meta', 'inf', 'type', 'converter', 'packages']]
camel sample_4048

['public void load(TypeConverterRegistry registry) throws TypeConverterLoaderException {', 'PackageScanFilter test = new AnnotatedWithPackageScanFilter(Converter.class, true);', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'Set<String> packages = getConverterPackages(bundle.getEntry(META_INF_TYPE_CONVERTER));', 'if (LOG.isTraceEnabled()) {', '}', 'if (packages.size() == 1 && "org.apache.camel.core".equals(packages.iterator().next())) {']
['no additional package names found in classpath for annotated type converters ', []]
camel sample_4048

['Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'Set<String> packages = getConverterPackages(bundle.getEntry(META_INF_TYPE_CONVERTER));', 'if (LOG.isTraceEnabled()) {', '}', 'if (packages.size() == 1 && "org.apache.camel.core".equals(packages.iterator().next())) {', 'return;', '}', 'packages.remove("org.apache.camel.core");', 'for (String pkg : packages) {', 'if (StringHelper.isClassName(pkg)) {']
['loading class ', ['pkg']]
camel sample_4048

['return;', '}', 'packages.remove("org.apache.camel.core");', 'for (String pkg : packages) {', 'if (StringHelper.isClassName(pkg)) {', 'try {', 'Class<?> clazz = bundle.loadClass(pkg);', 'classes.add(clazz);', 'continue;', '} catch (Throwable t) {']
['failed to load class due this exception will be ignored ', ['pkg', 't', 'getmessage', 't']]
camel sample_4048

['Class<?> clazz = bundle.loadClass(pkg);', 'classes.add(clazz);', 'continue;', '} catch (Throwable t) {', '}', '}', 'Enumeration<URL> e = bundle.findEntries("/" + pkg.replace(\'.\', \'/\'), "*.class", true);', 'while (e != null && e.hasMoreElements()) {', 'String path = e.nextElement().getPath();', "String externalName = path.substring(path.charAt(0) == '/' ? 1 : 0, path.indexOf('.')).replace('/', '.');"]
['loading class ', ['externalname']]
camel sample_4048

['Enumeration<URL> e = bundle.findEntries("/" + pkg.replace(\'.\', \'/\'), "*.class", true);', 'while (e != null && e.hasMoreElements()) {', 'String path = e.nextElement().getPath();', "String externalName = path.substring(path.charAt(0) == '/' ? 1 : 0, path.indexOf('.')).replace('/', '.');", 'try {', 'Class<?> clazz = bundle.loadClass(externalName);', 'if (test.matches(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {']
['failed to load class due this exception will be ignored ', ['externalname', 't', 'getmessage', 't']]
camel sample_4048

["String externalName = path.substring(path.charAt(0) == '/' ? 1 : 0, path.indexOf('.')).replace('/', '.');", 'try {', 'Class<?> clazz = bundle.loadClass(externalName);', 'if (test.matches(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {', '}', '}', '}']
['found converter classes to load ', ['classes', 'size']]
camel sample_4048

['Class<?> clazz = bundle.loadClass(externalName);', 'if (test.matches(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {', '}', '}', '}', 'for (Class<?> type : classes) {', 'if (LOG.isTraceEnabled()) {']
['loading converter class ', ['objecthelper', 'name', 'type']]
camel sample_4048

['}', '}', '}', 'for (Class<?> type : classes) {', 'if (LOG.isTraceEnabled()) {', '}', 'loadConverterMethods(registry, type);', '}', 'URL fallbackUrl = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);', 'if (fallbackUrl != null) {']
['found to load the fallbacktypeconverter ', ['meta', 'inf', 'fallback', 'type', 'converter']]
camel sample_4048

['protected T createInstance(String name, String path, CamelContext context) {', 'if (path == null) {', 'return null;', '}', 'URL url = bundle.getEntry(path);']
['the entry s url is ', ['name', 'url']]
camel sample_4048

['private void authenticateUser(Subject currentUser, ShiroSecurityToken securityToken) {', 'boolean authenticated = currentUser.isAuthenticated();', 'boolean sameUser = securityToken.getUsername().equals(currentUser.getPrincipal());']
['authenticated same username ', ['authenticated', 'sameuser']]
camel sample_12137

['boolean sameUser = securityToken.getUsername().equals(currentUser.getPrincipal());', 'if (!authenticated || !sameUser) {', 'UsernamePasswordToken token = new UsernamePasswordToken(securityToken.getUsername(), securityToken.getPassword());', 'if (policy.isAlwaysReauthenticate()) {', 'token.setRememberMe(false);', '} else {', 'token.setRememberMe(true);', '}', 'try {', 'currentUser.login(token);']
['current user successfully authenticated ', ['currentuser', 'getprincipal']]
camel sample_12137

['authorized = currentUser.hasAllRoles(policy.getRolesList());', '} else {', 'for (String role : policy.getRolesList()) {', 'if (currentUser.hasRole(role)) {', 'authorized = true;', 'break;', '}', '}', '}', '} else {']
['valid permissions or roles list not specified for shirosecuritypolicy no authorization checks will be performed for current user ', []]
camel sample_12137

['break;', '}', '}', '}', '} else {', 'authorized = true;', '}', 'if (!authorized) {', 'throw new CamelAuthorizationException("Authorization Failed. Subject\'s role set does " + "not have the necessary roles or permissions to perform further processing.", exchange);', '}']
['current user is successfully authorized ', ['currentuser', 'getprincipal']]
camel sample_12137

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'from("direct:start").routeId("myRoute") .to("mock:before") .to("async:bye:camel?delay=2000").id("myAsync") .to("mock:after") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'int size = context.getAsyncProcessorAwaitManager().size();']
['async inflight ', ['size']]
camel sample_2036

['public GetCommitFileProducer(GitHubEndpoint endpoint) throws Exception {', 'super(endpoint);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_DATA_SERVICE);', 'if (service != null) {']
['using dataservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14260

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SipComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sip.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sip.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1163

['public void run() {', 'BlockingQueue<Exchange> queue = ((RouteboxSedaEndpoint)getRouteboxEndpoint()).getQueue();', 'while (queue != null && isRunAllowed()) {', 'try {', 'final Exchange exchange = queue.poll(getRouteboxEndpoint().getConfig().getPollInterval(), TimeUnit.MILLISECONDS);', 'dispatchToInnerRoute(queue, exchange);', '} catch (InterruptedException e) {', 'if (LOG.isDebugEnabled()) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_14630

['private void dispatchToInnerRoute(BlockingQueue<Exchange> queue, final Exchange exchange) throws InterruptedException {', 'Exchange result;', 'if (exchange != null) {', 'if (isRunAllowed()) {', 'try {']
['dispatching to inner route ', ['exchange']]
camel sample_14630

['result = dispatcher.dispatchAsync(getRouteboxEndpoint(), exchange);', 'processor.process(result, new AsyncCallback() {', 'public void done(boolean doneSync) {', '}', '});', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, e);', '}', '} else {', 'if (LOG.isWarnEnabled()) {']
['this consumer is stopped during polling an exchange so putting it back on the seda queue ', ['exchange']]
camel sample_14630

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GuavaEventBusComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.guava-eventbus.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.guava-eventbus.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_454

['((InEntry) entry).buffer = bos.toByteArray();', '}', '} else {', 'entry = (Entry) body;', '}', 'Transaction tnx = null;', 'if (transactionHelper != null) {', 'tnx = transactionHelper.getJiniTransaction(transactionTimeout).transaction;', '}', 'if (LOG.isDebugEnabled()) {']
['writing body ', ['entry']]
camel sample_15021

['protected RouteBuilder createRouteBuilder() {', 'final int groupInterval = 1000;', 'final boolean groupActiveOnly = false;', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'String routeId = "mllp-receiver";', 'public void configure() throws Exception {']
['test route complete ', ['log', 'logginglevel', 'info', 'routeid']]
camel sample_13819

['protected RouteBuilder createRouteBuilder() {', 'final int groupInterval = 1000;', 'final boolean groupActiveOnly = false;', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'String routeId = "mllp-receiver";', 'public void configure() throws Exception {']
['mllp mllpclient getmllphost mllpclient getmllpport routeid routeid process new passthroughprocessor result to result tof test route received message ', ['before', 'send', 'to', 'log', 'log', 'logginglevel', 'debug', 'routeid']]
camel sample_13819

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MiloClientComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.milo-client.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.milo-client.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_511

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<MvelLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.mvel.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.mvel.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1026

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ValidatorComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.validator.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.validator.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_842

['if (outParameter.getScale() != null) {', 'sqlOutParameter = new SqlOutParameter(outParameter.getOutValueMapKey(), outParameter.getSqlType(), outParameter.getScale());', '} else if (outParameter.getTypeName() != null) {', 'sqlOutParameter = new SqlOutParameter(outParameter.getOutValueMapKey(), outParameter.getSqlType(), outParameter.getTypeName());', '} else {', 'sqlOutParameter = new SqlOutParameter(outParameter.getOutValueMapKey(), outParameter.getSqlType());', '}', 'declareParameter(sqlOutParameter);', '}', '}']
['compiling stored procedure ', ['template', 'getprocedurename']]
camel sample_9046

['public Map execute(Exchange exchange, Object rowData) {', 'Map<String, Object> params = new HashMap<>();', 'for (InputParameter inputParameter : inputParameterList) {', 'params.put(inputParameter.getName(), inputParameter.getValueExtractor().eval(exchange, rowData));', '}']
['invoking stored procedure ', ['template', 'getprocedurename']]
camel sample_9046

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_14958

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_14958

['public static void startServer() throws Exception {', 'Object implementor = new GreeterImpl();', 'String address = "http: endpoint = Endpoint.publish(address, implementor);']
['the ws endpoint is published ', []]
camel sample_6022

['private void createTag(Exchange exchange) throws Exception {', 'String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class);', 'if (ObjectHelper.isEmpty(name)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'Tag tag = getEndpoint().getDigitalOceanClient().createTag(name);']
['create tag ', ['tag']]
camel sample_8895

['private void getTag(Exchange exchange) throws Exception {', 'String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class);', 'if (ObjectHelper.isEmpty(name)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'Tag tag = getEndpoint().getDigitalOceanClient().getTag(name);']
['tag ', ['tag']]
camel sample_8895

['private void getTags(Exchange exchange) throws Exception {', 'Tags tags = getEndpoint().getDigitalOceanClient().getAvailableTags(configuration.getPage(), configuration.getPerPage());']
['all tags page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'tags', 'gettags']]
camel sample_8895

['private void deleteTag(Exchange exchange) throws Exception {', 'String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class);', 'if (ObjectHelper.isEmpty(name)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'Delete delete = getEndpoint().getDigitalOceanClient().deleteTag(name);']
['delete tag ', ['delete']]
camel sample_8895

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start").streamCaching() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'byte[] data = exchange.getIn().getBody(byte[].class);', 'InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, data);', 'XMLReader xmlReader = XMLReaderFactory.createXMLReader();', 'exchange.getIn().setBody(new SAXSource(xmlReader, new InputSource(is)));', '}']
['body xslt xslt common staff template xsl log result mock result ', ['logginglevel', 'warn', 'to', 'to', 'to']]
camel sample_3559

['public void testPollFileWhileSlowFileIsBeingWritten() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(1);', 'template.sendBody("seda:start", "Create the slow file");', 'mock.assertIsSatisfied();', 'String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);']
['body is ', ['body']]
camel sample_3109

['public void process(Exchange exchange) throws Exception {']
['creating a slow file with no locks ', []]
camel sample_3109

['public void process(Exchange exchange) throws Exception {', 'File file = new File("target/exclusiveread/slowfile/hello.txt");', 'FileOutputStream fos = new FileOutputStream(file);', 'fos.write("Hello World".getBytes());', 'for (int i = 0; i < 3; i++) {', 'Thread.sleep(100);', 'fos.write(("Line #" + i).getBytes());']
['appending to slowfile ', []]
camel sample_3109

['public void process(Exchange exchange) throws Exception {', 'File file = new File("target/exclusiveread/slowfile/hello.txt");', 'FileOutputStream fos = new FileOutputStream(file);', 'fos.write("Hello World".getBytes());', 'for (int i = 0; i < 3; i++) {', 'Thread.sleep(100);', 'fos.write(("Line #" + i).getBytes());', '}', 'fos.write("Bye World".getBytes());', 'fos.close();']
['done creating slowfile ', []]
camel sample_3109

['exchange.setException(new IllegalStateException("EventBus is not started or not configured"));', 'callback.done(true);', 'return true;', '}', 'String address = getEndpoint().getAddress();', 'boolean reply = ExchangeHelper.isOutCapable(exchange);', 'boolean pubSub = getEndpoint().isPubSub();', 'Object body = getVertxBody(exchange);', 'if (body != null) {', 'if (reply) {']
['sending to with body ', ['address', 'body']]
camel sample_11520

['String address = getEndpoint().getAddress();', 'boolean reply = ExchangeHelper.isOutCapable(exchange);', 'boolean pubSub = getEndpoint().isPubSub();', 'Object body = getVertxBody(exchange);', 'if (body != null) {', 'if (reply) {', 'eventBus.send(address, body, new CamelReplyHandler(exchange, callback));', 'return false;', '} else {', 'if (pubSub) {']
['publishing to with body ', ['address', 'body']]
camel sample_11520

['boolean pubSub = getEndpoint().isPubSub();', 'Object body = getVertxBody(exchange);', 'if (body != null) {', 'if (reply) {', 'eventBus.send(address, body, new CamelReplyHandler(exchange, callback));', 'return false;', '} else {', 'if (pubSub) {', 'eventBus.publish(address, body);', '} else {']
['sending to with body ', ['address', 'body']]
camel sample_11520

['public void process(Exchange exchange) throws Exception {', 'String unmarshalId = endpoint.getConfiguration().getUnmarshalId();', 'if (unmarshalId != null) {']
['unmarshalling input data using data format ', ['unmarshalid']]
camel sample_9441

['if (unmarshalId != null) {', 'resolveUnmarshaller(exchange, unmarshalId).process(exchange);', 'if (exchange.getException() != null) {', 'throw exchange.getException();', '}', '}', 'Class<?> targetModel = endpoint.getCamelContext().getClassResolver().resolveMandatoryClass( endpoint.getConfiguration().getTargetModel());', 'Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn();', 'String sourceType = endpoint.getConfiguration().getSourceModel();', 'if (sourceType != null) {']
['converting to source model ', ['sourcetype']]
camel sample_9441

['Class<?> targetModel = endpoint.getCamelContext().getClassResolver().resolveMandatoryClass( endpoint.getConfiguration().getTargetModel());', 'Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn();', 'String sourceType = endpoint.getConfiguration().getSourceModel();', 'if (sourceType != null) {', 'Class<?> sourceModel = endpoint.getCamelContext() .getClassResolver().resolveClass(sourceType);', 'if (sourceModel == null) {', 'throw new Exception("Unable to load sourceModel class: " + sourceType);', '}', 'msg.setBody(msg.getBody(sourceModel));', '}']
['mapping to target model ', ['targetmodel', 'getname']]
camel sample_9441

['try {', 'endpoint.getExpressionMapper().setCurrentExchange(exchange);', 'endpoint.getMapper().map(endpoint.getExpressionMapper(), targetObject);', '} finally {', 'endpoint.getExpressionMapper().setCurrentExchange(null);', '}', 'msg.setBody(targetObject);', 'exchange.setIn(msg);', 'String marshalId = endpoint.getConfiguration().getMarshalId();', 'if (marshalId != null) {']
['marshalling output data using data format ', ['marshalid']]
camel sample_9441

['public void testPostStatusUpdateRequestResponse() throws Exception {', 'Date now = new Date();', 'String tweet = "UserProducerInOnlyTest: This is a tweet posted on " + now.toString();']
['tweet ', ['tweet']]
camel sample_14165

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(getCamelContext(), "camelContext");', 'if (isResolvePropertyPlaceholders()) {', 'Component existing = CamelContextHelper.lookupPropertiesComponent(camelContext, false);', 'if (existing != null) {']
['resolving property placeholders on component ', ['this']]
camel sample_4064

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(getCamelContext(), "camelContext");', 'if (isResolvePropertyPlaceholders()) {', 'Component existing = CamelContextHelper.lookupPropertiesComponent(camelContext, false);', 'if (existing != null) {', 'CamelContextHelper.resolvePropertyPlaceholders(camelContext, this);', '} else {']
['cannot resolve property placeholders on component as propertiescomponent is not in use ', ['this']]
camel sample_4064

['public void run() {', 'delayedCount.decrementAndGet();']
['delayed task woke up and continues routing for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4434

['public void run() {', 'delayedCount.decrementAndGet();', 'if (!isRunAllowed()) {', 'exchange.setException(new RejectedExecutionException("Run is not allowed"));', '}', 'DelayProcessorSupport.this.processor.process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['delayed task done for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4434

['return processor.process(exchange, callback);', '} catch (Exception e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}', '} else {', 'delayedCount.incrementAndGet();', 'ProcessCall call = new ProcessCall(exchange, callback);', 'try {']
['scheduling delayed task to run in millis for exchangeid ', ['delay', 'exchange', 'getexchangeid']]
camel sample_4434

['ProcessCall call = new ProcessCall(exchange, callback);', 'try {', 'executorService.schedule(call, delay, TimeUnit.MILLISECONDS);', 'return false;', '} catch (RejectedExecutionException e) {', 'delayedCount.decrementAndGet();', 'if (isCallerRunsWhenRejected()) {', 'if (!isRunAllowed()) {', 'exchange.setException(new RejectedExecutionException());', '} else {']
['scheduling rejected task so letting caller run delaying at first for millis for exchangeid ', ['delay', 'exchange', 'getexchangeid']]
camel sample_4434

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'if (!isRunAllowed()) {', 'exchange.setException(new RejectedExecutionException("Run is not allowed"));', 'callback.done(true);', 'return true;', '}', 'long delay;', 'try {', 'delay = calculateDelay(exchange);', 'if (delay <= 0) {']
['no delay for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4434

['protected void handleSleepInterruptedException(InterruptedException e, Exchange exchange) throws InterruptedException {', 'if (log.isDebugEnabled()) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_4434

['private void sleep(long delay) throws InterruptedException {', 'if (delay <= 0) {', 'return;', '}']
['sleeping for millis ', ['delay']]
camel sample_4434

['public void process(Exchange exchange) throws Exception {', 'boolean matches = predicate.matches(exchange);', 'if (LOG.isDebugEnabled()) {']
['validation for with predicate succeed failed ', ['new', 'object', 'matches', 'exchange', 'predicate']]
camel sample_4571

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'getContext().addInterceptStrategy(new HandleFault());']
['mock error ', ['deadletterchannel', 'maximumredeliveries', 'logginglevel', 'logginglevel', 'debug']]
camel sample_1773

['}', 'file = new File(classesDirectory, "camel-connector-schema.json");', 'if (file.exists() && javaType != null && connectorScheme != null) {', 'String json = loadText(new FileInputStream(file));', 'ComponentModel model = generateComponentModel(json);', 'boolean hasComponentOptions = model.getComponentOptions().stream().anyMatch(o -> !o.getName().equals("resolvePropertyPlaceholders"));', 'boolean hasConnectorOptions = !model.getConnectorOptions().isEmpty();', 'int pos = javaType.lastIndexOf(".");', 'String pkg = javaType.substring(0, pos) + ".springboot";', 'if (hasComponentOptions || hasConnectorOptions) {']
['generating spring boot autoconfiguration for connector ', ['model', 'getscheme']]
camel sample_64

['String fileName = "src/main/resources/META-INF/spring.factories";', 'File target = new File(root, fileName);', 'try {', 'String header = "";', 'if (includeLicenseHeader) {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header.txt");', 'header = loadText(is);', '}', 'String code = sb.toString();', 'code = header + "\\n" + code;']
['source code generated ', ['code']]
camel sample_64

['File target = new File(root, fileName);', 'try {', 'String header = "";', 'if (includeLicenseHeader) {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header.txt");', 'header = loadText(is);', '}', 'String code = sb.toString();', 'code = header + "\\n" + code;', 'FileUtils.write(target, code);']
['created file ', ['target']]
camel sample_64

['File root = classesDirectory.getParentFile().getParentFile();', 'File target = new File(root, "src/main/java/" + fileName);', 'try {', 'String header = "";', 'if (includeLicenseHeader) {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'header = loadText(is);', '}', 'String code = sourceToString(source);', 'code = header + code;']
['source code generated ', ['code']]
camel sample_64

['if (includeLicenseHeader) {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'header = loadText(is);', '}', 'String code = sourceToString(source);', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);']
['updated existing file ', ['target']]
camel sample_64

['InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'header = loadText(is);', '}', 'String code = sourceToString(source);', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);', '} else {']
['no changes to existing file ', ['target']]
camel sample_64

['String code = sourceToString(source);', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);', '} else {', '}', '} else {', 'FileUtils.write(target, code);']
['created file ', ['target']]
camel sample_64

['sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.connector.customizer\\",\\n");', 'sb.append("               \\"camel.connector.").append(name).append(".customizer\\",\\n");', 'sb.append("               ((HasId)customizer).getId())\\n");', 'sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\\n");', 'sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.connector.customizer\\",\\n");', 'sb.append("               \\"camel.connector.").append(name).append(".customizer\\");\\n");', 'sb.append("\\n");', 'sb.append("        if (useCustomizer) {\\n");']
['logger debug connector customizer ', ['append', 'configure', 'connector', 'with', 'customizer']]
camel sample_64

['sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.connector.customizer\\",\\n");', 'sb.append("               \\"camel.connector.").append(name).append(".\\" + entry.getKey() + \\".customizer\\",\\n");', 'sb.append("               ((HasId)customizer).getId())\\n");', 'sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\\n");', 'sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.connector.customizer\\",\\n");', 'sb.append("               \\"camel.connector.").append(name).append(".\\" + entry.getKey() + \\".customizer\\");\\n");', 'sb.append("\\n");', 'sb.append("        if (useCustomizer) {\\n");']
['logger debug connector customizer ', ['append', 'configure', 'connector', 'with', 'customizer']]
camel sample_64

['protected void doStart() throws Exception {', 'this.client = createClient(component);', 'handshakeError = null;', 'handshakeException = null;', 'connectError = null;', 'connectException = null;', 'if (handshakeListener == null) {', 'handshakeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {']
['channel meta handshake ', ['message']]
camel sample_14759

['protected void doStart() throws Exception {', 'this.client = createClient(component);', 'handshakeError = null;', 'handshakeException = null;', 'connectError = null;', 'connectException = null;', 'if (handshakeListener == null) {', 'handshakeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {']
['handshake failure ', ['message']]
camel sample_14759

['connectException = null;', 'if (handshakeListener == null) {', 'handshakeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {', 'handshakeError = (String) message.get(ERROR_FIELD);', 'handshakeException = getFailure(message);', 'if (handshakeError != null) {', 'if (handshakeError.startsWith("401::")) {', 'try {']
['refreshing oauth token ', []]
camel sample_14759

['if (handshakeListener == null) {', 'handshakeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {', 'handshakeError = (String) message.get(ERROR_FIELD);', 'handshakeException = getFailure(message);', 'if (handshakeError != null) {', 'if (handshakeError.startsWith("401::")) {', 'try {', 'session.login(session.getAccessToken());']
['refreshed oauth token for re handshake ', []]
camel sample_14759

['handshakeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {', 'handshakeError = (String) message.get(ERROR_FIELD);', 'handshakeException = getFailure(message);', 'if (handshakeError != null) {', 'if (handshakeError.startsWith("401::")) {', 'try {', 'session.login(session.getAccessToken());', '} catch (SalesforceException e) {']
['error renewing oauth token on error ', ['e', 'getmessage', 'e']]
camel sample_14759

['handshakeException = getFailure(message);', 'if (handshakeError != null) {', 'if (handshakeError.startsWith("401::")) {', 'try {', 'session.login(session.getAccessToken());', '} catch (SalesforceException e) {', '}', '}', 'if (handshakeError.startsWith("403::")) {', 'try {']
['cleaning session logout from salesforcesession before restarting client ', []]
camel sample_14759

['if (handshakeError.startsWith("401::")) {', 'try {', 'session.login(session.getAccessToken());', '} catch (SalesforceException e) {', '}', '}', 'if (handshakeError.startsWith("403::")) {', 'try {', 'session.logout();', '} catch (SalesforceException e) {']
['error while cleaning session ', ['e', 'getmessage', 'e']]
camel sample_14759

['} else if (!listenerMap.isEmpty()) {', 'reconnecting = true;', '}', '}', '};', '}', 'client.getChannel(META_HANDSHAKE).addListener(handshakeListener);', 'if (connectListener == null) {', 'connectListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {']
['channel meta connect ', ['message']]
camel sample_14759

['reconnecting = true;', '}', '}', '};', '}', 'client.getChannel(META_HANDSHAKE).addListener(handshakeListener);', 'if (connectListener == null) {', 'connectListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {']
['connect failure ', ['message']]
camel sample_14759

['}', 'client.getChannel(META_HANDSHAKE).addListener(handshakeListener);', 'if (connectListener == null) {', 'connectListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'if (!message.isSuccessful()) {', 'connectError = (String) message.get(ERROR_FIELD);', 'connectException = getFailure(message);', '} else if (reconnecting) {', 'reconnecting = false;']
['refreshing subscriptions to channels on reconnect ', ['listenermap', 'size']]
camel sample_14759

['private void restartClient() {', 'final SalesforceHttpClient httpClient = component.getConfig().getHttpClient();', 'httpClient.getExecutor().execute(new Runnable() {', 'public void run() {']
['restarting on unexpected disconnect from salesforce ', []]
camel sample_14759

['private void restartClient() {', 'final SalesforceHttpClient httpClient = component.getConfig().getHttpClient();', 'httpClient.getExecutor().execute(new Runnable() {', 'public void run() {', 'boolean abort = false;']
['waiting to disconnect ', []]
camel sample_14759

['private void restartClient() {', 'final SalesforceHttpClient httpClient = component.getConfig().getHttpClient();', 'httpClient.getExecutor().execute(new Runnable() {', 'public void run() {', 'boolean abort = false;', 'while (!client.isDisconnected()) {', 'try {', 'Thread.sleep(DISCONNECT_INTERVAL);', '} catch (InterruptedException e) {']
['aborting restart on interrupt ', []]
camel sample_14759

['while (!client.isDisconnected()) {', 'try {', 'Thread.sleep(DISCONNECT_INTERVAL);', '} catch (InterruptedException e) {', 'abort = true;', '}', '}', 'if (!abort) {', 'final long backoff = restartBackoff.getAndAdd(backoffIncrement);', 'if (backoff > maxBackoff) {']
['restart aborted after exceeding msecs backoff ', ['maxbackoff']]
camel sample_14759

['Thread.sleep(DISCONNECT_INTERVAL);', '} catch (InterruptedException e) {', 'abort = true;', '}', '}', 'if (!abort) {', 'final long backoff = restartBackoff.getAndAdd(backoffIncrement);', 'if (backoff > maxBackoff) {', 'abort = true;', '} else {']
['pausing for msecs before restart attempt ', ['backoff']]
camel sample_14759

['}', '}', 'if (!abort) {', 'final long backoff = restartBackoff.getAndAdd(backoffIncrement);', 'if (backoff > maxBackoff) {', 'abort = true;', '} else {', 'try {', 'Thread.sleep(backoff);', '} catch (InterruptedException e) {']
['aborting restart on interrupt ', []]
camel sample_14759

['} catch (InterruptedException e) {', 'abort = true;', '}', '}', 'if (!abort) {', 'Exception lastError = new SalesforceException("Unknown error", null);', 'try {', 'doStop();', 'doStart();', '} catch (Exception e) {']
['error restarting ', ['e', 'getmessage', 'e']]
camel sample_14759

['}', 'if (!abort) {', 'Exception lastError = new SalesforceException("Unknown error", null);', 'try {', 'doStop();', 'doStart();', '} catch (Exception e) {', 'lastError = e;', '}', 'if (client.isHandshook()) {']
['successfully restarted ', []]
camel sample_14759

['Exception lastError = new SalesforceException("Unknown error", null);', 'try {', 'doStop();', 'doStart();', '} catch (Exception e) {', 'lastError = e;', '}', 'if (client.isHandshook()) {', 'restartBackoff.set(client.getBackoffIncrement());', '} else {']
['failed to restart after pausing for msecs ', ['backoff']]
camel sample_14759

['protected void doStop() throws Exception {', 'client.getChannel(META_DISCONNECT).removeListener(disconnectListener);', 'client.getChannel(META_CONNECT).removeListener(connectListener);', 'client.getChannel(META_HANDSHAKE).removeListener(handshakeListener);', 'boolean disconnected = client.disconnect(timeout);', 'if (!disconnected) {']
['could not disconnect client connected to after msec ', ['getendpointurl', 'component', 'timeout']]
camel sample_14759

['public void subscribe(final String topicName, final SalesforceConsumer consumer) {', 'final String channelName = getChannelName(topicName);', 'setupReplay((SalesforceEndpoint) consumer.getEndpoint());']
['subscribing to channel ', ['channelname']]
camel sample_14759

['public void subscribe(final String topicName, final SalesforceConsumer consumer) {', 'final String channelName = getChannelName(topicName);', 'setupReplay((SalesforceEndpoint) consumer.getEndpoint());', 'final ClientSessionChannel.MessageListener listener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {']
['received message ', ['message']]
camel sample_14759

['final String channelName = getChannelName(topicName);', 'setupReplay((SalesforceEndpoint) consumer.getEndpoint());', 'final ClientSessionChannel.MessageListener listener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'consumer.processMessage(channel, message);', '}', '};', 'final ClientSessionChannel clientChannel = client.getChannel(channelName);', 'final ClientSessionChannel.MessageListener subscriptionListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {']
['channel meta subscribe ', ['message']]
camel sample_14759

['if (channelName.equals(subscribedChannelName)) {', 'if (!message.isSuccessful()) {', 'String error = (String) message.get(ERROR_FIELD);', 'if (error == null) {', 'error = "Missing error message";', '}', 'Exception failure = getFailure(message);', 'String msg = String.format("Error subscribing to %s: %s", topicName, failure != null ? failure.getMessage() : error);', 'consumer.handleException(msg, new SalesforceException(msg, failure));', '} else {']
['subscribed to channel ', ['subscribedchannelname']]
camel sample_14759

['public void unsubscribe(String topicName, SalesforceConsumer consumer) throws CamelException {', 'final String channelName = getChannelName(topicName);', 'final CountDownLatch latch = new CountDownLatch(1);', 'final String[] unsubscribeError = {null};', 'final Exception[] unsubscribeFailure = {null};', 'final ClientSessionChannel.MessageListener unsubscribeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {']
['channel meta unsubscribe ', ['message']]
camel sample_14759

['final ClientSessionChannel.MessageListener unsubscribeListener = new ClientSessionChannel.MessageListener() {', 'public void onMessage(ClientSessionChannel channel, Message message) {', 'Object subscription = message.get(SUBSCRIPTION_FIELD);', 'if (subscription != null) {', 'String unsubscribedChannelName = subscription.toString();', 'if (channelName.equals(unsubscribedChannelName)) {', 'if (!message.isSuccessful()) {', 'unsubscribeError[0] = (String) message.get(ERROR_FIELD);', 'unsubscribeFailure[0] = getFailure(message);', '} else {']
['unsubscribed from channel ', ['unsubscribedchannelname']]
camel sample_14759

['}', 'latch.countDown();', '}', '}', '}', '};', 'client.getChannel(META_UNSUBSCRIBE).addListener(unsubscribeListener);', 'try {', 'final ClientSessionChannel.MessageListener listener = listenerMap.remove(consumer);', 'if (listener != null) {']
['unsubscribing from channel ', ['channelname']]
camel sample_14759

['protected RouteBuilder[] createRouteBuilders() throws Exception {', 'RouteBuilder[] builders = new RouteBuilder[2];', 'builders[0] = new RouteBuilder() {', 'String routeId = "mllp-receiver";', 'public void configure() {']
['mllp convertbodyto string class to acknowledged process new passthroughprocessor result log logginglevel debug routeid ', ['after', 'send', 'to', 'receiving', 'body']]
camel sample_13835

['protected RouteBuilder[] createRouteBuilders() throws Exception {', 'RouteBuilder[] builders = new RouteBuilder[2];', 'builders[0] = new RouteBuilder() {', 'String routeId = "mllp-receiver";', 'public void configure() {', '}', '};', 'builders[1] = new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['sending body mllp setbody header mllpconstants mllp acknowledgement ', ['source', 'getdefaultendpoint', 'routeid', 'routeid', 'log', 'logginglevel', 'debug', 'routeid', 'tof']]
camel sample_13835

['public void testLoopbackWithMultipleMessages() throws Exception {', 'int messageCount = 1000;', 'acknowledged.expectedMessageCount(messageCount);', 'for (int i = 1; i <= messageCount; ++i) {']
['processing message ', ['i']]
camel sample_13835

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RssComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rss.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rss.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_497

['public void tapSomething(String body) {']
['wire tapping ', ['body']]
camel sample_2333

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IronMQComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ironmq.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ironmq.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_478

['SortedMap<String, Properties> map = CamelContextHelper.findComponents(context);', 'assertNotNull("Should never return null", map);', 'assertTrue("Component map should never be empty", !map.isEmpty());', 'String[] expectedComponentNames = {"file", "vm"};', 'for (String expectedName : expectedComponentNames) {', 'Properties properties = map.get(expectedName);', 'assertTrue("Component map contain component: " + expectedName, properties != null);', '}', 'Set<Map.Entry<String, Properties>> entries = map.entrySet();', 'for (Map.Entry<String, Properties> entry : entries) {']
['found component with properties ', ['entry', 'getkey', 'entry', 'getvalue']]
camel sample_3522

['}', 'if (fault) {', 'if (exchange.hasOut()) {', 'exchange.getOut().setFault(true);', '} else {', 'exchange.getIn().setFault(true);', '}', '}', 'if (!doneSync) {', 'ExchangeHelper.prepareOutToIn(exchange);']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4463

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);']
['staring to send messages ', ['size']]
camel sample_8913

['MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];']
['sending with id ', ['value', 'id']]
camel sample_8913

['final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];', 'template.sendBodyAndHeader("direct:start", value, "id", "" + id);', 'Thread.sleep(3);', 'return null;', '}', '});', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_8913

['public void process(Exchange exchange) throws Exception {', 'String cacheKey = key.evaluate(exchange, String.class);', 'if (isValid(cacheManager, cacheName, cacheKey)) {', 'Ehcache cache = cacheManager.getCache(cacheName);']
['replacing message body from cachename for key ', ['cachename', 'cachekey']]
camel sample_10521

['public void process(Exchange exchange) throws Exception {', 'MongoDbOperation operation = endpoint.getOperation();', 'Object header = exchange.getIn().getHeader(OPERATION_HEADER);', 'if (header != null) {']
['overriding default operation with operation specified on header ', ['header']]
camel sample_10464

['return endpoint.getMongoDatabase();', '}', 'String dynamicDB = exchange.getIn().getHeader(DATABASE, String.class);', 'MongoDatabase db;', 'if (dynamicDB == null) {', 'db = endpoint.getMongoDatabase();', '} else {', 'db = endpoint.getMongoConnection().getDatabase(dynamicDB);', '}', 'if (LOG.isDebugEnabled()) {']
['dynamic database selected ', ['db', 'getname']]
camel sample_10464

['} else {', 'dbCol = db.getCollection(dynamicCollection, Document.class);', 'if (dynamicIndex == null) {', 'endpoint.ensureIndex(dbCol, endpoint.createIndex());', '} else {', 'endpoint.ensureIndex(dbCol, dynamicIndex);', '}', '}', '}', 'if (LOG.isDebugEnabled()) {']
['dynamic database and or collection selected ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_10464

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MySimpleToFRoute.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/MySimpleToFRoute.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_213

['MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/MySimpleToFRoute.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:start", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_213

['return message;', '}', 'for (LogListener listener : listeners) {', 'if (listener == null) {', 'continue;', '}', 'try {', 'String output = listener.onLog(exchange, logger, message);', 'message = output != null ? output : message;', '} catch (Throwable t) {']
['ignoring an exception thrown by ', ['listener', 'getclass', 'getname', 't', 'getmessage']]
camel sample_4526

['public void testGetJob() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.job_id", 0L);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Job result = requestBodyAndHeaders("direct: assertNotNull("getJob result", result);']
['getjob ', ['result']]
camel sample_8856

['public void process(Exchange exchange) {', 'exchange.getIn().setBody(new MultiSteps("foo@bar.com"));', '}', '});', 'results = entityManager.createQuery(queryText).getResultList();', 'assertEquals("Should have results: " + results, 1, results.size());', 'MultiSteps mail = (MultiSteps)results.get(0);', 'assertEquals("address property", "foo@bar.com", mail.getAddress());', 'consumer = endpoint.createConsumer(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_14077

['}', 'entityManager2.joinTransaction();', 'List<?> rows = entityManager2.createQuery("select x from MultiSteps x").getResultList();', 'assertEquals("Number of entities: " + rows, 2, rows.size());', 'int counter = 1;', 'for (Object rowObj : rows) {', 'assertTrue("Rows are not instances of MultiSteps",  rowObj instanceof MultiSteps);', 'final MultiSteps row = (MultiSteps) rowObj;', 'LOG.info("entity: " + counter++ + " = " + row);', 'if (row.getAddress().equals("foo@bar.com")) {']
['found updated row ', ['row']]
camel sample_14077

['public void setJmsMessage(Message jmsMessage) {', 'if (jmsMessage != null) {', 'try {', 'setMessageId(jmsMessage.getJMSMessageID());', '} catch (JMSException e) {']
['unable to retrieve jmsmessageid from jms message ', ['e']]
camel sample_7189

['protected String createMessageId() {', 'if (jmsMessage == null) {']
['no javax jms message set so generating a new message id ', []]
camel sample_7189

['public void process(Exchange exchange) throws Exception {', 'if (!(exchange.getIn().getBody() instanceof javax.mail.Message)) {', 'SendEmailRequest request = createMailRequest(exchange);']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8786

['public void process(Exchange exchange) throws Exception {', 'if (!(exchange.getIn().getBody() instanceof javax.mail.Message)) {', 'SendEmailRequest request = createMailRequest(exchange);', 'SendEmailResult result = getEndpoint().getSESClient().sendEmail(request);']
['received result ', ['result']]
camel sample_8786

['public void process(Exchange exchange) throws Exception {', 'if (!(exchange.getIn().getBody() instanceof javax.mail.Message)) {', 'SendEmailRequest request = createMailRequest(exchange);', 'SendEmailResult result = getEndpoint().getSESClient().sendEmail(request);', 'Message message = getMessageForResponse(exchange);', 'message.setHeader(SesConstants.MESSAGE_ID, result.getMessageId());', '} else {', 'SendRawEmailRequest request = createRawMailRequest(exchange);']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8786

['public void process(Exchange exchange) throws Exception {', 'if (!(exchange.getIn().getBody() instanceof javax.mail.Message)) {', 'SendEmailRequest request = createMailRequest(exchange);', 'SendEmailResult result = getEndpoint().getSESClient().sendEmail(request);', 'Message message = getMessageForResponse(exchange);', 'message.setHeader(SesConstants.MESSAGE_ID, result.getMessageId());', '} else {', 'SendRawEmailRequest request = createRawMailRequest(exchange);', 'SendRawEmailResult result = getEndpoint().getSESClient().sendRawEmail(request);']
['received result ', ['result']]
camel sample_8786

['private com.amazonaws.services.simpleemail.model.RawMessage createRawMessage(Exchange exchange) throws Exception {', 'com.amazonaws.services.simpleemail.model.RawMessage message = new com.amazonaws.services.simpleemail.model.RawMessage();', 'javax.mail.Message content = exchange.getIn().getBody(javax.mail.Message.class);', 'OutputStream byteOutput = new ByteArrayOutputStream();', 'try {', 'content.writeTo(byteOutput);', '} catch (Exception e) {']
['cannot write to byte array ', []]
camel sample_8786

['protected void doStart() throws Exception {', 'try {', 'super.doStart();', 'if (applicationContext == null) {', 'applicationContext = createDefaultApplicationContext();', '}', 'if (additionalApplicationContext == null) {', 'additionalApplicationContext = createAdditionalLocationsFromClasspath();', 'if (additionalApplicationContext != null) {']
['starting additional applicationcontext ', ['additionalapplicationcontext', 'getid']]
camel sample_16363

['super.doStart();', 'if (applicationContext == null) {', 'applicationContext = createDefaultApplicationContext();', '}', 'if (additionalApplicationContext == null) {', 'additionalApplicationContext = createAdditionalLocationsFromClasspath();', 'if (additionalApplicationContext != null) {', 'additionalApplicationContext.start();', '}', '}']
['starting spring applicationcontext ', ['applicationcontext', 'getid']]
camel sample_16363

['protected void doStop() throws Exception {', 'super.doStop();', 'if (additionalApplicationContext != null) {']
['stopping additional applicationcontext ', ['additionalapplicationcontext', 'getid']]
camel sample_16363

['protected void doStop() throws Exception {', 'super.doStop();', 'if (additionalApplicationContext != null) {', 'IOHelper.close(additionalApplicationContext);', '}', 'if (applicationContext != null) {']
['stopping spring applicationcontext ', ['applicationcontext', 'getid']]
camel sample_16363

['protected AbstractApplicationContext createAdditionalLocationsFromClasspath() throws IOException {', 'Set<String> locations = new LinkedHashSet<String>();', 'findLocations(locations, Main.class.getClassLoader());', 'if (!locations.isEmpty()) {']
['found locations for additional spring xml files ', ['locations']]
camel sample_16363

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ScpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.scp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.scp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_993

['for (PGPPublicKey key : keys) {', 'encGen.addMethod(new JcePublicKeyKeyEncryptionMethodGenerator(key));', '}', 'OutputStream encOut = encGen.open(outputStream, new byte[BUFFER_SIZE]);', 'OutputStream comOut;', 'if (withCompressedDataPacket) {', 'PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(findCompressionAlgorithm(exchange));', 'comOut = new BufferedOutputStream(comData.open(encOut));', '} else {', 'comOut = encOut;']
['no compressed data packet is added ', []]
camel sample_9178

['DecryptedDataAndPPublicKeyEncryptedData encDataAndPbe = getDecryptedData(exchange, in);', 'encData = encDataAndPbe.getDecryptedData();', 'PGPObjectFactory pgpFactory = new PGPObjectFactory(encData, new BcKeyFingerprintCalculator());', 'Object object = pgpFactory.nextObject();', 'if (object instanceof PGPCompressedData) {', 'PGPCompressedData comData = (PGPCompressedData) object;', 'uncompressedData = comData.getDataStream();', 'pgpFactory = new PGPObjectFactory(uncompressedData, new BcKeyFingerprintCalculator());', 'object = pgpFactory.nextObject();', '} else {']
['pgp message does not contain a compressed data packet ', []]
camel sample_9178

['protected void doStart() throws Exception {', 'if (Security.getProvider(BC) == null && BC.equals(getProvider())) {']
['adding bouncycastleprovider as security provider ', []]
camel sample_9178

['protected void doStart() throws Exception {', 'if (Security.getProvider(BC) == null && BC.equals(getProvider())) {', 'Security.addProvider(new BouncyCastleProvider());', '} else {']
['using custom provider which is expected to be enlisted manually ', ['getprovider']]
camel sample_9178

['public void testMasterGoesAway() throws Exception {', 'candidateOneContext = createNewContext();', 'candidateTwoContext = createNewContext();', 'ZooKeeperElection electionCandidate1 = createElectionCandidate(candidateOneContext, 1);', 'assertTrue("The first candidate was not elected.", electionCandidate1.isMaster());', 'ZooKeeperElection electionCandidate2 = createElectionCandidate(candidateTwoContext, 1);', 'assertFalse("The second candidate should not have been elected.", electionCandidate2.isMaster());']
['about to shutdown the first candidate ', []]
camel sample_12635

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17437

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.getManagementStrategy().getManagementAgent().setStatisticsLevel(ManagementStatisticsLevel.RoutesOnly);', 'onException(Exception.class).handled(true) .redeliveryDelay(0) .maximumRedeliveries(4).logStackTrace(false) .setBody().constant("Error");', 'from("direct:start") .to("mock:foo") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['invoking me ', []]
camel sample_2734

['public DefaultServerInitializerFactory(NettyServerBootstrapConfiguration configuration) {', 'this.consumer = null;', 'try {', 'this.sslContext = createSSLContext(null, configuration);', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_10258

['public DefaultServerInitializerFactory(NettyConsumer consumer) {', 'this.consumer = consumer;', 'try {', 'this.sslContext = createSSLContext(consumer.getContext(), consumer.getConfiguration());', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_10258

['protected void initChannel(Channel ch) throws Exception {', 'ChannelPipeline channelPipeline = ch.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_10258

['decoder = ((ChannelHandlerFactory) decoder).newChannelHandler();', '}', 'addToPipeline("decoder-" + x, channelPipeline, decoder);', '}', 'if (consumer.getConfiguration().isUsingExecutorService()) {', 'EventExecutorGroup applicationExecutor = consumer.getEndpoint().getComponent().getExecutorService();', 'addToPipeline("handler", channelPipeline, applicationExecutor, new ServerChannelHandler(consumer));', '} else {', 'addToPipeline("handler", channelPipeline, new ServerChannelHandler(consumer));', '}']
['created channelpipeline ', ['channelpipeline']]
camel sample_10258

['private SSLContext createSSLContext(CamelContext camelContext, NettyServerBootstrapConfiguration configuration) throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_10258

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_10258

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_10258

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ProtobufDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.protobuf.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.protobuf.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1227

['private ConnectionFactory createConnectionFactory(String uri) throws TimeoutException {', 'RabbitMQEndpoint endpoint = context.getEndpoint(uri, RabbitMQEndpoint.class);', 'try {', 'endpoint.connect(Executors.newSingleThreadExecutor());', '} catch (IOException ioExc) {']
['rabbitmq not available ', ['ioexc']]
camel sample_14124

['mockEndpointB.expectedBodiesReceived(expectedBody);', 'invokeHttpEndpoint();', 'mockEndpointA.assertIsSatisfied();', 'mockEndpointB.assertIsSatisfied();', 'List<Exchange> list = mockEndpointA.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_10864

['private void waitForActionCalled() throws InterruptedException {', 'for (int i = 0; i < 50; i++) {', 'if (action.hasBeenCalled()) {', 'break;', '}']
['sleeping for millis to wait for action call ', []]
camel sample_11799

['public boolean sleep() throws InterruptedException {', 'if (delay < 1000) {', 'policy.sleep(delay);', 'return true;', '}', 'StopWatch watch = new StopWatch();']
['sleeping for millis until attempting redelivery ', ['delay']]
camel sample_4530

['public boolean sleep() throws InterruptedException {', 'if (delay < 1000) {', 'policy.sleep(delay);', 'return true;', '}', 'StopWatch watch = new StopWatch();', 'while (watch.taken() < delay) {', 'long delta = delay - watch.taken();', 'long max = Math.min(1000, delta);', 'if (max > 0) {']
['sleeping for millis until waking up for re check ', ['max']]
camel sample_4530

['return true;', '}', 'StopWatch watch = new StopWatch();', 'while (watch.taken() < delay) {', 'long delta = delay - watch.taken();', 'long max = Math.min(1000, delta);', 'if (max > 0) {', 'Thread.sleep(max);', '}', 'if (preparingShutdown && !policy.isAllowRedeliveryWhileStopping()) {']
['rejected redelivery while stopping ', []]
camel sample_4530

['public Boolean call() throws Exception {', 'prepareExchangeForRedelivery(exchange, data);', 'deliverToOnRedeliveryProcessor(exchange, data);', 'if (log.isTraceEnabled()) {']
['redelivering exchangeid for exchange ', ['new', 'object', 'exchange', 'getexchangeid', 'outputasync', 'exchange']]
camel sample_4530

['public Boolean call() throws Exception {', 'prepareExchangeForRedelivery(exchange, data);', 'deliverToOnRedeliveryProcessor(exchange, data);', 'if (log.isTraceEnabled()) {', '}', 'EventHelper.notifyExchangeRedelivery(exchange.getContext(), exchange, data.redeliveryCounter);', 'boolean sync;', 'if (data.redeliverFromSync) {', 'sync = outputAsync.process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['redelivering exchangeid done sync ', ['exchange', 'getexchangeid', 'donesync']]
camel sample_4530

['if (isDone(exchange)) {', 'callback.done(false);', 'return;', '}', 'processAsyncErrorHandler(exchange, callback, data);', '}', '});', '} else {', 'sync = outputAsync.process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['redelivering exchangeid done sync ', ['exchange', 'getexchangeid', 'donesync']]
camel sample_4530

['protected boolean isRunAllowed(RedeliveryData data) {', 'boolean forceShutdown = camelContext.getShutdownStrategy().forceShutdown(this);', 'if (forceShutdown) {']
['isrunallowed false run not allowed as shutdownstrategy is forcing shutting down ', []]
camel sample_4530

['protected boolean isRunAllowed(RedeliveryData data) {', 'boolean forceShutdown = camelContext.getShutdownStrategy().forceShutdown(this);', 'if (forceShutdown) {', 'return false;', '}', 'if (data.redeliveryCounter > 0) {', 'if (data.currentRedeliveryPolicy.allowRedeliveryWhileStopping) {']
['isrunallowed true run allowed as redeliverwhilestopping is enabled ', []]
camel sample_4530

['protected boolean isRunAllowed(RedeliveryData data) {', 'boolean forceShutdown = camelContext.getShutdownStrategy().forceShutdown(this);', 'if (forceShutdown) {', 'return false;', '}', 'if (data.redeliveryCounter > 0) {', 'if (data.currentRedeliveryPolicy.allowRedeliveryWhileStopping) {', 'return true;', '} else if (preparingShutdown) {', 'boolean answer = isRunAllowedOnPreparingShutdown();']
['isrunallowed run not allowed as we are preparing for shutdown ', ['answer']]
camel sample_4530

['}', 'if (data.redeliveryCounter > 0) {', 'if (data.currentRedeliveryPolicy.allowRedeliveryWhileStopping) {', 'return true;', '} else if (preparingShutdown) {', 'boolean answer = isRunAllowedOnPreparingShutdown();', 'return answer;', '}', '}', 'boolean answer = !isStoppingOrStopped();']
['isrunallowed run allowed if we are not stopped stopping ', ['answer']]
camel sample_4530

['protected boolean isRedeliveryAllowed(RedeliveryData data) {', 'if (data.redeliveryCounter > 0) {', 'boolean stopping = isStoppingOrStopped();', 'if (!preparingShutdown && !stopping) {']
['isredeliveryallowed true we are not stopping stopped ', []]
camel sample_4530

['protected boolean isRedeliveryAllowed(RedeliveryData data) {', 'if (data.redeliveryCounter > 0) {', 'boolean stopping = isStoppingOrStopped();', 'if (!preparingShutdown && !stopping) {', 'return true;', '} else {', 'if (data.currentRedeliveryPolicy.allowRedeliveryWhileStopping) {']
['isredeliveryallowed true redelivery allowed as redeliverwhilestopping is enabled ', []]
camel sample_4530

['protected boolean isRedeliveryAllowed(RedeliveryData data) {', 'if (data.redeliveryCounter > 0) {', 'boolean stopping = isStoppingOrStopped();', 'if (!preparingShutdown && !stopping) {', 'return true;', '} else {', 'if (data.currentRedeliveryPolicy.allowRedeliveryWhileStopping) {', 'return true;', '} else {']
['isredeliveryallowed false redelivery not allowed as redeliverwhilestopping is disabled ', []]
camel sample_4530

['public void prepareShutdown(boolean suspendOnly, boolean forced) {']
['prepare shutdown on error handler ', ['this']]
camel sample_4530

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'final RedeliveryData data = new RedeliveryData();', 'data.original = defensiveCopyExchangeIfNeeded(exchange);', 'while (true) {', 'if (!isRunAllowed(data)) {']
['run not allowed will reject executing exchange ', ['exchange']]
camel sample_4530

['}', 'if (data.redeliveryCounter > 0) {', 'data.redeliveryDelay = determineRedeliveryDelay(exchange, data.currentRedeliveryPolicy, data.redeliveryDelay, data.redeliveryCounter);', 'if (data.redeliveryDelay > 0) {', 'if (data.currentRedeliveryPolicy.isAsyncDelayedRedelivery() && !exchange.isTransacted()) {', 'ObjectHelper.notNull(executorService, "Redelivery is enabled but ExecutorService has not been configured.", this);', 'data.sync = false;', 'data.redeliverFromSync = true;', 'AsyncRedeliveryTask task = new AsyncRedeliveryTask(exchange, callback, data);', 'if (log.isTraceEnabled()) {']
['scheduling redelivery task to run in millis for exchangeid ', ['data', 'redeliverydelay', 'exchange', 'getexchangeid']]
camel sample_4530

['protected long determineRedeliveryDelay(Exchange exchange, RedeliveryPolicy redeliveryPolicy, long redeliveryDelay, int redeliveryCounter) {', 'Message message = exchange.getIn();', 'Long delay = message.getHeader(Exchange.REDELIVERY_DELAY, Long.class);', 'if (delay == null) {', 'delay = redeliveryPolicy.calculateRedeliveryDelay(redeliveryDelay, redeliveryCounter);']
['redelivery delay calculated as ', ['delay']]
camel sample_4530

['protected long determineRedeliveryDelay(Exchange exchange, RedeliveryPolicy redeliveryPolicy, long redeliveryDelay, int redeliveryCounter) {', 'Message message = exchange.getIn();', 'Long delay = message.getHeader(Exchange.REDELIVERY_DELAY, Long.class);', 'if (delay == null) {', 'delay = redeliveryPolicy.calculateRedeliveryDelay(redeliveryDelay, redeliveryCounter);', '} else {']
['redelivery delay is from message header ', ['delay', 'exchange', 'redelivery', 'delay']]
camel sample_4530

['protected void processAsyncErrorHandler(final Exchange exchange, final AsyncCallback callback, final RedeliveryData data) {', 'if (!isRunAllowed(data)) {']
['run not allowed will reject executing exchange ', ['exchange']]
camel sample_4530

['boolean isDeadLetterChannel = isDeadLetterChannel() && target == deadLetter;', 'deliverToFailureProcessor(target, isDeadLetterChannel, exchange, data, callback);', 'return;', '}', 'if (data.redeliveryCounter > 0) {', 'ObjectHelper.notNull(executorService, "Redelivery is enabled but ExecutorService has not been configured.", this);', 'AsyncRedeliveryTask task = new AsyncRedeliveryTask(exchange, callback, data);', 'data.redeliveryDelay = determineRedeliveryDelay(exchange, data.currentRedeliveryPolicy, data.redeliveryDelay, data.redeliveryCounter);', 'if (data.redeliveryDelay > 0) {', 'if (log.isTraceEnabled()) {']
['scheduling redelivery task to run in millis for exchangeid ', ['data', 'redeliverydelay', 'exchange', 'getexchangeid']]
camel sample_4530

['protected boolean isDone(Exchange exchange) {', 'boolean answer = isCancelledOrInterrupted(exchange);', 'if (!answer) {', 'answer = exchange.getException() == null || ExchangeHelper.isFailureHandled(exchange) || ExchangeHelper.isRedeliveryExhausted(exchange);', '}']
['is exchangeid done ', ['exchange', 'getexchangeid', 'answer']]
camel sample_4530

['protected boolean isCancelledOrInterrupted(Exchange exchange) {', 'boolean answer = false;', 'if (ExchangeHelper.isInterrupted(exchange)) {', 'exchange.setProperty(Exchange.ROUTE_STOP, Boolean.TRUE);', 'answer = true;', '}']
['is exchangeid interrupted ', ['exchange', 'getexchangeid', 'answer']]
camel sample_4530

['data.handledPredicate = exceptionPolicy.getHandledPolicy();', 'data.continuedPredicate = exceptionPolicy.getContinuedPolicy();', 'data.retryWhilePredicate = exceptionPolicy.getRetryWhilePolicy();', 'data.useOriginalInMessage = exceptionPolicy.getUseOriginalMessagePolicy() != null && exceptionPolicy.getUseOriginalMessagePolicy();', 'Processor processor = null;', 'UnitOfWork uow = exchange.getUnitOfWork();', 'if (uow != null && uow.getRouteContext() != null) {', 'String routeId = uow.getRouteContext().getRoute().getId();', 'processor = exceptionPolicy.getErrorHandler(routeId);', '} else if (!exceptionPolicy.getErrorHandlers().isEmpty()) {']
['cannot determine current route from exchange with id will fallback and use first error handler ', ['exchange', 'getexchangeid']]
camel sample_4530

['protected void onExceptionOccurred(Exchange exchange, final RedeliveryData data) {', 'if (data.onExceptionProcessor == null) {', 'return;', '}', 'try {', 'if (log.isTraceEnabled()) {']
['onexceptionoccurred processor is processing exchange due exception occurred ', ['data', 'onexceptionprocessor', 'exchange']]
camel sample_4530

['protected void onExceptionOccurred(Exchange exchange, final RedeliveryData data) {', 'if (data.onExceptionProcessor == null) {', 'return;', '}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'data.onExceptionProcessor.process(exchange);', '} catch (Throwable e) {']
['error during processing onexceptionoccurred this exception is ignored ', ['e']]
camel sample_4530

['protected void onExceptionOccurred(Exchange exchange, final RedeliveryData data) {', 'if (data.onExceptionProcessor == null) {', 'return;', '}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'data.onExceptionProcessor.process(exchange);', '} catch (Throwable e) {', '}']
['onexceptionoccurred processor done ', []]
camel sample_4530

['protected void deliverToOnRedeliveryProcessor(final Exchange exchange, final RedeliveryData data) {', 'if (data.onRedeliveryProcessor == null) {', 'return;', '}', 'if (log.isTraceEnabled()) {']
['redelivery processor is processing exchange before its redelivered ', ['data', 'onredeliveryprocessor', 'exchange']]
camel sample_4530

['if (data.onRedeliveryProcessor == null) {', 'return;', '}', 'if (log.isTraceEnabled()) {', '}', 'try {', 'data.onRedeliveryProcessor.process(exchange);', '} catch (Throwable e) {', 'exchange.setException(e);', '}']
['redelivery processor done ', []]
camel sample_4530

['exchange.removeProperty(Exchange.REDELIVERY_EXHAUSTED);', 'exchange.removeProperty(Exchange.ROLLBACK_ONLY);', 'exchange.removeProperty(Exchange.UNIT_OF_WORK_EXHAUSTED);', 'handled = true;', '} else {', 'decrementRedeliveryCounter(exchange);', '}', 'boolean allowFailureProcessor = !shouldContinue || !isDeadLetterChannel;', 'if (allowFailureProcessor && processor != null) {', 'if (data.useOriginalInMessage) {']
['using the original in message instead of current ', []]
camel sample_4530

['handled = true;', '} else {', 'decrementRedeliveryCounter(exchange);', '}', 'boolean allowFailureProcessor = !shouldContinue || !isDeadLetterChannel;', 'if (allowFailureProcessor && processor != null) {', 'if (data.useOriginalInMessage) {', 'Message original = ExchangeHelper.getOriginalInMessage(exchange);', 'exchange.setIn(original);', 'if (exchange.hasOut()) {']
['removing the out message to avoid some uncertain behavior ', []]
camel sample_4530

['if (data.useOriginalInMessage) {', 'Message original = ExchangeHelper.getOriginalInMessage(exchange);', 'exchange.setIn(original);', 'if (exchange.hasOut()) {', 'exchange.setOut(null);', '}', '}', 'MessageHelper.resetStreamCache(exchange.getIn());', 'if (onPrepareProcessor != null) {', 'try {']
['onprepare processor is processing exchange ', ['onprepareprocessor', 'exchange']]
camel sample_4530

['}', '}', 'MessageHelper.resetStreamCache(exchange.getIn());', 'if (onPrepareProcessor != null) {', 'try {', 'onPrepareProcessor.process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', '}']
['failure processor is processing exchange ', ['processor', 'exchange']]
camel sample_4530

['exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));', 'UnitOfWork uow = exchange.getUnitOfWork();', 'if (uow != null && uow.getRouteContext() != null) {', 'exchange.setProperty(Exchange.FAILURE_ROUTE_ID, uow.getRouteContext().getRoute().getId());', '}', 'final boolean deadLetterChannel = processor == deadLetter;', 'EventHelper.notifyExchangeFailureHandling(exchange.getContext(), exchange, processor, deadLetterChannel, deadLetterUri);', 'AsyncProcessor afp = AsyncProcessorConverterHelper.convert(processor);', 'sync = afp.process(exchange, new AsyncCallback() {', 'public void done(boolean sync) {']
['failure processor done processing exchange ', ['processor', 'exchange']]
camel sample_4530

['} finally {', 'data.sync &= sync;', 'callback.done(data.sync);', '}', '}', '});', '} else {', 'try {', 'if (onPrepareProcessor != null) {', 'try {']
['onprepare processor is processing exchange ', ['onprepareprocessor', 'exchange']]
camel sample_4530

['protected void prepareExchangeAfterFailure(final Exchange exchange, final RedeliveryData data, final boolean isDeadLetterChannel, final boolean shouldHandle, final boolean shouldContinue) {', 'Exception newException = exchange.getException();', 'ExchangeHelper.setFailureHandled(exchange);', 'boolean alreadySet = exchange.getProperty(Exchange.ERRORHANDLER_HANDLED) != null;', 'if (alreadySet) {', 'boolean handled = exchange.getProperty(Exchange.ERRORHANDLER_HANDLED, Boolean.class);']
['this exchange has already been marked for handling ', ['handled']]
camel sample_4530

['boolean alreadySet = exchange.getProperty(Exchange.ERRORHANDLER_HANDLED) != null;', 'if (alreadySet) {', 'boolean handled = exchange.getProperty(Exchange.ERRORHANDLER_HANDLED, Boolean.class);', 'if (!handled) {', 'exchange.setException(exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class));', 'exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));', '}', 'return;', '}', 'if (shouldContinue) {']
['this exchange is continued ', ['exchange']]
camel sample_4530

['boolean handled = exchange.getProperty(Exchange.ERRORHANDLER_HANDLED, Boolean.class);', 'if (!handled) {', 'exchange.setException(exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class));', 'exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));', '}', 'return;', '}', 'if (shouldContinue) {', 'prepareExchangeForContinue(exchange, data, isDeadLetterChannel);', '} else if (shouldHandle) {']
['this exchange is handled so its marked as not failed ', ['exchange']]
camel sample_4530

['String uri = URISupport.sanitizeUri(deadLetterUri);', 'String msg = "New exception occurred during processing by the DeadLetterChannel[" + uri + "] due " + newException.getMessage();', 'if (handled) {', 'msg += ". The new exception is being handled as deadLetterHandleNewException=true.";', '} else {', 'msg += ". The new exception is not handled as deadLetterHandleNewException=false.";', '}', 'logFailedDelivery(false, true, handled, false, true, exchange, msg, data, newException);', '}', 'if (handled) {']
['this exchange is handled so its marked as not failed ', ['exchange']]
camel sample_4530

['private void prepareExchangeAfterFailureNotHandled(Exchange exchange) {']
['this exchange is not handled or continued so its marked as failed ', ['exchange']]
camel sample_4530

['private boolean isExhausted(Exchange exchange, RedeliveryData data) {', 'boolean exhausted = exchange.getProperty(Exchange.REDELIVERY_EXHAUSTED, false, Boolean.class);', 'if (exhausted) {']
['this exchange is marked as redelivery exhausted ', ['exchange']]
camel sample_4530

['private boolean isExhausted(Exchange exchange, RedeliveryData data) {', 'boolean exhausted = exchange.getProperty(Exchange.REDELIVERY_EXHAUSTED, false, Boolean.class);', 'if (exhausted) {', 'return true;', '}', 'boolean rollbackOnly = exchange.getProperty(Exchange.ROLLBACK_ONLY, false, Boolean.class);', 'if (rollbackOnly) {']
['this exchange is marked as rollback only so forcing it to be exhausted ', ['exchange']]
camel sample_4530

['protected void doStart() throws Exception {', 'ServiceHelper.startServices(output, outputAsync, deadLetter);', 'redeliveryEnabled = determineIfRedeliveryIsEnabled();', 'if (log.isTraceEnabled()) {']
['redelivery enabled on error handler ', ['redeliveryenabled', 'this']]
camel sample_4530

['protected void doStart() throws Exception {', 'ServiceHelper.startServices(output, outputAsync, deadLetter);', 'redeliveryEnabled = determineIfRedeliveryIsEnabled();', 'if (log.isTraceEnabled()) {', '}', 'if (redeliveryEnabled) {', 'if (executorService == null) {', 'executorService = camelContext.getErrorHandlerExecutorService();', '}', 'if (log.isDebugEnabled()) {']
['using executorservice for redeliveries on error handler ', ['executorservice', 'this']]
camel sample_4530

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MySimpleRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelSimpleExpressions(method);', 'for (ParserResult simple : list) {']
['simple ', ['simple', 'getelement']]
camel sample_205

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MySimpleRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelSimpleExpressions(method);', 'for (ParserResult simple : list) {']
['line ', ['findlinenumber', 'simple', 'getposition']]
camel sample_205

['TwitterMentionComponent connector = new TwitterMentionComponent();', 'connector.setCamelContext(camelContext);', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<TwitterMentionComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-mention.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-mention.customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_25

['TwitterMentionComponent connector = new TwitterMentionComponent( entry.getKey());', 'connector.setCamelContext(camelContext);', 'try {', 'IntrospectionSupport.getProperties(entry.getValue(), parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<TwitterMentionComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-mention." + entry.getKey() + ".customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-mention." + entry.getKey() + ".customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_25

['public void afterTest() {', 'try {', 'camelContext.stopRoute(CamelTestConfiguration.SIMPLE_ROUTE_ID);', '} catch (Exception e) {']
['exception trying to stop de routes ', ['e']]
camel sample_12766

['private void sendAcknowledgement(byte[] originalHl7MessageBytes, Exchange exchange) {']
['entering sendacknowledgement byte exchange ', []]
camel sample_13874

['final byte bM = 77;', 'final byte bS = 83;', 'final byte bA = 65;', 'final byte bE = 69;', 'final byte bR = 82;', 'final byte fieldSeparator = originalHl7MessageBytes[3];', 'for (int i = 0; i < originalHl7MessageBytes.length; ++i) {', 'if (MllpProtocolConstants.SEGMENT_DELIMITER == i) {', 'if (i + 7 < originalHl7MessageBytes.length && bM == originalHl7MessageBytes[i + 1] && bS == originalHl7MessageBytes[i + 2] && bA == originalHl7MessageBytes[i + 3] && fieldSeparator == originalHl7MessageBytes[i + 4]) {', 'if (fieldSeparator != originalHl7MessageBytes[i + 7]) {']
['msa is longer than bytes ignoring trailing bytes ', []]
camel sample_13874

['acknowledgmentTypeBytes[0] = originalHl7MessageBytes[i + 5];', 'acknowledgmentTypeBytes[1] = originalHl7MessageBytes[i + 6];', 'try {', 'acknowledgementMessageType = IOConverter.toString(acknowledgmentTypeBytes, exchange);', '} catch (IOException ioEx) {', 'throw new RuntimeException("Failed to convert acknowledgement message to string", ioEx);', '}', 'if (bA != acknowledgmentTypeBytes[0]) {', 'switch (acknowledgementMessageBytes[1]) {', 'case bA: case bR: case bE: break;']
['invalid acknowledgement type found in message should be aa ae or ar ', ['acknowledgementmessagetype']]
camel sample_13874

['} catch (IOException ioEx) {', 'throw new RuntimeException("Failed to convert acknowledgement message to string", ioEx);', '}', 'if (bA != acknowledgmentTypeBytes[0]) {', 'switch (acknowledgementMessageBytes[1]) {', 'case bA: case bR: case bE: break;', '}', '}', 'String acknowledgementTypeProperty = exchange.getProperty(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, String.class);', 'if (null != acknowledgementTypeProperty && !acknowledgementTypeProperty.equals(acknowledgementMessageType)) {']
['acknowledgement type found in message does not match exchange property value using value found in message ', ['acknowledgementmessagetype', 'mllpconstants', 'mllp', 'acknowledgement', 'type', 'acknowledgementtypeproperty']]
camel sample_13874

['}', '}', 'Message message = exchange.hasOut() ? exchange.getOut() : exchange.getIn();', 'if (acknowledgementMessageType != null && !acknowledgementMessageType.isEmpty()) {', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, acknowledgementMessageType);', '}', 'if (mllpBuffer.hasCompleteEnvelope()) {', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT, mllpBuffer.toMllpPayload());', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, mllpBuffer.toHl7String(IOHelper.getCharsetName(exchange, false)));', 'if (log.isDebugEnabled()) {']
['sending acknowledgement ', ['mllpbuffer']]
camel sample_13874

['mllpBuffer.reset();', '}', '} else if (acknowledgementMessageBytes != null && acknowledgementMessageBytes.length > 0) {', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT, acknowledgementMessageBytes);', 'String acknowledgementMessageString = "";', 'String exchangeCharset = IOHelper.getCharsetName(exchange, false);', 'if (exchangeCharset != null && !exchangeCharset.isEmpty()) {', 'try {', 'acknowledgementMessageString = new String(acknowledgementMessageBytes, exchangeCharset);', '} catch (UnsupportedEncodingException e) {']
['failed to covert acknowledgment to string using charset falling back to default charset ', ['exchange', 'mllpprotocolconstants', 'default', 'charset']]
camel sample_13874

['try {', 'acknowledgementMessageString = new String(acknowledgementMessageBytes, exchangeCharset);', '} catch (UnsupportedEncodingException e) {', 'acknowledgementMessageString = new String(acknowledgementMessageBytes, MllpProtocolConstants.DEFAULT_CHARSET);', '}', '} else {', 'acknowledgementMessageString = new String(acknowledgementMessageBytes, MllpProtocolConstants.DEFAULT_CHARSET);', '}', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, acknowledgementMessageString);', 'if (log.isDebugEnabled()) {']
['sending acknowledgement ', ['converttoprintfriendlystring', 'acknowledgementmessagebytes']]
camel sample_13874

['fieldSeparatorIndexes.add(i);', '} else if (MllpProtocolConstants.SEGMENT_DELIMITER == hl7MessageBytes[i]) {', 'if (fieldSeparator != hl7MessageBytes[i - 1]) {', 'fieldSeparatorIndexes.add(i);', '}', 'endOfMSH = i;', 'break;', '}', '}', 'if (-1 == endOfMSH) {']
['population of message headers failed unable to find the end of the msh segment ', []]
camel sample_13874

['} else if (MllpProtocolConstants.SEGMENT_DELIMITER == hl7MessageBytes[i]) {', 'if (fieldSeparator != hl7MessageBytes[i - 1]) {', 'fieldSeparatorIndexes.add(i);', '}', 'endOfMSH = i;', 'break;', '}', '}', 'if (-1 == endOfMSH) {', '} else if (consumer.getConfiguration().isHl7Headers()) {']
['populating the message headers ', []]
camel sample_13874

['String componentSeparator = new String(hl7MessageBytes, 4, 1, charset);', 'String[] components = headerValue.split(String.format("\\\\Q%s\\\\E", componentSeparator), 3);', 'message.setHeader(MllpConstants.MLLP_EVENT_TYPE, components[0]);', 'if (2 <= components.length) {', 'message.setHeader(MllpConstants.MLLP_TRIGGER_EVENT, components[1]);', '}', '}', '}', '}', '} else {']
['message headers disabled ', []]
camel sample_13874

['String originalThreadName = Thread.currentThread().getName();', 'Thread.currentThread().setName(createThreadName(clientSocket));', 'MDC.put(MDCUnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName());', 'Route route = consumer.getRoute();', 'if (route != null) {', 'String routeId = route.getId();', 'if (routeId != null) {', 'MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId());', '}', '}']
['starting for ', ['this', 'getclass', 'getsimplename', 'combinedaddress']]
camel sample_13874

['Route route = consumer.getRoute();', 'if (route != null) {', 'String routeId = route.getId();', 'if (routeId != null) {', 'MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId());', '}', '}', 'try {', 'while (running && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'byte[] hl7MessageBytes = null;']
['checking for data ', []]
camel sample_13874

['MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId());', '}', '}', 'try {', 'while (running && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'byte[] hl7MessageBytes = null;', 'try {', 'mllpBuffer.readFrom(clientSocket);', 'if (mllpBuffer.hasCompleteEnvelope()) {', 'hl7MessageBytes = mllpBuffer.toMllpPayload();']
['received byte message ', ['length', 'converttoprintfriendlystring']]
camel sample_13874

['}', '}', 'try {', 'while (running && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'byte[] hl7MessageBytes = null;', 'try {', 'mllpBuffer.readFrom(clientSocket);', 'if (mllpBuffer.hasCompleteEnvelope()) {', 'hl7MessageBytes = mllpBuffer.toMllpPayload();', 'if (mllpBuffer.hasLeadingOutOfBandData()) {']
['ignoring leading out of band data ', ['converttoprintfriendlystring', 'mllpbuffer', 'getleadingoutofbanddata']]
camel sample_13874

['try {', 'while (running && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'byte[] hl7MessageBytes = null;', 'try {', 'mllpBuffer.readFrom(clientSocket);', 'if (mllpBuffer.hasCompleteEnvelope()) {', 'hl7MessageBytes = mllpBuffer.toMllpPayload();', 'if (mllpBuffer.hasLeadingOutOfBandData()) {', '}', 'if (mllpBuffer.hasTrailingOutOfBandData()) {']
['ignoring trailing out of band data ', ['converttoprintfriendlystring', 'mllpbuffer', 'gettrailingoutofbanddata']]
camel sample_13874

['if (mllpBuffer.hasCompleteEnvelope()) {', 'hl7MessageBytes = mllpBuffer.toMllpPayload();', 'if (mllpBuffer.hasLeadingOutOfBandData()) {', '}', 'if (mllpBuffer.hasTrailingOutOfBandData()) {', '}', 'mllpBuffer.reset();', 'processMessage(hl7MessageBytes);', '} else if (!mllpBuffer.hasStartOfBlock()) {', 'byte[] payload = mllpBuffer.toByteArray();']
['ignoring byte un enveloped payload ', ['payload', 'length', 'converttoprintfriendlystring', 'payload']]
camel sample_13874

['}', 'if (mllpBuffer.hasTrailingOutOfBandData()) {', '}', 'mllpBuffer.reset();', 'processMessage(hl7MessageBytes);', '} else if (!mllpBuffer.hasStartOfBlock()) {', 'byte[] payload = mllpBuffer.toByteArray();', 'mllpBuffer.reset();', '} else if (!mllpBuffer.isEmpty()) {', 'byte[] payload = mllpBuffer.toByteArray();']
['partial byte payload received ', ['payload', 'length', 'converttoprintfriendlystring', 'payload']]
camel sample_13874

['} catch (SocketTimeoutException timeoutEx) {', 'if (mllpBuffer.isEmpty()) {', 'if (consumer.getConfiguration().hasIdleTimeout()) {', 'long currentTicks = System.currentTimeMillis();', 'long lastReceivedMessageTicks = consumer.getConsumerRunnables().get(this);', 'long idleTime = currentTicks - lastReceivedMessageTicks;', 'if (idleTime >= consumer.getConfiguration().getIdleTimeout()) {', 'consumer.getEndpoint().doConnectionClose(clientSocket, true, log);', '}', '}']
['no data received ignoring timeout ', []]
camel sample_13874

['long idleTime = currentTicks - lastReceivedMessageTicks;', 'if (idleTime >= consumer.getConfiguration().getIdleTimeout()) {', 'consumer.getEndpoint().doConnectionClose(clientSocket, true, log);', '}', '}', '} else {', 'mllpBuffer.resetSocket(clientSocket);', 'if (consumer.getEndpoint().isBridgeErrorHandler()) {', 'Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut);', 'exchange.setException(new MllpInvalidMessageException("Timeout receiving complete payload", mllpBuffer.toByteArray()));']
['exception encountered reading payload sending exception to route ', ['exchange', 'getexception']]
camel sample_13874

['}', '}', '} else {', 'mllpBuffer.resetSocket(clientSocket);', 'if (consumer.getEndpoint().isBridgeErrorHandler()) {', 'Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut);', 'exchange.setException(new MllpInvalidMessageException("Timeout receiving complete payload", mllpBuffer.toByteArray()));', 'try {', 'consumer.getProcessor().process(exchange);', '} catch (Exception e) {']
['exception encountered processing exchange with exception encounter reading payload ', ['e']]
camel sample_13874

['} else {', 'mllpBuffer.resetSocket(clientSocket);', 'if (consumer.getEndpoint().isBridgeErrorHandler()) {', 'Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut);', 'exchange.setException(new MllpInvalidMessageException("Timeout receiving complete payload", mllpBuffer.toByteArray()));', 'try {', 'consumer.getProcessor().process(exchange);', '} catch (Exception e) {', '}', '} else {']
['timeout receiving complete payload timeout receiving complete payload ', ['new', 'mllpinvalidmessageexception', 'mllpbuffer', 'tobytearray', 'timeoutex']]
camel sample_13874

['} else {', '}', '}', '} catch (MllpSocketException mllpSocketEx) {', 'if (!mllpBuffer.isEmpty()) {', 'Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut);', 'exchange.setException(new MllpReceiveException("Exception encountered reading payload", mllpBuffer.toByteArrayAndReset(), mllpSocketEx));', 'try {', 'consumer.getProcessor().process(exchange);', '} catch (Exception ignoredEx) {']
['ingnoring exception encountered processing exchange with exception encounter reading payload ', ['ignoredex']]
camel sample_13874

['}', '} catch (MllpSocketException mllpSocketEx) {', 'if (!mllpBuffer.isEmpty()) {', 'Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut);', 'exchange.setException(new MllpReceiveException("Exception encountered reading payload", mllpBuffer.toByteArrayAndReset(), mllpSocketEx));', 'try {', 'consumer.getProcessor().process(exchange);', '} catch (Exception ignoredEx) {', '}', '} else {']
['ignoring exception encountered checking for data ', ['mllpsocketex']]
camel sample_13874

['exchange.setException(new MllpReceiveException("Exception encountered reading payload", mllpBuffer.toByteArrayAndReset(), mllpSocketEx));', 'try {', 'consumer.getProcessor().process(exchange);', '} catch (Exception ignoredEx) {', '}', '} else {', '}', '}', '}', '} catch (Exception unexpectedEx) {']
['unexpected exception encountered receiving messages ', ['unexpectedex']]
camel sample_13874

['consumer.getProcessor().process(exchange);', '} catch (Exception ignoredEx) {', '}', '} else {', '}', '}', '}', '} catch (Exception unexpectedEx) {', '} finally {', 'consumer.getConsumerRunnables().remove(this);']
['for completed ', ['this', 'getclass', 'getsimplename', 'combinedaddress']]
camel sample_13874

['priority = this.getPriority();', '}', 'int deliveryMode;', 'if (JmsMessageHelper.hasProperty(message, JmsConstants.JMS_DELIVERY_MODE)) {', 'deliveryMode = message.getIntProperty(JmsConstants.JMS_DELIVERY_MODE);', 'JmsMessageHelper.removeJmsProperty(message, JmsConstants.JMS_DELIVERY_MODE);', '} else {', 'deliveryMode = message.getJMSDeliveryMode();', '}', 'if (LOG.isDebugEnabled()) {']
['sending jms message to with message ', ['producer', 'getdestination', 'message']]
camel sample_7170

['deliveryMode = message.getIntProperty(JmsConstants.JMS_DELIVERY_MODE);', 'JmsMessageHelper.removeJmsProperty(message, JmsConstants.JMS_DELIVERY_MODE);', '} else {', 'deliveryMode = message.getJMSDeliveryMode();', '}', 'if (LOG.isDebugEnabled()) {', '}', 'producer.send(message, deliveryMode, priority, ttl);', '} else {', 'if (LOG.isDebugEnabled()) {']
['sending jms message to with message ', ['producer', 'getdestination', 'message']]
camel sample_7170

['deliveryMode = message.getJMSDeliveryMode();', '}', 'if (LOG.isDebugEnabled()) {', '}', 'producer.send(message, deliveryMode, priority, ttl);', '} else {', 'if (LOG.isDebugEnabled()) {', '}', 'super.doSend(producer, message);', 'if (LOG.isTraceEnabled()) {']
['sent jms message to with message ', ['producer', 'getdestination', 'message']]
camel sample_7170

['public JmsOperations createInOnlyTemplate(JmsEndpoint endpoint, boolean pubSubDomain, String destination) {', 'if (jmsOperations != null) {', 'return jmsOperations;', '}', 'ConnectionFactory factory = getTemplateConnectionFactory();', 'JmsTemplate template = new CamelJmsTemplate(this, factory);', 'template.setPubSubDomain(pubSubDomain);', 'if (destinationResolver != null) {', 'template.setDestinationResolver(destinationResolver);', 'if (endpoint instanceof DestinationEndpoint) {']
['you are overloading the destinationresolver property on a destinationendpoint are you sure you want to do that ', []]
camel sample_7170

['protected int poll() throws Exception {', 'final Exchange exchange = this.getEndpoint().createExchange();', 'if (firstRun) {', 'this.query.setStartTime(System.currentTimeMillis());', '} else {', 'this.query.setStartTime(System.currentTimeMillis() - getDelay());', '}', 'final Result result = query.execute();']
['processing exchange ', ['exchange']]
camel sample_12273

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ElasticsearchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_593

['public void notify(EventObject event) throws Exception {', 'if (notificationBroadcaster != null) {', 'String type = event.getClass().getSimpleName();', 'String message = event.toString();', 'Notification notification = new Notification(type, source, counter.getAndIncrement(), message);']
['broadcasting jmx notification ', ['notification']]
camel sample_4588

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<XmlJsonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmljson.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmljson.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_747

['public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'List<String> result = null;', 'exchange.setOut(exchange.getIn());', 'if (ObjectHelper.isEmpty(body)) {', 'exchange.getOut().setBody("");', '} else if (body.startsWith(LDIF_HEADER)) {']
['reading from ldif body ', []]
camel sample_8051

['List<String> result = null;', 'exchange.setOut(exchange.getIn());', 'if (ObjectHelper.isEmpty(body)) {', 'exchange.getOut().setBody("");', '} else if (body.startsWith(LDIF_HEADER)) {', 'result = processLdif(new StringReader(body));', '} else {', 'URL loc;', 'try {', 'loc = new URL(body);']
['reading from url ', ['loc']]
camel sample_8051

['exchange.getOut().setBody("");', '} else if (body.startsWith(LDIF_HEADER)) {', 'result = processLdif(new StringReader(body));', '} else {', 'URL loc;', 'try {', 'loc = new URL(body);', 'result = processLdif(new InputStreamReader(loc.openStream()));', '} catch (MalformedURLException e) {', 'if (log.isDebugEnabled()) {']
['failed to parse body as url and ldif ', ['e']]
camel sample_8051

['private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {', 'try {', 'if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {', 'if (log.isDebugEnabled()) {']
['attempting add of ', ['ldifentry', 'tostring']]
camel sample_8051

['private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {', 'try {', 'if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.add(ldifEntry.getEntry());', '} else if (ldifEntry.isChangeModify()) {', 'if (log.isDebugEnabled()) {']
['attempting modify of ', ['ldifentry', 'tostring']]
camel sample_8051

['if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.add(ldifEntry.getEntry());', '} else if (ldifEntry.isChangeModify()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray());', '} else if (ldifEntry.isChangeDelete()) {', 'if (log.isDebugEnabled()) {']
['attempting delete of ', ['ldifentry', 'tostring']]
camel sample_8051

['} else if (ldifEntry.isChangeModify()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray());', '} else if (ldifEntry.isChangeDelete()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.delete(ldifEntry.getDn());', '} else if (ldifEntry.isChangeModDn()) {', 'if (log.isDebugEnabled()) {']
['attempting dn move of ', ['ldifentry', 'tostring']]
camel sample_8051

['} else if (ldifEntry.isChangeDelete()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.delete(ldifEntry.getDn());', '} else if (ldifEntry.isChangeModDn()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn());', '} else if (ldifEntry.isChangeModRdn()) {', 'if (log.isDebugEnabled()) {']
['attempting rdn move of ', ['ldifentry', 'tostring']]
camel sample_8051

['conn.delete(ldifEntry.getDn());', '} else if (ldifEntry.isChangeModDn()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn());', '} else if (ldifEntry.isChangeModRdn()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn());', '}']
['ldif success ', []]
camel sample_8051

['if (log.isDebugEnabled()) {', '}', 'conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn());', '} else if (ldifEntry.isChangeModRdn()) {', 'if (log.isDebugEnabled()) {', '}', 'conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn());', '}', 'return "success";', '} catch (LdapException e) {']
['failed to apply ldif ', ['e']]
camel sample_8051

['protected void runCamel(ClassLoader newLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {']
['running camel in ', ['newloader']]
camel sample_72

['protected void runCamel(ClassLoader newLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {', 'Class<?> type = newLoader.loadClass(mainClass);', 'Method method = type.getMethod("main", String[].class);', 'String[] arguments = createArguments();']
['starting the camel main with arguments ', ['arrays', 'aslist', 'arguments']]
camel sample_72

['public ClassLoader createClassLoader(ClassLoader parent) throws MalformedURLException {']
['using classpath ', ['classpathelements']]
camel sample_72

['public ClassLoader createClassLoader(ClassLoader parent) throws MalformedURLException {', 'int size = classpathElements.size();', 'URL[] urls = new URL[size];', 'for (int i = 0; i < size; i++) {', 'String name = (String) classpathElements.get(i);', 'File file = new File(name);', 'urls[i] = file.toURI().toURL();']
['url ', ['urls', 'i']]
camel sample_72

['public void setUp() throws Exception {', 'byte[] utf = payload.getBytes("utf-8");', 'byte[] iso = payload.getBytes("iso-8859-1");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_15277

['public void setUp() throws Exception {', 'byte[] utf = payload.getBytes("utf-8");', 'byte[] iso = payload.getBytes("iso-8859-1");']
['iso iso ', ['new', 'string', 'iso', 'charset', 'forname']]
camel sample_15277

['public void setUp() throws Exception {', 'byte[] utf = payload.getBytes("utf-8");', 'byte[] iso = payload.getBytes("iso-8859-1");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_15277

['public void setUp() throws Exception {', 'byte[] utf = payload.getBytes("utf-8");', 'byte[] iso = payload.getBytes("iso-8859-1");', 'for (byte b : utf) {', '}', 'for (byte b : iso) {']
['iso byte ', ['b']]
camel sample_15277

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ASN1DataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.asn1.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.asn1.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_602

['}', '}', '}', 'if (methodInfo == null && methodMap.size() >= 2) {', 'methodInfo = chooseMethod(pojo, exchange, null);', '}', 'if (methodInfo == null) {', 'methodInfo = defaultMethod;', '}', 'if (methodInfo != null) {']
['chosen method to invoke on bean ', ['methodinfo', 'pojo']]
camel sample_4834

['}', 'if (methodInfo == null && methodMap.size() >= 2) {', 'methodInfo = chooseMethod(pojo, exchange, null);', '}', 'if (methodInfo == null) {', 'methodInfo = defaultMethod;', '}', 'if (methodInfo != null) {', 'return methodInfo.createMethodInvocation(pojo, methodInfo.hasParameters(), exchange);', '}']
['cannot find suitable method to invoke on bean ', ['pojo']]
camel sample_4834

['private void introspect(Class<?> clazz) {', 'publicConstructors = clazz.getConstructors().length > 0;', 'MethodsFilter methods = new MethodsFilter(getType());', 'introspect(clazz, methods);', 'for (Method method : methods.asReadOnlyList()) {', 'boolean valid = isValidMethod(clazz, method);']
['method is valid ', ['method', 'valid']]
camel sample_4834

['private void introspect(Class<?> clazz, MethodsFilter filteredMethods) {', 'clazz = getTargetClass(clazz);', 'ObjectHelper.notNull(clazz, "clazz", this);']
['introspecting class ', ['clazz']]
camel sample_4834

['private MethodInfo introspect(Class<?> clazz, Method method) {']
['introspecting class method ', ['clazz', 'method']]
camel sample_4834

['private MethodInfo introspect(Class<?> clazz, Method method) {', 'String opName = method.getName();', 'MethodInfo methodInfo = createMethodInfo(clazz, method);', 'MethodInfo existingMethodInfo = findMostSpecificOverride(methodInfo);', 'if (existingMethodInfo != null) {']
['this method is already overridden in a subclass so the method from the sub class is preferred ', ['existingmethodinfo']]
camel sample_4834

['private MethodInfo introspect(Class<?> clazz, Method method) {', 'String opName = method.getName();', 'MethodInfo methodInfo = createMethodInfo(clazz, method);', 'MethodInfo existingMethodInfo = findMostSpecificOverride(methodInfo);', 'if (existingMethodInfo != null) {', 'return existingMethodInfo;', '}']
['adding operation for method ', ['opname', 'methodinfo']]
camel sample_4834

['protected MethodInfo createMethodInfo(Class<?> clazz, Method method) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'List<Annotation>[] parametersAnnotations = collectParameterAnnotations(clazz, method);', 'List<ParameterInfo> parameters = new ArrayList<ParameterInfo>();', 'List<ParameterInfo> bodyParameters = new ArrayList<ParameterInfo>();', 'boolean hasCustomAnnotation = false;', 'boolean hasHandlerAnnotation = ObjectHelper.hasAnnotation(method.getAnnotations(), Handler.class);', 'int size = parameterTypes.length;', 'if (LOG.isTraceEnabled()) {']
['creating methodinfo for class method having parameters ', ['new', 'object', 'clazz', 'method', 'size']]
camel sample_4834

['boolean hasHandlerAnnotation = ObjectHelper.hasAnnotation(method.getAnnotations(), Handler.class);', 'int size = parameterTypes.length;', 'if (LOG.isTraceEnabled()) {', '}', 'for (int i = 0; i < size; i++) {', 'Class<?> parameterType = parameterTypes[i];', 'Annotation[] parameterAnnotations = parametersAnnotations[i].toArray(new Annotation[parametersAnnotations[i].size()]);', 'Expression expression = createParameterUnmarshalExpression(clazz, method, parameterType, parameterAnnotations);', 'hasCustomAnnotation |= expression != null;', 'ParameterInfo parameterInfo = new ParameterInfo(i, parameterType, parameterAnnotations, expression);']
['parameter ', ['i', 'parameterinfo']]
camel sample_4834

['}', 'for (int i = 0; i < size; i++) {', 'Class<?> parameterType = parameterTypes[i];', 'Annotation[] parameterAnnotations = parametersAnnotations[i].toArray(new Annotation[parametersAnnotations[i].size()]);', 'Expression expression = createParameterUnmarshalExpression(clazz, method, parameterType, parameterAnnotations);', 'hasCustomAnnotation |= expression != null;', 'ParameterInfo parameterInfo = new ParameterInfo(i, parameterType, parameterAnnotations, expression);', 'parameters.add(parameterInfo);', 'if (expression == null) {', 'boolean bodyAnnotation = ObjectHelper.hasAnnotation(parameterAnnotations, Body.class);']
['parameter has body annotation ', ['i']]
camel sample_4834

['parameters.add(parameterInfo);', 'if (expression == null) {', 'boolean bodyAnnotation = ObjectHelper.hasAnnotation(parameterAnnotations, Body.class);', 'hasCustomAnnotation |= bodyAnnotation;', 'if (bodyParameters.isEmpty()) {', 'if (Exchange.class.isAssignableFrom(parameterType)) {', 'expression = ExpressionBuilder.exchangeExpression();', '} else {', 'expression = ExpressionBuilder.mandatoryBodyExpression(parameterType, true);', '}']
['parameter is the body parameter using expression ', ['i', 'expression']]
camel sample_4834

['if (Exchange.class.isAssignableFrom(parameterType)) {', 'expression = ExpressionBuilder.exchangeExpression();', '} else {', 'expression = ExpressionBuilder.mandatoryBodyExpression(parameterType, true);', '}', 'parameterInfo.setExpression(expression);', 'bodyParameters.add(parameterInfo);', '} else {', '}', '}']
['parameter has parameter info ', ['i', 'parameterinfo']]
camel sample_4834

['possibleOperations.addAll(localOperationsWithBody);', '}', 'if (localOperationsWithCustomAnnotation != null) {', 'possibleOperations.addAll(localOperationsWithCustomAnnotation);', '}', 'if (!possibleOperations.isEmpty()) {', 'MethodInfo answer = null;', 'if (name != null) {', 'String parameters = StringHelper.between(name, "(", ")");', 'if (parameters != null) {']
['choosing best matching method matching parameters ', ['parameters']]
camel sample_4834

['boolean matches = true;', 'while (it.hasNext()) {', 'String parameter = (String) it.next();', 'if (parameter != null) {', 'parameter = parameter.trim();', '}', 'Class<?> parameterType = BeanHelper.getValidParameterType(parameter);', 'Class<?> expectedType = info.getParameters().get(index).getType();', 'if (parameterType != null && expectedType != null) {', 'if (StringHelper.hasStartToken(parameter, "simple")) {']
['evaluating simple expression for parameter to determine the class type of the parameter ', ['index', 'parameter']]
camel sample_4834

['private MethodInfo chooseMethodWithMatchingBody(Exchange exchange, Collection<MethodInfo> operationList, List<MethodInfo> operationsWithCustomAnnotation) throws AmbiguousMethodCallException {', 'Message in = exchange.getIn();', 'Object body = in.getBody();', 'if (body != null) {', 'Class<?> bodyType = body.getClass();', 'if (LOG.isTraceEnabled()) {']
['matching for method with a single parameter that matches type ', ['bodytype', 'getcanonicalname']]
camel sample_4834

['if (LOG.isTraceEnabled()) {', '}', 'List<MethodInfo> possibles = new ArrayList<>();', 'List<MethodInfo> possiblesWithException = null;', 'for (MethodInfo methodInfo : operationList) {', 'boolean out = exchange.getPattern().isOutCapable();', 'if (out && methodInfo.isReturnTypeVoid()) {', 'continue;', '}', 'if (methodInfo.bodyParameterMatches(bodyType)) {']
['found a possible method ', ['methodinfo']]
camel sample_4834

['private MethodInfo chooseBestPossibleMethodInfo(Exchange exchange, Collection<MethodInfo> operationList, Object body, List<MethodInfo> possibles, List<MethodInfo> possiblesWithException, List<MethodInfo> possibleWithCustomAnnotation) throws AmbiguousMethodCallException {', 'Exception exception = ExpressionBuilder.exchangeExceptionExpression().evaluate(exchange, Exception.class);', 'if (exception != null && possiblesWithException != null && possiblesWithException.size() == 1) {']
['exchange has exception set so we prefer method that also has exception as parameter ', []]
camel sample_4834

['private MethodInfo chooseBestPossibleMethodInfo(Exchange exchange, Collection<MethodInfo> operationList, Object body, List<MethodInfo> possibles, List<MethodInfo> possiblesWithException, List<MethodInfo> possibleWithCustomAnnotation) throws AmbiguousMethodCallException {', 'Exception exception = ExpressionBuilder.exchangeExceptionExpression().evaluate(exchange, Exception.class);', 'if (exception != null && possiblesWithException != null && possiblesWithException.size() == 1) {', 'return possiblesWithException.get(0);', '} else if (possibles.size() == 1) {', 'return possibles.get(0);', '} else if (possibles.isEmpty()) {']
['no possible methods so now trying to convert body to parameter types ', []]
camel sample_4834

['MethodInfo matched = null;', 'int matchCounter = 0;', 'for (MethodInfo methodInfo : operationList) {', 'if (methodInfo.getBodyParameterType() != null) {', 'if (methodInfo.getBodyParameterType().isInstance(body)) {', 'return methodInfo;', '}', 'Object value = exchange.getContext().getTypeConverter().tryConvertTo(methodInfo.getBodyParameterType(), exchange, body);', 'if (value != null) {', 'if (LOG.isTraceEnabled()) {']
['converted body from to ', ['body', 'getclass', 'getcanonicalname', 'methodinfo', 'getbodyparametertype', 'getcanonicalname']]
camel sample_4834

['matchCounter++;', 'newBody = value;', 'matched = methodInfo;', '}', '}', '}', 'if (matchCounter > 1) {', 'throw new AmbiguousMethodCallException(exchange, Arrays.asList(matched, matched));', '}', 'if (matched != null) {']
['setting converted body ', ['body']]
camel sample_4834

['throw new AmbiguousMethodCallException(exchange, Arrays.asList(matched, matched));', '}', 'if (matched != null) {', 'Message in = exchange.getIn();', 'in.setBody(newBody);', 'return matched;', '}', '} else {', 'if (possibleWithCustomAnnotation != null && possibleWithCustomAnnotation.size() == 1) {', 'MethodInfo answer = possibleWithCustomAnnotation.get(0);']
['there are only one method with annotations so we choose it ', ['answer']]
camel sample_4834

['return ExpressionBuilder.convertToExpression(inject, parameterType);', '} else {', 'LanguageAnnotation languageAnnotation = annotation.annotationType().getAnnotation(LanguageAnnotation.class);', 'if (languageAnnotation != null) {', 'Class<?> type = languageAnnotation.factory();', 'Object object = camelContext.getInjector().newInstance(type);', 'if (object instanceof AnnotationExpressionFactory) {', 'AnnotationExpressionFactory expressionFactory = (AnnotationExpressionFactory) object;', 'return expressionFactory.createExpression(camelContext, annotation, languageAnnotation, parameterType);', '} else {']
['ignoring bad annotation on method which declares a factory which does not implement ', ['languageannotation', 'method', 'type', 'getname', 'annotationexpressionfactory', 'class', 'getname']]
camel sample_4834

['public void warning(SAXParseException e) throws SAXException {', 'if (LOG.isDebugEnabled()) {']
['validation warning ', ['e', 'e']]
camel sample_4567

['public void error(SAXParseException e) throws SAXException {', 'if (LOG.isDebugEnabled()) {']
['validation error ', ['e', 'e']]
camel sample_4567

['public void fatalError(SAXParseException e) throws SAXException {', 'if (LOG.isDebugEnabled()) {']
['validation fatalerror ', ['e', 'e']]
camel sample_4567

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SplunkComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.splunk.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.splunk.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_481

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JsonValidatorComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.json-validator.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.json-validator.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1159

['public void testConvertToDocument() throws Exception {', 'Document document = converter .convertTo(Document.class, "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><hello>world!</hello>");', 'assertNotNull(document);']
['found document ', ['document']]
camel sample_1509

['public void testConvertToSource() throws Exception {', 'Source source = converter.convertTo(Source.class, "<hello>world!</hello>");', 'assertNotNull(source);']
['found document ', ['source']]
camel sample_1509

['public void testStreamSourceToDomSource() throws Exception {', 'StreamSource streamSource = new StreamSource(new StringReader("<hello>world!</hello>"));', 'DOMSource domSource = converter.convertTo(DOMSource.class, streamSource);', 'assertNotNull("Could not convert to a DOMSource!", domSource);']
['found document ', ['domsource']]
camel sample_1509

['public void testNodeToSourceThenToInputStream() throws Exception {', 'Document document = converter.convertTo(Document.class, "<?xml version=\\"1.0\\"?><hello>world!</hello>");', 'Element element = document.getDocumentElement();', 'Source source = converter.convertTo(Source.class, element);', 'assertNotNull("Could not convert from Node to Source!", source);']
['found source ', ['source']]
camel sample_1509

['public void onInit(Route route) {', 'ensureElectionIsCreated();']
['route managed by setting route autostartup flag to false ', ['this', 'getclass', 'route', 'getid']]
camel sample_12674

['private void startAllStoppedRoutes() {', 'try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {']
['route s have been stopped previously by policy restarting ', ['suspendedroutes', 'size']]
camel sample_12674

['private void startAllStoppedRoutes() {', 'try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {', '}', 'for (Route suspended : suspendedRoutes) {', 'DefaultCamelContext ctx = (DefaultCamelContext)suspended.getRouteContext().getCamelContext();', 'while (!ctx.isStarted()) {']
['context is not started yet sleeping for a bit ', ['ctx', 'getname']]
camel sample_12674

['try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {', '}', 'for (Route suspended : suspendedRoutes) {', 'DefaultCamelContext ctx = (DefaultCamelContext)suspended.getRouteContext().getCamelContext();', 'while (!ctx.isStarted()) {', 'Thread.sleep(5000);', '}']
['starting route defined in context ', ['suspended', 'getid', 'ctx', 'getname']]
camel sample_12674

['public HttpServerPipelineFactory(NettyHttpConsumer nettyConsumer) {', 'this.consumer = nettyConsumer;', 'this.configuration = nettyConsumer.getConfiguration();', 'try {', 'this.sslContext = createSSLContext(consumer.getContext(), consumer.getConfiguration());', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_8378

['public ChannelPipeline getPipeline() throws Exception {', 'ChannelPipeline pipeline = Channels.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {', 'sslHandler.setCloseOnSSLException(true);']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_8378

['encoder = ((ChannelHandlerFactory) encoder).newChannelHandler();', '}', 'pipeline.addLast("encoder-" + x, encoder);', '}', 'if (supportCompressed()) {', 'pipeline.addLast("deflater", new HttpContentCompressor());', '}', 'if (consumer.getConfiguration().isOrderedThreadPoolExecutor()) {', 'ExecutionHandler executionHandler = new ExecutionHandler(consumer.getEndpoint().getComponent().getExecutorService());', 'pipeline.addLast("executionHandler", executionHandler);']
['using orderedmemoryawarethreadpoolexecutor with core pool size ', ['consumer', 'getconfiguration', 'getmaximumpoolsize']]
camel sample_8378

['private SSLContext createSSLContext(CamelContext camelContext, NettyServerBootstrapConfiguration configuration) throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_8378

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_8378

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_8378

['public void read(PersonBean body, @JXPath("in/body/name") String name) {', 'this.body = body;', 'this.name = name;']
['read method called on ', ['this']]
camel sample_12805

['public void testTwoRoutesRestartConsumer() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived(TEST_MESSAGE);', 'template.sendBody("direct:input", TEST_MESSAGE);', 'mock.assertIsSatisfied();', 'resetMocks();']
['restarting bar route ', []]
camel sample_13717

['public void testTwoRoutesRestartProducer() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived(TEST_MESSAGE);', 'template.sendBody("direct:input", TEST_MESSAGE);', 'mock.assertIsSatisfied();', 'resetMocks();']
['restarting foo route ', []]
camel sample_13717

['public void onMessage(Message message) {', 'RuntimeCamelException rce = null;', 'try {', 'final Exchange exchange = getEndpoint().createExchange(message, getSession());']
['processing exchange id ', ['exchange', 'getexchangeid']]
camel sample_12413

['RuntimeCamelException rce = null;', 'try {', 'final Exchange exchange = getEndpoint().createExchange(message, getSession());', 'if (isTransacted()) {', 'if (isSharedJMSSession()) {', 'exchange.getIn().setHeader(SjmsConstants.JMS_SESSION, getSession());', '}', '}', 'try {', 'if (isTransacted() || isSynchronous()) {']
['handling synchronous message ', ['exchange', 'getin', 'getbody']]
camel sample_12413

['}', 'try {', 'if (isTransacted() || isSynchronous()) {', 'handleMessage(exchange);', 'if (exchange.isFailed()) {', 'synchronization.onFailure(exchange);', '} else {', 'synchronization.onComplete(exchange);', '}', '} else {']
['handling asynchronous message ', ['exchange', 'getin', 'getbody']]
camel sample_12413

['Map<String, Object> headers = exchange.getIn().getHeaders();', 'String id = (headers.containsKey(HEADER_ID)) ? exchange.getIn().getHeader(HEADER_ID, String.class) : endpoint.getId();', 'int ttl = (headers.containsKey(HEADER_TTL)) ? Integer.parseInt(exchange.getIn().getHeader(HEADER_TTL, String.class)) : DEFAULT_TTL;', 'if (endpoint.isAutoStartIdForInserts()) {', 'id = Long.toString(startId);', 'startId++;', '} else if (id == null) {', 'throw new CouchbaseException(HEADER_ID + " is not specified in message header or endpoint URL.", exchange);', '}', 'if (endpoint.getOperation().equals(COUCHBASE_PUT)) {']
['type of operation put ', []]
camel sample_7710

['if (endpoint.isAutoStartIdForInserts()) {', 'id = Long.toString(startId);', 'startId++;', '} else if (id == null) {', 'throw new CouchbaseException(HEADER_ID + " is not specified in message header or endpoint URL.", exchange);', '}', 'if (endpoint.getOperation().equals(COUCHBASE_PUT)) {', 'Object obj = exchange.getIn().getBody();', 'exchange.getOut().setBody(setDocument(id, ttl, obj, persistTo, replicateTo));', '} else if (endpoint.getOperation().equals(COUCHBASE_GET)) {']
['type of operation get ', []]
camel sample_7710

['} else if (id == null) {', 'throw new CouchbaseException(HEADER_ID + " is not specified in message header or endpoint URL.", exchange);', '}', 'if (endpoint.getOperation().equals(COUCHBASE_PUT)) {', 'Object obj = exchange.getIn().getBody();', 'exchange.getOut().setBody(setDocument(id, ttl, obj, persistTo, replicateTo));', '} else if (endpoint.getOperation().equals(COUCHBASE_GET)) {', 'Object result = client.get(id);', 'exchange.getOut().setBody(result);', '} else if (endpoint.getOperation().equals(COUCHBASE_DELETE)) {']
['type of operation delete ', []]
camel sample_7710

['OperationFuture<Boolean> result = client.set(id, expiry, obj, persistTo, replicateTo);', 'try {', 'if (!result.get()) {', 'throw new Exception("Unable to save Document. " + id);', '}', 'return true;', '} catch (Exception e) {', 'if (retryAttempts <= 0) {', 'throw e;', '} else {']
['unable to save document retrying in ms ', ['producerretrypause', 'retryattempts']]
camel sample_7710

['public void testList() throws Exception {', 'Message m1 = createThreadedTestEmail(null);', 'Message m2 = createThreadedTestEmail(m1.getThreadId());', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleMail.q", "subject:\\"Hello from camel-google-mail\\"");', 'com.google.api.services.gmail.model.ListThreadsResponse result = requestBodyAndHeaders("direct: assertNotNull("list result", result);', 'assertTrue(result.getThreads().size() > 0);']
['list ', ['result']]
camel sample_12043

['public void leadershipChanged(CamelClusterView view, Optional<CamelClusterMember> leader) {']
['cluster view leader changed to ', ['view', 'getlocalmember', 'leader']]
camel sample_13202

['public void initializeConnection() throws CamelMongoDbException {']
['initialising mongodb endpoint ', ['this', 'tostring']]
camel sample_16450

['}', 'mongoDatabase = mongoConnection.getDatabase(database);', 'if (mongoDatabase == null) {', 'throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.");', '}', 'if (collection != null) {', 'if (!createCollection && !databaseContainsCollection(collection)) {', 'throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.");', '}', 'mongoCollection = mongoDatabase.getCollection(collection, BasicDBObject.class);']
['mongodb component initialised and endpoint bound to mongodb collection with the following parameters address list db collection ', ['new', 'object', 'mongoconnection', 'getalladdress', 'tostring', 'mongodatabase', 'getname', 'collection']]
camel sample_16450

['public void ensureIndex(MongoCollection<BasicDBObject> collection, List<BasicDBObject> dynamicIndex) {', 'if (dynamicIndex != null && !dynamicIndex.isEmpty()) {', 'for (BasicDBObject index : dynamicIndex) {']
['create bdobject index ', ['index']]
camel sample_16450

['protected void doStart() throws Exception {', 'if (writeConcern != null && writeConcernRef != null) {', 'String msg = "Cannot set both writeConcern and writeConcernRef at the same time. Respective values: " + writeConcern + ", " + writeConcernRef + ". Aborting initialization.";', 'throw new IllegalArgumentException(msg);', '}', 'mongoConnection = CamelContextHelper.mandatoryLookup(getCamelContext(), connectionBean, MongoClient.class);']
['resolved the connection with the name as ', ['connectionbean', 'mongoconnection']]
camel sample_16450

['protected void doStop() throws Exception {', 'super.doStop();', 'if (mongoConnection != null) {']
['closing connection ', []]
camel sample_16450

['} else {', 'if (is == null && isFailOnNullBody()) {', 'throw new NoJsonBodyValidationException(exchange);', '}', '}', 'if (is != null) {', 'ObjectMapper mapper = new ObjectMapper();', 'JsonNode node = mapper.readTree(is);', 'Set<ValidationMessage> errors = localSchema.validate(node);', 'if (errors.size() > 0) {']
['validated json has errors ', ['errors', 'size']]
camel sample_11395

['throw new NoJsonBodyValidationException(exchange);', '}', '}', 'if (is != null) {', 'ObjectMapper mapper = new ObjectMapper();', 'JsonNode node = mapper.readTree(is);', 'Set<ValidationMessage> errors = localSchema.validate(node);', 'if (errors.size() > 0) {', 'this.errorHandler.handleErrors(exchange, schema, errors);', '} else {']
['validated json success ', []]
camel sample_11395

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SpringLdapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-ldap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-ldap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_520

['public Object addingService(ServiceReference<TypeConverterLoader> serviceReference) {']
['addingservice bundle ', ['servicereference', 'servicereference', 'getbundle']]
camel sample_13081

['public Object addingService(ServiceReference<TypeConverterLoader> serviceReference) {', 'TypeConverterLoader loader = bundleContext.getService(serviceReference);', 'try {']
['loading type converter from bundle ', ['servicereference', 'getbundle', 'getsymbolicname']]
camel sample_13081

['public void removedService(ServiceReference<TypeConverterLoader> serviceReference, Object o) {']
['removedservice bundle ', ['servicereference', 'servicereference', 'getbundle']]
camel sample_13081

['public void removedService(ServiceReference<TypeConverterLoader> serviceReference, Object o) {', 'try {', 'ServiceHelper.stopService(this.delegate);', '} catch (Exception e) {']
['error stopping service due this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_13081

['answer.loadCoreTypeConverters();', '} catch (Exception e) {', 'throw new RuntimeCamelException("Error loading CoreTypeConverter due: " + e.getMessage(), e);', '}', 'ServiceReference<TypeConverterLoader>[] serviceReferences = this.tracker.getServiceReferences();', 'if (serviceReferences != null) {', 'ArrayList<ServiceReference<TypeConverterLoader>> servicesList = new ArrayList<ServiceReference<TypeConverterLoader>>(Arrays.asList(serviceReferences));', 'Collections.sort(servicesList);', 'for (ServiceReference<TypeConverterLoader> sr : servicesList) {', 'try {']
['loading type converter from bundle ', ['sr', 'getbundle', 'getsymbolicname']]
camel sample_13081

['ArrayList<ServiceReference<TypeConverterLoader>> servicesList = new ArrayList<ServiceReference<TypeConverterLoader>>(Arrays.asList(serviceReferences));', 'Collections.sort(servicesList);', 'for (ServiceReference<TypeConverterLoader> sr : servicesList) {', 'try {', '((TypeConverterLoader)this.tracker.getService(sr)).load(answer);', '} catch (Throwable t) {', 'throw new RuntimeCamelException("Error loading type converters from service: " + sr + " due: " + t.getMessage(), t);', '}', '}', '}']
['created typeconverter ', ['answer']]
camel sample_13081

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MsvComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.msv.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.msv.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1017

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DirectVmComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.direct-vm.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.direct-vm.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_873

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'RepositoryTag tag = (RepositoryTag) in.getBody();']
['got tag ', ['tag', 'getname']]
camel sample_14251

['return Optional.empty();', '}', 'root.put("$schema", "http: root.put("id", String.format("urn:jsonschema:%s:%s)", baseUrn, context.getObjectName()));', 'root.put("type", "object");', 'root.put("additionalProperties", false);', 'root.putObject("properties");', 'root.putArray("required");', 'loadProperties(context);', 'for (String name : names) {', 'context.getStack().push(name);']
['load dictionary ', ['context', 'getstack']]
camel sample_13594

['included = isIncluded || !isExcluded;', '} else if (ObjectHelper.isNotEmpty(fields)) {', 'included = Stream.of(fields.split(",")).map(StringHelper::trimToNull).filter(Objects::nonNull).anyMatch(id::equalsIgnoreCase);', '} else if (ObjectHelper.isNotEmpty(exclude)) {', 'included = !Pattern.compile(exclude).matcher(id).matches();', '}', 'if (!included) {', 'return;', '}', 'context.getStack().push(id);']
['load dictionary element ', ['context', 'getstack']]
camel sample_13594

['Producer producer = directEndpoint.createProducer();', 'int nummsg = 1;', 'countLatch = new CountDownLatch(nummsg);', 'long start = System.currentTimeMillis();', 'producer.start();', 'for (int i = 0; i < nummsg; ++i) {', 'producer.process(exchange);', '}', 'countLatch.await();', 'long stop = System.currentTimeMillis();']
['took milliseconds ', ['gettestmethodname', 'stop', 'start']]
camel sample_15010

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'Object msg = messageEvent.getMessage();', 'if (msg instanceof HttpChunk) {', 'HttpChunk chunk = (HttpChunk) msg;', 'if (LOG.isTraceEnabled()) {']
['httpchunk received islast ', ['chunk', 'chunk', 'islast']]
camel sample_8373

['HttpChunkTrailer trailer = (HttpChunkTrailer) msg;', 'for (Map.Entry<String, String> entry : trailer.trailingHeaders()) {', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("Adding trailing header {}={}", entry.getKey(), entry.getValue());', '}', 'response.headers().add(entry.getKey(), entry.getValue());', '}', '} else {', 'buffer.writeBytes(chunk.getContent());', 'if (LOG.isTraceEnabled()) {']
['wrote bytes to chunk buffer ', ['buffer', 'writerindex']]
camel sample_8373

['response.setContent(copy);', 'super.messageReceived(ctx, messageEvent);', '}', '} else if (msg instanceof HttpResponse) {', 'response = (HttpResponse) msg;', 'Exchange exchange = super.getExchange(ctx);', 'if (!HttpHeaders.isKeepAlive(response)) {', 'exchange.setProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, true);', '}', 'if (LOG.isTraceEnabled()) {']
['httpresponse received chunked ', ['response', 'response', 'ischunked']]
camel sample_8373

['} else if (msg instanceof HttpResponse) {', 'response = (HttpResponse) msg;', 'Exchange exchange = super.getExchange(ctx);', 'if (!HttpHeaders.isKeepAlive(response)) {', 'exchange.setProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, true);', '}', 'if (LOG.isTraceEnabled()) {', '}', 'if (response.getStatus().getCode() == HttpResponseStatus.CONTINUE.getCode()) {', 'if (LOG.isTraceEnabled()) {']
['httpresponse received ', ['response', 'response', 'getstatus']]
camel sample_8373

['if (response.getStatus().getCode() == HttpResponseStatus.CONTINUE.getCode()) {', 'if (LOG.isTraceEnabled()) {', '}', '} else if (!response.isChunked()) {', 'super.messageReceived(ctx, messageEvent);', '} else {', 'buffer = ChannelBuffers.dynamicBuffer();', '}', '} else {', 'if (LOG.isTraceEnabled() && msg != null) {']
['ignoring non supported response message of type ', ['msg', 'getclass', 'msg']]
camel sample_8373

['public synchronized QueueReference getOrCreateQueue(SedaEndpoint endpoint, Integer size, Boolean multipleConsumers, BlockingQueueFactory<Exchange> customQueueFactory) {', 'String key = getQueueKey(endpoint.getEndpointUri());', 'QueueReference ref = getQueues().get(key);', 'if (ref != null) {', 'if (size != null && !size.equals(ref.getSize())) {', 'throw new IllegalArgumentException("Cannot use existing queue " + key + " as the existing queue size " + (ref.getSize() != null ? ref.getSize() : Integer.MAX_VALUE) + " does not match given queue size " + size);', '}', 'ref.addReference(endpoint);', 'if (log.isDebugEnabled()) {']
['reusing existing queue with size and reference count ', ['new', 'object', 'key', 'size', 'ref', 'getcount']]
camel sample_4887

['if (size != null && size > 0) {', 'queue = queueFactory.create(size);', '} else {', 'if (getQueueSize() > 0) {', 'size = getQueueSize();', 'queue = queueFactory.create(getQueueSize());', '} else {', 'queue = queueFactory.create();', '}', '}']
['created queue with size ', ['key', 'size']]
camel sample_4887

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .inOut("activemq:queue:foo?replyTo=queue:bar&useMessageIDAsCorrelationID=true&requestTimeout=2000") .to("mock:result");', 'from("activemq:queue:foo") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if ("World".equals(body)) {']
['sleeping for sec to force a timeout ', []]
camel sample_6910

['public boolean isActive() {', 'if (resolvesTo.isEmpty()) {', 'try {', 'resolvesTo.addAll(getLocalIps());', '} catch (Exception e) {']
['failed to get local ips and resolvesto not specified identifying as inactive ', ['e']]
camel sample_6506

['public boolean isActive() {', 'if (resolvesTo.isEmpty()) {', 'try {', 'resolvesTo.addAll(getLocalIps());', '} catch (Exception e) {', 'return false;', '}', '}']
['resolving ', ['hostname']]
camel sample_6506

['}', 'resolved.add(value);', '}', '} catch (Exception e) {', 'LOG.warn(hostname, e);', '} finally {', 'if (attributeEnumeration != null) {', 'try {', 'attributeEnumeration.close();', '} catch (Exception e) {']
['failed to close attributeenumeration memory leak possible ', ['e']]
camel sample_6506

['private List<String> getLocalIps() throws Exception {', 'List<String> localIps = new ArrayList<String>();', 'Enumeration<NetworkInterface> networkInterfacesEnumeration = NetworkInterface.getNetworkInterfaces();', 'while (networkInterfacesEnumeration.hasMoreElements()) {', 'NetworkInterface networkInterface = networkInterfacesEnumeration.nextElement();', 'Enumeration<InetAddress> inetAddressesEnumeration = networkInterface.getInetAddresses();', 'while (inetAddressesEnumeration.hasMoreElements()) {', 'InetAddress inetAddress = inetAddressesEnumeration.nextElement();', 'String ip = inetAddress.getHostAddress();']
['local ip ', ['ip']]
camel sample_6506

['protected void dump(RouteContainer context) throws Exception {', 'Marshaller marshaller = jaxbContext.createMarshaller();', 'marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);', 'StringWriter buffer = new StringWriter();', 'marshaller.marshal(context, buffer);']
['created ', ['buffer']]
camel sample_3704

['if (HeaderConstants.ATTRIBUTE_HEADERS.equalsIgnoreCase(key)) {', 'Series<Header> series = (Series<Header>) value;', 'for (Header header: series) {', 'if (!headerFilterStrategy.applyFilterToExternalHeaders(header.getName(), header.getValue(), exchange)) {', 'inMessage.setHeader(header.getName(), header.getValue());', '}', '}', '} else {', 'inMessage.setHeader(key, value);', '}']
['populate exchange from restlet request header value ', ['key', 'value']]
camel sample_9309

['Object value = null;', 'if (values != null && values.length > 0) {', 'if (values.length == 1) {', 'value = values[0];', '} else {', 'value = values;', '}', '}', 'if (value == null) {', 'inMessage.setBody(paramName);']
['populate exchange from restlet request body ', ['paramname']]
camel sample_9309

['value = values[0];', '} else {', 'value = values;', '}', '}', 'if (value == null) {', 'inMessage.setBody(paramName);', '} else {', 'if (!headerFilterStrategy.applyFilterToExternalHeaders(paramName, value, exchange)) {', 'inMessage.setHeader(paramName, value);']
['populate exchange from restlet request user header value ', ['paramname', 'value']]
camel sample_9309

['}', '}', 'request.getAttributes().put(HeaderConstants.ATTRIBUTE_HEADERS, restletHeaders);', 'exchange.getIn().removeHeader(HeaderConstants.ATTRIBUTE_HEADERS);', '}', 'String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class);', 'String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class);', 'if (login != null && password != null) {', 'ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password);', 'request.setChallengeResponse(authentication);']
['basic http authentication has been applied ', []]
camel sample_9309

['if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {', 'restletHeaders.set(key, value.toString());', '}', '}', '}', '} else {', 'if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {', 'restletHeaders.set(key, value.toString());', '}', '}']
['populate restlet request from exchange header value ', ['key', 'value']]
camel sample_9309

['}', '} else {', 'if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {', 'restletHeaders.set(key, value.toString());', '}', '}', '}', '}', 'if (form != null) {', 'request.setEntity(form.getWebRepresentation());']
['populate restlet request from exchange body as form using media type ', ['method', 'mediatype']]
camel sample_9309

['}', '}', '}', '}', 'if (form != null) {', 'request.setEntity(form.getWebRepresentation());', '} else {', 'if (request.getMethod() == Method.PUT || request.getMethod() == Method.POST) {', 'Representation body = createRepresentationFromBody(exchange, mediaType);', 'request.setEntity(body);']
['populate restlet request from exchange body using media type ', ['method', 'body', 'mediatype']]
camel sample_9309

['}', '}', '}', 'if (form != null) {', 'request.setEntity(form.getWebRepresentation());', '} else {', 'if (request.getMethod() == Method.PUT || request.getMethod() == Method.POST) {', 'Representation body = createRepresentationFromBody(exchange, mediaType);', 'request.setEntity(body);', '} else {']
['populate restlet request from exchange using media type ', ['method', 'mediatype']]
camel sample_9309

['} else {', 'request.setEntity(new EmptyRepresentation());', '}', '}', 'org.restlet.Message extensionHeaders = new Request();', 'HeaderUtils.copyExtensionHeaders(restletHeaders, extensionHeaders);', 'Series<Header> standardHeaders = new Series<>(Header.class);', 'standardHeaders.addAll(restletHeaders);', 'standardHeaders.removeAll(extensionHeaders.getHeaders());', 'restletHeaders.removeAll(standardHeaders);']
['detected request extension headers ', ['extensionheaders', 'getheaders', 'size']]
camel sample_9309

['} else {', 'request.setEntity(new EmptyRepresentation());', '}', '}', 'org.restlet.Message extensionHeaders = new Request();', 'HeaderUtils.copyExtensionHeaders(restletHeaders, extensionHeaders);', 'Series<Header> standardHeaders = new Series<>(Header.class);', 'standardHeaders.addAll(restletHeaders);', 'standardHeaders.removeAll(extensionHeaders.getHeaders());', 'restletHeaders.removeAll(standardHeaders);']
['detected request standard headers ', ['standardheaders', 'size']]
camel sample_9309

['} else if ("Referer".equalsIgnoreCase(key)) {', 'request.setReferrerRef(value);', '} else if ("Host".equalsIgnoreCase(key)) {', 'request.setHostRef(value);', '} else if ("Date".equalsIgnoreCase(key)) {', 'Date d = exchange.getContext().getTypeConverter().tryConvertTo(Date.class, exchange, value);', 'if (d != null) {', 'request.setDate(d);', '}', '} else {']
['addition of the standard request header is not allowed please use the equivalent property in the restlet api ', ['key']]
camel sample_9309

['Date d = exchange.getContext().getTypeConverter().tryConvertTo(Date.class, exchange, value);', 'if (d != null) {', 'response.setDate(d);', '}', '} else if ("Access-Control-Max-Age".equalsIgnoreCase(key)) {', 'Integer accessControlMaxAge = exchange.getContext().getTypeConverter().tryConvertTo(Integer.class, exchange, value);', 'if (accessControlMaxAge != null) {', 'response.setAccessControlMaxAge(accessControlMaxAge);', '}', '} else {']
['addition of the standard response header is not allowed please use the equivalent property in the restlet api ', ['key']]
camel sample_9309

['if (body instanceof WrappedFile) {', 'GenericFile<?> gf = (GenericFile<?>) body;', 'body = gf.getBody();', '}', 'if (body == null) {', 'response.setEntity("", MediaType.TEXT_PLAIN);', 'if (Status.SUCCESS_OK.equals(response.getStatus())) {', 'response.setStatus(Status.SUCCESS_NO_CONTENT);', '}', '} else if (body instanceof Response) {']
['using existing restlet response from exchange body ', ['body']]
camel sample_9309

['response.setEntity(new InputRepresentation(out.getBody(InputStream.class), mediaType));', '} else if (body instanceof File) {', 'response.setEntity(new FileRepresentation(out.getBody(File.class), mediaType));', '} else if (body instanceof byte[]) {', 'byte[] bytes = out.getBody(byte[].class);', 'response.setEntity(new ByteArrayRepresentation(bytes, mediaType, bytes.length));', '} else {', 'String text = out.getBody(String.class);', 'response.setEntity(text, mediaType);', '}']
['populate restlet response from exchange body ', ['body']]
camel sample_9309

['}', '}', '}', '}', 'org.restlet.Message extensionHeaders = new Request();', 'HeaderUtils.copyExtensionHeaders(series, extensionHeaders);', 'Series<Header> standardHeaders = new Series<>(Header.class);', 'standardHeaders.addAll(series);', 'standardHeaders.removeAll(extensionHeaders.getHeaders());', 'series.removeAll(standardHeaders);']
['detected response extension headers ', ['extensionheaders', 'getheaders', 'size']]
camel sample_9309

['}', '}', '}', '}', 'org.restlet.Message extensionHeaders = new Request();', 'HeaderUtils.copyExtensionHeaders(series, extensionHeaders);', 'Series<Header> standardHeaders = new Series<>(Header.class);', 'standardHeaders.addAll(series);', 'standardHeaders.removeAll(extensionHeaders.getHeaders());', 'series.removeAll(standardHeaders);']
['detected response standard headers ', ['standardheaders', 'size']]
camel sample_9309

['public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws Exception {', 'for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {', 'String key = entry.getKey();', 'Object value = entry.getValue();', 'if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {', 'exchange.getOut().setHeader(key, value);']
['populate exchange from restlet response header value ', ['key', 'value']]
camel sample_9309

['if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {', 'exchange.getOut().setHeader(key, value);', '}', '}', 'int responseCode = response.getStatus().getCode();', 'exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, responseCode);', 'exchange.getOut().setHeader(RestletConstants.RESTLET_RESPONSE, response);', 'if (response.getEntity() != null) {', 'MediaType mediaType = response.getEntity().getMediaType();', 'if (mediaType != null) {']
['setting the content type to be ', ['mediatype', 'tostring']]
camel sample_9309

['InputStream is = representationDecoded.getStream();', 'exchange.getOut().setBody(is);', 'if (autoCloseStream) {', 'exchange.addOnCompletion(new RestletOnCompletion(is));', '}', '} else if (response.getEntity() instanceof Representation) {', 'Representation representationDecoded = new DecodeRepresentation(response.getEntity());', 'exchange.getOut().setBody(representationDecoded.getText());', '} else {', 'String text = response.getEntity().getText();']
['populate exchange from restlet response ', ['text']]
camel sample_9309

['if (value instanceof Calendar) {', 'message.getEntity().setExpirationDate(((Calendar) value).getTime());', '} else if (value instanceof Date) {', 'message.getEntity().setExpirationDate((Date) value);', '} else if (value instanceof String) {', 'SimpleDateFormat format = new SimpleDateFormat(RFC_2822_DATE_PATTERN, Locale.ENGLISH);', 'try {', 'Date date = format.parse((String) value);', 'message.getEntity().setExpirationDate(date);', '} catch (ParseException e) {']
['header with value cannot be converted as a date the value will be ignored ', ['headerconstants', 'header', 'expires', 'value']]
camel sample_9309

['if (value instanceof Calendar) {', 'message.getEntity().setModificationDate(((Calendar) value).getTime());', '} else if (value instanceof Date) {', 'message.getEntity().setModificationDate((Date) value);', '} else if (value instanceof String) {', 'SimpleDateFormat format = new SimpleDateFormat(RFC_2822_DATE_PATTERN, Locale.ENGLISH);', 'try {', 'Date date = format.parse((String) value);', 'message.getEntity().setModificationDate(date);', '} catch (ParseException e) {']
['header with value cannot be converted as a date the value will be ignored ', ['headerconstants', 'header', 'last', 'modified', 'value']]
camel sample_9309

['if (header.equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_LENGTH)) {', 'if (value instanceof Long) {', 'message.getEntity().setSize((Long) value);', '} else if (value instanceof Integer) {', 'message.getEntity().setSize((Integer) value);', '} else {', 'Long num = exchange.getContext().getTypeConverter().tryConvertTo(Long.class, value);', 'if (num != null) {', 'message.getEntity().setSize(num);', '} else {']
['header with value cannot be converted as a long the value will be ignored ', ['headerconstants', 'header', 'content', 'length', 'value']]
camel sample_9309

['}', 'if (header.equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_TYPE)) {', 'if (value instanceof MediaType) {', 'message.getEntity().setMediaType((MediaType) value);', '} else {', 'String type = value.toString();', 'MediaType media = MediaType.valueOf(type);', 'if (media != null) {', 'message.getEntity().setMediaType(media);', '} else {']
['header with value cannot be converted as a mediatype the value will be ignored ', ['headerconstants', 'header', 'content', 'type', 'value']]
camel sample_9309

['public void someMethod() {']
['invoked somemethod ', []]
camel sample_3354

['public boolean verifyServerKey(ClientSession sshClientSession, SocketAddress remoteAddress, PublicKey serverKey) {']
['trying to find known hosts file s ', ['knownhostsresource']]
camel sample_10029

['public boolean verifyServerKey(ClientSession sshClientSession, SocketAddress remoteAddress, PublicKey serverKey) {', 'InputStream knownHostsInputStream = null;', 'try {', 'knownHostsInputStream = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, knownHostsResource);', 'List<String> possibleTokens = getKnownHostsFileTokensForSocketAddress(remoteAddress);']
['trying to mach publickey against provided known hosts file ', []]
camel sample_10029

['public boolean verifyServerKey(ClientSession sshClientSession, SocketAddress remoteAddress, PublicKey serverKey) {', 'InputStream knownHostsInputStream = null;', 'try {', 'knownHostsInputStream = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, knownHostsResource);', 'List<String> possibleTokens = getKnownHostsFileTokensForSocketAddress(remoteAddress);', 'PublicKey matchingKey = findKeyForServerToken(knownHostsInputStream, possibleTokens);', 'if (matchingKey != null) {']
['found publickey match for server ', []]
camel sample_10029

['InputStream knownHostsInputStream = null;', 'try {', 'knownHostsInputStream = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, knownHostsResource);', 'List<String> possibleTokens = getKnownHostsFileTokensForSocketAddress(remoteAddress);', 'PublicKey matchingKey = findKeyForServerToken(knownHostsInputStream, possibleTokens);', 'if (matchingKey != null) {', 'boolean match = Arrays.areEqual(matchingKey.getEncoded(), serverKey.getEncoded());', 'return match;', '}', '} catch (IOException ioException) {']
['could not find known hosts file s ', ['string', 'format', 'knownhostsresource', 'ioexception']]
camel sample_10029

['PublicKey matchingKey = findKeyForServerToken(knownHostsInputStream, possibleTokens);', 'if (matchingKey != null) {', 'boolean match = Arrays.areEqual(matchingKey.getEncoded(), serverKey.getEncoded());', 'return match;', '}', '} catch (IOException ioException) {', '} finally {', 'IOHelper.close(knownHostsInputStream);', '}', 'if (failOnUnknownHost) {']
['could not find matching key for client session connection will fail due to configuration ', []]
camel sample_10029

['boolean match = Arrays.areEqual(matchingKey.getEncoded(), serverKey.getEncoded());', 'return match;', '}', '} catch (IOException ioException) {', '} finally {', 'IOHelper.close(knownHostsInputStream);', '}', 'if (failOnUnknownHost) {', 'return false;', '} else {']
['could not find matching key for client session connection will continue anyway due to configuration ', []]
camel sample_10029

['private PublicKey findKeyForServerToken(InputStream knownHostsInputStream, List<String> possibleTokens) {', 'String knowHostsLines = camelContext.getTypeConverter().convertTo(String.class, knownHostsInputStream);', 'if (knowHostsLines == null) {']
['could not read from the known hosts file input stream ', []]
camel sample_10029

['private PublicKey findKeyForServerToken(InputStream knownHostsInputStream, List<String> possibleTokens) {', 'String knowHostsLines = camelContext.getTypeConverter().convertTo(String.class, knownHostsInputStream);', 'if (knowHostsLines == null) {', 'return null;', '}', 'for (String s : knowHostsLines.split("\\n")) {', 'String[] parts = s.split(" ");', 'if (parts.length != 3) {']
['found malformed entry in known hosts file ', []]
camel sample_10029

['if (parts.length != 3) {', 'continue;', '}', 'String entry = parts[0];', 'String key = parts[2];', 'for (String serverToken : possibleTokens) {', 'if (entry.contains(serverToken)) {', 'try {', 'return loadKey(key);', '} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {']
['could not load key for server token s ', ['string', 'format', 'entry', 'e']]
camel sample_10029

['was = "delta: " + delta + " millis";', 'if (timeFrom != null) {', 'long from = timeFrom.toMillis();', 'answer = delta >= from;', '}', 'if (answer) {', 'long to = timeTo.toMillis();', 'answer = delta <= to;', '}', 'if (LOG.isDebugEnabled()) {']
['evaluated time clause with current other ', ['new', 'object', 'tostring', 'currentdate', 'otherdate', 'answer']]
camel sample_4868

['public HttpServerSharedInitializerFactory(NettySharedHttpServerBootstrapConfiguration configuration, HttpServerConsumerChannelFactory channelFactory, ClassResolver classResolver) {', 'this.configuration = configuration;', 'this.channelFactory = channelFactory;', 'this.classResolver = classResolver != null ? classResolver : new DefaultClassResolver();', 'try {', 'this.sslContext = createSSLContext();', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_16684

['protected void initChannel(Channel ch) throws Exception {', 'ChannelPipeline pipeline = ch.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_16684

['private SSLContext createSSLContext() throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_16684

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_16684

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_16684

['private static void run(String id) {', 'try {', 'int events = ThreadLocalRandom.current().nextInt(2, 6);', 'CountDownLatch contextLatch = new CountDownLatch(events);', 'ConsulClusterService service = new ConsulClusterService();', 'service.setId("node-" + id);']
['http logger info service geturl ', ['seturl', 'string', 'format', 'consul', 'url']]
camel sample_14343

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("master:my-ns:timer:consul?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_14343

['public synchronized void reconfigure() throws Exception {']
['reconfiguring disruptor ', ['this']]
camel sample_10750

['private void start() throws Exception {']
['starting disruptor ', ['this']]
camel sample_10750

['Disruptor<ExchangeEvent> newDisruptor = createDisruptor();', 'newDisruptor.start();', 'if (executor != null) {', 'delayedExecutor.executeDelayedCommands(executor);', '}', 'for (final LifecycleAwareExchangeEventHandler handler : handlers) {', 'boolean eventHandlerStarted = false;', 'while (!eventHandlerStarted) {', 'try {', 'if (!handler.awaitStarted(10, TimeUnit.SECONDS)) {']
['disruptor event handler failed to start properly please report ', []]
camel sample_10750

['uniqueConsumerCount = 0;', 'for (final DisruptorEndpoint endpoint : endpoints) {', 'final Map<DisruptorConsumer, Collection<LifecycleAwareExchangeEventHandler>> consumerEventHandlers = endpoint.createConsumerEventHandlers();', 'if (consumerEventHandlers != null) {', 'uniqueConsumerCount += consumerEventHandlers.keySet().size();', 'for (Collection<LifecycleAwareExchangeEventHandler> lifecycleAwareExchangeEventHandlers : consumerEventHandlers .values()) {', 'eventHandlers.addAll(lifecycleAwareExchangeEventHandlers);', '}', '}', '}']
['disruptor created with event handlers ', ['eventhandlers', 'size']]
camel sample_10750

['private void resizeThreadPoolExecutor(final int newSize) {', 'if (executor == null && newSize > 0) {']
['creating new executor with threads ', ['newsize']]
camel sample_10750

['private void resizeThreadPoolExecutor(final int newSize) {', 'if (executor == null && newSize > 0) {', 'executor = component.getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, uri, newSize);', '} else if (executor != null && newSize <= 0) {']
['shutting down executor ', []]
camel sample_10750

['private void resizeThreadPoolExecutor(final int newSize) {', 'if (executor == null && newSize > 0) {', 'executor = component.getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, uri, newSize);', '} else if (executor != null && newSize <= 0) {', 'component.getCamelContext().getExecutorServiceManager().shutdown(executor);', 'executor = null;', '} else if (executor instanceof ThreadPoolExecutor) {']
['resizing existing executor to threads ', ['newsize']]
camel sample_10750

['} else if (executor instanceof ThreadPoolExecutor) {', 'final ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor)executor;', 'if (newSize <= threadPoolExecutor.getCorePoolSize()) {', 'threadPoolExecutor.setCorePoolSize(newSize);', 'threadPoolExecutor.setMaximumPoolSize(newSize);', '} else {', 'threadPoolExecutor.setMaximumPoolSize(newSize);', 'threadPoolExecutor.setCorePoolSize(newSize);', '}', '} else if (newSize > 0) {']
['shutting down old and creating new executor with threads ', ['newsize']]
camel sample_10750

['private synchronized void shutdownDisruptor(boolean isReconfiguring) {']
['shutting down disruptor reconfiguring ', ['this', 'isreconfiguring']]
camel sample_10750

['if (handlers != null && handlers.length == 1 && handlers[0] instanceof BlockingExchangeEventHandler) {', 'final BlockingExchangeEventHandler blockingExchangeEventHandler = (BlockingExchangeEventHandler)handlers[0];', 'blockingExchangeEventHandler.unblock();', '}', 'currentDisruptor.shutdown();', 'for (final LifecycleAwareExchangeEventHandler eventHandler : handlers) {', 'boolean eventHandlerFinished = false;', 'while (!eventHandlerFinished) {', 'try {', 'if (!eventHandler.awaitStopped(10, TimeUnit.SECONDS)) {']
['disruptor event handler failed to shut down properly please report ', []]
camel sample_10750

['public synchronized void addEndpoint(final DisruptorEndpoint disruptorEndpoint) {']
['adding endpoint ', ['disruptorendpoint']]
camel sample_10750

['public synchronized void addEndpoint(final DisruptorEndpoint disruptorEndpoint) {', 'endpoints.add(disruptorEndpoint);']
['endpoint added new total endpoints ', ['disruptorendpoint', 'endpoints', 'size']]
camel sample_10750

['public synchronized void removeEndpoint(final DisruptorEndpoint disruptorEndpoint) {']
['removing endpoint ', ['disruptorendpoint']]
camel sample_10750

['public synchronized void removeEndpoint(final DisruptorEndpoint disruptorEndpoint) {', 'if (getEndpointCount() == 1) {']
['last endpoint removed shutdown disruptor ', []]
camel sample_10750

['public synchronized void removeEndpoint(final DisruptorEndpoint disruptorEndpoint) {', 'if (getEndpointCount() == 1) {', 'shutdownDisruptor(false);', 'shutdownExecutor();', '}', 'endpoints.remove(disruptorEndpoint);']
['endpoint removed new total endpoints ', ['disruptorendpoint', 'getendpointcount']]
camel sample_10750

['public void onEvent(final ExchangeEvent event, final long sequence, final boolean endOfBatch) throws Exception {', 'blockingLatch.await();', 'final Exchange exchange = event.getSynchronizedExchange().cancelAndGetOriginalExchange();', 'if (exchange.getProperty(DisruptorEndpoint.DISRUPTOR_IGNORE_EXCHANGE, false, boolean.class)) {']
['ignoring exchange ', ['exchange']]
camel sample_10750

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirmed id ', ['exchangeid']]
camel sample_1943

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<FastjsonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-fastjson.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-fastjson.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_577

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DropboxComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dropbox.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dropbox.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_598

['result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");', 'Set<ObjectName> namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(3, namesP.size());']
['adding route ', []]
camel sample_2683

['}', '});', 'MockEndpoint bar = getMockEndpoint("mock:bar");', 'bar.expectedMessageCount(1);', 'template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:bar");', 'bar.assertIsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(5, namesP.size());']
['removing route ', []]
camel sample_2683

['assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(5, namesP.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(4, namesP.size());']
['shutting down ', []]
camel sample_2683

['private <T> T doConvertTo(Class<T> type, Exchange exchange, Object value) throws Exception {', 'if (StreamCache.class.isAssignableFrom(value.getClass())) {', 'return null;', '}', 'if (Future.class.isAssignableFrom(value.getClass())) {', 'Future<?> future = (Future<?>) value;', 'if (future.isCancelled()) {', 'return (T) Void.TYPE;', '}']
['getting future response ', []]
camel sample_3991

['private <T> T doConvertTo(Class<T> type, Exchange exchange, Object value) throws Exception {', 'if (StreamCache.class.isAssignableFrom(value.getClass())) {', 'return null;', '}', 'if (Future.class.isAssignableFrom(value.getClass())) {', 'Future<?> future = (Future<?>) value;', 'if (future.isCancelled()) {', 'return (T) Void.TYPE;', '}', 'Object body = future.get();']
['got future response ', []]
camel sample_3991

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RabbitMQComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rabbitmq.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rabbitmq.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_432

['private void writeSlowFile() throws Exception {']
['writing slow file ', []]
camel sample_3138

['private void writeSlowFile() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/changed/in/slowfile.dat");', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());']
['writing line ', ['i']]
camel sample_3138

['private void writeSlowFile() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/changed/in/slowfile.dat");', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());', 'Thread.sleep(50);', '}', 'fos.flush();', 'fos.close();']
['writing slow file done ', []]
camel sample_3138

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JGroupsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jgroups.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jgroups.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_961

['public Consumer createConsumer(final Processor processor) throws Exception {', 'final SqlProcessingStrategy proStrategy = new ElsqlSqlProcessingStrategy(elSql);', 'final SqlPrepareStatementStrategy preStategy = new ElsqlSqlPrepareStatementStrategy();', 'final SqlParameterSource param = new EmptySqlParameterSource();', 'final String sql = elSql.getSql(elsqlName, new SpringSqlParams(param));']
['elsqlconsumer using sql ', ['elsqlname', 'sql']]
camel sample_13193

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_2945

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_2945

['protected void doStart() throws Exception {', 'super.doStart();', 'String verb = getEndpoint().getVerb();', 'String path = getEndpoint().getPath();', 'String accept = getEndpoint().getAccept();', 'boolean matchOnUriPrefix = getEndpoint().getSparkConfiguration().isMatchOnUriPrefix();', 'if (accept != null) {']
['spark rest accepting ', ['new', 'object', 'verb', 'path', 'accept']]
camel sample_7614

['protected void doStart() throws Exception {', 'super.doStart();', 'String verb = getEndpoint().getVerb();', 'String path = getEndpoint().getPath();', 'String accept = getEndpoint().getAccept();', 'boolean matchOnUriPrefix = getEndpoint().getSparkConfiguration().isMatchOnUriPrefix();', 'if (accept != null) {', '} else {']
['spark rest ', ['verb', 'path']]
camel sample_7614

['public void onRegistered() {', 'super.onRegistered();']
['onRegistered ', []]
camel sample_12147

['public void onDisconnected() {', 'super.onDisconnected();']
['onDisconnected ', []]
camel sample_12147

['final IRCConnection conn = new IRCConnection(config.getHostname(), config.getPorts(), config.getPassword(), config.getNickname(), config.getUsername(), config.getRealname());', 'conn.addIRCEventListener(new CodehausIRCEventAdapter());', 'conn.setEncoding("UTF-8");', 'conn.setColors(false);', 'conn.setPong(true);', 'try {', 'conn.connect();', '} catch (IOException e) {', 'e.printStackTrace();', '}']
['Connected ', []]
camel sample_12147

['public void execute(JobExecutionContext context) throws JobExecutionException {']
['execute job ', ['context']]
camel sample_14990

['Consumer consumer = route.getConsumer();', 'if (consumer instanceof Runnable) {', 'task = (Runnable) consumer;', 'break;', '}', '}', '}', '}', '}', 'if (task != null) {']
['running task ', ['task']]
camel sample_14990

['private int doSearch(String searchPhrase, int maxNumberOfHits, Version luceneVersion) throws NullPointerException, ParseException, IOException {']
['search phrase ', ['searchphrase']]
camel sample_6843

['private int doSearch(String searchPhrase, int maxNumberOfHits, Version luceneVersion) throws NullPointerException, ParseException, IOException {', 'QueryParser parser = new QueryParser("contents", analyzer);', 'Query query = parser.parse(searchPhrase);', 'TopScoreDocCollector collector = TopScoreDocCollector.create(maxNumberOfHits);', 'indexSearcher.search(query, collector);', 'hits = collector.topDocs().scoreDocs;']
['search generated hits ', ['hits', 'length']]
camel sample_6843

['public boolean acquireExclusiveReadLock(GenericFileOperations<FTPFile> operations, GenericFile<FTPFile> file, Exchange exchange) throws Exception {', 'boolean exclusive = false;']
['waiting for exclusive read lock to file ', ['file']]
camel sample_15397

['CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = 0;', 'long newLength = 0;', 'List<FTPFile> files;', 'if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {']
['using fast exists to update file information in home directory ', []]
camel sample_15397

['}', '}', 'long newLastModified = 0;', 'long newLength = 0;', 'List<FTPFile> files;', 'if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {']
['using fast exists to update file information for ', ['path']]
camel sample_15397

['if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {']
['using full directory listing in home directory to update file information consider enabling fastexistscheck option ', []]
camel sample_15397

['if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {']
['using full directory listing to update file information for consider enabling fastexistscheck option ', ['path']]
camel sample_15397

['files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '}']
['list files found files ', ['file', 'getabsolutefilepath', 'files', 'size']]
camel sample_15397

['} else {', 'match = f.getName().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLength = f.getSize();', 'if (f.getTimestamp() != null) {', 'newLastModified = f.getTimestamp().getTimeInMillis();', '}', '}', '}']
['previous last modified new last modified ', ['lastmodified', 'newlastmodified']]
camel sample_15397

['} else {', 'match = f.getName().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLength = f.getSize();', 'if (f.getTimestamp() != null) {', 'newLastModified = f.getTimestamp().getTimeInMillis();', '}', '}', '}']
['previous length new length ', ['length', 'newlength']]
camel sample_15397

['match = f.getName().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLength = f.getSize();', 'if (f.getTimestamp() != null) {', 'newLastModified = f.getTimestamp().getTimeInMillis();', '}', '}', '}', 'long newOlderThan = startTime + watch.taken() - minAge;']
['new older than threshold ', ['newolderthan']]
camel sample_15397

['}', 'if (match) {', 'newLength = f.getSize();', 'if (f.getTimestamp() != null) {', 'newLastModified = f.getTimestamp().getTimeInMillis();', '}', '}', '}', 'long newOlderThan = startTime + watch.taken() - minAge;', 'if (newLength >= minLength && ((minAge == 0 && newLastModified == lastModified && newLength == length) || (minAge != 0 && newLastModified < newOlderThan))) {']
['read lock acquired ', []]
camel sample_15397

['private boolean sleep() {']
['exclusive read lock not granted sleeping for millis ', ['checkinterval']]
camel sample_15397

['private boolean sleep() {', 'try {', 'Thread.sleep(checkInterval);', 'return false;', '} catch (InterruptedException e) {']
['sleep interrupted while waiting for exclusive read lock so breaking out ', []]
camel sample_15397

['protected Object evaluateExpression(String expressionText, String expectedValue) {', 'Language language = assertResolveLanguage(getLanguageName());', 'Expression expression = language.createExpression(expressionText);', 'assertNotNull("No Expression could be created for text: " + expressionText + " language: " + language, expression);', 'Object value;', 'if (expectedValue != null) {', 'value = expression.evaluate(exchange, expectedValue.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_3712

['private void prepareMessageSenders(SpringWebserviceConfiguration configuration) {', 'if (!(configuration.getTimeout() > -1) && configuration.getSslContextParameters() == null) {', 'return;', '}', 'WebServiceTemplate webServiceTemplate = configuration.getWebServiceTemplate();', 'WebServiceMessageSender[] messageSenders = webServiceTemplate.getMessageSenders();', 'for (int i = 0; i < messageSenders.length; i++) {', 'WebServiceMessageSender messageSender = messageSenders[i];', 'if (messageSender instanceof HttpComponentsMessageSender) {', 'if (configuration.getSslContextParameters() != null) {']
['not applying sslcontextparameters based configuration to httpcomponentsmessagesender if you are using this messagesender which you are not by default you will need to configure ssl using the commons http x protocol registry ', []]
camel sample_17129

['WebServiceMessageSender[] messageSenders = webServiceTemplate.getMessageSenders();', 'for (int i = 0; i < messageSenders.length; i++) {', 'WebServiceMessageSender messageSender = messageSenders[i];', 'if (messageSender instanceof HttpComponentsMessageSender) {', 'if (configuration.getSslContextParameters() != null) {', '}', 'if (configuration.getTimeout() > -1) {', 'if (messageSender.getClass().equals(HttpComponentsMessageSender.class)) {', '((HttpComponentsMessageSender) messageSender).setReadTimeout(configuration.getTimeout());', '} else {']
['not applying timeout configuration to httpcomponentsmessagesender based implementation you are using what appears to be a custom messagesender which you are not doing by default you will need configure timeout on your own ', []]
camel sample_17129

['}', 'if (configuration.getTimeout() > -1) {', 'if (messageSender.getClass().equals(HttpComponentsMessageSender.class)) {', '((HttpComponentsMessageSender) messageSender).setReadTimeout(configuration.getTimeout());', '} else {', '}', '}', '} else if (messageSender.getClass().equals(HttpUrlConnectionMessageSender.class)) {', 'messageSenders[i] = new AbstractHttpWebServiceMessageSenderDecorator((HttpUrlConnectionMessageSender) messageSender, configuration, getEndpoint().getCamelContext());', '} else {']
['ignoring the timeout and sslcontextparameters options for you will need to configure these options directly on your custom configured webservicemessagesender ', ['messagesender']]
camel sample_17129

['protected void doStop() throws Exception {', 'super.doStop();', 'if (atomix != null) {']
['leaving atomix cluster replica ', ['atomix']]
camel sample_10316

['private AtomixReplica getOrCreateReplica() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(address, "Atomix Node Address");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'atomix = AtomixClusterHelper.createReplica(getCamelContext(), address, configuration);', 'if (ObjectHelper.isNotEmpty(configuration.getNodes())) {']
['bootstrap cluster on address for nodes ', ['address', 'configuration', 'getnodes']]
camel sample_10316

['private AtomixReplica getOrCreateReplica() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(address, "Atomix Node Address");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'atomix = AtomixClusterHelper.createReplica(getCamelContext(), address, configuration);', 'if (ObjectHelper.isNotEmpty(configuration.getNodes())) {', 'this.atomix.bootstrap(configuration.getNodes()).join();']
['bootstrap cluster done ', []]
camel sample_10316

['private AtomixReplica getOrCreateReplica() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(address, "Atomix Node Address");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'atomix = AtomixClusterHelper.createReplica(getCamelContext(), address, configuration);', 'if (ObjectHelper.isNotEmpty(configuration.getNodes())) {', 'this.atomix.bootstrap(configuration.getNodes()).join();', '} else {']
['bootstrap cluster on address ', ['address', 'configuration', 'getnodes']]
camel sample_10316

['private AtomixReplica getOrCreateReplica() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(address, "Atomix Node Address");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'atomix = AtomixClusterHelper.createReplica(getCamelContext(), address, configuration);', 'if (ObjectHelper.isNotEmpty(configuration.getNodes())) {', 'this.atomix.bootstrap(configuration.getNodes()).join();', '} else {', 'this.atomix.bootstrap().join();']
['bootstrap cluster done ', []]
camel sample_10316

['server = new Server(PORT);', 'port = PORT;', 'ServletContextHandler servletContext = new ServletContextHandler(ServletContextHandler.SESSIONS);', 'servletContext.setSecurityHandler(basicAuth("camel", "camelPass", "Private!"));', 'servletContext.setContextPath("/");', 'server.setHandler(servletContext);', 'servletContext.addServlet(new ServletHolder(new MyHttpServlet()), "/*");', 'try {', 'server.start();', '} catch (Exception ex) {']
['could not start server ', ['ex']]
camel sample_12281

['public void stopServer() {', 'if (server != null) {', 'try {', 'server.stop();', '} catch (Exception ex) {']
['server doesn t stop normal ', ['ex']]
camel sample_12281

['public void setReplyTo(Destination replyTo) {']
['replyto destination ', ['replyto']]
camel sample_7182

['public Destination getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {']
['waiting for replyto to be set ', []]
camel sample_7182

['public Destination getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {', 'boolean done = replyToLatch.await(replyToTimeout, TimeUnit.MILLISECONDS);', 'if (!done) {']
['replyto destination was not set and timeout occurred ', []]
camel sample_7182

['public Destination getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {', 'boolean done = replyToLatch.await(replyToTimeout, TimeUnit.MILLISECONDS);', 'if (!done) {', '} else {']
['waiting for replyto to be set done ', []]
camel sample_7182

['String correlationID = null;', 'try {', 'if (correlationProperty == null) {', 'correlationID = message.getJMSCorrelationID();', '} else {', 'correlationID = message.getStringProperty(correlationProperty);', '}', '} catch (JMSException e) {', '}', 'if (correlationID == null) {']
['ignoring message with no correlationid ', ['message']]
camel sample_7182

['if (correlationProperty == null) {', 'correlationID = message.getJMSCorrelationID();', '} else {', 'correlationID = message.getStringProperty(correlationProperty);', '}', '} catch (JMSException e) {', '}', 'if (correlationID == null) {', 'return;', '}']
['received reply message with correlationid ', ['correlationid', 'message']]
camel sample_7182

['public void processReply(ReplyHolder holder) {', 'if (holder != null && isRunAllowed()) {', 'try {', 'Exchange exchange = holder.getExchange();', 'boolean timeout = holder.isTimeout();', 'if (timeout) {', 'if (log.isWarnEnabled()) {']
['timeout occurred after millis waiting for reply message with correlationid on destination setting exchangetimedoutexception on and continue routing ', ['new', 'object', 'holder', 'getrequesttimeout', 'holder', 'getcorrelationid', 'replyto', 'exchangehelper', 'logids', 'exchange']]
camel sample_7182

['}', 'String msg = "reply message with correlationID: " + holder.getCorrelationId() + " not received on destination: " + replyTo;', 'exchange.setException(new ExchangeTimedOutException(exchange, holder.getRequestTimeout(), msg));', '} else {', 'Message message = holder.getMessage();', 'Session session = holder.getSession();', 'JmsMessage response = new JmsMessage(message, session, endpoint.getBinding());', 'exchange.setOut(response);', 'Object body = response.getBody();', 'if (endpoint.isTransferException() && body instanceof Exception) {']
['reply was an exception setting the exception on the exchange ', ['body']]
camel sample_7182

['exchange.setException(new ExchangeTimedOutException(exchange, holder.getRequestTimeout(), msg));', '} else {', 'Message message = holder.getMessage();', 'Session session = holder.getSession();', 'JmsMessage response = new JmsMessage(message, session, endpoint.getBinding());', 'exchange.setOut(response);', 'Object body = response.getBody();', 'if (endpoint.isTransferException() && body instanceof Exception) {', 'exchange.setException((Exception) body);', '} else {']
['reply received out message body set to reply payload ', ['body']]
camel sample_7182

['exchange.setOut(response);', 'Object body = response.getBody();', 'if (endpoint.isTransferException() && body instanceof Exception) {', 'exchange.setException((Exception) body);', '} else {', '}', 'if (endpoint.isTransferFault()) {', 'Object faultHeader = response.removeHeader(JmsConstants.JMS_TRANSFER_FAULT);', 'if (faultHeader != null) {', 'boolean isFault = exchange.getContext().getTypeConverter().tryConvertTo(boolean.class, faultHeader);']
['transfer fault on out message ', ['isfault']]
camel sample_7182

['protected abstract void handleReplyMessage(String correlationID, Message message, Session session);', 'protected abstract AbstractMessageListenerContainer createListenerContainer() throws Exception;', 'protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, Message message) {', 'if (log.isWarnEnabled()) {']
['early reply received with correlationid ', ['correlationid', 'message']]
camel sample_7182

['protected abstract void handleReplyMessage(String correlationID, Message message, Session session);', 'protected abstract AbstractMessageListenerContainer createListenerContainer() throws Exception;', 'protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, Message message) {', 'if (log.isWarnEnabled()) {', '}', 'ReplyHandler answer = null;', 'boolean done = false;', 'int counter = 0;', 'while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {']
['early reply not found handler at attempt waiting a bit longer ', ['counter']]
camel sample_7182

['int counter = 0;', 'while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {', 'try {', 'Thread.sleep(endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime());', '} catch (InterruptedException e) {', '}', 'answer = correlation.get(correlationID);', 'done = answer != null;', 'if (answer != null) {', 'if (log.isTraceEnabled()) {']
['early reply with correlationid has been matched after attempts and can be processed using handler ', ['new', 'object', 'correlationid', 'counter', 'answer']]
camel sample_7182

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(executorService, "executorService", this);', 'ObjectHelper.notNull(scheduledExecutorService, "scheduledExecutorService", this);', 'ObjectHelper.notNull(endpoint, "endpoint", this);']
['using timeout checker interval with millis ', ['endpoint', 'getrequesttimeoutcheckerinterval']]
camel sample_7182

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(executorService, "executorService", this);', 'ObjectHelper.notNull(scheduledExecutorService, "scheduledExecutorService", this);', 'ObjectHelper.notNull(endpoint, "endpoint", this);', 'correlation = new CorrelationTimeoutMap(scheduledExecutorService, endpoint.getRequestTimeoutCheckerInterval(), executorService);', 'ServiceHelper.startService(correlation);', 'listenerContainer = createListenerContainer();', 'listenerContainer.afterPropertiesSet();']
['starting reply listener container on endpoint ', ['endpoint']]
camel sample_7182

['protected void doStop() throws Exception {', 'ServiceHelper.stopService(correlation);', 'if (listenerContainer != null) {']
['stopping reply listener container on endpoint ', ['endpoint']]
camel sample_7182

['public void testJobLifecycle() throws Exception {']
['testing job lifecycle for of type ', ['jobinfo', 'getoperation', 'jobinfo', 'getcontenttype']]
camel sample_14705

['public void request(long l) {']
['requested events from subscriber ', ['l']]
camel sample_11507

['sendingQueue = new LinkedList<>();', 'while (amount > 0) {', 'sendingQueue.add(buffer.removeFirst());', 'amount--;', '}', '}', '} finally {', 'mutex.unlock();', '}', 'if (sendingQueue != null) {']
['sending events to the subscriber ', ['sendingqueue', 'size']]
camel sample_11507

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<SerializationDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.serialization.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.serialization.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_832

['if (isJavaVendor("IBM")) {', 'ibmJDK = true;', '}', 'try {', 'KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());', 'InputStream in = ECDSASignatureTest.class.getResourceAsStream("/org/apache/camel/component/crypto/ecdsa.jks");', 'keyStore.load(in, "security".toCharArray());', 'privateKey = (PrivateKey) keyStore.getKey("ECDSA", "security".toCharArray());', 'x509 = (X509Certificate)keyStore.getCertificate("ECDSA");', '} catch (Throwable e) {']
['cannot setup keystore for running this test due this test is skipped ', ['e', 'getmessage', 'e']]
camel sample_9173

['public void testOnNextPropagation() throws Exception {']
['grpc pingasyncsync method aync test start ', []]
camel sample_7497

['public void testOnCompletedPropagation() throws Exception {']
['grpc pingasyncasync method aync test start ', []]
camel sample_7497

['public void onError(Throwable t) {']
['Exception ', ['t']]
camel sample_7497

['public void execute() {', 'DeleteDomainRequest request = new DeleteDomainRequest() .withDomainName(determineDomainName());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8762

['public void execute() {', 'DeleteDomainRequest request = new DeleteDomainRequest() .withDomainName(determineDomainName());', 'this.sdbClient.deleteDomain(request);']
['request sent ', []]
camel sample_8762

['public void testComment() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fileId);', 'com.google.api.services.drive.model.Comment comment = new com.google.api.services.drive.model.Comment();', 'comment.setContent("Camel rocks!");', 'headers.put("CamelGoogleDrive.content", comment);', 'requestBodyAndHeaders("direct: com.google.api.services.drive.model.CommentList result1 = requestBody("direct: assertNotNull(result1.get("items"));']
['list ', []]
camel sample_15401

['public void testProducerBlocksResumeTest() throws Exception {', 'context.suspendRoute("foo");', 'ExecutorService executor = Executors.newSingleThreadExecutor();', 'executor.submit(new Runnable() {', 'public void run() {', 'try {', 'Thread.sleep(200);']
['resuming consumer ', []]
camel sample_2912

['protected void doProcess(Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName) throws Exception {', 'Message in = exchange.getIn();', 'MetricsTimerAction action = endpoint.getAction();', 'MetricsTimerAction finalAction = in.getHeader(HEADER_TIMER_ACTION, action, MetricsTimerAction.class);', 'if (finalAction == MetricsTimerAction.start) {', 'handleStart(exchange, registry, metricsName);', '} else if (finalAction == MetricsTimerAction.stop) {', 'handleStop(exchange, registry, metricsName);', '} else {']
['no action provided for timer ', ['metricsname']]
camel sample_13701

['public CompletableFuture<Boolean> doFinalize(Function<CamelSagaStep, Optional<Endpoint>> endpointExtractor, String description) {', 'CompletableFuture<Boolean> result = CompletableFuture.completedFuture(true);', 'for (CamelSagaStep step : reversed(steps)) {', 'Optional<Endpoint> endpoint = endpointExtractor.apply(step);', 'if (endpoint.isPresent()) {', 'result = result.thenCompose(prevResult -> doFinalize(endpoint.get(), step, 0, description).thenApply(res -> prevResult && res));', '}', '}', 'return result.whenComplete((done, ex) -> {', 'if (ex != null) {']
['cannot finalize the saga ', ['description', 'ex']]
camel sample_4080

['CompletableFuture<Boolean> result = CompletableFuture.completedFuture(true);', 'for (CamelSagaStep step : reversed(steps)) {', 'Optional<Endpoint> endpoint = endpointExtractor.apply(step);', 'if (endpoint.isPresent()) {', 'result = result.thenCompose(prevResult -> doFinalize(endpoint.get(), step, 0, description).thenApply(res -> prevResult && res));', '}', '}', 'return result.whenComplete((done, ex) -> {', 'if (ex != null) {', '} else if (!done) {']
['unable to finalize for all required steps of the saga ', ['description', 'sagaid']]
camel sample_4080

['private CompletableFuture<Boolean> doFinalize(Endpoint endpoint, CamelSagaStep step, int doneAttempts, String description) {', 'Exchange exchange = createExchange(endpoint, step);', 'return CompletableFuture.supplyAsync(() -> {', 'Exchange res = camelContext.createFluentProducerTemplate().to(endpoint).withExchange(exchange).send();', 'Exception ex = res.getException();', 'if (ex != null) {', 'throw new RuntimeCamelException(res.getException());', '}', 'return true;', '}, sagaService.getExecutorService()).exceptionally(ex -> {']
['exception thrown during at attempt of ', ['description', 'endpoint', 'getendpointuri', 'doneattempts', 'sagaservice', 'getmaxretryattempts', 'ex']]
camel sample_4080

['for (int i = 0; i < map.getLength(); i++) {', 'Node att = map.item(i);', 'if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {', 'final String value = att.getNodeValue();', 'String before = ObjectHelper.before(value, "?");', 'String after = ObjectHelper.after(value, "?");', 'if (before != null && after != null) {', 'String changed = after.replaceAll("\\\\s{2,}", "");', 'if (!after.equals(changed)) {', 'String newAtr = before.trim() + "?" + changed.trim();']
['removed whitespace noise from attribute ', ['value', 'newatr']]
camel sample_8109

['public Metadata parse(Element element, ParserContext context) {']
['parsing element ', ['element']]
camel sample_8109

['private Metadata parseCamelContextNode(Element element, ParserContext context) {']
['parsing camelcontext ', ['element']]
camel sample_8109

['MutableBeanMetadata regProcessor = context.createMetadata(MutableBeanMetadata.class);', 'regProcessor.setId(".camelBlueprint.processor.registry." + contextId);', 'regProcessor.setRuntimeClass(CamelDependenciesFinder.class);', 'regProcessor.setFactoryComponent(regProcessorFactory);', 'regProcessor.setFactoryMethod("call");', 'regProcessor.setProcessor(true);', 'regProcessor.addDependsOn(".camelBlueprint.processor.bean." + contextId);', 'regProcessor.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));', 'context.getComponentDefinitionRegistry().registerComponentDefinition(regProcessor);', 'injectNamespaces(element, binder);']
['parsing camelcontext done returning ', ['ctx']]
camel sample_8109

['private Metadata parseRouteContextNode(Element element, ParserContext context) {']
['parsing routecontext ', ['element']]
camel sample_8109

['factory2.setId(".camelBlueprint.factory." + id);', 'factory2.setFactoryComponent(factory);', 'factory2.setFactoryMethod("call");', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(List.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getRoutes");', 'ctx.setActivation(ACTIVATION_LAZY);', 'injectNamespaces(element, binder);']
['parsing routecontext done returning ', ['element', 'ctx']]
camel sample_8109

['private Metadata parseRestContextNode(Element element, ParserContext context) {']
['parsing restcontext ', ['element']]
camel sample_8109

['factory2.setId(".camelBlueprint.factory." + id);', 'factory2.setFactoryComponent(factory);', 'factory2.setFactoryMethod("call");', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(List.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getRests");', 'ctx.setActivation(ACTIVATION_LAZY);', 'injectNamespaces(element, binder);']
['parsing restcontext done returning ', ['element', 'ctx']]
camel sample_8109

['private Metadata parseEndpointNode(Element element, ParserContext context) {']
['parsing endpoint ', ['element']]
camel sample_8109

['factory2.setFactoryMethod("call");', 'factory2.setInitMethod("afterPropertiesSet");', 'factory2.setDestroyMethod("destroy");', 'factory2.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(Endpoint.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getObject");', 'ctx.setActivation(ACTIVATION_LAZY);']
['parsing endpoint done returning ', ['element', 'ctx']]
camel sample_8109

['private Metadata parseKeyStoreParametersNode(Element element, ParserContext context) {']
['parsing keystoreparameters ', ['element']]
camel sample_8109

['factory2.setFactoryMethod("call");', 'factory2.setInitMethod("afterPropertiesSet");', 'factory2.setDestroyMethod("destroy");', 'factory2.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(KeyStoreParameters.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getObject");', 'ctx.setActivation(ACTIVATION_LAZY);']
['parsing keystoreparameters done returning ', ['ctx']]
camel sample_8109

['private Metadata parseSecureRandomParametersNode(Element element, ParserContext context) {']
['parsing securerandomparameters ', ['element']]
camel sample_8109

['factory2.setFactoryMethod("call");', 'factory2.setInitMethod("afterPropertiesSet");', 'factory2.setDestroyMethod("destroy");', 'factory2.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(SecureRandomParameters.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getObject");', 'ctx.setActivation(ACTIVATION_LAZY);']
['parsing securerandomparameters done returning ', ['ctx']]
camel sample_8109

['private Metadata parseSSLContextParametersNode(Element element, ParserContext context) {']
['parsing sslcontextparameters ', ['element']]
camel sample_8109

['factory2.setFactoryMethod("call");', 'factory2.setInitMethod("afterPropertiesSet");', 'factory2.setDestroyMethod("destroy");', 'factory2.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));', 'MutableBeanMetadata ctx = context.createMetadata(MutableBeanMetadata.class);', 'ctx.setId(id);', 'ctx.setRuntimeClass(SSLContextParameters.class);', 'ctx.setFactoryComponent(factory2);', 'ctx.setFactoryMethod("getObject");', 'ctx.setActivation(ACTIVATION_LAZY);']
['parsing sslcontextparameters done returning ', ['ctx']]
camel sample_8109

['public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanMetadata) {']
['before init of bean ', ['beanname', 'bean']]
camel sample_8109

['protected void setterPropertyInjection(Method method, String propertyValue, String propertyDefaultValue, Object bean, String beanName) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_8109

['protected void setterBeanInjection(Method method, String name, Object bean, String beanName) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_8109

['protected void setterInjection(Method method, Object bean, String beanName, String endpointUri, String endpointRef, String endpointProperty) {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'if (parameterTypes != null) {', 'if (parameterTypes.length != 1) {']
['ignoring badly annotated method for injection due to incorrect number of parameters ', ['method']]
camel sample_8109

['public Object afterInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanMetadata) {']
['after init of bean ', ['beanname', 'bean']]
camel sample_8109

['}', 'if (xml != null) {', 'dataformats.add(xml);', '}', '}', 'try {', 'for (String component : components) {', 'if (camelContext.getComponent(component) == null) {', 'getComponentResolverReference(context, component);', '} else {']
['not creating a service reference for component because a component already exists in the camel context ', ['component']]
camel sample_8109

['} else {', '}', '}', 'for (String language : languages) {', 'getLanguageResolverReference(context, language);', '}', 'for (String dataformat : dataformats) {', 'getDataformatResolverReference(context, dataformat);', '}', '} catch (UnsupportedOperationException e) {']
['unable to add dependencies to camel components osgi services the apache aries blueprint implementation used is too old and the blueprint bundle cannot see the org apache camel spi package ', []]
camel sample_8109

['private static boolean validateUri(String uri) {', 'try {', 'URISupport.normalizeUri(uri);', '} catch (URISyntaxException | UnsupportedEncodingException e) {']
['endpoint uri is not valid due to ', ['uri', 'e', 'getmessage', 'e']]
camel sample_8109

['return description.getName() + "_" + enumTypeName(field.getName());', '} else if (isMultiSelectPicklist(field)) {', 'if (useStringsForPicklists) {', 'return String.class.getName() + "[]";', '}', 'return description.getName() + "_" + enumTypeName(field.getName()) + "[]";', '} else {', 'final String soapType = field.getSoapType();', "final String type = LOOKUP_MAP.get(soapType.substring(soapType.indexOf(':') + 1));", 'if (type == null) {']
['unsupported field type s in field s of object s ', ['string', 'format', 'soaptype', 'field', 'getname', 'description', 'getname']]
camel sample_14928

['}', 'if (outputDirectory.getAbsolutePath().contains("$")) {', 'outputDirectory = new File("generated-sources/camel-salesforce");', '}', "final File pkgDir = new File(outputDirectory, packageName.trim().replace('.', File.separatorChar));", 'if (!pkgDir.exists()) {', 'if (!pkgDir.mkdirs()) {', 'throw new MojoExecutionException("Unable to create " + pkgDir);', '}', '}']
['generating java classes ', []]
camel sample_14928

['for (final SObjectDescription description : descriptions.fetched()) {', 'if (Defaults.IGNORED_OBJECTS.contains(description.getName())) {', 'continue;', '}', 'try {', 'processDescription(pkgDir, description, utility, generatedDate);', '} catch (final IOException e) {', 'throw new MojoExecutionException("Unable to generate source files for: " + description.getName(), e);', '}', '}']
['successfully generated s java classes ', ['string', 'format', 'descriptions', 'count']]
camel sample_14928

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LanguageComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.language.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.language.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_865

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NagiosComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.nagios.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.nagios.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1001

['public void foo(@Body String body) {', 'this.body = body;']
['foo method called on ', ['this']]
camel sample_3196

['}', 'Destination replyToDestination;', 'if (ObjectHelper.isEmpty(getNamedReplyTo())) {', 'replyToDestination = getEndpoint().getDestinationCreationStrategy().createTemporaryDestination(session, isTopic());', '} else {', 'replyToDestination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getNamedReplyTo(), isTopic());', '}', 'MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, replyToDestination, null, isTopic(), null, true, false, false);', 'messageConsumer.setMessageListener(new MessageListener() {', 'public void onMessage(final Message message) {']
['message received in the consumer pool ', []]
camel sample_12393

['}', 'Destination replyToDestination;', 'if (ObjectHelper.isEmpty(getNamedReplyTo())) {', 'replyToDestination = getEndpoint().getDestinationCreationStrategy().createTemporaryDestination(session, isTopic());', '} else {', 'replyToDestination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getNamedReplyTo(), isTopic());', '}', 'MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, replyToDestination, null, isTopic(), null, true, false, false);', 'messageConsumer.setMessageListener(new MessageListener() {', 'public void onMessage(final Message message) {']
['message ', ['message']]
camel sample_12393

['} else {', 'replyToDestination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getNamedReplyTo(), isTopic());', '}', 'MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, replyToDestination, null, isTopic(), null, true, false, false);', 'messageConsumer.setMessageListener(new MessageListener() {', 'public void onMessage(final Message message) {', 'try {', 'Exchanger<Object> exchanger = EXCHANGERS.get(message.getJMSCorrelationID());', 'exchanger.exchange(message, getResponseTimeOut(), TimeUnit.MILLISECONDS);', '} catch (Exception e) {']
['unable to exchange message ', ['message', 'e']]
camel sample_12393

['public void onMessage(final Message message) {', 'try {', 'Exchanger<Object> exchanger = EXCHANGERS.get(message.getJMSCorrelationID());', 'exchanger.exchange(message, getResponseTimeOut(), TimeUnit.MILLISECONDS);', '} catch (Exception e) {', '}', '}', '});', 'answer = new MessageConsumerResources(session, messageConsumer, replyToDestination);', '} catch (Exception e) {']
['unable to create the messageconsumerresource ', ['e', 'getlocalizedmessage']]
camel sample_12393

['protected void doStart() throws Exception {', 'if (isEndpointTransacted()) {', 'throw new IllegalArgumentException("InOut exchange pattern is incompatible with transacted=true as it cuases a deadlock. Please use transacted=false or InOnly exchange pattern.");', '}', 'if (ObjectHelper.isEmpty(getNamedReplyTo())) {']
['no reply to destination is defined using temporary destinations ', []]
camel sample_12393

['protected void doStart() throws Exception {', 'if (isEndpointTransacted()) {', 'throw new IllegalArgumentException("InOut exchange pattern is incompatible with transacted=true as it cuases a deadlock. Please use transacted=false or InOnly exchange pattern.");', '}', 'if (ObjectHelper.isEmpty(getNamedReplyTo())) {', '} else {']
['using as the reply to destination ', ['getnamedreplyto']]
camel sample_12393

['consumers.returnObject(consumer);', 'producer.getMessageProducer().send(request);', 'try {', 'releaseProducerCallback.release(producer);', '} catch (Exception exception) {', '}', 'try {', 'responseObject = messageExchanger.exchange(null, getResponseTimeOut(), TimeUnit.MILLISECONDS);', 'EXCHANGERS.remove(correlationId);', '} catch (InterruptedException e) {']
['exchanger was interrupted while waiting on response ', ['e']]
camel sample_12393

['try {', 'releaseProducerCallback.release(producer);', '} catch (Exception exception) {', '}', 'try {', 'responseObject = messageExchanger.exchange(null, getResponseTimeOut(), TimeUnit.MILLISECONDS);', 'EXCHANGERS.remove(correlationId);', '} catch (InterruptedException e) {', 'exchange.setException(e);', '} catch (TimeoutException e) {']
['exchanger timed out while waiting on response ', ['e']]
camel sample_12393

['public String route(Exchange exchange) {', 'Message message = exchange.getIn().getBody(Message.class);', 'if (message != null) {', 'SessionID destinationSession = getDestinationSessionID(message);', 'if (destinationSession != null) {', 'String destinationUri = String.format("%s?sessionID=%s", engineUri, destinationSession);']
['routing destination ', ['destinationuri']]
camel sample_10654

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<AvroDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.avro.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.avro.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1144

['public Book findBook(String author) throws Exception {']
['finding book with author ', ['author']]
camel sample_14617

['public Book findAuthor(String title) throws Exception {']
['finding author with book ', ['title']]
camel sample_14617

['protected void initJsch()  {', 'JSch.setConfig("StrictHostKeyChecking",  "yes");', 'JSch.setLogger(new com.jcraft.jsch.Logger() {', 'public boolean isEnabled(int level) {', 'return level == FATAL || level == ERROR ? LOG.isErrorEnabled() : level == WARN ? LOG.isWarnEnabled() : level == INFO ? LOG.isInfoEnabled() : LOG.isDebugEnabled();', '}', 'public void log(int level, String message) {', 'if (level == FATAL || level == ERROR) {']
['jsch ', ['message']]
camel sample_9124

['protected void initJsch()  {', 'JSch.setConfig("StrictHostKeyChecking",  "yes");', 'JSch.setLogger(new com.jcraft.jsch.Logger() {', 'public boolean isEnabled(int level) {', 'return level == FATAL || level == ERROR ? LOG.isErrorEnabled() : level == WARN ? LOG.isWarnEnabled() : level == INFO ? LOG.isInfoEnabled() : LOG.isDebugEnabled();', '}', 'public void log(int level, String message) {', 'if (level == FATAL || level == ERROR) {', '} else if (level == WARN) {']
['jsch ', ['message']]
camel sample_9124

['JSch.setConfig("StrictHostKeyChecking",  "yes");', 'JSch.setLogger(new com.jcraft.jsch.Logger() {', 'public boolean isEnabled(int level) {', 'return level == FATAL || level == ERROR ? LOG.isErrorEnabled() : level == WARN ? LOG.isWarnEnabled() : level == INFO ? LOG.isInfoEnabled() : LOG.isDebugEnabled();', '}', 'public void log(int level, String message) {', 'if (level == FATAL || level == ERROR) {', '} else if (level == WARN) {', '} else if (level == INFO) {', 'if (isVerboseLogging()) {']
['jsch ', ['message']]
camel sample_9124

['JSch.setLogger(new com.jcraft.jsch.Logger() {', 'public boolean isEnabled(int level) {', 'return level == FATAL || level == ERROR ? LOG.isErrorEnabled() : level == WARN ? LOG.isWarnEnabled() : level == INFO ? LOG.isInfoEnabled() : LOG.isDebugEnabled();', '}', 'public void log(int level, String message) {', 'if (level == FATAL || level == ERROR) {', '} else if (level == WARN) {', '} else if (level == INFO) {', 'if (isVerboseLogging()) {', '} else {']
['jsch ', ['message']]
camel sample_9124

['return level == FATAL || level == ERROR ? LOG.isErrorEnabled() : level == WARN ? LOG.isWarnEnabled() : level == INFO ? LOG.isInfoEnabled() : LOG.isDebugEnabled();', '}', 'public void log(int level, String message) {', 'if (level == FATAL || level == ERROR) {', '} else if (level == WARN) {', '} else if (level == INFO) {', 'if (isVerboseLogging()) {', '} else {', '}', '} else {']
['jsch ', ['message']]
camel sample_9124

['protected void warnMissingUriParamOnProperty(String name) {']
['using property on endpoint which does not have a uriparam annotation please add the uriparam annotation to the field ', ['name', 'getendpointclass', 'getname', 'name']]
camel sample_4151

['try {', 'return (String) valueMethod.invoke(value);', '} catch (IllegalAccessException e) {', 'throw new IllegalArgumentException(e);', '} catch (InvocationTargetException e) {', 'throw new IllegalArgumentException(e);', '}', '}', '};', '} catch (NoSuchMethodException e) {']
['enumeration does not follow jaxb convention for conversion ', ['rawtype', 'getname']]
camel sample_8871

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {']
['service ', ['request']]
camel sample_10013

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {', 'HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());', 'if (consumer == null) {']
['no consumer to service request ', ['request']]
camel sample_10013

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {', 'HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());', 'if (consumer == null) {', 'response.sendError(HttpServletResponse.SC_NOT_FOUND);', 'return;', '}', 'if (consumer.isSuspended()) {']
['consumer suspended cannot service request ', ['request']]
camel sample_10013

['}', 'if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().equals(request.getMethod())) {', 'response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);', 'return;', '}', 'if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {', 'response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);', 'return;', '}', 'if (!(consumer instanceof WebsocketConsumer)) {']
['consumer not supporting websocket ', ['request']]
camel sample_10013

['return;', '}', 'if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {', 'response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);', 'return;', '}', 'if (!(consumer instanceof WebsocketConsumer)) {', 'response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);', 'return;', '}']
['dispatching to websocket consumer at ', ['consumer', 'getpath']]
camel sample_10013

['private void initParameters(ServletConfig config) {', 'String eventsResendingParameter = config.getInitParameter(RESEND_ALL_WEBSOCKET_EVENTS_PARAM_KEY);', 'if ("true".equals(eventsResendingParameter)) {']
['events resending enabled ', []]
camel sample_10013

['public void testAll() throws Exception {', 'final List<Plan> result = requestBody("direct: assertNotNull("all result", result);']
['all ', ['result']]
camel sample_17386

['public Metadata parse(Element element, ParserContext context) {', 'Metadata answer = null;', 'String s = element.getLocalName();', 'if ("cxfEndpoint".equals(s)) {']
['parsing the cxfendpoint element ', []]
camel sample_8037

['public Metadata parse(Element element, ParserContext context) {', 'Metadata answer = null;', 'String s = element.getLocalName();', 'if ("cxfEndpoint".equals(s)) {', 'answer = new EndpointDefinitionParser().parse(element, context);', '}', 'if ("rsClient".equals(s)) {']
['parsing the rsclient element ', []]
camel sample_8037

['public Metadata parse(Element element, ParserContext context) {', 'Metadata answer = null;', 'String s = element.getLocalName();', 'if ("cxfEndpoint".equals(s)) {', 'answer = new EndpointDefinitionParser().parse(element, context);', '}', 'if ("rsClient".equals(s)) {', 'answer = new RsClientDefinitionParser().parse(element, context);', '}', 'if ("rsServer".equals(s)) {']
['parsing the rsserver element ', []]
camel sample_8037

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'List<PropertiesLocation> paths = locations;', 'Boolean ignoreMissingLocationLoc = getAndRemoveParameter(parameters, "ignoreMissingLocation", Boolean.class);', 'if (ignoreMissingLocationLoc != null) {', 'ignoreMissingLocation = ignoreMissingLocationLoc;', '}', 'String locations = getAndRemoveParameter(parameters, "locations", String.class);', 'if (locations != null) {']
['overriding default locations with location ', ['locations']]
camel sample_4917

['List<PropertiesLocation> paths = locations;', 'Boolean ignoreMissingLocationLoc = getAndRemoveParameter(parameters, "ignoreMissingLocation", Boolean.class);', 'if (ignoreMissingLocationLoc != null) {', 'ignoreMissingLocation = ignoreMissingLocationLoc;', '}', 'String locations = getAndRemoveParameter(parameters, "locations", String.class);', 'if (locations != null) {', 'paths = Arrays.stream(locations.split(",")).map(PropertiesLocation::new).collect(Collectors.toList());', '}', 'String endpointUri = parseUri(remaining, paths);']
['endpoint uri parsed as ', ['endpointuri']]
camel sample_4917

['override.putAll(prop);', 'override.putAll(overrideProperties);', 'prop = override;', '}', 'if (!uri.contains(prefixToken) && !uri.startsWith(prefixToken)) {', 'uri = prefixToken + uri;', '}', 'if (!uri.contains(suffixToken) && !uri.endsWith(suffixToken)) {', 'uri = uri + suffixToken;', '}']
['parsing uri with properties ', ['uri', 'prop']]
camel sample_4917

['private List<PropertiesLocation> parseLocations(List<PropertiesLocation> locations) {', 'List<PropertiesLocation> answer = new ArrayList<>();', 'for (PropertiesLocation location : locations) {']
['parsing location ', ['location']]
camel sample_4917

['private List<PropertiesLocation> parseLocations(List<PropertiesLocation> locations) {', 'List<PropertiesLocation> answer = new ArrayList<>();', 'for (PropertiesLocation location : locations) {', 'try {', 'String path = FilePathResolver.resolvePath(location.getPath());']
['parsed location ', ['path']]
camel sample_4917

['for (PropertiesLocation location : locations) {', 'try {', 'String path = FilePathResolver.resolvePath(location.getPath());', 'if (ObjectHelper.isNotEmpty(path)) {', 'answer.add(new PropertiesLocation( location.getResolver(), path, location.isOptional()) );', '}', '} catch (IllegalArgumentException e) {', 'if (!ignoreMissingLocation && !location.isOptional()) {', 'throw e;', '} else {']
['ignored missing location ', ['location']]
camel sample_4917

['public void testQuery() throws Exception {', 'com.google.api.services.calendar.model.FreeBusyRequest request = new FreeBusyRequest();', 'List<FreeBusyRequestItem> items = new ArrayList<FreeBusyRequestItem>();', 'items.add(new FreeBusyRequestItem().setId(getCalendar().getId()));', 'request.setItems(items);', 'request.setTimeMin(DateTime.parseRfc3339("2014-11-10T20:45:30-00:00"));', 'request.setTimeMax(DateTime.parseRfc3339("2014-11-10T21:45:30-00:00"));', 'final com.google.api.services.calendar.model.FreeBusyResponse result = requestBody("direct: assertNotNull("query result", result);']
['query ', ['result']]
camel sample_11747

['protected void doStart() throws Exception {', 'if (objectMapper == null) {', 'if (camelContext != null) {', 'Set<ObjectMapper> set = camelContext.getRegistry().findByType(ObjectMapper.class);', 'if (set.size() == 1) {', 'objectMapper = set.iterator().next();']
['found single objectmapper in registry to use ', ['objectmapper']]
camel sample_10855

['protected void doStart() throws Exception {', 'if (objectMapper == null) {', 'if (camelContext != null) {', 'Set<ObjectMapper> set = camelContext.getRegistry().findByType(ObjectMapper.class);', 'if (set.size() == 1) {', 'objectMapper = set.iterator().next();', '} else if (set.size() > 1) {']
['found objectmapper in registry cannot use as default as there are more than one instance ', ['set', 'size']]
camel sample_10855

['if (objectMapper == null) {', 'if (camelContext != null) {', 'Set<ObjectMapper> set = camelContext.getRegistry().findByType(ObjectMapper.class);', 'if (set.size() == 1) {', 'objectMapper = set.iterator().next();', '} else if (set.size() > 1) {', '}', '}', 'if (objectMapper == null) {', 'objectMapper = new ObjectMapper();']
['creating new objectmapper to use ', ['objectmapper']]
camel sample_10855

['objectMapper = set.iterator().next();', '} else if (set.size() > 1) {', '}', '}', 'if (objectMapper == null) {', 'objectMapper = new ObjectMapper();', '}', '}', 'if (enableJaxbAnnotationModule) {', 'JaxbAnnotationModule module = new JaxbAnnotationModule();']
['registering jaxbannotationmodule ', ['module']]
camel sample_10855

['MapperFeature mf = getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class, disable);', 'if (mf != null) {', 'objectMapper.disable(mf);', 'continue;', '}', 'throw new IllegalArgumentException("Disable feature: " + disable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]");', '}', '}', 'if (modules != null) {', 'for (Module module : modules) {']
['registering module ', ['module']]
camel sample_10855

['for (Module module : modules) {', 'objectMapper.registerModules(module);', '}', '}', 'if (moduleClassNames != null) {', 'Iterable<Object> it = ObjectHelper.createIterable(moduleClassNames);', 'for (Object o : it) {', 'String name = o.toString();', 'Class<Module> clazz = camelContext.getClassResolver().resolveMandatoryClass(name, Module.class);', 'Module module = camelContext.getInjector().newInstance(clazz);']
['registering module ', ['name', 'module']]
camel sample_10855

['}', '}', 'if (moduleRefs != null) {', 'Iterable<Object> it = ObjectHelper.createIterable(moduleRefs);', 'for (Object o : it) {', 'String name = o.toString();', 'if (name.startsWith("#")) {', 'name = name.substring(1);', '}', 'Module module = CamelContextHelper.mandatoryLookup(camelContext, name, Module.class);']
['registering module ', ['name', 'module']]
camel sample_10855

['for (Object o : it) {', 'String name = o.toString();', 'if (name.startsWith("#")) {', 'name = name.substring(1);', '}', 'Module module = CamelContextHelper.mandatoryLookup(camelContext, name, Module.class);', 'objectMapper.registerModule(module);', '}', '}', 'if (ObjectHelper.isNotEmpty(timezone)) {']
['setting timezone to object mapper ', ['timezone']]
camel sample_10855

['public void process(Exchange exchange) throws Exception {', 'List<String> params = new ArrayList<String>();', 'params.add(exchange.getIn().getBody(String.class));', 'exchange.getOut().setBody(params);', 'String operation = (String)exchange.getIn().getHeader(CxfConstants.OPERATION_NAME);']
['the operation name is ', ['operation']]
camel sample_6029

['public void testAddFolderCollaborationByEmail() throws Exception {', 'deleteTestCollaborator();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.email", CAMEL_TEST_COLLABORATOR_EMAIL);', 'headers.put("CamelBox.role", BoxCollaboration.Role.EDITOR);', 'final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct: testFolder.getID(), headers);', 'assertNotNull("addFolderCollaboration result", result);']
['addfoldercollaboration ', ['result']]
camel sample_17410

['try {', 'CreateUserParams params = new CreateUserParams();', 'params.setSpaceAmount(1073741824);', 'user = BoxUser.createAppUser(getConnection(), CAMEL_TEST_COLLABORATOR_NAME, params).getResource();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.collaborator", user);', 'headers.put("CamelBox.role", BoxCollaboration.Role.EDITOR);', 'final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct: testFolder.getID(), headers);', 'assertNotNull("addFolderCollaboration result", result);']
['addfoldercollaboration ', ['result']]
camel sample_17410

['public void testGetCollaborationInfo() throws Exception {', 'final com.box.sdk.BoxCollaboration.Info result = requestBody("direct: testCollaboration.getID());', 'assertNotNull("getCollaborationInfo result", result);']
['getcollaborationinfo ', ['result']]
camel sample_17410

['public void testGetFolderCollaborations() throws Exception {', 'final java.util.Collection result = requestBody("direct: assertNotNull("getFolderCollaborations result", result);']
['getfoldercollaborations ', ['result']]
camel sample_17410

['public void testGetPendingCollaborations() throws Exception {', 'final java.util.Collection result = requestBody("direct: assertNotNull("getPendingCollaborations result", result);']
['getpendingcollaborations ', ['result']]
camel sample_17410

['public void testUpdateCollaborationInfo() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.collaborationId", testCollaboration.getID());', 'BoxCollaboration.Info info = testCollaboration.getInfo();', 'info.setRole(BoxCollaboration.Role.PREVIEWER);', 'headers.put("CamelBox.info", info);', 'final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct: headers);', 'assertNotNull("updateCollaborationInfo result", result);', 'assertNotNull("updateCollaborationInfo info", result.getInfo());', 'assertEquals("updateCollaborationInfo info", BoxCollaboration.Role.PREVIEWER, result.getInfo().getRole());']
['updatecollaborationinfo ', ['result']]
camel sample_17410

['String jwtToken = metadata.get(GrpcConstants.GRPC_JWT_METADATA_KEY);', 'if (jwtToken == null) {', 'call.close(Status.UNAUTHENTICATED.withDescription("JWT Token is missing from metadata"), metadata);', 'return NOOP_LISTENER;', '}', 'Context ctx;', 'try {', 'DecodedJWT verified = verifier.verify(jwtToken);', 'ctx = Context.current() .withValue(GrpcConstants.GRPC_JWT_USER_ID_CTX_KEY, verified.getSubject() == null ? "anonymous" : verified.getSubject()) .withValue(GrpcConstants.GRPC_JWT_CTX_KEY, jwtToken);', '} catch (Exception e) {']
['jwt token verification failed unauthenticated ', []]
camel sample_7511

['public AbstractJIRAConsumer(JIRAEndpoint endpoint, Processor processor) {', 'super(endpoint, processor);', 'this.endpoint = endpoint;', 'setDelay(endpoint.getDelay());', 'JerseyJiraRestClientFactory factory;', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object target = registry.lookupByName("JerseyJiraRestClientFactory");', 'if (target != null) {']
['jerseyjirarestclientfactory found in registry ', ['target', 'getclass', 'getcanonicalname']]
camel sample_13003

['protected List<BasicIssue> getIssues(String jql, int start, int maxResults, int maxPerQuery) {']
['indexing current jira issues ', []]
camel sample_13003

['public Consumer createConsumer(Processor processor) throws Exception {', 'NettyHttpConsumer answer = new NettyHttpConsumer(this, processor, getConfiguration());', 'configureConsumer(answer);', 'if (nettySharedHttpServer != null) {', 'answer.setNettyServerBootstrapFactory(nettySharedHttpServer.getServerBootstrapFactory());']
['nettyhttpconsumer is using nettysharedhttpserver on port ', ['answer', 'nettysharedhttpserver', 'getport']]
camel sample_16651

['public Consumer createConsumer(Processor processor) throws Exception {', 'NettyHttpConsumer answer = new NettyHttpConsumer(this, processor, getConfiguration());', 'configureConsumer(answer);', 'if (nettySharedHttpServer != null) {', 'answer.setNettyServerBootstrapFactory(nettySharedHttpServer.getServerBootstrapFactory());', '} else {', 'HttpServerBootstrapFactory factory = getComponent().getOrCreateHttpNettyServerBootstrapFactory(answer);', 'answer.setNettyServerBootstrapFactory(factory);']
['created nettyhttpconsumer using httpserverbootstrapfactory ', ['answer', 'factory']]
camel sample_16651

['protected void doStart() throws Exception {', 'super.doStart();', 'ObjectHelper.notNull(nettyHttpBinding, "nettyHttpBinding", this);', 'ObjectHelper.notNull(headerFilterStrategy, "headerFilterStrategy", this);', 'if (securityConfiguration != null) {', 'ObjectHelper.notEmpty(securityConfiguration.getRealm(), "realm", securityConfiguration);', 'ObjectHelper.notEmpty(securityConfiguration.getConstraint(), "restricted", securityConfiguration);', 'if (securityConfiguration.getSecurityAuthenticator() == null) {', 'JAASSecurityAuthenticator jaas = new JAASSecurityAuthenticator();', 'jaas.setName(securityConfiguration.getRealm());']
['no securityauthenticator configured using jaassecurityauthenticator as authenticator ', ['jaas']]
camel sample_16651

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CoAPComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.coap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.coap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1095

['protected void doStart() throws Exception {', 'ObjectHelper.notEmpty(cron, "cron", this);', 'trigger = new CronTrigger(getCron(), getTimeZone());', 'if (taskScheduler == null) {', 'taskScheduler = new CamelThreadPoolTaskScheduler(getCamelContext(), consumer, consumer.getEndpoint().getEndpointUri());', 'taskScheduler.afterPropertiesSet();', 'destroyTaskScheduler = true;', '}']
['scheduling cron trigger ', ['getcron']]
camel sample_16344

['protected void onCompletion(Exchange exchange) {', 'GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();']
['done processing file using exchange ', ['file', 'exchange']]
camel sample_4782

['if (endpoint.getIdempotentKey() != null) {', 'Exchange dummy = endpoint.createExchange(file);', 'key = endpoint.getIdempotentKey().evaluate(dummy, String.class);', '}', 'if (key != null) {', 'endpoint.getIdempotentRepository().add(key);', '}', '}', 'handleDoneFile(exchange);', 'try {']
['commit file strategy for file ', ['processstrategy', 'file']]
camel sample_4782

['protected void processStrategyRollback(GenericFileProcessStrategy<T> processStrategy, Exchange exchange, GenericFile<T> file) {', 'if (log.isWarnEnabled()) {']
['rollback file strategy for file ', ['processstrategy', 'file']]
camel sample_4782

['protected void handleDoneFile(Exchange exchange) {', 'boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);', 'if (endpoint.getDoneFileName() != null && !endpoint.isNoop()) {', 'String doneFileName = endpoint.createDoneFileName(absoluteFileName);', 'ObjectHelper.notEmpty(doneFileName, "doneFileName", endpoint);', 'if (endpoint.getDoneFileName().indexOf("{file:name") > 0 || complete) {', 'try {', 'boolean deleted = operations.deleteFile(doneFileName);']
['done file was deleted ', ['donefilename', 'deleted']]
camel sample_4782

['protected void handleDoneFile(Exchange exchange) {', 'boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);', 'if (endpoint.getDoneFileName() != null && !endpoint.isNoop()) {', 'String doneFileName = endpoint.createDoneFileName(absoluteFileName);', 'ObjectHelper.notEmpty(doneFileName, "doneFileName", endpoint);', 'if (endpoint.getDoneFileName().indexOf("{file:name") > 0 || complete) {', 'try {', 'boolean deleted = operations.deleteFile(doneFileName);', 'if (!deleted) {']
['done file could not be deleted ', ['donefilename']]
camel sample_4782

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'int polledMessages = 0;', 'ensureIsConnected();', 'if (store == null || folder == null) {', 'throw new IllegalStateException("MailConsumer did not connect properly to the MailStore: " + getEndpoint().getConfiguration().getMailStoreLogInformation());', '}', 'if (LOG.isDebugEnabled()) {']
['polling mailbox folder ', ['getendpoint', 'getconfiguration', 'getmailstoreloginformation']]
camel sample_11878

['shutdownRunningTask = null;', 'pendingExchanges = 0;', 'int polledMessages = 0;', 'ensureIsConnected();', 'if (store == null || folder == null) {', 'throw new IllegalStateException("MailConsumer did not connect properly to the MailStore: " + getEndpoint().getConfiguration().getMailStoreLogInformation());', '}', 'if (LOG.isDebugEnabled()) {', '}', 'if (getEndpoint().getConfiguration().getFetchSize() == 0) {']
['fetch size is meaning the configuration is set to poll no new messages at all camel will skip this poll ', []]
camel sample_11878

['postProcessor.process(folder);', '}', '} else if (count == -1) {', 'throw new MessagingException("Folder: " + folder.getFullName() + " is closed");', '}', '} catch (Exception e) {', 'handleException(e);', '} finally {', 'if (getEndpoint().getConfiguration().isCloseFolder() || getEndpoint().getConfiguration().isDisconnect()) {', 'if (LOG.isDebugEnabled()) {']
['close mailbox folder from ', ['folder', 'getname', 'getendpoint', 'getconfiguration', 'getmailstoreloginformation']]
camel sample_11878

['handleException(e);', '} finally {', 'if (getEndpoint().getConfiguration().isCloseFolder() || getEndpoint().getConfiguration().isDisconnect()) {', 'if (LOG.isDebugEnabled()) {', '}', 'try {', 'if (folder.isOpen()) {', 'folder.close(true);', '}', '} catch (Exception e) {']
['could not close mailbox folder this exception is ignored ', ['folder', 'getname', 'e']]
camel sample_11878

['if (folder.isOpen()) {', 'folder.close(true);', '}', '} catch (Exception e) {', '}', '}', '}', 'boolean disconnect = getEndpoint().getConfiguration().isDisconnect();', 'if (disconnect) {', 'if (LOG.isDebugEnabled()) {']
['disconnecting from ', ['getendpoint', 'getconfiguration', 'getmailstoreloginformation']]
camel sample_11878

['}', '}', '}', 'boolean disconnect = getEndpoint().getConfiguration().isDisconnect();', 'if (disconnect) {', 'if (LOG.isDebugEnabled()) {', '}', 'try {', 'store.close();', '} catch (Exception e) {']
['could not disconnect from this exception is ignored ', ['getendpoint', 'getconfiguration', 'getmailstoreloginformation', 'e']]
camel sample_11878

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_11878

['private void peekMessage(Message mail) {', 'if (mail.getClass().getSimpleName().startsWith("IMAP")) {', 'try {']
['calling setpeek true on mail message ', ['mail']]
camel sample_11878

['private void peekMessage(Message mail) {', 'if (mail.getClass().getSimpleName().startsWith("IMAP")) {', 'try {', 'IntrospectionSupport.setProperty(mail, "peek", true);', '} catch (Throwable e) {']
['error setting peak property to true on this exception is ignored ', ['mail', 'e']]
camel sample_11878

['private Message[] retrieveAllMessages() throws MessagingException {', 'int total = folder.getMessageCount();', 'List<Message> msgs = new ArrayList<Message>();', 'for (int i = 1; i <= total; i++) {', 'try {', 'Message msg = folder.getMessage(i);', 'msgs.add(msg);', '} catch (Exception e) {', 'if (skipFailedMessage) {']
['skipping failed message at index due ', ['i', 'e', 'getmessage', 'e']]
camel sample_11878

['private boolean isValidMessage(String key, Message msg) {', 'boolean answer = true;', 'if (getEndpoint().getIdempotentRepository() != null) {', 'if (!getEndpoint().getIdempotentRepository().add(key)) {']
['this consumer is idempotent and the mail message has been consumed before matching idempotentkey will skip this message ', ['key', 'msg']]
camel sample_11878

['private boolean isValidMessage(String key, Message msg) {', 'boolean answer = true;', 'if (getEndpoint().getIdempotentRepository() != null) {', 'if (!getEndpoint().getIdempotentRepository().add(key)) {', 'answer = false;', '}', '}']
['message with key is valid ', ['msg', 'key', 'answer']]
camel sample_11878

['protected Queue<Exchange> createExchanges(List<KeyValueHolder<String, Message>> messages) throws MessagingException {', 'Queue<Exchange> answer = new LinkedList<Exchange>();', 'int fetchSize = getEndpoint().getConfiguration().getFetchSize();', 'int count = fetchSize == -1 ? messages.size() : Math.min(fetchSize, messages.size());', 'if (LOG.isDebugEnabled()) {']
['fetching messages total messages ', ['count', 'messages', 'size']]
camel sample_11878

['int fetchSize = getEndpoint().getConfiguration().getFetchSize();', 'int count = fetchSize == -1 ? messages.size() : Math.min(fetchSize, messages.size());', 'if (LOG.isDebugEnabled()) {', '}', 'for (int i = 0; i < count; i++) {', 'try {', 'KeyValueHolder<String, Message> holder = messages.get(i);', 'String key = holder.getKey();', 'Message message = holder.getValue();', 'if (LOG.isTraceEnabled()) {']
['mail is of type ', ['new', 'object', 'i', 'objecthelper', 'classcanonicalname', 'message', 'message']]
camel sample_11878

['for (int i = 0; i < count; i++) {', 'try {', 'KeyValueHolder<String, Message> holder = messages.get(i);', 'String key = holder.getKey();', 'Message message = holder.getValue();', 'if (LOG.isTraceEnabled()) {', '}', 'if (!message.getFlags().contains(Flags.Flag.DELETED)) {', 'Exchange exchange = getEndpoint().createExchange(message);', 'if (getEndpoint().getConfiguration().isMapMailMessage()) {']
['mapping from javax mail message to camel mailmessage ', ['i']]
camel sample_11878

['Exchange exchange = getEndpoint().createExchange(message);', 'if (getEndpoint().getConfiguration().isMapMailMessage()) {', 'exchange.getIn().getBody();', 'exchange.getIn().getHeaders();', 'exchange.getIn().getAttachments();', '}', 'exchange.setProperty(MAIL_MESSAGE_UID, key);', 'answer.add(exchange);', '} else {', 'if (LOG.isDebugEnabled()) {']
['skipping message as it was flagged as deleted ', ['mailutils', 'dumpmessage', 'message']]
camel sample_11878

['exchange.getIn().getAttachments();', '}', 'exchange.setProperty(MAIL_MESSAGE_UID, key);', 'answer.add(exchange);', '} else {', 'if (LOG.isDebugEnabled()) {', '}', '}', '} catch (Exception e) {', 'if (skipFailedMessage) {']
['skipping failed message at index due ', ['i', 'e', 'getmessage', 'e']]
camel sample_11878

['protected void processExchange(Exchange exchange) throws Exception {', 'if (LOG.isDebugEnabled()) {', 'MailMessage msg = (MailMessage) exchange.getIn();']
['processing message ', ['mailutils', 'dumpmessage', 'msg', 'getmessage']]
camel sample_11878

['protected void processCommit(Message mail, Exchange exchange) {', 'try {', 'if (!folder.isOpen()) {', 'folder.open(Folder.READ_WRITE);', '}', 'String uid = (String) exchange.removeProperty(MAIL_MESSAGE_UID);', 'if (getEndpoint().getConfiguration().getProtocol().startsWith("pop3")) {', 'int count = folder.getMessageCount();', 'Message found = null;']
['looking for with uid from folder with mails ', ['uid', 'count']]
camel sample_11878

['if (!folder.isOpen()) {', 'folder.open(Folder.READ_WRITE);', '}', 'String uid = (String) exchange.removeProperty(MAIL_MESSAGE_UID);', 'if (getEndpoint().getConfiguration().getProtocol().startsWith("pop3")) {', 'int count = folder.getMessageCount();', 'Message found = null;', 'for (int i = 1; i <= count; ++i) {', 'Message msg = folder.getMessage(i);', 'if (uid.equals(getEndpoint().getMailUidGenerator().generateUuid(getEndpoint(), msg))) {']
['found with uid from folder with mails ', ['uid', 'count']]
camel sample_11878

['Message found = null;', 'for (int i = 1; i <= count; ++i) {', 'Message msg = folder.getMessage(i);', 'if (uid.equals(getEndpoint().getMailUidGenerator().generateUuid(getEndpoint(), msg))) {', 'found = msg;', 'break;', '}', '}', 'if (found == null) {', 'boolean delete = getEndpoint().getConfiguration().isDelete();']
['not found in folder message cannot be marked as DELETED SEEN ', ['delete']]
camel sample_11878

['} else {', 'mail = found;', '}', '}', 'org.apache.camel.Message in = exchange.getIn();', 'MailConfiguration config = getEndpoint().getConfiguration();', 'String copyTo = in.getHeader("copyTo", config.getCopyTo(), String.class);', 'boolean delete = in.getHeader("delete", config.isDelete(), boolean.class);', 'if (config.getProtocol().equals(MailUtils.PROTOCOL_IMAP) || config.getProtocol().equals(MailUtils.PROTOCOL_IMAPS)) {', 'if (copyTo != null) {']
['imap message needs to be copied to ', ['copyto']]
camel sample_11878

['MailConfiguration config = getEndpoint().getConfiguration();', 'String copyTo = in.getHeader("copyTo", config.getCopyTo(), String.class);', 'boolean delete = in.getHeader("delete", config.isDelete(), boolean.class);', 'if (config.getProtocol().equals(MailUtils.PROTOCOL_IMAP) || config.getProtocol().equals(MailUtils.PROTOCOL_IMAPS)) {', 'if (copyTo != null) {', 'Folder destFolder = store.getFolder(copyTo);', 'if (!destFolder.exists()) {', 'destFolder.create(Folder.HOLDS_MESSAGES);', '}', 'folder.copyMessages(new Message[]{mail}, destFolder);']
['imap message copied to ', ['mail', 'copyto']]
camel sample_11878

['if (config.getProtocol().equals(MailUtils.PROTOCOL_IMAP) || config.getProtocol().equals(MailUtils.PROTOCOL_IMAPS)) {', 'if (copyTo != null) {', 'Folder destFolder = store.getFolder(copyTo);', 'if (!destFolder.exists()) {', 'destFolder.create(Folder.HOLDS_MESSAGES);', '}', 'folder.copyMessages(new Message[]{mail}, destFolder);', '}', '}', 'if (delete) {']
['exchange processed so flagging message as deleted ', []]
camel sample_11878

['Folder destFolder = store.getFolder(copyTo);', 'if (!destFolder.exists()) {', 'destFolder.create(Folder.HOLDS_MESSAGES);', '}', 'folder.copyMessages(new Message[]{mail}, destFolder);', '}', '}', 'if (delete) {', 'mail.setFlag(Flags.Flag.DELETED, true);', '} else {']
['exchange processed so flagging message as seen ', []]
camel sample_11878

['protected void processRollback(Message mail, Exchange exchange) {', 'String uid = (String) exchange.removeProperty(MAIL_MESSAGE_UID);', 'if (getEndpoint().getIdempotentRepository() != null) {', 'getEndpoint().getIdempotentRepository().remove(uid);', '}', 'Exception cause = exchange.getException();', 'if (cause != null) {']
['exchange failed so rolling back message status ', ['exchange', 'cause']]
camel sample_11878

['protected void processRollback(Message mail, Exchange exchange) {', 'String uid = (String) exchange.removeProperty(MAIL_MESSAGE_UID);', 'if (getEndpoint().getIdempotentRepository() != null) {', 'getEndpoint().getIdempotentRepository().remove(uid);', '}', 'Exception cause = exchange.getException();', 'if (cause != null) {', '} else {']
['exchange failed so rolling back message status ', ['exchange']]
camel sample_11878

['private void ensureIsConnected() throws MessagingException {', 'MailConfiguration config = getEndpoint().getConfiguration();', 'boolean connected = false;', 'try {', 'if (store != null && store.isConnected()) {', 'connected = true;', '}', '} catch (Exception e) {']
['exception while testing for is connected to mailstore caused by ', ['getendpoint', 'getconfiguration', 'getmailstoreloginformation', 'e', 'getmessage', 'e']]
camel sample_11878

['try {', 'if (store != null && store.isConnected()) {', 'connected = true;', '}', '} catch (Exception e) {', '}', 'if (!connected) {', 'store = null;', 'folder = null;', 'if (LOG.isDebugEnabled()) {']
['connecting to mailstore ', ['getendpoint', 'getconfiguration', 'getmailstoreloginformation']]
camel sample_11878

['store = null;', 'folder = null;', 'if (LOG.isDebugEnabled()) {', '}', 'store = sender.getSession().getStore(config.getProtocol());', 'store.connect(config.getHost(), config.getPort(), config.getUsername(), config.getPassword());', 'serverCanSort = hasSortCapability(store);', '}', 'if (folder == null) {', 'if (LOG.isDebugEnabled()) {']
['getting folder ', ['config', 'getfoldername']]
camel sample_11878

['if (exchange == null) {', 'return;', '}', 'if (exchange.getUnitOfWork() == null) {', 'List<Synchronization> synchronizations = exchange.handoverCompletions();', 'UnitOfWorkHelper.doneSynchronizations(exchange, synchronizations, LOG);', '} else {', 'exchange.getUnitOfWork().done(exchange);', '}', '} catch (Throwable e) {']
['exception occurred during done unitofwork for exchange this exception will be ignored ', ['exchange', 'e']]
camel sample_3944

['public void process(Exchange exchange) {', 'Integer counter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class);', 'int attempt = (counter == null) ? 1 : counter + 1;', 'if (attempt < failUntilAttempt) {', 'throw new RuntimeException("Failed to process due to attempt: " + attempt + " being less than: " + failUntilAttempt);', '}', '}', '};', 'return new RouteBuilder() {', 'public void configure() {']
['direct start mock failed mock success ', ['errorhandler', 'deadletterchannel', 'maximumredeliveries', 'redeliverydelay', 'logginglevel', 'logginglevel', 'debug', 'process', 'processor', 'to']]
camel sample_2656

['public Component resolveComponent(String name, CamelContext context) throws Exception {', 'Component componentReg = ResolverHelper.lookupComponentInRegistryWithFallback(context, name, new ResolverHelper.LookupExceptionHandler() {', 'public void handleException(Exception e, Logger log, String name) {', 'if (getException(NoSuchComponentException.class, e) != null) {', '} else {']
['ignored error looking up bean due ', ['name', 'e', 'getmessage', 'e']]
camel sample_8125

['} else {', '}', '}', '});', 'if (componentReg != null) {', 'return componentReg;', '}', 'try {', 'Object bean = context.getRegistry().lookupByName(".camelBlueprint.componentResolver." + name);', 'if (bean instanceof ComponentResolver) {']
['found component resolver in registry ', ['name', 'bean']]
camel sample_8125

['});', 'if (componentReg != null) {', 'return componentReg;', '}', 'try {', 'Object bean = context.getRegistry().lookupByName(".camelBlueprint.componentResolver." + name);', 'if (bean instanceof ComponentResolver) {', 'return ((ComponentResolver) bean).resolveComponent(name, context);', '}', '} catch (Exception e) {']
['ignored error looking up bean due ', ['name', 'e', 'getmessage', 'e']]
camel sample_8125

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<CastorDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.castor.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.castor.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_799

['public void testLuceneIndexProducer() throws Exception {', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:result");', 'context.stop();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). to("lucene:stdQuotesIndex:insert?analyzer=#stdAnalyzer&indexDir=#std&srcDir=#load_dir"). to("lucene:simpleQuotesIndex:insert?analyzer=#simpleAnalyzer&indexDir=#simple&srcDir=#load_dir"). to("lucene:whitespaceQuotesIndex:insert?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&srcDir=#load_dir"). to("mock:result");', '}', '});', 'context.start();']
['beginning luceneindexproducer test ', []]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). to("lucene:stdQuotesIndex:insert?analyzer=#stdAnalyzer&indexDir=#std&srcDir=#load_dir"). to("lucene:simpleQuotesIndex:insert?analyzer=#simpleAnalyzer&indexDir=#simple&srcDir=#load_dir"). to("lucene:whitespaceQuotesIndex:insert?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&srcDir=#load_dir"). to("mock:result");', '}', '});', 'context.start();', 'for (String quote : humorousQuotes) {', 'sendRequest(quote);', '}', 'mockEndpoint.assertIsSatisfied();']
['completed luceneindexproducer test ', []]
camel sample_6838

['context.stop();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Seinfeld")). to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Seinfeld")). to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit index location ', ['i', 'hits', 'gethit', 'get', 'i', 'gethitlocation']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Seinfeld")). to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit score ', ['i', 'hits', 'gethit', 'get', 'i', 'getscore']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Seinfeld")). to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit data ', ['i', 'hits', 'gethit', 'get', 'i', 'getdata']]
camel sample_6838

['printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();']
['beginning lucenequeryproducer phrase test ', []]
camel sample_6838

['private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();', 'sendQuery();', 'mockSearchEndpoint.assertIsSatisfied();']
['completed lucenequeryproducer phrase test ', []]
camel sample_6838

['context.stop();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Grouc?? Marx")). to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Grouc?? Marx")). to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit index location ', ['i', 'hits', 'gethit', 'get', 'i', 'gethitlocation']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Grouc?? Marx")). to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit score ', ['i', 'hits', 'gethit', 'get', 'i', 'getscore']]
camel sample_6838

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). setHeader("QUERY", constant("Grouc?? Marx")). to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20"). to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit data ', ['i', 'hits', 'gethit', 'get', 'i', 'getdata']]
camel sample_6838

['printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();']
['beginning lucenequeryproducer wildcard test ', []]
camel sample_6838

['private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();', 'sendQuery();', 'mockSearchEndpoint.assertIsSatisfied();']
['completed lucenequeryproducer wildcard test ', []]
camel sample_6838

['public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'try {', 'printResults(hits);', '} catch (Exception e) {', 'LOG.error(e.getMessage());', 'exchange.getOut().setBody(null);', '}', '}', 'private void printResults(Hits hits) throws Exception {']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6838

['Hits hits = exchange.getIn().getBody(Hits.class);', 'try {', 'printResults(hits);', '} catch (Exception e) {', 'LOG.error(e.getMessage());', 'exchange.getOut().setBody(null);', '}', '}', 'private void printResults(Hits hits) throws Exception {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit index location ', ['i', 'hits', 'gethit', 'get', 'i', 'gethitlocation']]
camel sample_6838

['Hits hits = exchange.getIn().getBody(Hits.class);', 'try {', 'printResults(hits);', '} catch (Exception e) {', 'LOG.error(e.getMessage());', 'exchange.getOut().setBody(null);', '}', '}', 'private void printResults(Hits hits) throws Exception {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit score ', ['i', 'hits', 'gethit', 'get', 'i', 'getscore']]
camel sample_6838

['Hits hits = exchange.getIn().getBody(Hits.class);', 'try {', 'printResults(hits);', '} catch (Exception e) {', 'LOG.error(e.getMessage());', 'exchange.getOut().setBody(null);', '}', '}', 'private void printResults(Hits hits) throws Exception {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit data ', ['i', 'hits', 'gethit', 'get', 'i', 'getdata']]
camel sample_6838

['}', '}', '}).to("mock:searchResult").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'if (hits == null) {', 'HashMap<String, String> map = new HashMap<String, String>();', 'map.put("NO_LUCENE_DOCS_ERROR", "NO LUCENE DOCS FOUND");', 'exchange.getContext().setProperties(map);', '}']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6838

['if (hits == null) {', 'HashMap<String, String> map = new HashMap<String, String>();', 'map.put("NO_LUCENE_DOCS_ERROR", "NO LUCENE DOCS FOUND");', 'exchange.getContext().setProperties(map);', '}', '}', '});', '}', '});', 'context.start();']
['beginning lucenequeryproducer wildcard with return lucene docs test ', []]
camel sample_6838

['exchange.getContext().setProperties(map);', '}', '}', '});', '}', '});', 'context.start();', 'sendQuery();', 'mockSearchEndpoint.assertIsSatisfied();', 'Map<String, String> errorMap = mockSearchEndpoint.getCamelContext().getProperties();']
['completed lucenequeryproducer wildcard with return lucene docs test ', []]
camel sample_6838

['byte[] bytes = serializer.serialize(s);', 'try {', 'synchronized (dataSet) {', 'if (dataSet.has(bytes)) {', 'return false;', '} else {', 'return dataSet.add(serializer.serialize(s));', '}', '}', '} catch (Exception e) {']
['error adding item to krati idempotent repository this exception is ignored ', ['e']]
camel sample_14007

['public boolean contains(String s) {', 'byte[] bytes = serializer.serialize(s);', 'try {', 'return dataSet.has(bytes);', '} catch (Exception e) {']
['error checking item exists in krati idempotent repository this exception is ignored ', ['e']]
camel sample_14007

['public boolean remove(String s) {', 'byte[] bytes = serializer.serialize(s);', 'try {', 'return dataSet.delete(bytes);', '} catch (Exception e) {']
['error removing item from krati idempotent repository this exception is ignored ', ['e']]
camel sample_14007

['public void clear() {', 'try {', 'dataSet.clear();', '} catch (Exception e) {']
['error clear krati idempotent repository this exception is ignored ', ['e']]
camel sample_14007

['protected void doStart() throws Exception {', 'super.doStart();', 'this.targetAddress = GenericAddress.parse(this.endpoint.getAddress());']
['targetaddress ', ['targetaddress']]
camel sample_8826

['public void process(final Exchange exchange) throws Exception {', 'Snmp snmp = null;', 'TransportMapping<? extends Address> transport = null;', 'try {']
['starting snmp producer on ', ['this', 'endpoint', 'getaddress']]
camel sample_8826

['TransportMapping<? extends Address> transport = null;', 'try {', 'if ("tcp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultTcpTransportMapping();', '} else if ("udp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultUdpTransportMapping();', '} else {', 'throw new IllegalArgumentException("Unknown protocol: {} " + this.endpoint.getProtocol());', '}', 'snmp = new Snmp(transport);']
['snmp i am sending ', []]
camel sample_8826

['if ("tcp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultTcpTransportMapping();', '} else if ("udp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultUdpTransportMapping();', '} else {', 'throw new IllegalArgumentException("Unknown protocol: {} " + this.endpoint.getProtocol());', '}', 'snmp = new Snmp(transport);', 'snmp.listen();', 'ResponseEvent responseEvent = snmp.send(this.pdu, this.target);']
['snmp sended ', []]
camel sample_8826

['public void await(Exchange exchange, CountDownLatch latch) {']
['waiting for asynchronous callback before continuing for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4106

['public void await(Exchange exchange, CountDownLatch latch) {', 'try {', 'if (statistics.isStatisticsEnabled()) {', 'blockedCounter.incrementAndGet();', '}', 'inflight.put(exchange, new AwaitThreadEntry(Thread.currentThread(), exchange, latch));', 'latch.await();']
['asynchronous callback received will continue routing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4106

['public void await(Exchange exchange, CountDownLatch latch) {', 'try {', 'if (statistics.isStatisticsEnabled()) {', 'blockedCounter.incrementAndGet();', '}', 'inflight.put(exchange, new AwaitThreadEntry(Thread.currentThread(), exchange, latch));', 'latch.await();', '} catch (InterruptedException e) {']
['interrupted while waiting for callback will continue routing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4106

['public void countDown(Exchange exchange, CountDownLatch latch) {']
['asynchronous callback received for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4106

['protected void doStop() throws Exception {', 'Collection<AwaitThread> threads = browse();', 'int count = threads.size();', 'if (count > 0) {']
['shutting down while there are still inflight threads currently blocked ', ['count']]
camel sample_4106

['protected void doStop() throws Exception {', 'Collection<AwaitThread> threads = browse();', 'int count = threads.size();', 'if (count > 0) {', 'StringBuilder sb = new StringBuilder();', 'for (AwaitThread entry : threads) {', 'sb.append(dumpBlockedThread(entry));', '}', 'if (isInterruptThreadsWhileStopping()) {']
['the following threads are blocked and will be interrupted so the threads are released ', ['sb', 'tostring']]
camel sample_4106

['if (count > 0) {', 'StringBuilder sb = new StringBuilder();', 'for (AwaitThread entry : threads) {', 'sb.append(dumpBlockedThread(entry));', '}', 'if (isInterruptThreadsWhileStopping()) {', 'for (AwaitThread entry : threads) {', 'try {', 'interrupt(entry.getExchange());', '} catch (Throwable e) {']
['error while interrupting thread this exception is ignored ', ['entry', 'getblockedthread', 'getname', 'e']]
camel sample_4106

['sb.append(dumpBlockedThread(entry));', '}', 'if (isInterruptThreadsWhileStopping()) {', 'for (AwaitThread entry : threads) {', 'try {', 'interrupt(entry.getExchange());', '} catch (Throwable e) {', '}', '}', '} else {']
['the following threads are blocked and may reside in the jvm ', ['sb', 'tostring']]
camel sample_4106

['if (isInterruptThreadsWhileStopping()) {', 'for (AwaitThread entry : threads) {', 'try {', 'interrupt(entry.getExchange());', '} catch (Throwable e) {', '}', '}', '} else {', '}', '} else {']
['shutting down with no inflight threads ', []]
camel sample_4106

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_1754

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_1754

['errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(10).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_1754

['public void status(PubNub pubnub, PNStatus status) {', 'if (status.getCategory() == PNUnexpectedDisconnectCategory || status.getCategory() == PNTimeoutCategory) {']
['got status reconnecting to pubnub ', ['status']]
camel sample_11655

['public void status(PubNub pubnub, PNStatus status) {', 'if (status.getCategory() == PNUnexpectedDisconnectCategory || status.getCategory() == PNTimeoutCategory) {', 'pubnub.reconnect();', '} else {']
['status message ', ['status']]
camel sample_11655

['public void myMethod(@ExchangeProperties Map<?, ?> foo, @Headers Map<?, ?> bar) {', 'this.foo = foo;', 'this.bar = bar;']
['mymethod method called on ', ['this']]
camel sample_3293

['public Endpoint registerEndpoint(String uri, Endpoint endpoint) {', 'if (endpoint instanceof InterceptSendToEndpoint) {', 'return endpoint;', '} else if (endpoint instanceof MockEndpoint) {', 'return endpoint;', '} else if (matchPattern(uri, endpoint, pattern)) {', 'InterceptSendToEndpoint proxy = new InterceptSendToEndpoint(endpoint, skip);', 'String key = "mock:" + endpoint.getEndpointKey().replaceFirst(": if (key.contains("?")) {', 'key = ObjectHelper.before(key, "?");', '}']
['adviced endpoint with mock endpoint ', ['uri', 'key']]
camel sample_4043

['public Metadata parse(Element element, ParserContext context) {', 'Metadata answer = null;', 'String s = element.getLocalName();', 'if ("conduit".equals(s)) {']
['parsing the conduit element ', []]
camel sample_6584

['public Metadata parse(Element element, ParserContext context) {', 'Metadata answer = null;', 'String s = element.getLocalName();', 'if ("conduit".equals(s)) {', 'answer = new CamelConduitDefinitionParser().parse(element, context);', '}', 'if ("destination".equals(s)) {']
['parsing the detination element ', []]
camel sample_6584

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'BasicIssue issue = in.getBody(BasicIssue.class);']
['got issue with id key ', ['issue', 'getid', 'issue', 'getkey']]
camel sample_12995

['while (continueRouting(processors, nextExchange)) {', 'if (first) {', 'first = false;', '} else {', 'nextExchange = createNextExchange(nextExchange);', '}', 'Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, nextExchange, callback, processors, async);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4413

['first = false;', '} else {', 'nextExchange = createNextExchange(nextExchange);', '}', 'Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, nextExchange, callback, processors, async);', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4413

['Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, nextExchange, callback, processors, async);', 'if (!sync) {', 'return false;', '}', 'if (!continueProcessing(nextExchange, "so breaking out of pipeline", LOG)) {', 'break;', '}', '}']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'nextexchange']]
camel sample_4413

['private boolean process(final Exchange original, final Exchange exchange, final AsyncCallback callback, final Iterator<Processor> processors, final AsyncProcessor asyncProcessor) {']
['processing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4413

['}', 'Exchange nextExchange = exchange;', 'while (continueRouting(processors, nextExchange)) {', 'AsyncProcessor processor = AsyncProcessorConverterHelper.convert(processors.next());', 'if (!continueProcessing(nextExchange, "so breaking out of pipeline", LOG)) {', 'break;', '}', 'nextExchange = createNextExchange(nextExchange);', 'boolean isDoneSync = process(original, nextExchange, callback, processors, processor);', 'if (!isDoneSync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4413

['if (!continueProcessing(nextExchange, "so breaking out of pipeline", LOG)) {', 'break;', '}', 'nextExchange = createNextExchange(nextExchange);', 'boolean isDoneSync = process(original, nextExchange, callback, processors, processor);', 'if (!isDoneSync) {', 'return;', '}', '}', 'ExchangeHelper.copyResults(original, nextExchange);']
['processing complete for exchangeid ', ['original', 'getexchangeid', 'original']]
camel sample_4413

['protected boolean continueRouting(Iterator<Processor> it, Exchange exchange) {', 'boolean answer = true;', 'Object stop = exchange.getProperty(Exchange.ROUTE_STOP);', 'if (stop != null) {', 'boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, stop);', 'if (doStop) {']
['exchangeid is marked to stop routing ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4413

['boolean answer = true;', 'Object stop = exchange.getProperty(Exchange.ROUTE_STOP);', 'if (stop != null) {', 'boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, stop);', 'if (doStop) {', 'answer = false;', '}', '} else {', 'answer = it.hasNext();', '}']
['exchangeid should continue routing ', ['exchange', 'getexchangeid', 'answer']]
camel sample_4413

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwitterStreamingComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-streaming.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-streaming.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_776

['}', '}', 'try {', 'super.setUp();', '} catch (Exception e) {', 'NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e);', 'if (nsae != null) {', 'canTest = false;', 'String name = System.getProperty("os.name");', 'String message = nsae.getMessage();']
['is not avail on this platform testing is skipped real cause ', ['name', 'message']]
camel sample_15303

['jarStream = new JarInputStream(stream);', 'JarEntry entry;', 'while ((entry = jarStream.getNextJarEntry()) != null) {', 'String name = entry.getName();', 'if (name != null) {', 'name = name.trim();', 'if (!entry.isDirectory() && name.endsWith(".class")) {', 'entries.add(cleanupSpringbootClassName(name));', '} else if (inspectNestedJars && !entry.isDirectory() && isSpringBootNestedJar(name)) {', 'String nestedUrl = urlPath + "!/" + name;']
['inspecting nested jar ', ['nestedurl']]
camel sample_13404

['if (!entry.isDirectory() && name.endsWith(".class")) {', 'entries.add(cleanupSpringbootClassName(name));', '} else if (inspectNestedJars && !entry.isDirectory() && isSpringBootNestedJar(name)) {', 'String nestedUrl = urlPath + "!/" + name;', 'List<String> nestedEntries = doLoadJarClassEntries(jarStream, nestedUrl, false, false);', 'entries.addAll(nestedEntries);', '}', '}', '}', '} catch (IOException ioe) {']
['cannot search jar file due to an ioexception this exception is ignored ', ['urlpath', 'ioe', 'getmessage', 'ioe']]
camel sample_13404

['public void foo(InE in, InE in1, Holder<InE> out, Holder<InE> out1) {']
['executing operation foo ', []]
camel sample_7815

['public void process(Exchange exchange) throws Exception {', 'Object body = exchange.getIn().getBody();', 'if (body != null) {']
['posting to eventbus ', ['body', 'eventbus']]
camel sample_9108

['public void process(Exchange exchange) throws Exception {', 'Object body = exchange.getIn().getBody();', 'if (body != null) {', 'eventBus.post(body);', '} else {']
['body is null cannot post to eventbus ', []]
camel sample_9108

['final Object body = queue.poll(config.getPollingTimeout(), TimeUnit.MILLISECONDS);', 'Exchange exchange = getEndpoint().createExchange();', 'exchange.getOut().setBody(body);', 'try {', 'processor.process(exchange);', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error during processing", exchange, e);', '}', '} catch (InterruptedException e) {', 'if (LOG.isDebugEnabled()) {']
['hazelcast queue consumer interrupted ', ['e', 'e']]
camel sample_9558

['public OperationResult<byte[]> getResult() {', 'try {', 'Stat statistics = new Stat();', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {']
['received data from s path with statistics s ', ['format', 'node', 'statistics']]
camel sample_12645

['public OperationResult<byte[]> getResult() {', 'try {', 'Stat statistics = new Stat();', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {', '} else {']
['received data from s path ', ['format', 'node']]
camel sample_12645

['public Consumer createConsumer(Processor processor) throws Exception {', 'NettyHttpConsumer answer = new NettyHttpConsumer(this, processor, getConfiguration());', 'configureConsumer(answer);', 'if (nettySharedHttpServer != null) {', 'answer.setNettyServerBootstrapFactory(nettySharedHttpServer.getServerBootstrapFactory());']
['nettyhttpconsumer is using nettysharedhttpserver on port ', ['answer', 'nettysharedhttpserver', 'getport']]
camel sample_8349

['public Consumer createConsumer(Processor processor) throws Exception {', 'NettyHttpConsumer answer = new NettyHttpConsumer(this, processor, getConfiguration());', 'configureConsumer(answer);', 'if (nettySharedHttpServer != null) {', 'answer.setNettyServerBootstrapFactory(nettySharedHttpServer.getServerBootstrapFactory());', '} else {', 'HttpServerBootstrapFactory factory = getComponent().getOrCreateHttpNettyServerBootstrapFactory(answer);', 'answer.setNettyServerBootstrapFactory(factory);']
['created nettyhttpconsumer using httpserverbootstrapfactory ', ['answer', 'factory']]
camel sample_8349

['protected void doStart() throws Exception {', 'super.doStart();', 'ObjectHelper.notNull(nettyHttpBinding, "nettyHttpBinding", this);', 'ObjectHelper.notNull(headerFilterStrategy, "headerFilterStrategy", this);', 'if (securityConfiguration != null) {', 'ObjectHelper.notEmpty(securityConfiguration.getRealm(), "realm", securityConfiguration);', 'ObjectHelper.notEmpty(securityConfiguration.getConstraint(), "restricted", securityConfiguration);', 'if (securityConfiguration.getSecurityAuthenticator() == null) {', 'JAASSecurityAuthenticator jaas = new JAASSecurityAuthenticator();', 'jaas.setName(securityConfiguration.getRealm());']
['no securityauthenticator configured using jaassecurityauthenticator as authenticator ', ['jaas']]
camel sample_8349

['public void testWSHttpCallEcho() throws Exception {', 'received.clear();', 'latch = new CountDownLatch(2);', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17447

['public static SchematronProcessor newScehamtronEngine(final Templates rules) {', 'try {', 'return new SchematronProcessor(getXMLReader(), rules);', '} catch (Exception e) {']
['failed to parse the configuration file ', []]
camel sample_11985

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {']
['simulating a task which takes millis to reply ', ['getendpoint', 'getdelay']]
camel sample_12350

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {']
['simulating a failure at attempt ', ['count']]
camel sample_12350

['executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());']
['setting reply ', ['reply']]
camel sample_12350

['public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}']
['callback done false ', []]
camel sample_12350

['exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}', 'callback.done(false);', 'return null;', '}', '});']
['task submitted now tell camel routing engine to that this exchange is being continued asynchronously ', []]
camel sample_12350

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .inOut("activemq:queue:foo?replyTo=queue:bar&requestTimeout=2000") .to("mock:result");', 'from("activemq:queue:foo") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if ("World".equals(body)) {']
['sleeping for sec to force a timeout ', []]
camel sample_7053

['public void testAddRunnable() throws Exception {', 'int runnableCount = 3;', 'int runCount = 5;']
['starting first set of runnables ', []]
camel sample_13812

['public void testAddRunnable() throws Exception {', 'int runnableCount = 3;', 'int runCount = 5;', 'startRunnables(runnableCount, runCount);', 'Thread.sleep(THREAD_COUNT * TestRunnable.SLEEP_MILLIS);']
['starting second set of runnables ', []]
camel sample_13812

['protected void doStart() throws Exception {', 'ServiceHelper.startService(mFormatter);', 'if (mJmxEndpoint.isPlatformServer()) {', 'setServerConnection(ManagementFactory.getPlatformMBeanServer());', '} else {', 'try {', 'initNetworkConnection();', '} catch (IOException e) {', 'if (!mJmxEndpoint.getTestConnectionOnStartup()) {']
['failed to connect to jmx server ', ['e', 'getmessage']]
camel sample_12700

['protected void scheduleDelayedStart() throws Exception {', 'Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'doStart();', '} catch (Exception e) {']
['an unrecoverable exception has occurred while starting the jmx consumer for endpoint ', ['urisupport', 'sanitizeuri', 'mjmxendpoint', 'getendpointuri', 'e']]
camel sample_12700

['protected void scheduleDelayedStart() throws Exception {', 'Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'doStart();', '} catch (Exception e) {', '}', '}', '};']
['delaying jmx consumer startup for endpoint trying again in seconds ', ['urisupport', 'sanitizeuri', 'mjmxendpoint', 'getendpointuri', 'mjmxendpoint', 'getreconnectdelay']]
camel sample_12700

['public void handleNotification(Notification notification, Object handback) {', 'JMXConnectionNotification connectionNotification = (JMXConnectionNotification)notification;', 'if (!connectionNotification.getConnectionId().equals(mConnectionId)) {', 'return;', '}', 'if (connectionNotification.getType().equals(JMXConnectionNotification.NOTIFS_LOST) || connectionNotification.getType().equals(JMXConnectionNotification.CLOSED) || connectionNotification.getType().equals(JMXConnectionNotification.FAILED)) {']
['lost jmx connection for ', ['urisupport', 'sanitizeuri', 'mjmxendpoint', 'getendpointuri']]
camel sample_12700

['public void handleNotification(Notification notification, Object handback) {', 'JMXConnectionNotification connectionNotification = (JMXConnectionNotification)notification;', 'if (!connectionNotification.getConnectionId().equals(mConnectionId)) {', 'return;', '}', 'if (connectionNotification.getType().equals(JMXConnectionNotification.NOTIFS_LOST) || connectionNotification.getType().equals(JMXConnectionNotification.CLOSED) || connectionNotification.getType().equals(JMXConnectionNotification.FAILED)) {', 'if (mJmxEndpoint.getReconnectOnConnectionFailure()) {', 'scheduleReconnect();', '} else {']
['the jmx consumer will not be reconnected use reconnectonconnectionfailure to enable reconnections ', []]
camel sample_12700

['protected void scheduleReconnect() {', 'Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'initNetworkConnection();', 'addNotificationListener();', '} catch (Exception e) {']
['failed to reconnect to jmx server ', ['e', 'getmessage']]
camel sample_12700

['Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'initNetworkConnection();', 'addNotificationListener();', '} catch (Exception e) {', 'scheduleReconnect();', '}', '}', '};']
['delaying jmx consumer reconnection for endpoint trying again in seconds ', ['urisupport', 'sanitizeuri', 'mjmxendpoint', 'getendpointuri', 'mjmxendpoint', 'getreconnectdelay']]
camel sample_12700

['public void testBeanPerformance() throws Exception {', 'StopWatch watch = new StopWatch();']
['invoking a bean in a route times ', ['times']]
camel sample_3285

['public void testBeanPerformance() throws Exception {', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < times; i++) {', 'template.sendBody("direct:start", "Hello World");', '}']
['took to invoke the bean times ', ['timeutils', 'printduration', 'watch', 'taken', 'times']]
camel sample_3285

['protected void doStart() throws Exception {', 'super.doStart();', 'if (LOG.isInfoEnabled()) {']
['starting trap consumer on ', ['this', 'endpoint', 'getaddress']]
camel sample_8830

['if ("tcp".equals(endpoint.getProtocol())) {', 'this.transport = new DefaultTcpTransportMapping((TcpAddress)this.listenGenericAddress);', '} else if ("udp".equals(endpoint.getProtocol())) {', 'this.transport = new DefaultUdpTransportMapping((UdpAddress)this.listenGenericAddress);', '} else {', 'throw new IllegalArgumentException("Unknown protocol: " + endpoint.getProtocol());', '}', 'this.snmp = new Snmp(transport);', 'this.snmp.addCommandResponder(this);', 'if (LOG.isDebugEnabled()) {']
['starting trap consumer on using protocol ', ['endpoint', 'getaddress', 'endpoint', 'getprotocol']]
camel sample_8830

['this.transport = new DefaultUdpTransportMapping((UdpAddress)this.listenGenericAddress);', '} else {', 'throw new IllegalArgumentException("Unknown protocol: " + endpoint.getProtocol());', '}', 'this.snmp = new Snmp(transport);', 'this.snmp.addCommandResponder(this);', 'if (LOG.isDebugEnabled()) {', '}', 'this.transport.listen();', 'if (LOG.isInfoEnabled()) {']
['started trap consumer on using protocol ', ['endpoint', 'getaddress', 'endpoint', 'getprotocol']]
camel sample_8830

['protected void doStop() throws Exception {', 'if (this.transport != null && this.transport.isListening()) {', 'if (LOG.isDebugEnabled()) {']
['stopping trap consumer on ', ['this', 'endpoint', 'getaddress']]
camel sample_8830

['protected void doStop() throws Exception {', 'if (this.transport != null && this.transport.isListening()) {', 'if (LOG.isDebugEnabled()) {', '}', 'this.transport.close();']
['stopped trap consumer on ', ['this', 'endpoint', 'getaddress']]
camel sample_8830

['if (pdu != null) {', 'if ((pdu.getType() != PDU.TRAP) && (pdu.getType() != PDU.V1TRAP) && (pdu.getType() != PDU.REPORT) && (pdu.getType() != PDU.RESPONSE)) {', 'pdu.setErrorIndex(0);', 'pdu.setErrorStatus(0);', 'pdu.setType(PDU.RESPONSE);', 'StatusInformation statusInformation = new StatusInformation();', 'StateReference ref = event.getStateReference();', 'try {', 'event.getMessageDispatcher().returnResponsePdu(event.getMessageProcessingModel(), event.getSecurityModel(), event.getSecurityName(), event.getSecurityLevel(), pdu, event.getMaxSizeResponsePDU(), ref, statusInformation);', 'if (LOG.isDebugEnabled()) {']
['response to inform sent ', []]
camel sample_8830

['try {', 'event.getMessageDispatcher().returnResponsePdu(event.getMessageProcessingModel(), event.getSecurityModel(), event.getSecurityName(), event.getSecurityLevel(), pdu, event.getMaxSizeResponsePDU(), ref, statusInformation);', 'if (LOG.isDebugEnabled()) {', '}', '} catch (MessageException ex) {', 'getExceptionHandler().handleException(ex);', '}', '}', 'processPDU(pdu, event);', '} else {']
['received invalid trap pdu ', []]
camel sample_8830

['public void processPDU(PDU pdu, CommandResponderEvent event) {', 'if (LOG.isDebugEnabled()) {']
['received trap event for ', ['this', 'endpoint', 'getaddress', 'pdu']]
camel sample_8830

['public void testPerformance() {', 'JavaUuidGenerator uuidGenerator = new JavaUuidGenerator();', 'StopWatch watch = new StopWatch();']
['first id ', ['uuidgenerator', 'generateuuid']]
camel sample_1312

['public void testPerformance() {', 'JavaUuidGenerator uuidGenerator = new JavaUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['last id ', ['uuidgenerator', 'generateuuid']]
camel sample_1312

['public void testPerformance() {', 'JavaUuidGenerator uuidGenerator = new JavaUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['took ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_1312

['public boolean unregister() {', 'if (--registrationCount <= 0) {', 'try {', 'dataStore.close();', '} catch (IOException e) {']
['error while closing datastore this exception is ignored ', ['e']]
camel sample_14011

['public void process(Exchange exchange) throws Exception {', 'exchange.addOnCompletion(new MyOnCompletion());', '}', '}) .end() .to("log:foo") .to("direct:b");', 'from("direct:b").routeId("route-b") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals("route-b", MDC.get("camel.routeId"));', 'assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId"));', 'assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId"));', 'MDC.put("custom.id", "1");']
['from processor in route b ', []]
camel sample_2494

['public void onDone(Exchange exchange) {', 'assertEquals("route-a", MDC.get("camel.routeId"));', 'assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId"));', 'assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId"));', 'assertEquals("1", MDC.get("custom.id"));']
['from oncompletion after route a ', []]
camel sample_2494

['}', 'Message message = chat.createMessage();', 'try {', 'message.setTo(JidCreate.from(room));', 'message.setFrom(JidCreate.from(endpoint.getUser()));', 'endpoint.getBinding().populateXmppMessage(message, exchange);', 'if (!connection.isConnected()) {', 'this.reconnect();', '}', 'if (LOG.isDebugEnabled()) {']
['sending xmpp message ', ['message', 'getbody']]
camel sample_12595

['private synchronized void reconnect() throws InterruptedException, IOException, SmackException, XMPPException {', 'if (!connection.isConnected()) {', 'if (LOG.isDebugEnabled()) {']
['reconnecting to ', ['xmppendpoint', 'getconnectionmessage', 'connection']]
camel sample_12595

['protected void doStart() throws Exception {', 'if (connection == null) {', 'try {', 'connection = endpoint.createConnection();', '} catch (SmackException e) {', 'if (endpoint.isTestConnectionOnStartup()) {', 'throw new RuntimeException("Could not connect to XMPP server:  " + endpoint.getConnectionDescription(), e);', '} else {']
['could not connect to xmpp server producer will attempt lazy connection when needed ', ['e', 'getmessage']]
camel sample_12595

['protected synchronized void initializeChat() throws InterruptedException, SmackException, XMPPException, XmppStringprepException {', 'if (chat == null) {', 'room = endpoint.resolveRoom(connection);', 'MultiUserChatManager chatManager = MultiUserChatManager.getInstanceFor(connection);', 'chat = chatManager.getMultiUserChat(JidCreate.entityBareFrom(room));', 'MucEnterConfiguration mucc = chat.getEnterConfigurationBuilder(Resourcepart.from(endpoint.getNickname())) .requestNoHistory() .build();', 'chat.join(mucc);']
['joined room as ', ['room', 'endpoint', 'getnickname']]
camel sample_12595

['protected void doStop() throws Exception {', 'if (chat != null) {']
['leaving room ', ['room']]
camel sample_12595

['protected GenericFile<T> renameFile(GenericFileOperations<T> operations, GenericFile<T> from, GenericFile<T> to) throws IOException {', 'try {', 'operations.deleteFile(to.getAbsoluteFilePath());', '} catch (GenericFileOperationFailedException e) {', '}', 'boolean mkdir = operations.buildDirectory(to.getParent(), to.isAbsolute());', 'if (!mkdir) {', 'throw new GenericFileOperationFailedException("Cannot create directory: " + to.getParent() + " (could be because of denied permissions)");', '}']
['renaming file to ', ['from', 'to']]
camel sample_4813

['protected void deleteLocalWorkFile(Exchange exchange) {', 'File local = exchange.getIn().getHeader(Exchange.FILE_LOCAL_WORK_PATH, File.class);', 'if (local != null && local.exists()) {', 'boolean deleted = FileUtil.deleteFile(local);']
['local work file was deleted ', ['local', 'deleted']]
camel sample_4813

['for (ServiceReference<?> reference : references) {', 'if (reference != null) {', 'CamelContext camelContext = (CamelContext) bundleContext.getService(reference);', 'if (camelContext != null) {', 'camelContexts.add(camelContext);', '}', '}', '}', '}', '} catch (Exception e) {']
['cannot retrieve the list of camel contexts ', ['e']]
camel sample_275

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DnsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dns.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dns.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_760

['public void process(final Exchange exchange) throws Exception {', 'final Message msg = exchange.getIn();', 'final Object value = msg.getBody();']
['processing message ', ['value']]
camel sample_17282

['public void testSendToNonExistingEndpoint() throws Exception {', 'try {', 'template.sendBody("thisUriDoesNotExist", "<hello>world!</hello>");', 'fail("Should have failed to send this message!");', '} catch (NoSuchEndpointException e) {']
['caught expected exception ', ['e', 'e']]
camel sample_1607

['public void testChoiceSimple() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice-simple");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6438

['public void testChoiceExpression() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice-expression");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6438

['public void testFilterSimple() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter-simple");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6438

['public void testFilterExpression() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter-expression");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6438

['public synchronized void process(Exchange exchange) throws Exception {', 'final Object body = exchange.getIn().getMandatoryBody();', 'final String solverId = getSolverId(exchange);', 'if (body.getClass().isAnnotationPresent(PlanningSolution.class) || body instanceof Solution) {', 'if (isAsync(exchange)) {']
['asynchronously solving problem with id ', ['body', 'solverid']]
camel sample_11706

['final Object body = exchange.getIn().getMandatoryBody();', 'final String solverId = getSolverId(exchange);', 'if (body.getClass().isAnnotationPresent(PlanningSolution.class) || body instanceof Solution) {', 'if (isAsync(exchange)) {', 'final Solver<Object> solver = endpoint.getOrCreateSolver(solverId);', 'executor.submit(new Runnable() {', 'public void run() {', 'try {', 'solver.solve(body);', '} catch (Throwable e) {']
['asynchronously solving failed for solverid ', ['solverid', 'e']]
camel sample_11706

['final Solver<Object> solver = endpoint.getOrCreateSolver(solverId);', 'executor.submit(new Runnable() {', 'public void run() {', 'try {', 'solver.solve(body);', '} catch (Throwable e) {', '}', '}', '});', '} else {']
['synchronously solving problem with id ', ['body', 'solverid']]
camel sample_11706

['});', '} else {', 'Solver<Object> solver = endpoint.getSolver(solverId);', 'if (solver == null) {', 'solver = endpoint.createSolver();', '}', 'solver.solve(body);', 'populateResult(exchange, solver);', '}', '} else if (body instanceof ProblemFactChange) {']
['adding problemfactchange to solver with id ', ['body', 'solverid']]
camel sample_11706

['} else if (body instanceof ProblemFactChange) {', 'Solver<Object> solver = endpoint.getOrCreateSolver(solverId);', 'solver.addProblemFactChange((ProblemFactChange<Object>)body);', 'if (!isAsync(exchange)) {', 'while (!solver.isEveryProblemFactChangeProcessed()) {', 'Thread.sleep(OptaPlannerConstants.IS_EVERY_PROBLEM_FACT_CHANGE_DELAY);', '}', '}', 'populateResult(exchange, solver);', '} else {']
['retrieving best score for solver ', ['solverid']]
camel sample_11706

['private String getSolverId(Exchange exchange) throws Exception {', 'String solverId = exchange.getIn().getHeader(OptaPlannerConstants.SOLVER_ID, String.class);', 'if (solverId == null) {', 'solverId = configuration.getSolverId();', '}']
['solverid ', ['solverid']]
camel sample_11706

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<RubyLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ruby.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ruby.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1257

['protected Message getFallback() {', 'synchronized (lock) {', 'fallbackInUse.set(true);', '}', 'if (fallback == null && fallbackCommand == null) {', 'throw new UnsupportedOperationException("No fallback available.");', '}', 'Throwable exception = getExecutionException();', 'if (exception != null) {']
['error occurred processing will now run fallback exception class message ', ['exception', 'getclass', 'getname', 'exception', 'getmessage']]
camel sample_11356

['protected Message getFallback() {', 'synchronized (lock) {', 'fallbackInUse.set(true);', '}', 'if (fallback == null && fallbackCommand == null) {', 'throw new UnsupportedOperationException("No fallback available.");', '}', 'Throwable exception = getExecutionException();', 'if (exception != null) {', '} else {']
['error occurred processing will now run fallback ', []]
camel sample_11356

['}', 'exchange.setProperty(Exchange.EXCEPTION_HANDLED, true);', 'exchange.setProperty(Exchange.EXCEPTION_CAUGHT, exception);', 'exchange.removeProperty(Exchange.ROUTE_STOP);', 'exchange.setException(null);', 'exchange.removeProperty(Exchange.REDELIVERY_EXHAUSTED);', 'try {', 'if (fallbackCommand != null) {', 'return fallbackCommand.execute();', '} else {']
['running fallback with exchange ', ['fallback', 'exchange']]
camel sample_11356

['exchange.setProperty(Exchange.EXCEPTION_HANDLED, true);', 'exchange.setProperty(Exchange.EXCEPTION_CAUGHT, exception);', 'exchange.removeProperty(Exchange.ROUTE_STOP);', 'exchange.setException(null);', 'exchange.removeProperty(Exchange.REDELIVERY_EXHAUSTED);', 'try {', 'if (fallbackCommand != null) {', 'return fallbackCommand.execute();', '} else {', 'fallback.process(exchange);']
['running fallback with exchange done ', ['fallback', 'exchange']]
camel sample_11356

['protected Message run() throws Exception {']
['running processor with exchange ', ['processor', 'exchange']]
camel sample_11356

['protected Message run() throws Exception {', 'Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false, false);', 'try {', 'processor.process(copy);', '} catch (Exception e) {', 'copy.setException(e);', '}', 'if (fallbackInUse.get()) {']
['exiting run command as fallback is already in use processing exchange ', ['exchange']]
camel sample_11356

['} catch (Exception e) {', 'copy.setException(e);', '}', 'if (fallbackInUse.get()) {', 'return null;', '}', 'Throwable hystrixExecutionException = getExecutionException();', 'Exception camelExchangeException = copy.getException();', 'synchronized (lock) {', 'if (fallbackInUse.get()) {']
['exiting run command as fallback is already in use processing exchange ', ['exchange']]
camel sample_11356

['if (fallbackInUse.get()) {', 'return null;', '}', 'ExchangeHelper.copyResults(exchange, copy);', 'if (hystrixExecutionException != null) {', 'exchange.setException(new CamelExchangeException("Hystrix execution exception occurred while processing Exchange", exchange, hystrixExecutionException));', '}', 'if (hystrixExecutionException == null && camelExchangeException != null) {', 'throw camelExchangeException;', '}']
['running processor with exchange done ', ['processor', 'exchange']]
camel sample_11356

['public DefaultPackageScanClassResolver() {', 'try {', 'ClassLoader ccl = Thread.currentThread().getContextClassLoader();', 'if (ccl != null) {']
['adding contextclassloader from current thread ', ['ccl']]
camel sample_4055

['public DefaultPackageScanClassResolver() {', 'try {', 'ClassLoader ccl = Thread.currentThread().getContextClassLoader();', 'if (ccl != null) {', 'classLoaders.add(ccl);', '}', '} catch (Exception e) {']
['cannot add contextclassloader from current thread due this exception will be ignored ', ['e', 'getmessage']]
camel sample_4055

['public Set<Class<?>> findAnnotated(Class<? extends Annotation> annotation, String... packageNames) {', 'if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {']
['searching for annotations of in packages ', ['annotation', 'getname', 'arrays', 'aslist', 'packagenames']]
camel sample_4055

['if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {', '}', 'PackageScanFilter test = getCompositeFilter(new AnnotatedWithPackageScanFilter(annotation, true));', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'for (String pkg : packageNames) {', 'find(test, pkg, classes);', '}']
['found ', ['classes']]
camel sample_4055

['public Set<Class<?>> findAnnotated(Set<Class<? extends Annotation>> annotations, String... packageNames) {', 'if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {']
['searching for annotations of in packages ', ['annotations', 'arrays', 'aslist', 'packagenames']]
camel sample_4055

['if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {', '}', 'PackageScanFilter test = getCompositeFilter(new AnnotatedWithAnyPackageScanFilter(annotations, true));', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'for (String pkg : packageNames) {', 'find(test, pkg, classes);', '}']
['found ', ['classes']]
camel sample_4055

['public Set<Class<?>> findImplementations(Class<?> parent, String... packageNames) {', 'if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {']
['searching for implementations of in packages ', ['parent', 'getname', 'arrays', 'aslist', 'packagenames']]
camel sample_4055

['if (packageNames == null) {', 'return Collections.emptySet();', '}', 'if (log.isDebugEnabled()) {', '}', 'PackageScanFilter test = getCompositeFilter(new AssignableToPackageScanFilter(parent));', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'for (String pkg : packageNames) {', 'find(test, pkg, classes);', '}']
['found ', ['classes']]
camel sample_4055

['public Set<Class<?>> findByFilter(PackageScanFilter filter, String... packageNames) {', 'if (packageNames == null) {', 'return Collections.emptySet();', '}', 'Set<Class<?>> classes = new LinkedHashSet<Class<?>>();', 'for (String pkg : packageNames) {', 'find(filter, pkg, classes);', '}']
['found ', ['classes']]
camel sample_4055

['protected void find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes) {', 'if (log.isTraceEnabled()) {']
['searching for in package using classloader ', ['new', 'object', 'test', 'packagename', 'loader', 'getclass', 'getname']]
camel sample_4055

['protected void find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes) {', 'if (log.isTraceEnabled()) {', '}', 'Enumeration<URL> urls;', 'try {', 'urls = getResources(loader, packageName);', 'if (!urls.hasMoreElements()) {']
['no urls returned by classloader ', []]
camel sample_4055

['protected void find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes) {', 'if (log.isTraceEnabled()) {', '}', 'Enumeration<URL> urls;', 'try {', 'urls = getResources(loader, packageName);', 'if (!urls.hasMoreElements()) {', '}', '} catch (IOException ioe) {']
['cannot read package ', ['packagename', 'ioe']]
camel sample_4055

['urls = getResources(loader, packageName);', 'if (!urls.hasMoreElements()) {', '}', '} catch (IOException ioe) {', 'return;', '}', 'while (urls.hasMoreElements()) {', 'URL url = null;', 'try {', 'url = urls.nextElement();']
['url from classloader ', ['url']]
camel sample_4055

['return;', '}', 'while (urls.hasMoreElements()) {', 'URL url = null;', 'try {', 'url = urls.nextElement();', 'url = customResourceLocator(url);', 'String urlPath = url.getFile();', 'urlPath = URLDecoder.decode(urlPath, "UTF-8");', 'if (log.isTraceEnabled()) {']
['decoded urlpath with protocol ', ['urlpath', 'url', 'getprotocol']]
camel sample_4055

['if (urlPath.startsWith("file:")) {', 'try {', 'urlPath = new URI(url.getFile()).getPath();', '} catch (URISyntaxException e) {', '}', 'if (urlPath.startsWith("file:")) {', 'urlPath = urlPath.substring(5);', '}', '}', 'if (url.toString().startsWith("bundle:") || urlPath.startsWith("bundle:")) {']
['skipping osgi bundle ', ['url']]
camel sample_4055

['} catch (URISyntaxException e) {', '}', 'if (urlPath.startsWith("file:")) {', 'urlPath = urlPath.substring(5);', '}', '}', 'if (url.toString().startsWith("bundle:") || urlPath.startsWith("bundle:")) {', 'continue;', '}', 'if (url.toString().startsWith("bundleresource:") || urlPath.startsWith("bundleresource:")) {']
['skipping bundleresource ', ['url']]
camel sample_4055

['}', 'if (url.toString().startsWith("bundle:") || urlPath.startsWith("bundle:")) {', 'continue;', '}', 'if (url.toString().startsWith("bundleresource:") || urlPath.startsWith("bundleresource:")) {', 'continue;', '}', "if (urlPath.indexOf('!') > 0) {", "urlPath = urlPath.substring(0, urlPath.indexOf('!'));", '}']
['scanning for classes in matching criteria ', ['urlpath', 'test']]
camel sample_4055

['continue;', '}', 'if (url.toString().startsWith("bundleresource:") || urlPath.startsWith("bundleresource:")) {', 'continue;', '}', "if (urlPath.indexOf('!') > 0) {", "urlPath = urlPath.substring(0, urlPath.indexOf('!'));", '}', 'File file = new File(urlPath);', 'if (file.isDirectory()) {']
['loading from directory using file ', ['file']]
camel sample_4055

['}', "if (urlPath.indexOf('!') > 0) {", "urlPath = urlPath.substring(0, urlPath.indexOf('!'));", '}', 'File file = new File(urlPath);', 'if (file.isDirectory()) {', 'loadImplementationsInDirectory(test, packageName, file, classes);', '} else {', 'InputStream stream;', 'if (urlPath.startsWith("http:") || urlPath.startsWith("https:") || urlPath.startsWith("sonicfs:") || isAcceptableScheme(urlPath)) {']
['loading from jar using url ', ['urlpath']]
camel sample_4055

['if (file.isDirectory()) {', 'loadImplementationsInDirectory(test, packageName, file, classes);', '} else {', 'InputStream stream;', 'if (urlPath.startsWith("http:") || urlPath.startsWith("https:") || urlPath.startsWith("sonicfs:") || isAcceptableScheme(urlPath)) {', 'URL urlStream = new URL(urlPath);', 'URLConnection con = urlStream.openConnection();', 'con.setUseCaches(false);', 'stream = con.getInputStream();', '} else {']
['loading from jar using file ', ['file']]
camel sample_4055

['URL urlStream = new URL(urlPath);', 'URLConnection con = urlStream.openConnection();', 'con.setUseCaches(false);', 'stream = con.getInputStream();', '} else {', 'stream = new FileInputStream(file);', '}', 'loadImplementationsInJar(test, packageName, stream, urlPath, classes, jarCache);', '}', '} catch (IOException e) {']
['cannot read entries in url ', ['url', 'e']]
camel sample_4055

['protected Enumeration<URL> getResources(ClassLoader loader, String packageName) throws IOException {']
['getting resource url for package with classloader ', ['packagename', 'loader']]
camel sample_4055

['private void loadImplementationsInJar(PackageScanFilter test, String parent, InputStream stream, String urlPath, Set<Class<?>> classes, Map<String, List<String>> jarCache) {', 'ObjectHelper.notNull(classes, "classes");', 'List<String> entries = jarCache != null ? jarCache.get(urlPath) : null;', 'if (entries == null) {', 'entries = doLoadJarClassEntries(stream, urlPath);', 'if (jarCache != null) {', 'jarCache.put(urlPath, entries);']
['cached jar with entries ', ['urlpath', 'entries', 'size']]
camel sample_4055

['private void loadImplementationsInJar(PackageScanFilter test, String parent, InputStream stream, String urlPath, Set<Class<?>> classes, Map<String, List<String>> jarCache) {', 'ObjectHelper.notNull(classes, "classes");', 'List<String> entries = jarCache != null ? jarCache.get(urlPath) : null;', 'if (entries == null) {', 'entries = doLoadJarClassEntries(stream, urlPath);', 'if (jarCache != null) {', 'jarCache.put(urlPath, entries);', '}', '} else {']
['using cached jar with entries ', ['urlpath', 'entries', 'size']]
camel sample_4055

['while ((entry = jarStream.getNextJarEntry()) != null) {', 'String name = entry.getName();', 'if (name != null) {', 'name = name.trim();', 'if (!entry.isDirectory() && name.endsWith(".class")) {', 'entries.add(name);', '}', '}', '}', '} catch (IOException ioe) {']
['cannot search jar file due to an ioexception ', ['urlpath', 'ioe', 'getmessage', 'ioe']]
camel sample_4055

['protected void addIfMatching(PackageScanFilter test, String fqn, Set<Class<?>> classes) {', 'try {', "String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');", 'Set<ClassLoader> set = getClassLoaders();', 'boolean found = false;', 'for (ClassLoader classLoader : set) {', 'if (log.isTraceEnabled()) {']
['testing for class matches criteria using classloader ', ['new', 'object', 'externalname', 'test', 'classloader']]
camel sample_4055

['protected void addIfMatching(PackageScanFilter test, String fqn, Set<Class<?>> classes) {', 'try {', "String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');", 'Set<ClassLoader> set = getClassLoaders();', 'boolean found = false;', 'for (ClassLoader classLoader : set) {', 'if (log.isTraceEnabled()) {', '}', 'try {', 'Class<?> type = classLoader.loadClass(externalName);']
['loaded the class in classloader ', ['type', 'classloader']]
camel sample_4055

['try {', "String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');", 'Set<ClassLoader> set = getClassLoaders();', 'boolean found = false;', 'for (ClassLoader classLoader : set) {', 'if (log.isTraceEnabled()) {', '}', 'try {', 'Class<?> type = classLoader.loadClass(externalName);', 'if (test.matches(type)) {']
['found class which matches the filter in classloader ', ['type', 'classloader']]
camel sample_4055

['}', 'try {', 'Class<?> type = classLoader.loadClass(externalName);', 'if (test.matches(type)) {', 'classes.add(type);', '}', 'found = true;', 'break;', '} catch (ClassNotFoundException e) {', 'if (log.isTraceEnabled()) {']
['cannot find class in classloader reason ', ['fqn', 'classloader', 'e', 'getmessage', 'e']]
camel sample_4055

['if (test.matches(type)) {', 'classes.add(type);', '}', 'found = true;', 'break;', '} catch (ClassNotFoundException e) {', 'if (log.isTraceEnabled()) {', '}', '} catch (NoClassDefFoundError e) {', 'if (log.isTraceEnabled()) {']
['cannot find the class definition in classloader reason ', ['fqn', 'classloader', 'e', 'getmessage', 'e']]
camel sample_4055

['break;', '} catch (ClassNotFoundException e) {', 'if (log.isTraceEnabled()) {', '}', '} catch (NoClassDefFoundError e) {', 'if (log.isTraceEnabled()) {', '}', '}', '}', 'if (!found) {']
['cannot find class in any classloaders ', ['fqn', 'set']]
camel sample_4055

['}', '} catch (NoClassDefFoundError e) {', 'if (log.isTraceEnabled()) {', '}', '}', '}', 'if (!found) {', '}', '} catch (Exception e) {', 'if (log.isWarnEnabled()) {']
['cannot examine class due to a with message ', ['fqn', 'e', 'getclass', 'getname', 'e', 'getmessage', 'e']]
camel sample_4055

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof RoutingSlipDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {']
['i m doing someting ', []]
camel sample_3840

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof RoutingSlipDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'return super.process(exchange, new AsyncCallback() {', 'public void done(final boolean doneSync) {']
['i m done ', []]
camel sample_3840

['public OperationResult<String> getResult() {', 'try {', 'Stat statistics = connection.exists(node, true);', 'boolean ok = isOk(statistics);', 'if (LOG.isTraceEnabled()) {']
['node exists node does not exist ', ['ok']]
camel sample_12653

['protected Authentication getAuthentication(Message message) {', 'Subject subject = message.getHeader(Exchange.AUTHENTICATION, Subject.class);', 'Authentication answer = null;', 'if (subject != null) {', 'answer = getAuthenticationAdapter().toAuthentication(subject);', '}', 'if (answer == null && useThreadSecurityContext) {', 'answer = SecurityContextHolder.getContext().getAuthentication();']
['get the authentication from securitycontextholder ', []]
camel sample_12203

['private Authentication authenticateIfRequired(Authentication authentication) {', 'if (authentication.isAuthenticated() && !alwaysReauthenticate) {']
['previously authenticated ', ['authentication']]
camel sample_12203

['private Authentication authenticateIfRequired(Authentication authentication) {', 'if (authentication.isAuthenticated() && !alwaysReauthenticate) {', 'return authentication;', '}', 'authentication = authenticationManager.authenticate(authentication);']
['successfully authenticated ', ['authentication']]
camel sample_12203

['protected void doStart() throws Exception {', 'super.doStart();', 'if (client == null) {']
['connecting to the elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_12716

['protected void doStart() throws Exception {', 'super.doStart();', 'if (client == null) {', 'if (configuration.getIp() != null) {', 'client = createClient().addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(configuration.getIp()), configuration.getPort()));', '} else if (configuration.getTransportAddressesList() != null && !configuration.getTransportAddressesList().isEmpty()) {', 'List<TransportAddress> addresses = new ArrayList<TransportAddress>(configuration.getTransportAddressesList().size());', 'addresses.addAll(configuration.getTransportAddressesList());', 'client = createClient().addTransportAddresses(addresses.toArray(new TransportAddress[addresses.size()]));', '} else {']
['incorrect ip address and port parameters settings for elasticsearch cluster ', []]
camel sample_12716

['private TransportClient createClient() throws Exception {', 'final Settings.Builder settings = getSettings();', 'final CamelContext camelContext = getEndpoint().getCamelContext();', 'final Class<?> clazz = camelContext.getClassResolver().resolveClass("org.elasticsearch.xpack.client.PreBuiltXPackTransportClient");', 'if (clazz != null) {', 'Constructor<?> ctor = clazz.getConstructor(Settings.class, Class[].class);', 'settings.put("xpack.security.user", configuration.getUser() + ":" + configuration.getPassword()) .put("xpack.security.transport.ssl.enabled", configuration.getEnableSSL());']
['xpack client was found on the classpath ', []]
camel sample_12716

['private TransportClient createClient() throws Exception {', 'final Settings.Builder settings = getSettings();', 'final CamelContext camelContext = getEndpoint().getCamelContext();', 'final Class<?> clazz = camelContext.getClassResolver().resolveClass("org.elasticsearch.xpack.client.PreBuiltXPackTransportClient");', 'if (clazz != null) {', 'Constructor<?> ctor = clazz.getConstructor(Settings.class, Class[].class);', 'settings.put("xpack.security.user", configuration.getUser() + ":" + configuration.getPassword()) .put("xpack.security.transport.ssl.enabled", configuration.getEnableSSL());', 'return (TransportClient) ctor.newInstance(new Object[]{settings.build(), new Class[0]});', '} else {']
['xpack client was not found on the classpath using the standard client ', []]
camel sample_12716

['protected void doStop() throws Exception {', 'if (client != null) {']
['disconnecting from elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_12716

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(timeOutEndpointUri).to("jms:queue:test.b");', 'from("jms:queue:test.b").aggregate(header("cheese"), new AggregationStrategy() {', 'public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'try {', 'Thread.sleep(2000);', '} catch (InterruptedException e) {']
['aggregration delay sleep inturrepted ', ['e']]
camel sample_7045

['public void process(Exchange exchange) throws Exception {']
['get the exchange here ', ['exchange']]
camel sample_7045

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to("sjms:topic:test.topic?transacted=true") .process( new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getHeader("isfailed", Boolean.class)) {']
['we failed should roll back ', []]
camel sample_12346

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to("sjms:topic:test.topic?transacted=true") .process( new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (exchange.getIn().getHeader("isfailed", Boolean.class)) {', 'exchange.getOut().setFault(true);', '} else {']
['we passed should commit ', []]
camel sample_12346

['public Consumer createConsumer(Processor processor) throws Exception {']
['creating a consumer ', []]
camel sample_9958

['public Producer createProducer() throws Exception {']
['creating a producer ', []]
camel sample_9958

['public void testGetPerson() throws Exception {', 'execute(new Runnable() {', 'public void run() {', 'final Person person = peopleResource.getPerson(":(id)", true);', 'assertNotNull(person);', 'assertNotNull(person.getId());']
['getperson result ', ['person']]
camel sample_8867

['public void testGetPosts() throws Exception {', 'execute(new Runnable() {', 'public void run() {', 'final GroupMemberships groupMemberships = peopleResource.getGroupMemberships(MembershipStateCode.MEMBER, "", null, null);', 'assertNotNull(groupMemberships);', 'assertNotNull(groupMemberships.getGroupMembershipList());', 'assertFalse(groupMemberships.getGroupMembershipList().isEmpty());', 'final Posts posts = peopleResource.getPosts(Long.parseLong( groupMemberships.getGroupMembershipList().get(0).getGroup().getId()), null, null, Order.RECENCY, PostRole.FOLLOWER, PostCategoryCode.DISCUSSION, null, ":(id)");', 'assertNotNull(posts);']
['getposts result ', ['posts']]
camel sample_8867

['public void testLinkedInException() throws Exception {', 'try {', 'peopleResource.getPerson("bad_fields_selector", true);', '} catch (LinkedInException e) {', 'assertNotNull(e.getError());']
['getperson error ', ['e', 'getmessage']]
camel sample_8867

['public void testGetSuggestedJobs() throws Exception {', 'execute(new Runnable() {', 'public void run() {', 'final JobSuggestions suggestedJobs = peopleResource.getSuggestedJobs(DEFAULT_FIELDS);', 'assertNotNull(suggestedJobs);']
['suggested jobs ', ['suggestedjobs', 'getjobs']]
camel sample_8867

['public void test() throws Exception {', 'URL url = ObjectHelper.loadResourceAsURL("org/apache/camel/itest/CamelJacksonFallbackConverterTest.xml", CamelJacksonFallbackConverterTest.class.getClassLoader());', 'installBlueprintAsBundle("CamelJacksonFallbackConverterTest", url, true);', 'CamelContext camel = getOsgiService(bundleContext, CamelContext.class);', 'camel.getProperties().put(JacksonConstants.ENABLE_TYPE_CONVERTER, "true");', 'camel.getProperties().put(JacksonConstants.TYPE_CONVERTER_TO_POJO, "true");', 'final Pojo pojo = new Pojo(1337, "Constantine");', 'final DefaultExchange exchange = new DefaultExchange(camel);', 'final String string = camel.getTypeConverter().mandatoryConvertTo(String.class, exchange, pojo);']
['pojo string ', ['string']]
camel sample_6480

['public void test() throws Exception {', 'URL url = ObjectHelper.loadResourceAsURL("org/apache/camel/itest/CamelJacksonFallbackConverterTest.xml", CamelJacksonFallbackConverterTest.class.getClassLoader());', 'installBlueprintAsBundle("CamelJacksonFallbackConverterTest", url, true);', 'CamelContext camel = getOsgiService(bundleContext, CamelContext.class);', 'camel.getProperties().put(JacksonConstants.ENABLE_TYPE_CONVERTER, "true");', 'camel.getProperties().put(JacksonConstants.TYPE_CONVERTER_TO_POJO, "true");', 'final Pojo pojo = new Pojo(1337, "Constantine");', 'final DefaultExchange exchange = new DefaultExchange(camel);', 'final String string = camel.getTypeConverter().mandatoryConvertTo(String.class, exchange, pojo);', 'final Pojo copy = camel.getTypeConverter().mandatoryConvertTo(Pojo.class, exchange, string);']
['string pojo ', ['copy']]
camel sample_6480

['protected void doGetPersistentVolume(Exchange exchange, String operation) throws Exception {', 'PersistentVolume pv = null;', 'String pvName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvName)) {']
['get a specific persistent volume require specify a persistent volume name ', []]
camel sample_13279

['public void testCapture() {']
['testError ', []]
camel sample_16581

['private PropertyEditor lookupEditor(Class<?> type) {', 'if (misses.containsKey(type)) {']
['no previously found property editor for type ', ['type']]
camel sample_4002

['private PropertyEditor lookupEditor(Class<?> type) {', 'if (misses.containsKey(type)) {', 'return null;', '}', 'synchronized (cache) {', 'PropertyEditor editor = cache.get(type);', 'if (editor == null) {', 'editor = PropertyEditorManager.findEditor(type);', 'if (editor != null) {']
['found property editor for type ', ['type', 'editor']]
camel sample_4002

['if (misses.containsKey(type)) {', 'return null;', '}', 'synchronized (cache) {', 'PropertyEditor editor = cache.get(type);', 'if (editor == null) {', 'editor = PropertyEditorManager.findEditor(type);', 'if (editor != null) {', 'cache.put(type, editor);', '} else {']
['cannot find property editor for type ', ['type']]
camel sample_4002

['public void testLoadAndRecoverJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_8922

['public void testLoadAndRecoverJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);']
['sending with id ', ['value', 'id']]
camel sample_8922

['mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);', 'template.sendBodyAndHeaders("seda:start?size=" + SIZE, value, headers);', 'Thread.sleep(3);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_8922

['protected void doStart() throws Exception {', 'super.doStart();', 'if (entityManagerFactory == null) {', 'Map<String, EntityManagerFactory> map = getCamelContext().getRegistry().findByTypeWithName(EntityManagerFactory.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'entityManagerFactory = map.values().iterator().next();']
['using entitymanagerfactory found in registry with id ', ['map', 'keyset', 'iterator', 'next', 'entitymanagerfactory']]
camel sample_14103

['protected void doStart() throws Exception {', 'super.doStart();', 'if (entityManagerFactory == null) {', 'Map<String, EntityManagerFactory> map = getCamelContext().getRegistry().findByTypeWithName(EntityManagerFactory.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'entityManagerFactory = map.values().iterator().next();', '} else {']
['could not find a single entitymanagerfactory in registry as there was instances ', ['map', 'size']]
camel sample_14103

['super.doStart();', 'if (entityManagerFactory == null) {', 'Map<String, EntityManagerFactory> map = getCamelContext().getRegistry().findByTypeWithName(EntityManagerFactory.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'entityManagerFactory = map.values().iterator().next();', '} else {', '}', '}', '} else {']
['using entitymanagerfactory configured ', ['entitymanagerfactory']]
camel sample_14103

['} else {', '}', '}', '} else {', '}', 'if (transactionManager == null) {', 'Map<String, PlatformTransactionManager> map = getCamelContext().getRegistry().findByTypeWithName(PlatformTransactionManager.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next();']
['using transactionmanager found in registry with id ', ['map', 'keyset', 'iterator', 'next', 'transactionmanager']]
camel sample_14103

['}', '}', '} else {', '}', 'if (transactionManager == null) {', 'Map<String, PlatformTransactionManager> map = getCamelContext().getRegistry().findByTypeWithName(PlatformTransactionManager.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next();', '} else {']
['could not find a single transactionmanager in registry as there was instances ', ['map', 'size']]
camel sample_14103

['}', 'if (transactionManager == null) {', 'Map<String, PlatformTransactionManager> map = getCamelContext().getRegistry().findByTypeWithName(PlatformTransactionManager.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next();', '} else {', '}', '}', '} else {']
['using transactionmanager configured on this component ', ['transactionmanager']]
camel sample_14103

['} else {', '}', '}', '} else {', '}', 'if (transactionManager == null) {', 'Map<String, TransactionTemplate> map = getCamelContext().getRegistry().findByTypeWithName(TransactionTemplate.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next().getTransactionManager();']
['using transactionmanager found in registry with id ', ['map', 'keyset', 'iterator', 'next', 'transactionmanager']]
camel sample_14103

['}', '}', '} else {', '}', 'if (transactionManager == null) {', 'Map<String, TransactionTemplate> map = getCamelContext().getRegistry().findByTypeWithName(TransactionTemplate.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next().getTransactionManager();', '} else {']
['could not find a single transactiontemplate in registry as there was instances ', ['map', 'size']]
camel sample_14103

['if (transactionManager == null) {', 'Map<String, TransactionTemplate> map = getCamelContext().getRegistry().findByTypeWithName(TransactionTemplate.class);', 'if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next().getTransactionManager();', '} else {', '}', '}', '}', 'if (entityManagerFactory == null) {']
['no entitymanagerfactory has been configured on this jpacomponent each jpaendpoint will auto create their own entitymanagerfactory ', []]
camel sample_14103

['if (map != null) {', 'if (map.size() == 1) {', 'transactionManager = map.values().iterator().next().getTransactionManager();', '} else {', '}', '}', '}', 'if (entityManagerFactory == null) {', '}', 'if (transactionManager == null) {']
['no transactionmanager has been configured on this jpacomponent each jpaendpoint will auto create their own jpatransactionmanager ', []]
camel sample_14103

['private void getAction(Exchange exchange) throws Exception {', 'Integer actionId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'if (ObjectHelper.isEmpty(actionId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().getActionInfo(actionId);']
['action ', ['action']]
camel sample_8888

['private void getActions(Exchange exchange) throws Exception {', 'Actions actions = getEndpoint().getDigitalOceanClient().getAvailableActions(configuration.getPage(), configuration.getPerPage());']
['all actions page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'actions', 'getactions']]
camel sample_8888

['protected void setUp() throws Exception {', 'try {', 'super.setUp();', 'fail("Should have failed to create this route!");', '} catch (FailedToCreateRouteException e) {']
['caught expected exception ', ['e', 'e']]
camel sample_1650

['onException(Exception.class). handled(true). to("log:LOGGER"). to("mock:ObjectCacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: from("direct:aGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', 'from("direct:b"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_2")). to("cache: from("direct:bGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_2")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', 'from("direct:c"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: from("direct:cGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', '}', '});', 'context.setTracing(true);', 'context.start();', 'resultEndpoint.expectedMessageCount(2);', 'cacheExceptionEndpoint.expectedMessageCount(0);']
['beginning cacheproducer add and get test ', []]
camel sample_10510

['onException(Exception.class). handled(true). to("log:LOGGER"). to("mock:ObjectCacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: from("direct:aGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', 'from("direct:b"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_2")). to("cache: from("direct:bGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_2")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', 'from("direct:c"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: from("direct:cGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', '}', '});', 'context.setTracing(true);', 'context.start();', 'resultEndpoint.expectedMessageCount(2);', 'cacheExceptionEndpoint.expectedMessageCount(0);']
['putting data into cache ', []]
camel sample_10510

['from("direct:c"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: from("direct:cGet"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson_3")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:ObjectCacheProducerTest.result").end();', '}', '});', 'context.setTracing(true);', 'context.start();', 'resultEndpoint.expectedMessageCount(2);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'sendNonSerializedData("direct:a", newPoetry("Ralph Waldo Emerson", "Brahma"));', 'sendNonSerializedData("direct:b", newPoetry("Ralph Waldo Emerson", "The Rhodora"));', 'sendNonSerializedData("direct:c", newPoetry("Ralph Waldo Emerson", "Concord Hymn"));']
['retrieving data from cache ', []]
camel sample_10510

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'final Exchange copy = prepareExchange(exchange);', 'ClassLoader current = Thread.currentThread().getContextClassLoader();', 'boolean changed = false;', 'try {', 'ClassLoader appClassLoader = endpoint.getCamelContext().getApplicationContextClassLoader();', 'if (appClassLoader != null) {']
['setting thread contextclassloader to ', ['appclassloader']]
camel sample_4901

['ClassLoader appClassLoader = endpoint.getCamelContext().getApplicationContextClassLoader();', 'if (appClassLoader != null) {', 'Thread.currentThread().setContextClassLoader(appClassLoader);', 'changed = true;', '}', 'final boolean chgd = changed;', 'return processor.process(copy, new AsyncCallback() {', 'public void done(boolean done) {', 'try {', 'if (chgd) {']
['restoring thread contextclassloader to ', ['current']]
camel sample_4901

['Thread.currentThread().setContextClassLoader(current);', '}', 'ExchangeHelper.copyResults(exchange, copy);', '} finally {', 'callback.done(done);', '}', '}', '});', '} finally {', 'if (changed) {']
['restoring thread contextclassloader to ', ['current']]
camel sample_4901

['}', 'if (!interceptorHolder.getInFaultInterceptors().isEmpty()) {', 'factory.setInFaultInterceptors(interceptorHolder.getInFaultInterceptors());', '}', 'if (getProperties() != null) {', 'if (factory.getProperties() != null) {', 'factory.getProperties().putAll(getProperties());', '} else {', 'factory.setProperties(getProperties());', '}']
['jaxrs factorybean added properties ', ['factory', 'getproperties']]
camel sample_8021

['public void setBus(Bus bus) {', 'this.bus = bus;', 'if (defaultBus) {', 'BusFactory.setDefaultBus(bus);']
['set bus as thread default bus ', ['bus']]
camel sample_8021

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixMapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-map.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-map.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1083

['public KeyStore createKeyStore() throws GeneralSecurityException, IOException {']
['creating keystore instance from keystoreparameters ', ['this']]
camel sample_4281

['} else {', 'InputStream is = this.resolveResource(this.parsePropertyValue(this.resource));', 'ks.load(is, ksPassword);', '}', 'if (LOG.isDebugEnabled()) {', 'List<String> aliases = new LinkedList<String>();', 'Enumeration<String> aliasEnum = ks.aliases();', 'while (aliasEnum.hasMoreElements()) {', 'aliases.add(aliasEnum.nextElement());', '}']
['keystore initialized from is using provider has type and contains aliases ', ['new', 'object', 'ks', 'this', 'ks', 'getprovider', 'ks', 'gettype', 'aliases']]
camel sample_4281

['public static void startThriftServer() throws Exception {', 'processor = new Calculator.Processor(new CalculatorSyncServerImpl());', 'serverTransport = new TNonblockingServerSocket(THRIFT_TEST_PORT);', 'server = new THsHaServer(new Args(serverTransport).processor(processor));', 'Runnable simple = new Runnable() {', 'public void run() {']
['thrift server started on port ', ['thrift', 'test', 'port']]
camel sample_13015

['public static void stopThriftServer() throws IOException {', 'if (server != null) {', 'server.stop();', 'serverTransport.close();']
['thrift server stoped ', []]
camel sample_13015

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LambdaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-lambda.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-lambda.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1129

['public void testPollEnrich() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");']
['file log info file ', ['sendbodyandheader', 'sleeping', 'for', 'sec', 'before', 'writing', 'enrichdata']]
camel sample_3114

['public void testPollEnrich() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");', 'Thread.sleep(250);']
['file log info done ', ['sendbodyandheader', 'write']]
camel sample_3114

['public void testSenderXmlData() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.reset();', 'result.expectedMessageCount(4);', 'template.sendBody("direct:endpoint", xmlData);', 'assertMockEndpointsSatisfied();', 'for (Exchange exchange : result.getExchanges()) {', 'String message = exchange.getIn().getBody(String.class);']
['the message is ', ['message']]
camel sample_2355

['protected void doStart() throws Exception {', 'super.doStart();', 'if (server == null) {']
['starting the grpc server ', []]
camel sample_7507

['protected void doStart() throws Exception {', 'super.doStart();', 'if (server == null) {', 'initializeServer();', 'server.start();']
['grpc server started and listening on port ', ['server', 'getport']]
camel sample_7507

['protected void doStop() throws Exception {', 'if (server != null) {']
['terminating grpc server ', []]
camel sample_7507

['ProxyFactory serviceProxy = new ProxyFactory();', 'ServerInterceptor headerInterceptor = new GrpcHeaderInterceptor();', 'MethodHandler methodHandler = new GrpcMethodHandler(endpoint, this);', 'serviceProxy.setSuperclass(GrpcUtils.constructGrpcImplBaseClass(endpoint.getServicePackage(), endpoint.getServiceName(), endpoint.getCamelContext()));', 'try {', 'bindableService = (BindableService)serviceProxy.create(new Class<?>[0], new Object[0], methodHandler);', '} catch (NoSuchMethodException | IllegalArgumentException | InstantiationException | IllegalAccessException | InvocationTargetException e) {', 'throw new IllegalArgumentException("Unable to create bindable proxy service for " + configuration.getService());', '}', 'if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {']
['building grpc server on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_7507

['private boolean doSend(Exchange exchange, AsyncCallback callback) {', 'if (this.isRunAllowed()) {', 'this.getAsyncProcessor().process(exchange, doneSync -> {', 'if (exchange.getException() != null) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', 'callback.done(doneSync);', '});', 'return false;', '} else {']
['consumer not ready to process exchanges the exchange will be discarded ', ['exchange']]
camel sample_7507

['public void testAddFileComment() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.message", CAMEL_TEST_FILE_COMMENT);', 'final com.box.sdk.BoxFile result = requestBodyAndHeaders("direct: assertNotNull("addFileComment result", result);', 'assertNotNull("addFileComment comments", result.getComments());', 'assertTrue("changeCommentMessage comments size", result.getComments().size() > 0);', 'assertEquals("changeCommentMessage comment message", CAMEL_TEST_FILE_COMMENT, result.getComments().get(0).getMessage());']
['addfilecomment ', ['result']]
camel sample_17406

['public void testChangeCommentMessage() throws Exception {', 'BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.commentId", commentInfo.getID());', 'headers.put("CamelBox.message", CAMEL_TEST_FILE_CHANGED_COMMENT);', 'final com.box.sdk.BoxComment result = requestBodyAndHeaders("direct: assertNotNull("changeCommentMessage result", result);', 'assertNotNull("changeCommentMessage message", result.getInfo().getMessage());', 'assertEquals("changeCommentMessage message", CAMEL_TEST_FILE_CHANGED_COMMENT, result.getInfo().getMessage());']
['changecommentmessage ', ['result']]
camel sample_17406

['public void testGetCommentInfo() throws Exception {', 'BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT);', 'final com.box.sdk.BoxComment.Info result = requestBody("direct: assertNotNull("getCommentInfo result", result);', 'assertEquals("getCommentInfo message", CAMEL_TEST_FILE_COMMENT, result.getMessage());']
['getcommentinfo ', ['result']]
camel sample_17406

['public void testGetFileComments() throws Exception {', 'testFile.addComment(CAMEL_TEST_FILE_COMMENT);', 'final java.util.List result = requestBody("direct: assertNotNull("getFileComments result", result);', 'assertEquals("getFileComments size", 1, result.size());']
['getfilecomments ', ['result']]
camel sample_17406

['public void testReplyToComment() throws Exception {', 'BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.commentId", commentInfo.getID());', 'headers.put("CamelBox.message", CAMEL_TEST_FILE_REPLY_COMMENT);', 'final com.box.sdk.BoxComment result = requestBodyAndHeaders("direct: assertNotNull("replyToComment result", result);', 'assertEquals("replyToComment result", CAMEL_TEST_FILE_REPLY_COMMENT, result.getInfo().getMessage());']
['replytocomment ', ['result']]
camel sample_17406

['public void send(WebServiceMessage message) throws IOException {', 'try {', 'camelContext.createProducerTemplate().sendBody(destination.toString(), message);', '} catch (CamelExecutionException e) {']
['could not found any camel endpoint for wsa replyto camel mapping ', ['destination', 'e']]
camel sample_17113

['public void testConsumerInOnly() throws Exception {', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(createConsumerInOnlyRouteBuilder());', 'try {', 'context.start();', '} catch (Throwable t) {', 'Assert.assertEquals(IllegalArgumentException.class, t.getClass());']
['expected exception was thrown ', ['t']]
camel sample_12311

['public void testConsumerInOut() throws Exception {', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(createConsumerInOutRouteBuilder());', 'try {', 'context.start();', '} catch (Throwable t) {', 'Assert.assertEquals(IllegalArgumentException.class, t.getClass());']
['expected exception was thrown ', ['t']]
camel sample_12311

['public void testProducerInOnly() throws Exception {', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(createProducerInOnlyRouteBuilder());', 'try {', 'context.start();', '} catch (Throwable t) {', 'Assert.assertEquals(IllegalArgumentException.class, t.getClass());']
['expected exception was thrown ', ['t']]
camel sample_12311

['public void testProducerInOut() throws Exception {', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(createProducerInOutRouteBuilder());', 'try {', 'context.start();', '} catch (Throwable t) {', 'Assert.assertEquals(IllegalArgumentException.class, t.getClass());']
['expected exception was thrown ', ['t']]
camel sample_12311

['result.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'exchange.setException(new ThrottlingException(msg));', '}', '});', 'template.sendBody(url, "Message One");', 'template.sendBody(url, "Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);']
['sending message three ', []]
camel sample_2640

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'int connectTimeout = 500;', 'int responseTimeout = 5000;', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";', 'onCompletion() .toF("log:%s?level=INFO&showAll=true", routeId) .log(LoggingLevel.INFO, routeId, "Test route complete");']
['mllp mllpclient getmllphost mllpclient getmllpport connecttimeout responsetimeout routeid routeid log logginglevel info routeid message to result ', ['test', 'route', 'received']]
camel sample_13853

['public String greetMe(String me) {']
['executing operation greetme ', []]
camel sample_17810

['public void greetMeOneWay(String me) {']
['executing operation greetmeoneway ', []]
camel sample_17810

['public String sayHi() {']
['executing operation sayhi ', []]
camel sample_17810

['protected void processExchange(Exchange exchange, String target) throws Exception {']
['processing file for exchange ', ['target', 'exchange']]
camel sample_4794

['protected void processExchange(Exchange exchange, String target) throws Exception {', 'try {', 'preWriteCheck();', 'boolean writeAsTempAndRename = ObjectHelper.isNotEmpty(endpoint.getTempFileName());', 'String tempTarget = null;', 'Boolean targetExists;', 'if (writeAsTempAndRename) {', 'tempTarget = createTempFileName(exchange, target);']
['writing using tempnamefile ', ['temptarget']]
camel sample_4794

['try {', 'preWriteCheck();', 'boolean writeAsTempAndRename = ObjectHelper.isNotEmpty(endpoint.getTempFileName());', 'String tempTarget = null;', 'Boolean targetExists;', 'if (writeAsTempAndRename) {', 'tempTarget = createTempFileName(exchange, target);', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {']
['eagerdeletetargetfile target exists ', []]
camel sample_4794

['preWriteCheck();', 'boolean writeAsTempAndRename = ObjectHelper.isNotEmpty(endpoint.getTempFileName());', 'String tempTarget = null;', 'Boolean targetExists;', 'if (writeAsTempAndRename) {', 'tempTarget = createTempFileName(exchange, target);', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore) {']
['an existing file already exists ignore and do not override it ', ['target']]
camel sample_4794

['if (endpoint.getFileExist() != GenericFileExist.TryRename && endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore) {', 'return;', '} else if (endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + target + ". Cannot write new file.");', '} else if (endpoint.getFileExist() == GenericFileExist.Move) {', 'doMoveExistingFile(target);', '} else if (endpoint.isEagerDeleteTargetFile() && endpoint.getFileExist() == GenericFileExist.Override) {']
['eagerly deleting existing file ', ['target']]
camel sample_4794

['} else if (endpoint.getFileExist() == GenericFileExist.Move) {', 'doMoveExistingFile(target);', '} else if (endpoint.isEagerDeleteTargetFile() && endpoint.getFileExist() == GenericFileExist.Override) {', 'if (!operations.deleteFile(target)) {', 'throw new GenericFileOperationFailedException("Cannot delete file: " + target);', '}', '}', '}', '}', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && operations.existsFile(tempTarget)) {']
['deleting existing temp file ', ['temptarget']]
camel sample_4794

['if (!operations.deleteFile(tempTarget)) {', 'throw new GenericFileOperationFailedException("Cannot delete file: " + tempTarget);', '}', '}', '}', 'writeFile(exchange, tempTarget != null ? tempTarget : target);', 'if (tempTarget != null) {', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && !endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {']
['not using eagerdeletetargetfile target exists ', []]
camel sample_4794

['throw new GenericFileOperationFailedException("Cannot delete file: " + tempTarget);', '}', '}', '}', 'writeFile(exchange, tempTarget != null ? tempTarget : target);', 'if (tempTarget != null) {', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && !endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore) {']
['an existing file already exists ignore and do not override it ', ['target']]
camel sample_4794

['writeFile(exchange, tempTarget != null ? tempTarget : target);', 'if (tempTarget != null) {', 'if (endpoint.getFileExist() != GenericFileExist.TryRename && !endpoint.isEagerDeleteTargetFile()) {', 'targetExists = operations.existsFile(target);', 'if (targetExists) {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore) {', 'return;', '} else if (endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + target + ". Cannot write new file.");', '} else if (endpoint.getFileExist() == GenericFileExist.Override) {']
['deleting existing file ', ['target']]
camel sample_4794

['return;', '} else if (endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + target + ". Cannot write new file.");', '} else if (endpoint.getFileExist() == GenericFileExist.Override) {', 'if (!operations.deleteFile(target)) {', 'throw new GenericFileOperationFailedException("Cannot delete file: " + target);', '}', '}', '}', '}']
['renaming file to ', ['temptarget', 'target']]
camel sample_4794

['boolean renamed = operations.renameFile(tempTarget, target);', 'if (!renamed) {', 'throw new GenericFileOperationFailedException("Cannot rename file from: " + tempTarget + " to: " + target);', '}', '}', 'if (endpoint.getDoneFileName() != null) {', 'String doneFileName = endpoint.createDoneFileName(target);', 'ObjectHelper.notEmpty(doneFileName, "doneFileName", endpoint);', 'Exchange empty = new DefaultExchange(exchange);', 'empty.getIn().setBody("");']
['writing done file ', ['donefilename']]
camel sample_4794

['public void writeFile(Exchange exchange, String fileName) throws GenericFileOperationFailedException {', 'if (endpoint.isAutoCreate()) {', 'String name = FileUtil.normalizePath(fileName);', 'File file = new File(name);', 'String directory = file.getParent();', 'boolean absolute = FileUtil.isAbsolute(file);', 'if (directory != null) {', 'if (!operations.buildDirectory(directory, absolute)) {']
['cannot build directory could be because of denied permissions ', ['directory']]
camel sample_4794

['String name = FileUtil.normalizePath(fileName);', 'File file = new File(name);', 'String directory = file.getParent();', 'boolean absolute = FileUtil.isAbsolute(file);', 'if (directory != null) {', 'if (!operations.buildDirectory(directory, absolute)) {', '}', '}', '}', 'if (log.isTraceEnabled()) {']
['about to write to from exchange ', ['new', 'object', 'filename', 'getendpoint', 'exchange']]
camel sample_4794

['if (!operations.buildDirectory(directory, absolute)) {', '}', '}', '}', 'if (log.isTraceEnabled()) {', '}', 'boolean success = operations.storeFile(fileName, exchange, -1);', 'if (!success) {', 'throw new GenericFileOperationFailedException("Error writing file [" + fileName + "]");', '}']
['wrote to ', ['filename', 'getendpoint']]
camel sample_4794

['} else {', 'value = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, overrule);', '}', '} else {', 'value = exchange.getIn().getHeader(Exchange.FILE_NAME);', '}', 'if (overrule != null) {', 'exchange.getIn().setHeader(Exchange.FILE_NAME, value);', '}', 'if (value != null && value instanceof String && StringHelper.hasStartToken((String) value, "simple")) {']
['simple expression detected in header of type string this feature has been removed see camel ', ['value', 'exchange', 'file', 'name']]
camel sample_4794

['exchange.getIn().setHeader(Exchange.FILE_NAME, value);', '}', 'if (value != null && value instanceof String && StringHelper.hasStartToken((String) value, "simple")) {', '}', 'Expression expression = endpoint.getFileName();', 'if (value instanceof Expression) {', 'expression = (Expression) value;', '}', 'String name;', 'if (expression != null) {']
['filename evaluated as expression ', ['expression']]
camel sample_4794

['public void onOpen(WebSocket websocket) {']
['ws opened ', []]
camel sample_13150

['public void onClose(WebSocket websocket) {']
['ws closed ', []]
camel sample_13150

['public void onError(Throwable t) {']
['ws error ', ['t']]
camel sample_13150

['public void onMessage(byte[] message) {', 'received.add(message);']
['ws received bytes ', ['arrays', 'tostring', 'message']]
camel sample_13150

['public void onMessage(String message) {', 'received.add(message);']
['ws received ', ['message']]
camel sample_13150

['private Exchange receive(DataQueue queue, long timeout) throws Exception {', 'DataQueueEntry entry;', 'if (timeout >= 0) {', 'int seconds = (int) timeout / 1000;']
['reading from data queue with seconds timeout ', ['queue', 'getname', 'seconds']]
camel sample_16775

['private Exchange receive(DataQueue queue, long timeout) throws Exception {', 'DataQueueEntry entry;', 'if (timeout >= 0) {', 'int seconds = (int) timeout / 1000;', 'entry = queue.read(seconds);', '} else {']
['reading from data queue with no timeout ', ['queue', 'getname']]
camel sample_16775

['private Exchange receive(KeyedDataQueue queue, long timeout) throws Exception {', 'String key = getEndpoint().getSearchKey();', 'String searchType = getEndpoint().getSearchType().name();', 'KeyedDataQueueEntry entry;', 'if (timeout >= 0) {', 'int seconds = (int) timeout / 1000;']
['reading from data queue with seconds timeout ', ['queue', 'getname', 'seconds']]
camel sample_16775

['private Exchange receive(KeyedDataQueue queue, long timeout) throws Exception {', 'String key = getEndpoint().getSearchKey();', 'String searchType = getEndpoint().getSearchType().name();', 'KeyedDataQueueEntry entry;', 'if (timeout >= 0) {', 'int seconds = (int) timeout / 1000;', 'entry = queue.read(key, seconds, searchType);', '} else {']
['reading from data queue with no timeout ', ['queue', 'getname']]
camel sample_16775

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GoogleDriveComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-drive.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-drive.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_486

['try {', 'template.sendBodyAndHeader("direct:start", "<body/>", "route", route);', 'fail("Should have thrown exception");', '} catch (RuntimeCamelException e) {', 'assertTrue(e.getCause() instanceof IllegalArgumentException);', 'assertEquals("Exception thrown intentionally.", e.getCause().getMessage());', '}', 'assertMockEndpointsSatisfied();', 'List<Exchange> list = exceptionEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);']
['received ', ['exchange', 'getin']]
camel sample_3860

['protected RouteBuilder createRouteBuilder() throws Exception {', 'final Processor exceptionThrower = new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['about to throw exception on ', ['exchange']]
camel sample_3860

['public void onClose(int closeCode, String message) {']
['onclose ', ['closecode', 'message']]
camel sample_17471

['public void onConnect(Session session) {']
['onconnect ', ['session']]
camel sample_17471

['public void onMessage(String message) {']
['onmessage ', ['message']]
camel sample_17471

['public void onMessage(String message) {', 'if (this.consumer != null) {', 'this.consumer.sendMessage(this.connectionKey, message);', '} else {']
['no consumer to handle message received ', ['message']]
camel sample_17471

['public void onMessage(byte[] data, int offset, int length) {']
['onmessage byte ', []]
camel sample_17471

['public void onMessage(byte[] data, int offset, int length) {', 'if (this.consumer != null) {', 'byte[] message = new byte[length];', 'System.arraycopy(data, offset, message, 0, length);', 'this.consumer.sendMessage(this.connectionKey, message);', '} else {']
['no consumer to handle message received byte ', []]
camel sample_17471

['protected int poll() throws Exception {', 'GetRecordsRequest req = new GetRecordsRequest().withShardIterator(getShardItertor()).withLimit(getEndpoint().getConfiguration().getMaxResultsPerRequest());', 'GetRecordsResult result = getClient().getRecords(req);', 'Queue<Exchange> exchanges = createExchanges(result.getRecords());', 'int processedExchangeCount = processBatch(CastUtils.cast(exchanges));', 'currentShardIterator = result.getNextShardIterator();', 'if (isShardClosed) {', 'switch (getEndpoint().getConfiguration().getShardClosed()) {']
['the shard is in closed state ', []]
camel sample_8685

['protected int poll() throws Exception {', 'GetRecordsRequest req = new GetRecordsRequest().withShardIterator(getShardItertor()).withLimit(getEndpoint().getConfiguration().getMaxResultsPerRequest());', 'GetRecordsResult result = getClient().getRecords(req);', 'Queue<Exchange> exchanges = createExchanges(result.getRecords());', 'int processedExchangeCount = processBatch(CastUtils.cast(exchanges));', 'currentShardIterator = result.getNextShardIterator();', 'if (isShardClosed) {', 'switch (getEndpoint().getConfiguration().getShardClosed()) {', 'break;', 'case silent: break;']
['shard iterator reaches close status ', ['getendpoint', 'getconfiguration', 'getstreamname', 'getendpoint', 'getconfiguration', 'getshardid']]
camel sample_8685

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int processedExchanges = 0;', 'while (!exchanges.isEmpty()) {', 'final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());']
['processing exchange started ', ['exchange']]
camel sample_8685

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int processedExchanges = 0;', 'while (!exchanges.isEmpty()) {', 'final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['processing exchange done ', ['exchange']]
camel sample_8685

['} else {', 'DescribeStreamRequest req1 = new DescribeStreamRequest().withStreamName(getEndpoint().getConfiguration().getStreamName());', 'DescribeStreamResult res1 = getClient().describeStream(req1);', 'shardId = res1.getStreamDescription().getShards().get(0).getShardId();', 'if (res1.getStreamDescription().getShards().get(0).getSequenceNumberRange().getEndingSequenceNumber() == null) {', 'isShardClosed = false;', '} else {', 'isShardClosed = true;', '}', '}']
['shardid is ', ['shardid']]
camel sample_8685

['isShardClosed = true;', '}', '}', 'GetShardIteratorRequest req = new GetShardIteratorRequest().withStreamName(getEndpoint().getConfiguration().getStreamName()).withShardId(shardId) .withShardIteratorType(getEndpoint().getConfiguration().getIteratorType());', 'if (hasSequenceNumber()) {', 'req.withStartingSequenceNumber(getEndpoint().getConfiguration().getSequenceNumber());', '}', 'GetShardIteratorResult result = getClient().getShardIterator(req);', 'currentShardIterator = result.getShardIterator();', '}']
['shard iterator is ', ['currentsharditerator']]
camel sample_8685

['private String createCandidateName() {', 'StringBuilder builder = new StringBuilder();', 'try {', 'builder.append(InetAddress.getLocalHost().getCanonicalHostName());', '} catch (UnknownHostException ex) {']
['failed to get the local hostname ', ['ex']]
camel sample_12673

['private void notifyElectionWatchers() {', 'for (ElectionWatcher watcher : watchers) {', 'try {', 'watcher.electionResultChanged();', '} catch (Exception e) {']
['election watcher of type threw an exception ', ['watcher', 'watcher', 'getclass', 'e']]
camel sample_12673

['public void takeLeadership(CuratorFramework curatorFramework) throws Exception {', 'masterNode.set(true);']
['is now leader ', ['getcandidatename']]
camel sample_12673

['notifyElectionWatchers();', 'while (!isCamelStopping(camelContext)) {', 'try {', 'Thread.sleep(5000);', '} catch (InterruptedException e) {', 'Thread.interrupted();', 'break;', '}', '}', 'masterNode.set(false);']
['has given up its own leadership ', ['getcandidatename']]
camel sample_12673

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CaffeineLoadCacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-loadcache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-loadcache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_469

['} else if (getDataFormat().dealias() == DataFormat.RAW) {', 'RAWDataFormatFeature feature = new RAWDataFormatFeature();', 'if (this.getExchangePattern().equals(ExchangePattern.InOnly)) {', 'feature.setOneway(true);', '}', 'feature.addInIntercepters(getInInterceptors());', 'feature.addOutInterceptors(getOutInterceptors());', 'sfb.getFeatures().add(feature);', '}', '} else {']
['ignore dataformat mode since sei class is annotated with webserviceprovider ', ['getdataformat']]
camel sample_7989

['}', 'if (getWrappedStyle() != null && getDataFormat().dealias() != DataFormat.CXF_MESSAGE) {', 'setWrapped(sfb, getWrappedStyle());', '}', 'if (getProperties() != null) {', 'if (sfb.getProperties() != null) {', 'sfb.getProperties().putAll(getProperties());', '} else {', 'sfb.setProperties(getProperties());', '}']
['serverfactorybean added properties ', ['sfb', 'getproperties']]
camel sample_7989

['}', 'if (getWrappedStyle() != null) {', 'setWrapped(factoryBean, getWrappedStyle());', '}', 'if (getProperties() != null) {', 'if (factoryBean.getProperties() != null) {', 'factoryBean.getProperties().putAll(getProperties());', '} else {', 'factoryBean.setProperties(getProperties());', '}']
['clientfactorybean added properties ', ['factorybean', 'getproperties']]
camel sample_7989

['public Bus getBus() {', 'if (bus == null) {', 'bus = CxfEndpointUtils.createBus(getCamelContext());', 'this.createBus = true;']
['using defaultbus ', ['bus']]
camel sample_7989

['public Bus getBus() {', 'if (bus == null) {', 'bus = CxfEndpointUtils.createBus(getCamelContext());', 'this.createBus = true;', '}', 'if (!getBusHasBeenCalled.getAndSet(true) && defaultBus) {', 'BusFactory.setDefaultBus(bus);']
['set bus as thread default bus ', ['bus']]
camel sample_7989

['public void setCamelContext(CamelContext c) {', 'super.setCamelContext(c);', 'if (this.properties != null) {', 'try {', 'EndpointHelper.setReferenceProperties(getCamelContext(), this, this.properties);', 'EndpointHelper.setProperties(getCamelContext(), this, this.properties);', '} catch (Throwable e) {']
['error setting camelcontext this exception will be ignored ', ['e']]
camel sample_7989

['if (this.properties == null) {', 'this.properties = properties;', '} else {', 'this.properties.putAll(properties);', '}', 'if (getCamelContext() != null && this.properties != null) {', 'try {', 'EndpointHelper.setReferenceProperties(getCamelContext(), this, this.properties);', 'EndpointHelper.setProperties(getCamelContext(), this, this.properties);', '} catch (Throwable e) {']
['error setting properties this exception will be ignored ', ['e']]
camel sample_7989

['protected void doStop() throws Exception {', 'if (createBus && bus != null) {']
['shutdown the bus ', ['bus']]
camel sample_7989

['}', 'if (r != null) {', 'try {', 'if (r.getEventType() == XMLStreamConstants.START_DOCUMENT) {', 'r.next();', '}', 'if (r.getEventType() != XMLStreamConstants.START_ELEMENT) {', 'r.nextTag();', '}', '} catch (XMLStreamException e) {']
['error finding the start element ', ['e']]
camel sample_7989

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RestApiComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest-api.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest-api.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_890

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BraintreeComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.braintree.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.braintree.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_740

['private void startBroker() throws Exception {', 'broker.start();']
['started embedded jms server ', []]
camel sample_6418

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {']
['waiting on the camel context to stop ', []]
camel sample_6418

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}']
['closing jms session ', []]
camel sample_6418

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}']
['closing jms connection ', []]
camel sample_6418

['while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}', 'if (connection != null) {', 'connection.stop();', 'connection = null;', '}']
['stopping the activemq broker ', []]
camel sample_6418

['protected void doStart() throws Exception {', 'super.doStart();', 'String path = endpoint.getComponent().getCamelClusterPath(endpoint.getGroupName());', 'this.groupListener = new ZookeeperGroupListenerSupport(path, endpoint, onLockOwned(), onDisconnected());', 'this.groupListener.setCamelContext(endpoint.getCamelContext());', 'this.groupListener.setZooKeeperUrl(endpoint.getComponent().getZooKeeperUrl());', 'this.groupListener.setZooKeeperPassword(endpoint.getComponent().getZooKeeperPassword());', 'this.groupListener.setCurator(endpoint.getComponent().getCurator());', 'this.groupListener.setMaximumConnectionTimeout(endpoint.getComponent().getMaximumConnectionTimeout());', 'ServiceHelper.startService(groupListener);']
['attempting to become master for endpoint in with singletonid ', ['endpoint', 'endpoint', 'getcamelcontext', 'endpoint', 'getgroupname']]
camel sample_9702

['protected Runnable onLockOwned() {', 'return () -> {', 'if (delegate == null) {', 'try {']
['elected as master starting consumer ', ['endpoint', 'getconsumerendpoint']]
camel sample_9702

['delegate = endpoint.getConsumerEndpoint().createConsumer(processor);', 'delegateService = null;', 'if (delegate instanceof SuspendableService) {', 'delegateService = (SuspendableService) delegate;', '}', 'thisNodeState = createNodeState();', 'thisNodeState.setStarted(true);', 'groupListener.updateState(thisNodeState);', 'ServiceHelper.startService(delegate);', '} catch (Exception e) {']
['failed to start master consumer for ', ['endpoint', 'e']]
camel sample_9702

['delegateService = null;', 'if (delegate instanceof SuspendableService) {', 'delegateService = (SuspendableService) delegate;', '}', 'thisNodeState = createNodeState();', 'thisNodeState.setStarted(true);', 'groupListener.updateState(thisNodeState);', 'ServiceHelper.startService(delegate);', '} catch (Exception e) {', '}']
['elected as master consumer started ', ['endpoint', 'getconsumerendpoint']]
camel sample_9702

['protected Runnable onDisconnected() {', 'return () -> {', 'try {', 'stopConsumer();', '} catch (Exception e) {']
['failed to stop master consumer for ', ['endpoint', 'e']]
camel sample_9702

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'ServiceHelper.suspendService(context.getRoute("test").getConsumer());', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_14932

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'Thread.sleep(1000);', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_14932

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'Thread.sleep(1000);', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_14932

['public void setDefaultThreadPoolProfile(ThreadPoolProfile defaultThreadPoolProfile) {', 'threadPoolProfiles.remove(defaultThreadPoolProfileId);', 'defaultThreadPoolProfile.addDefaults(defaultProfile);']
['using custom defaultthreadpoolprofile ', ['defaultthreadpoolprofile']]
camel sample_3972

['public ExecutorService newThreadPool(Object source, String name, ThreadPoolProfile profile) {', 'String sanitizedName = URISupport.sanitizeUri(name);', 'ObjectHelper.notNull(profile, "ThreadPoolProfile");', 'ThreadPoolProfile defaultProfile = getDefaultThreadPoolProfile();', 'profile.addDefaults(defaultProfile);', 'ThreadFactory threadFactory = createThreadFactory(sanitizedName, true);', 'ExecutorService executorService = threadPoolFactory.newThreadPool(profile, threadFactory);', 'onThreadPoolCreated(executorService, source, profile.getId());', 'if (LOG.isDebugEnabled()) {']
['created new threadpool for source with name ', ['source', 'sanitizedname', 'executorservice']]
camel sample_3972

['public ExecutorService newCachedThreadPool(Object source, String name) {', 'String sanitizedName = URISupport.sanitizeUri(name);', 'ExecutorService answer = threadPoolFactory.newCachedThreadPool(createThreadFactory(sanitizedName, true));', 'onThreadPoolCreated(answer, source, null);', 'if (LOG.isDebugEnabled()) {']
['created new cachedthreadpool for source with name ', ['source', 'sanitizedname', 'answer']]
camel sample_3972

['public ScheduledExecutorService newScheduledThreadPool(Object source, String name, ThreadPoolProfile profile) {', 'String sanitizedName = URISupport.sanitizeUri(name);', 'profile.addDefaults(getDefaultThreadPoolProfile());', 'ScheduledExecutorService answer = threadPoolFactory.newScheduledThreadPool(profile, createThreadFactory(sanitizedName, true));', 'onThreadPoolCreated(answer, source, null);', 'if (LOG.isDebugEnabled()) {']
['created new scheduledthreadpool for source with name ', ['source', 'sanitizedname', 'answer']]
camel sample_3972

['private boolean doShutdown(ExecutorService executorService, long shutdownAwaitTermination, boolean failSafe) {', 'if (executorService == null) {', 'return false;', '}', 'boolean warned = false;', 'if (!executorService.isShutdown()) {', 'StopWatch watch = new StopWatch();']
['shutdown of executorservice with await termination millis ', ['executorservice', 'shutdownawaittermination']]
camel sample_3972

['return false;', '}', 'boolean warned = false;', 'if (!executorService.isShutdown()) {', 'StopWatch watch = new StopWatch();', 'executorService.shutdown();', 'if (shutdownAwaitTermination > 0) {', 'try {', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {', 'warned = true;']
['forcing shutdown of executorservice due first await termination elapsed ', ['executorservice']]
camel sample_3972

['boolean warned = false;', 'if (!executorService.isShutdown()) {', 'StopWatch watch = new StopWatch();', 'executorService.shutdown();', 'if (shutdownAwaitTermination > 0) {', 'try {', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {', 'warned = true;', 'executorService.shutdownNow();', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {']
['cannot completely force shutdown of executorservice due second await termination elapsed ', ['executorservice']]
camel sample_3972

['if (shutdownAwaitTermination > 0) {', 'try {', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {', 'warned = true;', 'executorService.shutdownNow();', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {', '}', '}', '} catch (InterruptedException e) {', 'warned = true;']
['forcing shutdown of executorservice due interrupted ', ['executorservice']]
camel sample_3972

['executorService.shutdownNow();', 'if (!awaitTermination(executorService, shutdownAwaitTermination)) {', '}', '}', '} catch (InterruptedException e) {', 'warned = true;', 'executorService.shutdownNow();', '}', '}', 'if (warned) {']
['shutdown of executorservice is shutdown and terminated took ', ['executorservice', 'executorservice', 'isshutdown', 'executorservice', 'isterminated', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3972

['if (!awaitTermination(executorService, shutdownAwaitTermination)) {', '}', '}', '} catch (InterruptedException e) {', 'warned = true;', 'executorService.shutdownNow();', '}', '}', 'if (warned) {', '} else if (LOG.isDebugEnabled()) {']
['shutdown of executorservice is shutdown and terminated took ', ['executorservice', 'executorservice', 'isshutdown', 'executorservice', 'isterminated', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3972

['private List<Runnable> doShutdownNow(ExecutorService executorService, boolean failSafe) {', 'ObjectHelper.notNull(executorService, "executorService");', 'List<Runnable> answer = null;', 'if (!executorService.isShutdown()) {', 'if (failSafe) {']
['forcing shutdown of executorservice ', ['executorservice']]
camel sample_3972

['private List<Runnable> doShutdownNow(ExecutorService executorService, boolean failSafe) {', 'ObjectHelper.notNull(executorService, "executorService");', 'List<Runnable> answer = null;', 'if (!executorService.isShutdown()) {', 'if (failSafe) {', '} else {']
['forcing shutdown of executorservice ', ['executorservice']]
camel sample_3972

['private List<Runnable> doShutdownNow(ExecutorService executorService, boolean failSafe) {', 'ObjectHelper.notNull(executorService, "executorService");', 'List<Runnable> answer = null;', 'if (!executorService.isShutdown()) {', 'if (failSafe) {', '} else {', '}', 'answer = executorService.shutdownNow();', 'if (LOG.isTraceEnabled()) {']
['shutdown of executorservice is shutdown and terminated ', ['executorservice', 'executorservice', 'isshutdown', 'executorservice', 'isterminated']]
camel sample_3972

['public boolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination) throws InterruptedException {', 'StopWatch watch = new StopWatch();', 'long interval = Math.min(2000, shutdownAwaitTermination);', 'boolean done = false;', 'while (!done && interval > 0) {', 'if (executorService.awaitTermination(interval, TimeUnit.MILLISECONDS)) {', 'done = true;', '} else {']
['waited for executorservice to terminate ', ['timeutils', 'printduration', 'watch', 'taken', 'executorservice']]
camel sample_3972

['protected void doShutdown() throws Exception {', 'Set<ExecutorService> forced = new LinkedHashSet<>();', 'if (!executorServices.isEmpty()) {']
['giving time for executorservice s to shutdown properly acting as fail safe ', ['executorservices', 'size']]
camel sample_3972

['protected void doShutdown() throws Exception {', 'Set<ExecutorService> forced = new LinkedHashSet<>();', 'if (!executorServices.isEmpty()) {', 'for (ExecutorService executorService : executorServices) {', 'try {', 'boolean warned = doShutdown(executorService, getShutdownAwaitTermination(), true);', 'if (warned) {', 'forced.add(executorService);', '}', '} catch (Throwable e) {']
['error occurred during shutdown of executorservice this exception will be ignored ', ['executorservice', 'e']]
camel sample_3972

['try {', 'boolean warned = doShutdown(executorService, getShutdownAwaitTermination(), true);', 'if (warned) {', 'forced.add(executorService);', '}', '} catch (Throwable e) {', '}', '}', '}', 'if (!forced.isEmpty()) {']
['forced shutdown of executorservice s which has not been shutdown properly acting as fail safe ', ['forced', 'size']]
camel sample_3972

['boolean warned = doShutdown(executorService, getShutdownAwaitTermination(), true);', 'if (warned) {', 'forced.add(executorService);', '}', '} catch (Throwable e) {', '}', '}', '}', 'if (!forced.isEmpty()) {', 'for (ExecutorService executorService : forced) {']
['forced ', ['executorservice']]
camel sample_3972

['public Object processWorkflow(Object[] parameters, long startTime, boolean replaying) throws Exception {']
['processing workflow task ', ['arrays', 'tostring', 'parameters']]
camel sample_8797

['public void signalRecieved(Object[] parameters) throws Exception {']
['signalrecieved ', ['arrays', 'tostring', 'parameters']]
camel sample_8797

['public Object getWorkflowState(Object parameters) throws Exception {']
['getworkflowstate ', ['parameters']]
camel sample_8797

['String originalThreadName = Thread.currentThread().getName();', 'Thread.currentThread().setName(createThreadName(serverSocket));', 'MDC.put(MDCUnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName());', 'Route route = consumer.getRoute();', 'if (route != null) {', 'String routeId = route.getId();', 'if (routeId != null) {', 'MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId());', '}', '}']
['starting serversocket accept thread for ', ['serversocket']]
camel sample_13873

['MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId());', '}', '}', 'try {', 'while (running && null != serverSocket && serverSocket.isBound() && !serverSocket.isClosed()) {', 'Socket socket = null;', 'try {', 'socket = serverSocket.accept();', 'consumer.getEndpoint().updateLastConnectionEstablishedTicks();', '} catch (SocketTimeoutException timeoutEx) {']
['timeout waiting for client connection keep listening ', []]
camel sample_13873

['try {', 'socket = serverSocket.accept();', 'consumer.getEndpoint().updateLastConnectionEstablishedTicks();', '} catch (SocketTimeoutException timeoutEx) {', 'continue;', '} catch (SocketException socketEx) {', 'if (serverSocket.isBound()) {', 'try {', 'serverSocket.close();', '} catch (Exception ex) {']
['exception encountered closing serversocket after socketexception on accept ignoring ', ['ex']]
camel sample_13873

['continue;', '} catch (SocketException socketEx) {', 'if (serverSocket.isBound()) {', 'try {', 'serverSocket.close();', '} catch (Exception ex) {', '}', '}', 'continue;', '} catch (IOException ioEx) {']
['exception encountered accepting connection closing serversocket ', ['ioex']]
camel sample_13873

['serverSocket.close();', '} catch (Exception ex) {', '}', '}', 'continue;', '} catch (IOException ioEx) {', 'if (serverSocket.isBound()) {', 'try {', 'serverSocket.close();', '} catch (Exception ex) {']
['exception encountered closing serversocket after exception on accept ignoring ', ['ex']]
camel sample_13873

['} catch (Exception ex) {', '}', '}', 'continue;', '}', 'if (MllpSocketBuffer.isConnectionValid(socket)) {', 'consumer.startConsumer(socket);', '}', '}', '} finally {']
['serversocket accept loop finished closing listener ', []]
camel sample_13873

['}', 'if (MllpSocketBuffer.isConnectionValid(socket)) {', 'consumer.startConsumer(socket);', '}', '}', '} finally {', 'if (null != serverSocket && serverSocket.isBound() && !serverSocket.isClosed()) {', 'try {', 'serverSocket.close();', '} catch (Exception ex) {']
['exception encountered closing serversocket after accept loop had exited ignoring ', ['ex']]
camel sample_13873

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SqlStoredComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sql-stored.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sql-stored.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_982

['public HttpServerInitializerFactory(NettyHttpConsumer nettyConsumer) {', 'this.consumer = nettyConsumer;', 'this.configuration = nettyConsumer.getConfiguration();', 'try {', 'this.sslContext = createSSLContext(consumer.getContext(), consumer.getConfiguration());', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_16667

['protected void initChannel(Channel ch) throws Exception {', 'ChannelPipeline pipeline = ch.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_16667

['private SSLContext createSSLContext(CamelContext camelContext, NettyServerBootstrapConfiguration configuration) throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_16667

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_16667

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_16667

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<OpenShiftComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openshift.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openshift.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1109

['public void process(Exchange exchange) throws Exception {']
['crafting standard response in stockquoteresponseprocessor ', []]
camel sample_17076

['protected void onFailedMessage(Exchange exchange, String messageId) {', 'if (removeOnFailure) {', 'if (idempotentRepository instanceof ExchangeIdempotentRepository) {', '((ExchangeIdempotentRepository<String>) idempotentRepository).remove(exchange, messageId);', '} else {', 'idempotentRepository.remove(messageId);', '}']
['removed from repository as exchange failed with id ', ['exchange', 'messageid']]
camel sample_4472

['public Ehcache initializeCache() {', 'CacheManager cacheManager = getCacheManagerFactory().getInstance();', 'Ehcache cache;', 'if (cacheManager.cacheExists(config.getCacheName())) {', 'if (LOG.isTraceEnabled()) {']
['found an existing cache ', ['config', 'getcachename']]
camel sample_10530

['public Ehcache initializeCache() {', 'CacheManager cacheManager = getCacheManagerFactory().getInstance();', 'Ehcache cache;', 'if (cacheManager.cacheExists(config.getCacheName())) {', 'if (LOG.isTraceEnabled()) {']
['cache currently contains elements ', ['config', 'getcachename', 'cachemanager', 'getehcache', 'config', 'getcachename', 'getsize']]
camel sample_10530

['cache = new Cache(config.getCacheName(), config.getMaxElementsInMemory(), config.getMemoryStoreEvictionPolicy(), config.isOverflowToDisk(), config.getDiskStorePath(), config.isEternal(), config.getTimeToLiveSeconds(), config.getTimeToIdleSeconds(), config.isDiskPersistent(), config.getDiskExpiryThreadIntervalSeconds(), null);', 'for (CacheEventListener listener : config.getEventListenerRegistry().getEventListeners()) {', 'cache.getCacheEventNotificationService().registerListener(listener);', '}', 'for (CacheLoaderWrapper loader : config.getCacheLoaderRegistry().getCacheLoaders()) {', 'loader.init(cache);', 'cache.registerCacheLoader(loader);', '}', 'cacheManager.addCache(cache);', 'if (LOG.isDebugEnabled()) {']
['added a new cache ', ['cache', 'getname']]
camel sample_10530

['answer = message.getHeader(localPart);', '}', 'if (answer == null) {', 'answer = exchange.get().getProperty(localPart);', '}', '}', '} else if (uri.equals(SYSTEM_PROPERTIES_NAMESPACE)) {', 'try {', 'answer = System.getProperty(localPart);', '} catch (Exception e) {']
['security exception evaluating system property reason ', ['localpart', 'e', 'e']]
camel sample_5633

['public Destination getDestination(EndpointInfo endpointInfo, Bus b) throws IOException {']
['create cxfbeandestination ', ['endpointinfo']]
camel sample_8001

['public void doSomething(String body) {', 'ObjectHelper.notNull(destination, "destination");']
['received body ', ['body']]
camel sample_15732

['try {', 'clazz = routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(beanType);', '} catch (ClassNotFoundException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', '} else {', 'clazz = beanClass;', '}', 'if (isCacheBean() && routeContext.getCamelContext().getInjector().supportsAutoWiring()) {', 'try {']
['attempting to create new bean instance from class via auto wiring enabled ', ['clazz']]
camel sample_5263

['} catch (ClassNotFoundException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', '} else {', 'clazz = beanClass;', '}', 'if (isCacheBean() && routeContext.getCamelContext().getInjector().supportsAutoWiring()) {', 'try {', 'bean = CamelContextHelper.newInstance(routeContext.getCamelContext(), clazz);', '} catch (Throwable e) {']
['error creating new bean instance from class this exception is ignored ', ['clazz', 'e']]
camel sample_5263

['} else {', 'clazz = beanClass;', '}', 'if (isCacheBean() && routeContext.getCamelContext().getInjector().supportsAutoWiring()) {', 'try {', 'bean = CamelContextHelper.newInstance(routeContext.getCamelContext(), clazz);', '} catch (Throwable e) {', '}', '}', 'if (bean == null && isCacheBean() && ObjectHelper.hasDefaultPublicNoArgConstructor(clazz)) {']
['class has default no arg constructor so creating a new bean instance ', ['clazz']]
camel sample_5263

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DisruptorComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.disruptor.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.disruptor.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_717

['public void testXMLRouteLoading() throws Exception {', 'applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextFactoryBean.xml");', 'CamelContext context = applicationContext.getBean("camel2", CamelContext.class);', 'assertNotNull("No context found!", context);', 'List<Route> routes = context.getRoutes();']
['found routes ', ['routes']]
camel sample_15677

['PEMDecryptorProvider pemDecryptor = decryptorBuilder.build(passwordFinder.getPassword());', 'o = pemConverter.getKeyPair(((PEMEncryptedKeyPair) o).decryptKeyPair(pemDecryptor));', '}', 'if (o instanceof PEMKeyPair) {', 'o = pemConverter.getKeyPair((PEMKeyPair)o);', 'keys.add((KeyPair) o);', '} else if (o instanceof KeyPair) {', 'keys.add((KeyPair) o);', '}', '} catch (Exception e) {']
['unable to read key ', ['e']]
camel sample_10025

['assertNotNull(classes);', 'assertTrue("There should be > 140 classes, was: " + classes.size(), classes.size() > 140);', 'for (Class<?> clazz : classes) {', 'if (clazz == ProcessorDefinition.class) {', 'continue;', '}', 'if (clazz == RouteDefinition.class) {', 'continue;', '}', 'for (Field field : clazz.getDeclaredFields()) {']
['class has field ', ['clazz', 'getname', 'field', 'getname']]
camel sample_3708

['fail("Class " + clazz.getName() + " has field " + field.getName() + " which has 2+ annotations that are not allowed together.");', '}', 'if (attribute || element || elementRef) {', 'Method getter = IntrospectionSupport.getPropertyGetter(clazz, field.getName());', 'Method setter = IntrospectionSupport.getPropertySetter(clazz, field.getName());', 'assertNotNull("Getter " + field.getName() + " on class " + clazz.getName() + " is missing", getter);', 'assertNotNull("Setter " + field.getName() + " on class " + clazz.getName() + " is missing", setter);', '}', '}', 'for (Method method : clazz.getDeclaredMethods()) {']
['class has method ', ['clazz', 'getname', 'method', 'getname']]
camel sample_3708

['}', 'if (sync) {', 'responseLatch = new CountDownLatch(1);', 'handler.reset();', '}', 'if (LOG.isDebugEnabled()) {', 'Object out = body;', 'if (body instanceof byte[]) {', 'out = exchange.getContext().getTypeConverter().convertTo(String.class, body);', '}']
['writing body ', ['out']]
camel sample_11634

['handler.reset();', '}', 'if (LOG.isDebugEnabled()) {', 'Object out = body;', 'if (body instanceof byte[]) {', 'out = exchange.getContext().getTypeConverter().convertTo(String.class, body);', '}', '}', 'Mina2Helper.writeBody(session, body, exchange, writeTimeout);', 'if (sync) {']
['waiting for response using timeout millis ', ['timeout']]
camel sample_11634

['if (ExchangeHelper.isOutCapable(exchange)) {', 'close = exchange.getOut().getHeader(Mina2Constants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(Mina2Constants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getEndpoint().getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {']
['closing session when complete at address ', ['address']]
camel sample_11634

['protected void doStop() throws Exception {', 'if (LOG.isDebugEnabled()) {']
['stopping connector at address ', ['connector', 'address']]
camel sample_11634

['private void openConnection() {', 'if (this.address == null || !this.configuration.isCachedAddress()) {', 'setSocketAddress(this.configuration.getProtocol());', '}', 'if (LOG.isDebugEnabled()) {']
['creating connector to address using connector timeout millis ', ['address', 'connector', 'timeout']]
camel sample_11634

['protected void setupVmProtocol(String uri) {', 'boolean minaLogger = configuration.isMinaLogger();', 'List<IoFilter> filters = configuration.getFilters();', 'address = new VmPipeAddress(configuration.getPort());', 'connector = new VmPipeConnector();', 'if (minaLogger) {', 'connector.getFilterChain().addLast("logger", new LoggingFilter());', '}', 'appendIoFiltersToChain(filters, connector.getFilterChain());', 'if (configuration.getSslContextParameters() != null) {']
['using vm protocol but an sslcontextparameters instance was provided sslcontextparameters is only supported on the tcp protocol ', []]
camel sample_11634

['Charset charset = getEncodingParameter(type, configuration);', 'LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'Mina2TextLineCodecFactory codecFactory = new Mina2TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);']
['using textlinecodecfactory using encoding line delimiter ', ['type', 'codecfactory', 'charset', 'configuration', 'gettextlinedelimiter', 'delimiter']]
camel sample_11634

['Charset charset = getEncodingParameter(type, configuration);', 'LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'Mina2TextLineCodecFactory codecFactory = new Mina2TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);']
['encoder maximum line length decoder maximum line length ', ['codecfactory', 'getencodermaxlinelength', 'codecfactory', 'getdecodermaxlinelength']]
camel sample_11634

['if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);', '} else {', 'ObjectSerializationCodecFactory codecFactory = new ObjectSerializationCodecFactory();', 'addCodecFactory(service, codecFactory);']
['using objectserializationcodecfactory ', ['type', 'codecfactory']]
camel sample_11634

['} else {', 'workerPool = new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());', '}', 'connectorConfig = connector.getSessionConfig();', 'connector.getFilterChain().addLast("threadPool", new ExecutorFilter(workerPool));', 'if (minaLogger) {', 'connector.getFilterChain().addLast("logger", new LoggingFilter());', '}', 'appendIoFiltersToChain(filters, connector.getFilterChain());', 'if (configuration.getSslContextParameters() != null) {']
['using datagram protocol but an sslcontextparameters instance was provided sslcontextparameters is only supported on the tcp protocol ', ['configuration', 'getprotocol']]
camel sample_11634

['protected void configureDataGramCodecFactory(final String type, final IoService service, final Mina2Configuration configuration) {', 'ProtocolCodecFactory codecFactory = configuration.getCodec();', 'if (codecFactory == null) {', 'codecFactory = new Mina2UdpProtocolCodecFactory(this.getEndpoint().getCamelContext());', 'if (LOG.isDebugEnabled()) {']
['using codecfactory ', ['new', 'object', 'type', 'codecfactory']]
camel sample_11634

['private void addCodecFactory(IoService service, ProtocolCodecFactory codecFactory) {']
['addcodecfactory name ', ['codecfactory', 'getclass', 'getname']]
camel sample_11634

['private Charset getEncodingParameter(String type, Mina2Configuration configuration) {', 'String encoding = configuration.getEncoding();', 'if (encoding == null) {', 'encoding = Charset.defaultCharset().name();', 'configuration.setEncoding(encoding);']
['no encoding parameter using default charset ', ['type', 'encoding']]
camel sample_11634

['public void messageReceived(IoSession ioSession, Object message) throws Exception {']
['message received ', ['message']]
camel sample_11634

['public void sessionClosed(IoSession session) throws Exception {', 'if (sync && !messageReceived) {']
['session closed but no message received from address ', ['address']]
camel sample_11634

['builder.setBufferSize(options.getBufferSize());', '}', 'if (options.getDirectBuffers() != null) {', 'builder.setDirectBuffers(options.getDirectBuffers());', '}', 'if (options.getHttp2Enabled() != null) {', 'builder.setServerOption(UndertowOptions.ENABLE_HTTP2, options.getHttp2Enabled());', '}', '}', 'undertow = builder.setHandler(rootHandler).build();']
['starting undertow server on try ', []]
camel sample_13166

['if (options.getDirectBuffers() != null) {', 'builder.setDirectBuffers(options.getDirectBuffers());', '}', 'if (options.getHttp2Enabled() != null) {', 'builder.setServerOption(UndertowOptions.ENABLE_HTTP2, options.getHttp2Enabled());', '}', '}', 'undertow = builder.setHandler(rootHandler).build();', 'undertow.start();', '} catch (RuntimeException e) {']
['failed to start undertow server on undertow stop ', []]
camel sample_13166

['public synchronized void unregisterHandler(HttpHandlerRegistrationInfo registrationInfo) {', 'if (undertow == null) {', 'return;', '}', 'rootHandler.remove(registrationInfo.getUri().getPath(), registrationInfo.getMethodRestrict(), registrationInfo.isMatchOnUriPrefix());', 'if (rootHandler.isEmpty()) {']
['stopping undertow server on undertow stop ', []]
camel sample_13166

['Future<String> out = executor.submit(new Callable<String>() {', 'public String call() throws Exception {', 'String reply = template.requestBody("netty:tcp: log.debug("Sent {} received {}", index, reply);', 'assertEquals("Bye " + index, reply);', 'return reply;', '}', '});', 'responses.put(index, out);', '}', 'notify.matches(2, TimeUnit.MINUTES);']
['took millis to process messages using client threads ', ['watch', 'taken', 'files', 'poolsize']]
camel sample_6635

['public synchronized Service addAndAcquire(Key key, Service service) {', 'BlockingQueue<Service> entry = pool.get(key);', 'if (entry == null) {', 'entry = new ArrayBlockingQueue<Service>(capacity);', 'pool.put(key, entry);', '}']
['addandacquire key service ', ['key', 'service']]
camel sample_3964

['public synchronized Service acquire(Key key) {', 'BlockingQueue<Service> services = pool.get(key);', 'if (services == null || services.isEmpty()) {']
['no free services in pool to acquire for key ', ['key']]
camel sample_3964

['public synchronized Service acquire(Key key) {', 'BlockingQueue<Service> services = pool.get(key);', 'if (services == null || services.isEmpty()) {', 'return null;', '}', 'Service answer = services.poll();']
['acquire service ', ['key', 'answer']]
camel sample_3964

['public synchronized void release(Key key, Service service) {']
['release service ', ['key', 'service']]
camel sample_3964

['protected void doStart() throws Exception {']
['starting service pool ', ['this']]
camel sample_3964

['protected void doStop() throws Exception {']
['stopping service pool ', ['this']]
camel sample_3964

['public void testAsynchronous() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_12327

['public void testJmsRequestReplyExclusiveFixedReplyTo() throws Exception {', 'StopWatch watch = new StopWatch();', 'ExecutorService executor = Executors.newFixedThreadPool(10);', 'for (int i = 0; i < size; i++) {', 'final Integer num = i;', 'executor.submit(new Runnable() {', 'public void run() {', 'String reply = template.requestBody("direct:start", "" + num, String.class);']
['sent expecting reply hello got ', ['new', 'object', 'num', 'num', 'reply']]
camel sample_7024

['final Integer num = i;', 'executor.submit(new Runnable() {', 'public void run() {', 'String reply = template.requestBody("direct:start", "" + num, String.class);', 'assertNotNull(reply);', 'assertEquals("Hello " + num, reply);', 'latch.countDown();', '}', '});', '}']
['waiting to process messages ', ['size']]
camel sample_7024

['public void run() {', 'String reply = template.requestBody("direct:start", "" + num, String.class);', 'assertNotNull(reply);', 'assertEquals("Hello " + num, reply);', 'latch.countDown();', '}', '});', '}', 'assertTrue("All assertions outside the main thread above should have passed", latch.await(3, TimeUnit.SECONDS));', 'long delta = watch.stop();']
['took millis ', ['delta']]
camel sample_7024

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PubNubComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pubnub.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pubnub.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_582

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LuceneComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lucene.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.lucene.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_428

['public void process(Exchange exchange) throws Exception {', 'try {']
['xml signature generation started using algorithm and canonicalization method ', ['getconfiguration', 'getsignaturealgorithm', 'getconfiguration', 'getcanonicalizationmethod', 'getalgorithm']]
camel sample_6770

['try {', 'Message out = exchange.getOut();', 'out.copyFrom(exchange.getIn());', 'Document outputDoc = sign(out);', 'ByteArrayOutputStream outStream = new ByteArrayOutputStream();', 'XmlSignatureHelper.transformNonTextNodeToOutputStream(outputDoc, outStream, omitXmlDeclaration(out), getConfiguration().getOutputXmlEncoding());', 'byte[] data = outStream.toByteArray();', 'out.setBody(data);', 'setOutputEncodingToMessageHeader(out);', 'clearMessageHeaders(out);']
['xml signature generation finished ', []]
camel sample_6770

['if (isEnveloped) {', 'result = SignatureType.enveloped;', '} else if (isDetached) {', 'if (getSchemaResourceUri(message) == null) {', 'throw new XmlSignatureException( "The configruation of the XML Signature component is wrong: No XML schema specified in the detached case");', '}', 'result = SignatureType.detached;', '} else {', 'result = SignatureType.enveloping;', '}']
['signature type ', ['result']]
camel sample_6770

['protected Boolean omitXmlDeclaration(Message message) {', 'Boolean omitXmlDeclaration = message.getHeader(XmlSignatureConstants.HEADER_OMIT_XML_DECLARATION, Boolean.class);', 'if (omitXmlDeclaration == null) {', 'omitXmlDeclaration = getConfiguration().getOmitXmlDeclaration();', '}', 'if (omitXmlDeclaration == null) {', 'omitXmlDeclaration = Boolean.FALSE;', '}']
['omit xml declaration ', ['omitxmldeclaration']]
camel sample_6770

['Boolean isPlainText = isPlainText(message);', 'Node node;', 'if (isPlainText != null && isPlainText) {', 'node = getTextNode(message, is);', '} else {', 'ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler();', 'Schema schema = getSchemaForSigner(message, errorHandler);', 'Document doc = parseInput(is, getConfiguration().getDisallowDoctypeDecl(), schema, errorHandler);', 'errorHandler.handleErrors(message.getExchange(), schema, null);', 'node = doc.getDocumentElement();']
['root element of document to be signed ', ['node']]
camel sample_6770

['protected Boolean isPlainText(Message message) {', 'Boolean isPlainText = message.getHeader(XmlSignatureConstants.HEADER_MESSAGE_IS_PLAIN_TEXT, Boolean.class);', 'if (isPlainText == null) {', 'isPlainText = getConfiguration().getPlainText();', '}']
['is plain text ', ['isplaintext']]
camel sample_6770

['private Element getParentForDetachedCase(Document doc, Message inMessage, String referenceUri) throws XmlSignatureException {', 'String elementId = referenceUri;', 'if (elementId.startsWith("#")) {', 'elementId = elementId.substring(1);', '}', 'Element el = doc.getElementById(elementId);', 'if (el == null) {', 'throw new IllegalStateException("No element found for element ID " + elementId);', '}']
['sibling element of the detached xml signature with reference uri ', ['new', 'object', 'referenceuri', 'el', 'getlocalname', 'el', 'getnamespaceuri']]
camel sample_6770

['protected List<? extends XMLObject> getObjects(XmlSignatureProperties.Input input, XmlSignatureProperties.Output properties) throws Exception {', 'if (SignatureType.enveloped == input.getSignatureType() || SignatureType.detached == input.getSignatureType()) {', 'if (properties == null || properties.getObjects() == null) {', 'return Collections.emptyList();', '}', 'return properties.getObjects();', '}', 'final String objectId = getConfiguration().getContentObjectId();']
['object content id ', ['objectid']]
camel sample_6770

['private Node getTextNode(Message inMessage, InputStream is) throws IOException, ParserConfigurationException, XmlSignatureException {']
['message body to be signed is plain text ', []]
camel sample_6770

['protected String getMessageEncoding(Message inMessage) {', 'String encoding = inMessage.getHeader(XmlSignatureConstants.HEADER_PLAIN_TEXT_ENCODING, String.class);', 'if (encoding == null) {', 'encoding = getConfiguration().getPlainTextEncoding();', '}']
['messge encoding ', ['encoding']]
camel sample_6770

['protected String getContentReferenceType(Message message) {', 'String type = message.getHeader(XmlSignatureConstants.HEADER_CONTENT_REFERENCE_TYPE, String.class);', 'if (type == null) {', 'type = getConfiguration().getContentReferenceType();', '}']
['content reference type ', ['type']]
camel sample_6770

['}', 'if (uri == null) {', 'uri = "";', '}', 'result = Collections.singletonList(uri);', '} else if (SignatureType.detached == signatureType) {', 'result = getContentReferenceUrisForDetachedCase(message, messageBodyNode);', '} else {', 'throw new IllegalStateException("Signature type " + signatureType + " not supported");', '}']
['content reference uri s ', ['result']]
camel sample_6770

['List<ComparableNode> result = new ArrayList<ComparableNode>(xpathsToIdAttributes.size());', 'for (XPathFilterParameterSpec xp : xpathsToIdAttributes) {', 'XPathExpression exp;', 'try {', 'exp = XmlSignatureHelper.getXPathExpression(xp);', '} catch (XPathExpressionException e) {', 'throw new XmlSignatureException("The configured xpath expression " + xp.getXPath() + " is invalid.", e);', '}', 'NodeList list = (NodeList) exp.evaluate(messageBodyNode, XPathConstants.NODESET);', 'if (list == null) {']
['no id attribute found for xpath expression therfore this xpath expression will be ignored ', ['xp', 'getxpath']]
camel sample_6770

['for (int i = 0; i < length; i++) {', 'Node node = list.item(i);', 'if (node.getNodeType() == Node.ATTRIBUTE_NODE) {', 'Attr attr = (Attr) node;', 'String value = attr.getValue();', 'Element element = messageBodyNode.getOwnerDocument().getElementById(value);', 'if (element == null) {', 'throw new XmlSignatureException( "Wrong configured xpath expression for ID attributes: The evaluation of the xpath expression " + xp.getXPath() + " resulted in an attribute which is not of type ID. The attribute value is " + value + ".");', '}', 'result.add(new ComparableNode(element, "#" + value));']
['id attribute with value found for xpath ', ['value', 'xp', 'getxpath']]
camel sample_6770

['} else {', 'configuredTrafos = new ArrayList<AlgorithmMethod>(2);', 'configuredTrafos.add(XmlSignatureHelper.getEnvelopedTransform());', 'configuredTrafos.add(XmlSignatureHelper.getCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE));', '}', '}', 'List<Transform> transforms = new ArrayList<Transform>(configuredTrafos.size());', 'for (AlgorithmMethod trafo : configuredTrafos) {', 'Transform transform = fac.newTransform(trafo.getAlgorithm(), (TransformParameterSpec) trafo.getParameterSpec());', 'transforms.add(transform);']
['transform method ', ['trafo', 'getalgorithm']]
camel sample_6770

['configuredTrafos.add(XmlSignatureHelper.getCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE));', '}', '}', 'List<Transform> transforms = new ArrayList<Transform>(configuredTrafos.size());', 'for (AlgorithmMethod trafo : configuredTrafos) {', 'Transform transform = fac.newTransform(trafo.getAlgorithm(), (TransformParameterSpec) trafo.getParameterSpec());', 'transforms.add(transform);', '}', 'return transforms;', '} else {']
['header with value found ', ['xmlsignatureconstants', 'header', 'transform', 'methods', 'transformmethodsheadervalue']]
camel sample_6770

['transforms.add(transform);', '}', 'return transforms;', '} else {', 'String[] transformAlgorithms = transformMethodsHeaderValue.split(",");', 'List<Transform> transforms = new ArrayList<Transform>(transformAlgorithms.length);', 'for (String transformAlgorithm : transformAlgorithms) {', 'transformAlgorithm = transformAlgorithm.trim();', 'Transform transform = fac.newTransform(transformAlgorithm, (TransformParameterSpec) null);', 'transforms.add(transform);']
['transform method ', ['transformalgorithm']]
camel sample_6770

['} else if (signatureAlgorithm.contains(SHA384)) {', 'result = HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA384;', '} else if (signatureAlgorithm.contains(SHA512)) {', 'result = DigestMethod.SHA512;', '} else if (signatureAlgorithm.contains(RIPEMD160)) {', 'return DigestMethod.RIPEMD160;', '}', '}', '}', 'if (result != null) {']
['digest algorithm ', ['result']]
camel sample_6770

['protected Reference createKeyInfoReference(XMLSignatureFactory fac, String keyInfoId, String digestAlgorithm) throws Exception {', 'if (keyInfoId == null) {', 'return null;', '}', 'if (getConfiguration().getAddKeyInfoReference() == null) {', 'return null;', '}', 'if (!getConfiguration().getAddKeyInfoReference()) {', 'return null;', '}']
['creating reference to key info element with id ', ['keyinfoid']]
camel sample_6770

['public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {', 'loggedIn = false;', 'if (isStopping() || isStopped()) {']
['exception occurred during stopping ', ['exception', 'getmessage']]
camel sample_15374

['public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {', 'loggedIn = false;', 'if (isStopping() || isStopped()) {', '} else {']
['writing file failed with ', ['exception', 'getmessage']]
camel sample_15374

['public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {', 'loggedIn = false;', 'if (isStopping() || isStopped()) {', '} else {', 'try {', 'disconnect();', '} catch (Exception e) {']
['ignored exception during disconnect ', ['e', 'getmessage']]
camel sample_15374

['public void disconnect() throws GenericFileOperationFailedException {', 'loggedIn = false;', 'if (getOperations().isConnected()) {']
['disconnecting from ', ['getendpoint']]
camel sample_15374

['public void preWriteCheck() throws Exception {', 'boolean noop = false;', 'if (loggedIn) {', 'if (getEndpoint().getConfiguration().isSendNoop()) {', 'try {', 'noop = getOperations().sendNoop();', '} catch (Exception e) {', 'noop = false;', 'loggedIn = false;', '}']
['prewritecheck send noop success ', ['noop']]
camel sample_15374

['if (loggedIn) {', 'if (getEndpoint().getConfiguration().isSendNoop()) {', 'try {', 'noop = getOperations().sendNoop();', '} catch (Exception e) {', 'noop = false;', 'loggedIn = false;', '}', '} else {', 'noop = true;']
['prewritecheck send noop disabled ', []]
camel sample_15374

['public void postWriteCheck(Exchange exchange) {', 'try {', 'boolean isLast = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);', 'if (isLast && getEndpoint().isDisconnectOnBatchComplete()) {']
['postwritecheck disconnect on batch complete from ', ['getendpoint']]
camel sample_15374

['public void postWriteCheck(Exchange exchange) {', 'try {', 'boolean isLast = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);', 'if (isLast && getEndpoint().isDisconnectOnBatchComplete()) {', 'disconnect();', '}', 'if (getEndpoint().isDisconnect()) {']
['postwritecheck disconnect from ', ['getendpoint']]
camel sample_15374

['public void postWriteCheck(Exchange exchange) {', 'try {', 'boolean isLast = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);', 'if (isLast && getEndpoint().isDisconnectOnBatchComplete()) {', 'disconnect();', '}', 'if (getEndpoint().isDisconnect()) {', 'disconnect();', '}', '} catch (GenericFileOperationFailedException e) {']
['exception occurred during disconnecting from ', ['getendpoint', 'e', 'getmessage']]
camel sample_15374

['protected void doStart() throws Exception {']
['Starting ', []]
camel sample_15374

['protected void doStop() throws Exception {', 'try {', 'disconnect();', '} catch (Exception e) {']
['exception occurred during disconnecting from ', ['getendpoint', 'e', 'getmessage']]
camel sample_15374

['protected void recoverableConnectIfNecessary() throws Exception {', 'try {', 'connectIfNecessary();', '} catch (Exception e) {', 'loggedIn = false;', 'InterruptedException ie = ObjectHelper.getException(InterruptedException.class, e);', 'if (ie != null) {', 'if (log.isDebugEnabled()) {']
['interrupted during connect to ', ['getendpoint', 'ie']]
camel sample_15374

['connectIfNecessary();', '} catch (Exception e) {', 'loggedIn = false;', 'InterruptedException ie = ObjectHelper.getException(InterruptedException.class, e);', 'if (ie != null) {', 'if (log.isDebugEnabled()) {', '}', 'throw ie;', '}', 'if (log.isDebugEnabled()) {']
['could not connect to will try to recover ', ['getendpoint', 'e']]
camel sample_15374

['InterruptedException ie = ObjectHelper.getException(InterruptedException.class, e);', 'if (ie != null) {', 'if (log.isDebugEnabled()) {', '}', 'throw ie;', '}', 'if (log.isDebugEnabled()) {', '}', '}', 'if (!loggedIn) {']
['trying to recover connection to with a new ftp client ', ['getendpoint']]
camel sample_15374

['protected void connectIfNecessary() throws GenericFileOperationFailedException {', 'if (!loggedIn || !getOperations().isConnected()) {']
['not already connected logged in connecting to ', ['getendpoint']]
camel sample_15374

['protected void connectIfNecessary() throws GenericFileOperationFailedException {', 'if (!loggedIn || !getOperations().isConnected()) {', 'RemoteFileConfiguration config = getEndpoint().getConfiguration();', 'loggedIn = getOperations().connect(config);', 'if (!loggedIn) {', 'return;', '}']
['connected and logged in to ', ['getendpoint']]
camel sample_15374

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastListComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-list.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-list.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_701

['if (isInputStreamNeeded(exchange)) {', 'is = exchange.getIn().getBody(InputStream.class);', 'source = getSource(exchange, is);', '} else {', 'Object body = exchange.getIn().getBody();', 'source = getSource(exchange, body);', '}', 'if (source instanceof StAXSource) {', 'source = new StAX2SAXSource(((StAXSource) source).getXMLStreamReader());', '}']
['using as source ', ['source']]
camel sample_5625

['is = exchange.getIn().getBody(InputStream.class);', 'source = getSource(exchange, is);', '} else {', 'Object body = exchange.getIn().getBody();', 'source = getSource(exchange, body);', '}', 'if (source instanceof StAXSource) {', 'source = new StAX2SAXSource(((StAXSource) source).getXMLStreamReader());', '}', 'transformer.transform(source, result);']
['transform complete with result ', ['result']]
camel sample_5625

['protected void addParameters(Transformer transformer, Map<String, Object> map) {', 'Set<Map.Entry<String, Object>> propertyEntries = map.entrySet();', 'for (Map.Entry<String, Object> entry : propertyEntries) {', 'String key = entry.getKey();', 'Object value = entry.getValue();', 'if (value != null) {']
['transformer set parameter ', ['key', 'value']]
camel sample_5625

['public boolean onEviction(String key, ReplyHandler value) {', 'try {', 'if (listener != null) {', 'listener.onEviction(key);', '}', '} catch (Throwable e) {', '}', 'try {', 'value.onTimeout(key);', '} catch (Throwable e) {']
['error processing ontimeout for correlationid due this exception is ignored ', ['key', 'e', 'getmessage', 'e']]
camel sample_14135

['try {', 'if (listener != null) {', 'listener.onEviction(key);', '}', '} catch (Throwable e) {', '}', 'try {', 'value.onTimeout(key);', '} catch (Throwable e) {', '}']
['evicted correlationid ', ['key']]
camel sample_14135

['listener.onPut(key);', '}', '} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.put(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.put(key, value, timeoutMillis);', '}']
['added correlationid to timeout after millis ', ['key', 'timeoutmillis']]
camel sample_14135

['public ReplyHandler putIfAbsent(String key, ReplyHandler value, long timeoutMillis) {']
['in putifabsent with key ', ['key']]
camel sample_14135

['}', '} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.putIfAbsent(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.putIfAbsent(key, value, timeoutMillis);', '}', 'if (result == null) {']
['added correlationid to timeout after millis ', ['key', 'timeoutmillis']]
camel sample_14135

['} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.putIfAbsent(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.putIfAbsent(key, value, timeoutMillis);', '}', 'if (result == null) {', '} else {']
['duplicate correlationid detected ', ['key']]
camel sample_14135

['public void notify(EventObject event) throws Exception {', 'if (event instanceof CamelContextStartedEvent) {']
['sending a message on startup ', []]
camel sample_16108

['public void notify(EventObject event) throws Exception {', 'if (event instanceof CamelContextStartedEvent) {', 'template.sendBody("file:target/startandstop/start.txt", "Starting");', '} else if (event instanceof CamelContextStoppingEvent) {']
['sending a message on stopping ', []]
camel sample_16108

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SwiftComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-swift.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-swift.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1236

['public void testSlowLoop() throws Exception {', 'for (int i = 0; i < 10; i++) {', 'try {']
['test run ', ['i']]
camel sample_11337

['if (!isRunAllowed()) {', 'throw new RejectedExecutionException("Run is not allowed");', '}', 'calculateAndSetMaxRequestsPerPeriod(exchange);', 'ThrottlePermit permit = delayQueue.poll();', 'if (permit == null) {', 'if (isRejectExecution()) {', 'throw new ThrottlerRejectedExecutionException("Exceeded the max throttle rate of " + throttleRate + " within " + timePeriodMillis + "ms");', '} else {', 'if (isAsyncDelayed() && !exchange.isTransacted() && state == State.SYNC) {']
['throttle rate exceeded but asyncdelayed enabled so queueing for async processing exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4521

['start = System.currentTimeMillis();', '}', 'permit = delayQueue.take();', 'if (log.isTraceEnabled()) {', 'elapsed = System.currentTimeMillis() - start;', '}', 'enqueuePermit(permit, exchange);', 'if (state == State.ASYNC) {', 'if (log.isTraceEnabled()) {', 'long queuedTime = start - queuedStart;']
['queued for ms throttled for ms exchangeid ', ['queuedtime', 'elapsed', 'exchange', 'getexchangeid']]
camel sample_4521

['permit = delayQueue.take();', 'if (log.isTraceEnabled()) {', 'elapsed = System.currentTimeMillis() - start;', '}', 'enqueuePermit(permit, exchange);', 'if (state == State.ASYNC) {', 'if (log.isTraceEnabled()) {', 'long queuedTime = start - queuedStart;', '}', '} else {']
['throttled for ms exchangeid ', ['elapsed', 'exchange', 'getexchangeid']]
camel sample_4521

['long queuedTime = start - queuedStart;', '}', '} else {', '}', '}', '} else {', 'enqueuePermit(permit, exchange);', 'if (state == State.ASYNC) {', 'if (log.isTraceEnabled()) {', 'long queuedTime = System.currentTimeMillis() - queuedStart;']
['queued for ms no throttling applied throttle cleared while queued for exchangeid ', ['queuedtime', 'exchange', 'getexchangeid']]
camel sample_4521

['} else {', '}', '}', '} else {', 'enqueuePermit(permit, exchange);', 'if (state == State.ASYNC) {', 'if (log.isTraceEnabled()) {', 'long queuedTime = System.currentTimeMillis() - queuedStart;', '}', '} else {']
['no throttling applied to exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4521

['}', 'exchange.setProperty(PROPERTY_EXCHANGE_STATE, State.ASYNC);', 'asyncExecutor.submit(new Runnable() {', 'public void run() {', 'process(exchange, callback);', '}', '});', 'return false;', '} catch (final RejectedExecutionException e) {', 'if (isCallerRunsWhenRejected()) {']
['asyncexecutor is full rejected exchange will run in the current thread exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4521

['protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange) {', 'permit.setDelayMs(getTimePeriodMillis());', 'delayQueue.put(permit);', 'if (log.isTraceEnabled()) {']
['permit released for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4521

['if (newThrottle == null && throttleRate == 0) {', 'throw new RuntimeExchangeException("The maxRequestsPerPeriodExpression was evaluated as null: " + maxRequestsPerPeriodExpression, exchange);', '}', 'if (newThrottle != null) {', 'if (newThrottle != throttleRate) {', 'if (throttleRate > newThrottle) {', 'int delta = throttleRate - newThrottle;', 'while (delta > 0) {', 'delayQueue.take();', 'delta--;']
['permit discarded due to throttling rate decrease triggered by exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4521

['throw new RuntimeExchangeException("The maxRequestsPerPeriodExpression was evaluated as null: " + maxRequestsPerPeriodExpression, exchange);', '}', 'if (newThrottle != null) {', 'if (newThrottle != throttleRate) {', 'if (throttleRate > newThrottle) {', 'int delta = throttleRate - newThrottle;', 'while (delta > 0) {', 'delayQueue.take();', 'delta--;', '}']
['throttle rate decreased from to triggered by exchangeid ', ['throttlerate', 'newthrottle', 'exchange', 'getexchangeid']]
camel sample_4521

['while (delta > 0) {', 'delayQueue.take();', 'delta--;', '}', '} else if (newThrottle > throttleRate) {', 'int delta = newThrottle - throttleRate;', 'for (int i = 0; i < delta; i++) {', 'delayQueue.put(new ThrottlePermit(-1));', '}', 'if (throttleRate == 0) {']
['initial throttle rate set to triggered by exchangeid ', ['newthrottle', 'exchange', 'getexchangeid']]
camel sample_4521

['delayQueue.take();', 'delta--;', '}', '} else if (newThrottle > throttleRate) {', 'int delta = newThrottle - throttleRate;', 'for (int i = 0; i < delta; i++) {', 'delayQueue.put(new ThrottlePermit(-1));', '}', 'if (throttleRate == 0) {', '} else {']
['throttle rate increase from to triggered by exchangeid ', ['throttlerate', 'newthrottle', 'exchange', 'getexchangeid']]
camel sample_4521

['}', 'if (resletHostOptions.getThreadMaxIdleTimeMs() != null) {', 'params.add("threadMaxIdleTimeMs", resletHostOptions.getThreadMaxIdleTimeMs().toString());', '}', 'if (resletHostOptions.getUseForwardedForHeader() != null) {', 'params.add("useForwardedForHeader", resletHostOptions.getUseForwardedForHeader().toString());', '}', 'if (resletHostOptions.getReuseAddress() != null) {', 'params.add("reuseAddress", resletHostOptions.getReuseAddress().toString());', '}']
['setting parameters to server ', ['params', 'server']]
camel sample_9313

['public void testGetConnections() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Connections result = requestBodyAndHeaders("direct: assertNotNull("getConnections result", result);']
['getconnections ', ['result']]
camel sample_8851

['public void testGetConnectionsById() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.person_id", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Connections result = requestBodyAndHeaders("direct: assertNotNull("getConnectionsById result", result);']
['getconnectionsbyid ', ['result']]
camel sample_8851

['public void testGetConnectionsByUrl() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.public_profile_url", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Connections result = requestBodyAndHeaders("direct: assertNotNull("getConnectionsByUrl result", result);']
['getconnectionsbyurl ', ['result']]
camel sample_8851

['public void testGetFollowedCompanies() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.Companies result = requestBody("direct: assertNotNull("getFollowedCompanies result", result);']
['getfollowedcompanies ', ['result']]
camel sample_8851

['public void testGetGroupMembershipSettings() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.group_id", 0L);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'final org.apache.camel.component.linkedin.api.model.GroupMembership result = requestBodyAndHeaders("direct: assertNotNull("getGroupMembershipSettings result", result);']
['getgroupmembershipsettings ', ['result']]
camel sample_8851

['public void testGetGroupMemberships() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.membership_state", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'final org.apache.camel.component.linkedin.api.model.GroupMemberships result = requestBodyAndHeaders("direct: assertNotNull("getGroupMemberships result", result);']
['getgroupmemberships ', ['result']]
camel sample_8851

['public void testGetJobBookmarks() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.JobBookmarks result = requestBody("direct: assertNotNull("getJobBookmarks result", result);']
['getjobbookmarks ', ['result']]
camel sample_8851

['public void testGetNetworkStats() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.NetworkStats result = requestBody("direct: assertNotNull("getNetworkStats result", result);']
['getnetworkstats ', ['result']]
camel sample_8851

['headers.put("CamelLinkedIn.scope", null);', 'headers.put("CamelLinkedIn.type", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.after", null);', 'headers.put("CamelLinkedIn.before", null);', 'headers.put("CamelLinkedIn.show_hidden_members", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Updates result = requestBodyAndHeaders("direct: assertNotNull("getNetworkUpdates result", result);']
['getnetworkupdates ', ['result']]
camel sample_8851

['headers.put("CamelLinkedIn.type", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.after", null);', 'headers.put("CamelLinkedIn.before", null);', 'headers.put("CamelLinkedIn.show_hidden_members", null);', 'headers.put("CamelLinkedIn.person_id", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Updates result = requestBodyAndHeaders("direct: assertNotNull("getNetworkUpdatesById result", result);']
['getnetworkupdatesbyid ', ['result']]
camel sample_8851

['public void testGetPerson() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.fields", "");', 'headers.put("CamelLinkedIn.secure_urls", true);', 'final Person result = requestBodyAndHeaders("direct: assertNotNull("getPerson result", result);']
['getperson ', ['result']]
camel sample_8851

['public void testGetPersonById() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.person_id", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final Person result = requestBodyAndHeaders("direct: assertNotNull("getPersonById result", result);']
['getpersonbyid ', ['result']]
camel sample_8851

['public void testGetPersonByUrl() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.public_profile_url", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final Person result = requestBodyAndHeaders("direct: assertNotNull("getPersonByUrl result", result);']
['getpersonbyurl ', ['result']]
camel sample_8851

['final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.group_id", 0L);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.order", null);', 'headers.put("CamelLinkedIn.role", null);', 'headers.put("CamelLinkedIn.category", null);', 'headers.put("CamelLinkedIn.modified_since", null);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Posts result = requestBodyAndHeaders("direct: assertNotNull("getPosts result", result);']
['getposts ', ['result']]
camel sample_8851

['public void testGetSuggestedCompanies() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.Companies result = requestBody("direct: assertNotNull("getSuggestedCompanies result", result);']
['getsuggestedcompanies ', ['result']]
camel sample_8851

['final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.group_id", 0L);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.order", null);', 'headers.put("CamelLinkedIn.role", null);', 'headers.put("CamelLinkedIn.category", null);', 'headers.put("CamelLinkedIn.modified_since", null);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Posts result = requestBodyAndHeaders("direct: assertNotNull("getSuggestedGroupPosts result", result);']
['getsuggestedgroupposts ', ['result']]
camel sample_8851

['public void testGetSuggestedGroups() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.Groups result = requestBody("direct: assertNotNull("getSuggestedGroups result", result);']
['getsuggestedgroups ', ['result']]
camel sample_8851

['public void testGetSuggestedJobs() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.JobSuggestions result = requestBody("direct: assertNotNull("getSuggestedJobs result", result);']
['getsuggestedjobs ', ['result']]
camel sample_8851

['public void testGetUpdateComments() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.update_key", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.UpdateComments result = requestBodyAndHeaders("direct: assertNotNull("getUpdateComments result", result);']
['getupdatecomments ', ['result']]
camel sample_8851

['public void testGetUpdateLikes() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.update_key", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Likes result = requestBodyAndHeaders("direct: assertNotNull("getUpdateLikes result", result);']
['getupdatelikes ', ['result']]
camel sample_8851

['public void testShare() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.Update result = requestBody("direct: assertNotNull("share result", result);']
['share ', ['result']]
camel sample_8851

['protected abstract int poll() throws Exception;', 'protected void doStart() throws Exception {', 'if (configuration.getClient() == null) {', 'configuration.createClient();']
['consumer dropbox client created ', []]
camel sample_8502

['protected void doStop() throws Exception {', 'if (configuration.getClient() == null) {', 'configuration.setClient(null);']
['consumer dropbox client deleted ', []]
camel sample_8502

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_214

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, false);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_214

['public void initializeConnection() throws CamelMongoDbException {']
['initialising mongodb endpoint ', ['this', 'tostring']]
camel sample_10463

['}', 'mongoDatabase = mongoConnection.getDatabase(database);', 'if (mongoDatabase == null) {', 'throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.");', '}', 'if (collection != null) {', 'if (!createCollection && !databaseContainsCollection(collection)) {', 'throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.");', '}', 'mongoCollection = mongoDatabase.getCollection(collection, Document.class);']
['mongodb component initialised and endpoint bound to mongodb collection with the following parameters address list db collection ', ['new', 'object', 'mongoconnection', 'getalladdress', 'tostring', 'mongodatabase', 'getname', 'collection']]
camel sample_10463

['public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {', 'if (dynamicIndex != null && !dynamicIndex.isEmpty()) {', 'for (Bson index : dynamicIndex) {']
['create document index ', ['index']]
camel sample_10463

['protected void doStart() throws Exception {', 'mongoConnection = CamelContextHelper.mandatoryLookup(getCamelContext(), connectionBean, MongoClient.class);']
['resolved the connection with the name as ', ['connectionbean', 'mongoconnection']]
camel sample_10463

['protected void doStop() throws Exception {', 'super.doStop();', 'if (mongoConnection != null) {']
['closing connection ', []]
camel sample_10463

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JettyHttpComponent9> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jetty.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jetty.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_490

['protected void assertValidContext(SpringCamelContext context) {', 'assertNotNull("No context found!", context);', 'List<Route> routes = context.getRoutes();', 'assertNotNull("Should have some routes defined", routes);', 'assertEquals("Number of routes defined", 1, routes.size());', 'Route route = routes.get(0);']
['found route ', ['route']]
camel sample_16299

['for (int i = 0; i < map.getLength(); i++) {', 'Node att = map.item(i);', 'if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {', 'final String value = att.getNodeValue();', 'String before = ObjectHelper.before(value, "?");', 'String after = ObjectHelper.after(value, "?");', 'if (before != null && after != null) {', 'String changed = after.replaceAll("\\\\s{2,}", "");', 'if (!after.equals(changed)) {', 'String newAtr = before.trim() + "?" + changed.trim();']
['removed whitespace noise from attribute ', ['value', 'newatr']]
camel sample_16333

['try {', 'Class.forName("org.osgi.framework.BundleActivator");', 'Class<?> c = Class.forName("org.apache.camel.osgi.Activator");', 'Method mth = c.getDeclaredMethod("getBundle");', 'Object bundle = mth.invoke(null);', 'if (bundle != null) {', 'cl = Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");', 'osgi = true;', '}', '} catch (Throwable t) {']
['cannot find class so assuming not running in osgi container ', ['t', 'getmessage']]
camel sample_16333

['Class<?> c = Class.forName("org.apache.camel.osgi.Activator");', 'Method mth = c.getDeclaredMethod("getBundle");', 'Object bundle = mth.invoke(null);', 'if (bundle != null) {', 'cl = Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");', 'osgi = true;', '}', '} catch (Throwable t) {', '}', 'if (osgi) {']
['osgi environment detected ', []]
camel sample_16333

['Method mth = c.getDeclaredMethod("getBundle");', 'Object bundle = mth.invoke(null);', 'if (bundle != null) {', 'cl = Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");', 'osgi = true;', '}', '} catch (Throwable t) {', '}', 'if (osgi) {', '}']
['using as camelcontextbeandefinitionparser ', ['cl', 'getcanonicalname']]
camel sample_16333

['parserContext.registerComponent(new BeanComponentDefinition(definition, id));', 'if (localName.equals("template") || localName.equals("fluentTemplate") || localName.equals("consumerTemplate") || localName.equals("proxy") || localName.equals("export")) {', 'definition.getPropertyValues().addPropertyValue("camelContext", new RuntimeBeanReference(contextId));', '}', '}', '}', '}', '}', '}', 'if (registerEndpointIdsFromRoute) {']
['registering endpoint with ids defined in camel routes ', []]
camel sample_16333

['protected void addDependsOn(CamelContextFactoryBean factoryBean, BeanDefinitionBuilder builder) {', 'String dependsOn = factoryBean.getDependsOn();', 'if (ObjectHelper.isNotEmpty(dependsOn)) {', 'String[] depends = dependsOn.split(",|;|\\\\s");', 'if (depends == null) {', 'throw new IllegalArgumentException("Cannot separate depends-on, was: " + dependsOn);', '} else {', 'for (String depend : depends) {', 'depend = depend.trim();']
['adding dependson to camelcontext ', ['depend', 'factorybean', 'getid']]
camel sample_16333

['consumerTemplate = true;', '}', '}', '}', 'if (!template) {', 'boolean existing = autoRegisterMap.get("template") != null;', 'boolean inUse = false;', 'try {', 'inUse = parserContext.getRegistry().isBeanNameInUse("template");', '} catch (BeanCreationException e) {']
['error checking isbeannameinuse template this exception will be ignored ', ['e']]
camel sample_16333

['BeanDefinition definition = parser.parse(templateElement, parserContext);', 'autoRegisterBeanDefinition(id, definition, parserContext, contextId);', '}', '}', 'if (!fluentTemplate) {', 'boolean existing = autoRegisterMap.get("fluentTemplate") != null;', 'boolean inUse = false;', 'try {', 'inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate");', '} catch (BeanCreationException e) {']
['error checking isbeannameinuse fluenttemplate this exception will be ignored ', ['e']]
camel sample_16333

['BeanDefinition definition = parser.parse(templateElement, parserContext);', 'autoRegisterBeanDefinition(id, definition, parserContext, contextId);', '}', '}', 'if (!consumerTemplate) {', 'boolean existing = autoRegisterMap.get("consumerTemplate") != null;', 'boolean inUse = false;', 'try {', 'inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate");', '} catch (BeanCreationException e) {']
['error checking isbeannameinuse consumertemplate this exception will be ignored ', ['e']]
camel sample_16333

['private void autoRegisterBeanDefinition(String id, BeanDefinition definition, ParserContext parserContext, String contextId) {', 'BeanDefinition existing = autoRegisterMap.get(id);', 'if (existing == null) {', 'autoRegisterMap.put(id, definition);', 'parserContext.registerComponent(new BeanComponentDefinition(definition, id));', 'if (LOG.isDebugEnabled()) {']
['registered default with id on camel context ', ['new', 'object', 'definition', 'getbeanclassname', 'id', 'contextid']]
camel sample_16333

['private void autoRegisterBeanDefinition(String id, BeanDefinition definition, ParserContext parserContext, String contextId) {', 'BeanDefinition existing = autoRegisterMap.get(id);', 'if (existing == null) {', 'autoRegisterMap.put(id, definition);', 'parserContext.registerComponent(new BeanComponentDefinition(definition, id));', 'if (LOG.isDebugEnabled()) {', '}', '} else {']
['unregistered default with id as we have multiple camel contexts and they must use unique ids you must define the definition in the xml file manually to avoid id clashes when using multiple camel contexts ', ['definition', 'getbeanclassname', 'id']]
camel sample_16333

['private void registerEndpoint(Element childElement, ParserContext parserContext, String contextId) {', 'String id = childElement.getAttribute("id");', 'if (ObjectHelper.isNotEmpty(id)) {', 'if (id.startsWith("_")) {']
['skip registering endpoint starting with underscore ', ['id']]
camel sample_16333

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BindingNameComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.binding.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.binding.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_869

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DataFormatComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dataformat.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dataformat.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_886

['String candidate = null;', 'boolean clash = false;', 'do {', 'try {', 'clash = false;', 'if (candidate == null && checkFirst) {', 'candidate = prefix;', '} else {', 'candidate = prefix + "-" + getNextCounter(counter);', '}']
['checking osgi service registry for existence of existing camelcontext with name ', ['candidate']]
camel sample_13074

['if (refs != null && refs.length > 0) {', 'for (ServiceReference<?> ref : refs) {', 'Object id = ref.getProperty(key);', 'if (id != null && candidate.equals(id)) {', 'clash = true;', 'break;', '}', '}', '}', '} catch (InvalidSyntaxException e) {']
['error finding free camel name in osgi service registry due this exception is ignored ', ['e', 'getmessage', 'e']]
camel sample_13074

['if (id != null && candidate.equals(id)) {', 'clash = true;', 'break;', '}', '}', '}', '} catch (InvalidSyntaxException e) {', 'break;', '}', '} while (clash);']
['generated free name for bundle id clash ', ['new', 'object', 'context', 'getbundle', 'getbundleid', 'clash', 'candidate']]
camel sample_13074

['String latlng = exchange.getIn().getHeader(GeoCoderConstants.LATLNG, String.class);', 'if (latlng == null) {', 'latlng = endpoint.getLatlng();', '}', 'if (latlng != null) {', 'GeocoderRequest req = new GeocoderRequest();', 'req.setLanguage(endpoint.getLanguage());', 'String lat = ObjectHelper.before(latlng, ",");', 'String lng = ObjectHelper.after(latlng, ",");', 'req.setLocation(new LatLng(lat, lng));']
['geocode for lat lng ', ['latlng']]
camel sample_9578

['if (latlng == null) {', 'latlng = endpoint.getLatlng();', '}', 'if (latlng != null) {', 'GeocoderRequest req = new GeocoderRequest();', 'req.setLanguage(endpoint.getLanguage());', 'String lat = ObjectHelper.before(latlng, ",");', 'String lng = ObjectHelper.after(latlng, ",");', 'req.setLocation(new LatLng(lat, lng));', 'GeocodeResponse res = geocoder.geocode(req);']
['geocode response ', ['res']]
camel sample_9578

['String lng = ObjectHelper.after(latlng, ",");', 'req.setLocation(new LatLng(lat, lng));', 'GeocodeResponse res = geocoder.geocode(req);', 'if (res != null) {', 'extractGeoResult(res, exchange);', '}', '} else if (address != null) {', 'if ("current".equals(address)) {', 'processCurrentLocation(exchange);', '} else {']
['geocode for address ', ['address']]
camel sample_9578

['GeocodeResponse res = geocoder.geocode(req);', 'if (res != null) {', 'extractGeoResult(res, exchange);', '}', '} else if (address != null) {', 'if ("current".equals(address)) {', 'processCurrentLocation(exchange);', '} else {', 'GeocoderRequest req = new GeocoderRequest(address, endpoint.getLanguage());', 'GeocodeResponse res = geocoder.geocode(req);']
['geocode response ', ['res']]
camel sample_9578

['protected void processCurrentLocation(Exchange exchange) throws Exception {']
['geocode for current address ', []]
camel sample_9578

['protected void processCurrentLocation(Exchange exchange) throws Exception {', 'String json = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, new URL("https: if (isEmpty(json)) {', 'throw new IllegalStateException("Got the unexpected value \'" + json + "\' for the geolocation");', '}']
['geocode response ', ['json']]
camel sample_9578

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/SimpleProcessorTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<CamelEndpointDetails>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/SimpleProcessorTest.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_185

['MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<CamelEndpointDetails>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/SimpleProcessorTest.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:start", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_185

['RouteBuilder routes = new RouteBuilder() {', 'public void configure() throws Exception {', 'from("quickfix:examples/inprocess.cfg"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)). bean(new CountDownLatchDecrementer("logon", logonLatch));', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived)). to("trade-executor:market");', 'from("trade-executor:market").to("quickfix:examples/inprocess.cfg");', 'from("quickfix:examples/inprocess.cfg"). filter(PredicateBuilder.or( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived), header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageSent))). bean(new QuickfixjMessageJsonPrinter());', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"). filter(PredicateBuilder.and( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.EXECUTION_REPORT))). bean(new CountDownLatchDecrementer("execution report", executionReportLatch));', '}', '};', 'context.addRoutes(routes);']
['starting camel context ', []]
camel sample_10658

['}', '};', 'context.addRoutes(routes);', 'context.start();', 'if (!logonLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Logon did not complete");', '}', 'String gatewayUri = "quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET";', 'Endpoint gatewayEndpoint = context.getEndpoint(gatewayUri);', 'Producer producer = gatewayEndpoint.createProducer();']
['sending order ', []]
camel sample_10658

['String gatewayUri = "quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET";', 'Endpoint gatewayEndpoint = context.getEndpoint(gatewayUri);', 'Producer producer = gatewayEndpoint.createProducer();', 'NewOrderSingle order = createNewOrderMessage();', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(order);', 'producer.process(exchange);', 'if (!executionReportLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Did not receive execution reports");', '}']
['message received shutting down camel context ', []]
camel sample_10658

['Endpoint gatewayEndpoint = context.getEndpoint(gatewayUri);', 'Producer producer = gatewayEndpoint.createProducer();', 'NewOrderSingle order = createNewOrderMessage();', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(order);', 'producer.process(exchange);', 'if (!executionReportLatch.await(5, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Did not receive execution reports");', '}', 'context.stop();']
['order execution example complete ', []]
camel sample_10658

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'String fileName = getConfiguration().getFileName();', 'String bucketName = getConfiguration().getBucketName();', 'Queue<Exchange> exchanges;', 'if (fileName != null) {']
['getting object in bucket with file name ', ['bucketname', 'filename']]
camel sample_8693

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'String fileName = getConfiguration().getFileName();', 'String bucketName = getConfiguration().getBucketName();', 'Queue<Exchange> exchanges;', 'if (fileName != null) {', 'S3Object s3Object = getAmazonS3Client().getObject(new GetObjectRequest(bucketName, fileName));', 'exchanges = createExchanges(s3Object);', '} else {']
['queueing objects in bucket ', ['bucketname']]
camel sample_8693

['S3Object s3Object = getAmazonS3Client().getObject(new GetObjectRequest(bucketName, fileName));', 'exchanges = createExchanges(s3Object);', '} else {', 'ListObjectsRequest listObjectsRequest = new ListObjectsRequest();', 'listObjectsRequest.setBucketName(bucketName);', 'listObjectsRequest.setPrefix(getConfiguration().getPrefix());', 'if (maxMessagesPerPoll > 0) {', 'listObjectsRequest.setMaxKeys(maxMessagesPerPoll);', '}', 'if (marker != null) {']
['resuming from marker ', ['marker']]
camel sample_8693

['listObjectsRequest.setPrefix(getConfiguration().getPrefix());', 'if (maxMessagesPerPoll > 0) {', 'listObjectsRequest.setMaxKeys(maxMessagesPerPoll);', '}', 'if (marker != null) {', 'listObjectsRequest.setMarker(marker);', '}', 'ObjectListing listObjects = getAmazonS3Client().listObjects(listObjectsRequest);', 'if (listObjects.isTruncated()) {', 'marker = listObjects.getNextMarker();']
['returned list is truncated so setting next marker ', ['marker']]
camel sample_8693

['if (marker != null) {', 'listObjectsRequest.setMarker(marker);', '}', 'ObjectListing listObjects = getAmazonS3Client().listObjects(listObjectsRequest);', 'if (listObjects.isTruncated()) {', 'marker = listObjects.getNextMarker();', '} else {', 'marker = null;', '}', 'if (LOG.isTraceEnabled()) {']
['found objects in bucket ', ['listobjects', 'getobjectsummaries', 'size', 'bucketname']]
camel sample_8693

['protected Queue<Exchange> createExchanges(List<S3ObjectSummary> s3ObjectSummaries) {', 'if (LOG.isTraceEnabled()) {']
['received messages in this poll ', ['size']]
camel sample_8693

['Collection<S3Object> s3Objects = new ArrayList<>();', 'Queue<Exchange> answer = new LinkedList<Exchange>();', 'try {', 'for (S3ObjectSummary s3ObjectSummary : s3ObjectSummaries) {', 'S3Object s3Object = getAmazonS3Client().getObject(s3ObjectSummary.getBucketName(), s3ObjectSummary.getKey());', 's3Objects.add(s3Object);', 'Exchange exchange = getEndpoint().createExchange(s3Object);', 'answer.add(exchange);', '}', '} catch (Throwable e) {']
['error getting due ', ['e', 'getmessage', 'e']]
camel sample_8693

['public void onComplete(Exchange exchange) {', 'processCommit(exchange);', '}', 'public void onFailure(Exchange exchange) {', 'processRollback(exchange);', '}', 'public String toString() {', 'return "S3ConsumerOnCompletion";', '}', '});']
['processing exchange ', ['exchange']]
camel sample_8693

['}', 'public void onFailure(Exchange exchange) {', 'processRollback(exchange);', '}', 'public String toString() {', 'return "S3ConsumerOnCompletion";', '}', '});', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['processing exchange done ', ['exchange']]
camel sample_8693

['protected void processCommit(Exchange exchange) {', 'try {', 'if (getConfiguration().isDeleteAfterRead()) {', 'String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class);', 'String key = exchange.getIn().getHeader(S3Constants.KEY, String.class);']
['deleting object from bucket with key ', ['bucketname', 'key']]
camel sample_8693

['protected void processCommit(Exchange exchange) {', 'try {', 'if (getConfiguration().isDeleteAfterRead()) {', 'String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class);', 'String key = exchange.getIn().getHeader(S3Constants.KEY, String.class);', 'getAmazonS3Client().deleteObject(bucketName, key);']
['deleted object from bucket with key ', ['bucketname', 'key']]
camel sample_8693

['protected void processRollback(Exchange exchange) {', 'Exception cause = exchange.getException();', 'if (cause != null) {']
['exchange failed so rolling back message status ', ['exchange', 'cause']]
camel sample_8693

['protected void processRollback(Exchange exchange) {', 'Exception cause = exchange.getException();', 'if (cause != null) {', '} else {']
['exchange failed so rolling back message status ', ['exchange']]
camel sample_8693

['protected void checkWeatherContent(String weather) {']
['the weather in format is ', ['weathermode', 'html', 'ls', 'weather']]
camel sample_11360

['public void testPostStatusUpdateRequestResponse() throws Exception {', 'Date now = new Date();', 'String tweet = "UserProducerInOutTest: This is a tweet posted on " + now.toString();']
['tweet ', ['tweet']]
camel sample_14162

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<UniVocityCsvDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-csv.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-csv.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1261

['public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {', 'Class<?> testClass = getTestClass();', 'if (LOG.isDebugEnabled()) {']
['loading applicationcontext for merged context configuration ', ['mergedconfig']]
camel sample_10571

['public ApplicationContext loadContext(String... locations) throws Exception {', 'Class<?> testClass = getTestClass();', 'if (LOG.isDebugEnabled()) {']
['loading applicationcontext for locations ', ['stringutils', 'arraytocommadelimitedstring', 'locations']]
camel sample_10571

['protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {', 'ApplicationContext parentContext = null;', 'GenericApplicationContext routeExcludingContext = null;', 'if (mergedConfig != null) {', 'parentContext = mergedConfig.getParentApplicationContext();', '}', 'if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {', 'Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value();', 'if (excludedClasses.length > 0) {', 'if (LOG.isDebugEnabled()) {']
['setting up package scanning excluded classes as excluderoutes annotation was found excluding ', ['stringutils', 'arraytocommadelimitedstring', 'excludedclasses']]
camel sample_10571

['} else {', 'routeExcludingContext = new GenericApplicationContext(parentContext);', '}', 'routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class));', 'routeExcludingContext.refresh();', 'ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class);', 'List<Class<?>> excluded = Arrays.asList(excludedClasses);', 'excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded));', '} else {', 'if (LOG.isDebugEnabled()) {']
['not enabling package scanning excluded classes as excluderoutes annotation was found but no classes were excluded ', []]
camel sample_10571

['protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {']
['disabling camel jmx globally as disablejmx annotation was found and disablejmx is set to true ', []]
camel sample_10571

['protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {', 'System.setProperty(JmxSystemPropertyKeys.DISABLED, "true");', '} else {']
['enabling camel jmx as disablejmx annotation was found and disablejmx is set to false ', []]
camel sample_10571

['protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {', 'System.setProperty(JmxSystemPropertyKeys.DISABLED, "true");', '} else {', 'System.clearProperty(JmxSystemPropertyKeys.DISABLED);', '}', '} else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {']
['disabling camel jmx globally for tests by default use the disablejmx annotation to override the default setting ', []]
camel sample_10571

['private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {', 'System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true");', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['enabling routecoverage ', []]
camel sample_10571

['}', 'if (breakpoints.size() != 0) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'Debugger debugger = camelContext.getDebugger();', 'if (debugger == null) {', 'debugger = new DefaultDebugger();', 'camelContext.setDebugger(debugger);', '}', 'for (Breakpoint breakpoint : breakpoints) {']
['adding breakpoint to camelcontext with name ', ['breakpoint', 'contextname']]
camel sample_10571

['final TimeUnit shutdownTimeUnit;', 'if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {', 'shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value();', 'shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit();', '} else {', 'shutdownTimeout = 10;', 'shutdownTimeUnit = TimeUnit.SECONDS;', '}', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['setting shutdown timeout to on camelcontext with name ', ['new', 'object', 'shutdowntimeout', 'shutdowntimeunit', 'contextname']]
camel sample_10571

['protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'if (testClass.isAnnotationPresent(MockEndpoints.class)) {', 'final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value();', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['enabling auto mocking of endpoints matching pattern on camelcontext with name ', ['mockendpoints', 'contextname']]
camel sample_10571

['protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {', 'final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value();', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints);']
['enabling auto mocking and skipping of endpoints matching pattern on camelcontext with name ', ['mockendpointsvalue', 'contextname']]
camel sample_10571

['}', 'if (properties.size() != 0) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class);', 'Properties extra = new Properties();', 'for (Properties prop : properties) {', 'extra.putAll(prop);', '}', 'if (!extra.isEmpty()) {']
['using properties to override any existing properties on the propertiescomponent on camelcontext with name ', ['extra', 'size', 'contextname']]
camel sample_10571

['protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['skipping starting camelcontext s as system property skipstartingcamelcontext is set to be true ', []]
camel sample_10571

['protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {', 'if (testClass.getAnnotation(UseAdviceWith.class).value()) {']
['skipping starting camelcontext s as useadvicewith annotation was found and isuseadvicewith is set to true ', []]
camel sample_10571

['protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {', 'if (testClass.getAnnotation(UseAdviceWith.class).value()) {', 'skip = true;', '} else {']
['starting camelcontext s as useadvicewith annotation was found but isuseadvicewith is set to false ', []]
camel sample_10571

['} else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {', 'if (testClass.getAnnotation(UseAdviceWith.class).value()) {', 'skip = true;', '} else {', 'skip = false;', '}', '}', 'if (!skip) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['starting camelcontext with name ', ['contextname']]
camel sample_10571

['protected void executeWithClient(final RestClient client) throws MojoExecutionException {']
['generating json schema ', []]
camel sample_14924

['} catch (final IOException e) {', 'throw new MojoExecutionException("Unable to generate JSON Schema types for: " + description.getName(), e);', '}', '}', 'final Path schemaFilePath = outputDirectory.toPath().resolve(jsonSchemaFilename);', 'try {', 'Files.write(schemaFilePath, JsonUtils.getJsonSchemaString(schemaObjectMapper, allSchemas, jsonSchemaId).getBytes("UTF-8"));', '} catch (final IOException e) {', 'throw new MojoExecutionException("Unable to generate JSON Schema source file: " + schemaFilePath, e);', '}']
['successfully generated s json types in file s ', ['string', 'format', 'descriptions', 'count', 'schemafilepath']]
camel sample_14924

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("master:jgl:timer:master?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_16919

['args.setOwner(owner);', '}', 'args.setUsername(username);', 'args.setPassword(password);', 'if (isUseSunHttpsHandler()) {', 'String sunHandlerClassName = "sun.net.www.protocol.https.Handler";', 'Class<URLStreamHandler> clazz = camelContext.getClassResolver().resolveClass(sunHandlerClassName, URLStreamHandler.class);', 'if (clazz != null) {', 'URLStreamHandler handler = camelContext.getInjector().newInstance(clazz);', 'args.setHTTPSHandler(handler);']
['using the urlstreamhandler for ', ['handler', 'args']]
camel sample_14477

['}', 'args.setUsername(username);', 'args.setPassword(password);', 'if (isUseSunHttpsHandler()) {', 'String sunHandlerClassName = "sun.net.www.protocol.https.Handler";', 'Class<URLStreamHandler> clazz = camelContext.getClassResolver().resolveClass(sunHandlerClassName, URLStreamHandler.class);', 'if (clazz != null) {', 'URLStreamHandler handler = camelContext.getInjector().newInstance(clazz);', 'args.setHTTPSHandler(handler);', '} else {']
['could not resolve and use the urlstreamhandler class ', ['sunhandlerclassname']]
camel sample_14477

['if (clazz != null) {', 'URLStreamHandler handler = camelContext.getInjector().newInstance(clazz);', 'args.setHTTPSHandler(handler);', '} else {', '}', '}', 'ExecutorService executor = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "DefaultSplunkConnectionFactory");', 'Future<Service> future = executor.submit(new Callable<Service>() {', 'public Service call() throws Exception {', 'if (Service.DEFAULT_SCHEME.equals(getScheme())) {']
['https in use setting ssl protocol to ', ['getsslprotocol']]
camel sample_14477

['return Service.connect(args);', '}', '});', 'try {', 'Service service = null;', 'if (connectionTimeout > 0) {', 'service = future.get(connectionTimeout, TimeUnit.MILLISECONDS);', '} else {', 'service = future.get();', '}']
['successfully connected to splunk ', []]
camel sample_14477

['private void startBroker() throws Exception {', 'broker.start();']
['started embedded jms server ', []]
camel sample_9344

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {']
['waiting on the camel context to stop ', []]
camel sample_9344

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}']
['closing jms session ', []]
camel sample_9344

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}']
['closing jms connection ', []]
camel sample_9344

['while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}', 'if (connection != null) {', 'connection.stop();', 'connection = null;', '}']
['stopping the activemq broker ', []]
camel sample_9344

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'final String id = routeIdExpression().evaluate(exchange, String.class);', 'Deque<String> fatals = exchange.getProperty(Exchange.FATAL_FALLBACK_ERROR_HANDLER, null, Deque.class);', 'if (fatals == null) {', 'fatals = new ArrayDeque<>();', 'exchange.setProperty(Exchange.FATAL_FALLBACK_ERROR_HANDLER, fatals);', '}', 'if (fatals.contains(id)) {']
['circular error handler detected at route breaking out processing exchange ', ['id', 'exchange']]
camel sample_4576

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GitHubComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.github.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.github.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1099

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KinesisFirehoseComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-kinesis-firehose.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-kinesis-firehose.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1133

['private void warnIfNoCamelFound() {', 'BeanManager manager = cdiContainer.getBeanManager();', 'Set<Bean<?>> contexts = manager.getBeans(CamelContext.class, ANY);', 'if (contexts.isEmpty()) {']
['camel cdi main has started with no camel context ', []]
camel sample_9915

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesPersistentVolumesClaimsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-persistent-volumes-claims.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-persistent-volumes-claims.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_541

['public void xxxtestAggregateSimpleExpression() throws Exception {', 'int files = 10;', 'int rows = 100000;', 'int batches = rows / 1000;', 'int total = files + (files * rows) + (files * batches);']
['there are exchanges ', ['total']]
camel sample_1975

['public void xxxtestAggregateSimpleExpression() throws Exception {', 'int files = 10;', 'int rows = 100000;', 'int batches = rows / 1000;', 'int total = files + (files * rows) + (files * batches);', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(total).create();']
['writing files with rows in each file ', []]
camel sample_1975

['NotifyBuilder notify = new NotifyBuilder(context).whenDone(total).create();', 'for (int i = 0; i < files; i++) {', 'Writer out = IOHelper.buffered(new FileWriter(new File("target/files", "data" + i)));', 'for (int j = 0; j < rows; j++) {', 'out.write(DATA);', '}', 'out.close();', '}', 'StopWatch watch = new StopWatch();', 'context.startRoute("foo");']
['waiting to process all the files ', []]
camel sample_1975

['for (int i = 0; i < files; i++) {', 'Writer out = IOHelper.buffered(new FileWriter(new File("target/files", "data" + i)));', 'for (int j = 0; j < rows; j++) {', 'out.write(DATA);', '}', 'out.close();', '}', 'StopWatch watch = new StopWatch();', 'context.startRoute("foo");', 'boolean matches = notify.matches(3, TimeUnit.MINUTES);']
['should process all files ', ['matches']]
camel sample_1975

['for (int i = 0; i < files; i++) {', 'Writer out = IOHelper.buffered(new FileWriter(new File("target/files", "data" + i)));', 'for (int j = 0; j < rows; j++) {', 'out.write(DATA);', '}', 'out.close();', '}', 'StopWatch watch = new StopWatch();', 'context.startRoute("foo");', 'boolean matches = notify.matches(3, TimeUnit.MINUTES);']
['time taken ms ', ['watch', 'taken']]
camel sample_1975

['public void invoke(final List<String> strList) {']
['batch ', ['cnt']]
camel sample_1975

['public void initAnnotatedFields() {', 'maxpos = 0;', 'for (Class<?> cl : models) {', 'List<Field> linkFields = new ArrayList<Field>();', 'if (LOG.isDebugEnabled()) {']
['class retrieved ', ['cl', 'getname']]
camel sample_7458

['public void initAnnotatedFields() {', 'maxpos = 0;', 'for (Class<?> cl : models) {', 'List<Field> linkFields = new ArrayList<Field>();', 'if (LOG.isDebugEnabled()) {', '}', 'for (Field field : cl.getDeclaredFields()) {', 'DataField dataField = field.getAnnotation(DataField.class);', 'if (dataField != null) {', 'if (LOG.isDebugEnabled()) {']
['position defined in the class position field ', ['new', 'object', 'cl', 'getname', 'datafield', 'pos', 'datafield']]
camel sample_7458

['if (LOG.isDebugEnabled()) {', '}', 'if (dataField.required()) {', '++numberMandatoryFields;', '} else {', '++numberOptionalFields;', '}', 'int pos = dataField.pos();', 'if (annotatedFields.containsKey(pos)) {', 'Field f = annotatedFields.get(pos);']
['potentially invalid model existing datafield replaced by ', ['f', 'getname', 'field', 'getname']]
camel sample_7458

['if (annotatedFields.containsKey(pos)) {', 'Field f = annotatedFields.get(pos);', '}', 'dataFields.put(pos, dataField);', 'annotatedFields.put(pos, field);', 'maxpos = Math.max(maxpos, pos);', '}', 'Link linkField = field.getAnnotation(Link.class);', 'if (linkField != null) {', 'if (LOG.isDebugEnabled()) {']
['class linked field ', ['cl', 'getname', 'field']]
camel sample_7458

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['number of optional fields ', ['numberoptionalfields']]
camel sample_7458

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['number of mandatory fields ', ['numbermandatoryfields']]
camel sample_7458

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['total ', ['totalfields']]
camel sample_7458

['}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {', '}', '}', 'if (annotatedFields.size() < maxpos) {']
['potentially incomplete model some csv fields may not be mapped to datafield members ', []]
camel sample_7458

['}', 'if (dataField.required()) {', '++counterMandatoryFields;', 'if (data.equals("")) {', 'throw new IllegalArgumentException("The mandatory field defined at the position " + pos + " is empty for the line: " + line);', '}', '}', 'Field field = annotatedFields.get(pos);', 'field.setAccessible(true);', 'if (LOG.isDebugEnabled()) {']
['pos data field type ', ['new', 'object', 'pos', 'data', 'field', 'gettype']]
camel sample_7458

['if (m != null) {', 'value = ObjectHelper.invokeMethod(m, null, value);', '} else {', 'm = ReflectionHelper.findMethod(clazz, methodName);', 'value = ObjectHelper.invokeMethod(m, value);', '}', '}', 'field.set(modelField, value);', '++pos;', '}']
['counter mandatory fields ', ['countermandatoryfields']]
camel sample_7458

['public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {', 'StringBuilder buffer = new StringBuilder();', 'Map<Integer, List<String>> results = new HashMap<Integer, List<String>>();', 'ObjectHelper.notNull(this.separator, "The separator has not been instantiated or property not defined in the @CsvRecord annotation");', 'char separator = ConverterUtils.getCharDelimiter(this.getSeparator());', 'if (LOG.isDebugEnabled()) {']
['separator converted from ', ['integer', 'tohexstring', 'separator', 'this', 'getseparator']]
camel sample_7458

['StringBuilder buffer = new StringBuilder();', 'Map<Integer, List<String>> results = new HashMap<Integer, List<String>>();', 'ObjectHelper.notNull(this.separator, "The separator has not been instantiated or property not defined in the @CsvRecord annotation");', 'char separator = ConverterUtils.getCharDelimiter(this.getSeparator());', 'if (LOG.isDebugEnabled()) {', '}', 'for (Class<?> clazz : models) {', 'if (model.containsKey(clazz.getName())) {', 'Object obj = model.get(clazz.getName());', 'if (LOG.isDebugEnabled()) {']
['model object class ', ['obj', 'obj', 'getclass', 'getname']]
camel sample_7458

['List<String> l = values.get(ii);', 'if (l == null) {', 'v.add("");', '++idxSize;', 'continue;', '}', 'if (l.size() >= idx + 1) {', 'v.add(l.get(idx));', 'index.put(ii, idx);', 'if (LOG.isDebugEnabled()) {']
['value pos at ', ['new', 'object', 'l', 'get', 'idx', 'ii', 'idx']]
camel sample_7458

['if (l.size() >= idx + 1) {', 'v.add(l.get(idx));', 'index.put(ii, idx);', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'v.add(l.get(0));', 'index.put(ii, 0);', '++idxSize;', 'if (LOG.isDebugEnabled()) {']
['value pos at index ', ['new', 'object', 'l', 'get', 'ii']]
camel sample_7458

['value = datafield.defaultValue();', '}', 'result = formatString(format, value);', 'if (datafield.trim()) {', 'result = result.trim();', '}', 'if (datafield.clip() && result.length() > datafield.length()) {', 'result = result.substring(0, datafield.length());', '}', 'if (LOG.isDebugEnabled()) {']
['value to be formatted position and its formatted value ', ['new', 'object', 'value', 'datafield', 'pos', 'result']]
camel sample_7458

['}', '} else {', 'result = "";', '}', 'Integer key;', 'if (isMessageOrdered() && obj != null) {', 'Integer key1 = sections.get(obj.getClass().getName());', 'Integer key2 = datafield.position();', 'Integer keyGenerated = generateKey(key1, key2);', 'if (LOG.isDebugEnabled()) {']
['key generated for section ', ['string', 'valueof', 'keygenerated']]
camel sample_7458

['private void initCsvRecordParameters() {', 'if (separator == null) {', 'for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {']
['csv record ', ['record']]
camel sample_7458

['private void initCsvRecordParameters() {', 'if (separator == null) {', 'for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();']
['skip first line parameter of the csv ', ['skipfirstline']]
camel sample_7458

['private void initCsvRecordParameters() {', 'if (separator == null) {', 'for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();']
['generate header column names parameter of the csv ', ['generateheadercolumnnames']]
camel sample_7458

['private void initCsvRecordParameters() {', 'if (separator == null) {', 'for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();']
['separator defined for the csv ', ['separator']]
camel sample_7458

['if (separator == null) {', 'for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();']
['carriage return defined for the csv ', ['crlf']]
camel sample_7458

['for (Class<?> cl : models) {', 'CsvRecord record = cl.getAnnotation(CsvRecord.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();']
['must csv record be ordered ', ['messageordered']]
camel sample_7458

['Section section = cl.getAnnotation(Section.class);', 'if (record != null) {', 'skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();']
['quoting columns with ', ['quote']]
camel sample_7458

['skipFirstLine = record.skipFirstLine();', 'generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();', '}', 'quoting = record.quoting();']
['csv will be quoted ', ['quoting']]
camel sample_7458

['generateHeaderColumnNames = record.generateHeaderColumns();', 'ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();', '}', 'quoting = record.quoting();', 'autospanLine = record.autospanLine();']
['autospan line in last record ', ['autospanline']]
camel sample_7458

['ObjectHelper.notNull(record.separator(), "No separator has been defined in the @Record annotation");', 'separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();', '}', 'quoting = record.quoting();', 'autospanLine = record.autospanLine();', 'allowEmptyStream = record.allowEmptyStream();']
['allow empty stream parameter of the csv ', ['allowemptystream']]
camel sample_7458

['separator = record.separator();', 'crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();', '}', 'quoting = record.quoting();', 'autospanLine = record.autospanLine();', 'allowEmptyStream = record.allowEmptyStream();', 'quotingEscaped = record.quotingEscaped();']
['escape quote character flag of the csv ', ['quotingescaped']]
camel sample_7458

['crlf = record.crlf();', 'messageOrdered = record.isOrdered();', 'if (ObjectHelper.isNotEmpty(record.quote())) {', 'quote = record.quote();', '}', 'quoting = record.quoting();', 'autospanLine = record.autospanLine();', 'allowEmptyStream = record.allowEmptyStream();', 'quotingEscaped = record.quotingEscaped();', 'endWithLineBreak = record.endWithLineBreak();']
['end with line break ', ['endwithlinebreak']]
camel sample_7458

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(resolvedQuery, getEndpoint().isAllowNamedParameters(), null);']
['poll ', ['preparedquery']]
camel sample_9016

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(resolvedQuery, getEndpoint().isAllowNamedParameters(), null);', 'final PreparedStatementCallback<Integer> callback = new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {', 'Queue<DataHolder> answer = new LinkedList<DataHolder>();']
['executing query ', ['preparedquery']]
camel sample_9016

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total == maxMessagesPerPoll) {']
['maximum messages to poll is and there were exactly messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_9016

['}', 'try {', 'if (onConsumeBatchComplete != null) {', 'int updateCount;', 'if (namedJdbcTemplate != null && sqlProcessingStrategy instanceof SqlNamedProcessingStrategy) {', 'SqlNamedProcessingStrategy namedProcessingStrategy = (SqlNamedProcessingStrategy) sqlProcessingStrategy;', 'updateCount = namedProcessingStrategy.commitBatchComplete(getEndpoint(), namedJdbcTemplate, parameterSource, onConsumeBatchComplete);', '} else {', 'updateCount = sqlProcessingStrategy.commitBatchComplete(getEndpoint(), jdbcTemplate, onConsumeBatchComplete);', '}']
['onconsumebatchcomplete update count ', ['updatecount']]
camel sample_9016

['public void testSharedThreadPool() throws Exception {', 'int delta = Thread.activeCount() - before;']
['created threads ', ['delta']]
camel sample_6619

['protected void initHdfs() {', 'try {', 'URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());', '} catch (Throwable e) {']
['cannot set urlstreamhandlerfactory due this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_12188

['static Configuration getJAASConfiguration() {', 'Configuration auth = null;', 'try {', 'auth = Configuration.getConfiguration();']
['existing jaas configuration ', ['auth']]
camel sample_12188

['static Configuration getJAASConfiguration() {', 'Configuration auth = null;', 'try {', 'auth = Configuration.getConfiguration();', '} catch (SecurityException e) {']
['cannot load existing jaas configuration ', ['e']]
camel sample_12188

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {']
['restoring existing jaas configuration ', ['auth']]
camel sample_12188

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {', 'try {', 'Configuration.setConfiguration(auth);', '} catch (SecurityException e) {']
['cannot restore jaas configuration this exception is ignored ', ['e']]
camel sample_12188

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {', 'try {', 'Configuration.setConfiguration(auth);', '} catch (SecurityException e) {', '}', '} else {']
['no jaas configuration to restore ', []]
camel sample_12188

['public Producer createProducer() throws Exception {']
['resolve producer dropbox endpoint ', ['configuration', 'getoperation', 'tostring']]
camel sample_8484

['public Producer createProducer() throws Exception {']
['resolve producer dropbox attached client ', ['configuration', 'getclient']]
camel sample_8484

['public Consumer createConsumer(Processor processor) throws Exception {']
['resolve consumer dropbox endpoint ', ['configuration', 'getoperation', 'tostring']]
camel sample_8484

['public Consumer createConsumer(Processor processor) throws Exception {']
['resolve consumer dropbox attached client ', ['configuration', 'getclient']]
camel sample_8484

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastRingbufferComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-ringbuffer.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-ringbuffer.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_668

['public void start() throws Exception {', 'if (serializedExecutor == null) {']
['starting leadership controller ', ['logprefix']]
camel sample_13263

['public void stop() throws Exception {']
['stopping leadership controller ', ['logprefix']]
camel sample_13263

['private void refreshStatusNotLeader() {']
['pod is not leader pulling new data from the cluster ', ['logprefix']]
camel sample_13263

['private void refreshStatusNotLeader() {', 'boolean pulled = lookupNewLeaderInfo();', 'if (!pulled) {', 'rescheduleAfterDelay();', 'return;', '}', 'if (this.latestLeaderInfo.hasEmptyLeader()) {']
['the cluster has no leaders trying to acquire the leadership ', ['logprefix']]
camel sample_13263

['private void refreshStatusNotLeader() {', 'boolean pulled = lookupNewLeaderInfo();', 'if (!pulled) {', 'rescheduleAfterDelay();', 'return;', '}', 'if (this.latestLeaderInfo.hasEmptyLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {']
['leadership acquired by current pod with immediate effect ', ['logprefix']]
camel sample_13263

['rescheduleAfterDelay();', 'return;', '}', 'if (this.latestLeaderInfo.hasEmptyLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {', 'this.currentState = State.LEADER;', 'this.serializedExecutor.execute(this::refreshStatus);', 'return;', '} else {']
['unable to acquire the leadership it may have been acquired by another pod ', ['logprefix']]
camel sample_13263

['}', 'if (this.latestLeaderInfo.hasEmptyLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {', 'this.currentState = State.LEADER;', 'this.serializedExecutor.execute(this::refreshStatus);', 'return;', '} else {', '}', '} else if (!this.latestLeaderInfo.hasValidLeader()) {']
['leadership has been lost by old owner trying to acquire the leadership ', ['logprefix']]
camel sample_13263

['boolean acquired = tryAcquireLeadership();', 'if (acquired) {', 'this.currentState = State.LEADER;', 'this.serializedExecutor.execute(this::refreshStatus);', 'return;', '} else {', '}', '} else if (!this.latestLeaderInfo.hasValidLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {']
['leadership acquired by current pod ', ['logprefix']]
camel sample_13263

['return;', '} else {', '}', '} else if (!this.latestLeaderInfo.hasValidLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {', 'this.currentState = State.BECOMING_LEADER;', 'this.serializedExecutor.execute(this::refreshStatus);', 'return;', '} else {']
['unable to acquire the leadership it may have been acquired by another pod ', ['logprefix']]
camel sample_13263

['}', '} else if (!this.latestLeaderInfo.hasValidLeader()) {', 'boolean acquired = tryAcquireLeadership();', 'if (acquired) {', 'this.currentState = State.BECOMING_LEADER;', 'this.serializedExecutor.execute(this::refreshStatus);', 'return;', '} else {', '}', '} else if (this.latestLeaderInfo.isValidLeader(this.lockConfiguration.getPodName())) {']
['leadership is already owned by current pod ', ['logprefix']]
camel sample_13263

['private void refreshStatusBecomingLeader() {', 'long delay = this.lockConfiguration.getLeaseDurationMillis();']
['current pod owns the leadership but it will be effective in seconds ', ['logprefix', 'new', 'bigdecimal', 'delay', 'divide', 'bigdecimal', 'valueof', 'bigdecimal', 'round', 'half', 'up']]
camel sample_13263

['private void refreshStatusBecomingLeader() {', 'long delay = this.lockConfiguration.getLeaseDurationMillis();', 'try {', 'Thread.sleep(delay);', '} catch (InterruptedException e) {']
['thread interrupted ', ['e']]
camel sample_13263

['private void refreshStatusBecomingLeader() {', 'long delay = this.lockConfiguration.getLeaseDurationMillis();', 'try {', 'Thread.sleep(delay);', '} catch (InterruptedException e) {', '}']
['current pod is becoming the new leader now ', ['logprefix']]
camel sample_13263

['private void refreshStatusLeader() {']
['pod should be the leader pulling new data from the cluster ', ['logprefix']]
camel sample_13263

['private void refreshStatusLeader() {', 'long timeBeforePulling = System.currentTimeMillis();', 'boolean pulled = lookupNewLeaderInfo();', 'if (!pulled) {', 'rescheduleAfterDelay();', 'return;', '}', 'if (this.latestLeaderInfo.isValidLeader(this.lockConfiguration.getPodName())) {']
['current pod is still the leader ', ['logprefix']]
camel sample_13263

['boolean pulled = lookupNewLeaderInfo();', 'if (!pulled) {', 'rescheduleAfterDelay();', 'return;', '}', 'if (this.latestLeaderInfo.isValidLeader(this.lockConfiguration.getPodName())) {', 'this.leaderNotifier.refreshLeadership(Optional.of(this.lockConfiguration.getPodName()), timeBeforePulling, this.lockConfiguration.getRenewDeadlineMillis(), this.latestLeaderInfo.getMembers());', 'rescheduleAfterDelay();', 'return;', '} else {']
['current pod has lost the leadership ', ['logprefix']]
camel sample_13263

['private boolean lookupNewLeaderInfo() {']
['looking up leadership information ', ['logprefix']]
camel sample_13263

['private boolean lookupNewLeaderInfo() {', 'ConfigMap configMap;', 'try {', 'configMap = pullConfigMap();', '} catch (Throwable e) {']
['unable to retrieve the current configmap from kubernetes ', ['logprefix', 'this', 'lockconfiguration', 'getconfigmapname']]
camel sample_13263

['private boolean lookupNewLeaderInfo() {', 'ConfigMap configMap;', 'try {', 'configMap = pullConfigMap();', '} catch (Throwable e) {']
['exception thrown during configmap lookup ', ['logprefix', 'e']]
camel sample_13263

['ConfigMap configMap;', 'try {', 'configMap = pullConfigMap();', '} catch (Throwable e) {', 'return false;', '}', 'Set<String> members;', 'try {', 'members = Objects.requireNonNull(pullClusterMembers(), "Retrieved a null set of members");', '} catch (Throwable e) {']
['unable to retrieve the list of cluster members from kubernetes ', ['logprefix']]
camel sample_13263

['ConfigMap configMap;', 'try {', 'configMap = pullConfigMap();', '} catch (Throwable e) {', 'return false;', '}', 'Set<String> members;', 'try {', 'members = Objects.requireNonNull(pullClusterMembers(), "Retrieved a null set of members");', '} catch (Throwable e) {']
['exception thrown during pod list lookup ', ['logprefix', 'e']]
camel sample_13263

['private boolean tryAcquireLeadership() {']
['trying to acquire the leadership ', ['logprefix']]
camel sample_13263

['private boolean tryAcquireLeadership() {', 'ConfigMap configMap = this.latestConfigMap;', 'Set<String> members = this.latestMembers;', 'LeaderInfo latestLeaderInfo = this.latestLeaderInfo;', 'if (latestLeaderInfo == null || members == null) {']
['unexpected condition latest leader info or list of members is empty ', ['logprefix']]
camel sample_13263

['private boolean tryAcquireLeadership() {', 'ConfigMap configMap = this.latestConfigMap;', 'Set<String> members = this.latestMembers;', 'LeaderInfo latestLeaderInfo = this.latestLeaderInfo;', 'if (latestLeaderInfo == null || members == null) {', 'return false;', '} else if (!members.contains(this.lockConfiguration.getPodName())) {']
['the list of cluster members does not contain the current pod cannot acquire leadership ', ['logprefix', 'latestleaderinfo', 'getmembers']]
camel sample_13263

['ConfigMap configMap = this.latestConfigMap;', 'Set<String> members = this.latestMembers;', 'LeaderInfo latestLeaderInfo = this.latestLeaderInfo;', 'if (latestLeaderInfo == null || members == null) {', 'return false;', '} else if (!members.contains(this.lockConfiguration.getPodName())) {', 'return false;', '}', 'LeaderInfo newLeaderInfo = new LeaderInfo(this.lockConfiguration.getGroupName(), this.lockConfiguration.getPodName(), new Date(), members);', 'if (configMap == null) {']
['lock configmap is not present in the kubernetes namespace a new configmap will be created ', ['logprefix']]
camel sample_13263

['if (latestLeaderInfo == null || members == null) {', 'return false;', '} else if (!members.contains(this.lockConfiguration.getPodName())) {', 'return false;', '}', 'LeaderInfo newLeaderInfo = new LeaderInfo(this.lockConfiguration.getGroupName(), this.lockConfiguration.getPodName(), new Date(), members);', 'if (configMap == null) {', 'ConfigMap newConfigMap = ConfigMapLockUtils.createNewConfigMap(this.lockConfiguration.getConfigMapName(), newLeaderInfo);', 'try {', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .create(newConfigMap);']
['configmap successfully created ', ['logprefix', 'this', 'lockconfiguration', 'getconfigmapname']]
camel sample_13263

['return false;', '}', 'LeaderInfo newLeaderInfo = new LeaderInfo(this.lockConfiguration.getGroupName(), this.lockConfiguration.getPodName(), new Date(), members);', 'if (configMap == null) {', 'ConfigMap newConfigMap = ConfigMapLockUtils.createNewConfigMap(this.lockConfiguration.getConfigMapName(), newLeaderInfo);', 'try {', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .create(newConfigMap);', 'updateLatestLeaderInfo(newConfigMap, members);', 'return true;', '} catch (Exception ex) {']
['unable to create the configmap it may have been created by other cluster members concurrently if the problem persists check if the service account has the right permissions to create it ', ['logprefix']]
camel sample_13263

['return false;', '}', 'LeaderInfo newLeaderInfo = new LeaderInfo(this.lockConfiguration.getGroupName(), this.lockConfiguration.getPodName(), new Date(), members);', 'if (configMap == null) {', 'ConfigMap newConfigMap = ConfigMapLockUtils.createNewConfigMap(this.lockConfiguration.getConfigMapName(), newLeaderInfo);', 'try {', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .create(newConfigMap);', 'updateLatestLeaderInfo(newConfigMap, members);', 'return true;', '} catch (Exception ex) {']
['exception while trying to create the configmap ', ['logprefix', 'ex']]
camel sample_13263

['if (configMap == null) {', 'ConfigMap newConfigMap = ConfigMapLockUtils.createNewConfigMap(this.lockConfiguration.getConfigMapName(), newLeaderInfo);', 'try {', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .create(newConfigMap);', 'updateLatestLeaderInfo(newConfigMap, members);', 'return true;', '} catch (Exception ex) {', 'return false;', '}', '} else {']
['lock configmap already present in the kubernetes namespace checking ', ['logprefix']]
camel sample_13263

['} catch (Exception ex) {', 'return false;', '}', '} else {', 'LeaderInfo leaderInfo = ConfigMapLockUtils.getLeaderInfo(configMap, members, this.lockConfiguration.getGroupName());', 'boolean canAcquire = !leaderInfo.hasValidLeader();', 'if (canAcquire) {', 'try {', 'ConfigMap updatedConfigMap = ConfigMapLockUtils.getConfigMapWithNewLeader(configMap, newLeaderInfo);', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .withName(this.lockConfiguration.getConfigMapName()) .lockResourceVersion(configMap.getMetadata().getResourceVersion()) .replace(updatedConfigMap);']
['configmap successfully updated ', ['logprefix', 'this', 'lockconfiguration', 'getconfigmapname']]
camel sample_13263

['} else {', 'LeaderInfo leaderInfo = ConfigMapLockUtils.getLeaderInfo(configMap, members, this.lockConfiguration.getGroupName());', 'boolean canAcquire = !leaderInfo.hasValidLeader();', 'if (canAcquire) {', 'try {', 'ConfigMap updatedConfigMap = ConfigMapLockUtils.getConfigMapWithNewLeader(configMap, newLeaderInfo);', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .withName(this.lockConfiguration.getConfigMapName()) .lockResourceVersion(configMap.getMetadata().getResourceVersion()) .replace(updatedConfigMap);', 'updateLatestLeaderInfo(updatedConfigMap, members);', 'return true;', '} catch (Exception ex) {']
['unable to update the lock configmap to set leadership information ', ['logprefix']]
camel sample_13263

['} else {', 'LeaderInfo leaderInfo = ConfigMapLockUtils.getLeaderInfo(configMap, members, this.lockConfiguration.getGroupName());', 'boolean canAcquire = !leaderInfo.hasValidLeader();', 'if (canAcquire) {', 'try {', 'ConfigMap updatedConfigMap = ConfigMapLockUtils.getConfigMapWithNewLeader(configMap, newLeaderInfo);', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .withName(this.lockConfiguration.getConfigMapName()) .lockResourceVersion(configMap.getMetadata().getResourceVersion()) .replace(updatedConfigMap);', 'updateLatestLeaderInfo(updatedConfigMap, members);', 'return true;', '} catch (Exception ex) {']
['error received during configmap lock replace ', ['logprefix', 'ex']]
camel sample_13263

['if (canAcquire) {', 'try {', 'ConfigMap updatedConfigMap = ConfigMapLockUtils.getConfigMapWithNewLeader(configMap, newLeaderInfo);', 'kubernetesClient.configMaps() .inNamespace(this.lockConfiguration.getKubernetesResourcesNamespaceOrDefault(kubernetesClient)) .withName(this.lockConfiguration.getConfigMapName()) .lockResourceVersion(configMap.getMetadata().getResourceVersion()) .replace(updatedConfigMap);', 'updateLatestLeaderInfo(updatedConfigMap, members);', 'return true;', '} catch (Exception ex) {', 'return false;', '}', '} else {']
['another pod is the current leader and it is still active ', ['logprefix', 'this', 'latestleaderinfo', 'getleader']]
camel sample_13263

['private void updateLatestLeaderInfo(ConfigMap configMap, Set<String> members) {']
['updating internal status about the current leader ', ['logprefix']]
camel sample_13263

['private void updateLatestLeaderInfo(ConfigMap configMap, Set<String> members) {', 'this.latestConfigMap = configMap;', 'this.latestMembers = members;', 'this.latestLeaderInfo = ConfigMapLockUtils.getLeaderInfo(configMap, members, this.lockConfiguration.getGroupName());']
['current leader info ', ['logprefix', 'this', 'latestleaderinfo']]
camel sample_13263

['protected RouteBuilder createRouteBuilder() throws Exception {', 'context().setTracing(true);', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['building routes ', []]
camel sample_14119

['public void process(Exchange exchange) throws Exception {', 'Account accountInfo = getEndpoint().getDigitalOceanClient().getAccountInfo();']
['account ', ['accountinfo']]
camel sample_8892

['protected void doStart() throws Exception {', 'super.doStart();', 'if (client == null) {', 'if (configuration.isLocal()) {']
['starting local elasticsearch server ', []]
camel sample_7634

['protected void doStart() throws Exception {', 'super.doStart();', 'if (client == null) {', 'if (configuration.isLocal()) {', '} else {']
['joining elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_7634

['protected void doStop() throws Exception {', 'if (closeClient) {', 'if (configuration.isLocal()) {']
['stopping local elasticsearch server ', []]
camel sample_7634

['protected void doStop() throws Exception {', 'if (closeClient) {', 'if (configuration.isLocal()) {', '} else {']
['leaving elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_7634

['public void testConfiguration() throws Exception {', 'Component component = context().getComponent(componentName);', 'ComponentConfiguration configuration = component.createComponentConfiguration();', 'SortedMap<String, ParameterConfiguration> parameterConfigurationMap = configuration.getParameterConfigurationMap();', 'if (verbose) {', 'Set<Map.Entry<String, ParameterConfiguration>> entries = parameterConfigurationMap.entrySet();', 'for (Map.Entry<String, ParameterConfiguration> entry : entries) {', 'String name = entry.getKey();', 'ParameterConfiguration config = entry.getValue();']
['has name with type ', ['name', 'config', 'getparametertype', 'getname']]
camel sample_6926

['private Producer createHttpProducer(CamelContext camelContext, Swagger swagger, Operation operation, String host, String verb, String path, String queryParameters, String consumes, String produces, String componentName, Map<String, Object> parameters) throws Exception {']
['using swagger operation with ', ['operation', 'verb', 'path']]
camel sample_17365

['private Producer createHttpProducer(CamelContext camelContext, Swagger swagger, Operation operation, String host, String verb, String path, String queryParameters, String consumes, String produces, String componentName, Map<String, Object> parameters) throws Exception {', 'RestProducerFactory factory = (RestProducerFactory) parameters.remove("restProducerFactory");', 'if (factory != null) {']
['using restproducerfactory ', ['factory']]
camel sample_17365

['public static String getTextlineBody(Object body, Exchange exchange, TextLineDelimiter delimiter, boolean autoAppendDelimiter) throws NoTypeConversionAvailableException {', 'String s = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, body);', 'if (autoAppendDelimiter) {', 'if (TextLineDelimiter.LINE.equals(delimiter)) {', 'if (!s.endsWith("\\n")) {']
['auto appending missing newline delimiter to body ', []]
camel sample_10224

['public static String getTextlineBody(Object body, Exchange exchange, TextLineDelimiter delimiter, boolean autoAppendDelimiter) throws NoTypeConversionAvailableException {', 'String s = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, body);', 'if (autoAppendDelimiter) {', 'if (TextLineDelimiter.LINE.equals(delimiter)) {', 'if (!s.endsWith("\\n")) {', 's = s + "\\n";', '}', '} else {', 'if (!s.endsWith("\\u0000")) {']
['auto appending missing null delimiter to body ', []]
camel sample_10224

['public static void close(Channel channel) {', 'if (channel != null) {', 'channel.close().addListener(new ChannelFutureListener() {', 'public void operationComplete(ChannelFuture future) {']
['channel closed ', ['future', 'channel']]
camel sample_10224

['InputStream input = exchange.getIn().getBody(InputStream.class);', 'List<String> argsList = null;', 'if (isListOfStrings(args)) {', 'argsList = (List<String>) args;', '}', 'if (argsList == null) {', 'String s = endpoint.getArgs();', 'if (args != null) {', 's = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, args);', '}']
['parsing argument string to a list ', ['s']]
camel sample_12219

['public PullRequestCommentConsumer(GitHubEndpoint endpoint, Processor processor) throws Exception {', 'super(endpoint, processor);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_PULL_REQUEST_SERVICE);', 'if (service != null) {']
['using pullrequestservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14267

['pullRequestService = new PullRequestService();', '}', 'initService(pullRequestService);', 'service = registry.lookupByName(GitHubConstants.GITHUB_ISSUE_SERVICE);', 'if (service != null) {', 'issueService = (IssueService) service;', '} else {', 'issueService = new IssueService();', '}', 'initService(issueService);']
['github pullrequestcommentconsumer indexing current pull request comments ', []]
camel sample_14267

['public Exchange dispatchSync(RouteboxEndpoint endpoint, Exchange exchange) throws Exception {', 'URI dispatchUri;', 'Exchange reply;', 'if (LOG.isDebugEnabled()) {']
['dispatching exchange to endpoint ', ['exchange', 'endpoint', 'getendpointuri']]
camel sample_14637

['public Exchange dispatchAsync(RouteboxEndpoint endpoint, Exchange exchange) throws Exception {', 'URI dispatchUri;', 'Exchange reply;', 'if (LOG.isDebugEnabled()) {']
['dispatching exchange to endpoint ', ['exchange', 'endpoint', 'getendpointuri']]
camel sample_14637

['throw new CamelExchangeException("No matching entry found in Dispatch Map for ROUTE_DISPATCH_KEY: " + key, exchange);', '}', '} else {', 'dispatchUri = endpoint.getConfig().getDispatchStrategy().selectDestinationUri(consumerUris, exchange);', 'if (dispatchUri == null) {', 'throw new CamelExchangeException("No matching inner routes found for Operation", exchange);', '}', '}', '}', 'if (LOG.isDebugEnabled()) {']
['dispatch uri set to ', ['dispatchuri', 'toasciistring']]
camel sample_14637

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DirectComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.direct.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.direct.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_845

['setProperty(factory, XMLInputFactory.IS_NAMESPACE_AWARE, nsAware);', 'setProperty(factory, XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);', 'setProperty(factory, XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.FALSE);', 'setProperty(factory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);', 'factory.setXMLResolver(new XMLResolver() {', 'public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace) throws XMLStreamException {', 'throw new XMLStreamException("Reading external entities is disabled");', '}', '});', 'if (isWoodstox(factory)) {']
['created woodstox xmlinputfactory ', ['factory']]
camel sample_4223

['setProperty(factory, XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);', 'setProperty(factory, XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.FALSE);', 'setProperty(factory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);', 'factory.setXMLResolver(new XMLResolver() {', 'public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace) throws XMLStreamException {', 'throw new XMLStreamException("Reading external entities is disabled");', '}', '});', 'if (isWoodstox(factory)) {', '} else {']
['created xmlinputfactory domsource domresult may have issues with we suggest using woodstox ', ['factory', 'factory']]
camel sample_4223

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BlobServiceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.azure-blob.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.azure-blob.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1021

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SlackComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.slack.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.slack.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_516

['public void process(Exchange exchange) throws Exception {', 'String payload = exchange.getIn().getBody(String.class);']
['applying schematron validation on payload ', ['payload']]
camel sample_11989

['public void process(Exchange exchange) throws Exception {', 'String payload = exchange.getIn().getBody(String.class);', 'String report = SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules()).validate(payload);']
['schematron validation report ', ['report']]
camel sample_11989

['public void process(Exchange exchange) throws Exception {', 'String payload = exchange.getIn().getBody(String.class);', 'String report = SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules()).validate(payload);', 'String status = getValidationStatus(report);']
['schematron validation status ', ['status']]
camel sample_11989

['protected void assertExpression(String expressionText, String expectedValue, String orThisExpectedValue) {', 'Language language = assertResolveLanguage(getLanguageName());', 'Expression expression = language.createExpression(expressionText);', 'assertNotNull("No Expression could be created for text: " + expressionText + " language: " + language, expression);', 'Object value;', 'if (expectedValue != null) {', 'value = expression.evaluate(exchange, expectedValue.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_6834

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = BlueprintContainerRegistry.lookupByType(blueprintContainer, RoutesBuilder.class, includeNonSingletons);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'String key = entry.getKey();', 'Object bean = entry.getValue();']
['found routebuilder with id ', ['key', 'bean']]
camel sample_8129

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = BlueprintContainerRegistry.lookupByType(blueprintContainer, RoutesBuilder.class, includeNonSingletons);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'String key = entry.getKey();', 'Object bean = entry.getValue();', 'if (shouldIgnoreBean(bean)) {']
['ignoring routebuilder id ', ['key']]
camel sample_8129

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = BlueprintContainerRegistry.lookupByType(blueprintContainer, RoutesBuilder.class, includeNonSingletons);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'String key = entry.getKey();', 'Object bean = entry.getValue();', 'if (shouldIgnoreBean(bean)) {', 'continue;', '}', 'if (!isFilteredClass(bean)) {', 'if (LOG.isDebugEnabled()) {']
['ignoring filtered routebuilder id as class ', ['key', 'bean', 'getclass']]
camel sample_8129

['Object bean = entry.getValue();', 'if (shouldIgnoreBean(bean)) {', 'continue;', '}', 'if (!isFilteredClass(bean)) {', 'if (LOG.isDebugEnabled()) {', '}', 'continue;', '}', 'if (LOG.isDebugEnabled()) {']
['adding instantiated routebuilder id as class ', ['key', 'bean', 'getclass']]
camel sample_8129

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NatsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.nats.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.nats.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_795

['protected void doStop() throws Exception {']
['closing jgroups channel ', ['getendpointuri']]
camel sample_16935

['public void connect() throws Exception {', 'connectCount.incrementAndGet();']
['connecting jgroups channel ', ['getendpointuri']]
camel sample_16935

['public void disconnect() {', 'if (connectCount.decrementAndGet() == 0) {']
['disconnecting jgroups channel ', ['getendpointuri']]
camel sample_16935

['public Producer createProducer() throws Exception {']
['resolve producer atmos endpoint ', ['configuration', 'getoperation', 'tostring']]
camel sample_7233

['public Producer createProducer() throws Exception {']
['resolve producer atmos attached client ', ['configuration', 'getclient']]
camel sample_7233

['public Consumer createConsumer(Processor processor) throws Exception {']
['resolve consumer atmos endpoint ', ['configuration', 'getoperation', 'tostring']]
camel sample_7233

['public Consumer createConsumer(Processor processor) throws Exception {']
['resolve consumer atmos attached client ', ['configuration', 'getclient']]
camel sample_7233

['public void connect() throws Exception {', 'String uri = getHttpUri().toASCIIString();']
['connecting to ', ['uri']]
camel sample_13721

['protected void doStop() throws Exception {', 'if (websocket != null && websocket.isOpen()) {', 'if (LOG.isDebugEnabled()) {']
['disconnecting from ', ['gethttpuri', 'toasciistring']]
camel sample_13721

['public void onOpen(WebSocket websocket) {']
['websocket opened ', []]
camel sample_13721

['public void onClose(WebSocket websocket) {']
['websocket closed reconnecting ', []]
camel sample_13721

['public void onClose(WebSocket websocket) {', 'try {', 'reConnect();', '} catch (Exception e) {']
['error re connecting to websocket ', ['e']]
camel sample_13721

['public void onError(Throwable t) {']
['websocket on error ', ['t']]
camel sample_13721

['public void onMessage(byte[] message) {']
['received message ', ['message']]
camel sample_13721

['public void onMessage(String message) {']
['received message ', ['message']]
camel sample_13721

['public void testRouteboxSedaAsyncRequests() throws Exception {', 'template = new DefaultProducerTemplate(context);', 'template.start();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();']
['beginning test testrouteboxsedaasyncrequests ', []]
camel sample_14621

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");']
['received book with author and title ', ['book', 'getauthor', 'book', 'gettitle']]
camel sample_14621

['public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");', 'assertEquals("The Adventures of Sherlock Holmes", book.getTitle());']
['completed test testrouteboxsedaasyncrequests ', []]
camel sample_14621

['hzInstance = Hazelcast.newHazelcastInstance(config);', '} else if (config != null) {', 'if (ObjectHelper.isNotEmpty(config.getInstanceName())) {', 'hzInstance = Hazelcast.getOrCreateHazelcastInstance(config);', '} else {', 'hzInstance = Hazelcast.newHazelcastInstance(config);', '}', '}', 'if (hzInstance != null) {', 'if (this.customHazelcastInstances.add(hzInstance)) {']
['add managed hz instance ', ['hzinstance', 'getname']]
camel sample_9542

['if (hazelcastInstance == null && config == null) {', 'config = new XmlClientConfigBuilder().build();', 'config.getProperties().setProperty("hazelcast.version.check.enabled", "false");', 'config.getProperties().setProperty("hazelcast.phone.home.enabled", "false");', 'hzInstance = HazelcastClient.newHazelcastClient(config);', '} else if (config != null) {', 'hzInstance = HazelcastClient.newHazelcastClient(config);', '}', 'if (hzInstance != null) {', 'if (this.customHazelcastInstances.add(hzInstance)) {']
['add managed hz instance ', ['hzinstance', 'getname']]
camel sample_9542

['public TagConsumer(GitHubEndpoint endpoint, Processor processor) throws Exception {', 'super(endpoint, processor);']
['github tagconsumer indexing current tags ', []]
camel sample_14271

['protected void initChannel(Channel ch) throws Exception {', 'ChannelPipeline channelPipeline = ch.pipeline();', 'SslHandler sslHandler = configureClientSSLOnDemand();', 'if (sslHandler != null) {']
['client ssl handler configured and added to the channelpipeline ', ['sslhandler']]
camel sample_10232

['List<ChannelHandler> encoders = producer.getConfiguration().getEncoders();', 'for (int x = 0; x < encoders.size(); x++) {', 'ChannelHandler encoder = encoders.get(x);', 'if (encoder instanceof ChannelHandlerFactory) {', 'encoder = ((ChannelHandlerFactory) encoder).newChannelHandler();', '}', 'addToPipeline("encoder-" + x, channelPipeline, encoder);', '}', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {']
['using request timeout millis ', ['producer', 'getconfiguration', 'getrequesttimeout']]
camel sample_10232

['}', 'addToPipeline("encoder-" + x, channelPipeline, encoder);', '}', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {', '}', 'ChannelHandler timeout = new ReadTimeoutHandler(producer.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);', 'addToPipeline("timeout", channelPipeline, timeout);', '}', 'addToPipeline("handler", channelPipeline, new ClientChannelHandler(producer));']
['created channelpipeline ', ['channelpipeline']]
camel sample_10232

['private SSLContext createSSLContext(NettyProducer producer) throws Exception {', 'NettyConfiguration configuration = producer.getConfiguration();', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_10232

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_10232

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_10232

['private OutputStream resolveStreamFromUrl() throws IOException {', 'String u = endpoint.getUrl();', 'ObjectHelper.notEmpty(u, "url");']
['about to write to url ', ['u']]
camel sample_11970

['private OutputStream resolveStreamFromFile() throws IOException {', 'String fileName = endpoint.getFileName();', 'ObjectHelper.notEmpty(fileName, "fileName");']
['about to write to file ', ['filename']]
camel sample_11970

['private void delay(long ms) throws InterruptedException {', 'if (ms == 0) {', 'return;', '}']
['delaying millis ', ['ms']]
camel sample_11970

['private void writeToStream(OutputStream outputStream, Exchange exchange) throws IOException, CamelExchangeException {', 'Object body = exchange.getIn().getBody();', 'if (body == null) {']
['body is null cannot write it to the stream ', []]
camel sample_11970

['private void writeToStream(OutputStream outputStream, Exchange exchange) throws IOException, CamelExchangeException {', 'Object body = exchange.getIn().getBody();', 'if (body == null) {', 'return;', '}', 'if (!(body instanceof String)) {', 'byte[] bytes = exchange.getIn().getBody(byte[].class);', 'if (bytes != null) {']
['writing as byte to ', ['bytes', 'outputstream']]
camel sample_11970

['if (bytes != null) {', 'outputStream.write(bytes);', 'return;', '}', '}', 'String s = exchange.getIn().getMandatoryBody(String.class);', 'Charset charset = endpoint.getCharset();', 'Writer writer = new OutputStreamWriter(outputStream, charset);', 'BufferedWriter bw = IOHelper.buffered(writer);', 'if (LOG.isDebugEnabled()) {']
['writing as text to using encoding ', ['new', 'object', 'body', 'outputstream', 'charset']]
camel sample_11970

['if ("out".equals(uri)) {', 'outputStream = System.out;', '} else if ("err".equals(uri)) {', 'outputStream = System.err;', '} else if ("file".equals(uri)) {', 'outputStream = resolveStreamFromFile();', '} else if ("url".equals(uri)) {', 'outputStream = resolveStreamFromUrl();', '}', 'count.set(outputStream == null ? 0 : endpoint.getAutoCloseCount());']
['opened stream ', ['endpoint', 'getendpointkey']]
camel sample_11970

['private void openStream(final Exchange exchange) throws Exception {', 'if (outputStream != null) {', 'return;', '}', 'if ("header".equals(uri)) {', 'outputStream = resolveStreamFromHeader(exchange.getIn().getHeader("stream"), exchange);']
['opened stream ', ['endpoint', 'getendpointkey']]
camel sample_11970

['return;', '}', 'boolean systemStream = outputStream == System.out || outputStream == System.err;', 'boolean headerStream = "header".equals(uri);', 'boolean reachedLimit = endpoint.getAutoCloseCount() > 0 && count.decrementAndGet() <= 0;', 'boolean isDone = endpoint.isCloseOnDone() && isDone(exchange);', 'boolean expiredStream = force || headerStream || isDone || reachedLimit;', 'if (!systemStream && expiredStream) {', 'outputStream.close();', 'outputStream = null;']
['closed stream ', ['endpoint', 'getendpointkey']]
camel sample_11970

['public void done(boolean doneSync) {', 'try {', 'NettyHttpMessage nettyMessage = exchange.hasOut() ? exchange.getOut(NettyHttpMessage.class) : exchange.getIn(NettyHttpMessage.class);', 'if (nettyMessage != null) {', 'HttpResponse response = nettyMessage.getHttpResponse();', 'if (response != null) {', 'String actualUrl = exchange.getIn().getHeader(Exchange.HTTP_URL, String.class);', 'int code = response.getStatus() != null ? response.getStatus().getCode() : -1;']
['http responsecode ', ['code']]
camel sample_8353

['public void run() {', 'try {']
['waiting for request ', []]
camel sample_7049

['public void run() {', 'try {', 'Exchange request = consumer.receive("jms:queue:foo", 5000);']
['got request sending reply ', []]
camel sample_7049

['public static void assertInMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getIn().getMandatoryBody();', 'assertEquals("in body of: " + exchange, expected, actual);', '} else {', 'actual = exchange.getIn().getMandatoryBody(expected.getClass());', '}', 'assertEquals("in body of: " + exchange, expected, actual);']
['received response with in ', ['exchange', 'exchange', 'getin']]
camel sample_1467

['public static void assertOutMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull("Should have a response exchange!", exchange);', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getOut().getMandatoryBody();', 'assertEquals("output body of: " + exchange, expected, actual);', '} else {', 'actual = exchange.getOut().getMandatoryBody(expected.getClass());', '}', 'assertEquals("output body of: " + exchange, expected, actual);']
['received response with out ', ['exchange', 'exchange', 'getout']]
camel sample_1467

['public static Object assertExpression(Expression expression, Exchange exchange, Object expected) {', 'Object value;', 'if (expected != null) {', 'value = expression.evaluate(exchange, expected.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_1467

['public static void assertPredicateDoesNotMatch(Predicate predicate, Exchange exchange) {', 'try {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate should match: ", exchange);', '} catch (AssertionError e) {']
['caught expected assertion error ', ['e']]
camel sample_1467

['public static boolean assertPredicate(final Predicate predicate, Exchange exchange, boolean expected) {', 'if (expected) {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate failed: ", exchange);', '}', 'boolean value = predicate.matches(exchange);']
['evaluated predicate on exchange result ', ['predicate', 'exchange', 'value']]
camel sample_1467

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atom.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atom.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1037

['public static ByteBuffer toByteBuffer(String value, Exchange exchange) {', 'byte[] bytes = null;', 'if (exchange != null) {', 'String charsetName = exchange.getProperty(Exchange.CHARSET_NAME, String.class);', 'if (charsetName != null) {', 'try {', 'bytes = value.getBytes(charsetName);', '} catch (UnsupportedEncodingException e) {']
['cannot convert the byte to string with the charset ', ['charsetname', 'e']]
camel sample_4235

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DataSetComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dataset.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dataset.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_853

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<CsvDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.csv.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.csv.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_783

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'String cacheKey = extractCacheKeyFromUri(uri);', 'if (endpointCache.containsKey(cacheKey)) {']
['using cached endpoint for uri ', ['urisupport', 'sanitizeuri', 'uri']]
camel sample_12599

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'String cacheKey = extractCacheKeyFromUri(uri);', 'if (endpointCache.containsKey(cacheKey)) {', 'return endpointCache.get(cacheKey);', '}']
['creating new endpoint for uri ', ['urisupport', 'sanitizeuri', 'uri']]
camel sample_12599

['public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {', 'if (!isStarted()) {', 'throw new IllegalStateException("The endpoint is not active: " + getEndpoint().getEndpointUri());', '}', 'BeanInvocation invocation = new BeanInvocation(method, args);', 'Exchange exchange = getEndpoint().createExchange();', 'exchange.getIn().setBody(invocation);', 'try {']
['invoking with args ', ['method', 'args']]
camel sample_9391

['public void testChoiceSimple() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice-simple");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6434

['public void testChoiceExpression() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice-expression");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6434

['public void testFilterSimple() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter-simple");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6434

['public void testFilterExpression() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter-expression");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6434

['public LdapProducer(LdapEndpoint endpoint, String remaining, String base, int scope, Integer pageSize, String returnedAttributes) throws Exception {', 'super(endpoint);', 'this.remaining = remaining;', 'this.searchBase = base;', 'this.pageSize = pageSize;', 'this.searchControls = new SearchControls();', 'this.searchControls.setSearchScope(scope);', 'if (returnedAttributes != null) {', 'String returnedAtts[] = returnedAttributes.split(",");', 'if (log.isDebugEnabled()) {']
['setting returning attributes to searchcontrols ', ['arrays', 'tostring', 'returnedatts']]
camel sample_12126

['private List<SearchResult> pagedSearch(LdapContext ldapContext, String searchFilter) throws Exception {', 'List<SearchResult> data = new ArrayList<SearchResult>();', 'log.trace("Using paged ldap search, pageSize={}", pageSize);', 'Control[] requestControls = new Control[]{new PagedResultsControl(pageSize, Control.CRITICAL)};', 'ldapContext.setRequestControls(requestControls);', 'do {', 'List<SearchResult> pageResult = simpleSearch(ldapContext, searchFilter);', 'data.addAll(pageResult);']
['page returned entries ', ['pageresult', 'size']]
camel sample_12126

['private List<SearchResult> pagedSearch(LdapContext ldapContext, String searchFilter) throws Exception {', 'List<SearchResult> data = new ArrayList<SearchResult>();', 'log.trace("Using paged ldap search, pageSize={}", pageSize);', 'Control[] requestControls = new Control[]{new PagedResultsControl(pageSize, Control.CRITICAL)};', 'ldapContext.setRequestControls(requestControls);', 'do {', 'List<SearchResult> pageResult = simpleSearch(ldapContext, searchFilter);', 'data.addAll(pageResult);', '} while (prepareNextPage(ldapContext));', 'if (log.isDebugEnabled()) {']
['found a total of entries for ldap filter ', ['data', 'size', 'searchfilter']]
camel sample_12126

['public void handleResult(XmlRpcRequest pRequest, Object pResult) {']
['get the response ', ['presult']]
camel sample_17324

['public void handleError(XmlRpcRequest pRequest, Throwable pError) {']
['get the error ', ['perror']]
camel sample_17324

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("master:zk:timer:master?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_12608

['public void execute() {', 'BatchPutAttributesRequest request = new BatchPutAttributesRequest() .withDomainName(determineDomainName()) .withItems(determineReplaceableItems());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8754

['public void execute() {', 'BatchPutAttributesRequest request = new BatchPutAttributesRequest() .withDomainName(determineDomainName()) .withItems(determineReplaceableItems());', 'this.sdbClient.batchPutAttributes(request);']
['request sent ', []]
camel sample_8754

['xcode = readNext();', 'switch (xcode) {', 'case XMLStreamConstants.START_ELEMENT: depth++;', 'QName name = reader.getName();', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("se={}; depth={}; trackdepth={}", new Object[]{name, depth, trackdepth});', '}', 'String token = getCurrentText();', 'if (!compliant) {', 'if (token != null && token.startsWith("<") && !token.startsWith("<?")) {']
['xmlstreamreader not supporting location ', []]
camel sample_5166

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DdbStreamComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ddbstream.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ddbstream.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1125

['public void startThriftClient() throws IOException, TTransportException {', 'if (transport == null) {']
['connecting to the thrift server on port ', ['thrift', 'test', 'port']]
camel sample_13019

['public void stopThriftClient() throws Exception {', 'if (transport != null) {', 'transport.close();', 'transport = null;']
['connection to the thrift server closed ', []]
camel sample_13019

['public void testCalculateMethodInvocation() throws Exception {', 'CountDownLatch latch = new CountDownLatch(1);', 'Work work = new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY);', 'thriftClient.calculate(1, work, new AsyncMethodCallback<Integer>() {', 'public void onComplete(Integer response) {', 'calculateResult = response;', 'latch.countDown();', '}', 'public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13019

['public void testVoidMethodInvocation() throws Exception {', 'CountDownLatch latch = new CountDownLatch(1);', 'thriftClient.ping(new AsyncMethodCallback<Void>() {', 'public void onComplete(Void response) {', 'pingResult = 0;', 'latch.countDown();', '}', 'public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13019

['public void testOneWayMethodInvocation() throws Exception {', 'CountDownLatch latch = new CountDownLatch(1);', 'thriftClient.zip(new AsyncMethodCallback<Void>() {', 'public void onComplete(Void response) {', 'zipResult = 0;', 'latch.countDown();', '}', 'public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13019

['public void testAllTypesMethodInvocation() throws Exception {']
['thrift method with all possile types async test start ', []]
camel sample_13019

['public void testAllTypesMethodInvocation() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'thriftClient.alltypes(true, (byte)THRIFT_TEST_NUM1, (short)THRIFT_TEST_NUM1, (int)THRIFT_TEST_NUM1, (long)THRIFT_TEST_NUM1, (double)THRIFT_TEST_NUM1, "empty", ByteBuffer.allocate(10), new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY), new ArrayList<Integer>(), new HashSet<String>(), new HashMap<String, Long>(), new AsyncMethodCallback<Integer>() {', 'public void onComplete(Integer response) {', 'allTypesResult = response;', 'latch.countDown();', '}', 'public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13019

['public void testEchoMethodInvocation() throws Exception {', 'CountDownLatch latch = new CountDownLatch(1);', 'Work work = new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY);', 'thriftClient.echo(work, new AsyncMethodCallback<Work>() {', 'public void onComplete(Work response) {', 'echoResult = response;', 'latch.countDown();', '}', 'public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13019

['try {', 'if (localMember.isLeader()) {', 'LOGGER.trace("Holding the lock on file {} (lock={})", path, lock);', 'return;', '}', 'synchronized (FileLockClusterView.this) {', 'if (lock != null) {', 'LOGGER.info("Lock on file {} lost (lock={})", path, lock);', 'fireLeadershipChangedEvent(Optional.empty());', '}']
['try to acquire a lock on ', ['path']]
camel sample_4777

['if (lock != null) {', 'LOGGER.info("Lock on file {} lost (lock={})", path, lock);', 'fireLeadershipChangedEvent(Optional.empty());', '}', 'lock = null;', 'lock = channel.tryLock();', 'if (lock != null) {', 'LOGGER.info("Lock on file {} acquired (lock={})", path, lock);', 'fireLeadershipChangedEvent(Optional.of(localMember));', '} else {']
['lock on file not acquired ', ['path']]
camel sample_4777

['}', 'lock = null;', 'lock = channel.tryLock();', 'if (lock != null) {', 'LOGGER.info("Lock on file {} acquired (lock={})", path, lock);', 'fireLeadershipChangedEvent(Optional.of(localMember));', '} else {', '}', '}', '} catch (OverlappingFileLockException e) {']
['lock on file not acquired ', ['path']]
camel sample_4777

['public FileConsumer createConsumer(Processor processor) throws Exception {', 'ObjectHelper.notNull(operations, "operations");', 'ObjectHelper.notNull(file, "file");', 'if (!file.exists() && !file.isDirectory()) {', 'if (isAutoCreate()) {']
['creating non existing starting directory ', ['file']]
camel sample_4798

['public FileConsumer createConsumer(Processor processor) throws Exception {', 'ObjectHelper.notNull(operations, "operations");', 'ObjectHelper.notNull(file, "file");', 'if (!file.exists() && !file.isDirectory()) {', 'if (isAutoCreate()) {', 'boolean absolute = FileUtil.isAbsolute(file);', 'boolean created = operations.buildDirectory(file.getPath(), absolute);', 'if (!created) {']
['cannot auto create starting directory ', ['file']]
camel sample_4798

['}', 'FileConsumer result = newFileConsumer(processor, operations);', 'if (isDelete() && getMove() != null) {', 'throw new IllegalArgumentException("You cannot set both delete=true and move options");', '}', 'if (isNoop() && !isIdempotentSet()) {', 'log.info("Endpoint is configured with noop=true so forcing endpoint to be idempotent as well");', 'setIdempotent(true);', '}', 'if (isIdempotentSet() && isIdempotent() && idempotentRepository == null) {']
['using default memory based idempotent repository with cache max size ', ['default', 'idempotent', 'cache', 'size']]
camel sample_4798

['public PollingConsumer createPollingConsumer() throws Exception {', 'ObjectHelper.notNull(operations, "operations");', 'ObjectHelper.notNull(file, "file");', 'if (log.isDebugEnabled()) {']
['creating genericfilepollingconsumer with queuesize blockwhenfull blocktimeout ', ['getpollingconsumerqueuesize', 'ispollingconsumerblockwhenfull', 'getpollingconsumerblocktimeout']]
camel sample_4798

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CMComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cm-sms.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cm-sms.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1060

['private Object unmarshal(CMSEnvelopedDataParser parser, Exchange exchange) throws Exception {']
['decrypting cms enveloped data started ', []]
camel sample_11531

['}', 'Object result;', 'try {', 'result = transformToStreamCacheOrByteArray(exchange, is);', '} finally {', 'IOHelper.close(is);', '}', 'if (LOG.isDebugEnabled()) {', 'AttributeTable unprotectedAttsTable = parser.getUnprotectedAttributes();', 'if (unprotectedAttsTable != null) {']
['unprotected attributes size ', ['unprotectedattstable', 'size']]
camel sample_11531

['try {', 'result = transformToStreamCacheOrByteArray(exchange, is);', '} finally {', 'IOHelper.close(is);', '}', 'if (LOG.isDebugEnabled()) {', 'AttributeTable unprotectedAttsTable = parser.getUnprotectedAttributes();', 'if (unprotectedAttsTable != null) {', 'Hashtable<String, Attribute> unprotectedAtts = unprotectedAttsTable.toHashtable();', 'if (unprotectedAtts != null) {']
['unprotected attributes ', ['attributestostring', 'unprotectedatts']]
camel sample_11531

['private Object transformToStreamCacheOrByteArray(Exchange exchange, InputStream is) throws CryptoCmsException {', 'OutputStreamBuilder output = OutputStreamBuilder.withExchange(exchange);', 'try {', 'if (is != null) {', 'try {', 'IOHelper.copy(is, output);', '} finally {', 'IOHelper.close(is);', '}', '}']
['cms enveloped data decryption successful ', []]
camel sample_11531

['public List<String> getSignatureList() throws MojoExecutionException {', 'Map<String, String> result = new HashMap<String, String>();', 'final Pattern packagePatterns = Pattern.compile(excludePackages);', 'final Pattern classPatterns = (excludeClasses != null) ? Pattern.compile(excludeClasses) : null;', 'final Pattern includeMethodPatterns = (includeMethods != null) ? Pattern.compile(includeMethods) : null;', 'final Pattern excludeMethodPatterns = (excludeMethods != null) ? Pattern.compile(excludeMethods) : null;', 'for (Class<?> aClass = getProxyType();', 'aClass != null && !packagePatterns.matcher(aClass.getPackage().getName()).matches() && (classPatterns == null || !classPatterns.matcher(aClass.getSimpleName()).matches());', 'aClass = aClass.getSuperclass()) {']
['processing ', ['aclass', 'getname']]
camel sample_107

['final Pattern includeMethodPatterns = (includeMethods != null) ? Pattern.compile(includeMethods) : null;', 'final Pattern excludeMethodPatterns = (excludeMethods != null) ? Pattern.compile(excludeMethods) : null;', 'for (Class<?> aClass = getProxyType();', 'aClass != null && !packagePatterns.matcher(aClass.getPackage().getName()).matches() && (classPatterns == null || !classPatterns.matcher(aClass.getSimpleName()).matches());', 'aClass = aClass.getSuperclass()) {', 'final String javaDocPath = aClass.getName().replaceAll("\\\\.", "/").replace(\'$\', \'.\') + ".html";', 'InputStream inputStream = null;', 'try {', 'inputStream = getProjectClassLoader().getResourceAsStream(javaDocPath);', 'if (inputStream == null) {']
['javadoc not found on classpath for ', ['aclass', 'getname']]
camel sample_107

['protected void doStop() throws Exception {', 'super.doStop();', 'if (atomix != null) {']
['shutdown atomix client ', ['atomix']]
camel sample_10320

['private AtomixClient getOrCreateClient() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'if (ObjectHelper.isEmpty(configuration.getNodes())) {', 'throw new IllegalArgumentException("Atomix nodes should not be empty");', '}', 'atomix = AtomixClientHelper.createClient(getCamelContext(), configuration);']
['connect to cluster nodes ', ['configuration', 'getnodes']]
camel sample_10320

['private AtomixClient getOrCreateClient() throws Exception {', 'if (atomix == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(configuration, "Atomix Node Configuration");', 'if (ObjectHelper.isEmpty(configuration.getNodes())) {', 'throw new IllegalArgumentException("Atomix nodes should not be empty");', '}', 'atomix = AtomixClientHelper.createClient(getCamelContext(), configuration);', 'atomix.connect(configuration.getNodes()).join();']
['connect to cluster done ', []]
camel sample_10320

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesConfigMapsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-config-maps.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-config-maps.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_557

['public void process(Exchange exchange) throws Exception {']
['start of onexchange ', ['exchange']]
camel sample_3724

['public void process(Exchange exchange) throws Exception {', 'super.process(exchange);']
['end of onexchange ', ['exchange']]
camel sample_3724

['}', 'if (allowProcessor(explicitMethodName, beanInfo)) {', 'processor = getProcessor();', 'if (processor == null && !lookupProcessorDone) {', 'synchronized (lock) {', 'lookupProcessorDone = true;', 'processor = exchange.getContext().getTypeConverter().tryConvertTo(Processor.class, exchange, bean);', '}', '}', 'if (processor != null) {']
['using a custom adapter as bean invocation ', ['processor']]
camel sample_4848

['callback.done(true);', 'return true;', '}', '}', 'Message in = exchange.getIn();', 'BeanInvocation beanInvoke = null;', 'if (in.getBody() instanceof BeanInvocation) {', 'beanInvoke = (BeanInvocation) in.getBody();', '}', 'if (beanInvoke != null) {']
['exchange in body is a beaninvocation instance ', ['beaninvoke']]
camel sample_4848

['}', 'Message in = exchange.getIn();', 'BeanInvocation beanInvoke = null;', 'if (in.getBody() instanceof BeanInvocation) {', 'beanInvoke = (BeanInvocation) in.getBody();', '}', 'if (beanInvoke != null) {', 'Class<?> clazz = beanInvoke.getMethod().getDeclaringClass();', 'boolean sameBean = clazz.isInstance(bean);', 'if (LOG.isDebugEnabled()) {']
['beanholder bean and beaninvocation bean is same instance ', ['new', 'object', 'bean', 'getclass', 'clazz', 'samebean']]
camel sample_4848

['protected final void parseUri() throws IllegalArgumentException {']
['uri ', ['uri']]
camel sample_12464

['protected final void parseUri() throws IllegalArgumentException {', 'if (uri.matches(FORMAT1)) {']
['FORMAT1 ', []]
camel sample_12464

['protected final void parseUri() throws IllegalArgumentException {', 'if (uri.matches(FORMAT1)) {', 'String[] parts = uri.replaceFirst(FORMAT1, "$1:$2:$3:$4").split(":");', 'host = parts[0];', 'port = Integer.parseInt(parts[1]);', 'database = parts[2];', 'channel = parts[3];', '} else if (uri.matches(FORMAT2)) {']
['FORMAT2 ', []]
camel sample_12464

['port = Integer.parseInt(parts[1]);', 'database = parts[2];', 'channel = parts[3];', '} else if (uri.matches(FORMAT2)) {', 'String[] parts = uri.replaceFirst(FORMAT2, "$1:$2:$3").split(":");', 'host = parts[0];', 'port = 5432;', 'database = parts[1];', 'channel = parts[2];', '} else if (uri.matches(FORMAT3)) {']
['FORMAT3 ', []]
camel sample_12464

['port = 5432;', 'database = parts[1];', 'channel = parts[2];', '} else if (uri.matches(FORMAT3)) {', 'String[] parts = uri.replaceFirst(FORMAT3, "$1:$2").split(":");', 'host = "localhost";', 'port = 5432;', 'database = parts[0];', 'channel = parts[1];', '} else if (uri.matches(FORMAT4)) {']
['FORMAT4 ', []]
camel sample_12464

['private void validateInputs() throws InvalidClassException, IllegalArgumentException {', 'if (getChannel() == null || getChannel().length() == 0) {', 'throw new IllegalArgumentException("A required parameter was not set when creating this Endpoint (channel)");', '}', 'if (datasource != null) {']
['datasource detected ', []]
camel sample_12464

['public void create() throws Exception {', 'JdbcTemplate jdbc = new JdbcTemplate(dataSource);', 'String sql = "create table orders (\\n" + "  id integer primary key,\\n" + "  item varchar(10),\\n" + "  amount varchar(5),\\n" + "  description varchar(30),\\n" + "  processed boolean\\n" + ")";']
['creating table orders ', []]
camel sample_17666

['public void create() throws Exception {', 'JdbcTemplate jdbc = new JdbcTemplate(dataSource);', 'String sql = "create table orders (\\n" + "  id integer primary key,\\n" + "  item varchar(10),\\n" + "  amount varchar(5),\\n" + "  description varchar(30),\\n" + "  processed boolean\\n" + ")";', 'try {', 'jdbc.execute("drop table orders");', '} catch (Throwable e) {', '}', 'jdbc.execute(sql);']
['created table orders ', []]
camel sample_17666

['public void warning(SAXParseException exception) throws SAXException {']
['warning occured during parsing ', ['exception']]
camel sample_7272

['private void getDroplet(Exchange exchange) throws Exception {', 'Droplet droplet = getEndpoint().getDigitalOceanClient().getDropletInfo(dropletId);']
['droplet ', ['droplet']]
camel sample_8885

['private void getDroplets(Exchange exchange) throws Exception {', 'Droplets droplets = getEndpoint().getDigitalOceanClient().getAvailableDroplets(configuration.getPage(), configuration.getPerPage());']
['all droplets page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'droplets', 'getdroplets']]
camel sample_8885

['private void getDropletActions(Exchange exchange) throws Exception {', 'Actions actions = getEndpoint().getDigitalOceanClient().getAvailableDropletActions(dropletId, configuration.getPage(), configuration.getPerPage());']
['actions for droplet page per page ', ['dropletid', 'configuration', 'getpage', 'configuration', 'getperpage', 'actions', 'getactions']]
camel sample_8885

['private void getDropletKernels(Exchange exchange) throws Exception {', 'Kernels kernels = getEndpoint().getDigitalOceanClient().getDropletKernels(dropletId, configuration.getPage(), configuration.getPerPage());']
['kernels for droplet page per page ', ['dropletid', 'configuration', 'getpage', 'configuration', 'getperpage', 'kernels', 'getkernels']]
camel sample_8885

['private void getDropletBackups(Exchange exchange) throws Exception {', 'Backups backups = getEndpoint().getDigitalOceanClient().getDropletBackups(dropletId, configuration.getPage(), configuration.getPerPage());']
['backups for droplet page per page ', ['dropletid', 'configuration', 'getpage', 'configuration', 'getperpage', 'backups', 'getbackups']]
camel sample_8885

['private void getDropletSnapshots(Exchange exchange) throws Exception {', 'Snapshots snapshots = getEndpoint().getDigitalOceanClient().getDropletSnapshots(dropletId, configuration.getPage(), configuration.getPerPage());']
['snapshots for droplet page per page ', ['dropletid', 'configuration', 'getpage', 'configuration', 'getperpage', 'snapshots', 'getsnapshots']]
camel sample_8885

['private void getDropletNeighbors(Exchange exchange) throws Exception {', 'Droplets droplets = getEndpoint().getDigitalOceanClient().getDropletNeighbors(dropletId, configuration.getPage());']
['neighbors for droplet page ', ['dropletid', 'configuration', 'getpage', 'droplets', 'getdroplets']]
camel sample_8885

['private void getAllDropletNeighbors(Exchange exchange) throws Exception {', 'Neighbors neighbors = getEndpoint().getDigitalOceanClient().getAllDropletNeighbors(configuration.getPage());']
['all neighbors page ', ['configuration', 'getpage', 'neighbors', 'getneighbors']]
camel sample_8885

['private void deleteDroplet(Exchange exchange) throws Exception {', 'Delete delete = getEndpoint().getDigitalOceanClient().deleteDroplet(dropletId);']
['delete droplet ', ['delete']]
camel sample_8885

['}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_VOLUMES))) {', 'droplet.setVolumeIds((List<String>) exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_VOLUMES));', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_TAGS))) {', 'droplet.setTags((List<String>) exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_TAGS));', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAMES))) {', 'droplet.setNames((List<String>) in.getHeader(DigitalOceanHeaders.NAMES));', 'Droplets droplets = getEndpoint().getDigitalOceanClient().createDroplets(droplet);']
['droplets created ', ['droplets']]
camel sample_8885

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_TAGS))) {', 'droplet.setTags((List<String>) exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_TAGS));', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAMES))) {', 'droplet.setNames((List<String>) in.getHeader(DigitalOceanHeaders.NAMES));', 'Droplets droplets = getEndpoint().getDigitalOceanClient().createDroplets(droplet);', 'exchange.getOut().setBody(droplets.getDroplets());', '} else if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {', 'droplet.setName(in.getHeader(DigitalOceanHeaders.NAME, String.class));', 'droplet = getEndpoint().getDigitalOceanClient().createDroplet(droplet);']
['droplet created ', ['droplet']]
camel sample_8885

['private void restoreDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.IMAGE_ID))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.IMAGE_ID + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().restoreDroplet(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.IMAGE_ID, Integer.class));']
['dropletaction restore ', ['action']]
camel sample_8885

['private void resizeDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_SIZE))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_SIZE + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().resizeDroplet(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_SIZE, String.class));']
['dropletaction resize ', ['action']]
camel sample_8885

['private void rebuildDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.IMAGE_ID))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.IMAGE_ID + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().rebuildDroplet(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.IMAGE_ID, Integer.class));']
['rebuild droplet ', ['dropletid', 'action']]
camel sample_8885

['private void renameDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().renameDroplet(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class));']
['rename droplet ', ['dropletid', 'action']]
camel sample_8885

['private void changeDropletKernel(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.KERNEL_ID))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.KERNEL_ID + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().changeDropletKernel(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.KERNEL_ID, Integer.class));']
['rename droplet ', ['dropletid', 'action']]
camel sample_8885

['private void resetDropletPassword(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().resetDropletPassword(dropletId);']
['reset password droplet ', ['dropletid', 'action']]
camel sample_8885

['private void powerOnDroplet(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().powerOnDroplet(dropletId);']
['power on droplet ', ['dropletid', 'action']]
camel sample_8885

['private void powerOffDroplet(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().powerOffDroplet(dropletId);']
['power off droplet ', ['dropletid', 'action']]
camel sample_8885

['private void shutdownDroplet(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().shutdownDroplet(dropletId);']
['shutdown droplet ', ['dropletid', 'action']]
camel sample_8885

['private void powerCycleDroplet(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().powerCycleDroplet(dropletId);']
['power cycle droplet ', ['dropletid', 'action']]
camel sample_8885

['private void enableDropletBackups(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().enableDropletBackups(dropletId);']
['enable backups droplet ', ['dropletid', 'action']]
camel sample_8885

['private void disableDropletBackups(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().disableDropletBackups(dropletId);']
['disable backups for droplet ', ['dropletid', 'action']]
camel sample_8885

['private void enableDropletIpv6(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().enableDropletIpv6(dropletId);']
['enable ip for droplet ', ['dropletid', 'action']]
camel sample_8885

['private void enableDropletPrivateNetworking(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().enableDropletPrivateNetworking(dropletId);']
['enable private networking for droplet ', ['dropletid', 'action']]
camel sample_8885

['private void rebootDroplet(Exchange exchange) throws Exception {', 'Action action = getEndpoint().getDigitalOceanClient().rebootDroplet(dropletId);']
['reboot droplet ', ['dropletid', 'action']]
camel sample_8885

['private void takeDropletSnapshot(Exchange exchange) throws Exception {', 'Action action;', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {', 'action = getEndpoint().getDigitalOceanClient().takeDropletSnapshot(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class));', '} else {', 'action = getEndpoint().getDigitalOceanClient().takeDropletSnapshot(dropletId);', '}']
['take snapshot for droplet ', ['dropletid', 'action']]
camel sample_8885

['private void tagDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'ArrayList<Resource> resources = new ArrayList<>(1);', 'resources.add(new Resource(dropletId.toString(), ResourceType.DROPLET));', 'Response response = getEndpoint().getDigitalOceanClient().tagResources(dropletId.toString(), resources);']
['tag droplet ', ['dropletid', 'response']]
camel sample_8885

['private void untagDroplet(Exchange exchange) throws Exception {', 'if (ObjectHelper.isEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'ArrayList<Resource> resources = new ArrayList<>(1);', 'resources.add(new Resource(dropletId.toString(), ResourceType.DROPLET));', 'Response response = getEndpoint().getDigitalOceanClient().untagResources(dropletId.toString(), resources);']
['untag droplet ', ['dropletid', 'response']]
camel sample_8885

['protected int poll() throws Exception {', 'TelegramConfiguration config = endpoint.getConfiguration();', 'Long realOffset = offset != null ? offset : 0L;', 'TelegramService service = TelegramServiceProvider.get().getService();']
['polling telegram service to get updates ', []]
camel sample_11926

['TelegramService service = TelegramServiceProvider.get().getService();', 'UpdateResult updateResult = service.getUpdates(config.getAuthorizationToken(), offset, config.getLimit(), config.getTimeout());', 'if (updateResult.getUpdates() == null) {', 'updateResult.setUpdates(Collections.emptyList());', '}', 'if (!updateResult.isOk()) {', 'throw new IllegalStateException("The server was unable to process the request. Response was " + updateResult);', '}', 'List<Update> updates = updateResult.getUpdates();', 'if (updates.size() > 0) {']
['received updates from telegram service ', ['updates', 'size']]
camel sample_11926

['UpdateResult updateResult = service.getUpdates(config.getAuthorizationToken(), offset, config.getLimit(), config.getTimeout());', 'if (updateResult.getUpdates() == null) {', 'updateResult.setUpdates(Collections.emptyList());', '}', 'if (!updateResult.isOk()) {', 'throw new IllegalStateException("The server was unable to process the request. Response was " + updateResult);', '}', 'List<Update> updates = updateResult.getUpdates();', 'if (updates.size() > 0) {', '} else {']
['no updates received from telegram service ', []]
camel sample_11926

['private void processUpdates(List<Update> updates) throws Exception {', 'for (Update update : updates) {']
['received update from telegram service ', ['update']]
camel sample_11926

['private void updateOffset(List<Update> updates) {', 'OptionalLong ol = updates.stream().mapToLong(Update::getUpdateId).max();', 'if (ol.isPresent()) {', 'this.offset = ol.getAsLong() + 1;']
['next telegram offset will be ', ['this', 'offset']]
camel sample_11926

['public void execute() {', 'PutAttributesRequest request = new PutAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withAttributes(determineReplaceableAttributes()) .withExpected(determineUpdateCondition());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8755

['public void execute() {', 'PutAttributesRequest request = new PutAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withAttributes(determineReplaceableAttributes()) .withExpected(determineUpdateCondition());', 'this.sdbClient.putAttributes(request);']
['request sent ', []]
camel sample_8755

['TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters();', 'sslParams.setKeyStore(KEY_STORE_PATH, SECURITY_STORE_PASSWORD);', 'serverTransport = TSSLTransportFactory.getServerSocket(THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT, InetAddress.getByName("localhost"), sslParams);', 'ThriftThreadPoolServer.Args args = new ThriftThreadPoolServer.Args(serverTransport);', 'args.processor((TProcessor)processor);', 'args.executorService(this.context().getExecutorServiceManager().newThreadPool(this, "test-server-invoker", 1, 10));', 'args.startThreadPool(this.context().getExecutorServiceManager().newSingleThreadExecutor(this, "test-start-thread"));', 'args.context(this.context());', 'server = new ThriftThreadPoolServer(args);', 'server.serve();']
['thrift secured server started on port ', ['thrift', 'test', 'port']]
camel sample_13018

['public void stopThriftServer() throws IOException {', 'if (server != null) {', 'server.stop();', 'serverTransport.close();']
['thrift secured server stoped ', []]
camel sample_13018

['public boolean acceptPathName(String path) {', "path = path.replace(File.separatorChar, '/');"]
['filtering file ', ['path']]
camel sample_4776

['public boolean acceptPathName(String path) {', "path = path.replace(File.separatorChar, '/');", 'if (excludes != null) {', 'for (String exclude : excludes) {', 'if (matcher.match(exclude, path, caseSensitive)) {']
['file is excluded ', ['path']]
camel sample_4776

['if (excludes != null) {', 'for (String exclude : excludes) {', 'if (matcher.match(exclude, path, caseSensitive)) {', 'return false;', '}', '}', '}', 'if (includes != null) {', 'for (String include : includes) {', 'if (matcher.match(include, path, caseSensitive)) {']
['file is included ', ['path']]
camel sample_4776

['public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {', 'if (file.getFile() instanceof File) {', 'File f = (File) file.getFile();', 'if (f.exists()) {', 'String charset = file.getCharset();', 'if (charset != null) {']
['read file with charset ', ['f', 'file', 'getcharset']]
camel sample_4799

['public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {', 'if (file.getFile() instanceof File) {', 'File f = (File) file.getFile();', 'if (f.exists()) {', 'String charset = file.getCharset();', 'if (charset != null) {', '} else {']
['read file no charset ', ['f']]
camel sample_4799

['private static BufferedReader genericFileToReader(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {', 'if (file.getFile() instanceof File) {', 'File f = (File) file.getFile();', 'if (!f.exists()) {', 'return null;', '}', 'String charset = file.getCharset();', 'if (charset != null) {']
['read file with charset ', ['f', 'file', 'getcharset']]
camel sample_4799

['private static BufferedReader genericFileToReader(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {', 'if (file.getFile() instanceof File) {', 'File f = (File) file.getFile();', 'if (!f.exists()) {', 'return null;', '}', 'String charset = file.getCharset();', 'if (charset != null) {', 'return IOConverter.toReader(f, charset);', '} else {']
['read file no charset ', ['f']]
camel sample_4799

['getProducers().setMaxActive(getProducerCount());', 'getProducers().setMaxIdle(getProducerCount());', 'getProducers().setLifo(false);', 'if (getEndpoint().isPrefillPool()) {', 'if (getEndpoint().isAsyncStartListener()) {', 'asyncStart = getEndpoint().getComponent().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'fillProducersPool();', '} catch (Throwable e) {']
['error filling producer pool for destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_12432

['asyncStart.cancel(true);', '}', 'if (getProducers() != null) {', 'if (getEndpoint().isAsyncStopListener()) {', 'getEndpoint().getComponent().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'getProducers().close();', 'setProducers(null);', '} catch (Throwable e) {']
['error closing producers on destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_12432

['protected MessageProducerResources doCreateProducerModel(Session session) throws Exception {', 'MessageProducerResources answer;', 'try {', 'MessageProducer messageProducer = getEndpoint().getJmsObjectFactory().createMessageProducer(session, getEndpoint());', 'answer = new MessageProducerResources(session, messageProducer, getCommitStrategy());', '} catch (Exception e) {']
['unable to create the messageproducer ', ['e']]
camel sample_12432

['protected Session createSession() throws Exception {', 'ConnectionResource connectionResource = getOrCreateConnectionResource();', 'Connection conn = connectionResource.borrowConnection();', 'try {', 'return conn.createSession(isEndpointTransacted(), getAcknowledgeMode());', '} catch (Exception e) {']
['unable to create the session ', ['e']]
camel sample_12432

['public abstract void sendMessage(Exchange exchange, AsyncCallback callback, MessageProducerResources producer, ReleaseProducerCallback releaseProducerCallback) throws Exception;', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'if (log.isDebugEnabled()) {']
['processing exchange id ', ['exchange', 'getexchangeid']]
camel sample_12432

['releaseProducerCallback = new ReturnProducerCallback();', 'if (isEndpointTransacted()) {', 'exchange.getUnitOfWork().addSynchronization(new SessionTransactionSynchronization(producer.getSession(), producer.getCommitStrategy()));', '}', '}', 'if (producer == null) {', 'exchange.setException(new Exception("Unable to send message: connection not available"));', '} else {', 'if (!isSynchronous()) {', 'if (log.isDebugEnabled()) {']
['sending message asynchronously ', ['exchange', 'getin', 'getbody']]
camel sample_12432

['public void run() {', 'try {', 'sendMessage(exchange, callback, finalProducer, finalrpc);', '} catch (Exception e) {', 'ObjectHelper.wrapRuntimeCamelException(e);', '}', '}', '});', '} else {', 'if (log.isDebugEnabled()) {']
['sending message synchronously ', ['exchange', 'getin', 'getbody']]
camel sample_12432

['}', '});', '} else {', 'if (log.isDebugEnabled()) {', '}', 'sendMessage(exchange, callback, producer, releaseProducerCallback);', '}', '}', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {']
['processing exchange id failed ', ['exchange', 'getexchangeid']]
camel sample_12432

['} else {', 'if (log.isDebugEnabled()) {', '}', 'sendMessage(exchange, callback, producer, releaseProducerCallback);', '}', '}', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {', '}', 'if (log.isDebugEnabled()) {']
['exception ', ['e', 'getlocalizedmessage', 'e']]
camel sample_12432

['sendMessage(exchange, callback, producer, releaseProducerCallback);', '}', '}', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {', '}', 'if (log.isDebugEnabled()) {', '}', 'exchange.setException(e);', '}']
['processing exchange id success ', ['exchange', 'getexchangeid']]
camel sample_12432

['public XmppPubSubProducer(XmppEndpoint endpoint) {', 'super(endpoint);', 'this.endpoint = endpoint;']
['creating xmpppresenceproducer ', []]
camel sample_12598

['public void process(Exchange exchange) throws Exception {', 'try {', 'if (connection == null) {', 'connection = endpoint.createConnection();', '}', 'if (!connection.isConnected()) {', 'if (LOG.isDebugEnabled()) {']
['reconnecting to ', ['xmppendpoint', 'getconnectionmessage', 'connection']]
camel sample_12598

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<InfluxDbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.influxdb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.influxdb.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_628

['protected abstract String getUri();', 'protected abstract Logger getLogger();', 'public void testDailyTrend() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> tweets = mock.getExchanges();', 'for (Exchange e : tweets) {']
['tweet ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_14159

['public void testChoice() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:choice");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6435

['public void testFilter() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:filter");', 'execute(20000);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(count);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6435

['ProcessorDefinition<?> output = it.next();', 'if (matchBy.match(output)) {', 'List<ProcessorDefinition<?>> outputs = getOutputs(output);', 'if (outputs != null) {', 'int index = outputs.indexOf(output);', 'if (index != -1) {', 'match = true;', 'outputs.add(index + 1, replace);', 'Object old = outputs.remove(index);', 'replace.setParent(output.getParent());']
['advicewith replace ', ['matchby', 'getid', 'old', 'replace']]
camel sample_5649

['Iterator<ProcessorDefinition<?>> it = AdviceWithTasks.createMatchByIterator(route, matchBy, selectFirst, selectLast, selectFrom, selectTo, maxDeep);', 'while (it.hasNext()) {', 'ProcessorDefinition<?> output = it.next();', 'if (matchBy.match(output)) {', 'List<ProcessorDefinition<?>> outputs = getOutputs(output);', 'if (outputs != null) {', 'int index = outputs.indexOf(output);', 'if (index != -1) {', 'match = true;', 'Object old = outputs.remove(index);']
['advicewith remove ', ['matchby', 'getid', 'old']]
camel sample_5649

['ProcessorDefinition<?> output = it.next();', 'if (matchBy.match(output)) {', 'List<ProcessorDefinition<?>> outputs = getOutputs(output);', 'if (outputs != null) {', 'int index = outputs.indexOf(output);', 'if (index != -1) {', 'match = true;', 'Object existing = outputs.get(index);', 'outputs.add(index, before);', 'before.setParent(output.getParent());']
['advicewith before ', ['matchby', 'getid', 'existing', 'before']]
camel sample_5649

['ProcessorDefinition<?> output = it.next();', 'if (matchBy.match(output)) {', 'List<ProcessorDefinition<?>> outputs = getOutputs(output);', 'if (outputs != null) {', 'int index = outputs.indexOf(output);', 'if (index != -1) {', 'match = true;', 'Object existing = outputs.get(index);', 'outputs.add(index + 1, after);', 'after.setParent(output.getParent());']
['advicewith after ', ['matchby', 'getid', 'existing', 'after']]
camel sample_5649

['public static AdviceWithTask replaceFromWith(final RouteDefinition route, final String uri) {', 'return new AdviceWithTask() {', 'public void task() throws Exception {', 'FromDefinition from = route.getInputs().get(0);']
['advicewith replace input from ', ['from', 'geturiorref', 'uri']]
camel sample_5649

['public static AdviceWithTask replaceFrom(final RouteDefinition route, final Endpoint endpoint) {', 'return new AdviceWithTask() {', 'public void task() throws Exception {', 'FromDefinition from = route.getInputs().get(0);']
['advicewith replace input from ', ['from', 'geturiorref', 'endpoint', 'getendpointuri']]
camel sample_5649

['public void doSomething(String body, Exchange exchange) {', 'ObjectHelper.notNull(destination, "destination");', 'ObjectHelper.notNull(exchange, "exchange");', 'ObjectHelper.notNull(exchange.getContext(), "exchange.getContext");']
['received body ', ['body']]
camel sample_15748

['public void run() {']
['starting ', []]
camel sample_297

['swagger.setPrettyPrint(true);', 'swagger.setSupportSwaggerUi(true);', 'swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();']
['camelcatalog rest api started ', []]
camel sample_297

['swagger.setSupportSwaggerUi(true);', 'swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");']
['trest api base path http logger info ', ['trest', 'api', 'version', 'http', 'logger', 'info']]
camel sample_297

['swagger.setSupportSwaggerUi(true);', 'swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");']
['camelconnectorcatalog rest api started ', []]
camel sample_297

['swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");', 'LOGGER.info("");']
['trest api base path http logger info ', []]
camel sample_297

['swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");', 'LOGGER.info("");']
['tswagger doc http logger info ', ['tswagger', 'ui', 'http', 'logger', 'info']]
camel sample_297

['swagger.setTitle("Camel Catalog and Connector Catalog REST Api");', 'swagger.setDescription("REST Api for the Camel Catalog and Connector Catalog");', 'swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");', 'LOGGER.info("");']
['press enter to stop ', []]
camel sample_297

['swagger.setVersion(catalog.getCatalogVersion());', 'swagger.setContact("Apache Camel");', 'sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");', 'LOGGER.info("");', 'Console console = System.console();', 'console.readLine();']
['stopping ', []]
camel sample_297

['sf.getFeatures().add(swagger);', 'sf.setProvider(JacksonJsonProvider.class);', 'sf.setAddress("http: server = sf.create();', 'server.start();', 'LOGGER.info("");', 'LOGGER.info("");', 'Console console = System.console();', 'console.readLine();', 'server.stop();', 'server.destroy();']
['camelcatalog rest api stopped ', []]
camel sample_297

['public void testRouteboxDirectProducerOnlyRequests() throws Exception {', 'template = new DefaultProducerTemplate(context);', 'template.start();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();']
['beginning test testrouteboxdirectsyncrequests ', []]
camel sample_14620

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .to(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, "direct:start", "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, "direct:start", "findBook", "Sir Arthur Conan Doyle");']
['received book with author and title ', ['book', 'getauthor', 'book', 'gettitle']]
camel sample_14620

['public void configure() {', 'from("direct:start") .to(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, "direct:start", "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, "direct:start", "findBook", "Sir Arthur Conan Doyle");', 'assertEquals("The Adventures of Sherlock Holmes", book.getTitle());']
['completed test testrouteboxdirectsyncrequests ', []]
camel sample_14620

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteSetComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-set.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-set.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1173

['public Boolean executeTest(ITestConfig config, String component) throws Exception {']
['getting camel component ', ['component']]
camel sample_5999

['public Boolean executeTest(ITestConfig config, String component) throws Exception {', 'org.apache.camel.Component comp = context.getComponent(component, true, config.getAutoStartComponent());', 'assertNotNull("Cannot get module with name: " + component, comp);']
['found camel module instance with classname ', ['component', 'comp', 'comp', 'getclass']]
camel sample_5999

['public PullRequestConsumer(GitHubEndpoint endpoint, Processor processor) throws Exception {', 'super(endpoint, processor);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_PULL_REQUEST_SERVICE);', 'if (service != null) {']
['using pullrequestservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14270

['public PullRequestConsumer(GitHubEndpoint endpoint, Processor processor) throws Exception {', 'super(endpoint, processor);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_PULL_REQUEST_SERVICE);', 'if (service != null) {', 'pullRequestService = (PullRequestService) service;', '} else {', 'pullRequestService = new PullRequestService();', '}', 'initService(pullRequestService);']
['github pullrequestconsumer indexing current pull requests ', []]
camel sample_14270

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<WebsocketComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atmosphere-websocket.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atmosphere-websocket.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_444

['public HttpServerSharedPipelineFactory(NettySharedHttpServerBootstrapConfiguration configuration, HttpServerConsumerChannelFactory channelFactory, ClassResolver classResolver) {', 'this.configuration = configuration;', 'this.channelFactory = channelFactory;', 'this.classResolver = classResolver != null ? classResolver : new DefaultClassResolver();', 'try {', 'this.sslContext = createSSLContext();', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_8352

['public ChannelPipeline getPipeline() throws Exception {', 'ChannelPipeline pipeline = Channels.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_8352

['private SSLContext createSSLContext() throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_8352

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_8352

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext();', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_8352

['protected int poll() throws Exception {', 'Exchange exchange = super.getEndpoint().createExchange();', 'try {']
['retrieving a message ', []]
camel sample_9955

['StringBuilder regular = new StringBuilder();', 'regular.append("* Components\\n");', 'for (ComponentModel model : models) {', 'if (!model.getLabel().contains("core")) {', 'String line = "\\t* " + link(model) + "\\n";', 'regular.append(line);', '}', '}', 'updated |= updateComponents(file, regular.toString());', 'if (updated) {']
['updated user guide file ', ['file']]
camel sample_151

['regular.append("* Components\\n");', 'for (ComponentModel model : models) {', 'if (!model.getLabel().contains("core")) {', 'String line = "\\t* " + link(model) + "\\n";', 'regular.append(line);', '}', '}', 'updated |= updateComponents(file, regular.toString());', 'if (updated) {', '} else {']
['no changes to user guide file ', ['file']]
camel sample_151

['Collections.sort(models, new OtherComparator());', 'File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder other = new StringBuilder();', 'other.append("* Miscellaneous Components\\n");', 'for (OtherModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'other.append(line);', '}', 'boolean updated = updateOthers(file, other.toString());', 'if (updated) {']
['updated user guide file ', ['file']]
camel sample_151

['File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder other = new StringBuilder();', 'other.append("* Miscellaneous Components\\n");', 'for (OtherModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'other.append(line);', '}', 'boolean updated = updateOthers(file, other.toString());', 'if (updated) {', '} else {']
['no changes to user guide file ', ['file']]
camel sample_151

['Collections.sort(models, new DataFormatComparator());', 'File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder dataFormats = new StringBuilder();', 'dataFormats.append("* Data Formats\\n");', 'for (DataFormatModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'dataFormats.append(line);', '}', 'boolean updated = updateDataFormats(file, dataFormats.toString());', 'if (updated) {']
['updated user guide file ', ['file']]
camel sample_151

['File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder dataFormats = new StringBuilder();', 'dataFormats.append("* Data Formats\\n");', 'for (DataFormatModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'dataFormats.append(line);', '}', 'boolean updated = updateDataFormats(file, dataFormats.toString());', 'if (updated) {', '} else {']
['no changes to user guide file ', ['file']]
camel sample_151

['Collections.sort(models, new LanguageComparator());', 'File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder languages = new StringBuilder();', 'languages.append("* Expression Languages\\n");', 'for (LanguageModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'languages.append(line);', '}', 'boolean updated = updateLanguages(file, languages.toString());', 'if (updated) {']
['updated user guide file ', ['file']]
camel sample_151

['File file = new File(userGuideDir, "SUMMARY.md");', 'StringBuilder languages = new StringBuilder();', 'languages.append("* Expression Languages\\n");', 'for (LanguageModel model : models) {', 'String line = "\\t* " + link(model) + "\\n";', 'languages.append(line);', '}', 'boolean updated = updateLanguages(file, languages.toString());', 'if (updated) {', '} else {']
['no changes to user guide file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- core components: START -->");', 'String after = StringHelper.after(text, "<!-- core components: END -->");', 'text = before + "<!-- core components: START -->\\n" + changed + "\\n<!-- core components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- core components: START -->");', 'String after = StringHelper.after(text, "<!-- core components: END -->");', 'text = before + "<!-- core components: START -->\\n" + changed + "\\n<!-- core components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- core components: START -->");', 'String after = StringHelper.after(text, "<!-- core components: END -->");', 'text = before + "<!-- core components: START -->\\n" + changed + "\\n<!-- core components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t core components start ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- core components: START -->");', 'String after = StringHelper.after(text, "<!-- core components: END -->");', 'text = before + "<!-- core components: START -->\\n" + changed + "\\n<!-- core components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t core components end ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- components: START -->");', 'String after = StringHelper.after(text, "<!-- components: END -->");', 'text = before + "<!-- components: START -->\\n" + changed + "\\n<!-- components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- components: START -->");', 'String after = StringHelper.after(text, "<!-- components: END -->");', 'text = before + "<!-- components: START -->\\n" + changed + "\\n<!-- components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- components: START -->");', 'String after = StringHelper.after(text, "<!-- components: END -->");', 'text = before + "<!-- components: START -->\\n" + changed + "\\n<!-- components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t components start ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- components: START -->");', 'String after = StringHelper.after(text, "<!-- components: END -->");', 'text = before + "<!-- components: START -->\\n" + changed + "\\n<!-- components: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t components end ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- others: START -->");', 'String after = StringHelper.after(text, "<!-- others: END -->");', 'text = before + "<!-- others: START -->\\n" + changed + "\\n<!-- others: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- others: START -->");', 'String after = StringHelper.after(text, "<!-- others: END -->");', 'text = before + "<!-- others: START -->\\n" + changed + "\\n<!-- others: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- others: START -->");', 'String after = StringHelper.after(text, "<!-- others: END -->");', 'text = before + "<!-- others: START -->\\n" + changed + "\\n<!-- others: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t others start ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- others: START -->");', 'String after = StringHelper.after(text, "<!-- others: END -->");', 'text = before + "<!-- others: START -->\\n" + changed + "\\n<!-- others: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t others end ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- dataformats: START -->");', 'String after = StringHelper.after(text, "<!-- dataformats: END -->");', 'text = before + "<!-- dataformats: START -->\\n" + changed + "\\n<!-- dataformats: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- dataformats: START -->");', 'String after = StringHelper.after(text, "<!-- dataformats: END -->");', 'text = before + "<!-- dataformats: START -->\\n" + changed + "\\n<!-- dataformats: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- dataformats: START -->");', 'String after = StringHelper.after(text, "<!-- dataformats: END -->");', 'text = before + "<!-- dataformats: START -->\\n" + changed + "\\n<!-- dataformats: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t dataformats start ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- dataformats: START -->");', 'String after = StringHelper.after(text, "<!-- dataformats: END -->");', 'text = before + "<!-- dataformats: START -->\\n" + changed + "\\n<!-- dataformats: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t dataformats end ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- languages: START -->");', 'String after = StringHelper.after(text, "<!-- languages: END -->");', 'text = before + "<!-- languages: START -->\\n" + changed + "\\n<!-- languages: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- languages: START -->");', 'String after = StringHelper.after(text, "<!-- languages: END -->");', 'text = before + "<!-- languages: START -->\\n" + changed + "\\n<!-- languages: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- languages: START -->");', 'String after = StringHelper.after(text, "<!-- languages: END -->");', 'text = before + "<!-- languages: START -->\\n" + changed + "\\n<!-- languages: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t languages start ', []]
camel sample_151

['if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, "<!-- languages: START -->");', 'String after = StringHelper.after(text, "<!-- languages: END -->");', 'text = before + "<!-- languages: START -->\\n" + changed + "\\n<!-- languages: END -->" + after;', 'writeText(file, text);', 'return true;', '}', '} else {']
['t languages end ', []]
camel sample_151

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext", this);', 'camelContext.getManagementStrategy().addEventNotifier(eventNotifier);', 'if (!camelContext.getRoutePolicyFactories().contains(this)) {', 'camelContext.addRoutePolicyFactory(this);', '}', 'if (spanReporter == null) {', 'if (spanCollector != null) {', '} else if (endpoint != null) {']
['configuring zipkin urlconnectionsender using endpoint ', ['endpoint']]
camel sample_14335

['ObjectHelper.notNull(camelContext, "CamelContext", this);', 'camelContext.getManagementStrategy().addEventNotifier(eventNotifier);', 'if (!camelContext.getRoutePolicyFactories().contains(this)) {', 'camelContext.addRoutePolicyFactory(this);', '}', 'if (spanReporter == null) {', 'if (spanCollector != null) {', '} else if (endpoint != null) {', 'spanReporter = AsyncReporter.create(URLConnectionSender.create(endpoint));', '} else if (hostName != null && port > 0) {']
['configuring zipkin scribespancollector using host and port ', ['hostname', 'port']]
camel sample_14335

['if (spanReporter == null) {', 'if (spanCollector != null) {', '} else if (endpoint != null) {', 'spanReporter = AsyncReporter.create(URLConnectionSender.create(endpoint));', '} else if (hostName != null && port > 0) {', 'spanCollector = new ScribeSpanCollector(hostName, port);', '} else {', 'String host = new ServiceHostPropertiesFunction().apply(ZIPKIN_COLLECTOR_HTTP_SERVICE);', 'String port = new ServicePortPropertiesFunction().apply(ZIPKIN_COLLECTOR_HTTP_SERVICE);', 'if (ObjectHelper.isNotEmpty(host) && ObjectHelper.isNotEmpty(port)) {']
['auto configuring zipkin urlconnectionsender using host and port ', ['host', 'port']]
camel sample_14335

['} else {', 'String host = new ServiceHostPropertiesFunction().apply(ZIPKIN_COLLECTOR_HTTP_SERVICE);', 'String port = new ServicePortPropertiesFunction().apply(ZIPKIN_COLLECTOR_HTTP_SERVICE);', 'if (ObjectHelper.isNotEmpty(host) && ObjectHelper.isNotEmpty(port)) {', 'int num = camelContext.getTypeConverter().mandatoryConvertTo(Integer.class, port);', 'String implicitEndpoint = "http: spanReporter = AsyncReporter.create(URLConnectionSender.create(implicitEndpoint));', '} else {', 'host = new ServiceHostPropertiesFunction().apply(ZIPKIN_COLLECTOR_THRIFT_SERVICE);', 'port = new ServicePortPropertiesFunction().apply(ZIPKIN_COLLECTOR_THRIFT_SERVICE);', 'if (ObjectHelper.isNotEmpty(host) && ObjectHelper.isNotEmpty(port)) {']
['auto configuring zipkin scribespancollector using host and port ', ['host', 'port']]
camel sample_14335

['if (spanReporter == null && spanCollector == null) {', 'Set<Reporter> reporters = camelContext.getRegistry().findByType(Reporter.class);', 'if (reporters.size() == 1) {', 'spanReporter = reporters.iterator().next();', '}', '}', 'if (spanCollector == null) {', 'ObjectHelper.notNull(spanReporter, "Reporter<zipkin2.Span>", this);', '}', 'if (clientServiceMappings.isEmpty() && serverServiceMappings.isEmpty()) {']
['no service name s has been mapped in clientservicemappings or serverservicemappings camel will fallback and use endpoint uris as service names ', []]
camel sample_14335

['key = endpoint.getEndpointKey();', '} else if (exchange.getFromEndpoint() != null) {', 'key = exchange.getFromEndpoint().getEndpointKey();', '}', 'for (String pattern : excludePatterns) {', 'if (EndpointHelper.matchPattern(key, pattern)) {', 'return null;', '}', '}', 'if (LOG.isTraceEnabled() && key != null) {']
['using servicename as fallback ', ['key']]
camel sample_14335

['for (String pattern : excludePatterns) {', 'if (EndpointHelper.matchPattern(key, pattern)) {', 'return null;', '}', '}', 'if (LOG.isTraceEnabled() && key != null) {', '}', 'return key;', '} else {', 'if (LOG.isTraceEnabled() && answer != null) {']
['using servicename ', ['answer']]
camel sample_14335

['private Brave getBrave(String serviceName) {', 'Brave brave = null;', 'if (serviceName != null) {', 'brave = braves.get(serviceName);', 'if (brave == null && useFallbackServiceNames) {']
['creating brave assigned to servicename as fallback ', ['servicename']]
camel sample_14335

['public static ObjectInput toObjectInput(final InputStream stream, final Exchange exchange) throws IOException {', 'if (stream instanceof ObjectInput) {', 'return (ObjectInput) stream;', '} else {', 'return new ObjectInputStream(IOHelper.buffered(stream)) {', 'protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {', 'Class<?>  answer = null;', 'String name = objectStreamClass.getName();', 'if (exchange != null) {']
['loading class using camel classresolver ', ['name']]
camel sample_4234

['return (ObjectInput) stream;', '} else {', 'return new ObjectInputStream(IOHelper.buffered(stream)) {', 'protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {', 'Class<?>  answer = null;', 'String name = objectStreamClass.getName();', 'if (exchange != null) {', 'answer = exchange.getContext().getClassResolver().resolveClass(name);', '}', 'if (answer == null) {']
['loading class using jdk default implementation ', ['name']]
camel sample_4234

['public void testSimpleRouteWithHeaderPredicate() throws Exception {', 'List<Route> routes = buildSimpleRouteWithHeaderPredicate();']
['created routes ', ['routes']]
camel sample_3764

['public void testSimpleRouteWithChoice() throws Exception {', 'List<Route> routes = buildSimpleRouteWithChoice();']
['created routes ', ['routes']]
camel sample_3764

['protected List<Route> buildCustomProcessor() throws Exception {', 'myProcessor = new Processor() {', 'public void process(Exchange exchange) {']
['called with exchange ', ['exchange']]
camel sample_3764

['public void testCustomProcessorWithFilter() throws Exception {', 'List<Route> routes = buildCustomProcessorWithFilter();']
['created routes ', ['routes']]
camel sample_3764

['public void testWireTap() throws Exception {', 'List<Route> routes = buildWireTap();']
['created routes ', ['routes']]
camel sample_3764

['public void testRouteWithInterceptor() throws Exception {', 'List<Route> routes = buildRouteWithInterceptor();']
['created routes ', ['routes']]
camel sample_3764

['public void testComplexExpressions() throws Exception {', 'RouteBuilder builder = new RouteBuilder() {', 'public void configure() {', 'errorHandler(deadLetterChannel("mock:error"));', 'from("direct:a") .filter(header("foo").isEqualTo(123)) .to("direct:b");', '}', '};', 'List<Route> routes = getRouteList(builder);']
['created routes ', ['routes']]
camel sample_3764

['public void testRouteDynamicReceipentList() throws Exception {', 'List<Route> routes = buildDynamicRecipientList();']
['created routes ', ['routes']]
camel sample_3764

['public void testSplitter() throws Exception {', 'List<Route> routes = buildSplitter();']
['created routes ', ['routes']]
camel sample_3764

['public void testIdempotentConsumer() throws Exception {', 'List<Route> routes = buildIdempotentConsumer();']
['created routes ', ['routes']]
camel sample_3764

['public void testThreads() throws Exception {', 'List<Route> routes = buildThreads();']
['created routes ', ['routes']]
camel sample_3764

['public void setUp() throws Exception {', 'log.info("********************************************************************************");']
['testing ', ['gettestmethodname', 'getclass', 'getname']]
camel sample_6835

['private void doSetUp() throws Exception {']
['setup test ', []]
camel sample_6835

['enableJMX();', '} else {', 'disableJMX();', '}', 'context = (ModelCamelContext)createCamelContext();', 'threadCamelContext.set(context);', 'assertNotNull("No context found!", context);', 'context.getShutdownStrategy().setTimeout(getShutdownTimeout());', 'if (isUseDebugger()) {', 'if (context.getStatus().equals(ServiceStatus.Started)) {']
['cannot setting the debugger to the starting camelcontext stop the camelcontext now ', []]
camel sample_6835

['pc.setOverrideProperties(extra);', '}', 'Boolean ignore = ignoreMissingLocationWithPropertiesComponent();', 'if (ignore != null) {', 'pc.setIgnoreMissingLocation(ignore);', '}', 'postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {']
['using created route builder ', ['builder']]
camel sample_6835

['}', 'postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'replaceFromEndpoints();', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['skipping starting camelcontext as system property skipstartingcamelcontext is set to be true ', []]
camel sample_6835

['postProcessTest();', 'if (isUseRouteBuilder()) {', 'RoutesBuilder[] builders = createRouteBuilders();', 'for (RoutesBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'replaceFromEndpoints();', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {']
['skipping starting camelcontext as isuseadvicewith is set to true ', []]
camel sample_6835

['}', 'replaceFromEndpoints();', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {', '} else {', 'startCamelContext();', '}', '} else {', 'replaceFromEndpoints();']
['using route builder from the created context ', ['context']]
camel sample_6835

['replaceFromEndpoints();', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (isUseAdviceWith()) {', '} else {', 'startCamelContext();', '}', '} else {', 'replaceFromEndpoints();', '}']
['routing rules are ', ['context', 'getroutes']]
camel sample_6835

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");']
['testing done ', ['gettestmethodname', 'getclass', 'getname']]
camel sample_6835

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");']
['took millis ', ['timeutils', 'printduration', 'time', 'time']]
camel sample_6835

['public void tearDown() throws Exception {', 'long time = watch.stop();', 'log.info("********************************************************************************");', 'if (isRouteCoverageEnabled()) {', 'String className = this.getClass().getSimpleName();', 'String dir = "target/camel-route-coverage";', 'String name = className + "-" + getTestMethodName() + ".xml";', 'ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();', 'if (managedCamelContext == null) {']
['cannot dump route coverage to file as jmx is not enabled override usejmx method to enable jmx in the unit test classes ', []]
camel sample_6835

['String name = className + "-" + getTestMethodName() + ".xml";', 'ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();', 'if (managedCamelContext == null) {', '} else {', 'logCoverageSummary(managedCamelContext);', 'String xml = managedCamelContext.dumpRoutesCoverageAsXml();', 'String combined = "<camelRouteCoverage>\\n" + gatherTestDetailsAsXml() + xml + "\\n</camelRouteCoverage>";', 'File file = new File(dir);', 'file.mkdirs();', 'file = new File(dir, name);']
['dumping route coverage to file ', ['file']]
camel sample_6835

['InputStream is = new ByteArrayInputStream(combined.getBytes());', 'OutputStream os = new FileOutputStream(file, false);', 'IOHelper.copyAndCloseInput(is, os);', 'IOHelper.close(os);', '}', '}', 'log.info("********************************************************************************");', 'if (isCreateCamelContextPerClass()) {', 'return;', '}']
['teardown test ', []]
camel sample_6835

['public static void tearDownAfterClass() throws Exception {', 'INIT.remove();']
['teardownafterclass test ', []]
camel sample_6835

['protected Context createJndiContext() throws Exception {', 'Properties properties = new Properties();', 'InputStream in = getClass().getClassLoader().getResourceAsStream("jndi.properties");', 'if (in != null) {']
['using jndi properties from classpath root ', []]
camel sample_6835

['public void process(Exchange exchange) throws Exception {', 'Object body = exchange.getIn().getBody();', 'if (body != null) {', 'Address destinationAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_DEST, Address.class);', 'Address sourceAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_SRC, Address.class);']
['posting to cluster ', ['body', 'clustername']]
camel sample_16934

['public void process(Exchange exchange) throws Exception {', 'Object body = exchange.getIn().getBody();', 'if (body != null) {', 'Address destinationAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_DEST, Address.class);', 'Address sourceAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_SRC, Address.class);', 'if (destinationAddress != null) {']
['posting to custom destination address ', ['destinationaddress']]
camel sample_16934

['public void process(Exchange exchange) throws Exception {', 'Object body = exchange.getIn().getBody();', 'if (body != null) {', 'Address destinationAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_DEST, Address.class);', 'Address sourceAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_SRC, Address.class);', 'if (destinationAddress != null) {', '}', 'if (sourceAddress != null) {']
['posting from custom source address ', ['sourceaddress']]
camel sample_16934

['Address destinationAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_DEST, Address.class);', 'Address sourceAddress = exchange.getIn().getHeader(JGroupsEndpoint.HEADER_JGROUPS_SRC, Address.class);', 'if (destinationAddress != null) {', '}', 'if (sourceAddress != null) {', '}', 'Message message = new Message(destinationAddress, body);', 'message.setSrc(sourceAddress);', 'channel.send(message);', '} else {']
['body is null cannot post to channel ', []]
camel sample_16934

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SalesforceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.salesforce.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.salesforce.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_794

['public void testXSLTProxy() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6423

['exchange.setException(new RuntimeCamelException("OData HTTP Request cancelled!"));', 'callback.done(false);', '}', '});', 'final ApiMethod method = findMethod(exchange, properties);', 'if (method == null) {', 'callback.done(true);', 'return true;', '}', 'if (LOG.isDebugEnabled()) {']
['invoking operation with ', ['method', 'getname', 'properties', 'keyset']]
camel sample_15477

['private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {', 'if (execResult == null) {']
['received a null execresult instance to convert ', []]
camel sample_12218

['private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {', 'if (execResult == null) {', 'return null;', '}', 'InputStream result;', 'if (execResult.getCommand().getOutFile() != null) {', 'result = new FileInputStream(execResult.getCommand().getOutFile());', '} else {', 'if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {']
['execresult has no stdout will fallback to use stderr ', []]
camel sample_12218

['private static void resetIfByteArrayInputStream(InputStream stream) {', 'if (stream instanceof ByteArrayInputStream) {', 'try {', 'stream.reset();', '} catch (IOException ioe) {']
['unable to reset the stream ', ['ioe']]
camel sample_12218

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MetricsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.metrics.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.metrics.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_452

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteCacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-cache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-cache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1165

['public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'Exchange exchange = oldExchange;', 'if (exchange == null) {', 'exchange = ExchangeHelper.createCorrelatedCopy(newExchange, true);', 'injector.prepareAggregationExchange(exchange);', '}', 'if (conditionPredicate != null && !conditionPredicate.matches(newExchange)) {']
['dropped exchange from aggregation as predicate was not matched ', ['newexchange', 'conditionpredicate']]
camel sample_4367

['}', 'E picked = null;', 'try {', 'picked = pickExpression.evaluate(newExchange, castAs);', '} catch (TypeConversionException exception) {', 'if (!ignoreInvalidCasts) {', 'throw exception;', '}', '}', 'if (picked == null && !storeNulls) {']
['dropped exchange from aggregation as pick expression returned null and storing nulls is not enabled ', ['newexchange']]
camel sample_4367

['private Collection<E> safeInsertIntoCollection(Exchange oldExchange, Collection<E> oldValue, E toInsert) {', 'Collection<E> collection = null;', 'try {', 'if (oldValue == null || oldExchange.getProperty(Exchange.AGGREGATED_COLLECTION_GUARD, Boolean.class) == null) {', 'try {', 'collection = collectionType.newInstance();', '} catch (Exception e) {']
['could not instantiate collection of type aborting aggregation ', ['collectiontype']]
camel sample_4367

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<XMLTokenizeLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xtokenize.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xtokenize.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_901

['public void process(final Exchange exchange) throws Exception {', 'org.springframework.messaging.Message<?> request = SpringIntegrationBinding.createSpringIntegrationMessage(exchange);', 'if (exchange.getPattern().isOutCapable()) {', 'exchange.getIn().getHeaders().put(MessageHeaders.REPLY_CHANNEL, replyChannel);', 'if (replyChannel == null) {', 'throw new IllegalArgumentException("ReplyChannel has not been configured on: " + this);', '}', 'replyChannel.subscribe(new MessageHandler() {', 'public void handleMessage(Message<?> message) {']
['received from replychannel ', ['message', 'replychannel']]
camel sample_11121

['public void testDisruptorQueue() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'final CamelContext context = new DefaultCamelContext();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("disruptor:test.a").to("disruptor:test.b");', 'from("disruptor:test.b").process(new Processor() {', 'public void process(final Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_10730

['public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'final CamelContext context = new DefaultCamelContext();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("disruptor:test.a").to("disruptor:test.b");', 'from("disruptor:test.b").process(new Processor() {', 'public void process(final Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_10730

['protected void doStart() throws Exception {', 'super.doStart();', 'DistributedGroup group = getAtomixEndpoint().getAtomix().getGroup( groupName, new DistributedGroup.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(groupName)), new DistributedGroup.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(groupName)) ).join();', 'this.localMember = group.join(memberName).join();', 'this.consumer = localMember.messaging().consumer(channelName);']
['subscribe to group member channel ', ['groupname', 'membername', 'channelname']]
camel sample_10360

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DrillComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.drill.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.drill.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_517

['protected void doStart() throws Exception {', 'super.doStart();', 'if (transformerFactory == null) {', 'createTransformerFactory();', '}', 'if (rules == null) {', 'try {']
['reading schematron rules from class path ', ['path']]
camel sample_11988

['protected void doStart() throws Exception {', 'super.doStart();', 'if (transformerFactory == null) {', 'createTransformerFactory();', '}', 'if (rules == null) {', 'try {', 'InputStream schRules = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), path);', 'rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory);', '} catch (Exception classPathException) {']
['error loading schematron rules from class path attempting file system ', ['path']]
camel sample_11988

['}', 'if (rules == null) {', 'try {', 'InputStream schRules = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), path);', 'rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory);', '} catch (Exception classPathException) {', 'try {', 'InputStream schRules = FileUtils.openInputStream(new File(path));', 'rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory);', '} catch (FileNotFoundException e) {']
['schematron rules not found in the file system ', ['path']]
camel sample_11988

['rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory);', '} catch (Exception classPathException) {', 'try {', 'InputStream schRules = FileUtils.openInputStream(new File(path));', 'rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory);', '} catch (FileNotFoundException e) {', 'throw classPathException;', '}', '}', 'if (rules == null) {']
['failed to load schematron rules ', ['path']]
camel sample_11988

['private void createTransformerFactory() throws ClassNotFoundException {', 'Class<TransformerFactory> factoryClass = getCamelContext().getClassResolver().resolveMandatoryClass(SAXON_TRANSFORMER_FACTORY_CLASS_NAME, TransformerFactory.class, SchematronComponent.class.getClassLoader());']
['using transformerfactoryclass ', ['factoryclass']]
camel sample_11988

['File fileLocalPath = new File(localPath);', 'if (fileLocalPath.isFile()) {', 'if (entry != null) {', 'throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!");', '}', 'if (entry == null) {', 'if (dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {', 'dropboxPath = dropboxPath + fileLocalPath.getName();', '}', '}']
['uploading ', ['filelocalpath', 'dropboxpath']]
camel sample_8485

['if (uploadedFile == null) {', 'result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO);', '} else {', 'result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK);', '}', '} catch (Exception ex) {', 'result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO);', '}', 'return result;', '} else if (fileLocalPath.isDirectory()) {']
['uploading a dir ', []]
camel sample_8485

['HashMap<String, DropboxResultCode> resultMap = new HashMap<>(listFiles.size());', 'for (File file : listFiles) {', 'String absPath = file.getAbsolutePath();', 'int indexRemainingPath = localPath.length();', 'if (!localPath.endsWith("/")) {', 'indexRemainingPath += 1;', '}', 'String remainingPath = absPath.substring(indexRemainingPath);', 'dropboxPath = dropboxPath + remainingPath;', 'try {']
['uploading ', ['filelocalpath', 'dropboxpath']]
camel sample_8485

['name = exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);', '}', 'if (name == null) {', 'name = exchange.getIn().getMessageId();', '}', 'if (entry == null) {', 'if (dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {', 'dropboxPath = dropboxPath + name;', '}', '}']
['uploading message body ', ['dropboxpath']]
camel sample_8485

['public DropboxSearchResult search(String remotePath, String query) throws DropboxException {', 'SearchResult listing;', 'List<SearchMatch> searchMatches;', 'if (query == null) {']
['search no query ', []]
camel sample_8485

['List<SearchMatch> searchMatches;', 'if (query == null) {', 'try {', 'listing = client.files().search(remotePath, null);', 'searchMatches = listing.getMatches();', 'return new DropboxSearchResult(searchMatches);', '} catch (DbxException e) {', 'throw new DropboxException(remotePath + " does not exist or can\'t obtain metadata");', '}', '} else {']
['search by query ', ['query']]
camel sample_8485

['for (Metadata entry : folderResult.getEntries()) {', 'returnMap.put(entry.getPathDisplay(), downloadSingleFile(entry.getPathDisplay()).getValue());', '}', 'return returnMap;', '} catch (ListFolderErrorException e) {', 'try {', 'DbxDownloader<FileMetadata> listing = client.files().download(path);', 'if (listing == null) {', 'return Collections.emptyMap();', '} else {']
['downloading a single file ', []]
camel sample_8485

['public void testRedirect() throws Exception {', 'HttpGet get = new HttpGet("http: RequestConfig requestconfig = RequestConfig.custom().setRedirectsEnabled(false).build();', 'CloseableHttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(requestconfig).build();', 'try {', 'HttpResponse response = client.execute(get);', 'for (Header header : response.getAllHeaders()) {']
['header ', ['header']]
camel sample_9294

['Snapshots snapshots;', 'if (ObjectHelper.isNotEmpty(type)) {', 'if (type == DigitalOceanSnapshotTypes.droplet) {', 'snapshots = getEndpoint().getDigitalOceanClient().getAllDropletSnapshots(configuration.getPage(), configuration.getPerPage());', '} else {', 'snapshots = getEndpoint().getDigitalOceanClient().getAllVolumeSnapshots(configuration.getPage(), configuration.getPerPage());', '}', '} else {', 'snapshots = getEndpoint().getDigitalOceanClient().getAvailableSnapshots(configuration.getPage(), configuration.getPerPage());', '}']
['all snapshots page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'snapshots', 'getsnapshots']]
camel sample_8893

['private void getSnapshot(Exchange exchange) throws Exception {', 'String snapshotId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class);', 'if (ObjectHelper.isEmpty(snapshotId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Snapshot snapshot = getEndpoint().getDigitalOceanClient().getSnaphotInfo(snapshotId);']
['snapshot ', ['snapshot']]
camel sample_8893

['private void deleteSnapshot(Exchange exchange) throws Exception {', 'String snapshotId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class);', 'if (ObjectHelper.isEmpty(snapshotId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Delete delete = getEndpoint().getDigitalOceanClient().deleteSnapshot(snapshotId);']
['delete snapshot ', ['delete']]
camel sample_8893

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {']
['simulating a task which takes millis to reply ', ['getendpoint', 'getdelay']]
camel sample_6927

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {']
['simulating a failure at attempt ', ['count']]
camel sample_6927

['executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());']
['setting reply ', ['reply']]
camel sample_6927

['public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}']
['callback done false ', []]
camel sample_6927

['exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}', 'callback.done(false);', 'return null;', '}', '});']
['task submitted now tell camel routing engine to that this exchange is being continued asynchronously ', []]
camel sample_6927

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'Map<String, Endpoint> map = getLocalCamelContext().getEndpointMap();', 'if (LOG.isTraceEnabled()) {']
['trying to lookup in local map ', ['remaining', 'map', 'keyset']]
camel sample_12166

['endpoint = map.get(newUri);', 'if (endpoint != null) {', 'logUsingEndpoint(uri, endpoint);', 'return new ContextEndpoint(uri, this, endpoint);', '}', '}', '}', 'throw new ResolveEndpointFailedException("Cannot find the endpoint with uri " + uri + " in the CamelContext " + getLocalCamelContext().getName());', '}', 'protected void logUsingEndpoint(String uri, Endpoint endpoint) {']
['mapping the uri to local endpoint ', ['uri', 'endpoint']]
camel sample_12166

['name = exchange.getContext().getName();', '}', 'boolean match = true;', 'if (contextIdPattern != null) {', 'if ("#name#".equals(contextIdPattern)) {', 'match = name.equals(contextId);', '} else {', 'match = EndpointHelper.matchPattern(name, contextIdPattern);', '}', 'if (LOG.isDebugEnabled()) {']
['match contextid with pattern ', ['new', 'object', 'name', 'contextidpattern', 'match']]
camel sample_17364

['if (LOG.isDebugEnabled()) {', '}', '}', 'if (!match) {', 'adapter.noContent();', '} else {', 'support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, exchange.getContext().getClassResolver(), configuration);', '}', '}', '} catch (Exception e) {']
['error rendering swagger api due ', ['e', 'getmessage', 'e']]
camel sample_17364

['public void findScriptEngines() throws IOException {', 'Enumeration<URL> urls = getClass().getClassLoader().getResources(Activator.META_INF_SERVICES_DIR + "/" + Activator.SCRIPT_ENGINE_SERVICE_FILE);', 'assertThat(urls.hasMoreElements(), is(true));', 'while (urls.hasMoreElements()) {', 'URL url = urls.nextElement();']
['found ', ['url']]
camel sample_11199

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<VertxComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.vertx.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.vertx.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_956

['public boolean startConsumer(Consumer consumer) throws Exception {', 'ServiceHelper.startService(consumer);']
['started consumer ', ['consumer']]
camel sample_5171

['public boolean stopConsumer(Consumer consumer) throws Exception {', 'ServiceHelper.stopAndShutdownServices(consumer);']
['stopped consumer ', ['consumer']]
camel sample_5171

['public boolean suspendOrStopConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean suspended = ServiceHelper.suspendService(consumer);', 'if (suspended) {']
['suspended consumer ', ['consumer']]
camel sample_5171

['public boolean suspendOrStopConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean suspended = ServiceHelper.suspendService(consumer);', 'if (suspended) {', '} else {']
['consumer already suspended ', ['consumer']]
camel sample_5171

['public boolean suspendOrStopConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean suspended = ServiceHelper.suspendService(consumer);', 'if (suspended) {', '} else {', '}', 'return suspended;', '}', 'if (!ServiceHelper.isStopped(consumer)) {', 'ServiceHelper.stopService(consumer);']
['stopped consumer ', ['consumer']]
camel sample_5171

['public boolean resumeOrStartConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean resumed = ServiceHelper.resumeService(consumer);', 'if (resumed) {']
['resumed consumer ', ['consumer']]
camel sample_5171

['public boolean resumeOrStartConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean resumed = ServiceHelper.resumeService(consumer);', 'if (resumed) {', '} else {']
['consumer already resumed ', ['consumer']]
camel sample_5171

['public boolean resumeOrStartConsumer(Consumer consumer) throws Exception {', 'if (consumer instanceof Suspendable) {', 'boolean resumed = ServiceHelper.resumeService(consumer);', 'if (resumed) {', '} else {', '}', 'return resumed;', '}', 'if (!ServiceHelper.isStarted(consumer)) {', 'ServiceHelper.startService(consumer);']
['started consumer ', ['consumer']]
camel sample_5171

['protected void doStart() throws Exception {', 'if (xmlMapper == null) {', 'xmlMapper = new XmlMapper();', '}', 'if (enableJaxbAnnotationModule) {', 'JaxbAnnotationModule module = new JaxbAnnotationModule();']
['registering module ', ['module']]
camel sample_10622

['MapperFeature mf = getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class, disable);', 'if (mf != null) {', 'xmlMapper.disable(mf);', 'continue;', '}', 'throw new IllegalArgumentException("Disable feature: " + disable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]");', '}', '}', 'if (modules != null) {', 'for (Module module : modules) {']
['registering module ', ['module']]
camel sample_10622

['for (Module module : modules) {', 'xmlMapper.registerModules(module);', '}', '}', 'if (moduleClassNames != null) {', 'Iterable<Object> it = ObjectHelper.createIterable(moduleClassNames);', 'for (Object o : it) {', 'String name = o.toString();', 'Class<Module> clazz = camelContext.getClassResolver().resolveMandatoryClass(name, Module.class);', 'Module module = camelContext.getInjector().newInstance(clazz);']
['registering module ', ['name', 'module']]
camel sample_10622

['}', '}', 'if (moduleRefs != null) {', 'Iterable<Object> it = ObjectHelper.createIterable(moduleRefs);', 'for (Object o : it) {', 'String name = o.toString();', 'if (name.startsWith("#")) {', 'name = name.substring(1);', '}', 'Module module = CamelContextHelper.mandatoryLookup(camelContext, name, Module.class);']
['registering module ', ['name', 'module']]
camel sample_10622

['for (Object o : it) {', 'String name = o.toString();', 'if (name.startsWith("#")) {', 'name = name.substring(1);', '}', 'Module module = CamelContextHelper.mandatoryLookup(camelContext, name, Module.class);', 'xmlMapper.registerModule(module);', '}', '}', 'if (ObjectHelper.isNotEmpty(timezone)) {']
['setting timezone to xml mapper ', ['timezone']]
camel sample_10622

['if (isTrimmingNeededAndEnabled(factory, myLine)) {', 'myLine = myLine.substring(0, factory.recordLength());', '}', 'if ((myLine.length() < factory.recordLength() && !factory.isIgnoreMissingChars()) || (myLine.length() > factory.recordLength())) {', 'throw new java.lang.IllegalArgumentException("Size of the record: " + myLine.length() + " is not equal to the value provided in the model: " + factory.recordLength());', '}', '}', 'Map<String, Object> model = factory.factory();', 'factory.bind(getCamelContext(), myLine, model, count);', 'factory.link(model);']
['graph of objects created ', ['model']]
camel sample_7459

['public void testSendMultipleMessages() throws Exception {', 'int messageCount = 500;', 'acknowledged.expectedMessageCount(messageCount);', 'timeout.expectedMessageCount(0);', 'frame.expectedMessageCount(0);', 'ae.expectedMessageCount(0);', 'ar.expectedMessageCount(0);', 'startCamelContext();', 'for (int i = 0; i < messageCount; ++i) {']
['triggering message ', ['i']]
camel sample_13848

['public void testSendMultipleMessages() throws Exception {', 'int messageCount = 500;', 'acknowledged.expectedMessageCount(messageCount);', 'timeout.expectedMessageCount(0);', 'frame.expectedMessageCount(0);', 'ae.expectedMessageCount(0);', 'ar.expectedMessageCount(0);', 'startCamelContext();', 'for (int i = 0; i < messageCount; ++i) {', 'Object response = template.requestBodyAndHeader(SOURCE_URI, Hl7TestMessageGenerator.generateMessage(i), "CamelMllpMessageControlId", String.format("%05d", i));']
['response ', ['i', 'response']]
camel sample_13848

['public static boolean isOsgiContext(CamelContext camelContext) {', 'String contextType = camelContext.getClass().getSimpleName();', 'if (contextType.startsWith("Osgi") || contextType.equals("BlueprintCamelContext")) {']
['used assuming running in the osgi container ', ['contexttype']]
camel sample_4275

['public static boolean isOsgiContext(CamelContext camelContext) {', 'String contextType = camelContext.getClass().getSimpleName();', 'if (contextType.startsWith("Osgi") || contextType.equals("BlueprintCamelContext")) {', 'return true;', '} else {']
['used assuming running in the osgi container ', ['contexttype']]
camel sample_4275

['break;', 'case TRACE: if (log.isTraceEnabled()) {', 'log.trace(logMessage(exchange));', '}', 'break;', 'case WARN: if (log.isWarnEnabled()) {', 'log.warn(logMessage(exchange));', '}', 'break;', 'case OFF: break;']
['unknown level when trying to log exchange ', ['level', 'logmessage', 'exchange']]
camel sample_4432

['break;', 'case TRACE: if (log.isTraceEnabled()) {', 'log.trace(logMessage(exchange), exception);', '}', 'break;', 'case WARN: if (log.isWarnEnabled()) {', 'log.warn(logMessage(exchange), exception);', '}', 'break;', 'case OFF: break;']
['unknown level when trying to log exchange ', ['level', 'logmessage', 'exchange']]
camel sample_4432

['break;', 'case TRACE: if (log.isTraceEnabled()) {', 'log.trace(logMessage(exchange, message));', '}', 'break;', 'case WARN: if (log.isWarnEnabled()) {', 'log.warn(logMessage(exchange, message));', '}', 'break;', 'case OFF: break;']
['unknown level when trying to log exchange ', ['level', 'logmessage', 'exchange', 'message']]
camel sample_4432

['private RestClient connectToSalesforce() throws MojoExecutionException {', 'RestClient restClient = null;', 'try {', 'final SalesforceHttpClient httpClient = createHttpClient();']
['logging in to salesforce ', []]
camel sample_14925

['RestClient restClient = null;', 'try {', 'final SalesforceHttpClient httpClient = createHttpClient();', 'final SalesforceSession session = httpClient.getSession();', 'try {', 'session.login(null);', '} catch (final SalesforceException e) {', 'final String msg = "Salesforce login error " + e.getMessage();', 'throw new MojoExecutionException(msg, e);', '}']
['salesforce login successful ', []]
camel sample_14925

['private void disconnectFromSalesforce(final RestClient restClient) {', 'if (restClient == null) {', 'return;', '}', 'try {', 'final SalesforceHttpClient httpClient = (SalesforceHttpClient) ((DefaultRestClient) restClient) .getHttpClient();', 'ServiceHelper.stopAndShutdownServices(restClient, httpClient.getSession(), httpClient);', '} catch (final Exception e) {']
['error stopping salesforce http client ', ['e']]
camel sample_14925

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<Sjms2Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_612

['mockEndpointB.expectedBodiesReceived(expectedBody);', 'invokeHttpEndpoint();', 'mockEndpointA.assertIsSatisfied();', 'mockEndpointB.assertIsSatisfied();', 'List<Exchange> list = mockEndpointA.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_10966

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {']
['mock result ', ['deadletterchannel', 'maximumredeliveries', 'redeliverydelay', 'retriesexhaustedloglevel', 'logginglevel', 'error', 'retryattemptedloglevel', 'logginglevel', 'warn', 'logstacktrace', 'true', 'logretrystacktrace', 'true']]
camel sample_3898

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'CxfEndpoint result;', 'Object value = parameters.remove("setDefaultBus");', 'if (value != null) {']
['the option setdefaultbus is deprecated use name defaultbus instead ', []]
camel sample_7971

['public void testSendMessageToBadLevel() throws Exception {', 'try {', 'template.sendBody("log:org.apache.camel.TEST?level=noSuchLevel", "<level>noSuchLevel</level>");', 'fail("Should have failed!");', '} catch (Exception e) {']
['caught expected exception ', ['e', 'e']]
camel sample_3524

['public Expression getTempFileName() {']
['creation of temporary files not supported by the scp protocol ', []]
camel sample_9129

['protected Component getComponent(String name, CamelContext context) throws Exception {']
['finding component ', ['name']]
camel sample_13075

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AsteriskComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.asterisk.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.asterisk.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1149

['public void doStart() throws Exception {', 'super.doStart();', 's3Client = configuration.getAmazonS3Client() != null ? configuration.getAmazonS3Client() : createS3Client();', 'if (ObjectHelper.isNotEmpty(configuration.getAmazonS3Endpoint())) {', 's3Client.setEndpoint(configuration.getAmazonS3Endpoint());', '}', 'String fileName = getConfiguration().getFileName();', 'if (fileName != null) {']
['file name requested so skipping bucket check ', ['filename']]
camel sample_8692

['super.doStart();', 's3Client = configuration.getAmazonS3Client() != null ? configuration.getAmazonS3Client() : createS3Client();', 'if (ObjectHelper.isNotEmpty(configuration.getAmazonS3Endpoint())) {', 's3Client.setEndpoint(configuration.getAmazonS3Endpoint());', '}', 'String fileName = getConfiguration().getFileName();', 'if (fileName != null) {', 'return;', '}', 'String bucketName = getConfiguration().getBucketName();']
['querying whether bucket already exists ', ['bucketname']]
camel sample_8692

['s3Client.setEndpoint(configuration.getAmazonS3Endpoint());', '}', 'String fileName = getConfiguration().getFileName();', 'if (fileName != null) {', 'return;', '}', 'String bucketName = getConfiguration().getBucketName();', 'String prefix = getConfiguration().getPrefix();', 'try {', 's3Client.listObjects(new ListObjectsRequest(bucketName, prefix, null, null, 0));']
['bucket already exists ', ['bucketname']]
camel sample_8692

['String bucketName = getConfiguration().getBucketName();', 'String prefix = getConfiguration().getPrefix();', 'try {', 's3Client.listObjects(new ListObjectsRequest(bucketName, prefix, null, null, 0));', 'return;', '} catch (AmazonServiceException ase) {', 'if (ase.getStatusCode() != 404) {', 'throw ase;', '}', '}']
['bucket doesn t exist yet ', ['bucketname']]
camel sample_8692

['String prefix = getConfiguration().getPrefix();', 'try {', 's3Client.listObjects(new ListObjectsRequest(bucketName, prefix, null, null, 0));', 'return;', '} catch (AmazonServiceException ase) {', 'if (ase.getStatusCode() != 404) {', 'throw ase;', '}', '}', 'CreateBucketRequest createBucketRequest = new CreateBucketRequest(getConfiguration().getBucketName());']
['creating bucket in region with request ', ['configuration', 'getbucketname', 'configuration', 'getregion', 'createbucketrequest']]
camel sample_8692

['try {', 's3Client.listObjects(new ListObjectsRequest(bucketName, prefix, null, null, 0));', 'return;', '} catch (AmazonServiceException ase) {', 'if (ase.getStatusCode() != 404) {', 'throw ase;', '}', '}', 'CreateBucketRequest createBucketRequest = new CreateBucketRequest(getConfiguration().getBucketName());', 's3Client.createBucket(createBucketRequest);']
['bucket created ', []]
camel sample_8692

['s3Client.listObjects(new ListObjectsRequest(bucketName, prefix, null, null, 0));', 'return;', '} catch (AmazonServiceException ase) {', 'if (ase.getStatusCode() != 404) {', 'throw ase;', '}', '}', 'CreateBucketRequest createBucketRequest = new CreateBucketRequest(getConfiguration().getBucketName());', 's3Client.createBucket(createBucketRequest);', 'if (configuration.getPolicy() != null) {']
['updating bucket with policy ', ['bucketname', 'configuration', 'getpolicy']]
camel sample_8692

['return;', '} catch (AmazonServiceException ase) {', 'if (ase.getStatusCode() != 404) {', 'throw ase;', '}', '}', 'CreateBucketRequest createBucketRequest = new CreateBucketRequest(getConfiguration().getBucketName());', 's3Client.createBucket(createBucketRequest);', 'if (configuration.getPolicy() != null) {', 's3Client.setBucketPolicy(bucketName, configuration.getPolicy());']
['bucket policy updated ', []]
camel sample_8692

['public Exchange createExchange(ExchangePattern pattern, S3Object s3Object) {']
['getting object with key from bucket ', ['getkey', 'getbucketname']]
camel sample_8692

['public Exchange createExchange(ExchangePattern pattern, S3Object s3Object) {', 'ObjectMetadata objectMetadata = s3Object.getObjectMetadata();']
['got object ', []]
camel sample_8692

['public Source resolve(String href, String base) throws TransformerException {', 'if (ObjectHelper.isEmpty(href)) {', 'href = location;', '}', 'if (ObjectHelper.isEmpty(href)) {', 'throw new TransformerException("include href is empty");', '}']
['resolving uri with href and base ', ['href', 'base']]
camel sample_5624

['if (ObjectHelper.isEmpty(href)) {', 'throw new TransformerException("include href is empty");', '}', 'String scheme = ResourceHelper.getScheme(href);', 'if (scheme != null) {', 'if ("file:".equals(scheme)) {', 'href = FileUtil.compactPath(href);', '} else if ("classpath:".equals(scheme)) {', "href = FileUtil.compactPath(href, '/');", '}']
['resolving uri from ', ['scheme', 'href']]
camel sample_5624

['resolverFactory = new DefaultXsltUriResolverFactory();', '}', 'resolver = resolverFactory.createUriResolver(getCamelContext(), remaining);', '}', 'endpoint.setUriResolver(resolver);', 'setProperties(endpoint, parameters);', 'String resourceUri = remaining;', 'if (ResourceHelper.isHttpUri(resourceUri)) {', 'resourceUri = ResourceHelper.appendParameters(resourceUri, parameters);', '}']
['using schema resource ', ['this', 'resourceuri']]
camel sample_4936

['public void testGetGroup() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.Group result = requestBody("direct: assertNotNull("getGroup result", result);']
['getgroup ', ['result']]
camel sample_8850

['String userName = configuration.getUsername();', 'Object userNameHeaderObj = headers.get(SshConstants.USERNAME_HEADER);', 'if (userNameHeaderObj instanceof String) {', 'userName = (String) headers.get(SshConstants.USERNAME_HEADER);', '}', 'ConnectFuture connectFuture = client.connect(userName, configuration.getHost(), configuration.getPort());', 'connectFuture.await(configuration.getTimeout());', 'if (!connectFuture.isDone() || !connectFuture.isConnected()) {', 'throw new RuntimeCamelException("Failed to connect to " + configuration.getHost() + ":" + configuration.getPort() + " within timeout " + configuration.getTimeout() + "ms");', '}']
['connected to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10032

['throw new RuntimeCamelException("Failed to connect to " + configuration.getHost() + ":" + configuration.getPort() + " within timeout " + configuration.getTimeout() + "ms");', '}', 'ClientChannel channel = null;', 'ClientSession session = null;', 'try {', 'AuthFuture authResult;', 'session = connectFuture.getSession();', 'KeyPairProvider keyPairProvider;', 'final String certResource = configuration.getCertResource();', 'if (certResource != null) {']
['attempting to authenticate using resourcekey ', ['certresource']]
camel sample_10032

['AuthFuture authResult;', 'session = connectFuture.getSession();', 'KeyPairProvider keyPairProvider;', 'final String certResource = configuration.getCertResource();', 'if (certResource != null) {', 'keyPairProvider = new ResourceHelperKeyPairProvider(new String[]{certResource}, endpoint.getCamelContext().getClassResolver());', '} else {', 'keyPairProvider = configuration.getKeyPairProvider();', '}', 'if (keyPairProvider != null) {']
['attempting to authenticate username using a key identity ', ['username']]
camel sample_10032

['}', 'if (keyPairProvider != null) {', 'KeyPair pair = keyPairProvider.loadKey(configuration.getKeyType());', 'session.addPublicKeyIdentity(pair);', '} else {', 'String password = configuration.getPassword();', 'Object passwordHeaderObj = headers.get(SshConstants.PASSWORD_HEADER);', 'if (passwordHeaderObj instanceof String) {', 'password = (String) headers.get(SshConstants.PASSWORD_HEADER);', '}']
['attempting to authenticate username using a password identity ', ['username']]
camel sample_10032

['String password = configuration.getPassword();', 'Object passwordHeaderObj = headers.get(SshConstants.PASSWORD_HEADER);', 'if (passwordHeaderObj instanceof String) {', 'password = (String) headers.get(SshConstants.PASSWORD_HEADER);', '}', 'session.addPasswordIdentity(password);', '}', 'authResult = session.auth();', 'authResult.await(configuration.getTimeout());', 'if (!authResult.isDone() || authResult.isFailure()) {']
['failed to authenticate ', []]
camel sample_10032

['protected int poll() throws Exception {', 'Exchange exchange = endpoint.createExchange();', 'DropboxSearchResult result = new DropboxAPIFacade(configuration.getClient(), exchange) .search(configuration.getRemotePath(), configuration.getQuery());', 'StringBuilder fileExtracted = new StringBuilder();', 'for (SearchMatch entry : result.getFound()) {', 'fileExtracted.append(entry.getMetadata().getName()).append("-").append(entry.getMetadata().getPathDisplay()).append("\\n");', '}', 'exchange.getIn().setHeader(DropboxResultHeader.FOUND_FILES.name(), fileExtracted.toString());', 'exchange.getIn().setBody(result.getFound());', 'if (LOG.isDebugEnabled()) {']
['downloaded ', ['result', 'tostring']]
camel sample_8503

['SalesforceUpsertContactComponent connector = new SalesforceUpsertContactComponent();', 'connector.setCamelContext(camelContext);', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<SalesforceUpsertContactComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.salesforce-upsert-contact.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.salesforce-upsert-contact.customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_35

['SalesforceUpsertContactComponent connector = new SalesforceUpsertContactComponent( entry.getKey());', 'connector.setCamelContext(camelContext);', 'try {', 'IntrospectionSupport.getProperties(entry.getValue(), parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<SalesforceUpsertContactComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.salesforce-upsert-contact." + entry.getKey() + ".customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.salesforce-upsert-contact." + entry.getKey() + ".customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_35

['public void testCapture() {']
['testError ', []]
camel sample_10198

['if (bean instanceof Component) {', 'return (Component) bean;', '} else {', 'Component component = CamelContextHelper.convertTo(context, Component.class, bean);', 'if (component != null) {', 'return component;', '}', '}', '}', 'if (bean != null) {']
['found component with incompatible class ', ['bean', 'getclass', 'getname']]
camel sample_4259

['public static DataFormat lookupDataFormatInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {', 'Object bean = lookupInRegistry(context, DataFormat.class, false, exceptionHandler, name, name + DATA_FORMAT_FALLBACK_SUFFIX);', 'if (bean instanceof DataFormat) {', 'return (DataFormat) bean;', '}', 'if (bean != null) {']
['found dataformat with incompatible class ', ['bean', 'getclass', 'getname']]
camel sample_4259

['public static DataFormatFactory lookupDataFormatFactoryInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {', 'Object bean = lookupInRegistry(context, DataFormatFactory.class, false, exceptionHandler, name, name + DATA_FORMAT_FACTORY_FALLBACK_SUFFIX);', 'if (bean instanceof DataFormatFactory) {', 'return (DataFormatFactory) bean;', '}', 'if (bean != null) {']
['found dataformatfactory with incompatible class ', ['bean', 'getclass', 'getname']]
camel sample_4259

['public static Language lookupLanguageInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {', 'Object bean = lookupInRegistry(context, Language.class, false, exceptionHandler, name, name + LANGUAGE_FALLBACK_SUFFIX);', 'if (bean instanceof Language) {', 'return (Language) bean;', '}', 'if (bean != null) {']
['found language with incompatible class ', ['bean', 'getclass', 'getname']]
camel sample_4259

['private static Object lookupInRegistry(CamelContext context, Class<?> type, boolean lookupByNameAndType, LookupExceptionHandler exceptionHandler, String... names) {', 'for (String name : names) {', 'try {', 'Object bean;', 'if (lookupByNameAndType) {', 'bean = context.getRegistry().lookupByNameAndType(name, type);', '} else {', 'bean = context.getRegistry().lookupByName(name);', '}']
['lookup with name in registry found ', ['type', 'getsimplename', 'name', 'bean']]
camel sample_4259

['public static void copy(MllpConfiguration source, MllpConfiguration target) {', 'if (source == null) {']
['values were not copied by mllpconfiguration copy mllpconfiguration source mllpconfiguration target source argument is null ', []]
camel sample_13864

['public static void copy(MllpConfiguration source, MllpConfiguration target) {', 'if (source == null) {', '} else if (target == null) {']
['values were not copied by mllpconfiguration copy mllpconfiguration source mllpconfiguration target target argument is null ', []]
camel sample_13864

['public int getPendingExchangesSize() {', 'int answer;', 'if (ShutdownRunningTask.CompleteAllTasks == shutdownRunningTask) {', 'answer = pendingExchanges;', '} else {', 'answer = 0;', '}', 'if (answer == 0 && isPolling()) {']
['currently polling so returning as pending exchanges ', []]
camel sample_3965

['protected void processEmptyMessage() throws Exception {', 'Exchange exchange = getEndpoint().createExchange();', 'exchange.setProperty(Exchange.BATCH_INDEX, 0);', 'exchange.setProperty(Exchange.BATCH_SIZE, 1);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, true);']
['sending empty message as there were no messages from polling ', ['this', 'getendpoint']]
camel sample_3965

['public void testAsynchronous() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_12326

['public Object lookupByName(String name) {', 'notEmpty(name, "name");']
['looking up bean with name ', ['name']]
camel sample_9938

['public <T> T lookupByNameAndType(String name, Class<T> type) {', 'notEmpty(name, "name");', 'notNull(type, "type");']
['looking up bean with name of type ', ['name', 'type']]
camel sample_9938

['public <T> Map<String, T> findByTypeWithName(Class<T> type) {', 'notNull(type, "type");']
['looking up named beans of type ', ['type']]
camel sample_9938

['public <T> Set<T> findByType(Class<T> type) {', 'notNull(type, "type");']
['looking up beans of type ', ['type']]
camel sample_9938

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XmlSignatureComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmlsecurity.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmlsecurity.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_583

['public void oneMasterOneSlaveScenarioContolledByPolicy() throws Exception {', 'final String path = "oneMasterOneSlaveScenarioContolledByPolicy";', 'final String firstDestination = "first" + System.currentTimeMillis();', 'final String secondDestination = "second" + System.currentTimeMillis();', 'final CountDownLatch waitForSecondRouteCompletedLatch = new CountDownLatch(1);', 'final int activeNodesDesired = 1;', 'MultiMasterZookeeperPolicyEnforcedContext first = createEnforcedContext(firstDestination, activeNodesDesired, path);', 'DefaultCamelContext controlledContext = (DefaultCamelContext) first.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);', 'assertWeHaveMasters(routePolicy);']
['starting first camelcontext ', []]
camel sample_12633

['final int activeNodesDesired = 1;', 'MultiMasterZookeeperPolicyEnforcedContext first = createEnforcedContext(firstDestination, activeNodesDesired, path);', 'DefaultCamelContext controlledContext = (DefaultCamelContext) first.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);', 'assertWeHaveMasters(routePolicy);', 'final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext second = null;', 'try {']
['starting second camelcontext in a separate thread ', []]
camel sample_12633

['final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext second = null;', 'try {', 'second = createEnforcedContext(secondDestination, activeNodesDesired, path);', 'arr[0] = second;', 'second.sendMessageToEnforcedRoute("message for second", 0);', 'waitForSecondRouteCompletedLatch.countDown();', '} catch (Exception e) {']
['error in the thread controlling the second context ', ['e']]
camel sample_12633

['arr[0] = second;', 'second.sendMessageToEnforcedRoute("message for second", 0);', 'waitForSecondRouteCompletedLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the second context: " + e.getMessage());', '}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for first", 1);', 'waitForSecondRouteCompletedLatch.await(2, TimeUnit.MINUTES);']
['explicitly shutting down the first camel context ', []]
camel sample_12633

['arr[0] = second;', 'second.sendMessageToEnforcedRoute("message for second", 0);', 'waitForSecondRouteCompletedLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the second context: " + e.getMessage());', '}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for first", 1);', 'waitForSecondRouteCompletedLatch.await(2, TimeUnit.MINUTES);']
['shutting down first con ', []]
camel sample_12633

['public void oneMasterOneSlaveAndFlippedAgainScenarioContolledByPolicy() throws Exception {', 'final String path = "oneMasterOneSlaveScenarioContolledByPolicy";', 'final String firstDestination = "first" + System.currentTimeMillis();', 'final String secondDestination = "second" + System.currentTimeMillis();', 'final CountDownLatch waitForSecondRouteCompletedLatch = new CountDownLatch(1);', 'final int activeNodeDesired = 1;', 'MultiMasterZookeeperPolicyEnforcedContext first = createEnforcedContext(firstDestination, activeNodeDesired, path);', 'DefaultCamelContext controlledContext = (DefaultCamelContext) first.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);', 'assertWeHaveMasters(routePolicy);']
['starting first camelcontext ', []]
camel sample_12633

['final int activeNodeDesired = 1;', 'MultiMasterZookeeperPolicyEnforcedContext first = createEnforcedContext(firstDestination, activeNodeDesired, path);', 'DefaultCamelContext controlledContext = (DefaultCamelContext) first.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);', 'assertWeHaveMasters(routePolicy);', 'final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext slave = null;', 'try {']
['starting second camelcontext in a separate thread ', []]
camel sample_12633

['final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext slave = null;', 'try {', 'slave = createEnforcedContext(secondDestination, activeNodeDesired, path);', 'arr[0] = slave;', 'slave.sendMessageToEnforcedRoute("message for second", 0);', 'waitForSecondRouteCompletedLatch.countDown();', '} catch (Exception e) {']
['error in the thread controlling the second context ', ['e']]
camel sample_12633

['slave.sendMessageToEnforcedRoute("message for second", 0);', 'waitForSecondRouteCompletedLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the second context: " + e.getMessage());', '}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for first", 1);', 'waitForSecondRouteCompletedLatch.await(2, TimeUnit.MINUTES);', 'MultiMasterZookeeperPolicyEnforcedContext second = arr[0];']
['explicitly shutting down the first camel context ', []]
camel sample_12633

['}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for first", 1);', 'waitForSecondRouteCompletedLatch.await(2, TimeUnit.MINUTES);', 'MultiMasterZookeeperPolicyEnforcedContext second = arr[0];', 'first.shutdown();', 'DefaultCamelContext secondCamelContext = (DefaultCamelContext) second.controlledContext;', 'assertWeHaveMasters((CuratorMultiMasterLeaderRoutePolicy)secondCamelContext.getRouteDefinition(secondDestination).getRoutePolicies().get(0));', 'CountDownLatch restartFirstLatch = new CountDownLatch(1);']
['start back first context ', []]
camel sample_12633

['}', '}', '}.start();', 'restartFirstLatch.await();', 'second.sendMessageToEnforcedRoute("message for second", 1);', 'first.mock.reset();', 'first.sendMessageToEnforcedRoute("message for first", 0);', 'second.shutdown();', 'controlledContext = (DefaultCamelContext) first.controlledContext;', 'routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);']
['asserting route is up context ', ['controlledcontext', 'getname']]
camel sample_12633

['public void oneMasterTwoSlavesScenarioContolledByPolicy() throws Exception {', 'final String path = "oneMasterTwoSlavesScenarioContolledByPolicy";', 'final String master = "master" + System.currentTimeMillis();', 'final String secondDestination = "second" + System.currentTimeMillis();', 'final String thirdDestination = "third" + System.currentTimeMillis();', 'final CountDownLatch waitForNonActiveRoutesLatch = new CountDownLatch(2);', 'final int activeNodesDesired = 1;']
['starting first camelcontext ', []]
camel sample_12633

['final int activeNodesDesired = 1;', 'MultiMasterZookeeperPolicyEnforcedContext first = createEnforcedContext(master, activeNodesDesired, path);', 'DefaultCamelContext controlledContext = (DefaultCamelContext) first.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy routePolicy = (CuratorMultiMasterLeaderRoutePolicy) controlledContext.getRouteDefinition(master).getRoutePolicies().get(0);', 'assertWeHaveMasters(routePolicy);', 'final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[2];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext second = null;', 'try {']
['starting second camelcontext ', []]
camel sample_12633

['final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[2];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext second = null;', 'try {', 'second = createEnforcedContext(secondDestination, activeNodesDesired, path);', 'arr[0] = second;', 'second.sendMessageToEnforcedRoute("message for second", 0);', 'waitForNonActiveRoutesLatch.countDown();', '} catch (Exception e) {']
['error in the thread controlling the second context ', ['e']]
camel sample_12633

['waitForNonActiveRoutesLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the second context: " + e.getMessage());', '}', '}', '}.start();', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext third = null;', 'try {']
['starting third camelcontext ', []]
camel sample_12633

['}.start();', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext third = null;', 'try {', 'third = createEnforcedContext(thirdDestination, activeNodesDesired, path);', 'arr[1] = third;', 'third.sendMessageToEnforcedRoute("message for third", 0);', 'waitForNonActiveRoutesLatch.countDown();', '} catch (Exception e) {']
['error in the thread controlling the third context ', ['e']]
camel sample_12633

['arr[1] = third;', 'third.sendMessageToEnforcedRoute("message for third", 0);', 'waitForNonActiveRoutesLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the third context: " + e.getMessage());', '}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for master", 1);', 'waitForNonActiveRoutesLatch.await();']
['explicitly shutting down the first camel context ', []]
camel sample_12633

['first.shutdown();', 'CuratorMultiMasterLeaderRoutePolicy routePolicySecond = (CuratorMultiMasterLeaderRoutePolicy) arr[0].controlledContext.getRouteDefinition(secondDestination).getRoutePolicies().get(0);', 'CuratorMultiMasterLeaderRoutePolicy routePolicyThird = (CuratorMultiMasterLeaderRoutePolicy) arr[1].controlledContext.getRouteDefinition(thirdDestination).getRoutePolicies().get(0);', 'MultiMasterZookeeperPolicyEnforcedContext newMaster = null;', 'MultiMasterZookeeperPolicyEnforcedContext slave = null;', 'final int maxWait = 20;', 'for (int i = 0; i < maxWait; i++) {', 'if (routePolicySecond.getElection().isMaster()) {', 'newMaster = arr[0];', 'slave = arr[1];']
['second is the new master ', []]
camel sample_12633

['MultiMasterZookeeperPolicyEnforcedContext slave = null;', 'final int maxWait = 20;', 'for (int i = 0; i < maxWait; i++) {', 'if (routePolicySecond.getElection().isMaster()) {', 'newMaster = arr[0];', 'slave = arr[1];', 'break;', '} else if (routePolicyThird.getElection().isMaster()) {', 'newMaster = arr[1];', 'slave = arr[0];']
['third is the new master ', []]
camel sample_12633

['if (routePolicySecond.getElection().isMaster()) {', 'newMaster = arr[0];', 'slave = arr[1];', 'break;', '} else if (routePolicyThird.getElection().isMaster()) {', 'newMaster = arr[1];', 'slave = arr[0];', 'break;', '} else {', 'Thread.sleep(2000);']
['waiting for a new master to be elected ', []]
camel sample_12633

['CuratorMultiMasterLeaderRoutePolicy firstRoutePolicy = (CuratorMultiMasterLeaderRoutePolicy) firstControlledContext.getRouteDefinition(firstDestination).getRoutePolicies().get(0);', 'MultiMasterZookeeperPolicyEnforcedContext second = createEnforcedContext(secondDestination, activeNodeDesired, path);', 'DefaultCamelContext secondControlledContext = (DefaultCamelContext) second.controlledContext;', 'CuratorMultiMasterLeaderRoutePolicy secondRoutePolicy = (CuratorMultiMasterLeaderRoutePolicy) secondControlledContext.getRouteDefinition(secondDestination).getRoutePolicies().get(0);', 'assertWeHaveMasters(firstRoutePolicy, secondRoutePolicy);', 'final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext third = null;', 'try {']
['starting third camelcontext ', []]
camel sample_12633

['final MultiMasterZookeeperPolicyEnforcedContext[] arr = new MultiMasterZookeeperPolicyEnforcedContext[1];', 'new Thread() {', 'public void run() {', 'MultiMasterZookeeperPolicyEnforcedContext third = null;', 'try {', 'third = createEnforcedContext(thirdDestination, activeNodeDesired, path);', 'arr[0] = third;', 'third.sendMessageToEnforcedRoute("message for third", 0);', 'waitForThirdRouteCompletedLatch.countDown();', '} catch (Exception e) {']
['error in the thread controlling the third context ', ['e']]
camel sample_12633

['third.sendMessageToEnforcedRoute("message for third", 0);', 'waitForThirdRouteCompletedLatch.countDown();', '} catch (Exception e) {', 'fail("Error in the thread controlling the third context: " + e.getMessage());', '}', '}', '}.start();', 'first.sendMessageToEnforcedRoute("message for first", 1);', 'second.sendMessageToEnforcedRoute("message for second", 1);', 'waitForThirdRouteCompletedLatch.await();']
['explicitly shutting down the first camel context ', []]
camel sample_12633

['public void sendMessageToEnforcedRoute(String message, int expected) throws InterruptedException {', 'mock.expectedMessageCount(expected);', 'try {']
['sending message to vm ', ['routename']]
camel sample_12633

['public void shutdown() throws Exception {']
['stopping ', []]
camel sample_12633

['public void shutdown() throws Exception {', 'controlledContext.stop();']
['stopped ', []]
camel sample_12633

['public void startup() throws Exception {']
['starting ', []]
camel sample_12633

['public void startup() throws Exception {', 'controlledContext.start();']
['started ', []]
camel sample_12633

['private void setUriDereferencer(XMLCryptoContext context) {', 'if (getConfiguration().getUriDereferencer() != null) {', 'context.setURIDereferencer(getConfiguration().getUriDereferencer());']
['uri dereferencer set ', []]
camel sample_6771

['private void setBaseUri(XMLCryptoContext context) {', 'if (getConfiguration().getBaseUri() != null) {', 'context.setBaseURI(getConfiguration().getBaseUri());']
['base uri set ', ['context', 'getbaseuri']]
camel sample_6771

['protected void setCryptoContextProperties(XMLCryptoContext cryptoContext) {', 'Map<String, ? extends Object> props = getConfiguration().getCryptoContextProperties();', 'if (props == null) {', 'return;', '}', 'for (String prop : props.keySet()) {', 'Object val = props.get(prop);', 'cryptoContext.setProperty(prop, val);']
['context property set to value ', ['prop', 'val']]
camel sample_6771

['}', 'byte[] bytes = null;', 'try {', 'bytes = IOConverter.toBytes(is);', '} finally {', 'IOHelper.close(is);', '}', 'SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);', 'schemaFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);', 'schemaFactory.setResourceResolver(new DefaultLSResourceResolver(getConfiguration().getCamelContext(), getConfiguration() .getSchemaResourceUri()));']
['instantiating schema for validation ', []]
camel sample_6771

['protected String getSchemaResourceUri(Message message) {', 'String schemaResourceUri = message.getHeader(XmlSignatureConstants.HEADER_SCHEMA_RESOURCE_URI, String.class);', 'if (schemaResourceUri == null) {', 'schemaResourceUri = getConfiguration().getSchemaResourceUri();', '}']
['schema resource uri ', ['getconfiguration', 'getschemaresourceuri']]
camel sample_6771

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JibxDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jibx.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jibx.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1221

['public Producer createProducer() throws Exception {']
['resolve producer digitalocean endpoint ', ['configuration', 'getresource']]
camel sample_8903

['if (idempotentRepository instanceof ExchangeIdempotentRepository) {', 'newKey = !((ExchangeIdempotentRepository<String>) idempotentRepository).contains(exchange, messageId);', '} else {', 'newKey = !idempotentRepository.contains(messageId);', '}', '}', 'if (!newKey) {', 'exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE);', 'onDuplicate(exchange, messageId);', 'if (skipDuplicate) {']
['ignoring duplicate message with id for exchange ', ['messageid', 'exchange']]
camel sample_4473

['public void doBefore() {']
['invoked the pre consumed method with address ', ['getaddress']]
camel sample_14088

['if (body instanceof String[]) {', 'messageId = this.ironQueue.pushMessages((String[])body, configuration.getVisibilityDelay());', '} else if (body instanceof String) {', 'if (configuration.isPreserveHeaders()) {', 'body = GsonUtil.getBodyFromMessage(exchange.getIn());', '}', 'messageId = this.ironQueue.push((String)body, configuration.getVisibilityDelay());', '} else {', 'throw new InvalidPayloadException(exchange, String.class);', '}']
['send request from exchange ', ['body', 'exchange']]
camel sample_14572

['if (body instanceof String[]) {', 'messageId = this.ironQueue.pushMessages((String[])body, configuration.getVisibilityDelay());', '} else if (body instanceof String) {', 'if (configuration.isPreserveHeaders()) {', 'body = GsonUtil.getBodyFromMessage(exchange.getIn());', '}', 'messageId = this.ironQueue.push((String)body, configuration.getVisibilityDelay());', '} else {', 'throw new InvalidPayloadException(exchange, String.class);', '}']
['received messageid ', ['messageid']]
camel sample_14572

['protected CacheManager createCacheManagerInstance() {', 'if (is == null) {']
['creating cachemanager using ehcache defaults ', []]
camel sample_10531

['protected CacheManager createCacheManagerInstance() {', 'if (is == null) {', 'return EHCacheUtil.createCacheManager();', '}']
['creating cachemanager using camel cache configuration ', ['configurationfile']]
camel sample_10531

['public void initializeProcess() throws Exception {', 'if (LOG.isInfoEnabled()) {']
['starting mongodb tailable cursor consumer binding to collection db col ', ['endpoint', 'getmongodatabase', 'endpoint', 'getcollection']]
camel sample_10474

['public void run() {', 'stoppedLatch = new CountDownLatch(1);', 'while (keepRunning) {', 'doRun();', 'if (keepRunning) {', 'cursor.close();', 'if (LOG.isDebugEnabled()) {']
['regenerating cursor with lastval waiting ms first ', ['tailtracking', 'lastval', 'cursorregenerationdelay']]
camel sample_10474

['protected void stop() throws Exception {', 'if (LOG.isInfoEnabled()) {']
['stopping mongodb tailable cursor consumer bound to collection db col ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_10474

['protected void stop() throws Exception {', 'if (LOG.isInfoEnabled()) {', '}', 'keepRunning = false;', 'if (cursor != null) {', 'cursor.close();', '}', 'awaitStopped();', 'if (LOG.isInfoEnabled()) {']
['stopped mongodb tailable cursor consumer bound to collection db col ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_10474

['private void doRun() {', 'try {', 'while (cursor.hasNext() && keepRunning) {', 'Document dbObj = cursor.next();', 'Exchange exchange = endpoint.createMongoDbExchange(dbObj);', 'try {', 'if (LOG.isTraceEnabled()) {']
['sending exchange objectid ', ['exchange', 'dbobj', 'get', 'mongo', 'id']]
camel sample_10474

['try {', 'if (LOG.isTraceEnabled()) {', '}', 'consumer.getProcessor().process(exchange);', '} catch (Exception e) {', '}', 'tailTracking.setLastVal(dbObj);', '}', '} catch (MongoCursorNotFoundException e) {', 'if (keepRunning) {']
['cursor not found exception from mongodb will regenerate cursor this is normal behaviour with tailable cursors ', ['e']]
camel sample_10474

['private void awaitStopped() throws InterruptedException {', 'if (!stopped) {']
['going to wait for stopping ', []]
camel sample_10474

['return template.requestBody("direct:start", new SendEmail("user" + index + "@somewhere.org"), SendEmail.class);', '}', '});', 'responses.put(index, out);', '}', 'assertMockEndpointsSatisfied(30, TimeUnit.SECONDS);', 'assertEquals(files, responses.size());', 'for (Future<SendEmail> future : responses.values()) {', 'SendEmail sendEmail = future.get();', 'assertNotNull(sendEmail);']
['persisted the sendemail entity with the id and the address ', ['sendemail', 'getid', 'sendemail', 'getaddress']]
camel sample_14067

['Collections.addAll(methods, Method.OPTIONS);', 'if (endpoint.getRestletMethods() != null) {', 'Collections.addAll(methods, endpoint.getRestletMethods());', '} else {', 'Collections.addAll(methods, endpoint.getRestletMethod());', '}', 'for (Method method : methods) {', 'router.removeRoute(method);', '}', 'if (LOG.isDebugEnabled()) {']
['detached restlet uripattern method ', ['router', 'geturipattern', 'endpoint', 'getrestletmethod']]
camel sample_9304

['private MethodBasedRouter getMethodRouter(String uriPattern, boolean addIfEmpty) {', 'synchronized (routers) {', 'MethodBasedRouter result = routers.get(uriPattern);', 'if (result == null && addIfEmpty) {', 'result = new MethodBasedRouter(uriPattern);']
['added method based router ', ['result']]
camel sample_9304

['protected void addServerIfNecessary(RestletEndpoint endpoint) throws Exception {', 'String key = buildKey(endpoint);', 'RestletHost host;', 'synchronized (restletHostRegistry) {', 'host = restletHostRegistry.get(key);', 'if (host == null) {', 'host = createRestletHost();', 'host.configure(endpoint, component);', 'restletHostRegistry.put(key, host);']
['added host ', ['key']]
camel sample_9304

['Map<String, String> realm = endpoint.getRestletRealm();', 'if (realm != null && realm.size() > 0) {', 'ChallengeAuthenticator guard = new ChallengeAuthenticator(component.getContext() .createChildContext(), ChallengeScheme.HTTP_BASIC, "Camel-Restlet Endpoint Realm");', 'MapVerifier verifier = new MapVerifier();', 'for (Map.Entry<String, String> entry : realm.entrySet()) {', 'verifier.getLocalSecrets().put(entry.getKey(), entry.getValue().toCharArray());', '}', 'guard.setVerifier(verifier);', 'guard.setNext(target);', 'target = guard;']
['target has been set to guard ', ['guard']]
camel sample_9304

['}', 'List<Method> methods = new ArrayList<>();', 'Collections.addAll(methods, Method.OPTIONS);', 'if (endpoint.getRestletMethods() != null) {', 'Collections.addAll(methods, endpoint.getRestletMethods());', '} else {', 'Collections.addAll(methods, endpoint.getRestletMethod());', '}', 'for (Method method : methods) {', 'router.addRoute(method, target);']
['attached restlet uripattern method ', ['uripattern', 'method']]
camel sample_9304

['if (endpoint.getRestletMethods() != null) {', 'Collections.addAll(methods, endpoint.getRestletMethods());', '} else {', 'Collections.addAll(methods, endpoint.getRestletMethod());', '}', 'for (Method method : methods) {', 'router.addRoute(method, target);', '}', 'if (!router.hasBeenAttached()) {', 'component.getDefaultHost().attach( offsetPath == null ? uriPattern : offsetPath + uriPattern, router);']
['attached methodrouter uripattern ', ['uripattern']]
camel sample_9304

['Collections.addAll(methods, endpoint.getRestletMethod());', '}', 'for (Method method : methods) {', 'router.addRoute(method, target);', '}', 'if (!router.hasBeenAttached()) {', 'component.getDefaultHost().attach( offsetPath == null ? uriPattern : offsetPath + uriPattern, router);', '}', 'if (!router.isStarted()) {', 'router.start();']
['started methodrouter uripattern ', ['uripattern']]
camel sample_9304

['private void deAttachUriPatternFromRestlet(String uriPattern, RestletEndpoint endpoint, Restlet target) throws Exception {', 'component.getDefaultHost().detach(target);']
['de attached methodrouter uripattern ', ['uripattern']]
camel sample_9304

['public static void writeBody(IoSession session, Object body, Exchange exchange, long writeTimeout) throws CamelExchangeException {', 'WriteFuture future = session.write(body);']
['waiting for write to complete for body using session ', ['body', 'session']]
camel sample_11635

['for (int i = 1; i <= consumerRouteCount; i++) {', 'getMockEndpoint("mock:test.consumer." + i).expectedMessageCount(messageCount);', '}', 'List<BatchMessage<String>> messages = new ArrayList<BatchMessage<String>>();', 'for (int i = 1; i <= messageCount; i++) {', 'String body = "Hello World " + i;', 'BatchMessage<String> message = new BatchMessage<String>(body, null);', 'messages.add(message);', '}', 'try {']
['send messages ', []]
camel sample_12330

['}', 'List<BatchMessage<String>> messages = new ArrayList<BatchMessage<String>>();', 'for (int i = 1; i <= messageCount; i++) {', 'String body = "Hello World " + i;', 'BatchMessage<String> message = new BatchMessage<String>(body, null);', 'messages.add(message);', '}', 'try {', 'template.sendBody("direct:start", messages);', '} catch (Exception e) {']
['send again ', []]
camel sample_12330

['protected void addRoute(final String destinationName, final int consumerRouteCount, final CountDownLatch latch) throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:start") .id("producer.route") .log("Producer Route Body: ${body}") .to("mock:test.producer") .to(destinationName + "?transacted=true") .process(new Processor() {', 'private final AtomicInteger counter = new AtomicInteger(0);', 'public void process(Exchange exchange) throws Exception {', 'if (counter.getAndIncrement() == 0) {']
['batchmessage received without redelivery rolling back ', []]
camel sample_12330

['public static String generateInvalidPayloadExceptionMessage(final byte[] hl7Bytes, final int length) {', 'if (hl7Bytes == null) {', 'return "HL7 payload is null";', '}', 'if (hl7Bytes.length <= 0) {', 'return "HL7 payload is empty";', '}', 'if (length > hl7Bytes.length) {']
['the length specified for the payload array is greater than the actual length of the array only validating bytes ', ['length', 'length', 'length']]
camel sample_13872

['mllpSocketBuffer.write(fieldSeparator);', 'mllpSocketBuffer.write("ACK".getBytes(), 0, 3);', 'int msh92start = -1;', 'for (int j = fieldSeparatorIndexes.get(7) + 1; j < fieldSeparatorIndexes.get(8); ++j) {', 'if (componentSeparator == hl7MessageBytes[j]) {', 'msh92start = j;', 'break;', '}', '}', 'if (-1 == msh92start) {']
['didn t find component separator for msh sending ack in msh ', []]
camel sample_13872

['public Promise<String> execute(final String input) throws WorkflowException {', 'final Settable<String> result = new Settable<String>();', 'final AtomicReference<Promise<?>> methodResult = new AtomicReference<Promise<?>>();', 'new TryCatchFinally() {', 'protected void doTry() throws Throwable {', 'Object[] parameters = dataConverter.fromData(input, Object[].class);', 'long startTime = workflowClock.currentTimeMillis();', 'boolean replaying = contextProvider.getDecisionContext().getWorkflowClock().isReplaying();']
['processing workflow execute ', []]
camel sample_8796

['public void signalRecieved(String signalName, String input) throws WorkflowException {', 'Object[] parameters = dataConverter.fromData(input, Object[].class);', 'try {']
['processing workflow signalrecieved ', []]
camel sample_8796

['public String getWorkflowState() throws WorkflowException {', 'try {']
['processing workflow getworkflowstate ', []]
camel sample_8796

['public void testInvokingSimpleServerWithParams() throws Exception {', 'Exchange exchange = sendSimpleMessage();', 'org.apache.camel.Message out = exchange.getOut();', 'String result = out.getBody(String.class);']
['received output text ', ['result']]
camel sample_7930

['public void testInvokingJaxWsServerWithParams() throws Exception {', 'Exchange exchange = sendJaxWsMessage();', 'org.apache.camel.Message out = exchange.getOut();', 'String result = out.getBody(String.class);']
['received output text ', ['result']]
camel sample_7930

['public void testExpression() throws Exception {', 'Language language = assertResolveLanguage(getLanguageName());', 'Expression expression = language.createExpression("SELECT * FROM org.apache.camel.builder.sql.Person where city = \'London\'");', 'List<?> value = expression.evaluate(exchange, List.class);', 'assertEquals("List size", 2, value.size());', 'for (Object person : value) {']
['found ', ['person']]
camel sample_13464

['public void testExpressionWithHeaderVariable() throws Exception {', 'Language language = assertResolveLanguage(getLanguageName());', 'Expression expression = language.createExpression("SELECT * FROM org.apache.camel.builder.sql.Person where name = :fooHeader");', 'List<?> value = expression.evaluate(exchange, List.class);', 'assertEquals("List size", 1, value.size());', 'for (Object person : value) {']
['found ', ['person']]
camel sample_13464

['MockEndpoint mockEndpoint = getMockEndpoint("mock:a");', 'mockEndpoint.expectedBodiesReceived("<b>Hello World</b>");', 'template.requestBodyAndHeader(uri, new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml");', 'mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_11009

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(deadLetterChannel("mock:global") .maximumRedeliveries(2) .redeliveryDelay(5000));']
['direct start mock exhausted seda foo ', ['onexception', 'connectexception', 'class', 'maximumredeliveries', 'redeliverydelay', 'logretryattempted', 'true', 'retryattemptedloglevel', 'logginglevel', 'warn', 'to', 'end', 'to']]
camel sample_3836

['public Collection<BoxGroup> getAllGroups() {', 'try {']
['getting all groups ', []]
camel sample_17427

['public void deleteGroup(String groupId) {', 'try {']
['deleting group ', ['groupid']]
camel sample_17427

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = input.getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());']
['sending data ', []]
camel sample_7658

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = input.getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());', 'socket.send(packet);', 'Thread.sleep(1000);', 'byte[] buf = new byte[128];', 'DatagramPacket receive = new DatagramPacket(buf, buf.length, address, getPort());']
['receiveing data ', []]
camel sample_7658

['public void testGrowIssue() throws Exception {', 'StringBuilder sb = new StringBuilder(size);', 'for (int i = 0; i < 1024; i++) {', 'sb.append("X");', '}', 'final Buffer key = codec.marshallKey("foo");', 'for (int i = 0; i < size; i++) {', 'final Buffer data = codec.marshallKey(i + "-" + sb.toString());']
['updating ', ['i']]
camel sample_11727

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "camel context");', 'ObjectHelper.notNull(serviceDiscovery, "service discovery");', 'ObjectHelper.notNull(serviceChooser, "service chooser");', 'ObjectHelper.notNull(serviceFilter, "service serviceFilter");']
['servicecall is using default load balancer with service discovery type service filter type and service chooser type ', ['servicediscovery', 'getclass', 'servicefilter', 'getclass', 'servicechooser', 'getclass']]
camel sample_4131

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MyBatisComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mybatis.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mybatis.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_604

['protected void initCustomRegistry(BlueprintCamelContext context) {', 'Registry registry = getBeanForType(Registry.class);', 'if (registry != null) {']
['using custom registry ', ['registry']]
camel sample_8112

['public void afterPropertiesSet() throws Exception {', 'super.afterPropertiesSet();', 'ClassLoader cl = new BundleDelegatingClassLoader(bundleContext.getBundle());']
['set the application context classloader to ', ['cl']]
camel sample_8112

['super.afterPropertiesSet();', 'ClassLoader cl = new BundleDelegatingClassLoader(bundleContext.getBundle());', 'getContext().setApplicationContextClassLoader(cl);', 'osgiCamelContextPublisher = new OsgiCamelContextPublisher(bundleContext);', 'osgiCamelContextPublisher.start();', 'getContext().getManagementStrategy().addEventNotifier(osgiCamelContextPublisher);', 'try {', 'getClass().getClassLoader().loadClass("org.osgi.service.event.EventAdmin");', 'getContext().getManagementStrategy().addEventNotifier(new OsgiEventAdminNotifier(bundleContext));', '} catch (Throwable t) {']
['eventadmin package is not available just don t use it ', []]
camel sample_8112

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(deadLetterChannel("mock:global") .maximumRedeliveries(2) .redeliveryDelay(5000));']
['direct start mock exhausted seda foo ', ['onexception', 'connectexception', 'class', 'maximumredeliveries', 'redeliverydelay', 'logretryattempted', 'true', 'retryattemptedloglevel', 'logginglevel', 'warn', 'to', 'end', 'to']]
camel sample_3924

['public void testThreadPoolTaskExecutor() throws Exception {', 'context.startRoute("threadPool");', 'Long beforeThreadCount = currentThreadCount();', 'getMockEndpoint("mock:result.threadPool").expectedMessageCount(1000);', 'doSendMessages("foo.threadPool", 500, 5, DefaultTaskExecutorType.ThreadPool);', 'Thread.sleep(100);', 'doSendMessages("foo.threadPool", 500, 5, DefaultTaskExecutorType.ThreadPool);', 'assertMockEndpointsSatisfied();', 'Long numberThreadsCreated = currentThreadCount() - beforeThreadCount;']
['number of threads created testthreadpooltaskexecutor ', ['numberthreadscreated']]
camel sample_7064

['public void testSimpleAsyncTaskExecutor() throws Exception {', 'context.startRoute("simpleAsync");', 'Long beforeThreadCount = currentThreadCount();', 'getMockEndpoint("mock:result.simpleAsync").expectedMessageCount(1000);', 'doSendMessages("foo.simpleAsync", 500, 5, DefaultTaskExecutorType.SimpleAsync);', 'Thread.sleep(100);', 'doSendMessages("foo.simpleAsync", 500, 5, DefaultTaskExecutorType.SimpleAsync);', 'assertMockEndpointsSatisfied();', 'Long numberThreadsCreated = currentThreadCount() - beforeThreadCount;']
['number of threads created testsimpleasynctaskexecutor ', ['numberthreadscreated']]
camel sample_7064

['public void testDefaultTaskExecutor() throws Exception {', 'context.startRoute("default");', 'Long beforeThreadCount = currentThreadCount();', 'getMockEndpoint("mock:result.default").expectedMessageCount(1000);', 'doSendMessages("foo.default", 500, 5, null);', 'Thread.sleep(100);', 'doSendMessages("foo.default", 500, 5, null);', 'assertMockEndpointsSatisfied();', 'Long numberThreadsCreated = currentThreadCount() - beforeThreadCount;']
['number of threads created testdefaulttaskexecutor ', ['numberthreadscreated']]
camel sample_7064

['public void testDefaultTaskExecutorThreadPoolAtComponentConfig() throws Exception {', 'context.startRoute("default");', 'Long beforeThreadCount = currentThreadCount();', 'getMockEndpoint("mock:result.default").expectedMessageCount(1000);', 'doSendMessages("foo.default", 500, 5, DefaultTaskExecutorType.ThreadPool);', 'Thread.sleep(100);', 'doSendMessages("foo.default", 500, 5, DefaultTaskExecutorType.ThreadPool);', 'assertMockEndpointsSatisfied();', 'Long numberThreadsCreated = currentThreadCount() - beforeThreadCount;']
['number of threads created testdefaulttaskexecutorthreadpoolatcomponentconfig ', ['numberthreadscreated']]
camel sample_7064

['private String createCandidateName() {', 'StringBuilder builder = new StringBuilder();', 'try {', 'builder.append(InetAddress.getLocalHost().getCanonicalHostName());', '} catch (UnknownHostException ex) {']
['failed to get the local hostname ', ['ex']]
camel sample_12672

['private void awaitElectionResults() {', 'while (electionComplete.getCount() > 0) {', 'try {']
['awaiting election results ', []]
camel sample_12672

['private ZooKeeperEndpoint createCandidateNode(CamelContext camelContext) {']
['initializing zookeeperelection with uri ', ['uri']]
camel sample_12672

['private ZooKeeperEndpoint createCandidateNode(CamelContext camelContext) {', 'ZooKeeperEndpoint zep = camelContext.getEndpoint(uri, ZooKeeperEndpoint.class);', 'zep.getConfiguration().setCreate(true);', 'String fullpath = createFullPathToCandidate(zep);', 'Exchange e = zep.createExchange();', 'e.setPattern(ExchangePattern.InOut);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_NODE, fullpath);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.EPHEMERAL_SEQUENTIAL);', 'producerTemplate.send(zep, e);', 'if (e.isFailed()) {']
['error setting up election node ', ['fullpath', 'e', 'getexception']]
camel sample_12672

['ZooKeeperEndpoint zep = camelContext.getEndpoint(uri, ZooKeeperEndpoint.class);', 'zep.getConfiguration().setCreate(true);', 'String fullpath = createFullPathToCandidate(zep);', 'Exchange e = zep.createExchange();', 'e.setPattern(ExchangePattern.InOut);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_NODE, fullpath);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.EPHEMERAL_SEQUENTIAL);', 'producerTemplate.send(zep, e);', 'if (e.isFailed()) {', '} else {']
['candidate node has been created ', ['fullpath']]
camel sample_12672

['Exchange e = zep.createExchange();', 'e.setPattern(ExchangePattern.InOut);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_NODE, fullpath);', 'e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.EPHEMERAL_SEQUENTIAL);', 'producerTemplate.send(zep, e);', 'if (e.isFailed()) {', '} else {', 'try {', 'camelContext.addRoutes(new ElectoralMonitorRoute(zep));', '} catch (Exception ex) {']
['error configuring zookeeperelection ', ['ex']]
camel sample_12672

['private void notifyElectionWatchers() {', 'for (ElectionWatcher watcher : watchers) {', 'try {', 'watcher.electionResultChanged();', '} catch (Exception e) {']
['election watcher of type threw an exception ', ['watcher', 'watcher', 'getclass', 'e']]
camel sample_12672

['public void configure() throws Exception {', 'from(zep).id("election-route-" + candidateName).sort(body(), comparator).process(new Processor() {', 'public void process(Exchange e) throws Exception {', 'List<String> candidates = e.getIn().getMandatoryBody(List.class);', 'int location = findCandidateLocationInCandidatesList(candidates, candidateName);', 'if (location != -1) {', 'masterNode.set(location <= enabledCount);']
['this node is number on the candidate list election is configured for the top this node will be enabled disabled ', ['new', 'object', 'location', 'enabledcount', 'masternode', 'get']]
camel sample_12672

['public <K, V> BasicCache<K, V> getCache(String cacheName) {', 'BasicCache<K, V> cache;', 'if (ObjectHelper.isEmpty(cacheName)) {', 'cache = cacheContainer.getCache();', 'cacheName = cache.getName();', '} else {', 'cache = cacheContainer.getCache(cacheName);', '}']
['cache ', ['cachename']]
camel sample_13960

['public <K, V> BasicCache<K, V> getCache(String cacheName, boolean forceReturnValue) {', 'if (isCacheContainerRemote()) {', 'BasicCache<K, V> cache;', 'if (ObjectHelper.isEmpty(cacheName)) {', 'cache = InfinispanUtil.asRemote(cacheContainer).getCache(forceReturnValue);', 'cacheName = cache.getName();', '} else {', 'cache = InfinispanUtil.asRemote(cacheContainer).getCache(cacheName, forceReturnValue);', '}']
['cache ', ['cachename']]
camel sample_13960

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'Processor myProcessor = new Processor() {', 'public void process(Exchange e) throws Exception {']
['received exchange ', ['e']]
camel sample_7121

['public void testCxfEndpointHasCamelContext() throws Exception {', 'String s = "<GetPerson xmlns=\\"http: Document xml = context.getTypeConverter().convertTo(Document.class, s);']
['endpoints ', ['context', 'getendpoints']]
camel sample_7855

['public void unsubscribe() {', 'if (unsubscribed.compareAndSet(false, true)) {', 'if (consumer != null) {', 'workerPool.submit(new Runnable() {', 'public void run() {', 'try {', 'ServiceHelper.stopServices(consumer);', '} catch (Exception e) {']
['error stopping consumer due this exception is ignored ', ['consumer', 'e', 'getmessage', 'e']]
camel sample_11183

['public static void startThriftServer() throws Exception {', 'processor = new Calculator.Processor(new CalculatorSyncServerImpl());', 'TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters();', 'sslParams.setKeyStore(KEY_STORE_PATH, SECURITY_STORE_PASSWORD);', 'serverTransport = TSSLTransportFactory.getServerSocket(THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT, InetAddress.getByName("localhost"), sslParams);', 'TThreadPoolServer.Args args = new TThreadPoolServer.Args(serverTransport);', 'args.processor((TProcessor)processor);', 'server = new TThreadPoolServer(args);', 'Runnable simple = new Runnable() {', 'public void run() {']
['thrift secured server started on port ', ['thrift', 'test', 'port']]
camel sample_13014

['public static void stopThriftServer() throws IOException {', 'if (server != null) {', 'server.stop();', 'serverTransport.close();']
['thrift secured server stoped ', []]
camel sample_13014

['public void testCalculateMethodInvocation() throws Exception {']
['thrift calculate method sync test start ', []]
camel sample_13014

['public void testCalculateWithException() throws Exception {']
['thrift calculate method with business exception sync test start ', []]
camel sample_13014

['public void testVoidMethodInvocation() throws Exception {']
['thrift method with empty parameters and void output sync test start ', []]
camel sample_13014

['public void testOneWayMethodInvocation() throws Exception {']
['thrift one way method sync test start ', []]
camel sample_13014

['public void testAllTypesMethodInvocation() throws Exception {']
['thrift method with all possile types sync test start ', []]
camel sample_13014

['resultEndpoint.expectedMessageCount(1);', 'PurchaseOrder expectedBody = new PurchaseOrder();', 'expectedBody.setAmount(20.0);', 'expectedBody.setName("Wine");', 'expectedBody.setPrice(5.0);', 'template.sendBody("direct:start", expectedBody);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'Object actualBody = exchange.getIn().getBody();']
['received ', ['actualbody']]
camel sample_10268

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). marshal().xstream(PurchaseOrder.class). process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['marshalled ', ['exchange', 'getin', 'getbody', 'string', 'class']]
camel sample_10268

['public void execute() {', 'SelectRequest request = new SelectRequest() .withSelectExpression(determineSelectExpression()) .withConsistentRead(determineConsistentRead()) .withNextToken(determineNextToken());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8759

['public void execute() {', 'SelectRequest request = new SelectRequest() .withSelectExpression(determineSelectExpression()) .withConsistentRead(determineConsistentRead()) .withNextToken(determineNextToken());', 'SelectResult result = this.sdbClient.select(request);']
['received result ', ['result']]
camel sample_8759

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:zookeeper?delay=1s&period=1s") .routeId("route-" + id) .routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_12605

['public void start() {', 'if (getFile() == null) {', 'throw new IllegalArgumentException("A file must be configured");', '}', 'if (LOG.isDebugEnabled()) {']
['starting leveldb using file ', ['getfile']]
camel sample_13917

['private DBFactory getFactory() {', 'String[] classNames = new String[] {', '"org.fusesource.leveldbjni.JniDBFactory", "org.iq80.leveldb.impl.Iq80DBFactory" };', 'for (String cn : classNames) {', 'try {', 'Class<?> clz = getClass().getClassLoader().loadClass(cn);', 'DBFactory factory = (DBFactory) clz.newInstance();', 'if (LOG.isDebugEnabled()) {']
['using implementation of org leveldb dbfactory ', ['factory', 'getclass', 'getname']]
camel sample_13917

['public void stop() {', 'File file = getFile();']
['stopping leveldb using file ', ['file']]
camel sample_13917

['public void testGetEnterpriseEvents() throws Exception {', 'Date before = new Date();', 'Date after = new Date();', 'after.setTime(before.getTime() - ONE_MINUTE_OF_MILLISECONDS);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.position", null);', 'headers.put("CamelBox.after", after);', 'headers.put("CamelBox.before", before);', 'headers.put("CamelBox.types", null);', 'final java.util.List result = requestBodyAndHeaders("direct: assertNotNull("getEnterpriseEvents result", result);']
['getenterpriseevents ', ['result']]
camel sample_17407

['public void process(Exchange exchange) throws Exception {']
['received ', ['exchange']]
camel sample_7013

['protected void assertDurableSubscriberEndpointIsValid(JmsEndpoint endpoint) throws Exception {', 'JmsConfiguration configuration = endpoint.getConfiguration();', 'assertEquals("getDurableSubscriptionName()", "James", configuration.getDurableSubscriptionName());', 'assertEquals("getClientId()", "ABC", configuration.getClientId());', 'assertEquals("isDeliveryPersistent()", true, configuration.isDeliveryPersistent());', 'JmsConsumer consumer = endpoint.createConsumer(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['received ', ['exchange']]
camel sample_7013

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'int connectTimeout = 500;', 'int responseTimeout = 5000;', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";']
['test route complete mock oncompletion onfailureonly log logginglevel info routeid complete to mllp mllpclient getmllphost mllpclient getmllpport connecttimeout responsetimeout routeid routeid to result ', ['oncompleteonly', 'log', 'logginglevel', 'info', 'routeid', 'to', 'test', 'route', 'mock', 'fromf']]
camel sample_13852

['public void test() throws Exception {', 'String result = template.requestBody("direct:out", "hello", String.class);', 'Assert.assertEquals("hello", result);']
['sleeping for seconds and no netty exception should occur ', []]
camel sample_6602

['public void testWSHttpCallEcho() throws Exception {', 'final List<String> received = new ArrayList<String>();', 'final CountDownLatch latch = new CountDownLatch(2);', 'DefaultAsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13151

['assertValidContext(context);', 'context.getShutdownStrategy().setTimeout(10);', 'template = context.createProducerTemplate();', 'template.start();', 'consumer = context.createConsumerTemplate();', 'consumer.start();', 'oneExchangeDone = event().whenDone(1).create();', 'if (isUseRouteBuilder()) {', 'RouteBuilder[] builders = createRouteBuilders();', 'for (RouteBuilder builder : builders) {']
['using created route builder ', ['builder']]
camel sample_1597

['consumer = context.createConsumerTemplate();', 'consumer.start();', 'oneExchangeDone = event().whenDone(1).create();', 'if (isUseRouteBuilder()) {', 'RouteBuilder[] builders = createRouteBuilders();', 'for (RouteBuilder builder : builders) {', 'context.addRoutes(builder);', '}', 'startCamelContext();', '} else {']
['isuseroutebuilder is false ', []]
camel sample_1597

['protected void tearDown() throws Exception {']
['teardown test ', ['getname']]
camel sample_1597

['};', 'List<Route> list = getRouteListWithCurrentContext(builder);', 'assertEquals("Number routes created" + list, 1, list.size());', 'for (Route route : list) {', 'Endpoint key = route.getEndpoint();', 'assertEquals("From endpoint", "seda: EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route);', 'Processor processor = consumerRoute.getProcessor();', 'Channel channel = unwrapChannel(processor);', 'assertIsInstanceOf(LoggingErrorHandler.class, channel.getErrorHandler());', 'SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, channel.getNextProcessor());']
['found sendprocessor ', ['sendprocessor']]
camel sample_3729

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'Exception e = exchange.getException();', 'Throwable caught = catches(exchange, e);', 'if (exchange.getProperty(Exchange.EXCEPTION_HANDLED) != null || caught == null) {', 'callback.done(true);', 'return true;', '}', 'if (LOG.isTraceEnabled()) {']
['this catchprocessor catches the exception caused by ', ['caught', 'getclass', 'getname', 'e', 'getmessage']]
camel sample_4516

['}', 'if (exchange.getProperty(Exchange.FAILURE_ENDPOINT) == null) {', 'exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));', '}', 'exchange.setProperty(Exchange.EXCEPTION_HANDLED, true);', 'exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e);', 'exchange.setException(null);', 'exchange.removeProperty(Exchange.REDELIVERY_EXHAUSTED);', 'final boolean handled = handles(exchange);', 'if (LOG.isDebugEnabled()) {']
['the exception is handled for the exception caused by ', ['new', 'object', 'handled', 'e', 'getclass', 'getname', 'e', 'getmessage']]
camel sample_4516

['protected void doStart() throws Exception {', 'super.doStart();', 'loadCoreTypeConverters();', 'if (loadTypeConverters) {', 'int core = typeMappings.size();', 'loadTypeConverters();', 'int additional = typeMappings.size() - core;']
['type converters loaded core classpath ', ['core', 'additional']]
camel sample_4003

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XQueryComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xquery.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xquery.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1201

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_8923

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'HeaderDto headerDto = new HeaderDto("org", "company", 1);']
['sending with id ', ['value', 'headerdto']]
camel sample_8923

['public void testLoadTestJdbcAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'HeaderDto headerDto = new HeaderDto("org", "company", 1);', 'template.sendBodyAndHeader("seda:start?size=" + SIZE, value, "id", headerDto);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_8923

['public void process(Exchange exchange) throws Exception {', 'Sizes sizes = getEndpoint().getDigitalOceanClient().getAvailableSizes(configuration.getPage());']
['all sizes page ', ['sizes', 'getsizes', 'configuration', 'getpage']]
camel sample_8889

['totalIn.incrementAndGet();', '}', 'boolean completeAllGroups = exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, false, boolean.class);', 'if (completeAllGroups) {', 'forceCompletionOfAllGroups();', 'return;', '}', 'String key = correlationExpression.evaluate(exchange, String.class);', 'if (ObjectHelper.isEmpty(key)) {', 'if (isIgnoreInvalidCorrelationKeys()) {']
['invalid correlation key this exchange will be ignored ', ['exchange']]
camel sample_4453

['boolean exhaustedRetries = true;', 'int attempt = 0;', 'do {', 'attempt++;', 'Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false);', 'try {', 'aggregated = doAggregation(key, copy);', 'exhaustedRetries = false;', 'break;', '} catch (OptimisticLockingAggregationRepository.OptimisticLockingException e) {']
['on attempt optimisticlockingaggregationrepository threw optimisticlockingexception while trying to add key and exchange ', ['new', 'object', 'attempt', 'aggregationrepository', 'key', 'copy', 'e']]
camel sample_4453

['private List<Exchange> doAggregation(String key, Exchange newExchange) throws CamelExchangeException {']
['onaggregation start with correlation key ', ['key']]
camel sample_4453

['answer = onAggregation(oldExchange, newExchange);', '} catch (Throwable e) {', 'throw new CamelExchangeException("Error occurred during aggregation", newExchange, e);', '}', 'if (answer == null) {', 'throw new CamelExchangeException("AggregationStrategy " + aggregationStrategy + " returned null which is not allowed", newExchange);', '}', 'if (aggregationRepository instanceof RecoverableAggregationRepository) {', 'boolean valid = oldExchange == null || answer.getExchangeId().equals(oldExchange.getExchangeId());', 'if (!valid && aggregateRepositoryWarned.compareAndSet(false, true)) {']
['aggregationstrategy should return the oldexchange instance instead of the newexchange whenever possible as otherwise this can lead to unexpected behavior with some recoverableaggregationrepository implementations ', []]
camel sample_4453

['complete = isCompleted(key, answer);', 'if (complete == null) {', 'trackTimeout(key, newExchange);', '}', '}', 'if (complete == null) {', 'doAggregationRepositoryAdd(newExchange.getContext(), key, originalExchange, answer);', '} else {', 'doAggregationComplete(complete, list, key, originalExchange, answer);', '}']
['onaggregation end with correlation key ', ['key']]
camel sample_4453

['protected void doAggregationRepositoryAdd(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange) {']
['in progress aggregated oldexchange newexchange with correlation key ', ['new', 'object', 'oldexchange', 'newexchange', 'key']]
camel sample_4453

['protected void onOptimisticLockingFailure(Exchange oldExchange, Exchange newExchange) {', 'AggregationStrategy strategy = aggregationStrategy;', 'if (strategy instanceof DelegateAggregationStrategy) {', 'strategy = ((DelegateAggregationStrategy) strategy).getDelegate();', '}', 'if (strategy instanceof OptimisticLockingAwareAggregationStrategy) {']
['onoptimisticlockfailure with aggregationstrategy oldexchange newexchange ', ['new', 'object', 'strategy', 'oldexchange', 'newexchange']]
camel sample_4453

['protected void trackTimeout(String key, Exchange exchange) {', 'boolean timeoutSet = false;', 'if (getCompletionTimeoutExpression() != null) {', 'Long value = getCompletionTimeoutExpression().evaluate(exchange, Long.class);', 'if (value != null && value > 0) {', 'if (LOG.isTraceEnabled()) {']
['updating correlation key to timeout after ms as exchange received ', ['new', 'object', 'key', 'value', 'exchange']]
camel sample_4453

['Long value = getCompletionTimeoutExpression().evaluate(exchange, Long.class);', 'if (value != null && value > 0) {', 'if (LOG.isTraceEnabled()) {', '}', 'addExchangeToTimeoutMap(key, exchange, value);', 'timeoutSet = true;', '}', '}', 'if (!timeoutSet && getCompletionTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {']
['updating correlation key to timeout after ms as exchange received ', ['new', 'object', 'key', 'getcompletiontimeout', 'exchange']]
camel sample_4453

['protected Exchange onCompletion(final String key, final Exchange original, final Exchange aggregated, boolean fromTimeout) {', 'if (original != null) {', 'original.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);', '}', 'aggregated.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);', 'if (original != null) {', 'aggregationRepository.remove(aggregated.getContext(), key, original);', '}', 'if (!fromTimeout && timeoutMap != null) {']
['removing correlation key from timeout ', ['key']]
camel sample_4453

['if (strategy instanceof DelegateAggregationStrategy) {', 'strategy = ((DelegateAggregationStrategy) strategy).getDelegate();', '}', 'if (strategy instanceof TimeoutAwareAggregationStrategy) {', 'long timeout = getCompletionTimeout() > 0 ? getCompletionTimeout() : -1;', '((TimeoutAwareAggregationStrategy) strategy).timeout(aggregated, -1, -1, timeout);', '}', '}', 'Exchange answer;', 'if (fromTimeout && isDiscardOnCompletionTimeout()) {']
['aggregation for correlation key discarding aggregated exchange ', ['key', 'aggregated']]
camel sample_4453

['private void onSubmitCompletion(final String key, final Exchange exchange) {']
['aggregation complete for correlation key sending aggregated exchange ', ['key', 'exchange']]
camel sample_4453

['} else if ("predicate".equals(completedBy)) {', 'completedByPredicate.incrementAndGet();', '} else if ("size".equals(completedBy)) {', 'completedBySize.incrementAndGet();', '} else if ("strategy".equals(completedBy)) {', 'completedByStrategy.incrementAndGet();', '}', '}', 'executorService.submit(new Runnable() {', 'public void run() {']
['processing aggregated exchange ', ['exchange']]
camel sample_4453

['public void run() {', 'exchange.addOnCompletion(new AggregateOnCompletion(exchange.getExchangeId()));', 'try {', 'processor.process(exchange);', '} catch (Throwable e) {', 'exchange.setException(e);', '}', 'if (exchange.getException() != null) {', 'getExceptionHandler().handleException("Error processing aggregated exchange", exchange, exchange.getException());', '} else {']
['processing aggregated exchange complete ', ['exchange']]
camel sample_4453

['protected void restoreTimeoutMapFromAggregationRepository() throws Exception {', 'Set<String> keys = aggregationRepository.getKeys();', 'if (keys == null || keys.isEmpty()) {', 'return;', '}', 'StopWatch watch = new StopWatch();']
['starting restoring completiontimeout for existing exchanges from the aggregation repository ', ['keys', 'size']]
camel sample_4453

['protected void restoreTimeoutMapFromAggregationRepository() throws Exception {', 'Set<String> keys = aggregationRepository.getKeys();', 'if (keys == null || keys.isEmpty()) {', 'return;', '}', 'StopWatch watch = new StopWatch();', 'for (String key : keys) {', 'Exchange exchange = aggregationRepository.get(camelContext, key);', 'long timeout = exchange.hasProperties() ? exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, 0, long.class) : 0;', 'if (timeout > 0) {']
['restoring completiontimeout for exchangeid with timeout millis ', ['exchange', 'getexchangeid', 'timeout']]
camel sample_4453

['return;', '}', 'StopWatch watch = new StopWatch();', 'for (String key : keys) {', 'Exchange exchange = aggregationRepository.get(camelContext, key);', 'long timeout = exchange.hasProperties() ? exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, 0, long.class) : 0;', 'if (timeout > 0) {', 'addExchangeToTimeoutMap(key, exchange, timeout);', '}', '}']
['restored completiontimeout conditions in the aggregationtimeoutchecker in ', ['timeoutmap', 'size', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_4453

['public void onFailure(Exchange exchange) {']
['aggregated exchange onfailure ', ['exchange']]
camel sample_4453

['public void onComplete(Exchange exchange) {']
['aggregated exchange oncomplete ', ['exchange']]
camel sample_4453

['public boolean onEviction(String key, String exchangeId) {']
['completion timeout triggered for correlation key ', ['key']]
camel sample_4453

['public boolean onEviction(String key, String exchangeId) {', 'boolean inProgress = inProgressCompleteExchanges.contains(exchangeId);', 'if (inProgress) {']
['aggregated exchange with id is already in progress ', ['exchangeid']]
camel sample_4453

['try {', 'answer = onCompletion(key, answer, answer, true);', 'if (answer != null) {', 'onSubmitCompletion(key, answer);', '}', '} catch (OptimisticLockingAggregationRepository.OptimisticLockingException e) {', 'evictionStolen = true;', '}', '}', 'if (optimisticLocking && evictionStolen) {']
['another camel instance has already successfully correlated or processed this timeout eviction for exchange with id and correlation id ', ['exchangeid', 'key']]
camel sample_4453

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {']
['completion interval task cannot start due camelcontext has not been started yet ', ['camelcontext', 'getname']]
camel sample_4453

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {', 'return;', '}']
['starting completion interval task ', []]
camel sample_4453

['if (!optimisticLocking) {', 'lock.lock();', '}', 'try {', 'for (String key : keys) {', 'boolean stolenInterval = false;', 'Exchange exchange = aggregationRepository.get(camelContext, key);', 'if (exchange == null) {', 'stolenInterval = true;', '} else {']
['completion interval triggered for correlation key ', ['key']]
camel sample_4453

['try {', 'Exchange answer = onCompletion(key, exchange, exchange, false);', 'if (answer != null) {', 'onSubmitCompletion(key, answer);', '}', '} catch (OptimisticLockingAggregationRepository.OptimisticLockingException e) {', 'stolenInterval = true;', '}', '}', 'if (optimisticLocking && stolenInterval) {']
['another camel instance has already processed this interval aggregation for exchange with correlation id ', ['key']]
camel sample_4453

['}', 'if (optimisticLocking && stolenInterval) {', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}', '}']
['completion interval task complete ', []]
camel sample_4453

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {']
['recover check cannot start due camelcontext has not been started yet ', ['camelcontext', 'getname']]
camel sample_4453

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {', 'return;', '}']
['starting recover check ', []]
camel sample_4453

['public void run() {', 'if (!camelContext.getStatus().isStarted()) {', 'return;', '}', 'final Set<String> copyOfInProgress = new LinkedHashSet<String>(inProgressCompleteExchanges);', 'Set<String> exchangeIds = recoverable.scan(camelContext);', 'for (String exchangeId : exchangeIds) {', 'if (!isRunAllowed()) {']
['we are shutting down so stop recovering ', []]
camel sample_4453

['for (String exchangeId : exchangeIds) {', 'if (!isRunAllowed()) {', 'return;', '}', 'if (!optimisticLocking) {', 'lock.lock();', '}', 'try {', 'boolean inProgress = copyOfInProgress.contains(exchangeId) || inProgressCompleteExchanges.contains(exchangeId);', 'if (inProgress) {']
['aggregated exchange with id is already in progress ', ['exchangeid']]
camel sample_4453

['if (!isRunAllowed()) {', 'return;', '}', 'if (!optimisticLocking) {', 'lock.lock();', '}', 'try {', 'boolean inProgress = copyOfInProgress.contains(exchangeId) || inProgressCompleteExchanges.contains(exchangeId);', 'if (inProgress) {', '} else {']
['loading aggregated exchange with id to be recovered ', ['exchangeid']]
camel sample_4453

['try {', 'boolean inProgress = copyOfInProgress.contains(exchangeId) || inProgressCompleteExchanges.contains(exchangeId);', 'if (inProgress) {', '} else {', 'Exchange exchange = recoverable.recover(camelContext, exchangeId);', 'if (exchange != null) {', 'String key = exchange.getProperty(Exchange.AGGREGATED_CORRELATION_KEY, String.class);', 'exchange.getIn().setHeader(Exchange.REDELIVERED, Boolean.TRUE);', 'RedeliveryData data = redeliveryState.get(exchange.getExchangeId());', 'if (data != null && recoverable.getMaximumRedeliveries() > 0 && data.redeliveryCounter >= recoverable.getMaximumRedeliveries()) {']
['the recovered exchange is exhausted after attempts will now be moved to dead letter channel ', ['recoverable', 'getmaximumredeliveries', 'recoverable', 'getdeadletteruri']]
camel sample_4453

['} else {', 'if (data == null) {', 'data = new RedeliveryData();', 'redeliveryState.put(exchange.getExchangeId(), data);', '}', 'data.redeliveryCounter++;', 'exchange.getIn().setHeader(Exchange.REDELIVERY_COUNTER, data.redeliveryCounter);', 'if (recoverable.getMaximumRedeliveries() > 0) {', 'exchange.getIn().setHeader(Exchange.REDELIVERY_MAX_COUNTER, recoverable.getMaximumRedeliveries());', '}']
['delivery attempt to recover aggregated exchange with id ', ['data', 'redeliverycounter', 'exchangeid']]
camel sample_4453

['onSubmitCompletion(key, exchange);', '}', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}', '}']
['recover check complete ', []]
camel sample_4453

['protected void doStart() throws Exception {', 'AggregationStrategy strategy = aggregationStrategy;', 'if (strategy instanceof DelegateAggregationStrategy) {', 'strategy = ((DelegateAggregationStrategy) strategy).getDelegate();', '}', 'if (strategy instanceof CamelContextAware) {', '((CamelContextAware) strategy).setCamelContext(camelContext);', '}', 'if (strategy instanceof PreCompletionAwareAggregationStrategy) {', 'preCompletion = true;']
['precompletionawareaggregationstrategy detected aggregator is in pre completion mode ', ['getid']]
camel sample_4453

['if (strategy instanceof PreCompletionAwareAggregationStrategy) {', 'preCompletion = true;', '}', 'if (!preCompletion) {', 'if (getCompletionTimeout() <= 0 && getCompletionInterval() <= 0 && getCompletionSize() <= 0 && getCompletionPredicate() == null && !isCompletionFromBatchConsumer() && getCompletionTimeoutExpression() == null && getCompletionSizeExpression() == null) {', 'throw new IllegalStateException("At least one of the completions options" + " [completionTimeout, completionInterval, completionSize, completionPredicate, completionFromBatchConsumer] must be set");', '}', '}', 'if (getCloseCorrelationKeyOnCompletion() != null) {', 'if (getCloseCorrelationKeyOnCompletion() > 0) {']
['using closedcorrelationkeys with a lrucache with a capacity of ', ['getclosecorrelationkeyoncompletion']]
camel sample_4453

['}', 'if (!preCompletion) {', 'if (getCompletionTimeout() <= 0 && getCompletionInterval() <= 0 && getCompletionSize() <= 0 && getCompletionPredicate() == null && !isCompletionFromBatchConsumer() && getCompletionTimeoutExpression() == null && getCompletionSizeExpression() == null) {', 'throw new IllegalStateException("At least one of the completions options" + " [completionTimeout, completionInterval, completionSize, completionPredicate, completionFromBatchConsumer] must be set");', '}', '}', 'if (getCloseCorrelationKeyOnCompletion() != null) {', 'if (getCloseCorrelationKeyOnCompletion() > 0) {', 'closedCorrelationKeys = LRUCacheFactory.newLRUCache(getCloseCorrelationKeyOnCompletion());', '} else {']
['using closedcorrelationkeys with unbounded capacity ', []]
camel sample_4453

['}', 'if (getCloseCorrelationKeyOnCompletion() != null) {', 'if (getCloseCorrelationKeyOnCompletion() > 0) {', 'closedCorrelationKeys = LRUCacheFactory.newLRUCache(getCloseCorrelationKeyOnCompletion());', '} else {', 'closedCorrelationKeys = new ConcurrentHashMap<String, String>();', '}', '}', 'if (aggregationRepository == null) {', 'aggregationRepository = new MemoryAggregationRepository(optimisticLocking);']
['defaulting to memoryaggregationrepository ', []]
camel sample_4453

['closedCorrelationKeys = new ConcurrentHashMap<String, String>();', '}', '}', 'if (aggregationRepository == null) {', 'aggregationRepository = new MemoryAggregationRepository(optimisticLocking);', '}', 'if (optimisticLocking) {', 'if (!(aggregationRepository instanceof OptimisticLockingAggregationRepository)) {', 'throw new IllegalArgumentException("Optimistic locking cannot be enabled without using an AggregationRepository that implements OptimisticLockingAggregationRepository");', '}']
['optimistic locking is enabled ', []]
camel sample_4453

['ServiceHelper.startServices(aggregationStrategy, processor, aggregationRepository);', 'if (aggregationRepository instanceof RecoverableAggregationRepository) {', 'RecoverableAggregationRepository recoverable = (RecoverableAggregationRepository) aggregationRepository;', 'if (recoverable.isUseRecovery()) {', 'long interval = recoverable.getRecoveryIntervalInMillis();', 'if (interval <= 0) {', 'throw new IllegalArgumentException("AggregationRepository has recovery enabled and the RecoveryInterval option must be a positive number, was: " + interval);', '}', 'recoverService = camelContext.getExecutorServiceManager().newScheduledThreadPool(this, "AggregateRecoverChecker", 1);', 'Runnable recoverTask = new RecoverTask(recoverable);']
['using recoverableaggregationrepository by scheduling recover checker to run every millis ', ['interval']]
camel sample_4453

['throw new IllegalArgumentException("AggregationRepository has recovery enabled and the RecoveryInterval option must be a positive number, was: " + interval);', '}', 'recoverService = camelContext.getExecutorServiceManager().newScheduledThreadPool(this, "AggregateRecoverChecker", 1);', 'Runnable recoverTask = new RecoverTask(recoverable);', 'recoverService.scheduleWithFixedDelay(recoverTask, 1000L, interval, TimeUnit.MILLISECONDS);', 'if (recoverable.getDeadLetterUri() != null) {', 'int max = recoverable.getMaximumRedeliveries();', 'if (max <= 0) {', 'throw new IllegalArgumentException("Option maximumRedeliveries must be a positive number, was: " + max);', '}']
['after failed redelivery attempts exchanges will be moved to deadletteruri ', ['max', 'recoverable', 'getdeadletteruri']]
camel sample_4453

['throw new NoSuchEndpointException(recoverable.getDeadLetterUri());', '}', 'deadLetterProducerTemplate = camelContext.createProducerTemplate();', '}', '}', '}', 'if (getCompletionInterval() > 0 && getCompletionTimeout() > 0) {', 'throw new IllegalArgumentException("Only one of completionInterval or completionTimeout can be used, not both.");', '}', 'if (getCompletionInterval() > 0) {']
['using completioninterval to run every millis ', ['getcompletioninterval']]
camel sample_4453

['throw new IllegalArgumentException("Only one of completionInterval or completionTimeout can be used, not both.");', '}', 'if (getCompletionInterval() > 0) {', 'if (getTimeoutCheckerExecutorService() == null) {', 'setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this, AGGREGATE_TIMEOUT_CHECKER, 1));', 'shutdownTimeoutCheckerExecutorService = true;', '}', 'getTimeoutCheckerExecutorService().scheduleAtFixedRate(new AggregationIntervalTask(), getCompletionInterval(), getCompletionInterval(), TimeUnit.MILLISECONDS);', '}', 'if (getCompletionTimeout() > 0 || getCompletionTimeoutExpression() != null) {']
['using completiontimeout to trigger after millis of inactivity ', ['getcompletiontimeout']]
camel sample_4453

['private void doForceCompletionOnStop() {', 'int expected = forceCompletionOfAllGroups();', 'StopWatch watch = new StopWatch();', 'while (inProgressCompleteExchanges.size() > 0) {']
['waiting for inflight exchanges to complete ', ['getinprogresscompleteexchanges']]
camel sample_4453

['private void doForceCompletionOnStop() {', 'int expected = forceCompletionOfAllGroups();', 'StopWatch watch = new StopWatch();', 'while (inProgressCompleteExchanges.size() > 0) {', 'try {', 'Thread.sleep(100);', '} catch (InterruptedException e) {']
['interrupted while waiting for inflight exchanges to complete ', ['getinprogresscompleteexchanges']]
camel sample_4453

['int expected = forceCompletionOfAllGroups();', 'StopWatch watch = new StopWatch();', 'while (inProgressCompleteExchanges.size() > 0) {', 'try {', 'Thread.sleep(100);', '} catch (InterruptedException e) {', 'break;', '}', '}', 'if (expected > 0) {']
['forcing completion of all groups with exchanges completed in ', ['expected', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_4453

['public int forceCompletionOfGroup(String key) {', 'int total = 0;', 'if (!optimisticLocking) {', 'lock.lock();', '}', 'try {', 'Exchange exchange = aggregationRepository.get(camelContext, key);', 'if (exchange != null) {', 'total = 1;']
['force completion triggered for correlation key ', ['key']]
camel sample_4453

['Exchange answer = onCompletion(key, exchange, exchange, false);', 'if (answer != null) {', 'onSubmitCompletion(key, answer);', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}']
['completed force completion of group ', ['key']]
camel sample_4453

['if (answer != null) {', 'onSubmitCompletion(key, answer);', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}', 'if (total > 0) {']
['forcing completion of group with exchanges ', ['key', 'total']]
camel sample_4453

['public int forceCompletionOfAllGroups() {', 'boolean allow = camelContext.getStatus().isStarted() || camelContext.getStatus().isStopping();', 'if (!allow) {']
['cannot start force completion of all groups because camelcontext has not been started ', ['camelcontext', 'getname']]
camel sample_4453

['public int forceCompletionOfAllGroups() {', 'boolean allow = camelContext.getStatus().isStarted() || camelContext.getStatus().isStopping();', 'if (!allow) {', 'return 0;', '}']
['starting force completion of all groups task ', []]
camel sample_4453

['int total = 0;', 'if (keys != null && !keys.isEmpty()) {', 'if (!optimisticLocking) {', 'lock.lock();', '}', 'total = keys.size();', 'try {', 'for (String key : keys) {', 'Exchange exchange = aggregationRepository.get(camelContext, key);', 'if (exchange != null) {']
['force completion triggered for correlation key ', ['key']]
camel sample_4453

['onSubmitCompletion(key, answer);', '}', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}', '}']
['completed force completion of all groups task ', []]
camel sample_4453

['}', '}', '}', '} finally {', 'if (!optimisticLocking) {', 'lock.unlock();', '}', '}', '}', 'if (total > 0) {']
['forcing completion of all groups with exchanges ', ['total']]
camel sample_4453

['public void validate(Message message, DataType type) throws ValidationException {', 'Object body = message.getBody();']
['validating ', ['body']]
camel sample_17684

['public void validate(Message message, DataType type) throws ValidationException {', 'Object body = message.getBody();', 'if (body instanceof String && body.equals(greeting)) {']
['OK ', []]
camel sample_17684

['Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null);', 'assertEquals(1, set.size());', 'ObjectName on = set.iterator().next();', 'boolean registered = mbeanServer.isRegistered(on);', 'assertEquals("Should be registered", true, registered);', 'String uri = (String) mbeanServer.getAttribute(on, "EndpointUri");', 'assertEquals("direct: String state = (String) mbeanServer.getAttribute(on, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);', 'String uptime = (String) mbeanServer.getAttribute(on, "Uptime");', 'assertNotNull(uptime);']
['uptime ', ['uptime']]
camel sample_2753

['public OperationResult<String> getResult() {', 'try {', 'ZooKeeperHelper.mkdirs(connection, node, false, CreateMode.PERSISTENT);', 'String created = connection.create(node, data, permissions, createMode);', 'if (LOG.isDebugEnabled()) {']
['created node s using mode s ', ['format', 'created', 'createmode']]
camel sample_12652

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HipchatComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hipchat.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hipchat.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_448

['protected ServerConnectionMultiplexor createConnection(final ConnectionId id, final ServerOptions options) {']
['create new server id ', ['id']]
camel sample_6710

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MQTTComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mqtt.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mqtt.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1190

['protected CamelContext createCamelContext() throws Exception {', 'CamelContext camel = super.createCamelContext();', 'SjmsComponent sjms = new SjmsComponent();']
['using live connection to existing activemq broker running on ', ['url']]
camel sample_12347

['public synchronized XMPPTCPConnection createConnection() throws InterruptedException, IOException, SmackException, XMPPException {', 'if (connection != null && connection.isConnected()) {', 'return connection;', '}', 'connection = null;']
['creating new connection ', []]
camel sample_12594

['return connection;', '}', 'connection = null;', 'XMPPTCPConnection newConnection = createConnectionInternal();', 'newConnection.connect();', 'newConnection.addSyncStanzaListener(new XmppLogger("INBOUND"), stanza -> true);', 'newConnection.addSyncStanzaListener(new XmppLogger("OUTBOUND"), stanza -> true);', 'if (!newConnection.isAuthenticated()) {', 'if (user != null) {', 'if (LOG.isDebugEnabled()) {']
['logging in to xmpp as user on connection ', ['user', 'getconnectionmessage', 'newconnection']]
camel sample_12594

['connection = null;', 'XMPPTCPConnection newConnection = createConnectionInternal();', 'newConnection.connect();', 'newConnection.addSyncStanzaListener(new XmppLogger("INBOUND"), stanza -> true);', 'newConnection.addSyncStanzaListener(new XmppLogger("OUTBOUND"), stanza -> true);', 'if (!newConnection.isAuthenticated()) {', 'if (user != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'if (password == null) {']
['no password configured for user on connection ', ['user', 'getconnectionmessage', 'newconnection']]
camel sample_12594

['}', 'if (login) {', 'if (resource != null) {', 'newConnection.login(user, password, Resourcepart.from(resource));', '} else {', 'newConnection.login(user, password);', '}', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['logging in anonymously to xmpp on connection ', ['getconnectionmessage', 'newconnection']]
camel sample_12594

['} else {', 'newConnection.login(user, password);', '}', '}', '} else {', 'if (LOG.isDebugEnabled()) {', '}', 'newConnection.login();', '}', '}']
['created new connection successfully ', ['newconnection']]
camel sample_12594

['public void setUp() throws Exception {']
['setup using bundlecontext ', ['bundlecontext']]
camel sample_7697

['public void tearDown() throws Exception {']
['teardown ', []]
camel sample_7697

['protected void installCamelFeature(String mainFeature) throws Exception {', 'if (!mainFeature.startsWith("camel-")) {', 'mainFeature = "camel-" + mainFeature;', '}']
['install main feature ', ['mainfeature']]
camel sample_7697

['if (currentProperties == null) {', 'currentProperties = newProps;', '}', 'for (Enumeration<String> ek = currentProperties.keys(); ek.hasMoreElements();) {', 'String k = ek.nextElement();', 'newProps.put(k, currentProperties.get(k));', '}', 'for (String p : props.stringPropertyNames()) {', 'newProps.put(p, props.getProperty(p));', '}']
['updating configadmin by overriding properties ', ['config', 'newprops']]
camel sample_7697

['protected void testComponent(String mainFeature, String component) throws Exception {']
['looking up camelcontext mycamel in osgi service registry ', []]
camel sample_7697

['protected void testComponent(String mainFeature, String component) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", SERVICE_TIMEOUT);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);']
['getting camel component ', ['component']]
camel sample_7697

['protected void testComponent(String mainFeature, String component) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", SERVICE_TIMEOUT);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);', 'Component comp = camelContext.getComponent(component, true, false);', 'assertNotNull("Cannot get component with name: " + component, comp);']
['found camel component instance with classname ', ['component', 'comp', 'comp', 'getclass']]
camel sample_7697

['protected void testDataFormat(String mainFeature, String dataFormat) throws Exception {']
['looking up camelcontext mycamel in osgi service registry ', []]
camel sample_7697

['protected void testDataFormat(String mainFeature, String dataFormat) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", SERVICE_TIMEOUT);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);']
['getting camel dataformat ', ['dataformat']]
camel sample_7697

['protected void testDataFormat(String mainFeature, String dataFormat) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", SERVICE_TIMEOUT);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);', 'DataFormat df = camelContext.resolveDataFormat(dataFormat);', 'assertNotNull("Cannot get dataformat with name: " + dataFormat, df);']
['found camel dataformat instance with classname ', ['dataformat', 'df', 'df', 'getclass']]
camel sample_7697

['protected void testLanguage(String mainFeature, String language) throws Exception {']
['looking up camelcontext mycamel in osgi service registry ', []]
camel sample_7697

['protected void testLanguage(String mainFeature, String language) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", 20000);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);']
['getting camel language ', ['language']]
camel sample_7697

['protected void testLanguage(String mainFeature, String language) throws Exception {', 'installCamelFeature(mainFeature);', 'CamelContext camelContext = getOsgiService(bundleContext, CamelContext.class, "(camel.context.name=myCamel)", 20000);', 'assertNotNull("Cannot find CamelContext with name myCamel", camelContext);', 'Language lan = camelContext.resolveLanguage(language);', 'assertNotNull("Cannot get language with name: " + language, lan);']
['found camel language instance with classname ', ['language', 'lan', 'lan', 'getclass']]
camel sample_7697

['List<String> camel = new ArrayList<>();', 'camel.add("camel");', 'if (extra != null && extra.length > 0) {', 'for (String e : extra) {', 'camel.add(e);', '}', '}', 'final String[] camelFeatures = camel.toArray(new String[camel.size()]);', 'switchPlatformEncodingToUTF8();', 'String karafVersion = getKarafVersion();']
['apache karaf version is ', ['karafversion']]
camel sample_7697

['}', '} else {', 'flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";', '}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();']
['test bundle headers ', ['explode', 'dic']]
camel sample_7697

['} else {', 'flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";', '}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {']
['servicereference bundle symbolicname ', ['ref', 'ref', 'getbundle', 'ref', 'getbundle', 'getsymbolicname']]
camel sample_7697

['}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {', '}', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, flt))) {']
['filtered servicereference bundle symbolicname ', ['ref', 'ref', 'getbundle', 'ref', 'getbundle', 'getsymbolicname']]
camel sample_7697

['public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) throws Exception {', 'this.endpoint = endpoint;']
['using fileidempotentrepositoryreadlockstrategy on endpoint ', ['idempotentrepository', 'endpoint']]
camel sample_4812

['public DataFormat resolveDataFormat(String name, CamelContext context) {', 'DataFormat dataFormat = null;', 'DataFormatResolver resolver = context.getRegistry().lookupByNameAndType(".camelBlueprint.dataformatResolver." + name, DataFormatResolver.class);', 'if (resolver != null) {']
['found dataformat resolver in registry ', ['name', 'resolver']]
camel sample_8132

['public DataFormat createDataFormat(String name, CamelContext context) {', 'DataFormatFactory factory = context.getRegistry().lookupByNameAndType(".camelBlueprint.dataformatFactory." + name, DataFormatFactory.class);', 'if (factory  != null) {']
['found dataformat factory in registry ', ['name', 'factory']]
camel sample_8132

['public void doSomething(String body) {', 'ObjectHelper.notNull(destination, "destination");']
['received body ', ['body']]
camel sample_15744

['public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'String queue = endpoint.getQueue();', 'if (msg != null) {', 'try {']
['sending to message ', ['queue', 'msg']]
camel sample_8077

['public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'String queue = endpoint.getQueue();', 'if (msg != null) {', 'try {', 'memcachedClient.set(queue, 0, msg);', '} catch (Exception e) {', 'throw new CamelExchangeException("Error sending to: " + queue, exchange, e);', '}', '} else {']
['no message body to send to ', ['queue']]
camel sample_8077

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<JavaScriptLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.javascript.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.javascript.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1256

['public void propagateResponseHeadersToCamel(Message cxfMessage, Exchange exchange, HeaderFilterStrategy strategy) {']
['propagating response headers from cxf message ', ['cxfmessage']]
camel sample_6593

['protected Message run() throws Exception {']
['running fallback processor with exchange ', ['processor', 'exchange']]
camel sample_11357

['protected Message run() throws Exception {', 'try {', 'processor.process(exchange);', '} catch (Throwable e) {', 'exchange.setException(e);', '}', 'if (exchange.getException() != null) {', 'throw exchange.getException();', '}']
['running fallback processor with exchange done ', ['processor', 'exchange']]
camel sample_11357

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof DynamicRouterDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {']
['i m doing someting ', []]
camel sample_3791

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof DynamicRouterDefinition<?>) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'return super.process(exchange, new AsyncCallback() {', 'public void done(final boolean doneSync) {']
['i m done ', []]
camel sample_3791

['protected boolean doDecode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {', 'DecoderState state = decoderState(session);', 'in.position(state.current());']
['received data checking from position to ', ['in', 'position', 'in', 'limit']]
camel sample_11438

['DecoderState state = decoderState(session);', 'in.position(state.current());', 'boolean messageDecoded = false;', 'while (in.hasRemaining()) {', 'int previousPosition = in.position();', 'byte current = in.get();', 'if (current == config.getEndByte2() && state.previous() == config.getEndByte1()) {', 'if (state.isStarted()) {', 'int currentPosition = in.position();', 'int currentLimit = in.limit();']
['message ends at position with length ', ['previousposition', 'previousposition', 'state', 'start']]
camel sample_11438

['boolean messageDecoded = false;', 'while (in.hasRemaining()) {', 'int previousPosition = in.position();', 'byte current = in.get();', 'if (current == config.getEndByte2() && state.previous() == config.getEndByte1()) {', 'if (state.isStarted()) {', 'int currentPosition = in.position();', 'int currentLimit = in.limit();', 'in.position(state.start());', 'in.limit(currentPosition);']
['set start to position and limit to ', ['in', 'position', 'in', 'limit']]
camel sample_11438

['if (current == config.getEndByte2() && state.previous() == config.getEndByte1()) {', 'if (state.isStarted()) {', 'int currentPosition = in.position();', 'int currentLimit = in.limit();', 'in.position(state.start());', 'in.limit(currentPosition);', 'try {', 'out.write(config.isProduceString() ? parseMessageToString(in.slice(), charsetDecoder(session)) : parseMessageToByteArray(in.slice()));', 'messageDecoded = true;', '} finally {']
['resetting to position and limit to ', ['currentposition', 'currentlimit']]
camel sample_11438

['in.limit(currentPosition);', 'try {', 'out.write(config.isProduceString() ? parseMessageToString(in.slice(), charsetDecoder(session)) : parseMessageToByteArray(in.slice()));', 'messageDecoded = true;', '} finally {', 'in.position(currentPosition);', 'in.limit(currentLimit);', 'state.reset();', '}', '} else {']
['ignoring message end at position until start byte has been seen ', ['previousposition']]
camel sample_11438

['} else {', 'if (current == config.getStartByte()) {', 'state.markStart(previousPosition);', '} else {', 'state.markPrevious(current);', '}', 'messageDecoded = false;', '}', '}', 'if (!messageDecoded) {']
['no complete message yet at position ', ['in', 'position']]
camel sample_11438

['private Object parseMessageToByteArray(IoBuffer buf) throws CharacterCodingException {', 'int len = buf.limit() - 3;']
['making byte array of length ', ['len']]
camel sample_11438

['private Object parseMessageToByteArray(IoBuffer buf) throws CharacterCodingException {', 'int len = buf.limit() - 3;', 'byte[] dst = new byte[len];', 'buf.skip(1);', 'buf.get(dst, 0, len);', 'buf.skip(2);', 'if (config.isConvertLFtoCR()) {']
['replacing lf by cr ', []]
camel sample_11438

['private Object parseMessageToString(IoBuffer buf, CharsetDecoder decoder) throws CharacterCodingException {', 'int len = buf.limit() - 3;']
['making string of length using charset ', ['len', 'decoder', 'charset']]
camel sample_11438

['private Object parseMessageToString(IoBuffer buf, CharsetDecoder decoder) throws CharacterCodingException {', 'int len = buf.limit() - 3;', 'buf.skip(1);', 'String message = buf.getString(len, decoder);', 'buf.skip(2);', 'if (config.isConvertLFtoCR()) {']
['replacing lf by cr ', []]
camel sample_11438

['private CompletionStage<Void> updateValue(final Request<?> value) {', 'try {', 'final Exchange exchange = getEndpoint().createExchange();', 'exchange.setIn(mapMessage(value));', 'final CompletableFuture<Void> result = new CompletableFuture<>();', 'getAsyncProcessor().process(exchange, doneSync -> result.complete(null));', 'return result;', '} catch (final Exception e) {']
['failed to process message ', ['e']]
camel sample_6706

['public void testPropertyEditorTypeConverter() throws Exception {', 'MyBean bean = new MyBean();', 'bean.setBar("Hello");', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500; i++) {', 'String s = context.getTypeConverter().convertTo(String.class, bean);', 'log.debug(s);', 'assertNotNull(s);', '}']
['time taken ', ['watch', 'taken']]
camel sample_1493

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(configuration, "configuration");', 'ObjectHelper.notNull(camelContext, "camel context");', 'if (serviceDiscovery != null) {', 'LOGGER.info("ServiceCall is using ribbon load balancer with service discovery type: {} and service filter: {}", serviceDiscovery.getClass(), serviceDiscovery != null ? serviceFilter.getClass() : "none");', '} else {']
['servicecall is using ribbon load balancer ', []]
camel sample_13055

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteComputeComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-compute.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-compute.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1169

['public void assertMessageExpected(DataSetEndpoint dataSetEndpoint, Exchange expected, Exchange actual, long index) throws Exception {', 'Predicate predicate = PredicateBuilder.isEqualTo(expression, ExpressionBuilder.constantExpression(index));']
['evaluating predicate ', ['predicate']]
camel sample_3154

['if (configuration.isNativeTransport()) {', 'clientBootstrap.channel(EpollSocketChannel.class);', '} else {', 'clientBootstrap.channel(NioSocketChannel.class);', '}', 'clientBootstrap.group(wg);', 'clientBootstrap.option(ChannelOption.SO_KEEPALIVE, configuration.isKeepAlive());', 'clientBootstrap.option(ChannelOption.TCP_NODELAY, configuration.isTcpNoDelay());', 'clientBootstrap.option(ChannelOption.SO_REUSEADDR, configuration.isReuseAddress());', 'clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.getConnectTimeout());']
['created clientbootstrap ', ['clientbootstrap']]
camel sample_10229

['clientBootstrap.channel(NioSocketChannel.class);', '}', 'clientBootstrap.group(wg);', 'clientBootstrap.option(ChannelOption.SO_KEEPALIVE, configuration.isKeepAlive());', 'clientBootstrap.option(ChannelOption.TCP_NODELAY, configuration.isTcpNoDelay());', 'clientBootstrap.option(ChannelOption.SO_REUSEADDR, configuration.isReuseAddress());', 'clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.getConnectTimeout());', 'clientBootstrap.handler(pipelineFactory);', 'ChannelFuture channelFuture = clientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', 'if (LOG.isDebugEnabled()) {']
['created new tcp client bootstrap connecting to with options ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'clientbootstrap']]
camel sample_10229

['}', 'clientBootstrap.group(wg);', 'clientBootstrap.option(ChannelOption.SO_KEEPALIVE, configuration.isKeepAlive());', 'clientBootstrap.option(ChannelOption.TCP_NODELAY, configuration.isTcpNoDelay());', 'clientBootstrap.option(ChannelOption.SO_REUSEADDR, configuration.isReuseAddress());', 'clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.getConnectTimeout());', 'clientBootstrap.handler(pipelineFactory);', 'ChannelFuture channelFuture = clientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', 'if (LOG.isDebugEnabled()) {', '}']
['clientmodeserverbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10229

['protected void stopServerBootstrap() {']
['clientmodeserverbootstrap unbinding from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10229

['protected void doReconnectIfNeeded() throws Exception {', 'if (channel == null || !channel.isActive()) {']
['clientmodeserverbootstrap re connect to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10229

['protected Channel openChannel(final ChannelFuture channelFuture) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['waiting for operation to complete for millis ', ['channelfuture', 'configuration', 'getconnecttimeout']]
camel sample_10229

['} else {', 'ConnectException cause = new ConnectException("Cannot connect to " + configuration.getAddress());', 'if (channelFuture.cause() != null) {', 'cause.initCause(channelFuture.cause());', '}', 'throw cause;', '}', '}', 'Channel answer = channelFuture.channel();', 'if (LOG.isDebugEnabled()) {']
['creating connector to address ', ['configuration', 'getaddress']]
camel sample_10229

['private void scheduleReconnect(final ChannelFuture channelFuture) {', 'final EventLoop loop = channelFuture.channel().eventLoop();', 'loop.schedule(new Runnable() {', 'public void run() {', 'try {']
['re connecting to if needed ', ['configuration', 'getaddress']]
camel sample_10229

['private void scheduleReconnect(final ChannelFuture channelFuture) {', 'final EventLoop loop = channelFuture.channel().eventLoop();', 'loop.schedule(new Runnable() {', 'public void run() {', 'try {', 'doReconnectIfNeeded();', '} catch (Exception e) {']
['error during re connect to will attempt again in millis this exception is ignored ', ['configuration', 'getaddress', 'configuration', 'getreconnectinterval', 'e']]
camel sample_10229

['public void awaitConnection() {', 'if (LOG.isDebugEnabled()) {']
['awaiting connection event from zookeeper cluster ', ['configuration', 'getconnectstring']]
camel sample_12644

['public void closeConnection() {', 'try {', 'if (zookeeper != null) {', 'zookeeper.close();', 'zookeeper = null;', '}', 'if (LOG.isDebugEnabled()) {']
['shutting down connection to zookeeper cluster ', ['configuration', 'getconnectstring']]
camel sample_12644

['public void closeConnection() {', 'try {', 'if (zookeeper != null) {', 'zookeeper.close();', 'zookeeper = null;', '}', 'if (LOG.isDebugEnabled()) {', '}', '} catch (InterruptedException e) {']
['error closing zookeeper connection this exception will be ignored ', ['configuration', 'getconnectstring', 'e']]
camel sample_12644

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(configuration, "setNettyServerBootstrapConfiguration() must be called with a NettyServerBootstrapConfiguration instance", this);', 'if (configuration.getPort() <= 0) {', 'throw new IllegalArgumentException("Port must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration);', '}', 'if (ObjectHelper.isEmpty(configuration.getHost())) {', 'throw new IllegalArgumentException("Host must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration);', '}']
['nettysharedhttpserver using configuration ', ['configuration']]
camel sample_8348

['channelFactory.init(configuration.getPort());', 'ChannelPipelineFactory pipelineFactory = new HttpServerSharedPipelineFactory(configuration, channelFactory, classResolver);', 'String port = Matcher.quoteReplacement("" + configuration.getPort());', 'String pattern = threadPattern;', 'pattern = pattern.replaceFirst("#port#", port);', 'ThreadFactory tf = new CamelThreadFactory(pattern, "NettySharedHttpServer", true);', 'bootstrapFactory = new HttpServerBootstrapFactory(channelFactory, false);', 'bootstrapFactory.init(tf, configuration, pipelineFactory);', 'ServiceHelper.startServices(channelFactory);', 'if (startServer) {']
['starting nettysharedhttpserver on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_8348

['protected void doStop() throws Exception {']
['stopping nettysharedhttpserver on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_8348

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {']
['waiting on the camel context to stop ', []]
camel sample_12351

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}']
['closing jms session ', []]
camel sample_12351

['public void tearDown() throws Exception {', 'super.tearDown();', 'DefaultCamelContext dcc = (DefaultCamelContext)context;', 'while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}']
['closing jms connection ', []]
camel sample_12351

['while (!dcc.isStopped()) {', '}', 'if (getSession() != null) {', 'getSession().close();', 'setSession(null);', '}', 'if (connection != null) {', 'connection.stop();', 'connection = null;', '}']
['stopping the activemq broker ', []]
camel sample_12351

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof SplitDefinition) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {']
['i m doing someting ', []]
camel sample_3912

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'if (definition instanceof SplitDefinition) {', 'final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {', 'public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'return super.process(exchange, new AsyncCallback() {', 'public void done(final boolean doneSync) {']
['i m done ', []]
camel sample_3912

['public void stop() {']
['stopping excecutor service ', []]
camel sample_13813

['public void stop() {', 'List<Runnable> runnables = executor.shutdownNow();', 'log.info("{} Runnables were active", runnables == null ? 0 : runnables.size());', 'for (Runnable runnable : runnables) {', 'if (runnable instanceof TestRunnable) {', 'log.info(((TestRunnable)runnable).status());', '} else {']
['runnable is not instance of testrunnable ', ['runnable', 'getclass', 'getname']]
camel sample_13813

['protected JAXBContext createContext(String contextPath) throws JAXBException {', 'ClassLoader cl = NotificationXmlFormatter.class.getClassLoader();', 'try {']
['creating jaxbcontext with contextpath and classloader ', ['contextpath', 'cl']]
camel sample_12701

['protected JAXBContext createContext(String contextPath) throws JAXBException {', 'ClassLoader cl = NotificationXmlFormatter.class.getClassLoader();', 'try {', 'return JAXBContext.newInstance(contextPath, cl);', '} catch (Exception e) {']
['creating jaxbcontext with contextpath ', ['contextpath']]
camel sample_12701

['public void testProducerBlocksResumeTest() throws Exception {', 'context.suspendRoute("foo");', 'ExecutorService executor = Executors.newSingleThreadExecutor();', 'executor.submit(new Runnable() {', 'public void run() {', 'try {', 'Thread.sleep(200);']
['resuming consumer ', []]
camel sample_3441

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ICalDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.ical.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.ical.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1186

['public void init() throws Exception {']
['init ', ['this']]
camel sample_8124

['public void destroy() throws Exception {']
['destroy ', ['this']]
camel sample_8124

['public void destroy() throws Exception {', 'try {', 'bundleContext.removeServiceListener(this);', '} catch (Exception e) {']
['error removing servicelistener this exception is ignored ', ['this', 'e']]
camel sample_8124

['public void destroy() throws Exception {', 'try {', 'bundleContext.removeServiceListener(this);', '} catch (Exception e) {', '}', 'if (registration != null) {', 'try {', 'registration.unregister();', '} catch (Exception e) {']
['error unregistering service registration this exception is ignored ', ['registration', 'e']]
camel sample_8124

['case BlueprintEvent.FAILURE: eventTypeString = "FAILURE";', 'break;', 'default: eventTypeString = "UNKNOWN";', 'break;', '}', 'LOG.debug("Received BlueprintEvent[ replay={} type={} bundle={}] %s", event.isReplay(), eventTypeString, event.getBundle().getSymbolicName(), event.toString());', '}', 'if (!event.isReplay() && this.getBundleContext().getBundle().getBundleId() == event.getBundle().getBundleId()) {', 'if (event.getType() == BlueprintEvent.CREATED) {', 'try {']
['attempting to start camel context ', ['this', 'getname']]
camel sample_8124

['default: eventTypeString = "UNKNOWN";', 'break;', '}', 'LOG.debug("Received BlueprintEvent[ replay={} type={} bundle={}] %s", event.isReplay(), eventTypeString, event.getBundle().getSymbolicName(), event.toString());', '}', 'if (!event.isReplay() && this.getBundleContext().getBundle().getBundleId() == event.getBundle().getBundleId()) {', 'if (event.getType() == BlueprintEvent.CREATED) {', 'try {', 'this.maybeStart();', '} catch (Exception startEx) {']
['error occurred during starting camel context ', ['this', 'getname', 'startex']]
camel sample_8124

['LOG.debug("Received BlueprintEvent[ replay={} type={} bundle={}] %s", event.isReplay(), eventTypeString, event.getBundle().getSymbolicName(), event.toString());', '}', 'if (!event.isReplay() && this.getBundleContext().getBundle().getBundleId() == event.getBundle().getBundleId()) {', 'if (event.getType() == BlueprintEvent.CREATED) {', 'try {', 'this.maybeStart();', '} catch (Exception startEx) {', '}', '} else if (event.getType() == BlueprintEvent.DESTROYING) {', 'try {']
['stopping camel context ', ['this', 'getname']]
camel sample_8124

['if (!event.isReplay() && this.getBundleContext().getBundle().getBundleId() == event.getBundle().getBundleId()) {', 'if (event.getType() == BlueprintEvent.CREATED) {', 'try {', 'this.maybeStart();', '} catch (Exception startEx) {', '}', '} else if (event.getType() == BlueprintEvent.DESTROYING) {', 'try {', 'this.stop();', '} catch (Exception stopEx) {']
['error occurred during stopping camel context ', ['this', 'getname', 'stopex']]
camel sample_8124

['break;', 'case ServiceEvent.MODIFIED: eventTypeString = "MODIFIED";', 'break;', 'case ServiceEvent.UNREGISTERING: eventTypeString = "UNREGISTERING";', 'break;', 'case ServiceEvent.MODIFIED_ENDMATCH: eventTypeString = "MODIFIED_ENDMATCH";', 'break;', 'default: eventTypeString = "UNKNOWN";', 'break;', '}']
['service changed to ', ['event', 'tostring', 'eventtypestring']]
camel sample_8124

['private void maybeStart() throws Exception {']
['maybestart ', ['this']]
camel sample_8124

['private void maybeStart() throws Exception {', 'if (!routeDefinitionValid.get()) {']
['maybestart is skipping since camelroute definition is not correct ', ['this']]
camel sample_8124

['for (EventNotifier notifier : getManagementStrategy().getEventNotifiers()) {', 'if (notifier instanceof OsgiCamelContextPublisher) {', 'OsgiCamelContextPublisher publisher = (OsgiCamelContextPublisher) notifier;', 'publisher.registerCamelContext(this);', 'break;', '}', '}', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['maybestart is skipping as system property skipstartingcamelcontext is set ', ['this']]
camel sample_8124

['publisher.registerCamelContext(this);', 'break;', '}', '}', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', 'return;', '}', 'if (!isStarted() && !isStarting()) {']
['starting ', ['this']]
camel sample_8124

['}', '}', '}', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', 'return;', '}', 'if (!isStarted() && !isStarting()) {', 'start();', '} else {']
['ignoring maybestart as is already started ', ['this']]
camel sample_8124

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NetWeaverComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sap-netweaver.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sap-netweaver.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_798

['public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) throws Exception {', 'this.endpoint = endpoint;']
['using fileidempotentrepositoryreadlockstrategy on endpoint ', ['idempotentrepository', 'endpoint']]
camel sample_4804

['from("activemq:queue:foo") .transacted() .to("log:foo") .to("activemq:queue:bar");', 'from("activemq:queue:bar").to("mock:bar");', '}', '});', 'context.start();', 'MockEndpoint mock = getMockEndpoint("mock:bar");', 'mock.expectedMessageCount(0);', 'template.sendBody("activemq:queue:foo", "Hello World");', 'Exchange exch = consumer.receive("activemq:queue:foo", 250);', 'if (exch != null) {']
['cleaned up orphaned message ', ['exch']]
camel sample_6993

['while (keyIterator.hasNext() && index < max) {', 'Object key = keyIterator.next();', 'Object value = dataStore.get(key);', 'Exchange exchange = endpoint.createExchange();', 'exchange.setProperty(KratiConstants.KEY, key);', 'exchange.getIn().setBody(value);', 'queue.add(exchange);', 'index++;', '}', 'if (index == max && keyIterator.hasNext()) {']
['limiting to maximum messages to poll as there were more messages in this poll ', ['max']]
camel sample_14006

['Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;', 'exchange.addOnCompletion(new Synchronization() {', 'public void onComplete(Exchange exchange) {', 'try {', 'dataStore.delete(exchange.getProperty(KratiConstants.KEY));', '} catch (Exception e) {']
['failed to remove from datastore this exception is ignored ', ['e']]
camel sample_14006

['exchange.addOnCompletion(new Synchronization() {', 'public void onComplete(Exchange exchange) {', 'try {', 'dataStore.delete(exchange.getProperty(KratiConstants.KEY));', '} catch (Exception e) {', '}', '}', 'public void onFailure(Exchange exchange) {', '}', '});']
['processing exchange ', ['exchange']]
camel sample_14006

['public void testCircuitOpen() throws Exception {']
['testcircuitopen start ', []]
camel sample_11341

['} catch (CamelExecutionException e) {', 'LOG.info(e.toString());', '}', '}', 'Thread.sleep(1500);', 'resetMocks();', 'getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED, true);', 'route.throwException = false;', 'try {', 'template.requestBody("direct:start", "Request Body");']
['instead circuit open expected ', []]
camel sample_11341

['LOG.info(e.toString());', '}', '}', 'Thread.sleep(1500);', 'resetMocks();', 'getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED, true);', 'route.throwException = false;', 'try {', 'template.requestBody("direct:start", "Request Body");', '} catch (CamelExecutionException e) {']
['circuit open expected ', ['e']]
camel sample_11341

['route.throwException = false;', 'try {', 'template.requestBody("direct:start", "Request Body");', '} catch (CamelExecutionException e) {', '}', 'assertMockEndpointsSatisfied();', 'Thread.sleep(500);', 'for (int i = 0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {', 'try {', 'template.requestBody("direct:start", "Request Body");']
['circuit has closed ', []]
camel sample_11341

['template.requestBody("direct:start", "Request Body");', '} catch (CamelExecutionException e) {', '}', 'assertMockEndpointsSatisfied();', 'Thread.sleep(500);', 'for (int i = 0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {', 'try {', 'template.requestBody("direct:start", "Request Body");', '} catch (CamelExecutionException e) {', 'Thread.sleep(i * 100);']
['circuit will be closed soon ', ['e', 'tostring']]
camel sample_11341

['public void configure() throws Exception {', 'from("direct:start") .hystrix() .hystrixConfiguration() .executionTimeoutInMilliseconds(100) .circuitBreakerRequestVolumeThreshold(REQUEST_VOLUME_THRESHOLD) .metricsRollingStatisticalWindowInMilliseconds(1000) .circuitBreakerSleepWindowInMilliseconds(2000) .end() .log("Hystrix processing start: ${threadName}") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (throwException) {']
['will throw exception ', []]
camel sample_11341

['public void configure() throws Exception {', 'from("direct:start") .hystrix() .hystrixConfiguration() .executionTimeoutInMilliseconds(100) .circuitBreakerRequestVolumeThreshold(REQUEST_VOLUME_THRESHOLD) .metricsRollingStatisticalWindowInMilliseconds(1000) .circuitBreakerSleepWindowInMilliseconds(2000) .end() .log("Hystrix processing start: ${threadName}") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (throwException) {', 'throw new IOException("Route has failed");', '} else {']
['will not throw exception ', []]
camel sample_11341

['public void applyRequestMetadata(MethodDescriptor<?, ?> method, Attributes attrs, Executor executor, MetadataApplier applier) {', 'String authority = attrs.get(ATTR_AUTHORITY);']
['using authority for credentials ', ['authority']]
camel sample_7510

['public void applyRequestMetadata(MethodDescriptor<?, ?> method, Attributes attrs, Executor executor, MetadataApplier applier) {', 'String authority = attrs.get(ATTR_AUTHORITY);', 'executor.execute(new Runnable() {', 'public void run() {', 'try {']
['start to apply for the jwt token header ', []]
camel sample_7510

['public void applyRequestMetadata(MethodDescriptor<?, ?> method, Attributes attrs, Executor executor, MetadataApplier applier) {', 'String authority = attrs.get(ATTR_AUTHORITY);', 'executor.execute(new Runnable() {', 'public void run() {', 'try {', 'Metadata headers = new Metadata();', 'Metadata.Key<String> jwtKey = GrpcConstants.GRPC_JWT_METADATA_KEY;', 'headers.put(jwtKey, jwtToken);', 'applier.apply(headers);', '} catch (Throwable e) {']
['unable to set metadata credentials header ', ['e']]
camel sample_7510

['public void send(MimeMessage mimeMessage) throws MessagingException {', 'Transport transport = getTransport(getSession());']
['connecting to ', ['host', 'port']]
camel sample_11896

['transport.connect(getHost(), getPort(), getUsername(), getPassword());', 'try {', 'if (mimeMessage.getSentDate() == null) {', 'mimeMessage.setSentDate(new Date());', '}', 'String messageId = mimeMessage.getMessageID();', 'mimeMessage.saveChanges();', 'if (messageId != null) {', 'mimeMessage.setHeader("Message-ID", messageId);', '}']
['sending mimemessage using host ', ['mimemessage', 'host']]
camel sample_11896

['String messageId = mimeMessage.getMessageID();', 'mimeMessage.saveChanges();', 'if (messageId != null) {', 'mimeMessage.setHeader("Message-ID", messageId);', '}', 'transport.sendMessage(mimeMessage, mimeMessage.getAllRecipients());', '} finally {', 'try {', 'transport.close();', '} catch (MessagingException e) {']
['error closing transport to host this exception will be ignored ', ['host', 'e']]
camel sample_11896

['protected <T> void doAddOption(Map<String, T> options, String name, T value) {', 'log.trace("Adding option: {}={}", name, value);', 'T val = options.put(name, value);', 'if (val != null) {']
['options overridden old value was ', ['name', 'val']]
camel sample_3

['int after = parameters.size();', 'if (schedulerOptions != null && before != after) {', 'URI u = new URI(uri);', 'u = URISupport.createRemainingURI(u, parameters);', 'uri = u.toString();', '}', 'Map<String, String> options = buildEndpointOptions(remaining, parameters);', 'String delegateUri = createEndpointUri(componentScheme, options);', 'Endpoint delegate = getCamelContext().getEndpoint(delegateUri);', 'if (log.isInfoEnabled()) {']
['connector resolved ', ['sanitizeuri', 'uri', 'sanitizeuri', 'delegateuri']]
camel sample_3

['public String createEndpointUri(String scheme, Map<String, String> options) throws URISyntaxException {']
['creating endpoint uri with scheme ', ['scheme']]
camel sample_3

['throw new IllegalArgumentException("Camel connector must have outputDataType defined in camel-connector.json file");', '}', 'if (model.getBaseScheme() == null) {', 'throw new IllegalArgumentException("Camel connector must have baseSchema defined in camel-connector.json file");', '}', 'if (model.getBaseJavaType() == null) {', 'throw new IllegalArgumentException("Camel connector must have baseJavaType defined in camel-connector.json file");', '}', 'Component component = createNewBaseComponent();', 'if (component != null) {']
['register component type with scheme ', ['this', 'componentname', 'component', 'getclass', 'getname', 'this', 'componentscheme']]
camel sample_3

['}', 'if (model.getBaseJavaType() == null) {', 'throw new IllegalArgumentException("Camel connector must have baseJavaType defined in camel-connector.json file");', '}', 'Component component = createNewBaseComponent();', 'if (component != null) {', 'getCamelContext().removeComponent(this.componentScheme);', 'getCamelContext().addService(component, true, true);', 'getCamelContext().addComponent(this.componentScheme, component);', '}']
['starting connector ', ['componentname']]
camel sample_3

['protected void doStop() throws Exception {']
['stopping connector ', ['componentname']]
camel sample_3

['public NewCommentConsumer(JIRAEndpoint endpoint, Processor processor) {', 'super(endpoint, processor);']
['jira newcommentconsumer indexing current issue comments ', []]
camel sample_13002

['String name = info.getterOrSetterShorthandName;', 'try {', 'method.setAccessible(true);', 'Object value = method.invoke(target);', 'if (value != null || includeNull) {', 'properties.put(optionPrefix + name, value);', 'rc = true;', '}', '} catch (Exception e) {', 'if (LOG.isTraceEnabled()) {']
['error invoking getter method this exception is ignored ', ['method', 'e']]
camel sample_4296

['continue;', '}', '}', '}', 'try {', 'try {', 'if (value == null || isAssignableFrom(parameterType, ref.getClass())) {', 'setter.setAccessible(true);', 'setter.invoke(target, ref);', 'if (LOG.isDebugEnabled()) {']
['configured property on bean with value ', ['new', 'object', 'name', 'target', 'ref']]
camel sample_4296

['setter.setAccessible(true);', 'setter.invoke(target, ref);', 'if (LOG.isDebugEnabled()) {', '}', 'return true;', '} else {', 'Object convertedValue = convert(typeConverter, parameterType, ref);', 'setter.setAccessible(true);', 'setter.invoke(target, convertedValue);', 'if (LOG.isDebugEnabled()) {']
['configured property on bean with value ', ['new', 'object', 'name', 'target', 'ref']]
camel sample_4296

['}', '}', '} catch (SecurityException e) {', 'typeConversionFailed = e;', '} catch (NoTypeConversionAvailableException e) {', 'typeConversionFailed = e;', '} catch (IllegalArgumentException e) {', 'typeConversionFailed = e;', '}', 'if (LOG.isTraceEnabled()) {']
['setter with parameter type could not be used for type conversions of ', ['new', 'object', 'setter', 'parametertype', 'ref']]
camel sample_4296

['private static Set<Method> findSetterMethods(Class<?> clazz, String name, Object value, boolean allowBuilderPattern) {', 'Set<Method> candidates = findSetterMethods(clazz, name, allowBuilderPattern);', 'if (candidates.isEmpty()) {', 'return candidates;', '} else if (candidates.size() == 1) {', 'return candidates;', '} else {']
['found suitable setter methods for setting ', ['candidates', 'size', 'name']]
camel sample_4296

['private static Set<Method> findSetterMethods(Class<?> clazz, String name, Object value, boolean allowBuilderPattern) {', 'Set<Method> candidates = findSetterMethods(clazz, name, allowBuilderPattern);', 'if (candidates.isEmpty()) {', 'return candidates;', '} else if (candidates.size() == 1) {', 'return candidates;', '} else {', 'for (Method method : candidates) {', 'if (method.getParameterTypes()[0].isInstance(value)) {']
['method is the best candidate as it has parameter with same instance type ', ['method']]
camel sample_4296

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(configuration, "setNettyServerBootstrapConfiguration() must be called with a NettyServerBootstrapConfiguration instance", this);', 'if (configuration.getPort() <= 0) {', 'throw new IllegalArgumentException("Port must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration);', '}', 'if (ObjectHelper.isEmpty(configuration.getHost())) {', 'throw new IllegalArgumentException("Host must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration);', '}']
['nettysharedhttpserver using configuration ', ['configuration']]
camel sample_16650

['channelFactory.init(configuration.getPort());', 'ChannelInitializer<Channel> pipelineFactory = new HttpServerSharedInitializerFactory(configuration, channelFactory, classResolver);', 'String port = Matcher.quoteReplacement("" + configuration.getPort());', 'String pattern = threadPattern;', 'pattern = pattern.replaceFirst("#port#", port);', 'ThreadFactory tf = new CamelThreadFactory(pattern, "NettySharedHttpServer", true);', 'bootstrapFactory = new HttpServerBootstrapFactory(channelFactory, false);', 'bootstrapFactory.init(tf, configuration, pipelineFactory);', 'ServiceHelper.startServices(channelFactory);', 'if (startServer) {']
['starting nettysharedhttpserver on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_16650

['protected void doStop() throws Exception {']
['stopping nettysharedhttpserver on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_16650

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {']
['configuring server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4279

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {']
['configuring server side sslcontext session timeout on sslcontext to ', ['context', 'this', 'getsessiontimeout']]
camel sample_4279

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {', 'this.configureSessionContext(context.getServerSessionContext(), this.getSessionTimeout());', '}']
['configured server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4279

['protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {', 'List<Configurer<SSLEngine>> sslEngineConfigurers = new LinkedList<Configurer<SSLEngine>>();', 'if (this.getClientAuthentication() != null) {', 'final ClientAuthentication clientAuthValue = ClientAuthentication.valueOf(this.parsePropertyValue(this.getClientAuthentication()));', 'Configurer<SSLEngine> sslEngineConfigurer = new Configurer<SSLEngine>() {', 'public SSLEngine configure(SSLEngine engine) {']
['configuring client auth on sslengine to ', ['engine', 'clientauthvalue']]
camel sample_4279

['protected List<Configurer<SSLServerSocket>> getSSLServerSocketFactorySSLServerSocketConfigurers(SSLContext context) {', 'List<Configurer<SSLServerSocket>> sslServerSocketConfigurers = super.getSSLServerSocketFactorySSLServerSocketConfigurers(context);', 'if (this.getClientAuthentication() != null) {', 'final ClientAuthentication clientAuthValue = ClientAuthentication.valueOf(this.parsePropertyValue(this.getClientAuthentication()));', 'Configurer<SSLServerSocket> sslServerSocketConfigurer = new Configurer<SSLServerSocket>() {', 'public SSLServerSocket configure(SSLServerSocket socket) {']
['configuring client auth on sslserversocket to ', ['socket', 'clientauthvalue']]
camel sample_4279

['merchandise.setDescription__c("Merchandise for testing Streaming API updated on " + ZonedDateTime.now().toString());', 'merchandise.setPrice__c(9.99);', 'merchandise.setTotal_Inventory__c(1000.0);', 'CreateSObjectResult result = template().requestBody( "direct:upsertSObject", merchandise, CreateSObjectResult.class);', 'assertTrue("Merchandise test record not created",  result == null || result.getSuccess());', 'try {', 'mock.assertIsSatisfied();', 'final Message in = mock.getExchanges().get(0).getIn();', 'merchandise = in.getMandatoryBody(Merchandise__c.class);', 'assertNotNull("Missing event body", merchandise);']
['merchandise notification ', ['merchandise', 'tostring']]
camel sample_14682

['public void updateRouteFromXml(String xml) throws Exception {', 'RouteDefinition def = ModelHelper.createModelFromXml(context, xml, RouteDefinition.class);', 'if (def == null) {', 'return;', '}', 'if (ObjectHelper.isEmpty(def.getId())) {', 'def.setId(getRouteId());', '} else if (!def.getId().equals(getRouteId())) {', 'throw new IllegalArgumentException("Cannot update route from XML as routeIds does not match. routeId: " + getRouteId() + ", routeId from XML: " + def.getId());', '}']
['updating route from xml ', ['def', 'getid', 'xml']]
camel sample_4629

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['connect error ', ['connectexception', 'class', 'handled', 'true', 'to', 'connectex', 'log', 'logginglevel', 'error', 'routeid', 'stop']]
camel sample_13844

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['write error ', ['mllpwriteexception', 'class', 'handled', 'true', 'to', 'writeex', 'log', 'logginglevel', 'error', 'routeid', 'stop']]
camel sample_13844

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['receive error ', ['mllpacknowledgementreceiveexception', 'class', 'handled', 'true', 'to', 'receiveex', 'log', 'logginglevel', 'error', 'routeid', 'stop']]
camel sample_13844

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['sending message mllp log logginglevel info routeid acknowledgement to complete ', ['source', 'getdefaultendpoint', 'routeid', 'routeid', 'log', 'logginglevel', 'info', 'routeid', 'tof', 'received']]
camel sample_13844

['private String generateMessageIdHeader(Message message) {']
['generatemessageidheader for msg ', ['message']]
camel sample_11879

['private String generateMessageIdHeader(Message message) {', 'try {', 'String values[] = message.getHeader("Message-ID");', 'if (values != null && values.length > 0) {', 'String uid = values[0];']
['message id header found ', ['uid']]
camel sample_11879

['private String generateMessageIdHeader(Message message) {', 'try {', 'String values[] = message.getHeader("Message-ID");', 'if (values != null && values.length > 0) {', 'String uid = values[0];', 'return uid;', '}', '} catch (MessagingException e) {']
['cannot read headers from mail message this exception will be ignored ', ['e']]
camel sample_11879

['public String generateMessageHash(Message message) {']
['generatemessagehash for msg ', ['message']]
camel sample_11879

['public String generateMessageHash(Message message) {', 'String uid = null;', 'StringBuilder buffer = new StringBuilder();', 'try {', 'Enumeration<?> it = message.getAllHeaders();', 'while (it.hasMoreElements()) {', 'Header header = (Header) it.nextElement();', 'buffer.append(header.getName()).append("=").append(header.getValue()).append("\\n");', '}', 'if (buffer.length() > 0) {']
['generating uid from the following ', ['buffer']]
camel sample_11879

['try {', 'Enumeration<?> it = message.getAllHeaders();', 'while (it.hasMoreElements()) {', 'Header header = (Header) it.nextElement();', 'buffer.append(header.getName()).append("=").append(header.getValue()).append("\\n");', '}', 'if (buffer.length() > 0) {', 'uid = UUID.nameUUIDFromBytes(buffer.toString().getBytes()).toString();', '}', '} catch (MessagingException e) {']
['cannot read headers from mail message this exception will be ignored ', ['e']]
camel sample_11879

['return producer.createExchange();', '}', 'public Exchange createExchange(ExchangePattern pattern) {', 'return producer.createExchange(pattern);', '}', 'public Exchange createExchange(Exchange exchange) {', 'return producer.createExchange(exchange);', '}', 'public boolean process(Exchange exchange, AsyncCallback callback) {', 'if (LOG.isDebugEnabled()) {']
['sending to endpoint is intercepted and detoured to for exchange ', ['new', 'object', 'getendpoint', 'detour', 'exchange']]
camel sample_3945

['try {', 'producer.process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'callback.done(true);', 'return true;', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['stop means skip sending exchange to original intended destination for exchange ', ['getendpoint', 'exchange']]
camel sample_3945

['private void assertThrottlerTiming(final long elapsedTimeMs, final int throttle, final int intervalMs, final int messageCount) {', 'long minimum = calculateMinimum(intervalMs, throttle, messageCount) - 50;', 'long maximum = calculateMaximum(intervalMs, throttle, messageCount) + 50;', 'maximum += 500;']
['sent exchanges in ms with throttle rate of per ms calculated min ms and max ms ', ['new', 'object', 'messagecount', 'elapsedtimems', 'throttle', 'intervalms', 'minimum', 'maximum']]
camel sample_2657

['public void testUnmarshal() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal");', 'mock.expectedMessageCount(2);', 'template.sendBody("direct:unmarshal", FIXED_DATA);', 'mock.assertIsSatisfied();', 'List<Exchange> exchanges = mock.getExchanges();', 'if (verbose) {', 'for (Exchange exchange : exchanges) {', 'Object body = exchange.getIn().getBody();']
['received message of class ', ['body', 'body', 'getclass', 'getname']]
camel sample_7286

['public String sayHi(String text) {']
['entering implementation code ', []]
camel sample_7793

['public String sayHi(String text) {']
['leaving implementation code ', []]
camel sample_7793

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = (input + "\\n").getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());']
['sending data ', []]
camel sample_10157

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = (input + "\\n").getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());', 'socket.send(packet);', 'Thread.sleep(1000);', 'byte[] buf = new byte[128];', 'DatagramPacket receive = new DatagramPacket(buf, buf.length, address, getPort());']
['receiving data ', []]
camel sample_10157

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("netty4:udp: public void process(Exchange exchange) throws Exception {', 'String s = exchange.getIn().getBody(String.class);']
['server got ', ['s']]
camel sample_10157

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<OgnlLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ognl.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ognl.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_720

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['cache event notification ', []]
camel sample_10507

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['received notification for the following activity in cache ', []]
camel sample_10507

['public void configure() {', 'from("cache: public void process(Exchange exchange) throws Exception {', 'String operation = (String) exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);', 'String key = (String) exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {', 'log.debug("Operation = {}", operation);', 'log.debug("key = {}", key);', 'log.debug("value = {}", data);']
['end cache event notification ', []]
camel sample_10507

['public void testList() throws Exception {', 'final com.google.api.services.calendar.model.Acl result = requestBody("direct: assertTrue(result.getItems().size() > 0);']
['list ', ['result']]
camel sample_11746

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XmlRpcComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmlrpc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmlrpc.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1217

['public void test() throws Exception {', 'String version = "1.9.0";']
['using apache ignite version ', ['version']]
camel sample_6395

['protected void doStart() throws Exception {', 'super.doStart();', 'this.map = getAtomixEndpoint() .getAtomix() .getMap( resourceName, new DistributedMap.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedMap.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))) .join();', 'Object key = getAtomixEndpoint().getConfiguration().getKey();', 'if (key == null) {']
['subscribe to events for map ', ['resourcename']]
camel sample_10340

['protected void doStart() throws Exception {', 'super.doStart();', 'this.map = getAtomixEndpoint() .getAtomix() .getMap( resourceName, new DistributedMap.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedMap.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))) .join();', 'Object key = getAtomixEndpoint().getConfiguration().getKey();', 'if (key == null) {', 'this.listeners.add(this.map.onAdd(this::onEvent).join());', 'this.listeners.add(this.map.onRemove(this::onEvent).join());', 'this.listeners.add(this.map.onUpdate(this::onEvent).join());', '} else {']
['subscribe to events for map key ', ['resourcename', 'key']]
camel sample_10340

['public Consumer createConsumer(Processor processor) throws Exception {']
['creating a consumer ', []]
camel sample_9963

['public Producer createProducer() throws Exception {']
['creating a producer ', []]
camel sample_9963

['final CamelContext context = new DefaultCamelContext();', 'final CountDownLatch logonLatch = new CountDownLatch(1);', 'final String orderStatusServiceUrl = "http: RouteBuilder routes = new RouteBuilder() {', 'public void configure() throws Exception {', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)). bean(new CountDownLatchDecrementer("logon", logonLatch));', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER&exchangePattern=InOut") .filter(header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.ORDER_STATUS_REQUEST)) .to("log: .bean(new MarketOrderStatusService()) .bean(new QuickfixjMessageJsonPrinter());', 'from("jetty:" + orderStatusServiceUrl) .bean(new OrderStatusRequestTransformer()) .routingSlip(method(FixSessionRouter.class, "route")) .bean(new QuickfixjMessageJsonTransformer(), "transform(${body})");', '}', '};', 'context.addRoutes(routes);']
['starting camel context ', []]
camel sample_10655

['String line = orderStatusReply.readLine();', 'if (!line.equals("\\"message\\": {")) {', 'throw new Exception("Don\'t appear to be a JSON response");', '} else {', 'StringBuilder sb = new StringBuilder();', 'while (line != null) {', 'sb.append(line);', "sb.append('\\n');", 'line = orderStatusReply.readLine();', '}']
['web reply ', ['sb']]
camel sample_10655

['throw new Exception("Don\'t appear to be a JSON response");', '} else {', 'StringBuilder sb = new StringBuilder();', 'while (line != null) {', 'sb.append(line);', "sb.append('\\n');", 'line = orderStatusReply.readLine();', '}', '}', 'orderStatusReply.close();']
['shutting down camel context ', []]
camel sample_10655

['} else {', 'StringBuilder sb = new StringBuilder();', 'while (line != null) {', 'sb.append(line);', "sb.append('\\n');", 'line = orderStatusReply.readLine();', '}', '}', 'orderStatusReply.close();', 'context.stop();']
['example complete ', []]
camel sample_10655

['}', '}', 'orderStatusReply.close();', 'context.stop();', '}', 'public static class OrderStatusRequestTransformer {', 'private static final Logger LOG = LoggerFactory.getLogger(OrderStatusRequestTransformer.class);', 'public void transform(Exchange exchange) throws FieldNotFound {', 'String requestSessionID = exchange.getIn().getHeader("sessionID", String.class);', 'String replySessionID = "FIX.4.2:MARKET->TRADER";']
['given the requestsessionid calculated the replysessionid as ', ['requestsessionid', 'replysessionid']]
camel sample_10655

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<JuelLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.el.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.el.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_472

['protected Class<?> findClass(String name) throws ClassNotFoundException {']
['findclass ', ['name']]
camel sample_13079

['protected URL findResource(String name) {']
['findresource ', ['name']]
camel sample_13079

['protected Enumeration findResources(String name) throws IOException {']
['findresource ', ['name']]
camel sample_13079

['protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {']
['loadclass resolve ', ['name', 'resolve']]
camel sample_13079

['public boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'ObjectHelper.notNull(session, "session");', 'ScpConfiguration cfg = endpoint.getConfiguration();', 'int timeout = cfg.getConnectTimeout();', 'if (LOG.isTraceEnabled()) {']
['opening channel to with timeout ms no ', ['cfg', 'remoteserverinformation', 'timeout', 'integer', 'tostring', 'timeout']]
camel sample_9125

['public boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'ObjectHelper.notNull(session, "session");', 'ScpConfiguration cfg = endpoint.getConfiguration();', 'int timeout = cfg.getConnectTimeout();', 'if (LOG.isTraceEnabled()) {', '}', 'String file = getRemoteFile(name, cfg);', 'InputStream is = null;', 'if (exchange.getIn().getBody() == null) {', 'if (endpoint.isAllowNullBody()) {']
['writing empty file ', []]
camel sample_9125

['if (endpoint.isAllowNullBody()) {', 'is = new ByteArrayInputStream(new byte[]{});', '} else {', 'throw new GenericFileOperationFailedException("Cannot write null body to file: " + name);', '}', '}', 'try {', 'channel = (ChannelExec) session.openChannel("exec");', 'channel.setCommand(getScpCommand(cfg, file));', 'channel.connect(timeout);']
['channel connected to ', ['cfg', 'remoteserverinformation']]
camel sample_9125

['throw new GenericFileOperationFailedException("Cannot store file: " + name, e);', '} catch (IOException e) {', 'throw new GenericFileOperationFailedException("Failed to write file " + file, e);', '} finally {', 'IOHelper.close(is);', '}', '} catch (JSchException e) {', 'throw new GenericFileOperationFailedException("Failed to write file " + file, e);', '} finally {', 'if (channel != null) {']
['disconnecting exec scp channel ', []]
camel sample_9125

['throw new GenericFileOperationFailedException("Failed to write file " + file, e);', '} finally {', 'IOHelper.close(is);', '}', '} catch (JSchException e) {', 'throw new GenericFileOperationFailedException("Failed to write file " + file, e);', '} finally {', 'if (channel != null) {', 'channel.disconnect();', 'channel = null;']
['channel disconnected from ', ['cfg', 'remoteserverinformation']]
camel sample_9125

['private Session createSession(ScpConfiguration config) {', 'ObjectHelper.notNull(config, "ScpConfiguration");', 'try {', 'final JSch jsch = new JSch();', 'if (ObjectHelper.isNotEmpty(config.getCiphers())) {']
['using ciphers ', ['config', 'getciphers']]
camel sample_9125

['ObjectHelper.notNull(config, "ScpConfiguration");', 'try {', 'final JSch jsch = new JSch();', 'if (ObjectHelper.isNotEmpty(config.getCiphers())) {', 'Hashtable<String, String> ciphers = new Hashtable<String, String>();', 'ciphers.put("cipher.s2c", config.getCiphers());', 'ciphers.put("cipher.c2s", config.getCiphers());', 'JSch.setConfig(ciphers);', '}', 'if (ObjectHelper.isNotEmpty(config.getPrivateKeyFile())) {']
['using private keyfile ', ['config', 'getprivatekeyfile']]
camel sample_9125

['name = "file:" + name;', '}', 'try {', 'InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(endpoint.getCamelContext(), name);', 'byte[] data = endpoint.getCamelContext().getTypeConverter().mandatoryConvertTo(byte[].class, is);', 'jsch.addIdentity("camel-jsch", data, null, pkfp != null ? pkfp.getBytes() : null);', '} catch (Exception e) {', 'throw new GenericFileOperationFailedException("Cannot load private keyfile: " + config.getPrivateKeyFile(), e);', '}', '} else if (ObjectHelper.isNotEmpty(config.getPrivateKeyBytes())) {']
['using private key bytes ', ['config', 'getprivatekeybytes']]
camel sample_9125

['try {', 'jsch.addIdentity("camel-jsch", data, null, pkfp != null ? pkfp.getBytes() : null);', '} catch (Exception e) {', 'throw new GenericFileOperationFailedException("Cannot load private key bytes: " + config.getPrivateKeyBytes(), e);', '}', '}', 'String knownHostsFile = config.getKnownHostsFile();', 'if (knownHostsFile == null && config.isUseUserKnownHostsFile()) {', 'if (userKnownHostFile == null) {', 'userKnownHostFile = System.getProperty("user.home") + "/.ssh/known_hosts";']
['known host file not configured using user known host file ', ['userknownhostfile']]
camel sample_9125

['} catch (Exception e) {', 'throw new GenericFileOperationFailedException("Cannot load known host file: " + knownHostsFile, e);', '}', '} else {', 'jsch.setKnownHosts((String) null);', '}', 'session = jsch.getSession(config.getUsername(), config.getHost(), config.getPort());', 'session.setTimeout(config.getTimeout());', 'session.setUserInfo(new SessionUserInfo(config));', 'if (ObjectHelper.isNotEmpty(config.getStrictHostKeyChecking())) {']
['using strickhostkeychecking ', ['config', 'getstricthostkeychecking']]
camel sample_9125

['} else {', 'jsch.setKnownHosts((String) null);', '}', 'session = jsch.getSession(config.getUsername(), config.getHost(), config.getPort());', 'session.setTimeout(config.getTimeout());', 'session.setUserInfo(new SessionUserInfo(config));', 'if (ObjectHelper.isNotEmpty(config.getStrictHostKeyChecking())) {', 'session.setConfig("StrictHostKeyChecking", config.getStrictHostKeyChecking());', '}', 'if (ObjectHelper.isNotEmpty(config.getPreferredAuthentications())) {']
['using preferredauthentications ', ['config', 'getpreferredauthentications']]
camel sample_9125

['session = jsch.getSession(config.getUsername(), config.getHost(), config.getPort());', 'session.setTimeout(config.getTimeout());', 'session.setUserInfo(new SessionUserInfo(config));', 'if (ObjectHelper.isNotEmpty(config.getStrictHostKeyChecking())) {', 'session.setConfig("StrictHostKeyChecking", config.getStrictHostKeyChecking());', '}', 'if (ObjectHelper.isNotEmpty(config.getPreferredAuthentications())) {', 'session.setConfig("PreferredAuthentications", config.getPreferredAuthentications());', '}', 'int timeout = config.getConnectTimeout();']
['connecting to with timeout ms no ', ['config', 'remoteserverinformation', 'timeout', 'integer', 'tostring', 'timeout']]
camel sample_9125

['session.setConfig("PreferredAuthentications", config.getPreferredAuthentications());', '}', 'int timeout = config.getConnectTimeout();', 'if (timeout > 0) {', 'session.connect(timeout);', '} else {', 'session.connect();', '}', '} catch (JSchException e) {', 'session = null;']
['could not create ssh session for ', ['config', 'remoteserverinformation', 'e']]
camel sample_9125

['private void writeFile(String filename, InputStream data, OutputStream os, InputStream is, ScpConfiguration cfg) throws IOException {', "final int lineFeed = '\\n';", 'String bytes;', "int pos = filename.indexOf('/');", 'if (pos >= 0) {', 'String dir = filename.substring(0, pos);', 'bytes = "D0775 0 " + dir;']
['scp sink ', ['bytes']]
camel sample_9125

["int pos = filename.indexOf('/');", 'if (pos >= 0) {', 'String dir = filename.substring(0, pos);', 'bytes = "D0775 0 " + dir;', 'os.write(bytes.getBytes());', 'os.write(lineFeed);', 'os.flush();', 'readAck(is);', 'writeFile(filename.substring(pos + 1), data, os, is, cfg);', 'bytes = "E";']
['scp sink ', ['bytes']]
camel sample_9125

['int read;', 'int size = endpoint.getBufferSize();', 'byte[] reply = new byte[size];', 'BufferedInputStream buffer = new BufferedInputStream(data, size);', 'try {', 'buffer.mark(Integer.MAX_VALUE);', 'while ((read = buffer.read(reply)) != -1) {', 'count += read;', '}', 'bytes = "C0" + cfg.getChmod() + " " + count + " " + filename;']
['scp sink ', ['bytes']]
camel sample_9125

['public String getPassphrase() {']
['private key authentication not supported ', []]
camel sample_9125

['public String getPassword() {']
['providing password for ssh authentication of user ', ['config', 'getusername']]
camel sample_9125

['public void addServiceFilterConfigurations() {', 'if (!(beanFactory instanceof ConfigurableBeanFactory)) {']
['beanfactory is not of type configurablebeanfactory ', []]
camel sample_13429

['private void doSelectOne(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {']
['selectone using statement ', ['in', 'statement']]
camel sample_12957

['private void doSelectOne(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'result = session.selectOne(statement, in);', '} else {']
['selectone using statement ', ['statement']]
camel sample_12957

['private void doSelectList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {']
['selectlist using statement ', ['in', 'statement']]
camel sample_12957

['private void doSelectList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'result = session.selectList(statement, in);', '} else {']
['selectlist using statement ', ['statement']]
camel sample_12957

['private void doInsert(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['inserting using statement ', ['value', 'statement']]
camel sample_12957

['Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = session.insert(statement, value);', 'doProcessResult(exchange, result, session);', '}', '} else {']
['inserting using statement ', ['statement']]
camel sample_12957

['private void doInsertList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {']
['inserting using statement ', ['in', 'statement']]
camel sample_12957

['private void doInsertList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'result = session.insert(statement, in);', 'doProcessResult(exchange, result, session);', '} else {']
['inserting using statement ', ['statement']]
camel sample_12957

['private void doUpdate(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['updating using statement ', ['value', 'statement']]
camel sample_12957

['Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = session.update(statement, value);', 'doProcessResult(exchange, result, session);', '}', '} else {']
['updating using statement ', ['statement']]
camel sample_12957

['private void doUpdateList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {']
['updating using statement ', ['in', 'statement']]
camel sample_12957

['private void doUpdateList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'result = session.update(statement, in);', 'doProcessResult(exchange, result, session);', '} else {']
['updating using statement ', ['statement']]
camel sample_12957

['private void doDelete(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['deleting using statement ', ['value', 'statement']]
camel sample_12957

['Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = session.delete(statement, value);', 'doProcessResult(exchange, result, session);', '}', '} else {']
['deleting using statement ', ['statement']]
camel sample_12957

['private void doDeleteList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {']
['deleting using statement ', ['in', 'statement']]
camel sample_12957

['private void doDeleteList(Exchange exchange, SqlSession session) throws Exception {', 'Object result;', 'Object in = getInput(exchange);', 'if (in != null) {', 'result = session.delete(statement, in);', 'doProcessResult(exchange, result, session);', '} else {']
['deleting using statement ', ['statement']]
camel sample_12957

['answer = exchange.getOut();', 'answer.getHeaders().putAll(exchange.getIn().getHeaders());', 'if (outputHeader != null) {', 'answer.setBody(exchange.getIn().getBody());', '}', '}', 'if (endpoint.getStatementType() == StatementType.SelectList || endpoint.getStatementType() == StatementType.SelectOne) {', 'MappedStatement ms = session.getConfiguration().getMappedStatement(statement);', 'if (ms != null && ms.getStatementType() == org.apache.ibatis.mapping.StatementType.CALLABLE) {', 'if (result == null) {']
['setting result as existing body as mybatis statement type is callable and there was no result ', []]
camel sample_12957

['answer.setBody(exchange.getIn().getBody());', '}', '}', 'if (endpoint.getStatementType() == StatementType.SelectList || endpoint.getStatementType() == StatementType.SelectOne) {', 'MappedStatement ms = session.getConfiguration().getMappedStatement(statement);', 'if (ms != null && ms.getStatementType() == org.apache.ibatis.mapping.StatementType.CALLABLE) {', 'if (result == null) {', 'answer.setBody(exchange.getIn().getBody());', '} else {', 'if (outputHeader != null) {']
['setting result as header ', ['outputheader', 'result']]
camel sample_12957

['}', 'if (endpoint.getStatementType() == StatementType.SelectList || endpoint.getStatementType() == StatementType.SelectOne) {', 'MappedStatement ms = session.getConfiguration().getMappedStatement(statement);', 'if (ms != null && ms.getStatementType() == org.apache.ibatis.mapping.StatementType.CALLABLE) {', 'if (result == null) {', 'answer.setBody(exchange.getIn().getBody());', '} else {', 'if (outputHeader != null) {', 'answer.setHeader(outputHeader, result);', '} else {']
['setting result as body ', ['result']]
camel sample_12957

['} else {', 'if (outputHeader != null) {', 'answer.setHeader(outputHeader, result);', '} else {', 'answer.setBody(result);', 'answer.setHeader(MyBatisConstants.MYBATIS_RESULT, result);', '}', '}', '} else {', 'if (outputHeader != null) {']
['setting result as header ', ['outputheader', 'result']]
camel sample_12957

['answer.setHeader(outputHeader, result);', '} else {', 'answer.setBody(result);', 'answer.setHeader(MyBatisConstants.MYBATIS_RESULT, result);', '}', '}', '} else {', 'if (outputHeader != null) {', 'answer.setHeader(outputHeader, result);', '} else {']
['setting result as body ', ['result']]
camel sample_12957

['public void process(Exchange exchange) throws Exception {', 'String q = query;', 'String location = exchange.getIn().getHeader(WeatherConstants.WEATHER_LOCATION, String.class);', 'if (location != null) {', 'q = getEndpoint().getConfiguration().getQuery(location);', '}', 'HttpClient httpClient = ((WeatherComponent) getEndpoint().getComponent()).getHttpClient();', 'GetMethod method = new GetMethod(q);', 'try {']
['going to execute the weather query ', ['q']]
camel sample_11382

['q = getEndpoint().getConfiguration().getQuery(location);', '}', 'HttpClient httpClient = ((WeatherComponent) getEndpoint().getComponent()).getHttpClient();', 'GetMethod method = new GetMethod(q);', 'try {', 'int statusCode = httpClient.executeMethod(method);', 'if (statusCode != HttpStatus.SC_OK) {', 'throw new IllegalStateException("Got the invalid http status value \'" + method.getStatusLine() + "\' as the result of the query \'" + query + "\'");', '}', 'String weather = getEndpoint().getCamelContext().getTypeConverter().mandatoryConvertTo(String.class, method.getResponseBodyAsStream());']
['got back the weather information ', ['weather']]
camel sample_11382

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_6815

['}', 'private boolean doProceed(AsyncCallback callback) throws Exception {', 'if (dynamicRouter != null) {', 'if (!dynamicRouter.isStarted()) {', 'ServiceHelper.startService(dynamicRouter);', '}', 'Expression expression = new DynamicRouterExpression(pojo);', 'return dynamicRouter.doRoutingSlip(exchange, expression, callback);', '}', 'if (LOG.isTraceEnabled()) {']
['invoking on bean with arguments for exchange ', ['new', 'object', 'method', 'pojo', 'asstring', 'arguments', 'exchange']]
camel sample_4828

['if (!dynamicRouter.isStarted()) {', 'ServiceHelper.startService(dynamicRouter);', '}', 'Expression expression = new DynamicRouterExpression(pojo);', 'return dynamicRouter.doRoutingSlip(exchange, expression, callback);', '}', 'if (LOG.isTraceEnabled()) {', '}', 'Object result = invoke(method, pojo, arguments, exchange);', 'if (result instanceof Callable) {']
['method returned callback which will be called ', ['result']]
camel sample_4828

['private void fillResult(Exchange exchange, Object result) {']
['setting bean invocation result ', ['result']]
camel sample_4828

['protected Expression[] createParameterExpressions() {', 'final int size = parameters.size();']
['creating parameters expression for parameters ', ['size']]
camel sample_4828

['protected Expression[] createParameterExpressions() {', 'final int size = parameters.size();', 'final Expression[] expressions = new Expression[size];', 'for (int i = 0; i < size; i++) {', 'Expression parameterExpression = parameters.get(i).getExpression();', 'expressions[i] = parameterExpression;']
['parameter has expression ', ['i', 'parameterexpression']]
camel sample_4828

['for (Annotation annotation : annotations) {', 'Class<? extends Annotation> annotationType = annotation.annotationType();', 'if (annotation instanceof Pattern || annotationType.equals(annotatedElement)) {', 'continue;', '} else {', 'Pattern another = getPatternAnnotation(annotationType, nextDepth);', 'if (pattern != null) {', 'if (answer == null) {', 'answer = another;', '} else {']
['duplicate pattern annotation found on annotation which will be ignored ', ['another', 'annotation']]
camel sample_4828

['}', '}', 'if (valid) {', 'if (parameterValue instanceof String) {', 'parameterValue = StringHelper.removeLeadingAndEndingQuotes((String) parameterValue);', '}', 'if (parameterValue != null) {', 'try {', 'answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);', 'if (LOG.isTraceEnabled()) {']
['parameter evaluated as type ', ['new', 'object', 'index', 'answer', 'objecthelper', 'type', 'answer']]
camel sample_4828

['if (parameterValue instanceof String) {', 'parameterValue = StringHelper.removeLeadingAndEndingQuotes((String) parameterValue);', '}', 'if (parameterValue != null) {', 'try {', 'answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);', 'if (LOG.isTraceEnabled()) {', '}', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['cannot convert from type to type for parameter ', ['new', 'object', 'objecthelper', 'type', 'parametervalue', 'parametertype', 'index']]
camel sample_4828

['Object answer = null;', 'Object result = expression.evaluate(exchange, Object.class);', 'if (result != null) {', 'try {', 'if (parameterType.isInstance(result)) {', 'answer = result;', '} else {', 'answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, result);', '}', 'if (LOG.isTraceEnabled()) {']
['parameter evaluated as type ', ['new', 'object', 'index', 'answer', 'objecthelper', 'type', 'answer']]
camel sample_4828

['try {', 'if (parameterType.isInstance(result)) {', 'answer = result;', '} else {', 'answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, result);', '}', 'if (LOG.isTraceEnabled()) {', '}', '} catch (NoTypeConversionAvailableException e) {', 'if (LOG.isDebugEnabled()) {']
['cannot convert from type to type for parameter ', ['new', 'object', 'objecthelper', 'type', 'result', 'parametertype', 'index']]
camel sample_4828

['answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, result);', '}', 'if (LOG.isTraceEnabled()) {', '}', '} catch (NoTypeConversionAvailableException e) {', 'if (LOG.isDebugEnabled()) {', '}', 'throw new ParameterBindingException(e, method, index, parameterType, result);', '}', '} else {']
['parameter evaluated as null ', ['index']]
camel sample_4828

['public static void main(String[] args) {']
['starting camel metrics example application ', []]
camel sample_17606

['public void beforeApplicationStart(CamelContext context) {']
['configuring camel metrics on all routes ', []]
camel sample_17606

['public void execute(Exchange exchange) throws SmppException {', 'SubmitMulti[] submitMulties = createSubmitMulti(exchange);', 'List<SubmitMultiResult> results = new ArrayList<SubmitMultiResult>(submitMulties.length);', 'for (SubmitMulti submitMulti : submitMulties) {', 'SubmitMultiResult result;', 'if (log.isDebugEnabled()) {']
['sending multiple short messages for exchange id ', ['exchange', 'getexchangeid']]
camel sample_16914

['if (log.isDebugEnabled()) {', '}', 'try {', 'result = session.submitMultiple( submitMulti.getServiceType(), TypeOfNumber.valueOf(submitMulti.getSourceAddrTon()), NumberingPlanIndicator.valueOf(submitMulti.getSourceAddrNpi()), submitMulti.getSourceAddr(), (Address[]) submitMulti.getDestAddresses(), new ESMClass(submitMulti.getEsmClass()), submitMulti.getProtocolId(), submitMulti.getPriorityFlag(), submitMulti.getScheduleDeliveryTime(), submitMulti.getValidityPeriod(), new RegisteredDelivery(submitMulti.getRegisteredDelivery()), new ReplaceIfPresentFlag(submitMulti.getReplaceIfPresentFlag()), DataCodings.newInstance(submitMulti.getDataCoding()), submitMulti.getSmDefaultMsgId(), submitMulti.getShortMessage(), submitMulti.getOptionalParameters());', 'results.add(result);', '} catch (Exception e) {', 'throw new SmppException(e);', '}', '}', 'if (log.isDebugEnabled()) {']
['sent multiple short messages for exchange id and received results ', ['exchange', 'getexchangeid', 'results']]
camel sample_16914

['type = "silver";', '} else if (i % 2 == 0) {', 'type = "gold";', '} else {', 'type = "bronze";', '}', 'template.sendBodyAndHeader("activemq:queue:inbox", "Message " + i, "type", type);', '}', 'assertMockEndpointsSatisfied();', 'long delta = System.currentTimeMillis() - start;']
['routeperformancepojotest sent took ms ', ['size', 'delta']]
camel sample_7029

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesReplicationControllersComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-replication-controllers.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-replication-controllers.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_560

['public void tapSomething(String body) throws Exception {', 'try {', 'LATCH.await(5, TimeUnit.SECONDS);', 'Thread.sleep(100);', '} catch (Exception e) {', 'fail("Should not be interrupted");', '}']
['wire tapping ', ['body']]
camel sample_2381

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CouchbaseComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.couchbase.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.couchbase.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_999

['Component component = context.getComponent("seda");', 'ComponentConfiguration configuration = component.createComponentConfiguration();', 'assertNotNull("Should have created a ComponentConfiguration for component " + component, configuration);', 'configuration.setBaseUri("foo");', 'configuration.setParameter("concurrentConsumers", 5);', 'configuration.setParameter("size", 1000);', 'try {', 'configuration.setParameter("doesNotExist", 1000);', 'fail("Should have got InvalidPropertyException thrown!");', '} catch (InvalidPropertyException e) {']
['got expected exception ', ['e']]
camel sample_1407

['SedaEndpoint endpoint = TestSupport .assertIsInstanceOf(SedaEndpoint.class, configuration.createEndpoint());', 'assertEquals("concurrentConsumers", 5, endpoint.getConcurrentConsumers());', 'assertEquals("size", 1000, endpoint.getSize());', 'assertEquals("endpoint uri", "foo?concurrentConsumers=5&size=1000", endpoint.getEndpointUri());', 'configuration.setEndpointParameter(endpoint, "concurrentConsumers", 6);', 'assertEquals("concurrentConsumers", 6, endpoint.getConcurrentConsumers());', 'try {', 'configuration.setEndpointParameter(endpoint, "doesNotExist", 1000);', 'fail("Should have got InvalidPropertyException thrown!");', '} catch (InvalidPropertyException e) {']
['got expected exception ', ['e']]
camel sample_1407

['public void testCreateNewDefaultComponentEndpoint() throws Exception {', 'Component component = context.getComponent("cheese");', 'ComponentConfiguration configuration = component.createComponentConfiguration();', 'assertNotNull("Should have created a ComponentConfiguration for component " + component, configuration);', 'configuration.setBaseUri("something");', 'configuration.setParameter("foo", "xyz");', 'configuration.setParameter("bar", 5);', 'NonUriEndpoint endpoint = TestSupport .assertIsInstanceOf(NonUriEndpoint.class, configuration.createEndpoint());', 'assertEquals("foo", "xyz", endpoint.getFoo());', 'assertEquals("bar", 5, endpoint.getBar());']
['created endpoint on uri ', ['endpoint', 'endpoint', 'getendpointuri']]
camel sample_1407

['configuration.setParameter("bar", 5);', 'NonUriEndpoint endpoint = TestSupport .assertIsInstanceOf(NonUriEndpoint.class, configuration.createEndpoint());', 'assertEquals("foo", "xyz", endpoint.getFoo());', 'assertEquals("bar", 5, endpoint.getBar());', 'configuration.setEndpointParameter(endpoint, "bar", 6);', 'assertEquals("bar", 6, endpoint.getBar());', 'try {', 'configuration.setEndpointParameter(endpoint, "doesNotExist", 1000);', 'fail("Should have got InvalidPropertyException thrown!");', '} catch (InvalidPropertyException e) {']
['got expected exception ', ['e']]
camel sample_1407

['} catch (InvalidPropertyException e) {', '}', 'ComponentConfiguration badConfiguration = component.createComponentConfiguration();', 'badConfiguration.setBaseUri(configuration.getBaseUri());', 'badConfiguration.setParameters(configuration.getParameters());', 'badConfiguration.setParameter("doesNotExist", 1000);', 'try {', 'badConfiguration.createEndpoint();', 'fail("Should have got ResolveEndpointFailedException thrown!");', '} catch (ResolveEndpointFailedException e) {']
['got expected exception ', ['e']]
camel sample_1407

['public void testIntrospectSedaEndpointParameters() throws Exception {', 'Component component = context.getComponent("seda");', 'ComponentConfiguration configuration = component.createComponentConfiguration();', 'assertNotNull("Should have created a ComponentConfiguration for component " + component, configuration);', 'SortedMap<String, ParameterConfiguration> parameterMap = configuration.getParameterConfigurationMap();', 'assertTrue("getParameterConfigurationMap() should not be empty!", !parameterMap.isEmpty());', 'ParameterConfiguration concurrentConsumersConfig = parameterMap.get("concurrentConsumers");', 'assertNotNull("parameterMap[concurrentConsumers] should not be null!", concurrentConsumersConfig);', 'assertEquals("concurrentConsumersConfig.getName()", "concurrentConsumers", concurrentConsumersConfig.getName());', 'assertEquals("concurrentConsumersConfig.getParameterType()", int.class, concurrentConsumersConfig.getParameterType());']
['has has configuration properties ', ['component', 'parametermap', 'keyset']]
camel sample_1407

['configuration.setEndpointParameter(endpoint, "concurrentConsumers", 10);', 'Object concurrentConsumers = configuration.getEndpointParameter(endpoint, "concurrentConsumers");', 'assertEquals("endpoint.concurrentConsumers", 10, concurrentConsumers);', 'configuration.setEndpointParameter(endpoint, "size", 1000);', 'Object size = configuration.getEndpointParameter(endpoint, "size");', 'assertEquals("endpoint.size", 1000, size);', 'try {', 'configuration.setEndpointParameter(endpoint, "doesNotExist", 1000);', 'fail("Should have got InvalidPropertyException thrown!");', '} catch (InvalidPropertyException e) {']
['got expected exception ', ['e']]
camel sample_1407

['configuration.setEndpointParameter(endpoint, "bar", 10);', 'Object bar = configuration.getEndpointParameter(endpoint, "bar");', 'assertEquals("endpoint.bar", 10, bar);', 'configuration.setEndpointParameter(endpoint, "foo", "anotherThing");', 'Object foo = configuration.getEndpointParameter(endpoint, "foo");', 'assertEquals("endpoint.foo", "anotherThing", foo);', 'try {', 'configuration.setEndpointParameter(endpoint, "doesNotExist", 1000);', 'fail("Should have got InvalidPropertyException thrown!");', '} catch (InvalidPropertyException e) {']
['got expected exception ', ['e']]
camel sample_1407

['private void doTestGetVersions(String suffix) throws Exception {', 'Object o = template().requestBody("direct:getVersions" + suffix, (Object) null);', 'List<Version> versions = null;', 'if (o instanceof Versions) {', 'versions = ((Versions) o).getVersions();', '} else {', 'versions = (List<Version>) o;', '}', 'assertNotNull(versions);']
['versions ', ['versions']]
camel sample_14704

['sslContextFactory.setSslContext(contextParameters.createSSLContext());', 'ServerConnector connector = new ServerConnector(server, sslContextFactory);', 'ServerConnector connector = new ServerConnector(server);', 'connector.setHost(HTTP_PROXY_HOST);', 'server.addConnector(connector);', 'final String authenticationString = "Basic " + B64Code.encode(HTTP_PROXY_USER_NAME + ":" + HTTP_PROXY_PASSWORD, StringUtil.__ISO_8859_1);', 'ConnectHandler connectHandler = new ConnectHandler() {', 'protected boolean handleAuthentication(HttpServletRequest request, HttpServletResponse response, String address) {', 'final String header = request.getHeader(PROXY_AUTHORIZATION.toString());', 'if (!authenticationString.equals(header)) {']
['missing header ', ['proxy', 'authorization']]
camel sample_14704

['connector.setHost(HTTP_PROXY_HOST);', 'server.addConnector(connector);', 'final String authenticationString = "Basic " + B64Code.encode(HTTP_PROXY_USER_NAME + ":" + HTTP_PROXY_PASSWORD, StringUtil.__ISO_8859_1);', 'ConnectHandler connectHandler = new ConnectHandler() {', 'protected boolean handleAuthentication(HttpServletRequest request, HttpServletResponse response, String address) {', 'final String header = request.getHeader(PROXY_AUTHORIZATION.toString());', 'if (!authenticationString.equals(header)) {', 'response.setHeader(PROXY_AUTHENTICATE.toString(), String.format("Basic realm=\\"%s\\"", HTTP_PROXY_REALM));', 'return false;', '}']
['request contains required header ', ['proxy', 'authorization']]
camel sample_14704

['protected boolean handleAuthentication(HttpServletRequest request, HttpServletResponse response, String address) {', 'final String header = request.getHeader(PROXY_AUTHORIZATION.toString());', 'if (!authenticationString.equals(header)) {', 'response.setHeader(PROXY_AUTHENTICATE.toString(), String.format("Basic realm=\\"%s\\"", HTTP_PROXY_REALM));', 'return false;', '}', 'return true;', '}', '};', 'server.setHandler(connectHandler);']
['starting proxy server ', []]
camel sample_14704

['if (!authenticationString.equals(header)) {', 'response.setHeader(PROXY_AUTHENTICATE.toString(), String.format("Basic realm=\\"%s\\"", HTTP_PROXY_REALM));', 'return false;', '}', 'return true;', '}', '};', 'server.setHandler(connectHandler);', 'server.start();', 'httpProxyPort = connector.getLocalPort();']
['started proxy server on port ', ['httpproxyport']]
camel sample_14704

['public static void tearDownAfterClass() throws Exception {', 'CamelTestSupport.tearDownAfterClass();']
['stopping proxy server ', []]
camel sample_14704

['public static void tearDownAfterClass() throws Exception {', 'CamelTestSupport.tearDownAfterClass();', 'server.stop();']
['stopped proxy server ', []]
camel sample_14704

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = applicationContext.getBeansOfType(RoutesBuilder.class, includeNonSingletons, true);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'Object bean = entry.getValue();', 'Object key = entry.getKey();']
['found routebuilder with id ', ['key', 'bean']]
camel sample_16369

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = applicationContext.getBeansOfType(RoutesBuilder.class, includeNonSingletons, true);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'Object bean = entry.getValue();', 'Object key = entry.getKey();', 'if (shouldIgnoreBean(bean)) {']
['ignoring routebuilder id ', ['key']]
camel sample_16369

['public void appendBuilders(List<RoutesBuilder> list) {', 'Map<String, RoutesBuilder> beans = applicationContext.getBeansOfType(RoutesBuilder.class, includeNonSingletons, true);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'Object bean = entry.getValue();', 'Object key = entry.getKey();', 'if (shouldIgnoreBean(bean)) {', 'continue;', '}', 'if (!isFilteredClass(bean)) {']
['ignoring filtered routebuilder id as class ', ['key', 'bean', 'getclass']]
camel sample_16369

['Map<String, RoutesBuilder> beans = applicationContext.getBeansOfType(RoutesBuilder.class, includeNonSingletons, true);', 'for (Entry<String, RoutesBuilder> entry : beans.entrySet()) {', 'Object bean = entry.getValue();', 'Object key = entry.getKey();', 'if (shouldIgnoreBean(bean)) {', 'continue;', '}', 'if (!isFilteredClass(bean)) {', 'continue;', '}']
['adding instantiated routebuilder id as class ', ['key', 'bean', 'getclass']]
camel sample_16369

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<LZFDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.lzf.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.lzf.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1057

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<GzipDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.gzip.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.gzip.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_833

['MockEndpoint mock = getMockEndpoint("mock:done");', 'mock.expectedMessageCount(number);', 'mock.expectsNoDuplicates(body());', 'createManyFiles(number);', 'context.startRoute("myRoute");', 'mock.setResultWaitTime(180 * 1000);', 'mock.assertIsSatisfied();', 'context.stop();', 'int found = 0;', 'log.info("=====================");']
['printing duplicates ', []]
camel sample_3085

['public void process(Exchange exchange) throws Exception {', 'Integer integer = duplicate.get(exchange.toString());', 'if (integer == null) {', 'duplicate.put(exchange.toString(), 1);', '} else {', 'integer++;', 'duplicate.put(exchange.toString(), integer);', '}']
['process called for ', ['exchange']]
camel sample_3085

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BindyKeyValuePairDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-kvp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-kvp.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_976

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ChunkComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.chunk.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.chunk.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1112

['public MllpTcpServerConsumer(MllpEndpoint endpoint, Processor processor) {', 'super(endpoint, processor);']
['mllptcpserverconsumer endpoint processor ', []]
camel sample_13887

['public void closeConnections() {', 'for (TcpSocketConsumerRunnable consumerRunnable : consumerRunnables.keySet()) {', 'if (consumerRunnable != null) {']
['close connection called via jmx for address ', ['consumerrunnable', 'getcombinedaddress']]
camel sample_13887

['public void resetConnections() {', 'for (TcpSocketConsumerRunnable consumerRunnable : consumerRunnables.keySet()) {', 'if (consumerRunnable != null) {']
['reset connection called via jmx for address ', ['consumerrunnable', 'getcombinedaddress']]
camel sample_13887

['protected void doStop() throws Exception {']
['dostop ', []]
camel sample_13887

['protected void doStart() throws Exception {']
['dostart starting acceptor ', []]
camel sample_13887

['serverSocket.setSoTimeout(getConfiguration().getAcceptTimeout());', 'InetSocketAddress socketAddress;', 'if (null == getEndpoint().getHostname()) {', 'socketAddress = new InetSocketAddress(getEndpoint().getPort());', '} else {', 'socketAddress = new InetSocketAddress(getEndpoint().getHostname(), getEndpoint().getPort());', '}', 'long startTicks = System.currentTimeMillis();', 'if (getConfiguration().hasMaxReceiveTimeouts()) {', 'if (getConfiguration().hasIdleTimeout()) {']
['both maxreceivedtimeouts and idletimeout uri options are specified idletimeout will be used ', ['getconfiguration', 'getmaxreceivetimeouts', 'getconfiguration', 'getidletimeout']]
camel sample_13887

['if (null == getEndpoint().getHostname()) {', 'socketAddress = new InetSocketAddress(getEndpoint().getPort());', '} else {', 'socketAddress = new InetSocketAddress(getEndpoint().getHostname(), getEndpoint().getPort());', '}', 'long startTicks = System.currentTimeMillis();', 'if (getConfiguration().hasMaxReceiveTimeouts()) {', 'if (getConfiguration().hasIdleTimeout()) {', '} else {', 'getConfiguration().setIdleTimeout(getConfiguration().getMaxReceiveTimeouts() * getConfiguration().getReceiveTimeout());']
['deprecated uri option maxreceivedtimeouts specified idletimeout will be used ', ['getconfiguration', 'getmaxreceivetimeouts', 'getconfiguration', 'getidletimeout']]
camel sample_13887

['}', 'do {', 'try {', 'if (getConfiguration().hasBacklog()) {', 'serverSocket.bind(socketAddress, getConfiguration().getBacklog());', '} else {', 'serverSocket.bind(socketAddress);', '}', '} catch (BindException bindException) {', 'if (System.currentTimeMillis() > startTicks + getConfiguration().getBindTimeout()) {']
['failed to bind to address within timeout ', ['socketaddress', 'getconfiguration', 'getbindtimeout']]
camel sample_13887

['try {', 'if (getConfiguration().hasBacklog()) {', 'serverSocket.bind(socketAddress, getConfiguration().getBacklog());', '} else {', 'serverSocket.bind(socketAddress);', '}', '} catch (BindException bindException) {', 'if (System.currentTimeMillis() > startTicks + getConfiguration().getBindTimeout()) {', 'throw bindException;', '} else {']
['failed to bind to address retrying in milliseconds ', ['socketaddress', 'getconfiguration', 'getbindretryinterval']]
camel sample_13887

['public void startConsumer(Socket clientSocket) {', 'TcpSocketConsumerRunnable client = new TcpSocketConsumerRunnable(this, clientSocket);', 'consumerRunnables.put(client, System.currentTimeMillis());', 'try {']
['starting consumer for socket ', ['clientsocket']]
camel sample_13887

['public void startConsumer(Socket clientSocket) {', 'TcpSocketConsumerRunnable client = new TcpSocketConsumerRunnable(this, clientSocket);', 'consumerRunnables.put(client, System.currentTimeMillis());', 'try {', 'consumerExecutor.submit(client);', '} catch (RejectedExecutionException rejectedExecutionEx) {']
['cannot start consumer max consumers already active ', []]
camel sample_13887

['public static void startGrpcServer() throws Exception {', 'grpcServer = ServerBuilder.forPort(GRPC_TEST_PORT).addService(new PingPongImpl()).build().start();']
['grpc server started on port ', ['grpc', 'test', 'port']]
camel sample_7496

['public static void stopGrpcServer() throws IOException {', 'if (grpcServer != null) {', 'grpcServer.shutdown();']
['grpc server stoped ', []]
camel sample_7496

['public void testPingSyncSyncMethodInvocation() throws Exception {']
['grpc pingsyncsync method test start ', []]
camel sample_7496

['public void testPingSyncSyncMultipleInvocation() throws Exception {', 'final Stopwatch stopwatch = Stopwatch.createStarted();', 'for (int id = 0; id < MULTIPLE_RUN_TEST_COUNT; id++) {', 'PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE + id).setPingId(id).build();', 'Object pongResponse = template.requestBody("direct:grpc-sync-sync", pingRequest);', 'assertEquals(((PongResponse)pongResponse).getPongId(), id);', '}']
['multiple sync invocation time milliseconds everage operations sec ', ['stopwatch', 'stop', 'elapsed', 'timeunit', 'milliseconds', 'math', 'round', 'multiple', 'run', 'test', 'count', 'stopwatch', 'elapsed', 'timeunit', 'milliseconds']]
camel sample_7496

['public void testPingSyncAsyncMethodInvocation() throws Exception {']
['grpc pingsyncasync method test start ', []]
camel sample_7496

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'onException(IllegalArgumentException.class) .maximumRedeliveries(5).redeliveryDelay(0);', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_1811

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'onException(IllegalArgumentException.class) .maximumRedeliveries(5).redeliveryDelay(0);', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_1811

['onException(IllegalArgumentException.class) .maximumRedeliveries(5).redeliveryDelay(0);', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_1811

['protected void doGetReplicationController(Exchange exchange, String operation) throws Exception {', 'ReplicationController rc = null;', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rcName)) {']
['get a specific replication controller require specify a replication controller name ', []]
camel sample_13307

['protected void doGetReplicationController(Exchange exchange, String operation) throws Exception {', 'ReplicationController rc = null;', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Get a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific replication controller require specify a namespace name ', []]
camel sample_13307

['protected void doCreateReplicationController(Exchange exchange, String operation) throws Exception {', 'ReplicationController rc = null;', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ReplicationControllerSpec rcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_SPEC, ReplicationControllerSpec.class);', 'if (ObjectHelper.isEmpty(rcName)) {']
['create a specific replication controller require specify a replication controller name ', []]
camel sample_13307

['protected void doCreateReplicationController(Exchange exchange, String operation) throws Exception {', 'ReplicationController rc = null;', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ReplicationControllerSpec rcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_SPEC, ReplicationControllerSpec.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Create a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific replication controller require specify a namespace name ', []]
camel sample_13307

['String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ReplicationControllerSpec rcSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_SPEC, ReplicationControllerSpec.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Create a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific replication controller require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(rcSpec)) {']
['create a specific replication controller require specify a replication controller spec bean ', []]
camel sample_13307

['protected void doDeleteReplicationController(Exchange exchange, String operation) throws Exception {', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rcName)) {']
['delete a specific replication controller require specify a replication controller name ', []]
camel sample_13307

['protected void doDeleteReplicationController(Exchange exchange, String operation) throws Exception {', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Delete a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific replication controller require specify a namespace name ', []]
camel sample_13307

['protected void doScaleReplicationController(Exchange exchange, String operation) throws Exception {', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'Integer replicasNumber = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_REPLICAS, Integer.class);', 'if (ObjectHelper.isEmpty(rcName)) {']
['scale a specific replication controller require specify a replication controller name ', []]
camel sample_13307

['protected void doScaleReplicationController(Exchange exchange, String operation) throws Exception {', 'String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'Integer replicasNumber = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_REPLICAS, Integer.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Scale a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['scale a specific replication controller require specify a namespace name ', []]
camel sample_13307

['String rcName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'Integer replicasNumber = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_REPLICAS, Integer.class);', 'if (ObjectHelper.isEmpty(rcName)) {', 'throw new IllegalArgumentException( "Scale a specific replication controller require specify a replication controller name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Scale a specific replication controller require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(replicasNumber)) {']
['scale a specific replication controller require specify a replicas number ', []]
camel sample_13307

['context.setName("context-" + id);', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:file-lock?delay=1s&period=1s") .routeId("route-" + id) .routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_2944

['public void warning(TransformerException e) throws TransformerException {']
['warning parsing xslt file ', ['e', 'getmessageandlocation']]
camel sample_5628

['public void error(TransformerException e) throws TransformerException {']
['error parsing xslt file ', ['e', 'getmessageandlocation']]
camel sample_5628

['public void fatalError(TransformerException e) throws TransformerException {']
['fatal error parsing xslt file ', ['e', 'getmessageandlocation']]
camel sample_5628

['public final synchronized void activate(final BundleContext bundleContext, final Map<String, String> props) throws Exception {', 'if (activated) {', 'return;', '}']
['activated ', []]
camel sample_12516

['public final synchronized void deactivate() {', 'if (!activated) {', 'return;', '}']
['deactivated ', []]
camel sample_12516

['if (started) {', 'return;', '}', 'try {', 'if (!active) {', 'context.setAutoStartup(false);', '}', 'context.start();', 'started = true;', '} catch (Exception e) {']
['failed to start camel context will try again when more camel components have been registered ', ['e']]
camel sample_12516

['private void stopCamelContext() {', 'if (!started) {', 'return;', '}', 'try {', 'context.stop();', '} catch (Exception e) {']
['failed to stop camel context ', ['e']]
camel sample_12516

['protected final void gotCamelComponent(final ServiceReference serviceReference) {']
['got a new camel component ', []]
camel sample_12516

['protected final void lostCamelComponent(final ServiceReference serviceReference) {']
['lost a camel component ', []]
camel sample_12516

['public void unscheduleTask() {', 'if (trigger != null) {']
['unscheduling trigger ', ['trigger', 'getkey']]
camel sample_14991

['map.put("routeId", routeId);', '} else {', 'map.put("task", runnable);', '}', 'map.put(QuartzConstants.QUARTZ_TRIGGER_TYPE, "cron");', 'map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron());', 'map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID());', 'job = JobBuilder.newJob(QuartzScheduledPollConsumerJob.class).usingJobData(map).build();', 'QuartzHelper.updateJobDataMap(getCamelContext(), job, null);', 'trigger = TriggerBuilder.newTrigger().withIdentity(id, triggerGroup) .withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())) .build();']
['scheduling job with trigger ', ['job', 'trigger', 'getkey']]
camel sample_14991

['}', 'map.put(QuartzConstants.QUARTZ_TRIGGER_TYPE, "cron");', 'map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron());', 'map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID());', 'job = JobBuilder.newJob(QuartzScheduledPollConsumerJob.class).usingJobData(map).build();', 'QuartzHelper.updateJobDataMap(getCamelContext(), job, null);', 'trigger = TriggerBuilder.newTrigger().withIdentity(id, triggerGroup) .withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())) .build();', 'quartzScheduler.scheduleJob(job, trigger);', '} else {', 'checkTriggerIsNonConflicting(existingTrigger);']
['trigger with key is already present in scheduler only updating it ', ['triggerkey']]
camel sample_14991

['QuartzHelper.updateJobDataMap(getCamelContext(), job, null);', 'trigger = TriggerBuilder.newTrigger().withIdentity(id, triggerGroup) .withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())) .build();', 'quartzScheduler.scheduleJob(job, trigger);', '} else {', 'checkTriggerIsNonConflicting(existingTrigger);', 'job = quartzScheduler.getJobDetail(existingTrigger.getJobKey());', 'JobDataMap jobData = job.getJobDataMap();', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron());', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID());', 'QuartzHelper.updateJobDataMap(getCamelContext(), job, null);']
['updated jobdata map to ', ['jobdata']]
camel sample_14991

['quartzScheduler.scheduleJob(job, trigger);', '} else {', 'checkTriggerIsNonConflicting(existingTrigger);', 'job = quartzScheduler.getJobDetail(existingTrigger.getJobKey());', 'JobDataMap jobData = job.getJobDataMap();', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron());', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID());', 'QuartzHelper.updateJobDataMap(getCamelContext(), job, null);', 'trigger = existingTrigger.getTriggerBuilder() .withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())) .build();', 'if (hasTriggerChanged(existingTrigger, trigger)) {']
['re scheduling job with trigger ', ['job', 'trigger', 'getkey']]
camel sample_14991

['checkTriggerIsNonConflicting(existingTrigger);', 'job = quartzScheduler.getJobDetail(existingTrigger.getJobKey());', 'JobDataMap jobData = job.getJobDataMap();', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron());', 'jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID());', 'QuartzHelper.updateJobDataMap(getCamelContext(), job, null);', 'trigger = existingTrigger.getTriggerBuilder() .withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())) .build();', 'if (hasTriggerChanged(existingTrigger, trigger)) {', 'quartzScheduler.rescheduleJob(triggerKey, trigger);', '} else {']
['scheduling job with trigger ', ['job', 'trigger', 'getkey']]
camel sample_14991

['protected void doStop() throws Exception {', 'if (trigger != null) {']
['unscheduling trigger ', ['trigger', 'getkey']]
camel sample_14991

['Integer size = getSize() == Integer.MAX_VALUE ? null : getSize();', 'QueueReference ref = getComponent().getOrCreateQueue(this, size, isMultipleConsumers(), queueFactory);', 'queue = ref.getQueue();', 'String key = getComponent().getQueueKey(getEndpointUri());', 'LOG.info("Endpoint {} is using shared queue: {} with size: {}", new Object[]{this, key, ref.getSize() !=  null ? ref.getSize() : Integer.MAX_VALUE});', 'if (ref.getSize() != null) {', 'setSize(ref.getSize());', '}', '} else {', 'queue = createQueue();']
['endpoint is using queue with size ', ['new', 'object', 'this', 'getendpointuri', 'getsize']]
camel sample_4890

['public void purgeQueue() {']
['purging queue with exchanges ', ['queue', 'size']]
camel sample_4890

['public void stop() throws Exception {', 'if (getConsumers().isEmpty()) {', 'super.stop();', '} else {']
['there is still active consumers ', []]
camel sample_4890

['public void shutdown() throws Exception {', 'if (shutdown.get()) {']
['service already shut down ', []]
camel sample_4890

['public void shutdown() throws Exception {', 'if (shutdown.get()) {', 'return;', '}', 'if (getComponent() != null) {', 'getComponent().onShutdownEndpoint(this);', '}', 'if (getConsumers().isEmpty()) {', 'super.shutdown();', '} else {']
['there is still active consumers ', []]
camel sample_4890

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNewLineRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_219

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNewLineRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, false);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_219

['public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'File tarFile;', 'Exchange answer = oldExchange;', 'if (newExchange == null) {', 'return oldExchange;', '}', 'if (oldExchange == null) {', 'try {', 'tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);']
['created temporary file ', ['tarfile']]
camel sample_12453

['tos.putArchiveEntry(nextEntry);', 'IOUtils.copy(tin, tos);', 'tos.closeArchiveEntry();', '}', 'TarArchiveEntry entry = new TarArchiveEntry(fileName == null ? file.getName() : fileName);', 'entry.setSize(file.length());', 'tos.putArchiveEntry(entry);', 'IOUtils.copy(in, tos);', 'tos.closeArchiveEntry();', 'IOHelper.close(fis, in, tin, tos);']
['deleting temporary file ', ['tmptar']]
camel sample_12453

['tos.putArchiveEntry(nextEntry);', 'IOUtils.copy(tin, tos);', 'tos.closeArchiveEntry();', '}', 'TarArchiveEntry entry = new TarArchiveEntry(entryName);', 'entry.setSize(length);', 'tos.putArchiveEntry(entry);', 'tos.write(buffer, 0, length);', 'tos.closeArchiveEntry();', 'IOHelper.close(fis, tin, tos);']
['deleting temporary file ', ['tmptar']]
camel sample_12453

['public void onComplete(Exchange exchange) {']
['deleting tar file on completion ', ['this', 'filetodelete']]
camel sample_12453

['public void init(CamelContext camelContext, NettyServerBootstrapConfiguration configuration, ChannelInitializer<Channel> pipelineFactory) {', 'super.init(camelContext, configuration, pipelineFactory);', 'this.port = configuration.getPort();', 'this.bootstrapConfiguration = configuration;']
['bootstrapfactory on port is using bootstrap configuration ', ['port', 'bootstrapconfiguration', 'tostringbootstrapconfiguration']]
camel sample_16685

['public void addConsumer(NettyConsumer consumer) {', 'if (compatibleCheck) {', 'if (bootstrapConfiguration != consumer.getConfiguration() && !bootstrapConfiguration.compatible(consumer.getConfiguration())) {', 'throw new IllegalArgumentException("Bootstrap configuration must be identical when adding additional consumer: " + consumer.getEndpoint() + " on same port: " + port + ".\\n  Existing " + bootstrapConfiguration.toStringBootstrapConfiguration() + "\\n       New " + consumer.getConfiguration().toStringBootstrapConfiguration());', '}', '}', 'if (LOG.isDebugEnabled()) {', 'NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer;']
['bootstrapfactory on port is adding consumer with context path ', ['port', 'httpconsumer', 'getconfiguration', 'getpath']]
camel sample_16685

['public void removeConsumer(NettyConsumer consumer) {', 'if (LOG.isDebugEnabled()) {', 'NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer;']
['bootstrapfactory on port is removing consumer with context path ', ['port', 'httpconsumer', 'getconfiguration', 'getpath']]
camel sample_16685

['protected void doStart() throws Exception {']
['bootstrapfactory on port is starting ', ['port']]
camel sample_16685

['public void stop() throws Exception {', 'int consumers = channelFactory.consumers();', 'if (consumers == 0) {']
['bootstrapfactory on port is stopping ', ['port']]
camel sample_16685

['public void stop() throws Exception {', 'int consumers = channelFactory.consumers();', 'if (consumers == 0) {', 'super.stop();', '} else {']
['bootstrapfactory on port has registered consumers so cannot stop yet ', ['port', 'consumers']]
camel sample_16685

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CMISComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cmis.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cmis.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1041

['}', 'boolean allowed = true;', 'synchronized (this) {', 'if (this.subscription != null) {', 'allowed = false;', '} else {', 'this.subscription = subscription;', '}', '}', 'if (!allowed) {']
['there is another active subscription cancelled ', []]
camel sample_11510

['}', '}', 'if (target != null) {', 'target.process(exchange, doneSync -> {', 'synchronized (this) {', 'inflightCount--;', '}', 'refill();', '});', '} else {']
['message received in stream but no consumers were attached discarding ', ['name', 'exchange']]
camel sample_11510

['public void onError(Throwable throwable) {', 'if (throwable == null) {', 'throw new NullPointerException("throwable is null");', '}']
['error in reactive stream ', ['name', 'throwable']]
camel sample_11510

['public void onComplete() {']
['reactive stream completed ', ['name']]
camel sample_11510

['protected void executeModel() throws MojoExecutionException, MojoFailureException {', 'getLog().info("================================================================================");']
['copying all camel model json descriptors ', []]
camel sample_126

['if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes/org/apache/camel/model");', 'PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', '}', 'if (springDir != null && springDir.isDirectory()) {', 'File target = new File(springDir, "target/classes/org/apache/camel/spring");', 'PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'File target2 = new File(springDir, "target/classes/org/apache/camel/core/xml");', 'PackageHelper.findJsonFiles(target2, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', '}']
['found model json files ', ['jsonfiles', 'size']]
camel sample_126

['File target = new File(springDir, "target/classes/org/apache/camel/spring");', 'PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'File target2 = new File(springDir, "target/classes/org/apache/camel/core/xml");', 'PackageHelper.findJsonFiles(target2, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', '}', 'modelsOutDir.mkdirs();', 'for (File file : jsonFiles) {', 'File to = new File(modelsOutDir, file.getName());', 'if (to.exists()) {', 'duplicateJsonFiles.add(to);']
['duplicate model name detected ', ['to']]
camel sample_126

['protected Set<String> executeComponents() throws MojoExecutionException, MojoFailureException {']
['copying all camel component json descriptors ', []]
camel sample_126

['File target = new File(coreDir, "target/classes");', 'int before = componentFiles.size();', 'int before2 = jsonFiles.size();', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', 'int after = componentFiles.size();', 'int after2 = jsonFiles.size();', 'if (before != after && before2 == after2) {', 'missingComponents.add(coreDir);', '}', '}']
['found component properties files ', ['componentfiles', 'size']]
camel sample_126

['File target = new File(coreDir, "target/classes");', 'int before = componentFiles.size();', 'int before2 = jsonFiles.size();', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', 'int after = componentFiles.size();', 'int after2 = jsonFiles.size();', 'if (before != after && before2 == after2) {', 'missingComponents.add(coreDir);', '}', '}']
['found component json files ', ['jsonfiles', 'size']]
camel sample_126

['if (before != after && before2 == after2) {', 'missingComponents.add(coreDir);', '}', '}', 'componentsOutDir.mkdirs();', 'Set<String> alternativeSchemes = new HashSet<>();', 'for (File file : jsonFiles) {', 'File to = new File(componentsOutDir, file.getName());', 'if (to.exists()) {', 'duplicateJsonFiles.add(to);']
['duplicate component name detected ', ['to']]
camel sample_126

['protected Set<String> executeDataFormats() throws MojoExecutionException, MojoFailureException {']
['copying all camel dataformat json descriptors ', []]
camel sample_126

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat properties files ', ['dataformatfiles', 'size']]
camel sample_126

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat json files ', ['jsonfiles', 'size']]
camel sample_126

['}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', 'dataFormatsOutDir.mkdirs();', 'for (File file : jsonFiles) {', 'File to = new File(dataFormatsOutDir, file.getName());', 'if (to.exists()) {', 'duplicateJsonFiles.add(to);']
['duplicate dataformat name detected ', ['to']]
camel sample_126

['protected Set<String> executeLanguages() throws MojoExecutionException, MojoFailureException {']
['copying all camel language json descriptors ', []]
camel sample_126

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language properties files ', ['languagefiles', 'size']]
camel sample_126

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language json files ', ['jsonfiles', 'size']]
camel sample_126

['}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', 'languagesOutDir.mkdirs();', 'for (File file : jsonFiles) {', 'File to = new File(languagesOutDir, file.getName());', 'if (to.exists()) {', 'duplicateJsonFiles.add(to);']
['duplicate language name detected ', ['to']]
camel sample_126

['private Set<String> executeOthers() throws MojoFailureException {']
['copying all camel other json descriptors ', []]
camel sample_126

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other properties files ', ['otherfiles', 'size']]
camel sample_126

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other json files ', ['jsonfiles', 'size']]
camel sample_126

['findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}', 'othersOutDir.mkdirs();', 'for (File file : jsonFiles) {', 'File to = new File(othersOutDir, file.getName());', 'if (to.exists()) {', 'duplicateJsonFiles.add(to);']
['duplicate other name detected ', ['to']]
camel sample_126

['protected void executeArchetypes() throws MojoExecutionException, MojoFailureException {']
['copying archetype catalog ', []]
camel sample_126

['protected void executeXmlSchemas() throws MojoExecutionException, MojoFailureException {']
['copying spring blueprint xml schemas ', []]
camel sample_126

['protected void executeDocuments(Set<String> components, Set<String> dataformats, Set<String> languages, Set<String> others) throws MojoExecutionException, MojoFailureException {']
['copying all camel documents ascii docs ', []]
camel sample_126

['missingAdocFiles.add(dir);', '}', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "src/main/docs");', 'findAsciiDocFilesRecursive(target, adocFiles, new CamelAsciiDocFileFilter());', '}']
['found ascii document files ', ['adocfiles', 'size']]
camel sample_126

['File target = new File(coreDir, "src/main/docs");', 'findAsciiDocFilesRecursive(target, adocFiles, new CamelAsciiDocFileFilter());', '}', 'documentsOutDir.mkdirs();', 'Asciidoctor asciidoctor = Asciidoctor.Factory.create();', 'int converted = 0;', 'for (File file : adocFiles) {', 'File to = new File(documentsOutDir, file.getName());', 'if (to.exists()) {', 'duplicateAdocFiles.add(to);']
['duplicate document name detected ', ['to']]
camel sample_126

['duplicateAdocFiles.add(to);', '}', 'try {', 'copyFile(file, to);', '} catch (IOException e) {', 'throw new MojoFailureException("Cannot copy file from " + file + " -> " + to, e);', '}', 'if (file.getName().endsWith(".adoc")) {', 'String newName = file.getName().substring(0, file.getName().length() - 5) + ".html";', 'File toHtml = new File(documentsOutDir, newName);']
['converting ascii document to html ', ['tohtml']]
camel sample_126

['output.add(line);', '}', 'if (lines.size() != output.size()) {', 'FileUtils.writeLines(toHtml, output, false);', '}', '} catch (IOException e) {', '}', '}', '}', 'if (converted > 0) {']
['converted ascii documents to html ', ['converted']]
camel sample_126

['private void printMissingDocumentsReport(Set<String> docs, Set<String> components, Set<String> dataformats, Set<String> languages, Set<String> others) {', 'getLog().info("");']
['camel missing documents report ', []]
camel sample_126

['} else if (component.equals("ftp") || component.equals("sftp") || component.equals("ftps")) {', 'component = "ftp";', '}', 'String name = component + "-component";', 'if (!docs.contains(name) && (!component.equalsIgnoreCase("linkedin") && !component.equalsIgnoreCase("salesforce") && !component.equalsIgnoreCase("servicenow"))) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing adoc component documentation ', ['missing', 'size']]
camel sample_126

['component = "ftp";', '}', 'String name = component + "-component";', 'if (!docs.contains(name) && (!component.equalsIgnoreCase("linkedin") && !component.equalsIgnoreCase("salesforce") && !component.equalsIgnoreCase("servicenow"))) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (String name : missing) {']
['t t ', ['name']]
camel sample_126

['if (dataformat.startsWith("bindy")) {', 'dataformat = "bindy";', '}', 'String name = dataformat + "-dataformat";', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing adoc dataformat documentation ', ['missing', 'size']]
camel sample_126

['dataformat = "bindy";', '}', 'String name = dataformat + "-dataformat";', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (String name : missing) {']
['t t ', ['name']]
camel sample_126

['}', 'missing.clear();', 'for (String language : languages) {', 'String name = language + "-language";', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing adoc language documentation ', ['missing', 'size']]
camel sample_126

['missing.clear();', 'for (String language : languages) {', 'String name = language + "-language";', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (String name : missing) {']
['t t ', ['name']]
camel sample_126

['}', 'missing.clear();', 'for (String other : others) {', 'String name = other;', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing adoc other documentation ', ['missing', 'size']]
camel sample_126

['missing.clear();', 'for (String other : others) {', 'String name = other;', 'if (!docs.contains(name)) {', 'missing.add(name);', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (String name : missing) {']
['t t ', ['name']]
camel sample_126

['private void printModelsReport(Set<File> json, Set<File> duplicate, Set<File> missingLabels, Map<String, Set<String>> usedLabels, Set<File> missingJavaDoc) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel model catalog report ', []]
camel sample_126

['private void printModelsReport(Set<File> json, Set<File> duplicate, Set<File> missingLabels, Map<String, Set<String>> usedLabels, Set<File> missingJavaDoc) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tmodels found ', ['json', 'size']]
camel sample_126

['private void printModelsReport(Set<File> json, Set<File> duplicate, Set<File> missingLabels, Map<String, Set<String>> usedLabels, Set<File> missingJavaDoc) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printModelsReport(Set<File> json, Set<File> duplicate, Set<File> missingLabels, Map<String, Set<String>> usedLabels, Set<File> missingJavaDoc) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate models detected ', ['duplicate', 'size']]
camel sample_126

['private void printModelsReport(Set<File> json, Set<File> duplicate, Set<File> missingLabels, Map<String, Set<String>> usedLabels, Set<File> missingJavaDoc) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!missingLabels.isEmpty()) {', 'getLog().info("");']
['tmissing labels detected ', ['missinglabels', 'size']]
camel sample_126

['for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!missingLabels.isEmpty()) {', 'getLog().info("");', 'for (File file : missingLabels) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['for (File file : duplicate) {', '}', '}', 'if (!missingLabels.isEmpty()) {', 'getLog().info("");', 'for (File file : missingLabels) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");']
['tused labels ', ['usedlabels', 'size']]
camel sample_126

['}', '}', 'if (!missingLabels.isEmpty()) {', 'getLog().info("");', 'for (File file : missingLabels) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {']
['t t ', ['entry', 'getkey']]
camel sample_126

['}', 'if (!missingLabels.isEmpty()) {', 'getLog().info("");', 'for (File file : missingLabels) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {']
['t t t ', ['name']]
camel sample_126

['}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingJavaDoc.isEmpty()) {', 'getLog().info("");']
['tmissing javadoc on models ', ['missingjavadoc', 'size']]
camel sample_126

['if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingJavaDoc.isEmpty()) {', 'getLog().info("");', 'for (File file : missingJavaDoc) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printComponentsReport(Set<File> json, Set<File> duplicate, Set<File> missing, Map<String, Set<String>> usedComponentLabels, Set<String> usedOptionsLabels, Set<String> unusedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel component catalog report ', []]
camel sample_126

['private void printComponentsReport(Set<File> json, Set<File> duplicate, Set<File> missing, Map<String, Set<String>> usedComponentLabels, Set<String> usedOptionsLabels, Set<String> unusedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tcomponents found ', ['json', 'size']]
camel sample_126

['private void printComponentsReport(Set<File> json, Set<File> duplicate, Set<File> missing, Map<String, Set<String>> usedComponentLabels, Set<String> usedOptionsLabels, Set<String> unusedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printComponentsReport(Set<File> json, Set<File> duplicate, Set<File> missing, Map<String, Set<String>> usedComponentLabels, Set<String> usedOptionsLabels, Set<String> unusedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate components detected ', ['duplicate', 'size']]
camel sample_126

['private void printComponentsReport(Set<File> json, Set<File> duplicate, Set<File> missing, Map<String, Set<String>> usedComponentLabels, Set<String> usedOptionsLabels, Set<String> unusedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedComponentLabels.isEmpty()) {', 'getLog().info("");']
['tused component labels ', ['usedcomponentlabels', 'size']]
camel sample_126

['for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedComponentLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedComponentLabels.entrySet()) {']
['t t ', ['entry', 'getkey']]
camel sample_126

['}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedComponentLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedComponentLabels.entrySet()) {', 'for (String name : entry.getValue()) {']
['t t t ', ['name']]
camel sample_126

['}', 'if (!usedComponentLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedComponentLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!usedOptionsLabels.isEmpty()) {', 'getLog().info("");']
['tused component endpoint options labels ', ['usedoptionslabels', 'size']]
camel sample_126

['if (!usedComponentLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedComponentLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!usedOptionsLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : usedOptionsLabels) {']
['t t t ', ['name']]
camel sample_126

['}', '}', '}', 'if (!usedOptionsLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : usedOptionsLabels) {', '}', '}', 'if (!unusedLabels.isEmpty()) {', 'getLog().info("");']
['tcomponent with more than unlabelled options ', ['unused', 'labels', 'warn', 'unusedlabels', 'size']]
camel sample_126

['}', '}', 'if (!usedOptionsLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : usedOptionsLabels) {', '}', '}', 'if (!unusedLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : unusedLabels) {']
['t t t ', ['name']]
camel sample_126

['for (String name : usedOptionsLabels) {', '}', '}', 'if (!unusedLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : unusedLabels) {', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing components detected ', ['missing', 'size']]
camel sample_126

['}', '}', 'if (!unusedLabels.isEmpty()) {', 'getLog().info("");', 'for (String name : unusedLabels) {', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (File name : missing) {']
['t t ', ['name', 'getname']]
camel sample_126

['for (String name : unusedLabels) {', '}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (File name : missing) {', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");']
['tcomponents without firstversion defined ', ['missingfirstversions', 'size']]
camel sample_126

['}', '}', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (File name : missing) {', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");', 'for (File name : missingFirstVersions) {']
['t t ', ['name', 'getname']]
camel sample_126

['private void printDataFormatsReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel data format catalog report ', []]
camel sample_126

['private void printDataFormatsReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tdataformats found ', ['json', 'size']]
camel sample_126

['private void printDataFormatsReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printDataFormatsReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate dataformat detected ', ['duplicate', 'size']]
camel sample_126

['private void printDataFormatsReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");']
['tused labels ', ['usedlabels', 'size']]
camel sample_126

['for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {']
['t t ', ['entry', 'getkey']]
camel sample_126

['}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {']
['t t t ', ['name']]
camel sample_126

['}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");']
['tdataformats without firstversion defined ', ['missingfirstversions', 'size']]
camel sample_126

['if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");', 'for (File name : missingFirstVersions) {']
['t t ', ['name', 'getname']]
camel sample_126

['private void printLanguagesReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel language catalog report ', []]
camel sample_126

['private void printLanguagesReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tlanguages found ', ['json', 'size']]
camel sample_126

['private void printLanguagesReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printLanguagesReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate language detected ', ['duplicate', 'size']]
camel sample_126

['private void printLanguagesReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");']
['tused labels ', ['usedlabels', 'size']]
camel sample_126

['for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {']
['t t ', ['entry', 'getkey']]
camel sample_126

['}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {']
['t t t ', ['name']]
camel sample_126

['}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");']
['tlanguages without firstversion defined ', ['missingfirstversions', 'size']]
camel sample_126

['if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");', 'for (File name : missingFirstVersions) {']
['t t ', ['name', 'getname']]
camel sample_126

['private void printOthersReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel other catalog report ', []]
camel sample_126

['private void printOthersReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tothers found ', ['json', 'size']]
camel sample_126

['private void printOthersReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printOthersReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate other detected ', ['duplicate', 'size']]
camel sample_126

['private void printOthersReport(Set<File> json, Set<File> duplicate, Map<String, Set<String>> usedLabels, Set<File> missingFirstVersions) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['getLog().info("");', 'for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");']
['tused labels ', ['usedlabels', 'size']]
camel sample_126

['for (File file : json) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {']
['t t ', ['entry', 'getkey']]
camel sample_126

['}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {']
['t t t ', ['name']]
camel sample_126

['}', 'if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");']
['tothers without firstversion defined ', ['missingfirstversions', 'size']]
camel sample_126

['if (!usedLabels.isEmpty()) {', 'getLog().info("");', 'for (Map.Entry<String, Set<String>> entry : usedLabels.entrySet()) {', 'for (String name : entry.getValue()) {', '}', '}', '}', 'if (!missingFirstVersions.isEmpty()) {', 'getLog().info("");', 'for (File name : missingFirstVersions) {']
['t t ', ['name', 'getname']]
camel sample_126

['private void printDocumentsReport(Set<File> docs, Set<File> duplicate, Set<File> missing) {', 'getLog().info("================================================================================");', 'getLog().info("");']
['camel document catalog report ', []]
camel sample_126

['private void printDocumentsReport(Set<File> docs, Set<File> duplicate, Set<File> missing) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");']
['tdocuments found ', ['docs', 'size']]
camel sample_126

['private void printDocumentsReport(Set<File> docs, Set<File> duplicate, Set<File> missing) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : docs) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['private void printDocumentsReport(Set<File> docs, Set<File> duplicate, Set<File> missing) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : docs) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");']
['tduplicate document detected ', ['duplicate', 'size']]
camel sample_126

['private void printDocumentsReport(Set<File> docs, Set<File> duplicate, Set<File> missing) {', 'getLog().info("================================================================================");', 'getLog().info("");', 'getLog().info("");', 'for (File file : docs) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {']
['t t ', ['ascomponentname', 'file']]
camel sample_126

['for (File file : docs) {', '}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'getLog().info("");', 'if (!missing.isEmpty()) {', 'getLog().info("");']
['tmissing document detected ', ['missing', 'size']]
camel sample_126

['}', 'if (!duplicate.isEmpty()) {', 'getLog().info("");', 'for (File file : duplicate) {', '}', '}', 'getLog().info("");', 'if (!missing.isEmpty()) {', 'getLog().info("");', 'for (File name : missing) {']
['t t ', ['name', 'getname']]
camel sample_126

['sizeToUse = bufferSize;', '} else if (queueSize > 0) {', 'sizeToUse = queueSize;', '} else {', 'sizeToUse = DEFAULT_BUFFER_SIZE;', '}', 'sizeToUse = powerOfTwo(sizeToUse);', 'synchronized (this) {', 'DisruptorReference ref = getDisruptors().get(key);', 'if (ref == null) {']
['creating new disruptor for key ', ['key']]
camel sample_10751

['sizeToUse = powerOfTwo(sizeToUse);', 'synchronized (this) {', 'DisruptorReference ref = getDisruptors().get(key);', 'if (ref == null) {', 'ref = new DisruptorReference(this, uri, name, sizeToUse, producerType, waitStrategy);', 'getDisruptors().put(key, ref);', '} else {', 'if (size != 0 && ref.getBufferSize() != sizeToUse) {', 'throw new IllegalArgumentException( "Cannot use existing queue " + key + " as the existing queue size " + ref.getBufferSize() + " does not match given queue size " + sizeToUse);', '}']
['reusing disruptor for key ', ['ref', 'key']]
camel sample_10751

['Thread.currentThread().setContextClassLoader(ac);', '}', 'if (endpoint.getReplyToType() != null) {', 'if (endpoint.getReplyTo() != null && endpoint.getReplyToType().equals(ReplyToType.Temporary.name())) {', 'throw new IllegalArgumentException("ReplyToType " + ReplyToType.Temporary + " is not supported when replyTo " + endpoint.getReplyTo() + " is also configured.");', '}', '}', 'if (endpoint.getReplyTo() != null) {', 'replyManager = createReplyManager(endpoint.getReplyTo());', 'if (LOG.isDebugEnabled()) {']
['using jmsreplymanager to process replies from ', ['replymanager', 'endpoint', 'getreplyto']]
camel sample_7195

['if (endpoint.getReplyTo() != null && endpoint.getReplyToType().equals(ReplyToType.Temporary.name())) {', 'throw new IllegalArgumentException("ReplyToType " + ReplyToType.Temporary + " is not supported when replyTo " + endpoint.getReplyTo() + " is also configured.");', '}', '}', 'if (endpoint.getReplyTo() != null) {', 'replyManager = createReplyManager(endpoint.getReplyTo());', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'replyManager = createReplyManager();']
['using jmsreplymanager to process replies from temporary queue ', ['replymanager']]
camel sample_7195

['throw new RuntimeExchangeException("Failed to resolve replyTo destination", exchange);', '}', 'JmsMessageHelper.setJMSReplyTo(answer, replyTo);', 'replyManager.setReplyToSelectorHeader(in, answer);', 'String correlationId = determineCorrelationId(answer, provisionalCorrelationId);', 'replyManager.registerReply(replyManager, exchange, callback, originalCorrelationId, correlationId, timeout);', 'if (correlationProperty != null) {', 'replyManager.setCorrelationProperty(correlationProperty);', '}', 'if (LOG.isDebugEnabled()) {']
['using jmsreplyto destination with request timeout ms ', ['new', 'object', 'correlationpropertytouse', 'correlationid', 'replyto', 'timeout']]
camel sample_7195

['}', 'JmsMessageHelper.setJMSReplyTo(answer, replyTo);', 'replyManager.setReplyToSelectorHeader(in, answer);', 'String correlationId = determineCorrelationId(answer, provisionalCorrelationId);', 'replyManager.registerReply(replyManager, exchange, callback, originalCorrelationId, correlationId, timeout);', 'if (correlationProperty != null) {', 'replyManager.setCorrelationProperty(correlationProperty);', '}', 'if (LOG.isDebugEnabled()) {', '}']
['created javax jms message ', ['answer']]
camel sample_7195

['if (destination != null) {', 'destinationName = null;', '}', 'final String to = destinationName != null ? destinationName : "" + destination;', 'MessageSentCallback messageSentCallback = getEndpoint().getConfiguration().isIncludeSentJMSMessageID() ? new InOnlyMessageSentCallback(exchange) : null;', 'MessageCreator messageCreator = new MessageCreator() {', 'public Message createMessage(Session session) throws JMSException {', 'Message answer = endpoint.getBinding().makeJmsMessage(exchange, in, session, null);', 'Object jmsReplyTo = JmsMessageHelper.getJMSReplyTo(answer);', 'if (endpoint.isDisableReplyTo()) {']
['replyto is disabled on endpoint ', ['endpoint']]
camel sample_7195

['jmsReplyTo = resolveOrCreateDestination(replyTo, session);', '}', 'Destination replyTo = null;', 'String replyToOverride = endpoint.getConfiguration().getReplyToOverride();', 'if (replyToOverride != null) {', 'replyTo = resolveOrCreateDestination(replyToOverride, session);', '} else if (jmsReplyTo instanceof Destination) {', 'replyTo = (Destination)jmsReplyTo;', '}', 'if (replyTo != null) {']
['using jmsreplyto destination ', ['replyto']]
camel sample_7195

['Destination replyTo = null;', 'String replyToOverride = endpoint.getConfiguration().getReplyToOverride();', 'if (replyToOverride != null) {', 'replyTo = resolveOrCreateDestination(replyToOverride, session);', '} else if (jmsReplyTo instanceof Destination) {', 'replyTo = (Destination)jmsReplyTo;', '}', 'if (replyTo != null) {', 'JmsMessageHelper.setJMSReplyTo(answer, replyTo);', '} else {']
['not using jmsreplyto ', []]
camel sample_7195

['if (replyToOverride != null) {', 'replyTo = resolveOrCreateDestination(replyToOverride, session);', '} else if (jmsReplyTo instanceof Destination) {', 'replyTo = (Destination)jmsReplyTo;', '}', 'if (replyTo != null) {', 'JmsMessageHelper.setJMSReplyTo(answer, replyTo);', '} else {', 'JmsMessageHelper.setJMSReplyTo(answer, null);', '}']
['created javax jms message ', ['answer']]
camel sample_7195

['protected void doSend(boolean inOut, String destinationName, Destination destination, MessageCreator messageCreator, MessageSentCallback callback) {', 'CamelJmsTemplate template = (CamelJmsTemplate) (inOut ? getInOutTemplate() : getInOnlyTemplate());', 'if (LOG.isTraceEnabled()) {']
['using jms template inOut inOnly ', ['inout']]
camel sample_7195

['protected Destination resolveOrCreateDestination(String destinationName, Session session) throws JMSException {', 'Destination dest = null;', 'boolean isPubSub = isTopicPrefix(destinationName) || (!isQueuePrefix(destinationName) && endpoint.isPubSubDomain());', 'if (endpoint.getDestinationResolver() != null) {', 'dest = endpoint.getDestinationResolver().resolveDestinationName(session, destinationName, isPubSub);', 'if (LOG.isDebugEnabled()) {']
['resolved jmsreplyto destination using destinationresolver as pubsubdomain ', ['new', 'object', 'destinationname', 'endpoint', 'getdestinationresolver', 'ispubsub', 'dest']]
camel sample_7195

['Destination dest = null;', 'boolean isPubSub = isTopicPrefix(destinationName) || (!isQueuePrefix(destinationName) && endpoint.isPubSubDomain());', 'if (endpoint.getDestinationResolver() != null) {', 'dest = endpoint.getDestinationResolver().resolveDestinationName(session, destinationName, isPubSub);', 'if (LOG.isDebugEnabled()) {', '}', '}', 'if (dest == null) {', 'String before = destinationName;', 'destinationName = normalizeDestinationName(destinationName);']
['normalized jmsreplyto destination name ', ['before', 'destinationname']]
camel sample_7195

['boolean isPubSub = isTopicPrefix(destinationName) || (!isQueuePrefix(destinationName) && endpoint.isPubSubDomain());', 'if (endpoint.getDestinationResolver() != null) {', 'dest = endpoint.getDestinationResolver().resolveDestinationName(session, destinationName, isPubSub);', 'if (LOG.isDebugEnabled()) {', '}', '}', 'if (dest == null) {', 'String before = destinationName;', 'destinationName = normalizeDestinationName(destinationName);', 'if (isPubSub) {']
['creating jmsreplyto topic ', ['destinationname']]
camel sample_7195

['dest = endpoint.getDestinationResolver().resolveDestinationName(session, destinationName, isPubSub);', 'if (LOG.isDebugEnabled()) {', '}', '}', 'if (dest == null) {', 'String before = destinationName;', 'destinationName = normalizeDestinationName(destinationName);', 'if (isPubSub) {', 'dest = session.createTopic(destinationName);', '} else {']
['creating jmsreplyto queue ', ['destinationname']]
camel sample_7195

['protected void setMessageId(Exchange exchange) {', 'if (exchange.hasOut()) {', 'JmsMessage out = exchange.getOut(JmsMessage.class);', 'try {', 'if (out != null && out.getJmsMessage() != null) {', 'out.setMessageId(out.getJmsMessage().getJMSMessageID());', '}', '} catch (JMSException e) {']
['unable to retrieve jmsmessageid from outgoing jms message and set it into camel s messageid ', ['e']]
camel sample_7195

['protected void testConnectionOnStartup() throws FailedToCreateProducerException {', 'try {', 'CamelJmsTemplate template = (CamelJmsTemplate) getInOnlyTemplate();', 'if (log.isDebugEnabled()) {']
['testing jms connection on startup for destination ', ['template', 'getdefaultdestinationname']]
camel sample_7195

['protected void testConnectionOnStartup() throws FailedToCreateProducerException {', 'try {', 'CamelJmsTemplate template = (CamelJmsTemplate) getInOnlyTemplate();', 'if (log.isDebugEnabled()) {', '}', 'Connection conn = template.getConnectionFactory().createConnection();', 'JmsUtils.closeConnection(conn);']
['successfully tested jms connection on startup for destination ', ['template', 'getdefaultdestinationname']]
camel sample_7195

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'onException(Exception.class).handled(true) .redeliveryDelay(0) .maximumRedeliveries(4).logStackTrace(false) .setBody().constant("Error");', 'from("direct:start") .to("mock:foo") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['invoking me ', []]
camel sample_2728

['public void testList() throws Exception {', 'final com.google.api.services.drive.model.App result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15416

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<JXPathLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.jxpath.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.jxpath.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_599

['public void load(TypeConverterRegistry registry) throws TypeConverterLoaderException {', 'String[] packageNames;']
['searching for services ', ['meta', 'inf', 'services']]
camel sample_3990

['String[] packageNames;', 'try {', 'packageNames = findPackageNames();', 'if (packageNames == null || packageNames.length == 0) {', 'throw new TypeConverterLoaderException("Cannot find package names to be used for classpath scanning for annotated type converters.");', '}', '} catch (Exception e) {', 'throw new TypeConverterLoaderException("Cannot find package names to be used for classpath scanning for annotated type converters.", e);', '}', 'if (packageNames.length == 1 && "org.apache.camel.core".equals(packageNames[0])) {']
['no additional package names found in classpath for annotated type converters ', []]
camel sample_3990

['} catch (Exception e) {', 'throw new TypeConverterLoaderException("Cannot find package names to be used for classpath scanning for annotated type converters.", e);', '}', 'if (packageNames.length == 1 && "org.apache.camel.core".equals(packageNames[0])) {', 'return;', '}', 'packageNames = filterUnwantedPackage("org.apache.camel.core", packageNames);', 'Set<Class<?>> classes = new HashSet<Class<?>>();', 'packageNames = filterPackageNamesOnly(resolver, packageNames, classes);', 'if (!classes.isEmpty()) {']
['loaded converter classes ', ['classes', 'size']]
camel sample_3990

['}', 'if (packageNames.length == 1 && "org.apache.camel.core".equals(packageNames[0])) {', 'return;', '}', 'packageNames = filterUnwantedPackage("org.apache.camel.core", packageNames);', 'Set<Class<?>> classes = new HashSet<Class<?>>();', 'packageNames = filterPackageNamesOnly(resolver, packageNames, classes);', 'if (!classes.isEmpty()) {', '}', 'if (packageNames != null && packageNames.length > 0) {']
['found converter packages to scan ', ['packagenames']]
camel sample_3990

['packageNames = filterUnwantedPackage("org.apache.camel.core", packageNames);', 'Set<Class<?>> classes = new HashSet<Class<?>>();', 'packageNames = filterPackageNamesOnly(resolver, packageNames, classes);', 'if (!classes.isEmpty()) {', '}', 'if (packageNames != null && packageNames.length > 0) {', 'Set<Class<?>> scannedClasses = resolver.findAnnotated(Converter.class, packageNames);', 'if (scannedClasses.isEmpty()) {', 'throw new TypeConverterLoaderException("Cannot find any type converter classes from the following packages: " + Arrays.asList(packageNames));', '}']
['found packages with converter classes to load ', ['packagenames', 'length', 'scannedclasses', 'size']]
camel sample_3990

['}', 'if (packageNames != null && packageNames.length > 0) {', 'Set<Class<?>> scannedClasses = resolver.findAnnotated(Converter.class, packageNames);', 'if (scannedClasses.isEmpty()) {', 'throw new TypeConverterLoaderException("Cannot find any type converter classes from the following packages: " + Arrays.asList(packageNames));', '}', 'classes.addAll(scannedClasses);', '}', 'for (Class<?> type : classes) {', 'if (LOG.isTraceEnabled()) {']
['loading converter class ', ['objecthelper', 'name', 'type']]
camel sample_3990

['if (resolver.getClassLoaders().isEmpty()) {', 'return packageNames;', '}', 'List<String> packages = new ArrayList<String>();', 'for (String name : packageNames) {', 'if (StringHelper.isClassName(name)) {', 'Class<?> clazz = null;', 'for (ClassLoader loader : resolver.getClassLoaders()) {', 'try {', 'clazz = ObjectHelper.loadClass(name, loader);']
['loaded as class ', ['name', 'clazz']]
camel sample_3990

['protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {', 'Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);', 'while (resources.hasMoreElements()) {', 'URL url = resources.nextElement();', 'String path = url.getPath();', 'if (!visitedURIs.contains(path)) {', 'visitedURIs.add(path);']
['loading file to retrieve list of packages from url ', ['meta', 'inf', 'services', 'url']]
camel sample_3990

['loadConverterMethods(registry, superclass);', '}', '} catch (NoClassDefFoundError e) {', 'boolean ignore = false;', 'if (ObjectHelper.hasAnnotation(type, Converter.class, true)) {', 'if (type.getAnnotation(Converter.class) != null) {', 'ignore = type.getAnnotation(Converter.class).ignoreOnLoadError();', '}', '}', 'if (ignore) {']
['ignoring converter type as a dependent class could not be found ', ['type', 'getcanonicalname', 'e', 'e']]
camel sample_3990

['}', '} catch (NoClassDefFoundError e) {', 'boolean ignore = false;', 'if (ObjectHelper.hasAnnotation(type, Converter.class, true)) {', 'if (type.getAnnotation(Converter.class) != null) {', 'ignore = type.getAnnotation(Converter.class).ignoreOnLoadError();', '}', '}', 'if (ignore) {', '} else {']
['ignoring converter type as a dependent class could not be found ', ['type', 'getcanonicalname', 'e', 'e']]
camel sample_3990

['private CachingInjector<?> handleHasConverterAnnotation(TypeConverterRegistry registry, Class<?> type, CachingInjector<?> injector, Method method, boolean allowNull) {', 'if (isValidConverterMethod(method)) {', 'int modifiers = method.getModifiers();', 'if (isAbstract(modifiers) || !isPublic(modifiers)) {']
['ignoring bad converter on type method as a converter method is not a public and concrete method ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['private CachingInjector<?> handleHasConverterAnnotation(TypeConverterRegistry registry, Class<?> type, CachingInjector<?> injector, Method method, boolean allowNull) {', 'if (isValidConverterMethod(method)) {', 'int modifiers = method.getModifiers();', 'if (isAbstract(modifiers) || !isPublic(modifiers)) {', '} else {', 'Class<?> toType = method.getReturnType();', 'if (toType.equals(Void.class)) {']
['ignoring bad converter on type method as a converter method returns a void method ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['registerTypeConverter(registry, method, toType, fromType, new StaticMethodTypeConverter(method, allowNull));', '} else {', 'if (injector == null) {', 'injector = new CachingInjector<Object>(registry, CastUtils.cast(type, Object.class));', '}', 'registerTypeConverter(registry, method, toType, fromType, new InstanceMethodTypeConverter(injector, method, registry, allowNull));', '}', '}', '}', '} else {']
['ignoring bad converter on type method as a converter method should have one parameter ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['private CachingInjector<?> handleHasFallbackConverterAnnotation(TypeConverterRegistry registry, Class<?> type, CachingInjector<?> injector, Method method, boolean allowNull) {', 'if (isValidFallbackConverterMethod(method)) {', 'int modifiers = method.getModifiers();', 'if (isAbstract(modifiers) || !isPublic(modifiers)) {']
['ignoring bad fallback converter on type method as a fallback converter method is not a public and concrete method ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['private CachingInjector<?> handleHasFallbackConverterAnnotation(TypeConverterRegistry registry, Class<?> type, CachingInjector<?> injector, Method method, boolean allowNull) {', 'if (isValidFallbackConverterMethod(method)) {', 'int modifiers = method.getModifiers();', 'if (isAbstract(modifiers) || !isPublic(modifiers)) {', '} else {', 'Class<?> toType = method.getReturnType();', 'if (toType.equals(Void.class)) {']
['ignoring bad fallback converter on type method as a fallback converter method returns a void method ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['registerFallbackTypeConverter(registry, new StaticMethodFallbackTypeConverter(method, registry, allowNull), method);', '} else {', 'if (injector == null) {', 'injector = new CachingInjector<Object>(registry, CastUtils.cast(type, Object.class));', '}', 'registerFallbackTypeConverter(registry, new InstanceMethodFallbackTypeConverter(injector, method, registry, allowNull), method);', '}', '}', '}', '} else {']
['ignoring bad fallback converter on type method as a fallback converter method should have one parameter ', ['type', 'getcanonicalname', 'method']]
camel sample_3990

['private void writeFiles() throws Exception {']
['writing files ', []]
camel sample_3139

['private void writeFiles() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/marker/in/file1.dat");', 'FileOutputStream fos2 = new FileOutputStream("target/marker/in/file2.dat");', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());', 'fos2.write(("Line " + i + LS).getBytes());']
['writing line ', ['i']]
camel sample_3139

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<YammerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.yammer.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.yammer.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1104

['} else {', 'this.nullableArguments = Collections.emptyList();', '}', 'final Map<Pattern, String> aliasPatterns = new HashMap<Pattern, String>();', 'for (Map.Entry<String, String> alias : aliases.entrySet()) {', 'if (alias.getKey() == null || alias.getValue() == null) {', 'throw new IllegalArgumentException("Alias pattern and replacement cannot be null");', '}', 'aliasPatterns.put(Pattern.compile(alias.getKey()), alias.getValue());', '}']
['processing ', ['apimethodenum', 'getname']]
camel sample_4306

['if (!ambiguousMethods.isEmpty()) {', 'throw new IllegalArgumentException( String.format("Ambiguous alias %s for methods %s", entry.getKey(), ambiguousMethods));', '}', '}', '}', '}', 'this.methodMap = Collections.unmodifiableMap(tmpMethodMap);', 'this.argumentsMap = Collections.unmodifiableMap(tmpArgumentsMap);', 'this.validArguments = Collections.unmodifiableMap(tmpValidArguments);', 'this.aliasesMap = Collections.unmodifiableMap(tmpAliasesMap);']
['found unique method names in methods ', ['tmpmethodmap', 'size', 'methods', 'length']]
camel sample_4306

['List<T> methods = methodMap.get(name);', 'if (methods == null) {', 'if (aliasesMap.containsKey(name)) {', 'methods = new ArrayList<T>();', 'for (String method : aliasesMap.get(name)) {', 'methods.addAll(methodMap.get(method));', '}', '}', '}', 'if (methods == null) {']
['no matching method for method ', ['name']]
camel sample_4306

['for (String method : aliasesMap.get(name)) {', 'methods.addAll(methodMap.get(method));', '}', '}', '}', 'if (methods == null) {', 'return Collections.emptyList();', '}', 'int nArgs = argNames != null ? argNames.size() : 0;', 'if (nArgs == 0) {']
['found methods for method ', ['methods', 'size', 'name']]
camel sample_4306

['}', 'if (methods == null) {', 'return Collections.emptyList();', '}', 'int nArgs = argNames != null ? argNames.size() : 0;', 'if (nArgs == 0) {', 'return Collections.unmodifiableList(methods);', '} else {', 'final List<ApiMethod> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames);', 'if (LOG.isDebugEnabled()) {']
['found filtered methods for ', ['filteredset', 'size', 'name', 'argnames', 'tostring', 'replace', 'replace']]
camel sample_4306

['public static Object invokeMethod(Object proxy, ApiMethod method, Map<String, Object> properties) throws RuntimeCamelException {', 'if (LOG.isDebugEnabled()) {']
['invoking with arguments ', ['method', 'getname', 'properties']]
camel sample_4306

['public void testIrcMessages() throws Exception {', 'resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceived(body1, body2, body3, body3);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_12150

['protected void onFirstMessage(ProcessContext context) {', 'if (!isStarted()) {', 'setTimeStarted(currentTime());', 'context.onStarted(this);']
['activity first message ', ['this']]
camel sample_12500

['protected void onExpectedMessage(ProcessContext context) {', 'if (!isCompleted()) {', 'setTimeCompleted(currentTime());', 'setTimeOverdue(null);', 'context.onCompleted(this);']
['activity complete ', ['this']]
camel sample_12500

['public void process(Exchange exchange) {', 'exchange.getIn().setBody(new SendEmail("foo@bar.com"));', '}', '});', 'results = entityManager.createQuery(queryText).getResultList();', 'assertEquals("Should have results: " + results, 1, results.size());', 'SendEmail mail = (SendEmail) results.get(0);', 'assertEquals("address property", "foo@bar.com", mail.getAddress());', 'consumer = endpoint.createConsumer(new Processor() {', 'public void process(Exchange e) {']
['received exchange ', ['e', 'getin']]
camel sample_14084

['public void onInit(Route route) {']
['oninit ', ['route', 'getid']]
camel sample_6507

['public void onRemove(Route route) {']
['onremove ', ['route', 'getid']]
camel sample_6507

['public void onStart(Route route) {']
['onstart ', ['route', 'getid']]
camel sample_6507

['public void onStop(Route route) {']
['onstop ', ['route', 'getid']]
camel sample_6507

['public void onSuspend(Route route) {']
['onsuspend ', ['route', 'getid']]
camel sample_6507

['public void onResume(Route route) {']
['onresume ', ['route', 'getid']]
camel sample_6507

['public void onExchangeBegin(Route route, Exchange exchange) {']
['onexchange start ', ['route', 'getid', 'exchange', 'getexchangeid']]
camel sample_6507

['public void onExchangeDone(Route route, Exchange exchange) {']
['onexchange end ', ['route', 'getid', 'exchange', 'getexchangeid']]
camel sample_6507

['protected void doStart() throws Exception {']
['doStart ', []]
camel sample_6507

['protected void doStop() throws Exception {']
['doStop ', []]
camel sample_6507

['private void startRouteImpl(Route route) throws Exception {', 'ServiceStatus routeStatus = route.getRouteContext().getCamelContext().getRouteStatus(route.getId());', 'if (routeStatus == ServiceStatus.Stopped) {']
['starting ', ['route', 'getid']]
camel sample_6507

['private void startRouteImpl(Route route) throws Exception {', 'ServiceStatus routeStatus = route.getRouteContext().getCamelContext().getRouteStatus(route.getId());', 'if (routeStatus == ServiceStatus.Stopped) {', 'startRoute(route);', '} else if (routeStatus == ServiceStatus.Suspended) {']
['resuming ', ['route', 'getid']]
camel sample_6507

['private void startRouteImpl(Route route) throws Exception {', 'ServiceStatus routeStatus = route.getRouteContext().getCamelContext().getRouteStatus(route.getId());', 'if (routeStatus == ServiceStatus.Stopped) {', 'startRoute(route);', '} else if (routeStatus == ServiceStatus.Suspended) {', 'startConsumer(route.getConsumer());', '} else {']
['nothing to do is ', ['route', 'getid', 'routestatus']]
camel sample_6507

['private void stopRouteImpl(Route route) throws Exception {', 'ServiceStatus routeStatus = route.getRouteContext().getCamelContext().getRouteStatus(route.getId());', 'if (routeStatus == ServiceStatus.Started) {']
['stopping ', ['route', 'getid']]
camel sample_6507

['private void stopRouteImpl(Route route) throws Exception {', 'ServiceStatus routeStatus = route.getRouteContext().getCamelContext().getRouteStatus(route.getId());', 'if (routeStatus == ServiceStatus.Started) {', 'stopRoute(route);', '} else {']
['nothing to do is ', ['route', 'getid', 'routestatus']]
camel sample_6507

['public void run() {', 'try {', 'if (dnsActivation.isActive()) {', 'startRoutes();', '} else {', 'stopRoutes();', '}', '} catch (Exception e) {']
['dnsactivation timertask failed ', ['e']]
camel sample_6507

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "camelContext");', 'ObjectHelper.notNull(loadBalancerClient, "loadBalancerClient");']
['servicecall is using cloud load balancer of type ', ['loadbalancerclient', 'getclass']]
camel sample_12916

['String state = (String) mbeanServer.getAttribute(on, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);', 'await().atMost(1, TimeUnit.SECONDS).untilAsserted(() -> {', 'Long completed = (Long) mbeanServer.getAttribute(on, "ExchangesCompleted");', 'assertEquals(1, completed.longValue());', '});', 'Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null);', 'assertEquals("Should be 1 consumer", 1, set.size());', 'set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null);', 'assertEquals("Should be 2 processors", 2, set.size());']
['invoking stop ', []]
camel sample_2817

['assertEquals("Should be started", ServiceStatus.Started.name(), state);', 'await().atMost(1, TimeUnit.SECONDS).untilAsserted(() -> {', 'Long completed = (Long) mbeanServer.getAttribute(on, "ExchangesCompleted");', 'assertEquals(1, completed.longValue());', '});', 'Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null);', 'assertEquals("Should be 1 consumer", 1, set.size());', 'set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null);', 'assertEquals("Should be 2 processors", 2, set.size());', 'mbeanServer.invoke(on, "stop", null, null);']
['invoking stop done ', []]
camel sample_2817

['set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null);', 'assertEquals("Should be 0 consumer", 0, set.size());', 'set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null);', 'assertEquals("Should be 0 processor", 0, set.size());', 'mock.reset();', 'mock.expectedBodiesReceived("Bye World");', 'mock.setResultWaitTime(2000);', 'template.sendBodyAndHeader("file: mock.assertIsNotSatisfied();', 'mock.reset();', 'mock.expectedBodiesReceived("Bye World");']
['invoking start ', []]
camel sample_2817

['assertEquals("Should be 0 consumer", 0, set.size());', 'set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null);', 'assertEquals("Should be 0 processor", 0, set.size());', 'mock.reset();', 'mock.expectedBodiesReceived("Bye World");', 'mock.setResultWaitTime(2000);', 'template.sendBodyAndHeader("file: mock.assertIsNotSatisfied();', 'mock.reset();', 'mock.expectedBodiesReceived("Bye World");', 'mbeanServer.invoke(on, "start", null, null);']
['invoking start done ', []]
camel sample_2817

['private QuartzEndpoint lookupQuartzEndpoint(CamelContext camelContext, String endpointUri, Trigger trigger) throws JobExecutionException {', 'String targetTriggerName = trigger.getName();', 'String targetTriggerGroup = trigger.getGroup();']
['looking up existing quartzendpoint with trigger ', ['targettriggername', 'targettriggergroup']]
camel sample_17217

['try {', 'for (Route route : camelContext.getRoutes()) {', 'Endpoint endpoint = route.getEndpoint();', 'if (endpoint instanceof DelegateEndpoint) {', 'endpoint = ((DelegateEndpoint)endpoint).getEndpoint();', '}', 'if (endpoint instanceof QuartzEndpoint) {', 'QuartzEndpoint quartzEndpoint = (QuartzEndpoint) endpoint;', 'String triggerName = quartzEndpoint.getTrigger().getName();', 'String triggerGroup = quartzEndpoint.getTrigger().getGroup();']
['checking route trigger ', ['triggername', 'triggergroup']]
camel sample_17217

['return (QuartzEndpoint) endpoint;', '}', '}', '}', '} catch (Exception e) {', 'throw new JobExecutionException("Error lookup up existing QuartzEndpoint with trigger: " + trigger, e);', '}', 'if (camelContext.hasEndpoint(endpointUri) != null) {', 'return camelContext.getEndpoint(endpointUri, QuartzEndpoint.class);', '} else {']
['cannot find existing quartzendpoint with uri creating new endpoint instance ', ['endpointuri']]
camel sample_17217

['public void testSenderXmlData() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.reset();', 'result.expectedMessageCount(4);', 'template.sendBody("direct:endpoint", xmlData);', 'assertMockEndpointsSatisfied();', 'int i = 0;', 'for (Exchange exchange : result.getExchanges()) {', 'Element element = (Element) exchange.getIn().getBody();', 'String message = CxfUtils.elementToString(element);']
['the splited message is ', ['message']]
camel sample_7746

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz/SpringQuartzClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();']
['the first app is going to crash now ', []]
camel sample_17169

['app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17169

['app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17169

['app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17169

['}', '});', 'context.start();', 'deleteDirectory(FTP_ROOT_DIR);', 'createDirectory(FTP_ROOT_DIR + "/slowfile");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(1);', 'template.sendBody("seda:start", "Create the slow file");', 'mock.assertIsSatisfied();', 'String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);']
['body is ', ['body']]
camel sample_15154

['public void process(Exchange exchange) throws Exception {']
['creating a slow file ', []]
camel sample_15154

['public void process(Exchange exchange) throws Exception {', 'File file = new File(FTP_ROOT_DIR + "/slowfile/hello.txt");', 'FileOutputStream fos = new FileOutputStream(file);', 'FileLock lock = fos.getChannel().lock();', 'fos.write("Hello World".getBytes());', 'for (int i = 0; i < 3; i++) {', 'Thread.sleep(1000);', 'fos.write(("Line #" + i).getBytes());']
['appending to slowfile ', []]
camel sample_15154

['FileOutputStream fos = new FileOutputStream(file);', 'FileLock lock = fos.getChannel().lock();', 'fos.write("Hello World".getBytes());', 'for (int i = 0; i < 3; i++) {', 'Thread.sleep(1000);', 'fos.write(("Line #" + i).getBytes());', '}', 'fos.write("Bye World".getBytes());', 'lock.release();', 'fos.close();']
['done creating slowfile ', []]
camel sample_15154

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FreemarkerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.freemarker.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.freemarker.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_521

['public void populateResponse(Exchange exchange, JettyContentExchange httpExchange) throws Exception {', 'int responseCode = httpExchange.getResponseStatus();']
['http responsecode ', ['responsecode']]
camel sample_17493

['config.timeBetweenEvictionRunsMillis = 30 * 1000L;', 'config.minEvictableIdleTimeMillis = configuration.getProducerPoolMinEvictableIdle();', 'config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;', 'pool = new GenericObjectPool<Channel>(new NettyProducerPoolableObjectFactory(), config);', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Created NettyProducer pool[maxActive={}, minIdle={}, maxIdle={}, minEvictableIdleTimeMillis={}] -> {}", new Object[]{config.maxActive, config.minIdle, config.maxIdle, config.minEvictableIdleTimeMillis, pool});', '}', '} else {', 'pool = new SharedSingletonObjectPool<Channel>(new NettyProducerPoolableObjectFactory());', 'if (LOG.isDebugEnabled()) {']
['created nettyproducer shared singleton pool ', ['pool']]
camel sample_6679

['protected void doStop() throws Exception {']
['stopping producer at address ', ['configuration', 'getaddress']]
camel sample_6679

['protected void doStop() throws Exception {']
['closing channels ', ['allchannels', 'size']]
camel sample_6679

['if (getConfiguration().getCharsetName() != null) {', 'exchange.setProperty(Exchange.CHARSET_NAME, IOHelper.normalizeCharset(getConfiguration().getCharsetName()));', '}', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("Pool[active={}, idle={}]", pool.getNumActive(), pool.getNumIdle());', '}', 'Channel existing;', 'try {', 'existing = pool.borrowObject();', 'if (existing != null) {']
['got channel from pool ', ['existing']]
camel sample_6679

['}', 'final Channel channel = existing;', 'final AsyncCallback producerCallback = new NettyProducerCallback(channel, callback);', 'channel.setAttachment(new NettyCamelState(producerCallback, exchange));', 'InetSocketAddress remoteAddress = null;', 'if (!isTcp()) {', 'remoteAddress = new InetSocketAddress(configuration.getHost(), configuration.getPort());', '}', 'NettyHelper.writeBodyAsync(LOG, channel, remoteAddress, body, exchange, new ChannelFutureListener() {', 'public void operationComplete(ChannelFuture channelFuture) throws Exception {']
['operation complete ', ['channelfuture']]
camel sample_6679

['close = exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['getendpoint', 'getconfiguration', 'getaddress']]
camel sample_6679

['clientBootstrap.setOption("reuseAddress", configuration.isReuseAddress());', 'clientBootstrap.setOption("connectTimeoutMillis", configuration.getConnectTimeout());', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'clientBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}', 'clientBootstrap.setPipelineFactory(pipelineFactory);', 'answer = clientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', 'if (LOG.isDebugEnabled()) {']
['created new tcp client bootstrap connecting to with options ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'clientbootstrap', 'getoptions']]
camel sample_6679

['}', 'connectionlessClientBootstrap.setPipelineFactory(pipelineFactory);', 'if (!configuration.isUdpConnectionlessSending()) {', 'answer = connectionlessClientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', '} else {', 'Channel channel = connectionlessClientBootstrap.bind(new InetSocketAddress(0));', 'allChannels.add(channel);', 'answer = new SucceededChannelFuture(channel);', '}', 'if (LOG.isDebugEnabled()) {']
['created new udp client bootstrap connecting to with options ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'connectionlessclientbootstrap', 'getoptions']]
camel sample_6679

['protected Channel openChannel(ChannelFuture channelFuture) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['waiting for operation to complete for millis ', ['channelfuture', 'configuration', 'getconnecttimeout']]
camel sample_6679

['if (!channelFuture.isDone() || !channelFuture.isSuccess()) {', 'ConnectException cause = new ConnectException("Cannot connect to " + configuration.getAddress());', 'if (channelFuture.getCause() != null) {', 'cause.initCause(channelFuture.getCause());', '}', 'throw cause;', '}', 'Channel answer = channelFuture.getChannel();', 'allChannels.add(answer);', 'if (LOG.isDebugEnabled()) {']
['creating connector to address ', ['configuration', 'getaddress']]
camel sample_6679

['public void done(boolean doneSync) {', 'try {', 'if (channel.isConnected()) {']
['putting channel back to pool ', ['channel']]
camel sample_6679

['public void done(boolean doneSync) {', 'try {', 'if (channel.isConnected()) {', 'pool.returnObject(channel);', '}', '} catch (Exception e) {']
['error returning channel to pool this exception will be ignored ', ['channel']]
camel sample_6679

['public Channel makeObject() throws Exception {', 'ChannelFuture channelFuture = openConnection();', 'Channel answer = openChannel(channelFuture);']
['created channel ', ['answer']]
camel sample_6679

['public void destroyObject(Channel channel) throws Exception {']
['destroying channel ', ['channel']]
camel sample_6679

['public boolean validateObject(Channel channel) {', 'boolean answer = false;', 'if (configuration.isUdpConnectionlessSending()) {', 'answer = channel.isOpen();', '} else {', 'answer = channel.isConnected();', '}']
['validating channel ', ['channel', 'answer']]
camel sample_6679

['public void activateObject(Channel channel) throws Exception {']
['activateobject channel ', ['channel']]
camel sample_6679

['public void passivateObject(Channel channel) throws Exception {']
['passivateobject channel ', ['channel']]
camel sample_6679

['public int read(@Body String body) {']
['read method called with on ', ['body', 'this']]
camel sample_3181

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CometdComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cometd.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cometd.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_937

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MasterComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.master.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.master.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1153

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'RepositoryCommit commit = (RepositoryCommit) in.getBody();', 'User author = commit.getAuthor();', 'if (log.isDebugEnabled()) {']
['got commit with author sha ', ['author', 'getlogin', 'author', 'gethtmlurl', 'commit', 'getsha']]
camel sample_14250

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<Jt400Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jt400.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jt400.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_464

['public void testNettyRouteServerNotStarted() throws Exception {', 'try {', 'MockEndpoint receive = context.getEndpoint("mock:receive", MockEndpoint.class);', 'receive.expectedBodiesReceived("Bye Willem");']
['starting camel route while netty server is not ready ', []]
camel sample_10213

['public void testNettyRouteServerNotStarted() throws Exception {', 'try {', 'MockEndpoint receive = context.getEndpoint("mock:receive", MockEndpoint.class);', 'receive.expectedBodiesReceived("Bye Willem");', 'context.startRoute("client");', 'Thread.sleep(500);']
['starting netty server ', []]
camel sample_10213

['public void testNettyRouteServerNotStarted() throws Exception {', 'try {', 'MockEndpoint receive = context.getEndpoint("mock:receive", MockEndpoint.class);', 'receive.expectedBodiesReceived("Bye Willem");', 'context.startRoute("client");', 'Thread.sleep(500);', 'startNettyServer();', 'assertMockEndpointsSatisfied();']
['routing done ', []]
camel sample_10213

['public void testNettyRouteServerNotStarted() throws Exception {', 'try {', 'MockEndpoint receive = context.getEndpoint("mock:receive", MockEndpoint.class);', 'receive.expectedBodiesReceived("Bye Willem");', 'context.startRoute("client");', 'Thread.sleep(500);', 'startNettyServer();', 'assertMockEndpointsSatisfied();', 'Thread.sleep(500);', '} finally {']
['shutting down netty server ', []]
camel sample_10213

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("netty4:tcp: .process(new Processor() {', 'public void process(final Exchange exchange) {']
['processing exchange in netty server ', ['exchange']]
camel sample_10213

['indexObject = service.getIndexes().get(index);', 'if (indexObject == null) {', 'throw new RuntimeCamelException(String.format("cannot find index [%s]", index));', '}', 'socket = indexObject.attach(args);', '} else {', 'receiver = service.getReceiver();', 'socket = receiver.attach(args);', '}', 'socket.setTcpNoDelay(true);']
['created a socket on s ', ['string', 'format', 'socket', 'getremotesocketaddress']]
camel sample_14483

['protected void onBeforeProcess(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, Breakpoint breakpoint) {', 'try {', 'breakpoint.beforeProcess(exchange, processor, definition);', '} catch (Throwable e) {']
['exception occurred in breakpoint this exception will be ignored ', ['breakpoint', 'e']]
camel sample_4078

['protected void onAfterProcess(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, long timeTaken, Breakpoint breakpoint) {', 'try {', 'breakpoint.afterProcess(exchange, processor, definition, timeTaken);', '} catch (Throwable e) {']
['exception occurred in breakpoint this exception will be ignored ', ['breakpoint', 'e']]
camel sample_4078

['LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class);', 'if (list != null && !list.isEmpty())  {', 'NamedNode node = list.getLast().getNode();', 'if (node instanceof ProcessorDefinition) {', 'definition = (ProcessorDefinition<?>) node;', '}', '}', 'try {', 'breakpoint.onEvent(exchange, event, definition);', '} catch (Throwable e) {']
['exception occurred in breakpoint this exception will be ignored ', ['breakpoint', 'e']]
camel sample_4078

['mock.expectedBodiesReceived(expected);', 'ProducerTemplate triggerTemplate = context.createProducerTemplate();', 'triggerTemplate.sendBody("vm:trigger", "");', 'assertMockEndpointsSatisfied();', 'long startFileDeletionCheckTime = System.currentTimeMillis();', 'boolean fileExists = true;', 'while (System.currentTimeMillis() - startFileDeletionCheckTime < 3000) {', 'File file = new File(FTP_ROOT_DIR + "/poll/hello.txt");', 'fileExists = file.exists();', 'if (fileExists) {']
['will check that file has been deleted again in ', []]
camel sample_15292

['private void doQueryForObject(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {']
['queryforobject using statement ', ['in', 'statement']]
camel sample_17305

['private void doQueryForObject(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'result = client.queryForObject(statement, in);', '} else {']
['queryforobject using statement ', ['statement']]
camel sample_17305

['private void doQueryForList(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {']
['queryforlist using statement ', ['in', 'statement']]
camel sample_17305

['private void doQueryForList(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'result = client.queryForList(statement, in);', '} else {']
['queryforlist using statement ', ['statement']]
camel sample_17305

['private void doInsert(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['inserting using statement ', ['value', 'statement']]
camel sample_17305

['Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = client.insert(statement, value);', 'doProcessResult(exchange, result);', '}', '} else {']
['inserting using statement ', ['statement']]
camel sample_17305

['private void doUpdate(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['updating using statement ', ['value', 'statement']]
camel sample_17305

['Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = client.update(statement, value);', 'doProcessResult(exchange, result);', '}', '} else {']
['updating using statement ', ['statement']]
camel sample_17305

['private void doDelete(Exchange exchange) throws Exception {', 'SqlMapClient client = endpoint.getSqlMapClient();', 'Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();']
['deleting using statement ', ['value', 'statement']]
camel sample_17305

['Object result;', 'Object in = exchange.getIn().getBody();', 'if (in != null) {', 'Iterator<?> iter = ObjectHelper.createIterator(in);', 'while (iter.hasNext()) {', 'Object value = iter.next();', 'result = client.delete(statement, value);', 'doProcessResult(exchange, result);', '}', '} else {']
['deleting using statement ', ['statement']]
camel sample_17305

['public SmppProducer(SmppEndpoint endpoint, SmppConfiguration config) {', 'super(endpoint);', 'this.configuration = config;', 'this.internalSessionStateListener = new SessionStateListener() {', 'public void onStateChange(SessionState newState, SessionState oldState, Session source) {', 'if (configuration.getSessionStateListener() != null) {', 'configuration.getSessionStateListener().onStateChange(newState, oldState, source);', '}', 'if (newState.equals(SessionState.CLOSED)) {']
['lost connection to trying to reconnect ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['private SMPPSession createSession() throws IOException {']
['connecting to ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['private SMPPSession createSession() throws IOException {', 'SMPPSession session = createSMPPSession();', 'session.setEnquireLinkTimer(this.configuration.getEnquireLinkTimer());', 'session.setTransactionTimer(this.configuration.getTransactionTimer());', 'session.addSessionStateListener(internalSessionStateListener);', 'session.connectAndBind( this.configuration.getHost(), this.configuration.getPort(), new BindParameter( BindType.BIND_TX, this.configuration.getSystemId(), this.configuration.getPassword(), this.configuration.getSystemType(), TypeOfNumber.valueOf(configuration.getTypeOfNumber()), NumberingPlanIndicator.valueOf(configuration.getNumberingPlanIndicator()), ""));']
['connected to ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['public void process(Exchange exchange) throws Exception {', 'if (session == null) {', 'if (this.configuration.isLazySessionCreation()) {', 'if (connectLock.tryLock()) {', 'try {', 'if (session == null) {', 'Message in = exchange.getIn();', 'String systemId = in.getHeader(SmppConstants.SYSTEM_ID, String.class);', 'String password = in.getHeader(SmppConstants.PASSWORD, String.class);', 'if (systemId != null && password != null) {']
['using the system id to connect to the smsc ', ['systemid']]
camel sample_16902

['protected void doStop() throws Exception {']
['disconnecting from ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['protected void doStop() throws Exception {', 'super.doStop();', 'closeSession();']
['disconnected from ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['private void reconnect(final long initialReconnectDelay) {', 'if (connectLock.tryLock()) {', 'try {', 'Runnable r = new Runnable() {', 'public void run() {', 'boolean reconnected = false;']
['schedule reconnect after millis ', ['initialreconnectdelay']]
camel sample_16902

['public void run() {', 'boolean reconnected = false;', 'try {', 'Thread.sleep(initialReconnectDelay);', '} catch (InterruptedException e) {', '}', 'int attempt = 0;', 'while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {', 'try {', 'attempt++;']
['trying to reconnect to attempt ', ['getendpoint', 'getconnectionstring', 'attempt']]
camel sample_16902

['Thread.sleep(initialReconnectDelay);', '} catch (InterruptedException e) {', '}', 'int attempt = 0;', 'while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {', 'try {', 'attempt++;', 'session = createSession();', 'reconnected = true;', '} catch (IOException e) {']
['failed to reconnect to ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['reconnected = true;', '} catch (IOException e) {', 'closeSession();', 'try {', 'Thread.sleep(configuration.getReconnectDelay());', '} catch (InterruptedException ee) {', '}', '}', '}', 'if (reconnected) {']
['reconnected to ', ['getendpoint', 'getconnectionstring']]
camel sample_16902

['public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {', 'Document encodedDocument = exchange.getContext().getTypeConverter().convertTo(Document.class, exchange, stream);', 'if (null != keyCipherAlgorithm && (keyCipherAlgorithm.equals(XMLCipher.RSA_v1dot5) || keyCipherAlgorithm.equals(XMLCipher.RSA_OAEP) || keyCipherAlgorithm.equals(XMLCipher.RSA_OAEP_11))) {', 'return decodeWithAsymmetricKey(exchange, encodedDocument);', '} else {']
['no known asymmetric keycipheralgorithm specified attempting to decrypt using a symmetric key ', []]
camel sample_6803

['SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(algorithm);', 'secretKey = keyFactory.generateSecret(keySpec);', '} else if (algorithm.equalsIgnoreCase("SEED")) {', 'secretKey = new SecretKeySpec(passPhrase, "SEED");', '} else if (algorithm.equalsIgnoreCase("CAMELLIA")) {', 'secretKey = new SecretKeySpec(passPhrase, "CAMELLIA");', '} else {', 'secretKey = new SecretKeySpec(passPhrase, "AES");', '}', 'if (Arrays.equals(passPhrase, DEFAULT_KEY.getBytes())) {']
['using the default encryption key is not secure ', []]
camel sample_6803

['} finally {', 'lock.writeLock().unlock();', '}', '}', '}', 'MessageHandlerAsyncCallback callback = new MessageHandlerAsyncCallback(exchange, messageProducer);', 'if (exchange.isFailed()) {', 'return;', '} else {', 'if (isTransacted() || isSynchronous()) {']
['synchronous processing message destination ', ['exchange', 'getin', 'getbody', 'getendpoint', 'getendpointuri']]
camel sample_12412

['} else {', 'if (isTransacted() || isSynchronous()) {', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '} finally {', 'callback.done(true);', '}', '} else {']
['asynchronous processing message destination ', ['exchange', 'getin', 'getbody', 'getendpoint', 'getendpointuri']]
camel sample_12412

['callback.done(true);', '}', '} else {', 'getProcessor().process(exchange, callback);', '}', '}', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'if (log.isDebugEnabled()) {']
['sjmsmessageconsumer invoked for exchange id ', ['exchange', 'getexchangeid']]
camel sample_12412

['public void close() {', 'for (final Map.Entry<String, MessageProducer> entry : producerCache.entrySet()) {', 'try {', 'entry.getValue().close();', '} catch (JMSException e) {']
['cached messageproducer with key threw an unexpected exception ', ['entry', 'getkey', 'e']]
camel sample_12412

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ServletComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.servlet.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.servlet.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_608

['public void process(Exchange exchange) throws Exception {', 'MongoDbOperation operation = endpoint.getOperation();', 'Object header = exchange.getIn().getHeader(MongoDbConstants.OPERATION_HEADER);', 'if (header != null) {']
['overriding default operation with operation specified on header ', ['header']]
camel sample_16451

['return endpoint.getMongoDatabase();', '}', 'String dynamicDB = exchange.getIn().getHeader(MongoDbConstants.DATABASE, String.class);', 'MongoDatabase db;', 'if (dynamicDB == null) {', 'db = endpoint.getMongoDatabase();', '} else {', 'db = endpoint.getMongoConnection().getDatabase(dynamicDB);', '}', 'if (LOG.isDebugEnabled()) {']
['dynamic database selected ', ['db', 'getname']]
camel sample_16451

['} else {', 'dbCol = db.getCollection(dynamicCollection, BasicDBObject.class);', 'if (dynamicIndex == null) {', 'endpoint.ensureIndex(dbCol, endpoint.createIndex());', '} else {', 'endpoint.ensureIndex(dbCol, dynamicIndex);', '}', '}', '}', 'if (LOG.isDebugEnabled()) {']
['dynamic database and or collection selected ', ['endpoint', 'getdatabase', 'endpoint', 'getcollection']]
camel sample_16451

['public void validate(Message message, DataType type) throws ValidationException {', 'message.getExchange().setProperty(VALIDATOR_INVOKED, OtherXOrderValidator.class);', 'assertEquals("name=XOrder", message.getBody());']
['java validation other xorder ', []]
camel sample_1295

['public void validate(Message message, DataType type) throws ValidationException {', 'message.getExchange().setProperty(VALIDATOR_INVOKED, OtherXOrderResponseValidator.class);', 'assertEquals("name=XOrderResponse", message.getBody());']
['java validation other xorderresponse ', []]
camel sample_1295

['public void process(Exchange exchange) throws Exception {', 'String toUsername = user;', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(TwitterConstants.TWITTER_USER, String.class))) {', 'toUsername = exchange.getIn().getHeader(TwitterConstants.TWITTER_USER, String.class);', '}', 'String text = exchange.getIn().getBody(String.class);', 'if (toUsername.isEmpty()) {', 'throw new CamelExchangeException("Username not configured on TwitterEndpoint", exchange);', '} else {']
['sending to message ', ['tousername', 'text']]
camel sample_14196

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {']
['found routebuilder class ', ['aclass']]
camel sample_16350

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {', 'if (shouldIgnoreBean(aClass)) {']
['ignoring routebuilder class ', ['aclass']]
camel sample_16350

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {', 'if (shouldIgnoreBean(aClass)) {', 'continue;', '}', 'if (!isValidClass(aClass)) {']
['ignoring invalid routebuilder class ', ['aclass']]
camel sample_16350

['if (shouldIgnoreBean(aClass)) {', 'continue;', '}', 'if (!isValidClass(aClass)) {', 'continue;', '}', 'RoutesBuilder builder = instantiateBuilder((Class<? extends RoutesBuilder>) aClass);', 'if (beanPostProcessor != null) {', 'beanPostProcessor.postProcessBeforeInitialization(builder, builder.toString());', '}']
['adding instantiated routebuilder ', ['builder']]
camel sample_16350

['public int poll() throws Exception {', 'if (!prepareOnStartup) {', 'endpoint.getGenericFileProcessStrategy().prepareOnStartup(operations, endpoint);', 'prepareOnStartup = true;', '}', 'fileExpressionResult = null;', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'if (!prePollCheck()) {']
['skipping poll as pre poll check returned false ', []]
camel sample_4796

['if (!prePollCheck()) {', 'return 0;', '}', 'List<GenericFile<T>> files = new ArrayList<GenericFile<T>>();', 'String name = endpoint.getConfiguration().getDirectory();', 'StopWatch stop = new StopWatch();', 'boolean limitHit;', 'try {', 'limitHit = !pollDirectory(name, files, 0);', '} catch (Exception e) {']
['error occurred during poll directory due removing files marked as in progress ', ['name', 'e', 'getmessage', 'files', 'size']]
camel sample_4796

['StopWatch stop = new StopWatch();', 'boolean limitHit;', 'try {', 'limitHit = !pollDirectory(name, files, 0);', '} catch (Exception e) {', 'removeExcessiveInProgressFiles(files);', 'throw e;', '}', 'long delta = stop.taken();', 'if (log.isDebugEnabled()) {']
['took to poll ', ['timeutils', 'printduration', 'delta', 'name']]
camel sample_4796

['try {', 'limitHit = !pollDirectory(name, files, 0);', '} catch (Exception e) {', 'removeExcessiveInProgressFiles(files);', 'throw e;', '}', 'long delta = stop.taken();', 'if (log.isDebugEnabled()) {', '}', 'if (limitHit) {']
['limiting maximum messages to poll at files as there were more messages in this poll ', ['maxmessagesperpoll']]
camel sample_4796

['}', 'if (endpoint.getSortBy() != null) {', 'exchanges.sort(endpoint.getSortBy());', '}', 'if (endpoint.isShuffle()) {', 'Collections.shuffle(exchanges);', '}', 'Deque<Exchange> q = exchanges;', 'if (!eagerLimitMaxMessagesPerPoll && maxMessagesPerPoll > 0) {', 'if (files.size() > maxMessagesPerPoll) {']
['limiting maximum messages to poll at files as there were more messages in this poll ', ['maxmessagesperpoll']]
camel sample_4796

['Collections.shuffle(exchanges);', '}', 'Deque<Exchange> q = exchanges;', 'if (!eagerLimitMaxMessagesPerPoll && maxMessagesPerPoll > 0) {', 'if (files.size() > maxMessagesPerPoll) {', 'removeExcessiveInProgressFiles(q, maxMessagesPerPoll);', '}', '}', 'int total = exchanges.size();', 'if (total > 0) {']
['total files to consume ', ['total']]
camel sample_4796

['public int processBatch(Queue<Object> exchanges) {', 'int total = exchanges.size();', 'int answer = total;', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_4796

['protected boolean processExchange(final Exchange exchange) {', 'GenericFile<T> file = getExchangeFileProperty(exchange);']
['processing file ', ['file']]
camel sample_4796

['final GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();', 'Exception beginCause = null;', 'boolean begin = false;', 'try {', 'begin = processStrategy.begin(operations, endpoint, exchange, file);', '} catch (Exception e) {', 'beginCause = e;', '}', 'if (!begin) {', 'Exception abortCause = null;']
['cannot begin processing file ', ['endpoint', 'file']]
camel sample_4796

['String msg2 = endpoint + " cannot abort processing file: " + file + " due to: " + abortCause.getMessage();', 'handleException(msg2, abortCause);', '}', 'return false;', '}', 'final GenericFile<T> target = getExchangeFileProperty(exchange);', 'updateFileHeaders(target, exchange.getIn());', 'final String name = target.getAbsoluteFilePath();', 'try {', 'if (isRetrieveFile()) {']
['retrieving file from ', ['name', 'endpoint']]
camel sample_4796

['boolean retrieved;', 'Exception cause = null;', 'try {', 'retrieved = operations.retrieveFile(name, exchange, target.getFileLength());', '} catch (Exception e) {', 'retrieved = false;', 'cause = e;', '}', 'if (!retrieved) {', 'if (ignoreCannotRetrieveFile(name, exchange, cause)) {']
['cannot retrieve file maybe it does not exists ignoring ', ['name']]
camel sample_4796

['endpoint.getInProgressRepository().remove(absoluteFileName);', 'return false;', '} else {', 'if (cause instanceof GenericFileOperationFailedException) {', 'throw cause;', '} else {', 'throw new GenericFileOperationFailedException("Cannot retrieve file: " + file + " from: " + endpoint, cause);', '}', '}', '}']
['retrieved file from ', ['name', 'endpoint']]
camel sample_4796

['return false;', '} else {', 'if (cause instanceof GenericFileOperationFailedException) {', 'throw cause;', '} else {', 'throw new GenericFileOperationFailedException("Cannot retrieve file: " + file + " from: " + endpoint, cause);', '}', '}', '}', '} else {']
['skipped retrieval of file from ', ['name', 'endpoint']]
camel sample_4796

['throw cause;', '} else {', 'throw new GenericFileOperationFailedException("Cannot retrieve file: " + file + " from: " + endpoint, cause);', '}', '}', '}', '} else {', 'exchange.getIn().setBody(null);', '}', 'exchange.addOnCompletion(new GenericFileOnCompletion<T>(endpoint, operations, target, absoluteFileName));']
['about to process file using exchange ', ['target', 'exchange']]
camel sample_4796

['protected boolean customProcessExchange(final Exchange exchange, final Processor processor) {', 'GenericFile<T> file = getExchangeFileProperty(exchange);']
['custom processing file ', ['file']]
camel sample_4796

['protected boolean customProcessExchange(final Exchange exchange, final Processor processor) {', 'GenericFile<T> file = getExchangeFileProperty(exchange);', 'String absoluteFileName = file.getAbsoluteFilePath();', 'try {', 'processor.process(exchange);', '} catch (Exception e) {', 'if (log.isDebugEnabled()) {']
['error custom processing due to this exception will be ignored ', ['endpoint', 'file', 'e', 'getmessage', 'e']]
camel sample_4796

['protected boolean isValidFile(GenericFile<T> file, boolean isDirectory, List<T> files) {', 'String absoluteFilePath = file.getAbsoluteFilePath();', 'if (!isMatched(file, isDirectory, files)) {']
['file did not match will skip this file ', ['file']]
camel sample_4796

['protected boolean isValidFile(GenericFile<T> file, boolean isDirectory, List<T> files) {', 'String absoluteFilePath = file.getAbsoluteFilePath();', 'if (!isMatched(file, isDirectory, files)) {', 'return false;', '}', 'if (isDirectory) {', 'return true;', '}', 'if (endpoint.getInProgressRepository().contains(absoluteFilePath)) {', 'if (log.isTraceEnabled()) {']
['skipping as file is already in progress ', ['file', 'getfilename']]
camel sample_4796

['}', 'return false;', '}', 'if (endpoint.isIdempotent()) {', 'String key = file.getAbsoluteFilePath();', 'if (endpoint.getIdempotentKey() != null) {', 'Exchange dummy = endpoint.createExchange(file);', 'key = endpoint.getIdempotentKey().evaluate(dummy, String.class);', '}', 'if (key != null && endpoint.getIdempotentRepository().contains(key)) {']
['this consumer is idempotent and the file has been consumed before matching idempotentkey will skip this file ', ['key', 'file']]
camel sample_4796

['Exchange dummy = endpoint.createExchange(file);', 'boolean matches = endpoint.getFilterFile().matches(dummy);', 'if (!matches) {', 'return false;', '}', '}', 'if (endpoint.getDoneFileName() != null) {', 'String doneFileName = endpoint.createDoneFileName(file.getAbsoluteFilePath());', 'StringHelper.notEmpty(doneFileName, "doneFileName", endpoint);', 'if (endpoint.isDoneFile(file.getFileNameOnly())) {']
['skipping done file ', ['file']]
camel sample_4796

['private void doTestWSHttpCall() throws Exception {', 'final List<Object> received = new ArrayList<Object>();', 'final CountDownLatch latch = new CountDownLatch(1);', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13152

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['ar acknowledgement ', ['mllpapplicationrejectacknowledgementexception', 'class', 'handled', 'true', 'to', 'ar', 'log', 'logginglevel', 'error', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['ae acknowledgement ', ['mllpapplicationerroracknowledgementexception', 'class', 'handled', 'true', 'to', 'ae', 'log', 'logginglevel', 'error', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['acknowledgement receive failed ', ['mllpacknowledgementreceiveexception', 'class', 'handled', 'true', 'to', 'ackreceiveerror', 'log', 'logginglevel', 'error', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['acknowledgement receive timeout ', ['mllpacknowledgementtimeoutexception', 'class', 'handled', 'true', 'to', 'acktimeouterror', 'log', 'logginglevel', 'error', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['invalid acknowledgement ', ['mllpinvalidacknowledgementexception', 'class', 'handled', 'true', 'to', 'invalid', 'log', 'logginglevel', 'error', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['exchange failed ', ['onfailureonly', 'to', 'failed', 'log', 'logginglevel', 'debug', 'routeid']]
camel sample_13851

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['sending message mllp log logginglevel info routeid acknowledgement to aa ', ['source', 'getdefaultendpoint', 'routeid', 'routeid', 'log', 'logginglevel', 'info', 'routeid', 'tof', 'received']]
camel sample_13851

['try {', 'classpathElements = project.getTestClasspathElements();', '} catch (org.apache.maven.artifact.DependencyResolutionRequiredException e) {', 'throw new MojoExecutionException(e.getMessage(), e);', '}', 'final URL[] urls = new URL[classpathElements.size()];', 'int i = 0;', 'for (Iterator it = classpathElements.iterator(); it.hasNext(); i++) {', 'try {', 'urls[i] = new File((String) it.next()).toURI().toURL();']
['adding project path ', ['urls', 'i']]
camel sample_109

['}', 'MimeMessage mimeMessage;', 'final Object body = exchange.getIn().getBody();', 'if (body instanceof MimeMessage) {', 'mimeMessage = (MimeMessage) body;', '} else {', 'mimeMessage = new MimeMessage(sender.getSession());', 'getEndpoint().getBinding().populateMailMessage(getEndpoint(), mimeMessage, exchange);', '}', 'if (LOG.isDebugEnabled()) {']
['sending mimemessage ', ['mailutils', 'dumpmessage', 'mimemessage']]
camel sample_11883

['ObjectHelper.notNull(configuration.getKeyCertChainResource(), "serviceAccountResource");', 'ClassResolver classResolver = endpoint.getCamelContext().getClassResolver();', 'Credentials creds = GoogleCredentials.fromStream(ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getServiceAccountResource()));', 'callCreds = MoreCallCredentials.from(creds);', '} else if (configuration.getAuthenticationType() == GrpcAuthType.JWT) {', 'ObjectHelper.notNull(configuration.getJwtSecret(), "jwtSecret");', 'String jwtToken = JwtHelper.createJwtToken(configuration.getJwtAlgorithm(), configuration.getJwtSecret(), configuration.getJwtIssuer(), configuration.getJwtSubject());', 'callCreds = new JwtCallCredentials(jwtToken);', '}', 'if (endpoint.isSynchronous()) {']
['getting synchronous method stub from channel ', []]
camel sample_7505

['Credentials creds = GoogleCredentials.fromStream(ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getServiceAccountResource()));', 'callCreds = MoreCallCredentials.from(creds);', '} else if (configuration.getAuthenticationType() == GrpcAuthType.JWT) {', 'ObjectHelper.notNull(configuration.getJwtSecret(), "jwtSecret");', 'String jwtToken = JwtHelper.createJwtToken(configuration.getJwtAlgorithm(), configuration.getJwtSecret(), configuration.getJwtIssuer(), configuration.getJwtSubject());', 'callCreds = new JwtCallCredentials(jwtToken);', '}', 'if (endpoint.isSynchronous()) {', 'grpcStub = GrpcUtils.constructGrpcBlockingStub(endpoint.getServicePackage(), endpoint.getServiceName(), channel, callCreds, endpoint.getCamelContext());', '} else {']
['getting asynchronous method stub from channel ', []]
camel sample_7505

['protected void doStop() throws Exception {', 'if (channel != null) {', 'forwarder.shutdown();', 'forwarder = null;']
['terminating channel to the remote grpc server ', []]
camel sample_7505

['protected void initializeChannel() throws Exception {', 'NettyChannelBuilder channelBuilder = null;', 'if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {']
['creating channel to the remote grpc server ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_7505

['context.addService(service);', 'context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:zookeeper?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['id']]
camel sample_12606

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixValueComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-value.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-value.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1081

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {']
['configuring client and server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4283

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {']
['configuring client and server side sslcontext session timeout on sslcontext to ', ['context', 'this', 'getsessiontimeout']]
camel sample_4283

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {', 'this.configureSessionContext(context.getClientSessionContext(), this.getSessionTimeout());', 'this.configureSessionContext(context.getServerSessionContext(), this.getSessionTimeout());', '}']
['configured client and server side sslcontext parameters on sslcontext ', ['context']]
camel sample_4283

['public SSLContextDecorator(SSLContextSpiDecorator decorator) {', 'super(decorator, decorator.getDelegate().getProvider(), decorator.getDelegate().getProtocol());']
['sslcontextdecorator decorating sslcontext ', ['this', 'decorator', 'getdelegate']]
camel sample_4283

['protected SSLEngine engineCreateSSLEngine() {', 'SSLEngine engine = this.context.createSSLEngine();']
['sslengine created from sslcontext ', ['engine', 'context']]
camel sample_4283

['protected SSLEngine engineCreateSSLEngine(String peerHost, int peerPort) {', 'SSLEngine engine = this.context.createSSLEngine(peerHost, peerPort);']
['sslengine created from sslcontext ', ['engine', 'context']]
camel sample_4283

['protected SSLServerSocketFactory engineGetServerSocketFactory() {', 'SSLServerSocketFactory factory = this.context.getServerSocketFactory();']
['sslserversocketfactoryengine created from sslcontext ', ['factory', 'context']]
camel sample_4283

['protected SSLSocketFactory engineGetSocketFactory() {', 'SSLSocketFactory factory = this.context.getSocketFactory();']
['sslsocketfactory created from sslcontext ', ['factory', 'context']]
camel sample_4283

['private ServerSocket configureSocket(ServerSocket s) {', 'SSLServerSocket workingSocket = (SSLServerSocket) s;']
['created serversocket from sslserversocketfactory ', ['s', 'sslserversocketfactory']]
camel sample_4283

['private Socket configureSocket(Socket s) {', 'SSLSocket workingSocket = (SSLSocket) s;']
['created socket from socketfactory ', ['s', 'sslsocketfactory']]
camel sample_4283

['public HttpClientInitializerFactory(NettyHttpProducer nettyProducer) {', 'this.producer = nettyProducer;', 'try {', 'this.sslContext = createSSLContext(producer);', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_16645

['protected void initChannel(Channel ch) throws Exception {', 'ChannelPipeline pipeline = ch.pipeline();', 'SslHandler sslHandler = configureClientSSLOnDemand();', 'if (sslHandler != null) {']
['client ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_16645

['for (int x = 0; x < decoders.size(); x++) {', 'ChannelHandler decoder = decoders.get(x);', 'if (decoder instanceof ChannelHandlerFactory) {', 'decoder = ((ChannelHandlerFactory) decoder).newChannelHandler();', '}', 'pipeline.addLast("decoder-" + x, decoder);', '}', 'pipeline.addLast("aggregator", new HttpObjectAggregator(configuration.getChunkedMaxContentLength()));', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {']
['using request timeout millis ', ['producer', 'getconfiguration', 'getrequesttimeout']]
camel sample_16645

['private SSLContext createSSLContext(NettyProducer producer) throws Exception {', 'NettyConfiguration configuration = producer.getConfiguration();', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_16645

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_16645

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_16645

['public void startThriftClient() throws IOException, TTransportException {', 'if (transport == null) {']
['connecting to the thrift server on port ', ['thrift', 'test', 'port']]
camel sample_13017

['public void stopThriftClient() throws Exception {', 'if (transport != null) {', 'transport.close();', 'transport = null;']
['connection to the thrift server closed ', []]
camel sample_13017

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'DirectVmConsumer consumer = endpoint.getComponent().getConsumer(endpoint);', 'if (consumer == null) {', 'if (endpoint.isFailIfNoConsumers()) {', 'exchange.setException(new DirectVmConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange));', '} else {']
['message ignored no consumers available on endpoint ', ['endpoint']]
camel sample_4903

['if (httpClientAPI == null) {', 'httpClientAPI = ((CxfRsEndpoint) getEndpoint()).isHttpClientAPI();', '}', 'if (httpClientAPI.booleanValue()) {', 'invokeAsyncHttpClient(exchange, callback);', '} else {', 'invokeAsyncProxyClient(exchange, callback);', '}', 'return false;', '} catch (Exception exception) {']
['error invoking request ', ['exception']]
camel sample_8023

['Map<String, String> maps = null;', 'if (requestURL != null && matrixStart > 0) {', 'matrixParam = requestURL.substring(matrixStart + 1, matrixEnd);', 'if (matrixParam != null) {', 'maps = getMatrixParametersFromMatrixString(matrixParam, IOHelper.getCharsetName(exchange));', '}', '}', 'if (maps != null) {', 'for (Map.Entry<String, String> entry : maps.entrySet()) {', 'client.matrix(entry.getKey(), entry.getValue());']
['matrix param ', ['entry', 'getkey', 'entry', 'getvalue']]
camel sample_8023

['if (genericType != null && !genericType.equals(Void.TYPE)) {', 'GenericType genericType = new GenericType(this.genericType);', 'exchange.getOut().setBody(binding.bindResponseToCamelBody(response.readEntity(genericType), exchange));', '} else if (responseClass != null && !responseClass.equals(Void.TYPE)) {', 'exchange.getOut().setBody(binding.bindResponseToCamelBody(response.readEntity(responseClass), exchange));', '} else {', 'exchange.getOut().setBody(binding.bindResponseToCamelBody(response, exchange));', '}', 'exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, response.getStatus());', '} catch (Exception exception) {']
['error while processing response ', ['exception']]
camel sample_8023

['public void failed(Throwable throwable) {']
['failed request ', ['throwable']]
camel sample_8023

['public void failed(Throwable throwable) {', 'try {', 'saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler());', 'fail(throwable);', '} catch (Exception error) {']
['error while processing failed request ', ['error']]
camel sample_8023

['if (!exchange.getPattern().isOutCapable()) {', 'return;', '}', 'LOG.trace("Response body = {}", response);', 'exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());', 'final CxfRsBinding binding = cxfRsEndpoint.getBinding();', 'exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response, exchange));', 'exchange.getOut().setBody(binding.bindResponseToCamelBody(body, exchange));', 'exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, response.getStatus());', '} catch (Exception exception) {']
['error while processing response ', ['exception']]
camel sample_8023

['public void failed(Throwable throwable) {']
['failed request ', ['throwable']]
camel sample_8023

['public void failed(Throwable throwable) {', 'try {', 'saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler());', 'fail(throwable);', '} catch (Exception error) {']
['error while processing failed request ', ['error']]
camel sample_8023

['public JAXRSClientFactoryBean get(String address) throws Exception {', 'JAXRSClientFactoryBean retVal = null;', 'synchronized (cache) {', 'retVal = cache.get(address);', 'if (retVal == null) {', 'retVal = ((CxfRsEndpoint)getEndpoint()).createJAXRSClientFactoryBean(address);', 'cache.put(address, retVal);']
['created client factory bean and add to cache for address ', ['address']]
camel sample_8023

['public JAXRSClientFactoryBean get(String address) throws Exception {', 'JAXRSClientFactoryBean retVal = null;', 'synchronized (cache) {', 'retVal = cache.get(address);', 'if (retVal == null) {', 'retVal = ((CxfRsEndpoint)getEndpoint()).createJAXRSClientFactoryBean(address);', 'cache.put(address, retVal);', '} else {']
['retrieved client factory bean from cache for address ', ['address']]
camel sample_8023

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FtpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ftp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ftp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_735

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<XQueryLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xquery.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xquery.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1202

['Date startDate = new Date();', 'Date endDate = new Date(startDate.getTime() + 3600000);', 'DateTime start = new DateTime(startDate, TimeZone.getTimeZone("UTC"));', 'event.setStart(new EventDateTime().setDateTime(start));', 'DateTime end = new DateTime(endDate, TimeZone.getTimeZone("UTC"));', 'event.setEnd(new EventDateTime().setDateTime(end));', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleCalendar.calendarId", getCalendar().getId());', 'headers.put("CamelGoogleCalendar.content", event);', 'final com.google.api.services.calendar.model.Event result = requestBodyAndHeaders("direct: assertEquals("Feed the Camel", result.getSummary());']
['insert ', ['result']]
camel sample_11753

['protected void doListPodsByLabel(Exchange exchange, String operation) {', 'Map<String, String> labels = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_PODS_LABELS, Map.class);', 'if (ObjectHelper.isEmpty(labels)) {']
['get pods by labels require specify a labels set ', []]
camel sample_13294

['protected void doGetPod(Exchange exchange, String operation) throws Exception {', 'Pod pod = null;', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(podName)) {']
['get a specific pod require specify a pod name ', []]
camel sample_13294

['protected void doGetPod(Exchange exchange, String operation) throws Exception {', 'Pod pod = null;', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(podName)) {', 'throw new IllegalArgumentException( "Get a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific pod require specify a namespace name ', []]
camel sample_13294

['protected void doCreatePod(Exchange exchange, String operation) throws Exception {', 'Pod pod = null;', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PodSpec podSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_SPEC, PodSpec.class);', 'if (ObjectHelper.isEmpty(podName)) {']
['create a specific pod require specify a pod name ', []]
camel sample_13294

['protected void doCreatePod(Exchange exchange, String operation) throws Exception {', 'Pod pod = null;', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PodSpec podSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_SPEC, PodSpec.class);', 'if (ObjectHelper.isEmpty(podName)) {', 'throw new IllegalArgumentException( "Create a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific pod require specify a namespace name ', []]
camel sample_13294

['String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'PodSpec podSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_SPEC, PodSpec.class);', 'if (ObjectHelper.isEmpty(podName)) {', 'throw new IllegalArgumentException( "Create a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific pod require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(podSpec)) {']
['create a specific pod require specify a pod spec bean ', []]
camel sample_13294

['protected void doDeletePod(Exchange exchange, String operation) throws Exception {', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(podName)) {']
['delete a specific pod require specify a pod name ', []]
camel sample_13294

['protected void doDeletePod(Exchange exchange, String operation) throws Exception {', 'String podName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_POD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(podName)) {', 'throw new IllegalArgumentException( "Delete a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific pod require specify a namespace name ', []]
camel sample_13294

['public EmbeddedServletContainerCustomizer containerCustomizer() {', 'return container -> {', 'try (ServerSocket socket = new ServerSocket(0)) {']
['server port ', ['socket', 'getlocalport']]
camel sample_17668

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyCdiConcatRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_220

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyCdiConcatRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo?period=4999", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_220

['public void removeWebSocket(String connectionKey) {', 'Object obj = values.remove(connectionKey);', 'if (obj != null) {', 'keys.remove(obj);', '}']
['removed websocket ', ['connectionkey']]
camel sample_10007

['public void removeWebSocket(WebSocket websocket) {', 'Object obj = keys.remove(websocket);', 'if (obj != null) {', 'values.remove(obj);', '}']
['removed websocket ', ['websocket']]
camel sample_10007

['public void process(Exchange exchange) throws Exception {', 'String message = exchange.getIn().getBody(String.class);', 'if (null != message) {', "String msh = message.substring(0, message.indexOf('\\r'));"]
['processing msh ', ['id', 'msh']]
camel sample_13806

['public void process(Exchange exchange) throws Exception {', 'String message = exchange.getIn().getBody(String.class);', 'if (null != message) {', "String msh = message.substring(0, message.indexOf('\\r'));", '}']
['null inbound message body ', []]
camel sample_13806

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BeanIODataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.beanio.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.beanio.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1039

['public Boolean executeTest(ITestConfig config, String dataFormat) throws Exception {']
['getting camel dataformat ', ['dataformat']]
camel sample_5996

['public Boolean executeTest(ITestConfig config, String dataFormat) throws Exception {', 'DataFormat df = context.resolveDataFormat(dataFormat);', 'assertNotNull("Cannot get dataformat with name: " + dataFormat, df);']
['found camel dataformat instance with classname ', ['dataformat', 'df', 'df', 'getclass']]
camel sample_5996

['public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception {', 'if (msg instanceof AbstractMessage) {', 'final AbstractMessage amsg = (AbstractMessage)msg;', 'final Cause cause = amsg.getHeader().getCauseOfTransmission().getCause();', 'if (this.discards.contains(cause)) {']
['discarding ', ['cause']]
camel sample_6713

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = createAsyncHttpSSLClient();', 'WebSocket websocket = c.prepareGet("wss: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17453

['private CellMappingStrategy loadStrategyFromClassName(String strategyClassName) {', 'ClassLoader classLoader = Thread.currentThread().getContextClassLoader();', 'if (classLoader != null) {', 'try {', 'Class<?> clazz = classLoader.loadClass(strategyClassName);', 'return (CellMappingStrategy) clazz.newInstance();', '} catch (Throwable e) {']
['failed to load hbase cell mapping strategy from class ', ['strategyclassname']]
camel sample_14506

['Person person = new Person();', 'person.setFirstName("Christian");', 'person.setLastName("Mueller");', 'person.setAge(Integer.valueOf(36));', 'person.setAddress(address);', 'long start = System.currentTimeMillis();', 'for (int i = 0; i < testCount; i++) {', 'template.sendBody("seda:marshall", person);', '}', 'assertMockEndpointsSatisfied();']
['validation of messages took ms ', ['testcount', 'system', 'currenttimemillis', 'start']]
camel sample_13739

['public void concurrentUnmarshall() throws Exception {', 'mockUnmarshall.expectedMessageCount(testCount);', 'String xml = new StringBuilder("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>") .append("<person xmlns=\\"person.jaxb.converter.camel.apache.org\\" xmlns:ns2=\\"address.jaxb.converter.camel.apache.org\\">") .append("<firstName>Christian</firstName>") .append("<lastName>Mueller</lastName>") .append("<age>36</age>") .append("<address>") .append("<ns2:addressLine1>Hauptstr. 1; 01129 Entenhausen</ns2:addressLine1>") .append("</address>") .append("</person>") .toString();', 'long start = System.currentTimeMillis();', 'for (int i = 0; i < testCount; i++) {', 'template.sendBody("seda:unmarshall", xml);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['validation of messages took ms ', ['testcount', 'system', 'currenttimemillis', 'start']]
camel sample_13739

['public void processEvent(BestSolutionChangedEvent<Object> event) {', 'Exchange exchange = getEndpoint().createExchange();', 'exchange.getOut().setHeader(OptaPlannerConstants.BEST_SOLUTION, event.getNewBestSolution());', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {']
['error processing event ', ['e']]
camel sample_11704

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'if (metricRegistry == null) {', 'Registry camelRegistry = getCamelContext().getRegistry();', 'metricRegistry = getOrCreateMetricRegistry(camelRegistry, METRIC_REGISTRY_NAME);', '}', 'String metricsName = getMetricsName(remaining);', 'MetricsType metricsType = getMetricsType(remaining);']
['metrics type name ', ['metricstype', 'metricsname']]
camel sample_13693

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<PhpLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.php.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.php.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1255

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<StringTemplateComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.string-template.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.string-template.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_762

['public MemcachedClient getMemcachedClient(KestrelConfiguration config, String queue) {', 'String key = config.getAddressesAsString() + "/" + queue;', 'MemcachedClient memcachedClient = memcachedClientCache.get(key);', 'if (memcachedClient != null) {', 'return memcachedClient;', '}', 'synchronized (memcachedClientCache) {', 'if ((memcachedClient = memcachedClientCache.get(key)) == null) {']
['creating memcachedclient for ', ['key']]
camel sample_8074

['public void closeMemcachedClient(String key, MemcachedClient memcachedClient) {', 'try {']
['closing client connection to ', ['key']]
camel sample_8074

['public void closeMemcachedClient(String key, MemcachedClient memcachedClient) {', 'try {', 'memcachedClient.shutdown();', 'memcachedClientCache.remove(key);', '} catch (Exception e) {']
['failed to close client connection to ', ['key', 'e']]
camel sample_8074

['ServerChannel channel = bayeux.getChannel(channelName);', 'ServerSession serverSession = getServerSession();', 'try {', 'if (channel != null) {', 'logDelivery(exchange, channel);', 'ServerMessage.Mutable mutable = binding.createCometdMessage(channel, serverSession, exchange.getIn());', 'channel.publish(serverSession, mutable);', '}', '} finally {', 'if (disconnectLocalSession && serverSession.isLocalSession()) {']
['disconnection local session ', ['serversession']]
camel sample_12578

['public void testShutdown() throws Exception {']
['using shutdown strategy ', ['context', 'getshutdownstrategy']]
camel sample_10050

['if (endpoint.getRoom() == null) {', 'privateChat = chatManager.chatWith(JidCreate.entityBareFrom(endpoint.getChatId()));', '} else {', 'final AndFilter packetFilter = new AndFilter(new StanzaTypeFilter(Presence.class));', 'connection.addSyncStanzaListener(this, packetFilter);', 'MultiUserChatManager mucm = MultiUserChatManager.getInstanceFor(connection);', 'muc = mucm.getMultiUserChat(JidCreate.entityBareFrom(endpoint.resolveRoom(connection)));', 'muc.addMessageListener(this);', 'MucEnterConfiguration mucc = muc.getEnterConfigurationBuilder(Resourcepart.from(endpoint.getNickname())) .requestNoHistory() .build();', 'muc.join(mucc);']
['joined room as ', ['muc', 'getroom', 'endpoint', 'getnickname']]
camel sample_12597

['protected void scheduleDelayedStart() throws Exception {', 'Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'doStart();', '} catch (Exception e) {']
['ignoring an exception caught in the startup connection poller thread ', ['e']]
camel sample_12597

['protected void scheduleDelayedStart() throws Exception {', 'Runnable startRunnable = new Runnable() {', 'public void run() {', 'try {', 'doStart();', '} catch (Exception e) {', '}', '}', '};']
['delaying xmpp consumer startup for endpoint trying again in seconds ', ['urisupport', 'sanitizeuri', 'endpoint', 'getendpointuri', 'endpoint', 'getconnectionpolldelay']]
camel sample_12597

['private void startRobustConnectionMonitor() throws Exception {', 'Runnable connectionCheckRunnable = new Runnable() {', 'public void run() {', 'try {', 'checkConnection();', '} catch (Exception e) {']
['ignoring an exception caught in the connection poller thread ', ['e']]
camel sample_12597

['private void checkConnection() throws Exception {', 'if (!connection.isConnected()) {']
['attempting to reconnect to ', ['xmppendpoint', 'getconnectionmessage', 'connection']]
camel sample_12597

['private void checkConnection() throws Exception {', 'if (!connection.isConnected()) {', 'try {', 'connection.connect();']
['successfully connected to xmpp server through ', ['connection']]
camel sample_12597

['private void checkConnection() throws Exception {', 'if (!connection.isConnected()) {', 'try {', 'connection.connect();', '} catch (SmackException e) {']
['connection to xmpp server failed will try to reconnect later again ', ['e']]
camel sample_12597

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduledExecutor != null) {', 'getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(scheduledExecutor);', 'scheduledExecutor = null;', '}', 'if (muc != null) {']
['leaving room ', ['muc', 'getroom']]
camel sample_12597

['public void processMessage(Chat chat, Message message) {', 'if (LOG.isDebugEnabled()) {']
['received xmpp message for from ', ['new', 'object', 'endpoint', 'getuser', 'endpoint', 'getparticipant', 'message', 'getbody']]
camel sample_12597

['}', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '} finally {', 'if (muc != null) {', 'try {', 'muc.pollMessage();', '} catch (MultiUserChatException.MucNotJoinedException e) {']
['error while polling message from multiuserchat this exception will be ignored ', ['e']]
camel sample_12597

['public static void subnumbers(int val1, int val2, int[] ret) {']
['calling addnumbers ', []]
camel sample_8998

['public static void batchfn(String val1) {']
['calling batchfn ', []]
camel sample_8998

['public static void niladic() {']
['nilacid called ', []]
camel sample_8998

['initRouteAndContextScopedExceptionPolicies(exceptionPolicies, routeScoped, contextScoped);', 'boolean exactMatch = false;', 'Iterator<Throwable> it = createExceptionIterator(exception);', 'while (!exactMatch && it.hasNext()) {', 'exactMatch = findMatchedExceptionPolicy(routeScoped, exchange, it.next(), candidates);', '}', 'it = createExceptionIterator(exception);', 'while (!exactMatch && it.hasNext()) {', 'exactMatch = findMatchedExceptionPolicy(contextScoped, exchange, it.next(), candidates);', '}']
['found candidates ', ['candidates', 'size']]
camel sample_4542

['private boolean findMatchedExceptionPolicy(Map<ExceptionPolicyKey, OnExceptionDefinition> exceptionPolicies, Exchange exchange, Throwable exception, Map<Integer, OnExceptionDefinition> candidates) {', 'if (LOG.isTraceEnabled()) {']
['finding best suited exception policy for thrown exception ', ['exception', 'getclass', 'getname']]
camel sample_4542

['int candidateDiff = Integer.MAX_VALUE;', 'Set<Map.Entry<ExceptionPolicyKey, OnExceptionDefinition>> entries = exceptionPolicies.entrySet();', 'for (Map.Entry<ExceptionPolicyKey, OnExceptionDefinition> entry : entries) {', 'Class<?> clazz = entry.getKey().getExceptionClass();', 'OnExceptionDefinition type = entry.getValue();', 'if (exchange != null && exchange.getUnitOfWork() != null && type.isRouteScoped()) {', 'RouteDefinition route = exchange.getUnitOfWork().getRouteContext() != null ? exchange.getUnitOfWork().getRouteContext().getRoute() : null;', 'RouteDefinition typeRoute = ProcessorDefinitionHelper.getRoute(type);', 'if (route != null && typeRoute != null && route != typeRoute) {', 'if (LOG.isTraceEnabled()) {']
['the type is scoped for route however exchange is at route ', ['typeroute', 'getid', 'route', 'getid']]
camel sample_4542

['RouteDefinition route = exchange.getUnitOfWork().getRouteContext() != null ? exchange.getUnitOfWork().getRouteContext().getRoute() : null;', 'RouteDefinition typeRoute = ProcessorDefinitionHelper.getRoute(type);', 'if (route != null && typeRoute != null && route != typeRoute) {', 'if (LOG.isTraceEnabled()) {', '}', 'continue;', '}', '}', 'if (filter(type, clazz, exception)) {', 'if (!matchesWhen(type, exchange)) {']
['the type did not match when ', ['type']]
camel sample_4542

['int level = getInheritanceLevel(clazz);', 'int diff = targetLevel - level;', 'if (diff < candidateDiff) {', 'candidate = type;', 'candidateDiff = diff;', '}', '}', '}', 'if (candidate != null) {', 'if (!candidates.containsKey(candidateDiff)) {']
['adding as candidate at level ', ['candidate', 'candidatediff']]
camel sample_4542

['candidate = type;', 'candidateDiff = diff;', '}', '}', '}', 'if (candidate != null) {', 'if (!candidates.containsKey(candidateDiff)) {', 'candidates.put(candidateDiff, candidate);', '} else {', 'if (LOG.isTraceEnabled()) {']
['existing candidate takes precedence over at level ', ['new', 'object', 'candidates', 'get', 'candidatediff', 'candidate', 'candidatediff']]
camel sample_4542

['if (candidate != null) {', 'if (!candidates.containsKey(candidateDiff)) {', 'candidates.put(candidateDiff, candidate);', '} else {', 'if (LOG.isTraceEnabled()) {', '}', '}', '}', 'boolean exactMatch = candidateDiff == 0;', 'if (LOG.isTraceEnabled() && exactMatch) {']
['exact match found for candidate ', ['candidate']]
camel sample_4542

['CommunityTarget communityTarget = new CommunityTarget();', 'communityTarget.setCommunity(convertToOctetString(endpoint.getSnmpCommunity()));', 'communityTarget.setAddress(targetAddress);', 'communityTarget.setRetries(endpoint.getRetries());', 'communityTarget.setTimeout(endpoint.getTimeout());', 'communityTarget.setVersion(endpoint.getSnmpVersion());', 'this.target = communityTarget;', 'this.pdu = new PDU();', '}', 'if (LOG.isDebugEnabled()) {']
['starting oid poller on using protocol ', ['endpoint', 'getaddress', 'endpoint', 'getprotocol']]
camel sample_8832

['communityTarget.setRetries(endpoint.getRetries());', 'communityTarget.setTimeout(endpoint.getTimeout());', 'communityTarget.setVersion(endpoint.getSnmpVersion());', 'this.target = communityTarget;', 'this.pdu = new PDU();', '}', 'if (LOG.isDebugEnabled()) {', '}', 'this.transport.listen();', 'if (LOG.isInfoEnabled()) {']
['started oid poller on using protocol ', ['endpoint', 'getaddress', 'endpoint', 'getprotocol']]
camel sample_8832

['protected void doStop() throws Exception {', 'if (this.transport != null && this.transport.isListening()) {']
['stopping oid poller on ', ['targetaddress']]
camel sample_8832

['protected void doStop() throws Exception {', 'if (this.transport != null && this.transport.isListening()) {', 'this.transport.close();']
['stopped oid poller on ', ['targetaddress']]
camel sample_8832

['public void onResponse(ResponseEvent event) {', '((Snmp)event.getSource()).cancel(event.getRequest(), this);', 'if (event.getRequest() == null || event.getResponse() == null) {']
['received invalid snmp event request response ', ['event', 'getrequest', 'event', 'getresponse']]
camel sample_8832

['public void processPDU(PDU pdu) {', 'if (LOG.isDebugEnabled()) {']
['received response event for ', ['this', 'endpoint', 'getaddress', 'pdu']]
camel sample_8832

['defaultErrorHandlerBuilder.redeliveryDelay(0);', 'defaultErrorHandlerBuilder.maximumRedeliveries(2);', 'context.setErrorHandlerBuilder(defaultErrorHandlerBuilder);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'context.setTracing(false);', 'onException(OrderFailedException.class) .maximumRedeliveries(0) .continued(true);', 'from("direct:dead").to("log:dead", "mock:dead");', 'from("direct:order") .to("mock:one") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['first processor invoked ', []]
camel sample_3911

['public void configure() throws Exception {', 'context.setTracing(false);', 'onException(OrderFailedException.class) .maximumRedeliveries(0) .continued(true);', 'from("direct:dead").to("log:dead", "mock:dead");', 'from("direct:order") .to("mock:one") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'throw new OrderFailedException("First Processor Failure");', '}', '}) .to("mock:two") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['second processor invoked ', []]
camel sample_3911

['from("direct:dead").to("log:dead", "mock:dead");', 'from("direct:order") .to("mock:one") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'throw new OrderFailedException("First Processor Failure");', '}', '}) .to("mock:two") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', '}', '}) .to("mock:three") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['third processor invoked ', []]
camel sample_3911

['}', '}) .to("mock:two") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', '}', '}) .to("mock:three") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'throw new RuntimeException("Some Runtime Exception");', '}', '}) .to("mock:four") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['fourth processor invoked ', []]
camel sample_3911

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_13955

['public void remove(CamelContext camelContext, String key, Exchange exchange) {']
['removing an exchange with id for key ', ['exchange', 'getexchangeid', 'key']]
camel sample_13955

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_13955

['public Set<String> scan(CamelContext camelContext) {']
['scanning for exchanges to recover in context ', ['camelcontext', 'getname']]
camel sample_13955

['public Set<String> scan(CamelContext camelContext) {', 'Set<String> scanned = Collections.unmodifiableSet(cache.keySet());']
['found keys for exchanges to recover in context ', ['scanned', 'size', 'camelcontext', 'getname']]
camel sample_13955

['public Exchange recover(CamelContext camelContext, String exchangeId) {']
['recovering an exchange with id ', ['exchangeid']]
camel sample_13955

['private void readFromStream() throws Exception {', 'long index = 0;', 'String line;', 'BufferedReader br = initializeStream();', 'if (endpoint.isScanStream()) {', 'while (isRunAllowed()) {', 'if (br != null) {', 'line = br.readLine();']
['read line ', ['line']]
camel sample_11968

['String line2 = null;', 'while (!eos && isRunAllowed()) {', 'if (endpoint.getPromptMessage() != null) {', 'doPromptMessage();', '}', 'if (line2 == null) {', 'line = br.readLine();', '} else {', 'line = line2;', '}']
['read line ', ['line']]
camel sample_11968

['private InputStream resolveStreamFromUrl() throws IOException {', 'String u = endpoint.getUrl();', 'ObjectHelper.notEmpty(u, "url");']
['about to read from url ', ['u']]
camel sample_11968

['private InputStream resolveStreamFromFile() throws IOException {', 'String fileName = endpoint.getFileName();', 'ObjectHelper.notEmpty(fileName, "fileName");', 'FileInputStream fileStream;', 'File file = new File(fileName);', 'if (LOG.isDebugEnabled()) {']
['file to be scanned path ', ['file', 'getname', 'file', 'getabsolutepath']]
camel sample_11968

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17445

['protected void loadResource(String resourceUri) throws TransformerException, IOException {']
['loading schema resource ', ['this', 'resourceuri']]
camel sample_4368

['public CommitConsumer(GitHubEndpoint endpoint, Processor processor, String branchName) throws Exception {', 'super(endpoint, processor);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_COMMIT_SERVICE);', 'if (service != null) {']
['using commitservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14269

['public CommitConsumer(GitHubEndpoint endpoint, Processor processor, String branchName) throws Exception {', 'super(endpoint, processor);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_COMMIT_SERVICE);', 'if (service != null) {', 'commitService = (CommitService) service;', '} else {', 'commitService = new CommitService();', '}', 'initService(commitService);']
['github commitconsumer indexing current commits ', []]
camel sample_14269

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwitterComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_774

['private void clearCachedSchema() throws Exception {', 'Collection<Endpoint> endpoints = context.getEndpoints();', 'for (Endpoint endpoint : endpoints) {']
['endpoint uri ', ['endpoint', 'getendpointuri']]
camel sample_2896

['private void clearCachedSchema() throws Exception {', 'Collection<Endpoint> endpoints = context.getEndpoints();', 'for (Endpoint endpoint : endpoints) {', 'if (endpoint.getEndpointUri().startsWith("validator:")) {', 'ValidatorEndpoint xsltEndpoint = (ValidatorEndpoint)endpoint;', 'xsltEndpoint.clearCachedSchema();']
['schema cache cleared ', []]
camel sample_2896

['protected void assertMessageReceived(MockEndpoint masterEndpoint, MockEndpoint standbyEndpoint) throws InterruptedException {', 'masterEndpoint.reset();', 'standbyEndpoint.reset();', 'String expectedBody = createNextExpectedBody();', 'masterEndpoint.expectedBodiesReceived(expectedBody);', 'standbyEndpoint.expectedMessageCount(0);', 'template.sendBody("direct:start", expectedBody);']
['expecting master and standby ', ['masterendpoint', 'standbyendpoint']]
camel sample_9673

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_14510

['int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {', 'total = maxMessagesPerPoll;', '}', 'for (int index = 0; index < total && isBatchAllowed(); index++) {', 'Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;']
['processing exchange ', ['exchange']]
camel sample_14510

['partitionDecorator = tmpPartitionDecorator;', 'suffix = tmpSuffix;', 'tableId = tmpTableId;', '}', 'processGroup.add(ex);', '}', 'if (!processGroup.isEmpty()) {', 'totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId());', '}', 'if (totalProcessed == 0) {']
['the incoming message is either null or empty for exchange ', ['exchange', 'getexchangeid']]
camel sample_9366

['if (apiRequestRows.isEmpty()) {', 'return 0;', '}', 'GoogleBigQueryEndpoint endpoint = getEndpoint();', 'TableDataInsertAllRequest apiRequestData = new TableDataInsertAllRequest().setRows(apiRequestRows);', 'Bigquery.Tabledata.InsertAll apiRequest = bigquery .tabledata() .insertAll(configuration.getProjectId(), configuration.getDatasetId(), tableIdWithPartition, apiRequestData);', 'if (suffix != null) {', 'apiRequest.set("template_suffix", suffix);', '}', 'if (log.isTraceEnabled()) {']
['sending messages to bigquery table suffix partition ', ['apirequestrows', 'size', 'tableid', 'suffix', 'partitiondecorator']]
camel sample_9366

['if (suffix != null) {', 'apiRequest.set("template_suffix", suffix);', '}', 'if (log.isTraceEnabled()) {', '}', 'TableDataInsertAllResponse apiResponse = apiRequest.execute();', 'if (apiResponse.getInsertErrors() != null && !apiResponse.getInsertErrors().isEmpty()) {', 'throw new Exception("InsertAll into " + tableId + " failed: " + apiResponse.getInsertErrors());', '}', 'if (log.isTraceEnabled()) {']
['sent messages to bigquery table suffix partition ', ['apirequestrows', 'size', 'tableid', 'suffix', 'partitiondecorator']]
camel sample_9366

['}', 'if (log.isTraceEnabled()) {', '}', 'TableDataInsertAllResponse apiResponse = apiRequest.execute();', 'if (apiResponse.getInsertErrors() != null && !apiResponse.getInsertErrors().isEmpty()) {', 'throw new Exception("InsertAll into " + tableId + " failed: " + apiResponse.getInsertErrors());', '}', 'if (log.isTraceEnabled()) {', '}', 'if (log.isDebugEnabled()) {']
['uploader thread id api call completed ', ['thread', 'currentthread', 'getid', 'exchangeid']]
camel sample_9366

['while (retries > 0 && !deleted) {', 'retries--;', 'if (operations.deleteFile(file.getAbsoluteFilePath())) {', 'deleted = true;', 'break;', '}', 'boolean exits = operations.existsFile(file.getAbsoluteFilePath());', 'if (!exits) {', 'deleted = true;', '} else {']
['file was not deleted at this attempt will try again in sec ', ['file']]
camel sample_4807

['if (index != -1) {', 'path = uri.substring(index + 1);', "index = path.indexOf('?');", 'if (index != -1) {', 'path = path.substring(0, index);', '}', 'path = path.replaceAll(":", "");', 'try {', 'path = URLDecoder.decode(path, "UTF-8");', '} catch (UnsupportedEncodingException e) {']
['failed to decode url path ignoring exception ', ['path', 'e']]
camel sample_10416

['ServerConnector connector;', 'server = createServer();', 'if ("cometds".equals(endpoint.getProtocol())) {', 'connector = getSslSocketConnector(server);', '} else {', 'connector = new ServerConnector(server);', '}', 'connector.setPort(endpoint.getPort());', 'connector.setHost(endpoint.getUri().getHost());', 'if ("localhost".equalsIgnoreCase(endpoint.getUri().getHost())) {']
['you use localhost interface it means that no external connections will be available don t you want to use instead all network interfaces ', []]
camel sample_12581

['protected CometDServlet createServletForConnector(Server server, Connector connector, CometdEndpoint endpoint) throws Exception {', 'CometDServlet servlet = new CometDServlet();', 'ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS);', 'ServletHolder holder = new ServletHolder();', 'holder.setServlet(servlet);', 'holder.setAsyncSupported(true);', 'if (endpoint.getBaseResource() != null) {', 'String[] resources = endpoint.getBaseResource().split(":");', 'if (LOG.isDebugEnabled()) {']
['protocol found and resource ', ['resources', 'resources']]
camel sample_12581

['public void onSubscriptionTransferFailed(final UaSubscription subscription, final StatusCode statusCode) {']
['transfer failed ', ['subscription', 'getsubscriptionid', 'statuscode']]
camel sample_17279

['public void onStatusChanged(final UaSubscription subscription, final StatusCode status) {']
['subscription status changed ', ['subscription', 'getsubscriptionid', 'status']]
camel sample_17279

['private CompletableFuture<UShort> lookupNamespaceIndex(final String namespaceUri) {']
['looking up namespace ', ['namespaceuri']]
camel sample_17279

['private CompletableFuture<UShort> lookupNamespaceIndex(final String namespaceUri) {', '{', 'final UShort result = this.namespaceCache.get(namespaceUri);', 'if (result != null) {']
['found namespace in cache ', ['namespaceuri', 'result']]
camel sample_17279

['private CompletableFuture<UShort> lookupNamespaceIndex(final String namespaceUri) {', '{', 'final UShort result = this.namespaceCache.get(namespaceUri);', 'if (result != null) {', 'return CompletableFuture.completedFuture(result);', '}', '}']
['looking up namespace on server ', ['namespaceuri']]
camel sample_17279

['public CompletableFuture<StatusCode> write(final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value) {', 'final CompletableFuture<UShort> future;']
['namespace ', ['namespaceid']]
camel sample_17279

['public CompletableFuture<StatusCode> write(final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value) {', 'final CompletableFuture<UShort> future;', 'if (namespaceId.isNumeric()) {']
['using provided index ', ['namespaceid', 'getnumeric']]
camel sample_17279

['public CompletableFuture<StatusCode> write(final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value) {', 'final CompletableFuture<UShort> future;', 'if (namespaceId.isNumeric()) {', 'future = CompletableFuture.completedFuture(namespaceId.getNumeric());', '} else {']
['looking up namespace ', ['namespaceid', 'geturi']]
camel sample_17279

['public CompletableFuture<StatusCode> write(final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value) {', 'final CompletableFuture<UShort> future;', 'if (namespaceId.isNumeric()) {', 'future = CompletableFuture.completedFuture(namespaceId.getNumeric());', '} else {', 'future = lookupNamespaceIndex(namespaceId.getUri());', '}', 'return future.thenCompose(index -> {', 'final NodeId nodeId = partialNodeId.toNodeId(index);']
['node partial full ', ['partialnodeid', 'nodeid']]
camel sample_17279

['future = CompletableFuture.completedFuture(namespaceId.getNumeric());', '} else {', 'future = lookupNamespaceIndex(namespaceId.getUri());', '}', 'return future.thenCompose(index -> {', 'final NodeId nodeId = partialNodeId.toNodeId(index);', 'return this.client.writeValue(nodeId, value).whenComplete((status, error) -> {', 'if (status != null) {', 'LOG.debug("Write to ns={}/{}, id={} = {} -> {}", namespaceId, index, nodeId, value, status);', '} else {']
['failed to write ', []]
camel sample_17279

['private synchronized void handleConnectionFailue(final Throwable e) {', 'if (this.connected != null) {', 'this.connected.dispose();', 'this.connected = null;', '}']
['connection failed ', ['e']]
camel sample_17279

['private void connect() {']
['starting connect ', []]
camel sample_17279

['private void performAndEvalConnect() {', 'try {', 'final Connected connected = performConnect();']
['connect call done ', []]
camel sample_17279

['private void performAndEvalConnect() {', 'try {', 'final Connected connected = performConnect();', 'synchronized (this) {', 'if (this.disposed) {', 'return;', '}', 'try {']
['setting subscriptions ', ['this', 'subscriptions', 'size']]
camel sample_17279

['private void performAndEvalConnect() {', 'try {', 'final Connected connected = performConnect();', 'synchronized (this) {', 'if (this.disposed) {', 'return;', '}', 'try {', 'connected.putSubscriptions(this.subscriptions);']
['update state ', ['this', 'connected', 'connected']]
camel sample_17279

['final Connected connected = performConnect();', 'synchronized (this) {', 'if (this.disposed) {', 'return;', '}', 'try {', 'connected.putSubscriptions(this.subscriptions);', 'final Connected oldConnected = this.connected;', 'this.connected = connected;', 'if (oldConnected != null) {']
['dispose old state ', []]
camel sample_17279

['return;', '}', 'try {', 'connected.putSubscriptions(this.subscriptions);', 'final Connected oldConnected = this.connected;', 'this.connected = connected;', 'if (oldConnected != null) {', 'oldConnected.dispose();', '}', '} catch (final Exception e) {']
['failed to set subscriptions ', ['e']]
camel sample_17279

['this.connected = connected;', 'if (oldConnected != null) {', 'oldConnected.dispose();', '}', '} catch (final Exception e) {', 'connected.dispose();', 'throw e;', '}', '}', '} catch (final Exception e) {']
['failed to connect ', ['e']]
camel sample_17279

['private Connected performConnect() throws Exception {', 'final EndpointDescription endpoint = UaTcpStackClient.getEndpoints(this.configuration.getEndpointUri()).thenApply(endpoints -> {', 'if (LOG.isDebugEnabled()) {']
['found enpoints ', []]
camel sample_17279

['private Connected performConnect() throws Exception {', 'final EndpointDescription endpoint = UaTcpStackClient.getEndpoints(this.configuration.getEndpointUri()).thenApply(endpoints -> {', 'if (LOG.isDebugEnabled()) {', 'for (final EndpointDescription ep : endpoints) {']
['t ', ['ep']]
camel sample_17279

['private Connected performConnect() throws Exception {', 'final EndpointDescription endpoint = UaTcpStackClient.getEndpoints(this.configuration.getEndpointUri()).thenApply(endpoints -> {', 'if (LOG.isDebugEnabled()) {', 'for (final EndpointDescription ep : endpoints) {', '}', '}', 'return findEndpoint(endpoints);', '}).get();']
['selected endpoint ', ['endpoint']]
camel sample_17279

['}', '}', 'return findEndpoint(endpoints);', '}).get();', 'final URI uri = URI.create(this.configuration.getEndpointUri());', 'final List<IdentityProvider> providers = new LinkedList<>();', 'final String user = uri.getUserInfo();', 'if (user != null && !user.isEmpty()) {', 'final String[] creds = user.split(":", 2);', 'if (creds != null && creds.length == 2) {']
['enable username password provider ', ['creds']]
camel sample_17279

['private synchronized void triggerReconnect(final boolean immediate) {']
['trigger re connect immediate ', ['immediate']]
camel sample_17279

['private synchronized void triggerReconnect(final boolean immediate) {', 'if (this.reconnectJob != null) {']
['re connect already scheduled ', []]
camel sample_17279

['handleConnectionFailue(e);', '}', 'return null;', '}, this.executor);', '}', '}', 'if (await && future != null) {', 'try {', 'future.get();', '} catch (InterruptedException | ExecutionException e) {']
['failed to wait for completion ', ['e']]
camel sample_17279

['public void execute(Exchange exchange) throws SmppException {', 'QuerySm querySm = createQuerySm(exchange);', 'if (log.isDebugEnabled()) {']
['querying for a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'querysm', 'getmessageid']]
camel sample_16891

['QuerySm querySm = createQuerySm(exchange);', 'if (log.isDebugEnabled()) {', '}', 'QuerySmResult querySmResult;', 'try {', 'querySmResult = session.queryShortMessage( querySm.getMessageId(), TypeOfNumber.valueOf(querySm.getSourceAddrTon()), NumberingPlanIndicator.valueOf(querySm.getSourceAddrNpi()), querySm.getSourceAddr());', '} catch (Exception e) {', 'throw new SmppException(e);', '}', 'if (log.isDebugEnabled()) {']
['query for a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'querysm', 'getmessageid']]
camel sample_16891

['public void beforeJob(JobExecution jobExecution) {']
['sending before job execution event ', ['jobexecution']]
camel sample_12755

['public void beforeJob(JobExecution jobExecution) {', 'producerTemplate.sendBodyAndHeader(endpointUri, jobExecution, EventType.HEADER_KEY, EventType.BEFORE.name());']
['sent before job execution event ', []]
camel sample_12755

['public void afterJob(JobExecution jobExecution) {']
['sending after job execution event ', ['jobexecution']]
camel sample_12755

['public void afterJob(JobExecution jobExecution) {', 'producerTemplate.sendBodyAndHeader(endpointUri, jobExecution, EventType.HEADER_KEY, EventType.AFTER.name());']
['sent after job execution event ', []]
camel sample_12755

['context.setName("context-" + address.port());', 'context.addService(service);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:atomix?delay=1s&period=1s") .routeId("route-" + address.port()) .routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['address']]
camel sample_10292

['public void testAddGroupMembership() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.groupId", testGroup.getID());', 'headers.put("CamelBox.userId", testUser.getID());', 'headers.put("CamelBox.role", null);', 'final com.box.sdk.BoxGroupMembership result = requestBodyAndHeaders("direct: headers);', 'assertNotNull("addGroupMembership result", result);']
['addgroupmembership ', ['result']]
camel sample_17412

['public void testCreateGroup() throws Exception {', 'com.box.sdk.BoxGroup result = null;', 'try {', 'result = requestBody("direct: assertNotNull("createGroup result", result);', 'assertEquals(CAMEL_TEST_CREATE_GROUP_NAME, result.getInfo().getName());']
['creategroup ', ['result']]
camel sample_17412

['public void testDeleteGroup() throws Exception {', 'requestBody("direct: testGroup = null;', 'Iterable<BoxGroup.Info> it = BoxGroup.getAllGroups(getConnection());', 'int searchResults = sizeOfIterable(it);', 'boolean exists = searchResults > 0 ? true : false;', 'assertEquals("deleteGroup exists", false, exists);']
['deletegroup exists ', ['exists']]
camel sample_17412

['public void testGetAllGroups() throws Exception {', 'assertNotNull("getAllGroups result", result);']
['getallgroups ', ['result']]
camel sample_17412

['public void testGetGroupInfo() throws Exception {', 'final com.box.sdk.BoxGroup.Info result = requestBody("direct: assertNotNull("getGroupInfo result", result);']
['getgroupinfo ', ['result']]
camel sample_17412

['public void testUpdateGroupInfo() throws Exception {', 'BoxGroup.Info info = testGroup.getInfo();', 'info.setDescription(CAMEL_TEST_GROUP_DESCRIPTION);', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.groupId", testGroup.getID());', 'headers.put("CamelBox.groupInfo", info);', 'final com.box.sdk.BoxGroup result = requestBodyAndHeaders("direct: assertNotNull("updateGroupInfo result", result);']
['updategroupinfo ', ['result']]
camel sample_17412

['public void testGetGroupMembershipInfo() throws Exception {', 'BoxGroupMembership.Info info = testGroup.addMembership(testUser, BoxGroupMembership.Role.MEMBER);', 'final com.box.sdk.BoxGroupMembership.Info result = requestBody("direct: assertNotNull("getGroupMembershipInfo result", result);']
['getgroupmembershipinfo ', ['result']]
camel sample_17412

['public void testGetGroupMemberships() throws Exception {', 'assertNotNull("getGroupMemberships result", result);']
['getgroupmemberships ', ['result']]
camel sample_17412

['public void testUpdateGroupMembershipInfo() throws Exception {', 'BoxGroupMembership.Info info = testGroup.addMembership(testUser, BoxGroupMembership.Role.MEMBER);', 'info.setRole(BoxGroupMembership.Role.ADMIN);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.groupMemebershipId", info.getID());', 'headers.put("CamelBox.info", info);', 'final com.box.sdk.BoxGroupMembership result = requestBodyAndHeaders("direct: headers);', 'assertNotNull("updateGroupMembershipInfo result", result);']
['updategroupmembershipinfo ', ['result']]
camel sample_17412

['exchange.setException(new RuntimeCamelException("OData HTTP Request cancelled!"));', 'callback.done(false);', '}', '});', 'final ApiMethod method = findMethod(exchange, properties);', 'if (method == null) {', 'callback.done(true);', 'return true;', '}', 'if (LOG.isDebugEnabled()) {']
['invoking operation with ', ['method', 'getname', 'properties', 'keyset']]
camel sample_14547

['public void testGet() throws Exception {', 'com.google.api.services.calendar.model.Colors result = requestBody("direct: assertNotNull("get result", result);']
['get ', ['result']]
camel sample_11745

['public <K, V> Cache<K, V> getCache(String name, Class<K> keyType, Class<V> valueType) throws Exception {', 'Cache<K, V> cache = cacheManager.getCache(name, keyType, valueType);', 'if (cache == null && configuration != null && configuration.isCreateCacheIfNotExist()) {', 'CacheConfiguration<K, V> cacheConfiguration = null;', 'if (configuration.hasConfiguration(name)) {']
['using custom cache configuration for cache ', ['name']]
camel sample_9624

['public <K, V> Cache<K, V> getCache(String name, Class<K> keyType, Class<V> valueType) throws Exception {', 'Cache<K, V> cache = cacheManager.getCache(name, keyType, valueType);', 'if (cache == null && configuration != null && configuration.isCreateCacheIfNotExist()) {', 'CacheConfiguration<K, V> cacheConfiguration = null;', 'if (configuration.hasConfiguration(name)) {', 'cacheConfiguration = CacheConfiguration.class.cast(configuration.getConfigurations().get(name));', '} else  if (configuration.hasConfiguration()) {']
['using global cache configuration for cache ', ['name']]
camel sample_9624

['if (cache == null && configuration != null && configuration.isCreateCacheIfNotExist()) {', 'CacheConfiguration<K, V> cacheConfiguration = null;', 'if (configuration.hasConfiguration(name)) {', 'cacheConfiguration = CacheConfiguration.class.cast(configuration.getConfigurations().get(name));', '} else  if (configuration.hasConfiguration()) {', 'cacheConfiguration = CacheConfiguration.class.cast(configuration.getConfiguration());', '}', 'if (cacheConfiguration != null) {', 'cache = cacheManager.createCache(name, cacheConfiguration);', '} else {']
['using a usermanagedcache for cache as no configuration has been found ', ['name']]
camel sample_9624

['protected void processEntity(Exchange exchange, ProcessInstance process) throws Exception {']
['processing process instance ', ['process']]
camel sample_12493

['appMessageCount++;', 'if (0 != (appMessageCount % 2)) {', 'return;', '}', 'InterceptorChain chain = message.getInterceptorChain();', 'ListIterator<Interceptor<? extends Message>> it = chain.getIterator();', 'while (it.hasNext()) {', 'PhaseInterceptor<?> pi = (PhaseInterceptor<?>)it.next();', 'if (MessageSenderInterceptor.class.getName().equals(pi.getId())) {', 'chain.remove(pi);']
['removed messagesenderinterceptor from interceptor chain ', []]
camel sample_7790

['protected void onFirstWrite() throws IOException {', 'if (LOG.isDebugEnabled()) {', 'Long nr = RMContextUtils.retrieveRMProperties(outMessage, true).getSequence().getMessageNumber();']
['losing message ', ['nr']]
camel sample_7790

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastTopicComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-topic.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-topic.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_689

['LOG.trace("OpenTracing: start client span=" + span);', '}', 'sd.post(span, ese.getExchange(), ese.getEndpoint());', 'span.finish();', 'ActiveSpanManager.deactivate(ese.getExchange());', '} else {', 'LOG.warn("OpenTracing: could not find managed span for exchange=" + ese.getExchange());', '}', '}', '} catch (Throwable t) {']
['opentracing failed to capture tracing data ', ['t']]
camel sample_10441

['return;', '}', 'SpanDecorator sd = getSpanDecorator(route.getEndpoint());', 'Span span = tracer.buildSpan(sd.getOperationName(exchange, route.getEndpoint())) .asChildOf(tracer.extract(Format.Builtin.TEXT_MAP, new CamelHeadersExtractAdapter(exchange.getIn().getHeaders()))) .withTag(Tags.SPAN_KIND.getKey(), sd.getReceiverSpanKind()) .start();', 'sd.pre(span, exchange, route.getEndpoint());', 'ActiveSpanManager.activate(exchange, span);', 'if (LOG.isTraceEnabled()) {', 'LOG.trace("OpenTracing: start server span=" + span);', '}', '} catch (Throwable t) {']
['opentracing failed to capture tracing data ', ['t']]
camel sample_10441

['LOG.trace("OpenTracing: finish server span=" + span);', '}', 'SpanDecorator sd = getSpanDecorator(route.getEndpoint());', 'sd.post(span, exchange, route.getEndpoint());', 'span.finish();', 'ActiveSpanManager.deactivate(exchange);', '} else {', 'LOG.warn("OpenTracing: could not find managed span for exchange=" + exchange);', '}', '} catch (Throwable t) {']
['opentracing failed to capture tracing data ', ['t']]
camel sample_10441

['protected void setLeader(boolean isLeader) {', 'if (isLeader && leader.compareAndSet(false, isLeader)) {']
['leadership taken ', ['servicename', 'sessionid']]
camel sample_14402

['protected void setLeader(boolean isLeader) {', 'if (isLeader && leader.compareAndSet(false, isLeader)) {', 'startAllStoppedConsumers();', '} else {', 'if (!leader.getAndSet(isLeader) && isLeader) {']
['leadership lost ', ['servicename', 'sessionid']]
camel sample_14402

['private void stopConsumer(Route route) {', 'synchronized (lock) {', 'try {', 'if (!suspendedRoutes.contains(route)) {']
['stopping consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_14402

['private void startAllStoppedConsumers() {', 'synchronized (lock) {', 'try {', 'for (Route route : suspendedRoutes) {']
['starting consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_14402

['public void onComplete(ConsulResponse<Optional<Value>> consulResponse) {', 'if (isRunAllowed()) {', 'Optional<Value> value = consulResponse.getResponse();', 'if (value.isPresent()) {', 'Optional<String> sid = value.get().getSession();', 'if (sid.isPresent() && ObjectHelper.isNotEmpty(sid.get())) {']
['try to take leadership ', []]
camel sample_14402

['public synchronized void addSynchronization(Synchronization synchronization) {', 'if (synchronizations == null) {', 'synchronizations = new ArrayList<Synchronization>();', '}']
['adding synchronization ', ['synchronization']]
camel sample_4153

['}', 'Iterator<Synchronization> it = synchronizations.iterator();', 'while (it.hasNext()) {', 'Synchronization synchronization = it.next();', 'boolean handover = true;', 'if (synchronization instanceof SynchronizationVetoable) {', 'SynchronizationVetoable veto = (SynchronizationVetoable) synchronization;', 'handover = veto.allowHandover();', '}', 'if (handover && (filter == null || filter.test(synchronization))) {']
['handover synchronization to ', ['synchronization', 'target']]
camel sample_4153

['Synchronization synchronization = it.next();', 'boolean handover = true;', 'if (synchronization instanceof SynchronizationVetoable) {', 'SynchronizationVetoable veto = (SynchronizationVetoable) synchronization;', 'handover = veto.allowHandover();', '}', 'if (handover && (filter == null || filter.test(synchronization))) {', 'target.addOnCompletion(synchronization);', 'it.remove();', '} else {']
['handover not allow for synchronization ', ['synchronization']]
camel sample_4153

['public void done(Exchange exchange) {']
['unitofwork done for exchangeid with ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4153

['public void done(Exchange exchange) {', 'boolean failed = exchange.isFailed();', 'UnitOfWorkHelper.doneSynchronizations(exchange, synchronizations, log);', 'try {', 'SubUnitOfWorkCallback uowCallback = getSubUnitOfWorkCallback();', 'if (uowCallback != null) {', 'uowCallback.onDone(exchange);', '}', '} catch (Throwable e) {']
['exception occurred during savepoint ondone this exception will be ignored ', ['e']]
camel sample_4153

['if (exchange.getContext() != null) {', 'exchange.getContext().getInflightRepository().remove(exchange);', '}', 'try {', 'if (failed) {', 'EventHelper.notifyExchangeFailed(exchange.getContext(), exchange);', '} else {', 'EventHelper.notifyExchangeDone(exchange.getContext(), exchange);', '}', '} catch (Throwable e) {']
['exception occurred during event notification this exception will be ignored ', ['e']]
camel sample_4153

['public void beforeRoute(Exchange exchange, Route route) {', 'if (log.isTraceEnabled()) {']
['unitofwork beforeroute for exchangeid with ', ['new', 'object', 'route', 'getid', 'exchange', 'getexchangeid', 'exchange']]
camel sample_4153

['public void afterRoute(Exchange exchange, Route route) {', 'if (log.isTraceEnabled()) {']
['unitofwork afterroute for exchangeid with ', ['new', 'object', 'route', 'getid', 'exchange', 'getexchangeid', 'exchange']]
camel sample_4153

['public void beginSubUnitOfWork(Exchange exchange) {', 'if (log.isTraceEnabled()) {']
['beginsubunitofwork exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4153

['public void endSubUnitOfWork(Exchange exchange) {', 'if (log.isTraceEnabled()) {']
['endsubunitofwork exchangeid ', ['exchange', 'getexchangeid']]
camel sample_4153

['public void testCreateRouteFromCamelContext() throws Exception {', 'List<RouteDefinition> list = context.getRouteDefinitions();', 'assertEquals("Size of list " + list, 1, list.size());', 'RouteDefinition routeType = list.get(0);']
['found route ', ['routetype']]
camel sample_3696

['protected void dump(Object object) throws Exception {', 'JAXBContext jaxbContext = XmlTestSupport.createJaxbContext();', 'Marshaller marshaller = jaxbContext.createMarshaller();', 'marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);', 'StringWriter buffer = new StringWriter();', 'marshaller.marshal(object, buffer);']
['created ', ['buffer']]
camel sample_3696

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<QuartzComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.quartz2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.quartz2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1146

['protected void doStart() throws Exception {', 'super.doStart();']
['netty consumer binding to ', ['configuration', 'getaddress']]
camel sample_6683

['nettyServerBootstrapFactory = new ClientModeTCPNettyServerBootstrapFactory();', '} else {', 'nettyServerBootstrapFactory = new SingleTCPNettyServerBootstrapFactory();', '}', '} else {', 'nettyServerBootstrapFactory = new SingleUDPNettyServerBootstrapFactory();', '}', 'nettyServerBootstrapFactory.init(context, configuration, pipelineFactory);', '}', 'ServiceHelper.startServices(nettyServerBootstrapFactory);']
['netty consumer bound to ', ['configuration', 'getaddress']]
camel sample_6683

['protected void doStop() throws Exception {']
['netty consumer unbinding from ', ['configuration', 'getaddress']]
camel sample_6683

['protected void doStop() throws Exception {', 'ServiceHelper.stopService(nettyServerBootstrapFactory);']
['netty consumer unbound from ', ['configuration', 'getaddress']]
camel sample_6683

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RestComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_888

['private Message getNextElement() {', 'if (zipInputStream == null) {', 'return null;', '}', 'try {', 'ZipEntry current = getNextEntry();', 'if (current != null) {']
['read zipentry ', ['current', 'getname']]
camel sample_17486

['try {', 'ZipEntry current = getNextEntry();', 'if (current != null) {', 'Message answer = new DefaultMessage(exchange.getContext());', 'answer.getHeaders().putAll(exchange.getIn().getHeaders());', 'answer.setHeader("zipFileName", current.getName());', 'answer.setHeader(Exchange.FILE_NAME, current.getName());', 'answer.setBody(new ZipInputStreamWrapper(zipInputStream));', 'return answer;', '} else {']
['close zipinputstream ', []]
camel sample_17486

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesResourcesQuotaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-resources-quota.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-resources-quota.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_534

['result.setHost(host);', '}', 'if (sslcf != null) {', 'if (getSslSocketConnectorProperties() != null && "https".equals(endpoint.getProtocol())) {', 'Map<String, Object> properties = new HashMap<String, Object>(getSslSocketConnectorProperties());', 'IntrospectionSupport.setProperties(sslcf, properties);', 'if (properties.size() > 0) {', 'throw new IllegalArgumentException("There are " + properties.size() + " parameters that couldn\'t be set on the SocketConnector." + " Check the uri if the parameters are spelt correctly and that they are properties of the SelectChannelConnector." + " Unknown parameters=[" + properties + "]");', '}', '}']
['connector on port is using includeciphersuites excludeciphersuites includeprotocols excludeprotocols ', ['port', 'sslcf', 'getincludeciphersuites', 'sslcf', 'getexcludeciphersuites', 'sslcf', 'getincludeprotocols', 'sslcf', 'getexcludeprotocols']]
camel sample_11102

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SedaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.seda.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.seda.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_867

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GoogleCalendarComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-calendar.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-calendar.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1003

['}', 'if (nameStyle == null) {', 'nameStyle = FacebookNameStyle.SEARCH;', '} else if (candidates.size() > nGetMethods) {', 'nameStyle = FacebookNameStyle.GET_AND_SEARCH;', '}', '}', 'if (LOG.isDebugEnabled()) {', 'final Set<String> missing = getMissingProperties(method, nameStyle, arguments);', 'if (!missing.isEmpty()) {']
['method could use one or more properties from ', ['method', 'missing']]
camel sample_9599

['public void run() {', 'jmsConsumerExecutors = getEndpoint().getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, "SjmsBatchConsumer", consumerCount);', 'consumersShutdownLatchRef.set(new CountDownLatch(consumerCount));', 'if (completionInterval > 0) {']
['using completioninterval to run every millis ', ['completioninterval']]
camel sample_12407

['if (completionInterval > 0) {', 'if (timeoutCheckerExecutorService == null) {', 'setTimeoutCheckerExecutorService(getEndpoint().getCamelContext().getExecutorServiceManager().newScheduledThreadPool(this, SJMS_BATCH_TIMEOUT_CHECKER, 1));', 'shutdownTimeoutCheckerExecutorService = true;', '}', '}', 'while (isRunAllowed() && !running.get()) {', 'Connection localConnection = null;', 'try {', 'attempt++;']
['attempt starting consumer s for ', ['attempt', 'consumercount', 'destinationname', 'completionsize']]
camel sample_12407

['for (int i = 0; i < consumerCount; i++) {', 'BatchConsumptionLoop loop = new BatchConsumptionLoop();', 'loop.setKeepAliveDelay(keepAliveDelay);', 'triggers.add(loop.getCompletionTimeoutTrigger());', 'jmsConsumerExecutors.submit(loop);', '}', 'if (completionInterval > 0) {', 'timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);', '}', 'if (attempt > 1) {']
['successfully refreshed connection after attempts ', ['attempt']]
camel sample_12407

['BatchConsumptionLoop loop = new BatchConsumptionLoop();', 'loop.setKeepAliveDelay(keepAliveDelay);', 'triggers.add(loop.getCompletionTimeoutTrigger());', 'jmsConsumerExecutors.submit(loop);', '}', 'if (completionInterval > 0) {', 'timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);', '}', 'if (attempt > 1) {', '}']
['started consumer s for ', ['consumercount', 'destinationname', 'completionsize']]
camel sample_12407

['}', '} catch (Throwable t) {', '}', 'if (recoveryEnabled) {', 'getExceptionHandler().handleException("Error starting consumer after " + attempt + " attempts. Will try again in " + recoveryInterval + " millis.", e);', '} else {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', '}', 'try {']
['attempt sleeping before next attempt to recover ', ['attempt', 'recoveryinterval']]
camel sample_12407

['protected void doStop() throws Exception {', 'super.doStop();', 'running.set(false);', 'CountDownLatch consumersShutdownLatch = consumersShutdownLatchRef.get();', 'if (consumersShutdownLatch != null) {']
['stop signalled waiting on consumers to shut down ', []]
camel sample_12407

['protected void doStop() throws Exception {', 'super.doStop();', 'running.set(false);', 'CountDownLatch consumersShutdownLatch = consumersShutdownLatchRef.get();', 'if (consumersShutdownLatch != null) {', 'if (consumersShutdownLatch.await(60, TimeUnit.SECONDS)) {']
['timeout waiting on consumer threads to signal completion shutting down ', []]
camel sample_12407

['protected void doStop() throws Exception {', 'super.doStop();', 'running.set(false);', 'CountDownLatch consumersShutdownLatch = consumersShutdownLatchRef.get();', 'if (consumersShutdownLatch != null) {', 'if (consumersShutdownLatch.await(60, TimeUnit.SECONDS)) {', '} else {']
['all consumers have been shutdown ', []]
camel sample_12407

['protected void doStop() throws Exception {', 'super.doStop();', 'running.set(false);', 'CountDownLatch consumersShutdownLatch = consumersShutdownLatchRef.get();', 'if (consumersShutdownLatch != null) {', 'if (consumersShutdownLatch.await(60, TimeUnit.SECONDS)) {', '} else {', '}', '} else {']
['stop signalled while there are no consumers yet so no need to wait for consumers ', []]
camel sample_12407

['super.doStop();', 'running.set(false);', 'CountDownLatch consumersShutdownLatch = consumersShutdownLatchRef.get();', 'if (consumersShutdownLatch != null) {', 'if (consumersShutdownLatch.await(60, TimeUnit.SECONDS)) {', '} else {', '}', '} else {', '}', 'try {']
['shutting down jms connection ', []]
camel sample_12407

['public void run() {', 'if (!getEndpoint().getCamelContext().getStatus().isStarted()) {']
['completion interval task cannot start due camelcontext has not been started yet ', ['getendpoint', 'getcamelcontext', 'getname']]
camel sample_12407

['private void closeJmsConsumer(MessageConsumer consumer) {', 'try {', 'consumer.close();', '} catch (JMSException ex2) {', 'if (log.isDebugEnabled()) {']
['exception caught closing consumer ', []]
camel sample_12407

['private void closeJmsConsumer(MessageConsumer consumer) {', 'try {', 'consumer.close();', '} catch (JMSException ex2) {', 'if (log.isDebugEnabled()) {', '}']
['exception caught closing consumer this exception is ignored ', ['getmessage']]
camel sample_12407

['private void closeJmsSession(Session session) {', 'try {', 'session.close();', '} catch (JMSException ex2) {', 'if (log.isDebugEnabled()) {']
['exception caught closing session ', []]
camel sample_12407

['private void closeJmsSession(Session session) {', 'try {', 'session.close();', '} catch (JMSException ex2) {', 'if (log.isDebugEnabled()) {', '}']
['exception caught closing session this exception is ignored ', ['getmessage']]
camel sample_12407

['private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {', 'final boolean usingTimeout = completionTimeout > 0;']
['batchconsumptiontask start ', []]
camel sample_12407

['private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {', 'final boolean usingTimeout = completionTimeout > 0;', 'while (running.get()) {']
['batchconsumptiontask running ', []]
camel sample_12407

['private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {', 'final boolean usingTimeout = completionTimeout > 0;', 'while (running.get()) {', 'if (timeout.compareAndSet(true, false) || timeoutInterval.compareAndSet(true, false)) {']
['completion batch due timeout ', []]
camel sample_12407

['private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {', 'final boolean usingTimeout = completionTimeout > 0;', 'while (running.get()) {', 'if (timeout.compareAndSet(true, false) || timeoutInterval.compareAndSet(true, false)) {', 'completionBatch(session);', 'reset();', 'continue;', '}', 'if (completionSize > 0 && messageCount >= completionSize) {']
['completion batch due size ', []]
camel sample_12407

['}', 'if (completionSize > 0 && messageCount >= completionSize) {', 'completionBatch(session);', 'reset();', 'continue;', '}', 'long waitTime = (usingTimeout && (timeElapsed > 0)) ? getReceiveWaitTime(timeElapsed) : pollDuration;', 'Message message = consumer.receive(waitTime);', 'if (running.get()) {', 'if (message == null) {']
['no message received ', []]
camel sample_12407

['completionBatch(session);', 'reset();', 'continue;', '}', 'long waitTime = (usingTimeout && (timeElapsed > 0)) ? getReceiveWaitTime(timeElapsed) : pollDuration;', 'Message message = consumer.receive(waitTime);', 'if (running.get()) {', 'if (message == null) {', '} else {', 'messageCount++;']
['messages received ', ['messagecount']]
camel sample_12407

['aggregatedExchange.setProperty(Exchange.BATCH_SIZE, messageCount);', 'if (completionPredicate != null) {', 'try {', 'boolean complete;', 'if (eagerCheckCompletion) {', 'complete = completionPredicate.matches(exchange);', '} else {', 'complete = completionPredicate.matches(aggregatedExchange);', '}', 'if (complete) {']
['completion batch due predicate ', []]
camel sample_12407

['if (eagerCheckCompletion) {', 'complete = completionPredicate.matches(exchange);', '} else {', 'complete = completionPredicate.matches(aggregatedExchange);', '}', 'if (complete) {', 'completionBatch(session);', 'reset();', '}', '} catch (Exception e) {']
['error during evaluation of completion predicate this exception is ignored ', ['e', 'getmessage', 'e']]
camel sample_12407

['} catch (Exception e) {', '}', '}', '}', 'if (usingTimeout && startTime > 0) {', 'long currentTime = new Date().getTime();', 'timeElapsed = currentTime - startTime;', 'if (timeElapsed > completionTimeout) {', 'timeout.set(true);', '} else {']
['this batch has more time until the timeout elapsed timeout ', ['timeelapsed', 'completiontimeout']]
camel sample_12407

['}', 'if (usingTimeout && startTime > 0) {', 'long currentTime = new Date().getTime();', 'timeElapsed = currentTime - startTime;', 'if (timeElapsed > completionTimeout) {', 'timeout.set(true);', '} else {', '}', '}', '} else {']
['shutdown signal received rolling back batch ', []]
camel sample_12407

['timeElapsed = currentTime - startTime;', 'if (timeElapsed > completionTimeout) {', 'timeout.set(true);', '} else {', '}', '}', '} else {', 'session.rollback();', '}', '}']
['batchconsumptiontask end ', []]
camel sample_12407

['private long getReceiveWaitTime(long timeElapsed) {', 'long timeRemaining = getTimeRemaining(timeElapsed);', 'if (timeRemaining <= 0) {', 'timeRemaining = 1;', '}', 'final long waitTime = Math.min(timeRemaining, pollDuration);']
['waiting for ', ['waittime']]
camel sample_12407

['private long getTimeRemaining(long timeElapsed) {', 'long timeRemaining = completionTimeout - timeElapsed;', 'if (LOG.isDebugEnabled() && timeElapsed > 0) {']
['time remaining this batch ', ['timeremaining']]
camel sample_12407

['private void processEmptyMessage() {', 'Exchange exchange = getEndpoint().createExchange();']
['sending empty message as there were no messages from polling ', ['getendpoint']]
camel sample_12407

['public void onAcceptAlertNotification(AlertNotification alertNotification) {']
['received an alertnotification ', ['alertnotification']]
camel sample_16917

['public void onAcceptDeliverSm(DeliverSm deliverSm) throws ProcessRequestException {']
['received a deliversm ', ['deliversm']]
camel sample_16917

['public DataSmResult onAcceptDataSm(DataSm dataSm, Session session) throws ProcessRequestException {']
['received a datasm ', ['datasm']]
camel sample_16917

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'MyBatisEndpoint endpoint = getEndpoint();']
['polling ', ['endpoint']]
camel sample_12954

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'final MyBatisEndpoint endpoint = getEndpoint();', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_12954

['total = maxMessagesPerPoll;', '}', 'for (int index = 0; index < total && isBatchAllowed(); index++) {', 'DataHolder holder = ObjectHelper.cast(DataHolder.class, exchanges.poll());', 'Exchange exchange = holder.exchange;', 'Object data = holder.data;', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;']
['processing exchange with properties ', ['exchange', 'exchange', 'getproperties']]
camel sample_12954

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'producerCache = new ProducerCache(this, camelContext, new HashMap<String, Producer>(1));', '}', 'ServiceHelper.startService(producerCache);', 'Endpoint lookup = camelContext.hasEndpoint(destination.getEndpointKey());', 'if (lookup instanceof InterceptSendToEndpoint) {', 'if (LOG.isDebugEnabled()) {']
['intercepted sending to ', ['urisupport', 'sanitizeuri', 'destination', 'getendpointuri', 'urisupport', 'sanitizeuri', 'lookup', 'getendpointuri']]
camel sample_4578

['private List<SplunkEvent> savedSearch(SplunkResultProcessor callback) throws Exception {']
['saved search start ', []]
camel sample_14479

['private List<SplunkEvent> nonBlockingSearch(SplunkResultProcessor callback) throws Exception {']
['non block search start ', []]
camel sample_14479

['private List<SplunkEvent> realtimeSearch(SplunkResultProcessor callback) throws Exception {']
['realtime search start ', []]
camel sample_14479

['private List<SplunkEvent> runQuery(JobArgs queryArgs, boolean realtime, SplunkResultProcessor callback) throws Exception {', 'Service service = endpoint.getService();', 'Job job = service.getJobs().create(getSearch(), queryArgs);']
['running search with queryargs ', ['getsearch', 'queryargs']]
camel sample_14479

['private List<String> assertCompletion(MBeanServer mbeanServer, ObjectName on, String componentName, Map<String, Object> properties, String completionText) throws Exception {', 'Object[] params = {componentName, properties, completionText};', 'String[] signature = {"java.lang.String",  "java.util.Map",  "java.lang.String"};', 'List<?> completions = assertIsInstanceOf(List.class, mbeanServer.invoke(on, "completeEndpointPath", params, signature));']
['component with returned ', ['componentname', 'completiontext', 'completions']]
camel sample_2855

['private String assertParameterJsonSchema(MBeanServer mbeanServer, ObjectName on, String componentName) throws Exception {', 'Object[] params = {componentName};', 'String[] signature = {"java.lang.String"};', 'String answer = assertIsInstanceOf(String.class, mbeanServer.invoke(on, "componentParameterJsonSchema", params, signature));']
['component returned json ', ['componentname', 'answer']]
camel sample_2855

['private String assertParameterJsonSchema(MBeanServer mbeanServer, ObjectName on, String componentName) throws Exception {', 'Object[] params = {componentName};', 'String[] signature = {"java.lang.String"};', 'String answer = assertIsInstanceOf(String.class, mbeanServer.invoke(on, "componentParameterJsonSchema", params, signature));', 'ObjectMapper mapper = new ObjectMapper();', 'HashMap data = mapper.readValue(answer, HashMap.class);']
['read json ', ['data']]
camel sample_2855

['protected synchronized void doWarmUp() throws Exception {', 'if (endpointDone.compareAndSet(false, true)) {', 'for (Route route : routes) {', 'ServiceHelper.startService(route.getEndpoint());', '}', '}', 'if (warmUpDone.compareAndSet(false, true)) {', 'for (Route route : routes) {', 'try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {', 'route.warmUp();']
['starting services on route ', ['route', 'getid']]
camel sample_4082

['protected void doStop() throws Exception {', 'boolean isShutdownCamelContext = camelContext.isStopping();', 'if (isShutdownCamelContext || isRemovingRoutes()) {', 'for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {', 'strategy.onRoutesRemove(routes);', '}', '}', 'for (Route route : routes) {', 'try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {']
['stopping services on route ', ['route', 'getid']]
camel sample_4082

['protected void doShutdown() throws Exception {', 'for (Route route : routes) {', 'try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {']
['shutting down services on route ', ['route', 'getid']]
camel sample_4082

['protected void startChildService(Route route, List<Service> services) throws Exception {', 'for (Service service : services) {']
['starting child service on route ', ['route', 'getid', 'service']]
camel sample_4082

['protected void stopChildService(Route route, Set<Service> services, boolean shutdown) throws Exception {', 'for (Service service : services) {']
['child service on route shutting down Stopping ', ['new', 'object', 'shutdown', 'route', 'getid', 'service']]
camel sample_4082

['AhcEndpoint endpoint = createAhcEndpoint(uri, this, null);', 'setEndpointHeaderFilterStrategy(endpoint);', 'endpoint.setClient(getClient());', 'endpoint.setClientConfig(getClientConfig());', 'endpoint.setBinding(getBinding());', 'endpoint.setSslContextParameters(ssl);', 'setProperties(endpoint, parameters);', 'if (IntrospectionSupport.hasProperties(parameters, CLIENT_CONFIG_PREFIX)) {', 'DefaultAsyncHttpClientConfig.Builder builder = endpoint.getClientConfig() == null ? new DefaultAsyncHttpClientConfig.Builder() : AhcComponent.cloneConfig(endpoint.getClientConfig());', 'if (endpoint.getClient() != null) {']
['the user explicitly set an asynchttpclient instance on the component or endpoint but this endpoint uri contains client configuration parameters are you sure that this is what was intended the asynchttpclient will be used and the uri parameters will be ignored ', []]
camel sample_16501

['setEndpointHeaderFilterStrategy(endpoint);', 'endpoint.setClient(getClient());', 'endpoint.setClientConfig(getClientConfig());', 'endpoint.setBinding(getBinding());', 'endpoint.setSslContextParameters(ssl);', 'setProperties(endpoint, parameters);', 'if (IntrospectionSupport.hasProperties(parameters, CLIENT_CONFIG_PREFIX)) {', 'DefaultAsyncHttpClientConfig.Builder builder = endpoint.getClientConfig() == null ? new DefaultAsyncHttpClientConfig.Builder() : AhcComponent.cloneConfig(endpoint.getClientConfig());', 'if (endpoint.getClient() != null) {', '} else if (endpoint.getClientConfig() != null) {']
['the user explicitly set an asynchttpclientconfig instance on the component or endpoint but this endpoint uri contains client configuration parameters are you sure that this is what was intended the uri parameters will be applied to a clone of the supplied asynchttpclientconfig in order to prevent unintended modification of the explicitly configured asynchttpclientconfig that is the uri parameters override the settings on the explicitly configured asynchttpclientconfig for this endpoint ', []]
camel sample_16501

['public void testEndpoint() throws Exception {', 'mockEndpoint.reset();', 'mockEndpoint.expectedBodiesReceived(expectedBody);', 'template.sendBodyAndHeader("https: mockEndpoint.assertIsSatisfied();', 'List<Exchange> list = mockEndpoint.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'Assert.assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_10986

['}', 'if (statistics.isStatisticsEnabled()) {', 'attemptCounter.increment();', '}', 'Object result = optimisedTypeConverter.convertTo(type, exchange, value);', 'if (result != null) {', 'if (statistics.isStatisticsEnabled()) {', 'baseHitCounter.increment();', '}', 'if (log.isTraceEnabled()) {']
['using optimised core converter to convert ', ['type', 'value', 'getclass', 'getcanonicalname']]
camel sample_3985

['if (log.isTraceEnabled()) {', '}', 'return result;', '}', 'TypeMapping key = new TypeMapping(type, value.getClass());', 'if (misses.containsKey(key)) {', 'return Void.TYPE;', '}', 'TypeConverter converter = getOrFindTypeConverter(key);', 'if (converter != null) {']
['using converter to convert ', ['converter', 'key']]
camel sample_3985

['}', 'if (rc == null && tc.allowNull()) {', 'return null;', '}', 'if (Void.TYPE.equals(rc)) {', 'return Void.TYPE;', '}', 'if (rc != null) {', 'if (fallback.isCanPromote()) {', 'if (log.isDebugEnabled()) {']
['promoting fallback type converter as a known type converter to convert from to for the fallback converter ', ['new', 'object', 'type', 'getcanonicalname', 'value', 'getclass', 'getcanonicalname', 'fallback', 'getfallbacktypeconverter']]
camel sample_3985

['if (Void.TYPE.equals(rc)) {', 'return Void.TYPE;', '}', 'if (rc != null) {', 'if (fallback.isCanPromote()) {', 'if (log.isDebugEnabled()) {', '}', 'addTypeConverter(type, value.getClass(), fallback.getFallbackTypeConverter());', '}', 'if (log.isTraceEnabled()) {']
['fallback type converter converted type from to ', ['new', 'object', 'fallback', 'getfallbacktypeconverter', 'type', 'getcanonicalname', 'value', 'getclass', 'getcanonicalname']]
camel sample_3985

['public void addTypeConverter(Class<?> toType, Class<?> fromType, TypeConverter typeConverter) {']
['adding type converter ', ['typeconverter']]
camel sample_3985

['public void addTypeConverters(TypeConverters typeConverters) {']
['adding type converters ', ['typeconverters']]
camel sample_3985

['public boolean removeTypeConverter(Class<?> toType, Class<?> fromType) {']
['removing type converter from to ', ['fromtype', 'totype']]
camel sample_3985

['public void addFallbackTypeConverter(TypeConverter typeConverter, boolean canPromote) {']
['adding fallback type converter which can promote ', ['typeconverter', 'canpromote']]
camel sample_3985

['private void addCoreFallbackTypeConverterToList(TypeConverter typeConverter, boolean canPromote, List<FallbackTypeConverter> converters) {']
['adding core fallback type converter which can promote ', ['typeconverter', 'canpromote']]
camel sample_3985

['public MllpTcpClientProducer(MllpEndpoint endpoint) throws SocketException {', 'super(endpoint);']
['constructing mllptcpclientproducer for endpoint uri ', ['endpoint', 'getendpointuri']]
camel sample_13884

['public void closeConnection() {']
['close connection for address called via jmx ', ['getconnectionaddress']]
camel sample_13884

['public void resetConnection() {']
['reset connection for address requested via jmx ', ['getconnectionaddress']]
camel sample_13884

['public synchronized void process(Exchange exchange) throws Exception {']
['processing exchange ', ['exchange', 'getexchangeid']]
camel sample_13884

['Charset tmpCharset = getEndpoint().determineCharset(tmpHl7MessageBytes, null);', 'exchange.setProperty(Exchange.CHARSET_NAME, tmpCharset.name());', 'if (tmpCharset != null && tmpCharset != MllpProtocolConstants.DEFAULT_CHARSET) {', 'hl7MessageBytes = stringBody.getBytes(tmpCharset);', 'exchange.setProperty(Exchange.CHARSET_NAME, tmpCharset.name());', '} else {', 'hl7MessageBytes = tmpHl7MessageBytes;', 'exchange.setProperty(Exchange.CHARSET_NAME, MllpProtocolConstants.DEFAULT_CHARSET.name());', '}', '}']
['sending message to external system ', []]
camel sample_13884

['} else {', 'hl7MessageBytes = tmpHl7MessageBytes;', 'exchange.setProperty(Exchange.CHARSET_NAME, MllpProtocolConstants.DEFAULT_CHARSET.name());', '}', '}', 'getEndpoint().updateLastConnectionEstablishedTicks();', 'try {', 'mllpBuffer.setEnvelopedMessage(hl7MessageBytes);', 'mllpBuffer.writeTo(socket);', '} catch (MllpSocketException writeEx) {']
['exception encountered reading acknowledgement attempting reconnect ', ['writeex']]
camel sample_13884

['exchange.setProperty(Exchange.CHARSET_NAME, MllpProtocolConstants.DEFAULT_CHARSET.name());', '}', '}', 'getEndpoint().updateLastConnectionEstablishedTicks();', 'try {', 'mllpBuffer.setEnvelopedMessage(hl7MessageBytes);', 'mllpBuffer.writeTo(socket);', '} catch (MllpSocketException writeEx) {', 'try {', 'checkConnection();']
['reconnected succeeded resending payload ', []]
camel sample_13884

['mllpBuffer.writeTo(socket);', '} catch (MllpSocketException writeEx) {', 'try {', 'checkConnection();', 'try {', 'mllpBuffer.writeTo(socket);', '} catch (MllpSocketException retryWriteEx) {', 'exchange.setException(retryWriteEx);', '}', '} catch (IOException reconnectEx) {']
['reconnected failed sending exception to exchange ', ['reconnectex']]
camel sample_13884

['try {', 'mllpBuffer.writeTo(socket);', '} catch (MllpSocketException retryWriteEx) {', 'exchange.setException(retryWriteEx);', '}', '} catch (IOException reconnectEx) {', 'exchange.setException(reconnectEx);', '}', '}', 'if (exchange.getException() == null) {']
['reading acknowledgement from external system ', []]
camel sample_13884

['}', '} catch (IOException reconnectEx) {', 'exchange.setException(reconnectEx);', '}', '}', 'if (exchange.getException() == null) {', 'try {', 'mllpBuffer.reset();', 'mllpBuffer.readFrom(socket);', '} catch (MllpSocketException receiveAckEx) {']
['exception encountered reading acknowledgement attempting reconnect ', ['receiveackex']]
camel sample_13884

['}', '}', 'if (exchange.getException() == null) {', 'try {', 'mllpBuffer.reset();', 'mllpBuffer.readFrom(socket);', '} catch (MllpSocketException receiveAckEx) {', 'try {', 'checkConnection();', '} catch (IOException reconnectEx) {']
['reconnected failed sending original exception to exchange ', ['reconnectex']]
camel sample_13884

['try {', 'mllpBuffer.reset();', 'mllpBuffer.readFrom(socket);', '} catch (MllpSocketException receiveAckEx) {', 'try {', 'checkConnection();', '} catch (IOException reconnectEx) {', 'exchange.setException(new MllpAcknowledgementReceiveException("Exception encountered reading acknowledgement", hl7MessageBytes, receiveAckEx));', '}', 'if (exchange.getException() == null) {']
['reconnected succeeded resending payload ', []]
camel sample_13884

['exchange.setException(new MllpAcknowledgementReceiveException("Exception encountered reading acknowledgement", hl7MessageBytes, receiveAckEx));', '}', 'if (exchange.getException() == null) {', 'try {', 'mllpBuffer.setEnvelopedMessage(hl7MessageBytes);', 'mllpBuffer.writeTo(socket);', '} catch (MllpSocketException writeRetryEx) {', 'exchange.setException(new MllpWriteException("Failed to write HL7 message to socket", hl7MessageBytes, writeRetryEx));', '}', 'if (exchange.getException() == null) {']
['resend succeeded reading acknowledgement ', []]
camel sample_13884

['exchange.setException(new MllpAcknowledgementTimeoutException("Timeout receiving HL7 Acknowledgement", hl7MessageBytes, timeoutEx));', '} else {', 'exchange.setException(new MllpAcknowledgementTimeoutException("Timeout receiving complete HL7 Acknowledgement", hl7MessageBytes, mllpBuffer.toByteArray(), timeoutEx));', 'mllpBuffer.reset();', '}', 'mllpBuffer.resetSocket(socket);', '}', 'if (exchange.getException() == null) {', 'if (mllpBuffer.hasCompleteEnvelope()) {', 'byte[] acknowledgementBytes = mllpBuffer.toMllpPayload();']
['populating message headers with the acknowledgement from the external system ', []]
camel sample_13884

['} else {', 'message.setHeader(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, "");', '}', 'if (getConfiguration().isValidatePayload()) {', 'String exceptionMessage = Hl7Util.generateInvalidPayloadExceptionMessage(acknowledgementBytes);', 'if (exceptionMessage != null) {', 'exchange.setException(new MllpInvalidAcknowledgementException(exceptionMessage, hl7MessageBytes, acknowledgementBytes));', '}', '}', 'if (exchange.getException() == null) {']
['processing the acknowledgement from the external system ', []]
camel sample_13884

['public synchronized void run() {', 'if (getConfiguration().hasIdleTimeout()) {', 'if (null != socket && !socket.isClosed() && socket.isConnected()) {', 'if (lastProcessCallTicks > 0) {', 'long idleTime = System.currentTimeMillis() - lastProcessCallTicks;', 'if (log.isDebugEnabled()) {']
['checking for idle connection ', ['getconnectionaddress', 'idletime', 'getconfiguration', 'getidletimeout']]
camel sample_13884

['public synchronized void run() {', 'if (getConfiguration().hasIdleTimeout()) {', 'if (null != socket && !socket.isClosed() && socket.isConnected()) {', 'if (lastProcessCallTicks > 0) {', 'long idleTime = System.currentTimeMillis() - lastProcessCallTicks;', 'if (log.isDebugEnabled()) {', '}', 'if (idleTime >= getConfiguration().getIdleTimeout()) {']
['mllp connection idle time of milliseconds met or exceeded the idle producer timeout of milliseconds resetting conection ', ['idletime', 'getconfiguration', 'getidletimeout']]
camel sample_13884

['if (lastProcessCallTicks > 0) {', 'long idleTime = System.currentTimeMillis() - lastProcessCallTicks;', 'if (log.isDebugEnabled()) {', '}', 'if (idleTime >= getConfiguration().getIdleTimeout()) {', 'mllpBuffer.resetSocket(socket);', '} else {', 'long minDelay = 100;', 'long delay = Long.min(Long.max(minDelay, getConfiguration().getIdleTimeout() - idleTime), getConfiguration().getIdleTimeout());', 'if (log.isDebugEnabled()) {']
['scheduling idle producer connection check of in milliseconds ', ['getconnectionaddress', 'delay']]
camel sample_13884

['if (idleTime >= getConfiguration().getIdleTimeout()) {', 'mllpBuffer.resetSocket(socket);', '} else {', 'long minDelay = 100;', 'long delay = Long.min(Long.max(minDelay, getConfiguration().getIdleTimeout() - idleTime), getConfiguration().getIdleTimeout());', 'if (log.isDebugEnabled()) {', '}', 'idleTimeoutExecutor.schedule(this, delay, TimeUnit.MILLISECONDS);', '}', '} else {']
['scheduling idle producer connection check in milliseconds ', ['getconfiguration', 'getidletimeout']]
camel sample_13884

['public void testList() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'final com.google.api.services.drive.model.RevisionList result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15403

['interceptProperties(properties);', 'final ApiMethod method = findMethod(exchange, properties);', 'if (method == null) {', 'callback.done(true);', 'return true;', '}', 'Runnable invocation = new Runnable() {', 'public void run() {', 'try {', 'if (log.isDebugEnabled()) {']
['invoking operation with ', ['method', 'getname', 'properties', 'keyset']]
camel sample_4313

['final List<ApiMethod> candidates = endpoint.getCandidates();', 'if (processInBody(exchange, properties)) {', 'final Set<String> argNames = properties.keySet();', 'final List<ApiMethod> filteredMethods = methodHelper.filterMethods( candidates, ApiMethodHelper.MatchType.SUPER_SET, argNames);', 'if (filteredMethods.isEmpty()) {', 'throw new RuntimeCamelException(String.format("Missing properties for %s, need one or more from %s", endpoint.getMethodName(), methodHelper.getMissingProperties(endpoint.getMethodName(), argNames)) );', '} else if (filteredMethods.size() == 1) {', 'method = filteredMethods.get(0);', '} else {', 'method = ApiMethodHelper.getHighestPriorityMethod(filteredMethods);']
['calling highest priority operation from operations ', ['method', 'filteredmethods']]
camel sample_4313

['} catch (Exception e) {', 'exchange.setException(new RuntimeCamelException(String.format( "Error converting value %s to property %s: %s", value, inBodyProperty, e.getMessage()), e));', 'return false;', '}', '} else {', 'if (!methodHelper.getNullableArguments().contains(inBodyProperty)) {', 'exchange.setException(new NullPointerException(inBodyProperty));', 'return false;', '}', '}']
['property has message body value ', ['inbodyproperty', 'value']]
camel sample_4313

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<StringDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.string.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.string.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_830

['public String getMessageSelector() {', 'String id = null;', 'if (fixedMessageSelector != null) {', 'id = fixedMessageSelector;', '} else if (creator != null) {', 'id = creator.get();', '}']
['using messageselector ', ['id']]
camel sample_7180

['public void testSendingCamelExchangeToEndpointResultsInValidApplicationEventAfterTheRefreshEvent() throws Exception {', 'MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);', 'result.expectedMessageCount(2);', 'template.sendBodyAndHeader(uri, expectedBody, "cheese", 123);', 'result.assertIsSatisfied();', 'Exchange exchange = result.getReceivedExchanges().get(0);', 'Object body = exchange.getIn().getBody(ContextRefreshedEvent.class);']
['received body ', ['body']]
camel sample_15546

['public void testSendingCamelExchangeToEndpointResultsInValidApplicationEventAfterTheRefreshEvent() throws Exception {', 'MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);', 'result.expectedMessageCount(2);', 'template.sendBodyAndHeader(uri, expectedBody, "cheese", 123);', 'result.assertIsSatisfied();', 'Exchange exchange = result.getReceivedExchanges().get(0);', 'Object body = exchange.getIn().getBody(ContextRefreshedEvent.class);', 'assertNotNull(body);', 'exchange = result.getReceivedExchanges().get(1);', 'body = exchange.getIn().getBody();']
['received body ', ['body']]
camel sample_15546

['private void process(final SynchronizedExchange synchronizedExchange) {', 'try {', 'Exchange exchange = synchronizedExchange.getExchange();', 'final boolean ignore = exchange.hasProperties() && exchange .getProperties().containsKey(DisruptorEndpoint.DISRUPTOR_IGNORE_EXCHANGE);', 'if (ignore) {']
['ignoring exchange ', ['exchange']]
camel sample_10744

['public void tapSomething(String body) throws Exception {', 'try {', 'LATCH.await(5, TimeUnit.SECONDS);', 'Thread.sleep(100);', '} catch (Exception e) {', 'fail("Should not be interrupted");', '}']
['wire tapping ', ['body']]
camel sample_2382

['try {', 'Field f = ProducerConfig.class.getDeclaredField("PARTITIONER_CLASS_CONFIG");', 'if (f != null) {', 'loadParitionerClass(resolver, props);', '}', '} catch (NoSuchFieldException e) {', '} catch (SecurityException e) {', '}', '}', '} catch (Throwable t) {']
['problem loading classes for serializers ', ['t']]
camel sample_16413

['protected URLConnection openConnection(URL u) throws IOException {', 'if (getCounter() == 0) {']
['resolved ', []]
camel sample_3710

['incrementCounter();', 'return new URLConnection(u) {', 'public void connect() throws IOException {', 'connected = true;', '}', 'public InputStream getInputStream() throws IOException {', 'return new ByteArrayInputStream(xsd1);', '}', '};', '} else {']
['resolved ', []]
camel sample_3710

['soTimeout = getConfiguration().getSoTimeout();', '}', 'dataTimeout = getConfiguration().getTimeout();', 'if (getConfiguration().getActivePortRange() != null) {', 'String[] parts = getConfiguration().getActivePortRange().split("-");', 'if (parts.length != 2) {', 'throw new IllegalArgumentException("The option activePortRange should have syntax: min-max");', '}', 'int min = getCamelContext().getTypeConverter().mandatoryConvertTo(int.class, parts[0]);', 'int max = getCamelContext().getTypeConverter().mandatoryConvertTo(int.class, parts[1]);']
['using active port range ', ['min', 'max']]
camel sample_15395

['if (ftpClientConfig == null) {', 'ftpClientConfig = new FTPClientConfig();', '}', 'Map<String, Object> localConfigParameters = new HashMap<String, Object>(ftpClientConfigParameters);', 'setProperties(ftpClientConfig, localConfigParameters);', '}', 'if (dataTimeout > 0) {', 'client.setDataTimeout(dataTimeout);', '}', 'if (log.isDebugEnabled()) {']
['created ftpclient connecttimeout sotimeout datatimeout buffersize receivedatasocketbuffersize senddatasocketbuffersize ', ['new', 'object', 'client', 'getconnecttimeout', 'getsotimeout', 'datatimeout', 'client', 'getbuffersize', 'client', 'getreceivedatasocketbuffersize', 'client', 'getsenddatasocketbuffersize', 'client']]
camel sample_15395

['protected void doGetConfigMap(Exchange exchange, String operation) throws Exception {', 'ConfigMap configMap = null;', 'String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'if (ObjectHelper.isEmpty(cfMapName)) {']
['get a specific configmap require specify a configmap name ', []]
camel sample_13304

['protected void doCreateConfigMap(Exchange exchange, String operation) throws Exception {', 'ConfigMap configMap = null;', 'String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'HashMap<String, String> configMapData = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_DATA, HashMap.class);', 'if (ObjectHelper.isEmpty(cfMapName)) {']
['create a specific configmap require specify a configmap name ', []]
camel sample_13304

['protected void doCreateConfigMap(Exchange exchange, String operation) throws Exception {', 'ConfigMap configMap = null;', 'String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'HashMap<String, String> configMapData = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_DATA, HashMap.class);', 'if (ObjectHelper.isEmpty(cfMapName)) {', 'throw new IllegalArgumentException("Create a specific configMap require specify a configMap name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific configmap require specify a namespace name ', []]
camel sample_13304

['String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'HashMap<String, String> configMapData = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_DATA, HashMap.class);', 'if (ObjectHelper.isEmpty(cfMapName)) {', 'throw new IllegalArgumentException("Create a specific configMap require specify a configMap name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException("Create a specific configMap require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(configMapData)) {']
['create a specific configmap require specify a data map ', []]
camel sample_13304

['protected void doDeleteConfigMap(Exchange exchange, String operation) throws Exception {', 'String configMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(configMapName)) {']
['delete a specific config map require specify a config map name ', []]
camel sample_13304

['protected void doDeleteConfigMap(Exchange exchange, String operation) throws Exception {', 'String configMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(configMapName)) {', 'throw new IllegalArgumentException("Delete a specific config map require specify a config map name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific config map require specify a namespace name ', []]
camel sample_13304

['public void testFutureEchoException() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['got future ', []]
camel sample_3205

['public void testFutureEchoException() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['waiting for future to be done ', []]
camel sample_3205

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GlanceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-glance.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-glance.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1238

['public void testSuspendResume() throws Exception {', 'assertFalse(context.isSuspended());', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();']
['Suspending ', []]
camel sample_1392

['mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();', 'resetMocks();', 'mock.expectedMessageCount(0);', 'context.suspend();', 'Thread.sleep(100);', 'template.sendBody("seda:foo", "B");', 'mock.assertIsSatisfied(1000);', 'assertTrue(context.isSuspended());']
['Resuming ', []]
camel sample_1392

['processed.setMessageId(messageId);', 'processed.setCreatedAt(new Date());', 'entityManager.persist(processed);', 'entityManager.flush();', 'entityManager.close();', 'return Boolean.TRUE;', '} else {', 'return Boolean.FALSE;', '}', '} catch (Exception ex) {']
['something went wrong trying to add message to repository ', ['ex']]
camel sample_14091

['} finally {', 'try {', 'if (entityManager.isOpen()) {', 'entityManager.close();', '}', '} catch (Exception e) {', '}', '}', '}', '});']
['add ', ['messageid', 'rc']]
camel sample_14091

['entityManager.joinTransaction();', '}', 'List<?> list = query(entityManager, messageId);', 'if (list.isEmpty()) {', 'return Boolean.FALSE;', '} else {', 'return Boolean.TRUE;', '}', '}', '});']
['contains ', ['messageid', 'rc']]
camel sample_14091

['if (list.isEmpty()) {', 'return Boolean.FALSE;', '} else {', 'MessageProcessed processed = (MessageProcessed) list.get(0);', 'entityManager.remove(processed);', 'entityManager.flush();', 'entityManager.close();', 'return Boolean.TRUE;', '}', '} catch (Exception ex) {']
['something went wrong trying to remove message to repository ', ['ex']]
camel sample_14091

['} finally {', 'try {', 'if (entityManager.isOpen()) {', 'entityManager.close();', '}', '} catch (Exception e) {', '}', '}', '}', '});']
['remove ', ['messageid']]
camel sample_14091

['public boolean confirm(final Exchange exchange, String messageId) {']
['confirm true ', ['messageid']]
camel sample_14091

['Iterator it = list.iterator();', 'while (it.hasNext()) {', 'Object item = it.next();', 'entityManager.remove(item);', '}', 'entityManager.flush();', 'entityManager.close();', '}', 'return Boolean.TRUE;', '} catch (Exception ex) {']
['something went wrong trying to clear the repository ', ['ex']]
camel sample_14091

['} finally {', 'try {', 'if (entityManager.isOpen()) {', 'entityManager.close();', '}', '} catch (Exception e) {', '}', '}', '}', '});']
['clear the store ', ['messageprocessed', 'class', 'getname']]
camel sample_14091

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<TarFileDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.tarfile.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.tarfile.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1107

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CassandraComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cql.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cql.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_963

['private synchronized void createSessionAndRegisterListener() throws RepositoryException {']
['createsessionandregisterlistener start ', []]
camel sample_11456

['if (!"".equals(nodeTypeNames)) {', 'nodeTypeName = nodeTypeNames.split(",");', '}', '}', 'boolean noLocal = getJcrEndpoint().isNoLocal();', 'eventListener = new EndpointEventListener(getJcrEndpoint(), getProcessor());', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Adding JCR Event Listener, {}, on {}. eventTypes=" + eventTypes + ", isDeep=" + isDeep + ", uuid=" + Arrays.toString(uuid) + ", nodeTypeName=" + Arrays.toString(nodeTypeName) + ", noLocal=" + noLocal, eventListener, absPath);', '}', 'session.getWorkspace().getObservationManager() .addEventListener(eventListener, eventTypes, absPath, isDeep, uuid, nodeTypeName, noLocal);']
['createsessionandregisterlistener end ', []]
camel sample_11456

['public void run() {']
['jcrconsumersessionlistenerchecker starts ', []]
camel sample_11456

['public void run() {', 'boolean isSessionLive = false;', 'synchronized (this) {', 'if (JcrConsumer.this.session != null) {', 'try {', 'isSessionLive = JcrConsumer.this.session.isLive();', '} catch (Exception e) {']
['exception while checking jcr session ', ['e']]
camel sample_11456

['try {', 'isSessionLive = JcrConsumer.this.session.isLive();', '} catch (Exception e) {', '}', '}', '}', 'if (!isSessionLive) {', 'try {', 'createSessionAndRegisterListener();', '} catch (RepositoryException e) {']
['failed to create session and register listener ', ['e']]
camel sample_11456

['} catch (Exception e) {', '}', '}', '}', 'if (!isSessionLive) {', 'try {', 'createSessionAndRegisterListener();', '} catch (RepositoryException e) {', '}', '}']
['jcrconsumersessionlistenerchecker stops ', []]
camel sample_11456

['protected void verify(InputStream input, final Message out) throws Exception {']
['verification of xml signature document started ', []]
camel sample_6768

['try {', 'coreValidity = signature.validate(valContext);', '} catch (XMLSignatureException se) {', 'throw getConfiguration().getValidationFailedHandler().onXMLSignatureException(se);', '}', 'boolean goon = coreValidity;', 'if (!coreValidity) {', 'goon = handleSignatureValidationFailed(valContext, signature);', '}', 'if (goon) {']
['xml signature verified ', ['i']]
camel sample_6768

['private NodeList getSignatureNodes(Document doc) throws IOException, ParserConfigurationException, XmlSignatureFormatException {', 'NodeList nl = doc.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");', 'if (nl.getLength() == 0) {', 'throw new XmlSignatureFormatException( "Message is not a correct XML signature document: \'Signature\' element is missing. Check the sent message.");', '}']
['signature elements found ', ['nl', 'getlength']]
camel sample_6768

['protected boolean handleSignatureValidationFailed(DOMValidateContext valContext, XMLSignature signature) throws Exception {', 'ValidationFailedHandler handler = getConfiguration().getValidationFailedHandler();']
['handlesignaturevalidationfailed called ', []]
camel sample_6768

['boolean refValid = ref.validate(valContext);', 'if (!refValid) {', 'handler.manifestReferenceValidationFailed(ref);', '}', '}', '}', '}', '}', '}', 'boolean goon = handler.ignoreCoreValidationFailure();']
['ignore core validation failure ', ['goon']]
camel sample_6768

['result.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'exchange.setException(new ThrottlingException(msg));', '}', '});', 'sendMessage("Message One");', 'sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);']
['sending message three ', []]
camel sample_1804

['sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);', 'sendMessage("Message Three");', 'assertMockEndpointsSatisfied();', 'result.reset();', 'result.expectedMessageCount(2);', 'bodies = Arrays.asList("Message Three", "Message Four");', 'result.expectedBodiesReceivedInAnyOrder(bodies);', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isStarted);']
['sending message four ', []]
camel sample_1804

['protected void sendMessage(String bodyText) {', 'try {', 'template.sendBody(url, bodyText);', '} catch (Exception e) {']
['error sending ', ['e', 'getcause', 'getmessage']]
camel sample_1804

['public String rewrite(String url, HttpServletRequest request) throws Exception {', 'RewrittenUrl response = urlRewriter.processRequest(request, null);', 'if (response != null) {', 'String answer = response.getTarget();']
['rewrite url ', ['url', 'answer']]
camel sample_15045

['public String rewrite(String url, HttpServletRequest request) throws Exception {', 'RewrittenUrl response = urlRewriter.processRequest(request, null);', 'if (response != null) {', 'String answer = response.getTarget();', 'return answer;', '} else {']
['rewrite using original url ', ['url']]
camel sample_15045

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "camelContext");', 'if (conf == null) {', 'if (modRewriteConfFile != null) {']
['using mod rewrite config file as config for urlrewrite ', ['modrewriteconffile']]
camel sample_15045

['}', 'try {', 'String text = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is);', 'ModRewriteConfLoader loader = new ModRewriteConfLoader();', 'conf = new Conf();', 'loader.process(text, conf);', '} finally {', 'IOHelper.close(is);', '}', '} else if (modRewriteConfText != null) {']
['using modrewriteconftext as config for urlrewrite ', ['modrewriteconftext']]
camel sample_15045

['conf = new Conf();', 'loader.process(text, conf);', '} finally {', 'IOHelper.close(is);', '}', '} else if (modRewriteConfText != null) {', 'ModRewriteConfLoader loader = new ModRewriteConfLoader();', 'conf = new Conf();', 'loader.process(modRewriteConfText, conf);', '} else if (configFile != null) {']
['using config file as config for urlrewrite ', ['configfile']]
camel sample_15045

['protected void doShutdown() throws Exception {']
['shutting down urlrewrite ', []]
camel sample_15045

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HdfsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hdfs2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hdfs2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_430

['protected void executeComponents(Set<String> features) throws MojoExecutionException, MojoFailureException {']
['copying all camel component json descriptors ', []]
camel sample_125

['}', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}']
['found component properties files ', ['componentfiles', 'size']]
camel sample_125

['}', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}']
['found component json files ', ['jsonfiles', 'size']]
camel sample_125

['protected void executeDataFormats(Set<String> features) throws MojoExecutionException, MojoFailureException {']
['copying all camel dataformat json descriptors ', []]
camel sample_125

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat properties files ', ['dataformatfiles', 'size']]
camel sample_125

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat json files ', ['jsonfiles', 'size']]
camel sample_125

['protected void executeLanguages(Set<String> features) throws MojoExecutionException, MojoFailureException {']
['copying all camel language json descriptors ', []]
camel sample_125

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language properties files ', ['languagefiles', 'size']]
camel sample_125

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language json files ', ['jsonfiles', 'size']]
camel sample_125

['protected void executeOthers(Set<String> features) throws MojoExecutionException, MojoFailureException {']
['copying all camel other json descriptors ', []]
camel sample_125

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other properties files ', ['otherfiles', 'size']]
camel sample_125

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other json files ', ['jsonfiles', 'size']]
camel sample_125

['public Object processActivity(Object[] inputParameters, String taskToken) throws Exception {']
['processing activity task ', ['arrays', 'tostring', 'inputparameters']]
camel sample_8799

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SpringBatchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-batch.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-batch.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_575

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ServerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.iec60870-server.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.iec60870-server.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_826

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TikaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.tika.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.tika.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1042

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {']
['scheduled task started on ', ['this', 'getendpoint']]
camel sample_4169

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {']
['scheduled task started on ', ['this', 'getendpoint']]
camel sample_4169

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {']
['scheduled task started on ', ['this', 'getendpoint']]
camel sample_4169

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {']
['scheduled task started on ', ['this', 'getendpoint']]
camel sample_4169

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {']
['scheduled task started on ', ['this', 'getendpoint']]
camel sample_4169

['public void run() {', 'try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {']
['scheduled task completed on ', ['this', 'getendpoint']]
camel sample_4169

['try {', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {']
['scheduled task completed on ', ['this', 'getendpoint']]
camel sample_4169

['if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {']
['scheduled task completed on ', ['this', 'getendpoint']]
camel sample_4169

['} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {']
['scheduled task completed on ', ['this', 'getendpoint']]
camel sample_4169

['} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {']
['scheduled task completed on ', ['this', 'getendpoint']]
camel sample_4169

['} else {', '}', 'doRun();', 'if (LoggingLevel.ERROR == runLoggingLevel) {', '} else if (LoggingLevel.WARN == runLoggingLevel) {', '} else if (LoggingLevel.INFO == runLoggingLevel) {', '} else if (LoggingLevel.DEBUG == runLoggingLevel) {', '} else {', '}', '} catch (Error e) {']
['error occurred during running scheduled task on due ', ['this', 'getendpoint', 'e', 'getmessage', 'e']]
camel sample_4169

['private void doRun() {', 'if (isSuspended()) {']
['cannot start to poll as its suspended ', ['this', 'getendpoint']]
camel sample_4169

['private void doRun() {', 'if (isSuspended()) {', 'return;', '}', 'if (backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE)) {', 'if (backoffCounter++ < backoffMultiplier) {', 'if (idleCounter > 0) {']
['dorun backoff due subsequent idles backoff at ', ['new', 'object', 'idlecounter', 'backoffcounter', 'backoffmultiplier']]
camel sample_4169

['private void doRun() {', 'if (isSuspended()) {', 'return;', '}', 'if (backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE)) {', 'if (backoffCounter++ < backoffMultiplier) {', 'if (idleCounter > 0) {', '} else {']
['dorun backoff due subsequent errors backoff at ', ['new', 'object', 'errorcounter', 'backoffcounter', 'backoffmultiplier']]
camel sample_4169

['if (backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE)) {', 'if (backoffCounter++ < backoffMultiplier) {', 'if (idleCounter > 0) {', '} else {', '}', 'return;', '} else {', 'idleCounter = 0;', 'errorCounter = 0;', 'backoffCounter = 0;']
['dorun backoff finished resetting counters ', []]
camel sample_4169

['int retryCounter = -1;', 'boolean done = false;', 'Throwable cause = null;', 'int polledMessages = 0;', 'while (!done) {', 'try {', 'cause = null;', 'done = true;', 'if (isPollAllowed()) {', 'if (retryCounter == -1) {']
['starting to poll ', ['this', 'getendpoint']]
camel sample_4169

['boolean done = false;', 'Throwable cause = null;', 'int polledMessages = 0;', 'while (!done) {', 'try {', 'cause = null;', 'done = true;', 'if (isPollAllowed()) {', 'if (retryCounter == -1) {', '} else {']
['retrying attempt to poll ', ['retrycounter', 'this', 'getendpoint']]
camel sample_4169

['if (isPollAllowed()) {', 'if (retryCounter == -1) {', '} else {', '}', 'polling = true;', 'try {', 'boolean begin = pollStrategy.begin(this, getEndpoint());', 'if (begin) {', 'retryCounter++;', 'polledMessages = poll();']
['polled messages ', ['polledmessages']]
camel sample_4169

['if (begin) {', 'retryCounter++;', 'polledMessages = poll();', 'if (polledMessages == 0 && isSendEmptyMessageWhenIdle()) {', 'processEmptyMessage();', '}', 'pollStrategy.commit(this, getEndpoint(), polledMessages);', 'if (polledMessages > 0 && isGreedy()) {', 'done = false;', 'retryCounter = -1;']
['greedy polling after processing messages ', ['polledmessages']]
camel sample_4169

['polledMessages = poll();', 'if (polledMessages == 0 && isSendEmptyMessageWhenIdle()) {', 'processEmptyMessage();', '}', 'pollStrategy.commit(this, getEndpoint(), polledMessages);', 'if (polledMessages > 0 && isGreedy()) {', 'done = false;', 'retryCounter = -1;', '}', '} else {']
['cannot begin polling as pollstrategy returned false ', ['pollstrategy']]
camel sample_4169

['if (polledMessages > 0 && isGreedy()) {', 'done = false;', 'retryCounter = -1;', '}', '} else {', '}', '} finally {', 'polling = false;', '}', '}']
['finished polling ', ['this', 'getendpoint']]
camel sample_4169

['done = true;', '}', '} catch (Throwable t) {', 'cause = t;', 'done = true;', '}', 'if (cause != null && isRunAllowed()) {', 'try {', 'getExceptionHandler().handleException("Consumer " + this + " failed polling endpoint: " + getEndpoint() + ". Will try again at next poll", cause);', '} catch (Throwable e) {']
['error handling exception this exception will be ignored ', ['e']]
camel sample_4169

['protected void processEmptyMessage() throws Exception {', 'Exchange exchange = getEndpoint().createExchange();']
['sending empty message as there were no messages from polling ', ['this', 'getendpoint']]
camel sample_4169

['public long beforePoll(long timeout) throws Exception {']
['before poll ', ['getendpoint']]
camel sample_4169

['public void afterPoll() throws Exception {']
['after poll ', ['getendpoint']]
camel sample_4169

['try {', 'lock.lock();', 'this.currentLeader = leader;', 'this.currentMembers = members;', 'this.timestamp = timestamp;', 'this.lease = lease;', 'version = ++changeCounter;', '} finally {', 'lock.unlock();', '}']
['updated leader to at version version ', ['leader', 'version']]
camel sample_13257

['this.timestamp = timestamp;', 'this.lease = lease;', 'version = ++changeCounter;', '} finally {', 'lock.unlock();', '}', 'this.executor.execute(() -> checkAndNotify(version));', 'if (leader.isPresent()) {', 'long time = System.currentTimeMillis();', 'long delay = Math.max(timestamp + lease + FIXED_DELAY - time, FIXED_DELAY);']
['setting expiration in millis for version ', ['delay', 'version']]
camel sample_13257

['private void expiration(long version) {', 'try {', 'lock.lock();', 'if (version != this.changeCounter) {', 'return;', '}', 'long time = System.currentTimeMillis();', 'if (time < this.timestamp + this.lease) {', 'long delay = this.timestamp + this.lease - time;']
['delaying expiration by millis at version version ', ['delay', 'fixed', 'delay', 'version']]
camel sample_13257

['if (time >= this.timestamp + this.lease) {', 'leader = Optional.empty();', '}', '}', '} finally {', 'lock.unlock();', '}', 'final Optional<String> newLeader = leader;', 'if (!newLeader.equals(lastCommunicatedLeader)) {', 'lastCommunicatedLeader = newLeader;']
['the cluster has a new leader ', ['newleader']]
camel sample_13257

['final Optional<String> newLeader = leader;', 'if (!newLeader.equals(lastCommunicatedLeader)) {', 'lastCommunicatedLeader = newLeader;', 'try {', 'handler.onKubernetesClusterEvent(new KubernetesClusterEvent.KubernetesClusterLeaderChangedEvent() {', 'public Optional<String> getData() {', 'return newLeader;', '}', '});', '} catch (Throwable t) {']
['error while communicating the new leader to the handler ', ['t']]
camel sample_13257

['public Optional<String> getData() {', 'return newLeader;', '}', '});', '} catch (Throwable t) {', '}', '}', 'final Set<String> newMembers = members;', 'if (!newMembers.equals(lastCommunicatedMembers)) {', 'lastCommunicatedMembers = newMembers;']
['the list of cluster members has changed ', ['newmembers']]
camel sample_13257

['final Set<String> newMembers = members;', 'if (!newMembers.equals(lastCommunicatedMembers)) {', 'lastCommunicatedMembers = newMembers;', 'try {', 'handler.onKubernetesClusterEvent(new KubernetesClusterEvent.KubernetesClusterMemberListChangedEvent() {', 'public Set<String> getData() {', 'return newMembers;', '}', '});', '} catch (Throwable t) {']
['error while communicating the cluster members to the handler ', ['t']]
camel sample_13257

['final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.fields", "");', 'headers.put("CamelLinkedIn.keywords", "linkedin");', 'headers.put("CamelLinkedIn.hq_only", null);', 'headers.put("CamelLinkedIn.facet", null);', 'headers.put("CamelLinkedIn.facets", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.sort", null);', 'final org.apache.camel.component.linkedin.api.model.CompanySearch result = requestBodyAndHeaders("direct: assertNotNull("searchCompanies result", result);']
['searchcompanies ', ['result']]
camel sample_8849

['headers.put("CamelLinkedIn.job_title", null);', 'headers.put("CamelLinkedIn.country_code", null);', 'headers.put("CamelLinkedIn.postal_code", null);', 'headers.put("CamelLinkedIn.distance", null);', 'headers.put("CamelLinkedIn.facet", null);', 'headers.put("CamelLinkedIn.facets", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.sort", null);', 'final org.apache.camel.component.linkedin.api.model.JobSearch result = requestBodyAndHeaders("direct: assertNotNull("searchJobs result", result);']
['searchjobs ', ['result']]
camel sample_8849

['headers.put("CamelLinkedIn.current_school", null);', 'headers.put("CamelLinkedIn.country_code", null);', 'headers.put("CamelLinkedIn.postal_code", null);', 'headers.put("CamelLinkedIn.distance", null);', 'headers.put("CamelLinkedIn.facet", null);', 'headers.put("CamelLinkedIn.facets", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.sort", null);', 'final org.apache.camel.component.linkedin.api.model.PeopleSearch result = requestBodyAndHeaders("direct: assertNotNull("searchPeople result", result);']
['searchpeople ', ['result']]
camel sample_8849

['public void checkContextsHaveCorrectEndpointsAndRoutes() throws Exception {', 'assertNotNull("camelContexts not injected!", camelContexts);', 'for (CamelContext camelContext : camelContexts) {']
['camelcontext has endpoints ', ['camelcontext', 'camelcontext', 'getendpointmap', 'keyset']]
camel sample_6441

['public void testChunkPerformance() throws Exception {', 'int messageCount = 10000;', 'endSimpleMock.expectedMessageCount(messageCount);', 'StopWatch stopwatch = new StopWatch(true);', 'for (int i = 0; i < messageCount; i++) {', 'startSimpleProducerTemplate.sendBodyAndHeader("The Body", "name", "Andrew");', '}', 'assertMockEndpointsSatisfied();']
['chunk performance ms for messages ', ['stopwatch', 'stop', 'messagecount']]
camel sample_10494

['public synchronized IRCConnection getIRCConnection(IrcConfiguration configuration) {', 'final IRCConnection connection;', 'if (connectionCache.containsKey(configuration.getCacheKey())) {', 'if (LOG.isDebugEnabled()) {']
['returning cached connection to ', ['configuration', 'gethostname', 'configuration', 'getnickname']]
camel sample_12153

['protected IRCConnection createConnection(IrcConfiguration configuration) {', 'IRCConnection conn = null;', 'IRCEventListener ircLogger;', 'if (configuration.getUsingSSL()) {', 'if (LOG.isDebugEnabled()) {']
['creating ssl connection to destination s nick user ', ['new', 'object', 'configuration', 'gethostname', 'configuration', 'getlistofchannels', 'configuration', 'getnickname', 'configuration', 'getusername']]
camel sample_12153

['}', 'if (sslParams != null) {', 'conn = new CamelSSLIRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname(), sslParams, getCamelContext());', '} else {', 'SSLIRCConnection sconn = new SSLIRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname());', 'sconn.addTrustManager(configuration.getTrustManager());', 'conn = sconn;', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['creating connection to destination s nick user ', ['new', 'object', 'configuration', 'gethostname', 'configuration', 'getlistofchannels', 'configuration', 'getnickname', 'configuration', 'getusername']]
camel sample_12153

['}', '} else {', 'if (LOG.isDebugEnabled()) {', '}', 'conn = new IRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname());', '}', 'conn.setEncoding("UTF-8");', 'conn.setColors(configuration.isColors());', 'conn.setPong(true);', 'if (LOG.isDebugEnabled()) {']
['adding irc event logging listener ', []]
camel sample_12153

['public void closeConnection(String key, IRCConnection connection) {', 'try {', 'connection.doQuit();', 'connection.close();', '} catch (Exception e) {']
['error during closing connection ', ['e']]
camel sample_12153

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DisruptorVmComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.disruptor-vm.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.disruptor-vm.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_719

['GetQueueUrlRequest getQueueUrlRequest = new GetQueueUrlRequest();', 'getQueueUrlRequest.setQueueName(configuration.getQueueName());', 'getQueueUrlRequest.setQueueOwnerAWSAccountId(configuration.getQueueOwnerAWSAccountId());', 'GetQueueUrlResult getQueueUrlResult = client.getQueueUrl(getQueueUrlRequest);', 'queueUrl = getQueueUrlResult.getQueueUrl();', '} else {', 'ListQueuesResult listQueuesResult = client.listQueues();', 'for (String url : listQueuesResult.getQueueUrls()) {', 'if (url.endsWith("/" + configuration.getQueueName())) {', 'queueUrl = url;']
['queue available at ', ['queueurl']]
camel sample_8721

['for (String url : listQueuesResult.getQueueUrls()) {', 'if (url.endsWith("/" + configuration.getQueueName())) {', 'queueUrl = url;', 'break;', '}', '}', '}', 'if (queueUrl == null) {', 'createQueue(client);', '} else {']
['using amazon sqs queue url ', ['queueurl']]
camel sample_8721

['protected void createQueue(AmazonSQS client) {']
['queue doesn t exist will create it ', ['configuration', 'getqueuename']]
camel sample_8721

['}', 'if (getConfiguration().getPolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy()));', '}', 'if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {', 'request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds()));', '}', 'if (getConfiguration().getRedrivePolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy());', '}']
['creating queue with request ', ['configuration', 'getqueuename', 'request']]
camel sample_8721

['request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy()));', '}', 'if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {', 'request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds()));', '}', 'if (getConfiguration().getRedrivePolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy());', '}', 'CreateQueueResult queueResult = client.createQueue(request);', 'queueUrl = queueResult.getQueueUrl();']
['queue created and available at ', ['queueurl']]
camel sample_8721

['if (getConfiguration().getPolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy()));', '}', 'if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {', 'request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds()));', '}', 'if (getConfiguration().getRedrivePolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy());', '}', 'if (!request.getAttributes().isEmpty()) {']
['updating queue with the provided queue attributes ', ['configuration', 'getqueuename']]
camel sample_8721

['request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy()));', '}', 'if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {', 'request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds()));', '}', 'if (getConfiguration().getRedrivePolicy() != null) {', 'request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy());', '}', 'if (!request.getAttributes().isEmpty()) {', 'client.setQueueAttributes(request);']
['queue updated and available at ', ['configuration', 'getqueuename', 'queueurl']]
camel sample_8721

['private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException {', 'if (client == null) {']
['connecting to the elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_9999

['private void startClient() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, UnknownHostException {', 'if (client == null) {', 'if (configuration.getHostAddressesList() != null && !configuration.getHostAddressesList().isEmpty()) {', 'client = createClient();', '} else {']
['incorrect ip address and port parameters settings for elasticsearch cluster ', []]
camel sample_9999

['protected void doStop() throws Exception {', 'if (client != null) {']
['disconnecting from elasticsearch cluster ', ['configuration', 'getclustername']]
camel sample_9999

['public void onlyManageProcessorWithCustomId(boolean flag) {']
['using deprecated option onlymanageprocessorwithcustomid on managementstrategy configure this on managementagent instead ', []]
camel sample_4702

['public void setStatisticsLevel(ManagementStatisticsLevel level) {']
['using deprecated option statisticslevel on managementstrategy configure this on managementagent instead ', []]
camel sample_4702

['public void setLoadStatisticsEnabled(boolean loadStatisticsEnabled) {']
['using deprecated option loadstatisticsenabled on managementstrategy configure this on managementagent instead ', []]
camel sample_4702

['protected void doStart() throws Exception {']
['jmx is disabled ', []]
camel sample_4702

['public synchronized List<PullRequest> getPullRequests(IRepositoryIdProvider repository, String state) {', 'List<PullRequest> result = new ArrayList<PullRequest>();', 'for (Long id : pullRequests.keySet()) {', 'PullRequest pr = pullRequests.get(id);', 'if (pr.getState().equals(state)) {', 'result.add(pr);', '}', '}']
['returning list of pull requests with state ', ['result', 'size', 'state']]
camel sample_14253

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GoraComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.gora.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.gora.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1150

['public void undeploy(Archive<?> archive) throws DeploymentException {']
['undeploying ', ['archive', 'getname']]
camel sample_5955

['public void undeploy(Archive<?> archive) throws DeploymentException {', 'if (!keepDeploymentArchives) {', 'for (File materializedFile : materializedFiles) {', 'if (materializedFile.isDirectory()) {', 'try {', 'FileDeploymentUtils.deleteRecursively(materializedFile.toPath());', '} catch (IOException e) {']
['could not delete materialized directory ', ['warning', 'materializedfile']]
camel sample_5955

['public ProtocolMetaData deploy(final Archive<?> archive) throws DeploymentException {']
['deploying ', ['archive', 'getname']]
camel sample_5955

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ZendeskComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zendesk.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zendesk.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1015

['public void setUp() throws Exception {', 'super.setUp();', 'byte[] iso = payload.getBytes("iso-8859-1");', 'byte[] utf = payload.getBytes("utf-8");']
['iso iso ', ['new', 'string', 'iso', 'charset', 'forname']]
camel sample_15157

['public void setUp() throws Exception {', 'super.setUp();', 'byte[] iso = payload.getBytes("iso-8859-1");', 'byte[] utf = payload.getBytes("utf-8");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_15157

['public void setUp() throws Exception {', 'super.setUp();', 'byte[] iso = payload.getBytes("iso-8859-1");', 'byte[] utf = payload.getBytes("utf-8");', 'for (byte b : iso) {']
['iso byte ', ['b']]
camel sample_15157

['public void setUp() throws Exception {', 'super.setUp();', 'byte[] iso = payload.getBytes("iso-8859-1");', 'byte[] utf = payload.getBytes("utf-8");', 'for (byte b : iso) {', '}', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_15157

['protected void doStart() throws Exception {', 'super.doStart();', 'this.set = getAtomixEndpoint() .getAtomix() .getSet( resourceName, new DistributedSet.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedSet.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))) .join();']
['subscribe to events for set ', ['resourcename']]
camel sample_10355

['Class<?> processorClass = processorDefinition.getClass();', 'String shortName = processorDefinition.getShortName();', 'if (processorDefinition instanceof BeanDefinition) {', 'BeanProcessor beanProcessor = (BeanProcessor) nextTarget;', 'processorClass = beanProcessor.getBean().getClass();', '} else if (processorDefinition instanceof ProcessDefinition) {', 'DelegateSyncProcessor syncProcessor = (DelegateSyncProcessor) nextTarget;', 'processorClass = syncProcessor.getProcessor().getClass();', '}', 'if (!processorClass.isAnnotationPresent(XRayTrace.class)) {']
['does not contain an trace annotation skipping interception ', ['processorclass', 'getsimplename']]
camel sample_8234

['if (processorDefinition instanceof BeanDefinition) {', 'BeanProcessor beanProcessor = (BeanProcessor) nextTarget;', 'processorClass = beanProcessor.getBean().getClass();', '} else if (processorDefinition instanceof ProcessDefinition) {', 'DelegateSyncProcessor syncProcessor = (DelegateSyncProcessor) nextTarget;', 'processorClass = syncProcessor.getProcessor().getClass();', '}', 'if (!processorClass.isAnnotationPresent(XRayTrace.class)) {', 'return new DelegateAsyncProcessor(target);', '}']
['wrapping process definition of target in order for recording its trace ', ['processordefinition', 'processorclass']]
camel sample_8234

['}', 'Annotation annotation = processorClass.getAnnotation(XRayTrace.class);', 'XRayTrace trace = (XRayTrace)annotation;', 'String metricName = trace.metricName();', 'if ("".equals(metricName)) {', 'metricName = processorClass.getSimpleName();', '}', 'final Class<?> type = processorClass;', 'final String name = shortName + ":" + metricName;', 'return new DelegateAsyncProcessor((Exchange exchange) -> {']
['creating new subsegment for of type eip ', ['name', 'type', 'target']]
camel sample_8234

['XRayTrace trace = (XRayTrace)annotation;', 'String metricName = trace.metricName();', 'if ("".equals(metricName)) {', 'metricName = processorClass.getSimpleName();', '}', 'final Class<?> type = processorClass;', 'final String name = shortName + ":" + metricName;', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'try {']
['processing eip ', ['target']]
camel sample_8234

['if ("".equals(metricName)) {', 'metricName = processorClass.getSimpleName();', '}', 'final Class<?> type = processorClass;', 'final String name = shortName + ":" + metricName;', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'try {', 'target.process(exchange);', '} catch (Exception ex) {']
['handling exception thrown by invoked eip ', ['target']]
camel sample_8234

['final Class<?> type = processorClass;', 'final String name = shortName + ":" + metricName;', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'try {', 'target.process(exchange);', '} catch (Exception ex) {', 'subsegment.addException(ex);', 'throw ex;', '} finally {']
['closing down subsegment for ', ['name']]
camel sample_8234

['protected void doStart() throws Exception {']
['starting couchbase consumer ', []]
camel sample_7712

['protected void doStop() throws Exception {']
['stopping couchbase consumer ', []]
camel sample_7712

['protected synchronized int poll() throws Exception {', 'ViewResponse result = client.query(view, query);']
['received result set from couchbase ', []]
camel sample_7712

['String designDocumentName = endpoint.getDesignDocumentName();', 'String viewName = endpoint.getViewName();', 'Exchange exchange = endpoint.createExchange();', 'exchange.getIn().setBody(doc);', 'exchange.getIn().setHeader(HEADER_ID, id);', 'exchange.getIn().setHeader(HEADER_KEY, key);', 'exchange.getIn().setHeader(HEADER_DESIGN_DOCUMENT_NAME, designDocumentName);', 'exchange.getIn().setHeader(HEADER_VIEWNAME, viewName);', 'if ("delete".equalsIgnoreCase(consumerProcessedStrategy)) {', 'if (log.isTraceEnabled()) {']
['deleting doc with id ', ['id']]
camel sample_7712

['exchange.getIn().setHeader(HEADER_ID, id);', 'exchange.getIn().setHeader(HEADER_KEY, key);', 'exchange.getIn().setHeader(HEADER_DESIGN_DOCUMENT_NAME, designDocumentName);', 'exchange.getIn().setHeader(HEADER_VIEWNAME, viewName);', 'if ("delete".equalsIgnoreCase(consumerProcessedStrategy)) {', 'if (log.isTraceEnabled()) {', '}', 'client.delete(id);', '} else if ("filter".equalsIgnoreCase(consumerProcessedStrategy)) {', 'if (log.isTraceEnabled()) {']
['filtering out id ', ['id']]
camel sample_7712

['exchange.getIn().setHeader(HEADER_DESIGN_DOCUMENT_NAME, designDocumentName);', 'exchange.getIn().setHeader(HEADER_VIEWNAME, viewName);', 'if ("delete".equalsIgnoreCase(consumerProcessedStrategy)) {', 'if (log.isTraceEnabled()) {', '}', 'client.delete(id);', '} else if ("filter".equalsIgnoreCase(consumerProcessedStrategy)) {', 'if (log.isTraceEnabled()) {', '}', '} else {']
['no strategy set for already processed docs beware of duplicates ', []]
camel sample_7712

['public void handleMessage(final Exchange exchange) {', 'if (log.isDebugEnabled()) {']
['handling inonly message ', ['exchange', 'getin', 'getbody']]
camel sample_12411

['public void handleMessage(final Exchange exchange) {', 'if (log.isDebugEnabled()) {', '}', 'if (!exchange.isFailed()) {', 'NoOpAsyncCallback callback = new NoOpAsyncCallback();', 'if (isTransacted() || isSynchronous()) {', 'if (log.isDebugEnabled()) {']
['synchronous processing message destination ', ['exchange', 'getin', 'getbody', 'getendpoint', 'getendpointuri']]
camel sample_12411

['if (log.isDebugEnabled()) {', '}', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '} finally {', 'callback.done(true);', '}', '} else {']
['asynchronous processing message destination ', ['exchange', 'getin', 'getbody', 'getendpoint', 'getendpointuri']]
camel sample_12411

['public void done(boolean sync) {']
['noopasynccallback inonly exchange complete ', []]
camel sample_12411

['private Pubsub buildClient(HttpTransport httpTransport) throws Exception {', 'GoogleCredential credential = null;', 'if (!Strings.isNullOrEmpty(serviceAccount) && !Strings.isNullOrEmpty(serviceAccountKey)) {', 'if (logger.isDebugEnabled()) {']
['service account and key have been set explicitly initialising pubsub using service account ', ['serviceaccount']]
camel sample_17243

['private Pubsub buildClient(HttpTransport httpTransport) throws Exception {', 'GoogleCredential credential = null;', 'if (!Strings.isNullOrEmpty(serviceAccount) && !Strings.isNullOrEmpty(serviceAccountKey)) {', 'if (logger.isDebugEnabled()) {', '}', 'credential = createFromAccountKeyPair(httpTransport);', '}', 'if (credential == null && !Strings.isNullOrEmpty(credentialsFileLocation)) {', 'if (logger.isDebugEnabled()) {']
['key file name has been set explicitly initialising pubsub using key file ', ['credentialsfilelocation']]
camel sample_17243

['}', 'credential = createFromAccountKeyPair(httpTransport);', '}', 'if (credential == null && !Strings.isNullOrEmpty(credentialsFileLocation)) {', 'if (logger.isDebugEnabled()) {', '}', 'credential = createFromFile();', '}', 'if (credential == null) {', 'if (logger.isDebugEnabled()) {']
['no explicit service account or key file name have been provided initialising pubsub using defaults ', []]
camel sample_17243

['public void myMethod(@Headers Map<String, Object> headers, Object body) {', 'this.headers = headers;', 'this.body = body;']
['mymethod method called on ', ['this']]
camel sample_3244

['private void getUserImages(Exchange exchange) throws Exception {', 'Images images = getEndpoint().getDigitalOceanClient().getUserImages(configuration.getPage(), configuration.getPerPage());']
['user images page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'images', 'getimages']]
camel sample_8886

['private void getImages(Exchange exchange) throws Exception {', 'DigitalOceanImageTypes type = exchange.getIn().getHeader(DigitalOceanHeaders.TYPE, DigitalOceanImageTypes.class);', 'Images images;', 'if (ObjectHelper.isNotEmpty(type)) {', 'images = getEndpoint().getDigitalOceanClient().getAvailableImages(configuration.getPage(), configuration.getPerPage(), ActionType.valueOf(type.name()));', '} else {', 'images = getEndpoint().getDigitalOceanClient().getAvailableImages(configuration.getPage(), configuration.getPerPage());', '}']
['all images page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'images', 'getimages']]
camel sample_8886

['Integer imageId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'String slug = exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_IMAGE, String.class);', 'Image image;', 'if (ObjectHelper.isNotEmpty(imageId)) {', 'image = getEndpoint().getDigitalOceanClient().getImageInfo(imageId);', '} else if (ObjectHelper.isNotEmpty(slug)) {', 'image = getEndpoint().getDigitalOceanClient().getImageInfo(slug);', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.DROPLET_IMAGE + " must be specified");', '}']
['image ', ['image']]
camel sample_8886

['private void getImageActions(Exchange exchange) throws Exception {', 'Integer imageId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'if (ObjectHelper.isEmpty(imageId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Actions actions = getEndpoint().getDigitalOceanClient().getAvailableImageActions(imageId, configuration.getPage(), configuration.getPerPage());']
['actions for image page per page ', ['imageid', 'configuration', 'getpage', 'configuration', 'getperpage', 'actions', 'getactions']]
camel sample_8886

['throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class);', 'if (ObjectHelper.isEmpty(name)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified");', '}', 'Image image = new Image();', 'image.setId(imageId);', 'image.setName(name);', 'image = getEndpoint().getDigitalOceanClient().updateImage(image);']
['update image ', ['imageid', 'image']]
camel sample_8886

['private void deleteImage(Exchange exchange) throws Exception {', 'Integer imageId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'if (ObjectHelper.isEmpty(imageId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Delete delete = getEndpoint().getDigitalOceanClient().deleteImage(imageId);']
['delete image ', ['imageid', 'delete']]
camel sample_8886

['private void transferImage(Exchange exchange) throws Exception {', 'Integer imageId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'if (ObjectHelper.isEmpty(imageId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().transferImage(imageId, region);']
['transfer image to region ', ['imageid', 'region', 'action']]
camel sample_8886

['private void convertImageToSnapshot(Exchange exchange) throws Exception {', 'Integer imageId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class);', 'if (ObjectHelper.isEmpty(imageId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().convertImage(imageId);']
['convert image ', ['imageid', 'action']]
camel sample_8886

['public void testEndpointConfiguration() throws Exception {', 'Endpoint endpoint = getMandatoryBean(Endpoint.class, "endpoint1");', 'assertEquals("endpoint URI", "direct: DummyBean dummyBean = getMandatoryBean(DummyBean.class, "mybean");', 'assertNotNull("The bean should have an endpoint injected", dummyBean.getEndpoint());']
['endpoint uri direct log debug dummybean ', ['found', 'dummy', 'bean']]
camel sample_16130

['public void testEndpointConfigurationAfterEnsuringThatTheStatementRouteBuilderWasCreated() throws Exception {', 'String[] names = applicationContext.getBeanDefinitionNames();', 'for (String name : names) {']
['found bean name ', ['name']]
camel sample_16130

['public void start() throws Exception {']
['starting server ', []]
camel sample_6031

['public static void main(String args[]) throws Exception {', 'Server server = new Server();']
['server ready ', []]
camel sample_6031

['public static void main(String args[]) throws Exception {', 'Server server = new Server();', 'server.start();', 'Thread.sleep(5 * 60 * 1000);']
['server exiting ', []]
camel sample_6031

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RestletComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.restlet.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.restlet.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_739

['public Producer createProducer() throws Exception {']
['creating spark producer ', ['endpointtype']]
camel sample_12523

['public Producer createProducer() throws Exception {', 'if (endpointType == EndpointType.rdd) {']
['about to create rdd producer ', []]
camel sample_12523

['public Producer createProducer() throws Exception {', 'if (endpointType == EndpointType.rdd) {', 'return new RddSparkProducer(this);', '} else if (endpointType == EndpointType.dataframe) {']
['about to create dataframe producer ', []]
camel sample_12523

['public Producer createProducer() throws Exception {', 'if (endpointType == EndpointType.rdd) {', 'return new RddSparkProducer(this);', '} else if (endpointType == EndpointType.dataframe) {', 'return new DataFrameSparkProducer(this);', '} else {']
['about to create hive producer ', []]
camel sample_12523

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(uri) .aggregate(constant(true), new AggregationStrategy() {', 'public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'Exchange answer = oldExchange != null ? oldExchange : newExchange;', 'COUNTER.getAndIncrement();', 'Integer newIndex = newExchange.getIn().getHeader("index", Integer.class);', 'int total = SUM.addAndGet(newIndex);', 'answer.getIn().setHeader("total", total);']
['index total so far ', ['newindex', 'total']]
camel sample_1961

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesPodsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-pods.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-pods.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_555

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FopComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.fop.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.fop.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1062

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SdbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sdb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-sdb.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1127

['exchange.setProperty("Timeout", true);', 'timeoutLatch.countDown();', '}', '}) .completionAware(new CompletionAwareMixin() {', 'public void onCompletion(Exchange exchange) {', 'completionLatch.countDown();', '}', '});', 'from("direct:start.timeoutAndCompletionAware") .aggregate(timeoutCompletionStrategy).constant(true) .completionTimeout(500).completionSize(2) .to("mock:result.timeoutAndCompletionAware");', 'from("direct:start.xpath1") .aggregate(AggregationStrategies.flexible(Node.class) .pick(xpath(" .accumulateInCollection(ArrayList.class)) .constant(true).completionSize(3) .to("mock:result.xpath1");']
['direct linkedlist before the first split the body is body and has class body getclass during the first split the body is body and has class body getclass before the second split the body is body and has class body getclass during the second split the body is body and has class body getclass after the second split the body is body and has class body getclass ', ['log', 'logginglevel', 'info', 'split', 'body', 'aggregationstrategies', 'flexible', 'pick', 'body', 'accumulateincollection', 'linkedlist', 'class', 'log', 'logginglevel', 'info', 'end', 'log', 'logginglevel', 'info', 'split', 'body', 'aggregationstrategies', 'flexible', 'pick', 'body', 'accumulateincollection', 'linkedlist', 'class', 'log', 'logginglevel', 'info', 'end', 'log', 'logginglevel', 'info']]
camel sample_1577

['exchange.setProperty("Timeout", true);', 'timeoutLatch.countDown();', '}', '}) .completionAware(new CompletionAwareMixin() {', 'public void onCompletion(Exchange exchange) {', 'completionLatch.countDown();', '}', '});', 'from("direct:start.timeoutAndCompletionAware") .aggregate(timeoutCompletionStrategy).constant(true) .completionTimeout(500).completionSize(2) .to("mock:result.timeoutAndCompletionAware");', 'from("direct:start.xpath1") .aggregate(AggregationStrategies.flexible(Node.class) .pick(xpath(" .accumulateInCollection(ArrayList.class)) .constant(true).completionSize(3) .to("mock:result.xpath1");']
['direct hashset before the first split the body is body and has class body getclass during the first split the body is body and has class body getclass before the second split the body is body and has class body getclass during the second split the body is body and has class body getclass after the second split the body is body and has class body getclass ', ['log', 'logginglevel', 'info', 'split', 'body', 'aggregationstrategies', 'flexible', 'pick', 'body', 'accumulateincollection', 'hashset', 'class', 'log', 'logginglevel', 'info', 'end', 'log', 'logginglevel', 'info', 'split', 'body', 'aggregationstrategies', 'flexible', 'pick', 'body', 'accumulateincollection', 'hashset', 'class', 'log', 'logginglevel', 'info', 'end', 'log', 'logginglevel', 'info']]
camel sample_1577

['public void testAddUserEmailAlias() throws Exception {', 'com.box.sdk.EmailAlias result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.userId", testUser.getID());', 'headers.put("CamelBox.email", CAMEL_TEST_USER_EMAIL_ALIAS);', 'result = requestBodyAndHeaders("direct: assertNotNull("addUserEmailAlias result", result);']
['adduseremailalias ', ['result']]
camel sample_17408

['public void testCreateAppUser() throws Exception {', 'com.box.sdk.BoxUser result = null;', 'try {', 'CreateUserParams params = new CreateUserParams();', 'params.setSpaceAmount(1073741824);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.name", CAMEL_TEST_CREATE_APP_USER_NAME);', 'headers.put("CamelBox.params", params);', 'result = requestBodyAndHeaders("direct: assertNotNull("createAppUser result", result);']
['createappuser ', ['result']]
camel sample_17408

['public void testCreateEnterpriseUser() throws Exception {', 'com.box.sdk.BoxUser result = null;', 'try {', 'CreateUserParams params = new CreateUserParams();', 'params.setSpaceAmount(1073741824);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.login", CAMEL_TEST_CREATE_ENTERPRISE_USER_LOGIN);', 'headers.put("CamelBox.name", CAMEL_TEST_CREATE_ENTERPRISE_USER_NAME);', 'headers.put("CamelBox.params", params);', 'result = requestBodyAndHeaders("direct: assertNotNull("createEnterpriseUser result", result);']
['createenterpriseuser ', ['result']]
camel sample_17408

['public void testDeleteUser() throws Exception {', 'BoxUser.Info info = BoxUser.createAppUser(getConnection(), CAMEL_TEST_CREATE_APP_USER_NAME);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.userId", info.getID());', 'headers.put("CamelBox.notifyUser", Boolean.FALSE);', 'headers.put("CamelBox.force", Boolean.FALSE);', 'requestBodyAndHeaders("direct: Iterable<BoxUser.Info> it = BoxUser.getAllEnterpriseUsers(getConnection(), CAMEL_TEST_CREATE_APP_USER_NAME);', 'int searchResults = sizeOfIterable(it);', 'boolean exists = searchResults > 0 ? true : false;', 'assertEquals("deleteUser exists", false, exists);']
['deleteuser exists ', ['exists']]
camel sample_17408

['public void testGetAllEnterpriseOrExternalUsers() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.filterTerm", null);', 'headers.put("CamelBox.fields", null);', 'final java.util.List result = requestBodyAndHeaders("direct: assertNotNull("getAllEnterpriseOrExternalUsers result", result);']
['getallenterpriseorexternalusers ', ['result']]
camel sample_17408

['public void testGetCurrentUser() throws Exception {', 'final com.box.sdk.BoxUser result = requestBody("direct: assertNotNull("getCurrentUser result", result);']
['getcurrentuser ', ['result']]
camel sample_17408

['public void testGetUserEmailAlias() throws Exception {', 'final java.util.Collection result = requestBody("direct: assertNotNull("getUserEmailAlias result", result);']
['getuseremailalias ', ['result']]
camel sample_17408

['public void testGetUserInfo() throws Exception {', 'final com.box.sdk.BoxUser.Info result = requestBody("direct: assertNotNull("getUserInfo result", result);']
['getuserinfo ', ['result']]
camel sample_17408

['public void testUpdateUserInfo() throws Exception {', 'BoxUser.Info info = testUser.getInfo();', 'info.setJobTitle(CAMEL_TEST_USER_JOB_TITLE);', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.userId", testUser.getID());', 'headers.put("CamelBox.info", info);', 'final com.box.sdk.BoxUser result = requestBodyAndHeaders("direct: assertNotNull("updateUserInfo result", result);']
['updateuserinfo ', ['result']]
camel sample_17408

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {']
['adding key ', ['key', 'exchange']]
camel sample_13918

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {', 'try {', 'byte[] lDbKey = keyBuilder(repositoryName, key);', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'byte[] rc = null;', 'if (isReturnOldExchange()) {', 'rc = levelDBFile.getDb().get(lDbKey);', '}']
['adding key index for repository ', ['key', 'repositoryname']]
camel sample_13918

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {', 'try {', 'byte[] lDbKey = keyBuilder(repositoryName, key);', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'byte[] rc = null;', 'if (isReturnOldExchange()) {', 'rc = levelDBFile.getDb().get(lDbKey);', '}', 'levelDBFile.getDb().put(lDbKey, exchangeBuffer.toByteArray(), levelDBFile.getWriteOptions());']
['added key index ', ['key']]
camel sample_13918

['public Exchange get(final CamelContext camelContext, final String key) {', 'Exchange answer = null;', 'try {', 'byte[] lDbKey = keyBuilder(repositoryName, key);']
['getting key index ', ['key']]
camel sample_13918

['Exchange answer = null;', 'try {', 'byte[] lDbKey = keyBuilder(repositoryName, key);', 'byte[] rc = levelDBFile.getDb().get(lDbKey);', 'if (rc != null) {', 'answer = codec.unmarshallExchange(camelContext, new Buffer(rc));', '}', '} catch (IOException e) {', 'throw new RuntimeException("Error getting key " + key + " from repository " + repositoryName, e);', '}']
['getting key ', ['key', 'answer']]
camel sample_13918

['public void remove(final CamelContext camelContext, final String key, final Exchange exchange) {']
['removing key ', ['key']]
camel sample_13918

['public void remove(final CamelContext camelContext, final String key, final Exchange exchange) {', 'try {', 'byte[] lDbKey = keyBuilder(repositoryName, key);', 'final String exchangeId = exchange.getExchangeId();', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'byte[] rc = levelDBFile.getDb().get(lDbKey);', 'if (rc != null) {', 'WriteBatch batch = levelDBFile.getDb().createWriteBatch();', 'try {', 'batch.delete(lDbKey);']
['removed key index ', ['key', 'new', 'buffer', 'rc']]
camel sample_13918

['byte[] lDbKey = keyBuilder(repositoryName, key);', 'final String exchangeId = exchange.getExchangeId();', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'byte[] rc = levelDBFile.getDb().get(lDbKey);', 'if (rc != null) {', 'WriteBatch batch = levelDBFile.getDb().createWriteBatch();', 'try {', 'batch.delete(lDbKey);', 'byte[] confirmedLDBKey = keyBuilder(getRepositoryNameCompleted(), exchangeId);', 'batch.put(confirmedLDBKey, exchangeBuffer.toByteArray());']
['added confirm index for repository ', ['exchangeid', 'getrepositorynamecompleted']]
camel sample_13918

['public void confirm(final CamelContext camelContext, final String exchangeId) {']
['confirming exchangeid ', ['exchangeid']]
camel sample_13918

['public void confirm(final CamelContext camelContext, final String exchangeId) {', 'byte[] confirmedLDBKey = keyBuilder(getRepositoryNameCompleted(), exchangeId);', 'byte[] rc = levelDBFile.getDb().get(confirmedLDBKey);', 'if (rc != null) {', 'levelDBFile.getDb().delete(confirmedLDBKey);']
['removed confirm index ', ['exchangeid', 'new', 'buffer', 'rc']]
camel sample_13918

["String prefix = repositoryName + '\\0';", 'for (it.seek(keyBuilder(repositoryName, "")); it.hasNext(); it.next()) {', 'if (!isRunAllowed()) {', 'break;', '}', 'keyBuffer = asString(it.peekNext().getKey());', 'if (!keyBuffer.startsWith(prefix)) {', 'break;', '}', 'String key = keyBuffer.substring(prefix.length());']
['getkey ', ['key']]
camel sample_13918

['DBIterator it = levelDBFile.getDb().iterator();', 'String keyBuffer;', 'try {', "String prefix = getRepositoryNameCompleted() + '\\0';", 'for (it.seek(keyBuilder(getRepositoryNameCompleted(), "")); it.hasNext(); it.next()) {', 'keyBuffer = asString(it.peekNext().getKey());', 'if (!keyBuffer.startsWith(prefix)) {', 'break;', '}', 'String exchangeId = keyBuffer.substring(prefix.length());']
['scan exchangeid ', ['exchangeid']]
camel sample_13918

['if (!keyBuffer.startsWith(prefix)) {', 'break;', '}', 'String exchangeId = keyBuffer.substring(prefix.length());', 'answer.add(exchangeId);', '}', '} finally {', 'IOHelper.close(it);', '}', 'if (answer.size() == 0) {']
['scanned and found no exchange to recover ', []]
camel sample_13918

['}', 'String exchangeId = keyBuffer.substring(prefix.length());', 'answer.add(exchangeId);', '}', '} finally {', 'IOHelper.close(it);', '}', 'if (answer.size() == 0) {', '} else {', 'if (LOG.isDebugEnabled()) {']
['scanned and found exchange s to recover note some of them may already be in progress ', ['answer', 'size']]
camel sample_13918

['Exchange answer = null;', 'try {', 'byte[] completedLDBKey = keyBuilder(getRepositoryNameCompleted(), exchangeId);', 'byte[] rc = levelDBFile.getDb().get(completedLDBKey);', 'if (rc != null) {', 'answer = codec.unmarshallExchange(camelContext, new Buffer(rc));', '}', '} catch (IOException e) {', 'throw new RuntimeException("Error recovering exchangeId " + exchangeId + " from repository " + repositoryName, e);', '}']
['recovering exchangeid ', ['exchangeid', 'answer']]
camel sample_13918

['try {', 'for (it.seek(keyBuilder(repositoryName, "")); it.hasNext(); it.next()) {', 'if (!asString(it.peekNext().getKey()).startsWith(prefix)) {', 'break;', '}', 'count++;', '}', '} finally {', 'IOHelper.close(it);', '}']
['size of repository ', ['repositoryname', 'count']]
camel sample_13918

['levelDBFile = new LevelDBFile();', 'levelDBFile.setSync(isSync());', 'levelDBFile.setFileName(persistentFileName);', '}', 'ObjectHelper.notNull(levelDBFile, "Either set a persistentFileName or a levelDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(levelDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {']
['on startup there are aggregate exchanges not completed in repository ', ['current', 'getrepositoryname']]
camel sample_13918

['levelDBFile.setSync(isSync());', 'levelDBFile.setFileName(persistentFileName);', '}', 'ObjectHelper.notNull(levelDBFile, "Either set a persistentFileName or a levelDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(levelDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {']
['on startup there are no existing aggregate exchanges not completed in repository ', ['getrepositoryname']]
camel sample_13918

['}', 'ObjectHelper.notNull(levelDBFile, "Either set a persistentFileName or a levelDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(levelDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {']
['on startup there are completed exchanges to be recovered in repository ', ['completed', 'getrepositorynamecompleted']]
camel sample_13918

['ObjectHelper.notNull(levelDBFile, "Either set a persistentFileName or a levelDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(levelDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {', '} else {']
['on startup there are no completed exchanges to be recovered in repository ', ['getrepositorynamecompleted']]
camel sample_13918

['public void start() throws Exception {', 'if (isStarting() || isStarted()) {']
['service already started ', []]
camel sample_5164

['public void start() throws Exception {', 'if (isStarting() || isStarted()) {', 'return;', '}', 'if (starting.compareAndSet(false, true)) {']
['starting service ', []]
camel sample_5164

['public void stop() throws Exception {', 'if (isStopped()) {']
['service already stopped ', []]
camel sample_5164

['public void stop() throws Exception {', 'if (isStopped()) {', 'return;', '}', 'if (isStopping()) {']
['service already stopping ', []]
camel sample_5164

['public void shutdown() throws Exception {', 'if (shutdown.get()) {']
['service already shut down ', []]
camel sample_5164

['public void process(Exchange exchange) throws Exception {']
['process exchange in the sync way ', ['exchange']]
camel sample_17326

['methodName = endpoint.getDefaultMethodName();', '}', 'if (ObjectHelper.isEmpty(methodName)) {', 'throw new IllegalArgumentException("CamelXmlRpcMethodName header is empty, please set the message header or defaultMethodName option on the endpoint.");', '}', 'try {', 'Object result = client.execute(methodName, in.getBody(List.class));', 'exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());', 'exchange.getOut().setBody(result);', '} catch (Exception ex) {']
['got an exception when invoke the xmlrpc service ', ['ex']]
camel sample_17326

['public boolean process(Exchange exchange, AsyncCallback callback) {']
['process exchange in the async way ', ['exchange']]
camel sample_17326

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JMXComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jmx.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jmx.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_781

['protected ConnectionResource createConnectionResource(Object source) {', 'if (getConnectionFactory() == null) {', 'throw new IllegalArgumentException(String.format("ConnectionResource or ConnectionFactory must be configured for %s", this));', '}', 'try {']
['creating connectionresource with connectioncount using connectionfactory ', ['getconnectioncount', 'getconnectionfactory']]
camel sample_12431

['retryRequest(origRequest, client, retries, conversation, true);', 'return;', '}', 'final int status = response.getStatus();', 'final String reason = response.getReason();', 'if (retries >= maxAuthenticationRetries) {', 'forwardSuccessComplete(request, response);', 'return;', '}', 'if (status == HttpStatus.UNAUTHORIZED_401) {']
['retrying on salesforce authentication error ', ['status', 'reason']]
camel sample_14766

['if (retries >= maxAuthenticationRetries) {', 'forwardSuccessComplete(request, response);', 'return;', '}', 'if (status == HttpStatus.UNAUTHORIZED_401) {', 'retryLogin(request, retries);', '} else if (status < HttpStatus.OK_200 || status >= HttpStatus.MULTIPLE_CHOICES_300) {', 'final InputStream inputStream = getContent().length == 0 ? null : getContentAsInputStream();', 'final SalesforceException cause = client != null ? client.createRestException(response, inputStream) : null;', 'if (status == HttpStatus.BAD_REQUEST_400 && cause != null && isInvalidSessionError(cause)) {']
['retrying on bulk api salesforce authentication error ', ['status', 'reason']]
camel sample_14766

['protected void retryOnFailure(SalesforceHttpRequest request, HttpConversation conversation, Integer retries, AbstractClientBase client, Throwable failure) {']
['retrying on salesforce authentication failure ', ['failure', 'getmessage', 'failure']]
camel sample_14766

['public void testFileToCxfMessageDataFormat() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(1);', 'template.sendBodyAndHeader("file:target/filetocxf", createBody(), Exchange.FILE_NAME, "payload.xml");', 'assertMockEndpointsSatisfied();', 'String out = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);', 'assertNotNull(out);']
['reply payload as a string ', ['out']]
camel sample_7948

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ThriftDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.thrift.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.thrift.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1035

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_3008

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['iso iso ', ['new', 'string', 'iso', 'charset', 'forname']]
camel sample_3008

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_3008

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'iso = "ABC\\u00e6".getBytes("iso-8859-1");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {', '}', 'for (byte b : iso) {']
['iso byte ', ['b']]
camel sample_3008

['private void doInsert(Exchange exchange, String dataBaseName, String retentionPolicy) throws InvalidPayloadException {', 'if (!endpoint.isBatch()) {', 'Point p = exchange.getIn().getMandatoryBody(Point.class);', 'try {']
['writing point ', ['p', 'lineprotocol']]
camel sample_11134

['private void doInsert(Exchange exchange, String dataBaseName, String retentionPolicy) throws InvalidPayloadException {', 'if (!endpoint.isBatch()) {', 'Point p = exchange.getIn().getMandatoryBody(Point.class);', 'try {', 'if (!connection.databaseExists(dataBaseName)) {']
['database doesn t exist creating it ', ['databasename']]
camel sample_11134

['if (!connection.databaseExists(dataBaseName)) {', 'connection.createDatabase(dataBaseName);', '}', 'connection.write(dataBaseName, retentionPolicy, p);', '} catch (Exception ex) {', 'exchange.setException(new CamelInfluxDbException(ex));', '}', '} else {', 'BatchPoints batchPoints = exchange.getIn().getMandatoryBody(BatchPoints.class);', 'try {']
['writing batchpoints ', ['batchpoints', 'lineprotocol']]
camel sample_11134

['protected CamelContext createCamelContext() throws Exception {', 'SimpleRegistry registry = new SimpleRegistry();', 'registry.put("testStrategy", new ListAggregationStrategy());', 'CamelContext camel = new DefaultCamelContext(registry);', 'SjmsBatchComponent sjms = new SjmsBatchComponent();', 'sjms.setAsyncStartListener(true);']
['using live connection to existing activemq broker running on ', ['url']]
camel sample_12348

['} else if (message instanceof quickfix.fix42.NewOrderSingle) {', 'onMessage((quickfix.fix42.NewOrderSingle) message, sessionID);', '} else if (message instanceof quickfix.fix43.NewOrderSingle) {', 'onMessage((quickfix.fix43.NewOrderSingle) message, sessionID);', '} else if (message instanceof quickfix.fix44.NewOrderSingle) {', 'onMessage((quickfix.fix44.NewOrderSingle) message, sessionID);', '} else if (message instanceof quickfix.fix50.NewOrderSingle) {', 'onMessage((quickfix.fix50.NewOrderSingle) message, sessionID);', '}', '} catch (Exception e) {']
['error submitting execution task ', ['e']]
camel sample_10660

['private void validateOrder(Message order) throws IncorrectTagValue, FieldNotFound {', 'OrdType ordType = new OrdType(order.getChar(OrdType.FIELD));', 'if (!validOrderTypes.contains(Character.toString(ordType.getValue()))) {']
['order type not in validordertypes setting ', []]
camel sample_10660

['private void validateOrder(Message order) throws IncorrectTagValue, FieldNotFound {', 'OrdType ordType = new OrdType(order.getChar(OrdType.FIELD));', 'if (!validOrderTypes.contains(Character.toString(ordType.getValue()))) {', 'throw new IncorrectTagValue(ordType.getField());', '}', 'if (ordType.getValue() == OrdType.MARKET && marketQuoteProvider == null) {']
['defaultmarketprice setting not specified for market order ', []]
camel sample_10660

['public void testRouteboxUsingDefaultContextAndRouteBuilder() throws Exception {', 'template = new DefaultProducerTemplate(context);', 'template.start();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();']
['beginning test testrouteboxusingdefaultcontextandroutebuilder ', []]
camel sample_14623

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");']
['received book with author and title ', ['book', 'getauthor', 'book', 'gettitle']]
camel sample_14623

['public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");', 'assertEquals("The Adventures of Sherlock Holmes", book.getTitle());']
['completed test testrouteboxusingdefaultcontextandroutebuilder ', []]
camel sample_14623

['public void eventReceived(Object event) {', 'if (eventClass == null || eventClass.isAssignableFrom(event.getClass())) {', 'doEventReceived(event);', '} else {', 'if (log.isDebugEnabled()) {']
['cannot process event as its class type is not assignable with ', ['new', 'object', 'event', 'event', 'getclass', 'getname', 'eventclass', 'getname']]
camel sample_9110

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteQueueComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-queue.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-queue.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1170

['public void notify(EventObject event) throws Exception {']
['event ', ['event']]
camel sample_4688

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwitterSearchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-search.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-search.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_778

['Message message = exchange.getIn();', 'message.setHeader(JCacheConstants.EVENT_TYPE, event.getEventType().name());', 'message.setHeader(JCacheConstants.KEY, event.getKey());', 'message.setBody(event.getValue());', 'if (event.isOldValueAvailable()) {', 'message.setHeader(JCacheConstants.OLD_VALUE, event.getOldValue());', '}', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {']
['error processing event ', ['e']]
camel sample_12562

['public static synchronized int getNextAvailable(int fromPort) {', 'if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {', 'throw new IllegalArgumentException("From port number not in valid range: " + fromPort);', '}', 'for (int i = fromPort; i <= MAX_PORT_NUMBER; i++) {', 'if (available(i)) {']
['getnextavailable ', ['fromport', 'i']]
camel sample_6836

['public void viewAccepted(View view) {', 'if (endpoint.isEnableViewMessages()) {', 'Exchange exchange = endpoint.createExchange(view);', 'try {']
['processing view ', ['view']]
camel sample_16937

['Exchange exchange = endpoint.createExchange(view);', 'try {', 'processor.process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', '}', '});', '} catch (Exception e) {', 'throw new JGroupsException("Error in consumer while dispatching exchange containing view " + view, e);', '}', '} else {']
['option enableviewmessages is set to false skipping processing of the view ', ['view']]
camel sample_16937

['public void receive(Message message) {', 'Exchange exchange = endpoint.createExchange(message);', 'try {']
['processing message ', ['message']]
camel sample_16937

['public void testJettyAsync() throws Exception {', 'getMockEndpoint("mock:result").expectedMessageCount(5);', 'template.asyncRequestBody("jetty:http: template.asyncRequestBody("jetty:http: template.asyncRequestBody("jetty:http: template.asyncRequestBody("jetty:http: template.asyncRequestBody("jetty:http: assertMockEndpointsSatisfied();', 'for (int i = 0; i < 5; i++) {', 'Exchange exchange = getMockEndpoint("mock:result").getReceivedExchanges().get(i);']
['reply ', ['exchange']]
camel sample_10949

['public void onNext(Statistics statistics) {']
['received docker statistics event ', ['statistics']]
camel sample_6565

['public void onNext(Statistics statistics) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(statistics);', 'try {']
['processing exchange ', ['exchange']]
camel sample_6565

['public void onNext(Statistics statistics) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(statistics);', 'try {', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['done processing exchange ', ['exchange']]
camel sample_6565

['public void process(Exchange exchange) throws Exception {', 'NatsConfiguration config = getEndpoint().getNatsConfiguration();', 'String body = exchange.getIn().getMandatoryBody(String.class);']
['publishing to topic ', ['config', 'gettopic']]
camel sample_12974

['protected void doStart() throws Exception {', 'super.doStart();']
['starting nats producer ', []]
camel sample_12974

['protected void doStart() throws Exception {', 'super.doStart();']
['getting nats connection ', []]
camel sample_12974

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping nats producer ', []]
camel sample_12974

['protected void doStop() throws Exception {', 'super.doStop();']
['closing nats connection ', []]
camel sample_12974

['protected void doStop() throws Exception {', 'super.doStop();', 'if (connection != null && !connection.isClosed()) {', 'if (getEndpoint().getNatsConfiguration().isFlushConnection()) {']
['flushing nats connection ', []]
camel sample_12974

['public void testOverloadingTheHandlerOnASingleRoute() throws Exception {', 'RouteBuilder builder = new RouteBuilder() {', 'public void configure() {']
['seda a com mycompany foo seda b ', ['errorhandler', 'loggingerrorhandler', 'to']]
camel sample_3767

['public void configure() {']
['seda a foo bar seda b ', ['errorhandler', 'loggingerrorhandler', 'filter', 'body', 'isinstanceof', 'string', 'class', 'to']]
camel sample_3767

['protected void doStart() throws Exception {', 'super.doStart();', 'this.targetAddress = GenericAddress.parse(this.endpoint.getAddress());']
['targetaddress ', ['targetaddress']]
camel sample_8828

['public void process(final Exchange exchange) throws Exception {', 'Snmp snmp = null;', 'TransportMapping<? extends Address> transport = null;', 'try {']
['starting snmp trap producer on ', ['this', 'endpoint', 'getaddress']]
camel sample_8828

['TransportMapping<? extends Address> transport = null;', 'try {', 'if ("tcp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultTcpTransportMapping();', '} else if ("udp".equals(this.endpoint.getProtocol())) {', 'transport = new DefaultUdpTransportMapping();', '} else {', 'throw new IllegalArgumentException("Unknown protocol: {} " + this.endpoint.getProtocol());', '}', 'snmp = new Snmp(transport);']
['snmptrap getting pdu from body ', []]
camel sample_8828

['snmp = new Snmp(transport);', 'PDU trap = exchange.getIn().getBody(PDU.class);', 'trap.setErrorIndex(0);', 'trap.setErrorStatus(0);', 'trap.setMaxRepetitions(0);', 'if (this.endpoint.getSnmpVersion() == SnmpConstants.version1) {', 'trap.setType(PDU.V1TRAP);', '} else {', 'trap.setType(PDU.TRAP);', '}']
['snmptrap sending ', []]
camel sample_8828

['PDU trap = exchange.getIn().getBody(PDU.class);', 'trap.setErrorIndex(0);', 'trap.setErrorStatus(0);', 'trap.setMaxRepetitions(0);', 'if (this.endpoint.getSnmpVersion() == SnmpConstants.version1) {', 'trap.setType(PDU.V1TRAP);', '} else {', 'trap.setType(PDU.TRAP);', '}', 'snmp.send(trap, this.target);']
['snmptrap sent ', []]
camel sample_8828

['protected void executeComponents(Set<String> starters) throws MojoExecutionException, MojoFailureException {']
['copying all camel component json descriptors ', []]
camel sample_144

['}', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}']
['found component properties files ', ['componentfiles', 'size']]
camel sample_144

['}', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter());', '}']
['found component json files ', ['jsonfiles', 'size']]
camel sample_144

['protected void executeDataFormats(Set<String> starters) throws MojoExecutionException, MojoFailureException {']
['copying all camel dataformat json descriptors ', []]
camel sample_144

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat properties files ', ['dataformatfiles', 'size']]
camel sample_144

['File target = new File(dir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter());', '}']
['found dataformat json files ', ['jsonfiles', 'size']]
camel sample_144

['protected void executeLanguages(Set<String> starters) throws MojoExecutionException, MojoFailureException {']
['copying all camel language json descriptors ', []]
camel sample_144

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language properties files ', ['languagefiles', 'size']]
camel sample_144

['File target = new File(dir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}', '}', '}', '}', 'if (coreDir != null && coreDir.isDirectory()) {', 'File target = new File(coreDir, "target/classes");', 'findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter());', '}']
['found language json files ', ['jsonfiles', 'size']]
camel sample_144

['protected void executeOthers(Set<String> starters) throws MojoExecutionException, MojoFailureException {']
['copying all camel other json descriptors ', []]
camel sample_144

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other properties files ', ['otherfiles', 'size']]
camel sample_144

['if (special || special2) {', 'continue;', '}', 'if (dir.isDirectory() && !"target".equals(dir.getName())) {', 'File target = new File(dir, "target/classes");', 'findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter());', '}', '}', '}', '}']
['found other json files ', ['jsonfiles', 'size']]
camel sample_144

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TestComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.test.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.test.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_847

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LinkedInComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.linkedin.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.linkedin.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1023

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());', 'assertNotNull(e.getProperties());']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());', 'assertNotNull(e.getProperties());', 'assertEquals("Hello!", e.getIn().getBody());']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());', 'assertNotNull(e.getProperties());', 'assertEquals("Hello!", e.getIn().getBody());', 'assertEquals("feta", e.getIn().getHeader("cheese"));']
['enter processor ', []]
camel sample_11572

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());', 'assertNotNull(e.getProperties());', 'assertEquals("Hello!", e.getIn().getBody());', 'assertEquals("feta", e.getIn().getHeader("cheese"));', 'assertEquals("old", e.getProperty("ham"));']
['enter processor ', []]
camel sample_11572

['return new RouteBuilder() {', 'public void configure() {', 'from(String.format("mina2:tcp: public void process(Exchange e) throws InterruptedException {', 'assertNotNull(e.getIn().getBody());', 'assertNotNull(e.getIn().getHeaders());', 'assertNotNull(e.getProperties());', 'assertEquals("Hello!", e.getIn().getBody());', 'assertEquals("feta", e.getIn().getHeader("cheese"));', 'assertEquals("old", e.getProperty("ham"));', 'assertEquals(ExchangePattern.InOut, e.getPattern());']
['enter processor ', []]
camel sample_11572

['if (setException) {', 'e.getOut().setFault(true);', 'e.getOut().setBody(new InterruptedException());', 'e.getOut().setHeader("hello", "nihao");', '} else {', 'e.getOut().setBody("Goodbye!");', 'e.getOut().setHeader("cheese", "cheddar");', '}', 'e.setProperty("salami", "fresh");', 'e.setProperty("Charset", Charset.defaultCharset());']
['exit processor ', []]
camel sample_11572

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<TokenizeLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.tokenize.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.tokenize.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_902

['public void doEventReceived(Object event) {']
['received event ', []]
camel sample_9106

['public void doEventReceived(Object event) {', 'final Exchange exchange = eventBusEndpoint.createExchange(event);']
['processing event ', ['event']]
camel sample_9106

['protected ChangeModel createChangeModel() {', 'if (ServerInstance.this.options.getBufferingPeriod() != null && ServerInstance.this.options.getBufferingPeriod() > 0) {']
['creating buffering change model ms ', ['serverinstance', 'this', 'options', 'getbufferingperiod']]
camel sample_6709

['protected ChangeModel createChangeModel() {', 'if (ServerInstance.this.options.getBufferingPeriod() != null && ServerInstance.this.options.getBufferingPeriod() > 0) {', 'return makeBufferingChangeModel(ServerInstance.this.options.getBufferingPeriod());', '} else {']
['creating instant change model ', []]
camel sample_6709

['protected BackgroundModel createBackgroundModel() {', 'if (ServerInstance.this.options.getBackgroundScanPeriod() > 0) {']
['creating background scan model ms ', ['serverinstance', 'this', 'options', 'getbackgroundscanperiod']]
camel sample_6709

['protected BackgroundModel createBackgroundModel() {', 'if (ServerInstance.this.options.getBackgroundScanPeriod() > 0) {', 'return makeDefaultBackgroundModel();', '}']
['not creating background scan model ', []]
camel sample_6709

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = createAsyncHttpSSLClient();', 'WebSocket websocket = c.prepareGet("wss: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17449

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MongoDbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_451

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastSedaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-seda.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-seda.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_685

['protected void doGetDeployment(Exchange exchange, String operation) throws Exception {', 'Deployment deployment = null;', 'String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {']
['get a specific deployment require specify a deployment name ', []]
camel sample_13324

['protected void doDeleteDeployment(Exchange exchange, String operation) {', 'String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {']
['delete a specific deployment require specify a deployment name ', []]
camel sample_13324

['protected void doDeleteDeployment(Exchange exchange, String operation) {', 'String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {', 'throw new IllegalArgumentException("Delete a specific deployment require specify a deployment name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific deployment require specify a namespace name ', []]
camel sample_13324

['protected void doCreateDeployment(Exchange exchange, String operation) throws Exception {', 'Deployment deployment = null;', 'String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'DeploymentSpec deSpec = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_SPEC, DeploymentSpec.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {']
['create a specific deployment require specify a deployment name ', []]
camel sample_13324

['protected void doCreateDeployment(Exchange exchange, String operation) throws Exception {', 'Deployment deployment = null;', 'String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'DeploymentSpec deSpec = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_SPEC, DeploymentSpec.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {', 'throw new IllegalArgumentException("Create a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific pod require specify a namespace name ', []]
camel sample_13324

['String deploymentName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'DeploymentSpec deSpec = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_SPEC, DeploymentSpec.class);', 'if (ObjectHelper.isEmpty(deploymentName)) {', 'throw new IllegalArgumentException("Create a specific pod require specify a pod name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException("Create a specific pod require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(deSpec)) {']
['create a specific deployment require specify a deployment spec bean ', []]
camel sample_13324

['public String greetMe(String me) {']
['executing operation greetme ', []]
camel sample_6027

['public String greetMe(String me) {']
['executing operation greetme ', []]
camel sample_6027

['public String greetMe(String me) {']
['message received ', ['me']]
camel sample_6027

['public void greetMeOneWay(String me) {']
['executing operation greetmeoneway ', []]
camel sample_6027

['public void greetMeOneWay(String me) {']
['executing operation greetmeoneway ', []]
camel sample_6027

['public void greetMeOneWay(String me) {']
['hello there ', ['me']]
camel sample_6027

['public String sayHi() {']
['executing operation sayhi ', []]
camel sample_6027

['public String sayHi() {']
['executing operation sayhi ', []]
camel sample_6027

['public void pingMe(String messageIn) throws PingMeFault {', 'FaultDetail faultDetail = new FaultDetail();', 'faultDetail.setMajor((short)2);', 'faultDetail.setMinor((short)1);', 'LOG.info("Executing operation pingMe, throwing PingMeFault exception, message = " + messageIn);']
['executing operation pingme throwing pingmefault exception ', []]
camel sample_6027

['private EhcacheManager createCacheManager(EhcacheConfiguration configuration) throws IOException {', 'ObjectHelper.notNull(configuration, "Camel Ehcache configuration");', 'if (configuration.hasCacheManager()) {']
['ehcachemanager configured with supplied cachemanager ', []]
camel sample_9628

['private EhcacheManager createCacheManager(EhcacheConfiguration configuration) throws IOException {', 'ObjectHelper.notNull(configuration, "Camel Ehcache configuration");', 'if (configuration.hasCacheManager()) {', 'return managers.computeIfAbsent( configuration.getCacheManager(), m -> new EhcacheManager( CacheManager.class.cast(m), false, configuration) );', '}', 'if (configuration.hasCacheManagerConfiguration()) {']
['ehcachemanager configured with supplied cachemanagerconfiguration ', []]
camel sample_9628

['if (configuration.hasCacheManager()) {', 'return managers.computeIfAbsent( configuration.getCacheManager(), m -> new EhcacheManager( CacheManager.class.cast(m), false, configuration) );', '}', 'if (configuration.hasCacheManagerConfiguration()) {', 'return managers.computeIfAbsent( configuration.getCacheManagerConfiguration(), c -> new EhcacheManager( CacheManagerBuilder.newCacheManager(Configuration.class.cast(c)), true, configuration ) );', '}', 'if (configuration.hasConfigurationUri()) {', 'String configurationUri = configuration.getConfigurationUri();', 'ClassResolver classResolver = getCamelContext().getClassResolver();', 'URL url = ResourceHelper.resolveMandatoryResourceAsUrl(classResolver, configurationUri);']
['ehcachemanager configured with supplied uri ', ['url']]
camel sample_9628

['}', 'if (configuration.hasCacheManagerConfiguration()) {', 'return managers.computeIfAbsent( configuration.getCacheManagerConfiguration(), c -> new EhcacheManager( CacheManagerBuilder.newCacheManager(Configuration.class.cast(c)), true, configuration ) );', '}', 'if (configuration.hasConfigurationUri()) {', 'String configurationUri = configuration.getConfigurationUri();', 'ClassResolver classResolver = getCamelContext().getClassResolver();', 'URL url = ResourceHelper.resolveMandatoryResourceAsUrl(classResolver, configurationUri);', 'return managers.computeIfAbsent( url, u -> new EhcacheManager( CacheManagerBuilder.newCacheManager(new XmlConfiguration(URL.class.cast(u))), true, configuration ) );', '}']
['ehcachemanager configured with default builder ', []]
camel sample_9628

['public void process(Exchange exchange) throws Exception {', 'Regions regions = getEndpoint().getDigitalOceanClient().getAvailableRegions(configuration.getPage());']
['all regions page ', ['regions', 'getregions', 'configuration', 'getpage']]
camel sample_8890

['public void handleEvent(Event event) {', 'Exchange exchange = endpoint.createExchange();', 'exchange.getIn().setBody(event);']
['eventadmin is firing ', ['endpoint', 'gettopic']]
camel sample_12866

['public void testGet() throws Exception {', 'final com.google.api.services.calendar.model.Setting result = requestBody("direct: assertNotNull("get result", result);']
['get ', ['result']]
camel sample_11749

['public void testList() throws Exception {', 'final com.google.api.services.calendar.model.Settings result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_11749

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .inOut("activemq:queue:foo?replyTo=queue:bar&requestTimeout=2000") .to("mock:result");', 'from("activemq:queue:foo") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if ("World".equals(body)) {']
['sleeping for sec to force a timeout ', []]
camel sample_6861

['String name = exchange.getIn().getHeader(OpenShiftConstants.APPLICATION, getEndpoint().getApplication(), String.class);', 'if (name == null) {', 'throw new CamelExchangeException("Application not specified", exchange);', '}', 'IApplication app = domain.getApplicationByName(name);', 'if (app == null) {', 'throw new CamelExchangeException("Application with id " + name + " not found.", exchange);', '} else {', 'ApplicationScale scale = app.getApplicationScale();', 'if (scale.getValue().equals(ApplicationScale.NO_SCALE.getValue())) {']
['scaling on application with id is not enabled ', ['name']]
camel sample_12020

['if (oldExchange == null) {', 'return newExchange;', '}', 'String body = oldExchange.getIn().getBody(String.class);', 'if (body != null) {', 'Message newIn = newExchange.getIn();', 'String newBody = newIn.getBody(String.class);', 'if (newBody != null) {', 'body += " " + newBody;', '}']
['invoked my strategy with result ', ['body']]
camel sample_15835

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<QualifiedContextComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.context.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.context.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1074

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesNodesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-nodes.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-nodes.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_543

['public static SocketFactory getDefault() {']
['camel is using dummysslsocketfactory as sslsocketfactory only to be used for testing purpose ', []]
camel sample_11876

['protected int poll() throws Exception {', 'GetRecordsResult result;', 'try {', 'GetRecordsRequest req = new GetRecordsRequest() .withShardIterator(shardIteratorHandler.getShardIterator(null)) .withLimit(getEndpoint().getConfiguration().getMaxResultsPerRequest());', 'result = getClient().getRecords(req);', '} catch (ExpiredIteratorException e) {']
['expired shard iterator attempting to resume from ', ['lastseensequencenumber', 'e']]
camel sample_8740

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int processedExchanges = 0;', 'while (!exchanges.isEmpty()) {', 'final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());']
['processing exchange started ', ['exchange']]
camel sample_8740

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int processedExchanges = 0;', 'while (!exchanges.isEmpty()) {', 'final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['processing exchange done ', ['exchange']]
camel sample_8740

['public Instant deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {', 'try {', 'Long unixTimestamp = Long.parseLong(jsonParser.getText());', 'return Instant.ofEpochSecond(unixTimestamp);', '} catch (Exception e) {']
['unable to deserialize the unix timestamp ', ['jsonparser', 'gettext', 'e']]
camel sample_11933

['public void process(Exchange exchange) throws Exception {', 'CmisObject cmisObject = createNode(exchange);']
['created node with id ', ['cmisobject', 'getid']]
camel sample_9151

['private Folder storeFolder(Folder parentFolder, Map<String, Object> cmisProperties) throws Exception {', 'if (!cmisProperties.containsKey(PropertyIds.OBJECT_TYPE_ID)) {', 'cmisProperties.put(PropertyIds.OBJECT_TYPE_ID, CamelCMISConstants.CMIS_FOLDER);', '}']
['creating folder with properties ', ['cmisproperties']]
camel sample_9151

['private Document storeDocument(Folder parentFolder, Map<String, Object> cmisProperties, ContentStream contentStream) throws Exception {', 'if (!cmisProperties.containsKey(PropertyIds.OBJECT_TYPE_ID)) {', 'cmisProperties.put(PropertyIds.OBJECT_TYPE_ID, CamelCMISConstants.CMIS_DOCUMENT);', '}', 'VersioningState versioningState = VersioningState.NONE;', 'if (getSessionFacade().isObjectTypeVersionable((String) cmisProperties.get(PropertyIds.OBJECT_TYPE_ID))) {', 'versioningState = VersioningState.MAJOR;', '}']
['creating document with properties ', ['cmisproperties']]
camel sample_9151

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MQComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-mq.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-mq.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1131

['protected List<Status> doDirect() throws TwitterException {']
['dodirect gethometimeline ', []]
camel sample_14232

['public void start(BundleContext context) throws Exception {', 'Activator.context = context;']
['camel script activator starting ', []]
camel sample_11227

['public void start(BundleContext context) throws Exception {', 'Activator.context = context;', 'tracker = new BundleTracker(context, Bundle.ACTIVE, this);', 'tracker.open();', 'context.addServiceListener(this, "(&(resolver=default)(objectClass=org.apache.camel.spi.LanguageResolver))");']
['camel script activator started ', []]
camel sample_11227

['public void stop(BundleContext context) throws Exception {']
['camel script activator stopping ', []]
camel sample_11227

['public void stop(BundleContext context) throws Exception {', 'tracker.close();', 'context.removeServiceListener(this);', 'if (registration != null) {', 'registration.unregister();', '}']
['camel script activator stopped ', []]
camel sample_11227

['public void removedBundle(Bundle bundle, BundleEvent event, Object object) {']
['bundle stopped ', ['bundle', 'getsymbolicname']]
camel sample_11227

['registration.unregister();', 'registration = null;', '}', 'ref = references.iterator().next();', 'LanguageResolver resolver = context.getService(ref);', 'Dictionary props = new Hashtable();', 'props.put("language", getAvailableScriptNames());', 'registration = context.registerService(LanguageResolver.class, resolver, props);', '}', '} catch (InvalidSyntaxException e) {']
['invalid syntax for languageresolver service reference filter ', []]
camel sample_11227

['public static ScriptEngine resolveScriptEngine(String scriptEngineName) throws InvalidSyntaxException {', 'ServiceReference<?>[] refs = context.getServiceReferences(ScriptEngineResolver.class.getName(), null);', 'if (refs == null) {']
['no osgi script engine resolvers available ', []]
camel sample_11227

['public static ScriptEngine resolveScriptEngine(String scriptEngineName) throws InvalidSyntaxException {', 'ServiceReference<?>[] refs = context.getServiceReferences(ScriptEngineResolver.class.getName(), null);', 'if (refs == null) {', 'return null;', '}']
['found osgi scriptengineresolver services ', ['refs', 'length']]
camel sample_11227

['public static ScriptEngine resolveScriptEngine(String scriptEngineName) throws InvalidSyntaxException {', 'ServiceReference<?>[] refs = context.getServiceReferences(ScriptEngineResolver.class.getName(), null);', 'if (refs == null) {', 'return null;', '}', 'for (ServiceReference<?> ref : refs) {', 'ScriptEngineResolver resolver = (ScriptEngineResolver) context.getService(ref);', 'ScriptEngine engine = resolver.resolveScriptEngine(scriptEngineName);', 'context.ungetService(ref);']
['osgi resolver produced engine ', ['resolver', 'scriptenginename', 'engine']]
camel sample_11227

['protected void registerScriptEngines(Bundle bundle, List<BundleScriptEngineResolver> resolvers) {', 'try {', 'for (Enumeration<?> e = bundle.adapt(BundleWiring.class).getClassLoader().getResources(META_INF_SERVICES_DIR + "/" + SCRIPT_ENGINE_SERVICE_FILE); e != null && e.hasMoreElements();) {', 'URL configURL = (URL) e.nextElement();']
['found scriptenginefactory in bundle ', ['bundle', 'getsymbolicname']]
camel sample_11227

['protected void registerScriptEngines(Bundle bundle, List<BundleScriptEngineResolver> resolvers) {', 'try {', 'for (Enumeration<?> e = bundle.adapt(BundleWiring.class).getClassLoader().getResources(META_INF_SERVICES_DIR + "/" + SCRIPT_ENGINE_SERVICE_FILE); e != null && e.hasMoreElements();) {', 'URL configURL = (URL) e.nextElement();', 'resolvers.add(new BundleScriptEngineResolver(bundle, configURL));', '}', '} catch (IOException e) {']
['error loading script engine factory ', ['e']]
camel sample_11227

['break;', '}', '}', 'in.close();', 'Class<?> cls = bundle.loadClass(className);', 'if (!ScriptEngineFactory.class.isAssignableFrom(cls)) {', 'return null;', '}', 'return (ScriptEngineFactory) cls.newInstance();', '} catch (Exception e) {']
['cannot create the scriptenginefactory ', ['e', 'getclass', 'getname', 'e']]
camel sample_11227

['for (String test : names) {', 'if (test.equals(name)) {', 'ClassLoader old = Thread.currentThread().getContextClassLoader();', 'ScriptEngine engine;', 'try {', 'Thread.currentThread().setContextClassLoader(factory.getClass().getClassLoader());', 'engine = factory.getScriptEngine();', '} finally {', 'Thread.currentThread().setContextClassLoader(old);', '}']
['resolved scriptenginefactory for expected name ', ['engine', 'name']]
camel sample_11227

['ScriptEngine engine;', 'try {', 'Thread.currentThread().setContextClassLoader(factory.getClass().getClassLoader());', 'engine = factory.getScriptEngine();', '} finally {', 'Thread.currentThread().setContextClassLoader(old);', '}', 'return engine;', '}', '}']
['scriptenginefactory does not match expected name ', ['factory', 'getenginename', 'name']]
camel sample_11227

['engine = factory.getScriptEngine();', '} finally {', 'Thread.currentThread().setContextClassLoader(old);', '}', 'return engine;', '}', '}', 'return null;', '}', '} catch (Exception e) {']
['cannot create scriptenginefactory ', ['e', 'getclass', 'getname', 'e']]
camel sample_11227

['private void fetchSpecifiedDescriptions(final String[] includes, final String includePattern, final String[] excludes, final String excludePattern, final Log log) throws MojoExecutionException {', 'final ObjectMapper mapper = JsonUtils.createObjectMapper();', 'final Set<String> objectNames = new TreeSet<>();', 'final SyncResponseCallback callback = new SyncResponseCallback();', 'try {']
['getting salesforce objects ', []]
camel sample_14926

['final GlobalObjects globalObjects = mapper.readValue(callback.getResponse(), GlobalObjects.class);', 'for (final SObject sObject : globalObjects.getSobjects()) {', 'objectNames.add(sObject.getName());', '}', '} catch (final Exception e) {', 'throw new MojoExecutionException("Error getting global Objects: " + e.getMessage(), e);', '}', 'if (includes != null && includes.length > 0 || excludes != null && excludes.length > 0 || ObjectHelper.isNotEmpty(includePattern) || ObjectHelper.isNotEmpty(excludePattern)) {', 'filterObjectNames(objectNames, includes, includePattern, excludes, excludePattern, log);', '} else {']
['generating java classes for all s objects this may take a while ', ['string', 'format', 'objectnames', 'size']]
camel sample_14926

['for (final SObject sObject : globalObjects.getSobjects()) {', 'objectNames.add(sObject.getName());', '}', '} catch (final Exception e) {', 'throw new MojoExecutionException("Error getting global Objects: " + e.getMessage(), e);', '}', 'if (includes != null && includes.length > 0 || excludes != null && excludes.length > 0 || ObjectHelper.isNotEmpty(includePattern) || ObjectHelper.isNotEmpty(excludePattern)) {', 'filterObjectNames(objectNames, includes, includePattern, excludes, excludePattern, log);', '} else {', '}']
['retrieving object descriptions ', []]
camel sample_14926

['private static void filterObjectNames(final Set<String> objectNames, final String[] includes, final String includePattern, final String[] excludes, final String excludePattern, final Log log) throws MojoExecutionException {']
['looking for matching object names ', []]
camel sample_14926

['excPattern = Defaults.MATCH_NOTHING_PATTERN;', '}', 'final Set<String> acceptedNames = new HashSet<>();', 'for (final String name : objectNames) {', 'if ((includedNames.contains(name) || incPattern.matcher(name).matches()) && !excludedNames.contains(name) && !excPattern.matcher(name).matches()) {', 'acceptedNames.add(name);', '}', '}', 'objectNames.clear();', 'objectNames.addAll(acceptedNames);']
['found s matching objects ', ['string', 'format', 'objectnames', 'size']]
camel sample_14926

['public void testGuice() throws Exception {', 'Injector injector = Guice.createInjector(new CamelModuleWithMatchingRoutes());', 'Cheese cheese = injector.getInstance(Cheese.class);', 'assertNotNull("Should have cheese", cheese);', 'assertNotNull("Should have camelContext", cheese.getCamelContext());']
['got ', ['cheese']]
camel sample_8412

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteEmptyUriTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_187

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteEmptyUriTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, false);', 'Assert.assertEquals(1, list.size());', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_187

['public void processEvent(ClientCacheEntryCreatedEvent<Object> event) {']
['received clientevent ', ['event']]
camel sample_13975

['public void processEvent(ClientCacheEntryModifiedEvent<Object> event) {']
['received clientevent ', ['event']]
camel sample_13975

['public void processEvent(ClientCacheEntryRemovedEvent<Object> event) {']
['received clientevent ', ['event']]
camel sample_13975

['public void processEvent(ClientCacheFailoverEvent event) {']
['received clientevent ', ['event']]
camel sample_13975

['public void processEvent(ClientCacheEntryExpiredEvent<Object> event) {']
['received clientevent ', ['event']]
camel sample_13975

['public void process(final Exchange exchange) throws Exception {', 'Thread thread = new Thread() {', 'public void run() {', 'try {']
['stopping camel ', []]
camel sample_3874

['public void process(final Exchange exchange) throws Exception {', 'Thread thread = new Thread() {', 'public void run() {', 'try {', 'exchange.getContext().stop();']
['stopped camel complete ', []]
camel sample_3874

['public void notify(EventObject event) throws Exception {', 'if (event instanceof CamelContextStartedEvent) {', 'CamelContext context = ((CamelContextStartedEvent) event).getContext();', 'registerCamelContext(context);', '} else if (event instanceof CamelContextStoppingEvent) {', 'CamelContext context = ((CamelContextStoppingEvent) event).getContext();', 'ServiceRegistration<?> reg = registrations.remove(context);', 'if (reg != null) {', 'if (log.isDebugEnabled()) {']
['unregistering camelcontext from osgi registry ', ['context', 'getname']]
camel sample_13076

['registerCamelContext(context);', '} else if (event instanceof CamelContextStoppingEvent) {', 'CamelContext context = ((CamelContextStoppingEvent) event).getContext();', 'ServiceRegistration<?> reg = registrations.remove(context);', 'if (reg != null) {', 'if (log.isDebugEnabled()) {', '}', 'try {', 'reg.unregister();', '} catch (Exception e) {']
['error unregistering camelcontext from osgi registry this exception will be ignored ', ['context', 'getname', 'e']]
camel sample_13076

['if (!lookupCamelContext(bundleContext, symbolicName, name)) {', 'Version bundleVersion = getBundleVersion(bundleContext.getBundle());', 'Dictionary<String, Object > props = new Hashtable<String, Object>();', 'props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, symbolicName);', 'props.put(CONTEXT_VERSION_PROPERTY, bundleVersion);', 'props.put(CONTEXT_NAME_PROPERTY, name);', 'if (managementName != null) {', 'props.put(CONTEXT_MANAGEMENT_NAME_PROPERTY, managementName);', '}', 'if (log.isDebugEnabled()) {']
['registering camelcontext of in osgi registry ', ['name']]
camel sample_13076

['public static void stopService(Object value) throws Exception {', 'if (isStopped(value)) {']
['service already stopped ', ['value']]
camel sample_4348

['public static void stopService(Object value) throws Exception {', 'if (isStopped(value)) {', 'return;', '}', 'if (value instanceof Service) {', 'Service service = (Service)value;']
['stopping service ', ['value']]
camel sample_4348

['public static void stopServices(Collection<?> services) throws Exception {', 'if (services == null) {', 'return;', '}', 'Exception firstException = null;', 'for (Object value : services) {', 'try {', 'stopService(value);', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['caught exception stopping service ', ['value', 'e']]
camel sample_4348

['public static void stopAndShutdownService(Object value) throws Exception {', 'stopService(value);', 'if (value instanceof ShutdownableService) {', 'ShutdownableService service = (ShutdownableService)value;']
['shutting down service ', ['value']]
camel sample_4348

['public static void stopAndShutdownServices(Collection<?> services) throws Exception {', 'if (services == null) {', 'return;', '}', 'Exception firstException = null;', 'for (Object value : services) {', 'try {', 'stopService(value);', 'if (value instanceof ShutdownableService) {', 'ShutdownableService service = (ShutdownableService)value;']
['shutting down service ', ['service']]
camel sample_4348

['Exception firstException = null;', 'for (Object value : services) {', 'try {', 'stopService(value);', 'if (value instanceof ShutdownableService) {', 'ShutdownableService service = (ShutdownableService)value;', 'service.shutdown();', '}', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['caught exception shutting down service ', ['value', 'e']]
camel sample_4348

['return;', '}', 'Exception firstException = null;', 'for (Object value : services) {', 'if (value instanceof Service) {', 'Service service = (Service)value;', 'try {', 'resumeService(service);', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['caught exception resuming service ', ['service', 'e']]
camel sample_4348

['public static boolean resumeService(Object service) throws Exception {', 'if (service instanceof Suspendable && service instanceof SuspendableService) {', 'SuspendableService ss = (SuspendableService) service;', 'if (ss.isSuspended()) {']
['resuming service ', ['service']]
camel sample_4348

['return;', '}', 'Exception firstException = null;', 'for (Object value : services) {', 'if (value instanceof Service) {', 'Service service = (Service)value;', 'try {', 'suspendService(service);', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['caught exception suspending service ', ['service', 'e']]
camel sample_4348

['public static boolean suspendService(Object service) throws Exception {', 'if (service instanceof Suspendable && service instanceof SuspendableService) {', 'SuspendableService ss = (SuspendableService) service;', 'if (!ss.isSuspended()) {']
['suspending service ', ['service']]
camel sample_4348

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Comment comment = (Comment) in.getBody();']
['got comment from user ', ['comment', 'getid', 'comment', 'getbody', 'comment', 'getuser', 'getlogin']]
camel sample_14249

['public Facebook getFacebook() throws FacebookException {', 'if (facebook == null) {', 'final Configuration configuration = getConfiguration();', 'FacebookFactory factory = new FacebookFactory(configuration);', 'if (this.oAuthAccessToken == null) {', 'facebook = factory.getInstance(new OAuthAuthorization(configuration));', 'facebook.getOAuthAppAccessToken();']
['login with app id and secret access to some apis is restricted ', []]
camel sample_9595

['public Facebook getFacebook() throws FacebookException {', 'if (facebook == null) {', 'final Configuration configuration = getConfiguration();', 'FacebookFactory factory = new FacebookFactory(configuration);', 'if (this.oAuthAccessToken == null) {', 'facebook = factory.getInstance(new OAuthAuthorization(configuration));', 'facebook.getOAuthAppAccessToken();', '} else {', 'facebook = factory.getInstance();', 'facebook.getOAuthAccessToken();']
['login with app id secret and token all apis accessible ', []]
camel sample_9595

['protected void doStart() throws Exception {']
['starting producer ', []]
camel sample_8384

['protected void doStart() throws Exception {', 'kieSession = runtimeEngine.getKieSession();', 'taskService = runtimeEngine.getTaskService();', 'super.doStart();']
['started producer ', []]
camel sample_8384

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<WeatherComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.weather.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.weather.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_492

['exchange.getIn().setBody(entry.getValue());', '}', '} else {', 'StringBuilder pathsExtracted = new StringBuilder();', 'for (Map.Entry<String, Object> entry : map.entrySet()) {', 'pathsExtracted.append(entry.getKey()).append("\\n");', '}', 'exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString());', 'exchange.getIn().setBody(map);', '}']
['downloaded ', ['result', 'tostring']]
camel sample_8500

['public boolean acquireExclusiveReadLock(GenericFileOperations<ChannelSftp.LsEntry> operations, GenericFile<ChannelSftp.LsEntry> file, Exchange exchange) throws Exception {', 'boolean exclusive = false;']
['waiting for exclusive read lock to file ', ['file']]
camel sample_15399

['CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file);', 'return false;', '}', '}', 'long newLastModified = 0;', 'long newLength = 0;', 'List<ChannelSftp.LsEntry> files;', 'if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {']
['using fast exists to update file information in home directory ', []]
camel sample_15399

['}', '}', 'long newLastModified = 0;', 'long newLength = 0;', 'List<ChannelSftp.LsEntry> files;', 'if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {']
['using fast exists to update file information for ', ['path']]
camel sample_15399

['if (fastExistsCheck) {', 'String path = file.getAbsoluteFilePath();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {']
['using full directory listing in home directory to update file information consider enabling fastexistscheck option ', []]
camel sample_15399

['if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {']
['using full directory listing to update file information for consider enabling fastexistscheck option ', ['path']]
camel sample_15399

['files = operations.listFiles(path);', '}', '} else {', 'String path = file.getParent();', 'if (path.equals("/") || path.equals("\\\\")) {', 'files = operations.listFiles();', '} else {', 'files = operations.listFiles(path);', '}', '}']
['list files found files ', ['file', 'getabsolutefilepath', 'files', 'size']]
camel sample_15399

['if (fastExistsCheck) {', 'match = f.getFilename().equals(file.getAbsoluteFilePath()) || f.getFilename().equals(file.getFileNameOnly());', '} else {', 'match = f.getFilename().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLastModified = f.getAttrs().getMTime() * 1000L;', 'newLength = f.getAttrs().getSize();', '}', '}']
['previous last modified new last modified ', ['lastmodified', 'newlastmodified']]
camel sample_15399

['if (fastExistsCheck) {', 'match = f.getFilename().equals(file.getAbsoluteFilePath()) || f.getFilename().equals(file.getFileNameOnly());', '} else {', 'match = f.getFilename().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLastModified = f.getAttrs().getMTime() * 1000L;', 'newLength = f.getAttrs().getSize();', '}', '}']
['previous length new length ', ['length', 'newlength']]
camel sample_15399

['match = f.getFilename().equals(file.getAbsoluteFilePath()) || f.getFilename().equals(file.getFileNameOnly());', '} else {', 'match = f.getFilename().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLastModified = f.getAttrs().getMTime() * 1000L;', 'newLength = f.getAttrs().getSize();', '}', '}', 'long newOlderThan = startTime + watch.taken() - minAge;']
['new older than threshold ', ['newolderthan']]
camel sample_15399

['} else {', 'match = f.getFilename().equals(file.getFileNameOnly());', '}', 'if (match) {', 'newLastModified = f.getAttrs().getMTime() * 1000L;', 'newLength = f.getAttrs().getSize();', '}', '}', 'long newOlderThan = startTime + watch.taken() - minAge;', 'if (newLength >= minLength && ((minAge == 0 && newLastModified == lastModified && newLength == length) || (minAge != 0 && newLastModified < newOlderThan))) {']
['read lock acquired ', []]
camel sample_15399

['private boolean sleep() {']
['exclusive read lock not granted sleeping for millis ', ['checkinterval']]
camel sample_15399

['private boolean sleep() {', 'try {', 'Thread.sleep(checkInterval);', 'return false;', '} catch (InterruptedException e) {']
['sleep interrupted while waiting for exclusive read lock so breaking out ', []]
camel sample_15399

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyFieldRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_216

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyFieldRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_216

['protected Restlet createRestlet() {', 'return new Restlet() {', 'public void handle(Request request, Response response) {', 'super.handle(request, response);']
['consumer restlet handle request method ', ['request', 'getmethod']]
camel sample_9311

['public void testGetComment() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.comment_id", null);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Comment result = requestBodyAndHeaders("direct: assertNotNull("getComment result", result);']
['getcomment ', ['result']]
camel sample_8853

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KeystoneComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-keystone.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-keystone.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1234

['public void setReplyTo(String replyTo) {']
['replyto destination ', ['replyto']]
camel sample_14137

['public String getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {']
['waiting for replyto to be set ', []]
camel sample_14137

['public String getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {', 'boolean done = replyToLatch.await(replyToTimeout, TimeUnit.MILLISECONDS);', 'if (!done) {']
['replyto destination was not set and timeout occurred ', []]
camel sample_14137

['public String getReplyTo() {', 'if (replyTo != null) {', 'return replyTo;', '}', 'try {', 'boolean done = replyToLatch.await(replyToTimeout, TimeUnit.MILLISECONDS);', 'if (!done) {', '} else {']
['waiting for replyto to be set done ', []]
camel sample_14137

['protected abstract ReplyHandler createReplyHandler(ReplyManager replyManager, Exchange exchange, AsyncCallback callback, String originalCorrelationId, String correlationId, long requestTimeout);', 'public void cancelCorrelationId(String correlationId) {', 'ReplyHandler handler = correlation.get(correlationId);', 'if (handler != null) {']
['cancelling correlationid ', ['correlationid']]
camel sample_14137

['public void onMessage(AMQP.BasicProperties properties, byte[] message) {', 'String correlationID = properties.getCorrelationId();', 'if (correlationID == null) {']
['ignoring message with no correlationid ', ['message']]
camel sample_14137

['public void onMessage(AMQP.BasicProperties properties, byte[] message) {', 'String correlationID = properties.getCorrelationId();', 'if (correlationID == null) {', 'return;', '}']
['received reply message with correlationid ', ['correlationid', 'message']]
camel sample_14137

['public void processReply(ReplyHolder holder) {', 'if (holder != null && isRunAllowed()) {', 'try {', 'Exchange exchange = holder.getExchange();', 'boolean timeout = holder.isTimeout();', 'if (timeout) {', 'if (log.isWarnEnabled()) {']
['timeout occurred after millis waiting for reply message with correlationid on destination setting exchangetimedoutexception on and continue routing ', ['holder', 'getrequesttimeout', 'holder', 'getcorrelationid', 'replyto', 'exchangehelper', 'logids', 'exchange']]
camel sample_14137

['protected abstract void handleReplyMessage(String correlationID, AMQP.BasicProperties properties, byte[] message);', 'protected abstract Connection createListenerContainer() throws Exception;', 'protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {', 'if (log.isWarnEnabled()) {']
['early reply received with correlationid ', ['correlationid', 'message']]
camel sample_14137

['protected abstract void handleReplyMessage(String correlationID, AMQP.BasicProperties properties, byte[] message);', 'protected abstract Connection createListenerContainer() throws Exception;', 'protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {', 'if (log.isWarnEnabled()) {', '}', 'ReplyHandler answer = null;', 'boolean done = false;', 'int counter = 0;', 'while (!done && counter++ < 50) {']
['early reply not found handler at attempt waiting a bit longer ', ['counter']]
camel sample_14137

['int counter = 0;', 'while (!done && counter++ < 50) {', 'try {', 'Thread.sleep(100);', '} catch (InterruptedException e) {', '}', 'answer = correlation.get(correlationID);', 'done = answer != null;', 'if (answer != null) {', 'if (log.isTraceEnabled()) {']
['early reply with correlationid has been matched after attempts and can be processed using handler ', ['correlationid', 'counter', 'answer']]
camel sample_14137

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(executorService, "executorService", this);', 'ObjectHelper.notNull(endpoint, "endpoint", this);']
['using timeout checker interval with millis ', ['endpoint', 'getrequesttimeoutcheckerinterval']]
camel sample_14137

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(executorService, "executorService", this);', 'ObjectHelper.notNull(endpoint, "endpoint", this);', 'correlation = new CorrelationTimeoutMap(executorService, endpoint.getRequestTimeoutCheckerInterval());', 'ServiceHelper.startService(correlation);', 'listenerContainer = createListenerContainer();']
['using executor ', ['executorservice']]
camel sample_14137

['protected void doStop() throws Exception {', 'ServiceHelper.stopService(correlation);', 'if (listenerContainer != null) {']
['closing connection with timeout ms ', ['listenercontainer', 'close', 'timeout']]
camel sample_14137

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes replication controllers consumer ', []]
camel sample_13308

['if (executorService == null) {', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "DefaultHealthCheckService");', '}', 'if (future != null) {', 'future.cancel(true);', '}', 'if (registry == null) {', 'registry = camelContext.getHealthCheckRegistry();', '}', 'if (ObjectHelper.isNotEmpty(registry) && ObjectHelper.isEmpty(future)) {']
['schedule health checks to be executed every d s ', ['checkinterval', 'checkintervalunit', 'name']]
camel sample_4036

['future.cancel(true);', '}', 'if (registry == null) {', 'registry = camelContext.getHealthCheckRegistry();', '}', 'if (ObjectHelper.isNotEmpty(registry) && ObjectHelper.isEmpty(future)) {', 'future = executorService.scheduleAtFixedRate( () -> {', 'if (!isRunAllowed()) {', 'return;', '}']
['invoke health checks scheduled ', []]
camel sample_4036

['private HealthCheck.Result invoke(HealthCheck check, Map<String, Object> options) {', 'return LockHelper.supplyWithWriteLock( lock, () -> {']
['invoke health check ', ['check', 'getid']]
camel sample_4036

['public void testSharedThreadPool() throws Exception {', 'int delta = Thread.activeCount() - before;']
['created threads ', ['delta']]
camel sample_10174

['public XsltEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {', 'String newUri = uri.replace(resourceUri, newResourceUri);']
['getting endpoint with uri ', ['newuri']]
camel sample_4935

['protected void loadResource(String resourceUri) throws TransformerException, IOException {']
['loading schema resource ', ['this', 'resourceuri']]
camel sample_4935

['protected void doStart() throws Exception {', 'super.doStart();', 'final CamelContext ctx = getCamelContext();', 'final ClassResolver resolver = ctx.getClassResolver();', 'final Injector injector = ctx.getInjector();']
['using schema resource ', ['this', 'resourceuri']]
camel sample_4935

['xslt.setConverter(converter);', '}', 'boolean useSaxon = false;', 'if (transformerFactoryClass == null && (saxon || saxonExtensionFunctions != null)) {', 'useSaxon = true;', 'transformerFactoryClass = SAXON_TRANSFORMER_FACTORY_CLASS_NAME;', '}', 'TransformerFactory factory = transformerFactory;', 'if (factory == null && transformerFactoryClass != null) {', 'Class<TransformerFactory> factoryClass = resolver.resolveMandatoryClass(transformerFactoryClass, TransformerFactory.class, XsltComponent.class.getClassLoader());']
['using transformerfactoryclass ', ['factoryclass']]
camel sample_4935

['if (factory == null && transformerFactoryClass != null) {', 'Class<TransformerFactory> factoryClass = resolver.resolveMandatoryClass(transformerFactoryClass, TransformerFactory.class, XsltComponent.class.getClassLoader());', 'factory = injector.newInstance(factoryClass);', 'if (useSaxon) {', 'XsltHelper.registerSaxonConfiguration(ctx, factoryClass, factory, saxonConfiguration);', 'XsltHelper.registerSaxonConfigurationProperties(ctx, factoryClass, factory, saxonConfigurationProperties);', 'XsltHelper.registerSaxonExtensionFunctions(ctx, factoryClass, factory, saxonExtensionFunctions);', '}', '}', 'if (factory != null) {']
['using transformerfactory ', ['factory']]
camel sample_4935

['public void testCalculateMethodInvocation() throws Exception {']
['thrift calculate method sync test start ', []]
camel sample_13021

['public void testAddMethodInvocation() throws Exception {']
['thrift add method primitive parameters only sync test start ', []]
camel sample_13021

['public void testCalculateWithException() throws Exception {']
['thrift calculate method with business exception sync test start ', []]
camel sample_13021

['public void testVoidMethodInvocation() throws Exception {']
['thrift method with empty parameters and void output sync test start ', []]
camel sample_13021

['public void testOneWayMethodInvocation() throws Exception {']
['thrift one way method sync test start ', []]
camel sample_13021

['public void testAllTypesMethodInvocation() throws Exception {']
['thrift method with all possile types sync test start ', []]
camel sample_13021

['public void testEchoMethodInvocation() throws Exception {']
['thrift echo method return output as pass input parameter sync test start ', []]
camel sample_13021

['protected JndiRegistry createRegistry() throws Exception {', 'JndiRegistry registry = new JndiRegistry(createJndiContext());', 'registry.bind("A", new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['a headers ', ['exchange', 'getin', 'getheaders']]
camel sample_3823

['protected JndiRegistry createRegistry() throws Exception {', 'JndiRegistry registry = new JndiRegistry(createJndiContext());', 'registry.bind("A", new Processor() {', 'public void process(Exchange exchange) throws Exception {', '}', '});', 'registry.bind("B", new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['b headers ', ['exchange', 'getin', 'getheaders']]
camel sample_3823

['public void process(Exchange exchange) throws Exception {', 'if ("ExchangeTimedOutException".equals(exchange.getIn().getBody(String.class))) {', 'throw new ExchangeTimedOutException(exchange, 1);', '} else if ("Exception".equals(exchange.getIn().getBody(String.class))) {', 'throw new Exception();', '}', '}', '});', 'registry.bind("C", new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['c headers ', ['exchange', 'getin', 'getheaders']]
camel sample_3823

['public void listen(EventListener listener, Long startingPosition) {', 'try {', 'LOG.debug("Listening for events with listener=" + listener + " at startingPosition=" + startingPosition);', 'if (listener == null) {']
['parameter listener is null will not listen for events ', []]
camel sample_17432

['public void startGrpcServer() throws Exception {', 'pingPongServer = new PingPongImpl();', 'grpcServer = ServerBuilder.forPort(GRPC_TEST_PORT).addService(pingPongServer).build().start();']
['grpc server started on port ', ['grpc', 'test', 'port']]
camel sample_7499

['public void stopGrpcServer() throws IOException {', 'if (grpcServer != null) {', 'grpcServer.shutdown();']
['grpc server stopped ', []]
camel sample_7499

['if ("error".equals(request.getPingName())) {', 'PingPongImpl.this.streamRequests.add(streamRequests);', 'responseObserver.onError(new RuntimeException("Requested error"));', '} else {', 'PongResponse response = PongResponse.newBuilder().setPongName("Hello " + request.getPingName()).build();', 'responseObserver.onNext(response);', '}', '}', 'public void onError(Throwable t) {', 'PingPongImpl.this.streamRequests.add(streamRequests);']
['error in pingasyncasync ', ['t', 'getmessage']]
camel sample_7499

['public void testSynchronous() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_12325

['protected void initHdfs() {', 'try {', 'URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());', '} catch (Throwable e) {']
['cannot set urlstreamhandlerfactory due this exception will be ignored ', ['e', 'getmessage', 'e']]
camel sample_11159

['static Configuration getJAASConfiguration() {', 'Configuration auth = null;', 'try {', 'auth = Configuration.getConfiguration();']
['existing jaas configuration ', ['auth']]
camel sample_11159

['static Configuration getJAASConfiguration() {', 'Configuration auth = null;', 'try {', 'auth = Configuration.getConfiguration();', '} catch (SecurityException e) {']
['cannot load existing jaas configuration ', ['e']]
camel sample_11159

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {']
['restoring existing jaas configuration ', ['auth']]
camel sample_11159

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {', 'try {', 'Configuration.setConfiguration(auth);', '} catch (SecurityException e) {']
['cannot restore jaas configuration this exception is ignored ', ['e']]
camel sample_11159

['static void setJAASConfiguration(Configuration auth) {', 'if (auth != null) {', 'try {', 'Configuration.setConfiguration(auth);', '} catch (SecurityException e) {', '}', '} else {']
['no jaas configuration to restore ', []]
camel sample_11159

['public CamelContext getOrLookupCamelContext() {', 'if (camelContext == null) {', 'if (camelId != null) {']
['looking up camelcontext by id from spring applicationcontext ', ['camelid', 'applicationcontext']]
camel sample_16366

['public CamelContext getOrLookupCamelContext() {', 'if (camelContext == null) {', 'if (camelId != null) {', 'camelContext = applicationContext.getBean(camelId, CamelContext.class);', '} else {']
['looking up camelcontext by type from spring applicationcontext ', ['applicationcontext']]
camel sample_16366

['} else {', 'return applicationContext.isSingleton(beanName);', '}', '}', 'protected void startService(Service service, CamelContext context, Object bean, String beanName) throws Exception {', 'if (isSingleton(bean, beanName)) {', 'getCamelContext().addService(service);', '} else {', 'ServiceHelper.startService(service);', 'if (prototypeBeans.add(beanName)) {']
['the bean with id is prototype scoped and cannot stop the injected service when bean is destroyed you may want to stop the service manually from the bean ', ['beanname', 'service']]
camel sample_16366

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RmiComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rmi.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rmi.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_996

['public void onMessage(Message message) {']
['base called ', []]
camel sample_6158

['public void notify(EventObject event) throws Exception {', 'if (event instanceof ExchangeSentEvent) {', 'ExchangeSentEvent sent = (ExchangeSentEvent) event;']
['took millis to send to ', ['sent', 'gettimetaken', 'sent', 'getendpoint']]
camel sample_1737

['public void process(Exchange exchange) throws Exception {', 'RestletEndpoint endpoint = (RestletEndpoint) getEndpoint();', 'final RestletBinding binding = endpoint.getRestletBinding();', 'Request request;', 'String resourceUri = buildUri(endpoint, exchange);', 'URI uri = new URI(resourceUri);', 'request = new Request(endpoint.getRestletMethod(), resourceUri);', 'binding.populateRestletRequestFromExchange(request, exchange);', 'loadCookies(exchange, uri, request);']
['sending request synchronously for exchangeid ', ['request', 'exchange', 'getexchangeid']]
camel sample_9307

['public void process(Exchange exchange) throws Exception {', 'RestletEndpoint endpoint = (RestletEndpoint) getEndpoint();', 'final RestletBinding binding = endpoint.getRestletBinding();', 'Request request;', 'String resourceUri = buildUri(endpoint, exchange);', 'URI uri = new URI(resourceUri);', 'request = new Request(endpoint.getRestletMethod(), resourceUri);', 'binding.populateRestletRequestFromExchange(request, exchange);', 'loadCookies(exchange, uri, request);', 'Response response = client.handle(request);']
['received response synchronously for exchangeid ', ['response', 'exchange', 'getexchangeid']]
camel sample_9307

['RestletEndpoint endpoint = (RestletEndpoint) getEndpoint();', 'if (endpoint.isSynchronous()) {', 'try {', 'process(exchange);', '} catch (Throwable e) {', 'exchange.setException(e);', '}', 'callback.done(true);', 'return true;', '}']
['processing asynchronously ', []]
camel sample_9307

['String resourceUri = buildUri(endpoint, exchange);', 'URI uri = new URI(resourceUri);', 'request = new Request(endpoint.getRestletMethod(), resourceUri);', 'binding.populateRestletRequestFromExchange(request, exchange);', 'loadCookies(exchange, uri, request);', '} catch (Throwable e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}']
['sending request asynchronously for exchangeid ', ['request', 'exchange', 'getexchangeid']]
camel sample_9307

['request = new Request(endpoint.getRestletMethod(), resourceUri);', 'binding.populateRestletRequestFromExchange(request, exchange);', 'loadCookies(exchange, uri, request);', '} catch (Throwable e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}', 'client.handle(request, new Uniform() {', 'public void handle(Request request, Response response) {']
['received response asynchronously for exchangeid ', ['response', 'exchange', 'getexchangeid']]
camel sample_9307

['private static String buildUri(RestletEndpoint endpoint, Exchange exchange) throws Exception {', 'String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI);', 'if (uri == null) {', 'uri = endpoint.getProtocol() + ": }']
['substituting value placeholders in uri ', ['uri']]
camel sample_9307

['if (uri == null) {', 'uri = endpoint.getProtocol() + ": }', 'Matcher matcher = PATTERN.matcher(uri);', 'while (matcher.find()) {', 'String key = matcher.group(1);', 'String header = exchange.getIn().getHeader(key, String.class);', 'if (header == null) {', 'throw new CamelExchangeException("Header with key: " + key + " not found in Exchange", exchange);', '}', 'if (LOG.isTraceEnabled()) {']
['replacing with header value ', ['matcher', 'group', 'header']]
camel sample_9307

['matcher.reset(uri);', '}', 'if (endpoint.getQueryParameters() != null) {', 'uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());', '}', 'String query = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY);', 'if (query == null) {', 'query = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);', '}', 'if (query != null) {']
['adding query to uri ', ['query', 'uri']]
camel sample_9307

['if (endpoint.getQueryParameters() != null) {', 'uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());', '}', 'String query = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY);', 'if (query == null) {', 'query = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);', '}', 'if (query != null) {', 'uri = addQueryToUri(uri, query);', '}']
['using uri ', ['uri']]
camel sample_9307

['protected void doStart() throws Exception {', 'super.doStart();', 'if (configuration.isClientMode() && configuration.getProtocol().equals("tcp")) {', 'connector.setHandler(new ReceiveHandler());', 'ConnectFuture future = connector.connect(address);', 'future.awaitUninterruptibly();', 'session = future.getSession();']
['connected to server address using connector timeout millis ', ['new', 'object', 'address', 'connector', 'configuration', 'gettimeout']]
camel sample_11636

['protected void doStart() throws Exception {', 'super.doStart();', 'if (configuration.isClientMode() && configuration.getProtocol().equals("tcp")) {', 'connector.setHandler(new ReceiveHandler());', 'ConnectFuture future = connector.connect(address);', 'future.awaitUninterruptibly();', 'session = future.getSession();', '} else {', 'acceptor.setHandler(new ReceiveHandler());', 'acceptor.bind(address);']
['bound to server address using acceptor ', ['address', 'acceptor']]
camel sample_11636

['protected void doStop() throws Exception {', 'if (configuration.isClientMode() && configuration.getProtocol().equals("tcp")) {']
['disconnect from server address using connector ', ['address', 'connector']]
camel sample_11636

['protected void doStop() throws Exception {', 'if (configuration.isClientMode() && configuration.getProtocol().equals("tcp")) {', 'if (session != null) {', 'CloseFuture closeFuture = session.closeNow();', 'closeFuture.awaitUninterruptibly();', '}', 'connector.dispose(true);', '} else {']
['unbinding from server address using acceptor ', ['address', 'acceptor']]
camel sample_11636

['protected void doStop() throws Exception {', 'if (configuration.isClientMode() && configuration.getProtocol().equals("tcp")) {', 'if (session != null) {', 'CloseFuture closeFuture = session.closeNow();', 'closeFuture.awaitUninterruptibly();', '}', 'connector.dispose(true);', '} else {', 'if (address instanceof InetSocketAddress) {', 'if ("0.0.0.0".equals(((InetSocketAddress)address).getAddress().getHostAddress())) {']
['unbind the server address ', ['acceptor', 'getlocaladdresses']]
camel sample_11636

['boolean minaLogger = configuration.isMinaLogger();', 'List<IoFilter> filters = configuration.getFilters();', 'address = new VmPipeAddress(configuration.getPort());', 'acceptor = new VmPipeAcceptor();', 'configureCodecFactory("Mina2Consumer", acceptor, configuration);', 'if (minaLogger) {', 'acceptor.getFilterChain().addLast("logger", new LoggingFilter());', '}', 'appendIoFiltersToChain(filters, acceptor.getFilterChain());', 'if (configuration.getSslContextParameters() != null) {']
['using vm protocol but an sslcontextparameters instance was provided sslcontextparameters is only supported on the tcp protocol ', []]
camel sample_11636

['protected void setupSocketProtocol(String uri, Mina2Configuration configuration) throws Exception {']
['createSocketEndpoint ', []]
camel sample_11636

['LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'Mina2TextLineCodecFactory codecFactory = new Mina2TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);', 'if (LOG.isDebugEnabled()) {']
['using textlinecodecfactory using encoding line delimiter ', ['new', 'object', 'type', 'codecfactory', 'charset', 'configuration', 'gettextlinedelimiter', 'delimiter']]
camel sample_11636

['LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'Mina2TextLineCodecFactory codecFactory = new Mina2TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);', 'if (LOG.isDebugEnabled()) {']
['encoder maximum line length decoder maximum line length ', ['codecfactory', 'getencodermaxlinelength', 'codecfactory', 'getdecodermaxlinelength']]
camel sample_11636

['}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(service, codecFactory);', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'ObjectSerializationCodecFactory codecFactory = new ObjectSerializationCodecFactory();', 'addCodecFactory(service, codecFactory);']
['using objectserializationcodecfactory ', ['type', 'codecfactory']]
camel sample_11636

['workerPool = new OrderedThreadPoolExecutor(configuration.getMaximumPoolSize());', '} else {', 'workerPool = new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());', '}', 'acceptor.getFilterChain().addLast("threadPool", new ExecutorFilter(workerPool));', 'if (minaLogger) {', 'acceptor.getFilterChain().addLast("logger", new LoggingFilter());', '}', 'appendIoFiltersToChain(filters, acceptor.getFilterChain());', 'if (configuration.getSslContextParameters() != null) {']
['using datagram protocol but an sslcontextparameters instance was provided sslcontextparameters is only supported on the tcp protocol ', ['configuration', 'getprotocol']]
camel sample_11636

['protected void configureDataGramCodecFactory(final String type, final IoService service, final Mina2Configuration configuration) {', 'ProtocolCodecFactory codecFactory = configuration.getCodec();', 'if (codecFactory == null) {', 'codecFactory = new Mina2UdpProtocolCodecFactory(this.getEndpoint().getCamelContext());', 'if (LOG.isDebugEnabled()) {']
['using codecfactory ', ['new', 'object', 'type', 'codecfactory']]
camel sample_11636

['private Charset getEncodingParameter(String type, Mina2Configuration configuration) {', 'String encoding = configuration.getEncoding();', 'if (encoding == null) {', 'encoding = Charset.defaultCharset().name();', 'configuration.setEncoding(encoding);']
['no encoding parameter using default charset ', ['type', 'encoding']]
camel sample_11636

['public void exceptionCaught(IoSession session, Throwable cause) throws Exception {', 'if (cause instanceof IOException) {']
['ioexceptions are automatically handled by mina ', []]
camel sample_11636

['public void exceptionCaught(IoSession session, Throwable cause) throws Exception {', 'if (cause instanceof IOException) {', 'return;', '}', 'if (session != null) {']
['closing session as an exception was thrown from mina ', []]
camel sample_11636

['public void messageReceived(IoSession session, Object object) throws Exception {', 'if (LOG.isDebugEnabled()) {', 'Object in = object;', 'if (in instanceof byte[]) {', 'in = getEndpoint().getCamelContext().getTypeConverter().convertTo(String.class, in);', '}']
['received body ', ['in']]
camel sample_11636

['}', 'boolean failed = exchange.isFailed();', 'if (failed && !getEndpoint().getConfiguration().isTransferExchange()) {', 'if (exchange.getException() != null) {', 'response = exchange.getException();', '} else {', 'response = exchange.getOut().getBody();', '}', '}', 'if (response != null) {']
['writing body ', ['response']]
camel sample_11636

['if (failed && !getEndpoint().getConfiguration().isTransferExchange()) {', 'if (exchange.getException() != null) {', 'response = exchange.getException();', '} else {', 'response = exchange.getOut().getBody();', '}', '}', 'if (response != null) {', 'Mina2Helper.writeBody(session, response, exchange, configuration.getWriteTimeout());', '} else {']
['writing no response ', []]
camel sample_11636

['Boolean close;', 'if (ExchangeHelper.isOutCapable(exchange)) {', 'close = exchange.getOut().getHeader(Mina2Constants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(Mina2Constants.MINA_CLOSE_SESSION_WHEN_COMPLETE, Boolean.class);', '}', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {']
['closing session when complete at address ', ['address']]
camel sample_11636

['} catch (Exception e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}', 'final Exchange wireTapExchange = target;', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {', 'taskCount.increment();', 'try {']
['wiretap ', ['uri', 'wiretapexchange']]
camel sample_4535

['callback.done(true);', 'return true;', '}', 'final Exchange wireTapExchange = target;', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {', 'taskCount.increment();', 'try {', 'processor.process(wireTapExchange);', '} catch (Throwable e) {']
['error occurred during processing wiretap to this exception will be ignored ', ['wiretapexchange', 'uri', 'e']]
camel sample_4535

['public void testEndpointCreatedWithCorrectUri() throws Exception {', 'assertNotNull("foo", endpoint);', 'assertEquals("foo.getEndpointUri()", "foo:bar", endpoint.getEndpointUri());']
['found endpoint with uri ', ['endpoint', 'endpoint', 'getendpointuri']]
camel sample_15675

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyLocalAddRouteBuilderTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'Assert.assertNull(method);', 'List<MethodSource<JavaClassSource>> methods = CamelJavaParserHelper.findInlinedConfigureMethods(clazz);', 'Assert.assertEquals(1, methods.size());', 'method = methods.get(0);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_200

['MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'Assert.assertNull(method);', 'List<MethodSource<JavaClassSource>> methods = CamelJavaParserHelper.findInlinedConfigureMethods(clazz);', 'Assert.assertEquals(1, methods.size());', 'method = methods.get(0);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_200

['public void onJobExecute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {', 'boolean run = true;', 'LoadBalancer balancer = getLoadBalancer();', 'if (balancer instanceof ServiceSupport) {', 'run = ((ServiceSupport) balancer).isRunAllowed();', '}', 'if (!run) {']
['cannot execute quartz job with context because processor is not started ', ['jobexecutioncontext', 'balancer']]
camel sample_17218

['public void onJobExecute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {', 'boolean run = true;', 'LoadBalancer balancer = getLoadBalancer();', 'if (balancer instanceof ServiceSupport) {', 'run = ((ServiceSupport) balancer).isRunAllowed();', '}', 'if (!run) {', 'return;', '}']
['firing quartz job with context ', ['jobexecutioncontext']]
camel sample_17218

['if (!run) {', 'return;', '}', 'Exchange exchange = createExchange(jobExecutionContext);', 'try {', 'balancer.process(exchange);', 'if (exchange.getException() != null) {', 'throw new JobExecutionException(exchange.getException());', '}', '} catch (Exception e) {']
['error processing exchange ', ['camelexchangeexception', 'createexceptionmessage', 'exchange', 'e']]
camel sample_17218

['public synchronized void consumerStarted(final QuartzConsumer consumer) throws SchedulerException {', 'ObjectHelper.notNull(trigger, "trigger");']
['adding consumer ', ['consumer', 'getprocessor']]
camel sample_17218

['public synchronized void consumerStopped(final QuartzConsumer consumer) throws SchedulerException {', 'ObjectHelper.notNull(trigger, "trigger");', 'if (started) {', 'pauseTrigger(getTrigger());', 'started = false;', '}']
['removing consumer ', ['consumer', 'getprocessor']]
camel sample_17218

['setToHost((String) settings.get("toHost"));', '}', 'if (settings.containsKey("toPort")) {', 'setToPort(Integer.parseInt((String) settings.get("toPort")));', '}', '}', '}', 'implementationDebugLogFile = component.getAndRemoveParameter(parameters, "implementationDebugLogFile", String.class, null);', 'implementationServerLogFile = component.getAndRemoveParameter(parameters, "implementationServerLogFile", String.class, null);', 'implementationTraceLevel = component.getAndRemoveParameter(parameters, "implementationTraceLevel", String.class, "0");']
['consumer stackname ', ['consumer', 'stackname']]
camel sample_8516

['setToHost((String) settings.get("toHost"));', '}', 'if (settings.containsKey("toPort")) {', 'setToPort(Integer.parseInt((String) settings.get("toPort")));', '}', '}', '}', 'implementationDebugLogFile = component.getAndRemoveParameter(parameters, "implementationDebugLogFile", String.class, null);', 'implementationServerLogFile = component.getAndRemoveParameter(parameters, "implementationServerLogFile", String.class, null);', 'implementationTraceLevel = component.getAndRemoveParameter(parameters, "implementationTraceLevel", String.class, "0");']
['from user from host from port ', ['getfromuser', 'getfromhost', 'getfromport']]
camel sample_8516

['protected void doStart() throws Exception {', 'super.doStart();', 'createConsumerCacheConnection();']
['initialize the cache ', []]
camel sample_10532

['public Object invoke(Exchange cxfExchange, Object o) {']
['received cxf request ', ['cxfexchange']]
camel sample_8003

['public Object invoke(Exchange cxfExchange, Object o) {', 'Continuation continuation;', 'if (!endpoint.isSynchronous() && isAsyncInvocationSupported(cxfExchange) && (continuation = getContinuation(cxfExchange)) != null) {']
['calling the camel async processors ', []]
camel sample_8003

['public Object invoke(Exchange cxfExchange, Object o) {', 'Continuation continuation;', 'if (!endpoint.isSynchronous() && isAsyncInvocationSupported(cxfExchange) && (continuation = getContinuation(cxfExchange)) != null) {', 'return asyncInvoke(cxfExchange, continuation);', '} else {']
['calling the camel sync processors ', []]
camel sample_8003

['private Object asyncInvoke(Exchange cxfExchange, final Continuation continuation) {', 'synchronized (continuation) {', 'if (continuation.isNew()) {', 'final org.apache.camel.Exchange camelExchange = prepareCamelExchange(cxfExchange);']
['suspending continuation of exchangeid ', ['camelexchange', 'getexchangeid']]
camel sample_8003

['private Object asyncInvoke(Exchange cxfExchange, final Continuation continuation) {', 'synchronized (continuation) {', 'if (continuation.isNew()) {', 'final org.apache.camel.Exchange camelExchange = prepareCamelExchange(cxfExchange);', 'continuation.suspend(cxfEndpoint.getContinuationTimeout());', 'continuation.setObject(camelExchange);', 'getAsyncProcessor().process(camelExchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'synchronized (continuation) {']
['resuming continuation of exchangeid ', ['camelexchange', 'getexchangeid']]
camel sample_8003

['private Object syncInvoke(Exchange cxfExchange) {', 'org.apache.camel.Exchange camelExchange = prepareCamelExchange(cxfExchange);', 'try {', 'try {']
['processing start ', []]
camel sample_8003

['private Object syncInvoke(Exchange cxfExchange) {', 'org.apache.camel.Exchange camelExchange = prepareCamelExchange(cxfExchange);', 'try {', 'try {', 'getProcessor().process(camelExchange);', '} catch (Exception e) {', 'throw new Fault(e);', '}']
['processing end ', []]
camel sample_8003

['org.apache.camel.Exchange camelExchange = endpoint.createExchange();', 'cxfExchange.put(org.apache.camel.Exchange.class, camelExchange);', 'DataFormat dataFormat = endpoint.getDataFormat();', 'BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();', 'if (boi != null && dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {', 'boi = boi.getWrappedOperation();', 'cxfExchange.put(BindingOperationInfo.class, boi);', '}', 'if (boi != null) {', 'camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);']
['set exchange property bindingoperationinfo ', ['boi']]
camel sample_8003

['if (endpoint.getMergeProtocolHeaders()) {', 'camelExchange.setProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.TRUE);', '}', 'binding.populateExchangeFromCxfRequest(cxfExchange, camelExchange);', 'Map<String, Object> context = new HashMap<String, Object>();', 'binding.extractJaxWsContext(cxfExchange, context);', 'camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT, context);', 'try {', 'CxfConsumer.this.createUoW(camelExchange);', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_8003

['if (exchange.getProperty(Exchange.ASYNC_WAIT) != null) {', 'wait = exchange.getProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.class);', '}', 'if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {', 'Exchange copy = prepareCopy(exchange, false);', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {']
['timeout occurred so response will be ignored ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_4889

['Exchange copy = prepareCopy(exchange, false);', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {', '}', 'return;', '} else {', 'if (log.isTraceEnabled()) {']
['with response ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_4889

['}', '}', '}', 'public boolean allowHandover() {', 'return false;', '}', 'public String toString() {', 'return "onDone at endpoint: " + endpoint;', '}', '});']
['adding exchange to queue ', ['copy']]
camel sample_4889

['});', 'try {', 'addToQueue(copy, false);', '} catch (SedaConsumerNotAvailableException e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}', 'if (timeout > 0) {', 'if (log.isTraceEnabled()) {']
['waiting for task to complete using timeout ms at ', ['timeout', 'endpoint', 'getendpointuri']]
camel sample_4889

['done = latch.await(timeout, TimeUnit.MILLISECONDS);', '} catch (InterruptedException e) {', '}', 'if (!done) {', 'exchange.setException(new ExchangeTimedOutException(exchange, timeout));', 'endpoint.getQueue().remove(copy);', 'latch.countDown();', '}', '} else {', 'if (log.isTraceEnabled()) {']
['waiting for task to complete blocking at ', ['endpoint', 'getendpointuri']]
camel sample_4889

['queue = queueReference.getQueue();', '}', 'if (queue == null) {', 'throw new SedaConsumerNotAvailableException("No queue available on endpoint: " + endpoint, exchange);', '}', 'boolean empty = !queueReference.hasConsumers();', 'if (empty) {', 'if (endpoint.isFailIfNoConsumers()) {', 'throw new SedaConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange);', '} else if (endpoint.isDiscardIfNoConsumers()) {']
['discard message as no active consumers on endpoint ', ['endpoint']]
camel sample_4889

['if (endpoint.isFailIfNoConsumers()) {', 'throw new SedaConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange);', '} else if (endpoint.isDiscardIfNoConsumers()) {', 'return;', '}', '}', 'Exchange target = exchange;', 'if (copy) {', 'target = prepareCopy(exchange, true);', '}']
['adding exchange to queue ', ['target']]
camel sample_4889

['}', '}', 'Exchange target = exchange;', 'if (copy) {', 'target = prepareCopy(exchange, true);', '}', 'if (blockWhenFull) {', 'try {', 'queue.put(target);', '} catch (InterruptedException e) {']
['put interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_4889

['protected void doStop() throws Exception {', 'int count = size();', 'if (count > 0) {']
['shutting down while there are still inflight exchanges ', ['count']]
camel sample_4020

['protected void doStop() throws Exception {', 'int count = size();', 'if (count > 0) {', '} else {']
['shutting down with no inflight exchanges ', []]
camel sample_4020

['if (cache.containsKey(key)) {', 'return false;', '} else {', 'cache.put(key, key);', 'boolean containsInFile = containsStore(key);', 'if (containsInFile) {', 'return false;', '}', 'appendToStore(key);', 'if (maxFileStoreSize > 0 && fileStore.length() > maxFileStoreSize) {']
['maximum capacity of file store hit at bytes dropping oldest entries from the file store ', ['filestore', 'maxfilestoresize', 'dropoldestfilestore']]
camel sample_4470

['protected void appendToStore(final String key) {']
['appending to idempotent filestore ', ['key', 'filestore']]
camel sample_4470

['protected void appendToStore(final String key) {', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {']
['parent directory of file store doesn t exist creating ', ['filestore']]
camel sample_4470

['protected void appendToStore(final String key) {', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {', 'if (fileStore.getParentFile().mkdirs()) {']
['parent directory of filestore successfully created ', ['filestore']]
camel sample_4470

['protected void appendToStore(final String key) {', 'FileOutputStream fos = null;', 'try {', 'File storeParentDirectory = fileStore.getParentFile();', 'if (storeParentDirectory != null && !storeParentDirectory.exists()) {', 'if (fileStore.getParentFile().mkdirs()) {', '} else {']
['parent directory of filestore cannot be created ', ['filestore']]
camel sample_4470

['protected synchronized void removeFromStore(String key) {']
['removing from idempotent filestore ', ['key', 'filestore']]
camel sample_4470

['}', '}', '} catch (IOException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'if (scanner != null) {', 'scanner.close();', '}', '}', 'if (found) {']
['rewriting idempotent filestore due to key removed ', ['filestore', 'key']]
camel sample_4470

['protected synchronized void trunkStore() {', 'if (fileStore == null || !fileStore.exists()) {', 'return;', '}']
['trunking oldest entries from idempotent filestore ', ['dropoldestfilestore', 'filestore']]
camel sample_4470

['}', '}', '} catch (IOException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'if (scanner != null) {', 'scanner.close();', '}', '}', 'if (!lines.isEmpty()) {']
['rewriting idempotent filestore with entries ', ['filestore', 'lines', 'size']]
camel sample_4470

['for (String line : lines) {', 'fos.write(line.getBytes());', 'fos.write(STORE_DELIMITER.getBytes());', '}', '} catch (IOException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'IOHelper.close(fos, "Rewriting file idempotent repository", LOG);', '}', '} else {']
['clearing idempotent filestore ', ['filestore']]
camel sample_4470

['protected void loadStore() throws IOException {', 'if (!fileStore.exists()) {']
['creating filestore ', ['filestore']]
camel sample_4470

['if (!fileStore.exists()) {', 'File parent = fileStore.getParentFile();', 'if (parent != null) {', 'parent.mkdirs();', '}', 'boolean created = FileUtil.createNewFile(fileStore);', 'if (!created) {', 'throw new IOException("Cannot create filestore: " + fileStore);', '}', '}']
['loading to level cache from idempotent filestore ', ['filestore']]
camel sample_4470

['String line = scanner.nextLine();', 'cache.put(line, line);', '}', '} catch (IOException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '} finally {', 'if (scanner != null) {', 'scanner.close();', '}', '}']
['loaded to the level cache from idempotent filestore ', ['cache', 'size', 'filestore']]
camel sample_4470

['public Destination getReplyTo() {', 'try {', 'destResolver.destinationReady();', '} catch (InterruptedException e) {']
['interrupted while waiting for jmsreplyto destination refresh ', ['e']]
camel sample_7175

['public void updateCorrelationId(String correlationId, String newCorrelationId, long requestTimeout) {']
['updated provisional correlationid to expected correlationid ', ['correlationid', 'newcorrelationid']]
camel sample_7175

['protected void handleReplyMessage(String correlationID, Message message, Session session) {', 'ReplyHandler handler = correlation.get(correlationID);', 'if (handler == null && endpoint.isUseMessageIDAsCorrelationID()) {', 'handler = waitForProvisionCorrelationToBeUpdated(correlationID, message);', '}', 'if (handler != null) {', 'correlation.remove(correlationID);', 'handler.onReply(correlationID, message, session);', '} else {']
['reply received for unknown correlationid the message will be ignored ', ['correlationid', 'message']]
camel sample_7175

['answer.setErrorHandler(new DefaultSpringErrorHandler(endpoint.getCamelContext(), TemporaryQueueReplyManager.class, endpoint.getErrorHandlerLoggingLevel(), endpoint.isErrorHandlerLogStackTrace()));', '}', 'if (endpoint.getReceiveTimeout() >= 0) {', 'answer.setReceiveTimeout(endpoint.getReceiveTimeout());', '}', 'if (endpoint.getRecoveryInterval() >= 0) {', 'answer.setRecoveryInterval(endpoint.getRecoveryInterval());', '}', 'if (endpoint.getTaskExecutor() != null) {', 'if (log.isDebugEnabled()) {']
['using custom taskexecutor on listener container ', ['endpoint', 'gettaskexecutor', 'answer']]
camel sample_7175

['answer.setRecoveryInterval(endpoint.getRecoveryInterval());', '}', 'if (endpoint.getTaskExecutor() != null) {', 'if (log.isDebugEnabled()) {', '}', 'answer.setTaskExecutor(endpoint.getTaskExecutor());', '}', 'String name = "TemporaryQueueReplyManager[" + endpoint.getDestinationName() + "]";', 'answer.setBeanName(name);', 'if (answer.getConcurrentConsumers() > 1) {']
['using concurrent consumers on ', ['new', 'object', 'answer', 'getconcurrentconsumers', 'answer', 'getmaxconcurrentconsumers', 'name']]
camel sample_7175

['public void onException(JMSException exception) {']
['exception inside the dmlc for temporary replyto queue for destination refreshing replyto destination ', ['endpoint', 'getdestinationname', 'exception']]
camel sample_7175

['public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {', 'synchronized (refreshWanted) {', 'if (queue == null || refreshWanted.compareAndSet(true, false)) {', 'queue = session.createTemporaryQueue();', 'setReplyTo(queue);', 'if (log.isDebugEnabled()) {']
['refreshed temporary replyto queue new queue ', ['queue', 'getqueuename']]
camel sample_7175

['public void destinationReady() throws InterruptedException {', 'if (refreshWanted.get()) {', 'synchronized (refreshWanted) {']
['waiting for new temporary replyto queue to be assigned before we can continue ', []]
camel sample_7175

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<SoapJaxbDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.soapjaxb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.soapjaxb.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_596

['await().atMost(2, TimeUnit.SECONDS).until(() -> {', 'Long num = (Long) mbeanServer.getAttribute(on, "ExchangesInflight");', 'return num != null && num == 2;', '});', 'inflight = (Long) mbeanServer.getAttribute(on, "ExchangesInflight");', 'assertEquals(2, inflight.longValue());', 'ts = (Long) mbeanServer.getAttribute(on, "OldestInflightDuration");', 'assertNotNull(ts);', 'id = (String) mbeanServer.getAttribute(on, "OldestInflightExchangeId");', 'assertNotNull(id);']
['oldest exchange id duration ', ['id', 'ts']]
camel sample_2727

['ts = (Long) mbeanServer.getAttribute(on, "OldestInflightDuration");', 'assertNotNull(ts);', 'id = (String) mbeanServer.getAttribute(on, "OldestInflightExchangeId");', 'assertNotNull(id);', 'latch1.countDown();', 'Thread.sleep(200);', 'Long ts2 = (Long) mbeanServer.getAttribute(on, "OldestInflightDuration");', 'assertNotNull(ts2);', 'String id2 = (String) mbeanServer.getAttribute(on, "OldestInflightExchangeId");', 'assertNotNull(id2);']
['oldest exchange id duration ', []]
camel sample_2727

['public void testExpression() throws Exception {', 'Expression expression = sql("SELECT * FROM org.apache.camel.builder.sql.Person where city = \'London\'");', 'List<?> value = expression.evaluate(exchange, List.class);', 'assertEquals("List size", 2, value.size());', 'for (Object person : value) {']
['found ', ['person']]
camel sample_13467

['public void testExpressionWithHeaderVariable() throws Exception {', 'Expression expression = sql("SELECT * FROM org.apache.camel.builder.sql.Person where name = :fooHeader");', 'List<?> value = expression.evaluate(exchange, List.class);', 'assertEquals("List size", 1, value.size());', 'for (Object person : value) {']
['found ', ['person']]
camel sample_13467

['private void writeSlowFile() throws Exception {']
['writing slow file ', []]
camel sample_3136

['private void writeSlowFile() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/changed/in/slowfile.dat");', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());']
['writing line ', ['i']]
camel sample_3136

['private void writeSlowFile() throws Exception {', 'FileOutputStream fos = new FileOutputStream("target/changed/in/slowfile.dat");', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());', 'Thread.sleep(50);', '}', 'fos.flush();', 'fos.close();']
['writing slow file done ', []]
camel sample_3136

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SqlComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sql.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sql.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_980

['CountDownLatch latch = new CountDownLatch((totalRedeliverdFalse * routeCount) + (totalRedeliveredTrue * routeCount));', 'for (int i = 1; i <= routeCount; i++) {', 'addRoute(destinationName, i, batchCount, consumerCount, maxAttemptsCount, latch);', 'getMockEndpoint("mock:test.before." + i).expectedMessageCount(totalRedeliverdFalse);', 'getMockEndpoint("mock:test.after." + i).expectedMessageCount(totalRedeliveredTrue);', '}', 'getMockEndpoint("mock:test.after").expectedMessageCount(0);', 'for (int i = 1; i <= messageCount; i++) {', 'String message = "Hello World " + i;', 'template.sendBody("direct:start", message);']
['sending message ', ['message']]
camel sample_12333

['protected void addRoute(final String destinationName, final int routeNumber, final int batchCount, final int consumerCount, final int maxAttemptsCount, final CountDownLatch latch) throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'if (context.getRoute("direct.route") == null) {', 'from("direct:start") .id("direct.route") .to(destinationName);', '}', 'from(destinationName + "?transacted=true&transactionBatchCount=" + batchCount + "&consumerCount=" + consumerCount) .id("consumer.route." + routeNumber) .choice().when(header("JMSRedelivered").isEqualTo("false")) .log("Route " + routeNumber + " 1st attempt Body: ${body} | Redeliverd: ${header.JMSRedelivered}") .to("mock:test.before." + routeNumber) .process(new Processor() {', 'private final AtomicInteger counter = new AtomicInteger(0);', 'public void process(Exchange exchange) throws Exception {', 'if (counter.incrementAndGet() == maxAttemptsCount) {']
['messages have been processed failing the exchange to force a rollback of the transaction ', ['maxattemptscount']]
camel sample_12333

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GridFsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb-gridfs.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mongodb-gridfs.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_579

['}', 'count++;', 'model = factory.factory();', 'String[] tokens = line.split(separator, factory.getAutospanLine() ? factory.getMaxpos() : -1);', 'List<String> result = Arrays.asList(tokens);', 'result = unquoteTokens(result, separator, quote);', 'if (result.size() == 0 || result.isEmpty()) {', 'throw new java.lang.IllegalArgumentException("No records have been defined in the CSV");', '} else {', 'if (LOG.isDebugEnabled()) {']
['size of the record splitted ', ['result', 'size']]
camel sample_7460

['List<String> result = Arrays.asList(tokens);', 'result = unquoteTokens(result, separator, quote);', 'if (result.size() == 0 || result.isEmpty()) {', 'throw new java.lang.IllegalArgumentException("No records have been defined in the CSV");', '} else {', 'if (LOG.isDebugEnabled()) {', '}', 'factory.bind(getCamelContext(), result, model, count);', 'factory.link(model);', 'models.add(model);']
['graph of objects created ', ['model']]
camel sample_7460

['models.add(model);', '}', '}', 'Collections.sort(models, new ExampleComparator());', 'long deprecated = models.stream() .filter(m -> "true".equals(m.getDeprecated())) .count();', 'File file = new File(".", "README.adoc");', 'boolean exists = file.exists();', 'String changed = templateExamples(models, deprecated);', 'boolean updated = updateExamples(file, changed);', 'if (updated) {']
['updated readme adoc file ', ['file']]
camel sample_129

['}', '}', 'Collections.sort(models, new ExampleComparator());', 'long deprecated = models.stream() .filter(m -> "true".equals(m.getDeprecated())) .count();', 'File file = new File(".", "README.adoc");', 'boolean exists = file.exists();', 'String changed = templateExamples(models, deprecated);', 'boolean updated = updateExamples(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme adoc file ', ['file']]
camel sample_129

['}', 'Collections.sort(models, new ExampleComparator());', 'long deprecated = models.stream() .filter(m -> "true".equals(m.getDeprecated())) .count();', 'File file = new File(".", "README.adoc");', 'boolean exists = file.exists();', 'String changed = templateExamples(models, deprecated);', 'boolean updated = updateExamples(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme adoc file ', ['file']]
camel sample_129

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_129

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_129

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_129

['public void process(Exchange exchange) throws Exception {']
['processing workflow task ', ['exchange']]
camel sample_8795

['private List<Dependency> filter(List<Dependency> dependencyList) {', 'List<Dependency> outDependencies = new ArrayList<>();', 'DependencyMatcher inclusions = new DependencyMatcher(dependencies.getIncludes());', 'DependencyMatcher exclusions = new DependencyMatcher(dependencies.getExcludes());', 'for (Dependency dep : dependencyList) {', 'boolean accept = inclusions.matches(dep) && !exclusions.matches(dep);']
['included in the bom excluded from bom ', ['dep', 'accept']]
camel sample_77

['}', 'boolean pattern = true;', 'boolean filter = true;', 'if (patterns != null) {', 'pattern = shouldTracePattern(definition);', '}', 'if (predicate != null) {', 'filter = shouldTraceFilter(exchange);', '}', 'if (LOG.isTraceEnabled()) {']
['should trace evaluated pattern filter ', ['new', 'object', 'definition', 'getid', 'pattern', 'filter']]
camel sample_4562

['public void xxTestXPatPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed file with elements in ', ['size', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3618

['public void xxTestXPatPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed tiny messages ', ['tiny', 'get']]
camel sample_3618

['public void xxTestXPatPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed small messages ', ['small', 'get']]
camel sample_3618

['public void xxTestXPatPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed medium messages ', ['med', 'get']]
camel sample_3618

['public void xxTestXPatPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed large messages ', ['large', 'get']]
camel sample_3618

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("file:target/data?initialDelay=0&delay=10&noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['starting to process file ', []]
camel sample_3618

['from("file:target/data?initialDelay=0&delay=10&noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'watch.restart();', '}', '}) .split().xpath("/orders/order").streaming() .choice() .when().xpath("/order/amount < 10") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>3</amount>"));', 'int num = tiny.incrementAndGet();', 'if (num % 100 == 0) {']
['processed tiny messages ', ['num']]
camel sample_3618

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 50") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>44</amount>"));', 'int num = small.incrementAndGet();', 'if (num % 100 == 0) {']
['processed small messages ', ['num']]
camel sample_3618

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 100") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>88</amount>"));', 'int num = med.incrementAndGet();', 'if (num % 100 == 0) {']
['processed medium messages ', ['num']]
camel sample_3618

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .otherwise() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>123</amount>"));', 'int num = large.incrementAndGet();', 'if (num % 100 == 0) {']
['processed large messages ', ['num']]
camel sample_3618

['public void myMethod(String foo, int bar, String x) {', 'this.foo = foo;', 'this.bar = bar;', 'this.x = x;']
['mymethod method called on ', ['this']]
camel sample_3248

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GoogleMailComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-mail.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.google-mail.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_742

['public void requestResource() {']
['requested to become active from ', ['candidatename']]
camel sample_12671

['public void requestResource() {', 'try {', 'lease = leaderSelector.acquire();', '} catch (Exception e) {', 'throw new RuntimeException("Unable to obtain access to become a leader node.");', '}']
['is now active ', ['candidatename']]
camel sample_12671

['private String createCandidateName() {', 'StringBuilder builder = new StringBuilder();', 'try {', 'builder.append(InetAddress.getLocalHost().getCanonicalHostName());', '} catch (UnknownHostException ex) {']
['failed to get the local hostname ', ['ex']]
camel sample_12671

['private void notifyElectionWatchers() {', 'for (ElectionWatcher watcher : watchers) {', 'try {', 'watcher.electionResultChanged();', '} catch (Exception e) {']
['election watcher of type threw an exception ', ['watcher', 'watcher', 'getclass', 'e']]
camel sample_12671

['public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {', 'switch (connectionState) {']
['received state from connection giving up lock ', ['connectionstate']]
camel sample_12671

['public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {', 'switch (connectionState) {', 'try {', 'leaderSelector.returnLease(lease);', '} finally {', 'this.activeNode.set(false);', 'notifyElectionWatchers();', '}', 'break;']
['connection state changed ', ['connectionstate']]
camel sample_12671

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteDuplicateIdTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_191

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteDuplicateIdTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals(3, list.size());', 'list = CamelJavaParserHelper.parseCamelRouteIds(method);', 'for (ParserResult result : list) {']
['route id ', ['result', 'getelement']]
camel sample_191

['PumpStreamHandler handler = new PumpStreamHandler(out, err, command.getInput());', 'executor.setStreamHandler(handler);', 'CommandLine cl = toCommandLine(command);', 'try {', 'int exitValue = executor.execute(cl);', 'InputStream stdout = out.size() == 0 ? null : new ByteArrayInputStream(out.toByteArray());', 'InputStream stderr = err.size() == 0 ? null : new ByteArrayInputStream(err.toByteArray());', 'ExecResult result = new ExecResult(command, stdout, stderr, exitValue);', 'return result;', '} catch (ExecuteException ee) {']
['execexception while executing command ', ['command', 'tostring', 'ee', 'getmessage']]
camel sample_12221

['throw new ExecException("Failed to execute command " + command, stdout, stderr, ee.getExitValue(), ee);', '} catch (IOException ioe) {', 'InputStream stdout = out.size() == 0 ? null : new ByteArrayInputStream(out.toByteArray());', 'InputStream stderr = err.size() == 0 ? null : new ByteArrayInputStream(err.toByteArray());', 'int exitValue = 0;', 'if (executor instanceof ExecDefaultExecutor) {', 'exitValue = ((ExecDefaultExecutor) executor).getExitValue();', '}', 'String msg = ioe.getMessage();', 'if (msg != null && "stream closed".equals(msg.toLowerCase(Locale.ENGLISH))) {']
['ignoring stream closed ioexception ', ['ioe']]
camel sample_12221

['InputStream stderr = err.size() == 0 ? null : new ByteArrayInputStream(err.toByteArray());', 'int exitValue = 0;', 'if (executor instanceof ExecDefaultExecutor) {', 'exitValue = ((ExecDefaultExecutor) executor).getExitValue();', '}', 'String msg = ioe.getMessage();', 'if (msg != null && "stream closed".equals(msg.toLowerCase(Locale.ENGLISH))) {', 'ExecResult result = new ExecResult(command, stdout, stderr, exitValue);', 'return result;', '}']
['ioexception while executing command ', ['command', 'tostring', 'ioe', 'getmessage']]
camel sample_12221

['protected void before() throws Throwable {']
['starting embedded broker on ', ['brokerid', 'tcpconnectoruri']]
camel sample_12364

['protected void after() {', 'try {']
['stopping embedded broker ', ['brokerid']]
camel sample_12364

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MllpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mllp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mllp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_939

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<RefLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ref.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.ref.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_893

['public void addServiceDiscoveryConfigurations() {', 'if (!(beanFactory instanceof ConfigurableBeanFactory)) {']
['beanfactory is not of type configurablebeanfactory ', []]
camel sample_13431

['private void startAllStoppedConsumers() {', 'try {', 'lock.lock();', 'if (!suspendedRoutes.isEmpty()) {', 'if (log.isDebugEnabled()) {']
['have been stopped previously by policy restarting ', ['suspendedroutes', 'size']]
camel sample_12670

['public void testFoo() throws Exception {']
['adding a route locally ', []]
camel sample_190

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BeanstalkComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.beanstalk.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.beanstalk.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_485

['public void testSendMessagesThenBrowseQueue() throws Exception {', 'for (int i = 0; i < expectedBodies.length; i++) {', 'Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=6", JmsQueueEndpoint.class);', 'assertEquals(6, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();']
['received ', ['list']]
camel sample_7066

['Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=6", JmsQueueEndpoint.class);', 'assertEquals(6, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();', 'assertEquals("Size of list", 6, endpoint.getExchanges().size());', 'int index = -1;', 'for (Exchange exchange : list) {', 'String actual = exchange.getIn().getBody(String.class);']
['received body ', ['actual']]
camel sample_7066

['public void testSendMessagesThenBrowseQueueLimitNotHit() throws Exception {', 'for (int i = 0; i < expectedBodies.length; i++) {', 'Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=10", JmsQueueEndpoint.class);', 'assertEquals(10, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();']
['received ', ['list']]
camel sample_7066

['Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=10", JmsQueueEndpoint.class);', 'assertEquals(10, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();', 'assertEquals("Size of list", 8, endpoint.getExchanges().size());', 'int index = -1;', 'for (Exchange exchange : list) {', 'String actual = exchange.getIn().getBody(String.class);']
['received body ', ['actual']]
camel sample_7066

['public void testSendMessagesThenBrowseQueueNoMax() throws Exception {', 'for (int i = 0; i < expectedBodies.length; i++) {', 'Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b", JmsQueueEndpoint.class);', 'assertEquals(-1, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();']
['received ', ['list']]
camel sample_7066

['Object expectedBody = expectedBodies[i];', 'template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i);', '}', 'JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b", JmsQueueEndpoint.class);', 'assertEquals(-1, endpoint.getMaximumBrowseSize());', 'List<Exchange> list = endpoint.getExchanges();', 'assertEquals("Size of list", 8, endpoint.getExchanges().size());', 'int index = -1;', 'for (Exchange exchange : list) {', 'String actual = exchange.getIn().getBody(String.class);']
['received body ', ['actual']]
camel sample_7066

['assertMockEndpointsSatisfied();', 'for (int i = 0; i < 50; i++) {', 'context.stopRoute("foo");', 'context.startRoute("foo");', '}', 'resetMocks();', 'getMockEndpoint("mock:foo").expectedMessageCount(1);', 'template.sendBodyAndHeader("file:target/leak", "Bye World", Exchange.FILE_NAME, "bye.txt");', 'assertMockEndpointsSatisfied();', 'int active = Thread.activeCount() - before;']
['active threads after restarts ', ['active']]
camel sample_3025

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<QueueServiceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.azure-queue.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.azure-queue.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1018

['public DefaultServerPipelineFactory(NettyServerBootstrapConfiguration configuration) {', 'this.consumer = null;', 'try {', 'this.sslContext = createSSLContext(null, configuration);', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_6677

['public DefaultServerPipelineFactory(NettyConsumer consumer) {', 'this.consumer = consumer;', 'try {', 'this.sslContext = createSSLContext(consumer.getContext(), consumer.getConfiguration());', '} catch (Exception e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'if (sslContext != null) {']
['created sslcontext ', ['sslcontext']]
camel sample_6677

['public ChannelPipeline getPipeline() throws Exception {', 'ChannelPipeline channelPipeline = Channels.pipeline();', 'SslHandler sslHandler = configureServerSSLOnDemand();', 'if (sslHandler != null) {', 'sslHandler.setCloseOnSSLException(true);']
['server ssl handler configured and added as an interceptor against the channelpipeline ', ['sslhandler']]
camel sample_6677

['for (int x = 0; x < decoders.size(); x++) {', 'ChannelHandler decoder = decoders.get(x);', 'if (decoder instanceof ChannelHandlerFactory) {', 'decoder = ((ChannelHandlerFactory) decoder).newChannelHandler();', '}', 'addToPipeline("decoder-" + x, channelPipeline, decoder);', '}', 'if (consumer.getConfiguration().isOrderedThreadPoolExecutor()) {', 'ExecutionHandler executionHandler = new ExecutionHandler(consumer.getEndpoint().getComponent().getExecutorService());', 'addToPipeline("executionHandler", channelPipeline, executionHandler);']
['using orderedmemoryawarethreadpoolexecutor with core pool size ', ['consumer', 'getconfiguration', 'getmaximumpoolsize']]
camel sample_6677

['if (decoder instanceof ChannelHandlerFactory) {', 'decoder = ((ChannelHandlerFactory) decoder).newChannelHandler();', '}', 'addToPipeline("decoder-" + x, channelPipeline, decoder);', '}', 'if (consumer.getConfiguration().isOrderedThreadPoolExecutor()) {', 'ExecutionHandler executionHandler = new ExecutionHandler(consumer.getEndpoint().getComponent().getExecutorService());', 'addToPipeline("executionHandler", channelPipeline, executionHandler);', '}', 'addToPipeline("handler", channelPipeline, new ServerChannelHandler(consumer));']
['created channelpipeline ', ['channelpipeline']]
camel sample_6677

['private SSLContext createSSLContext(CamelContext camelContext, NettyServerBootstrapConfiguration configuration) throws Exception {', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_6677

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_6677

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(camelContext);', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_6677

['public void start() throws Exception {', 'if (queue == null) {', 'AS400 system = endpoint.getSystem();', 'if (endpoint.isKeyed()) {', 'queue = new KeyedDataQueue(system, endpoint.getObjectPath());', '} else {', 'queue = new DataQueue(system, endpoint.getObjectPath());', '}', '}', 'if (!queue.getSystem().isConnected(AS400.DATAQUEUE)) {']
['connecting to ', ['endpoint']]
camel sample_16776

['public void stop() throws Exception {', 'if (queue != null) {']
['releasing connection to ', ['endpoint']]
camel sample_16776

['public void setUp() throws Exception {', 'log.info("*******************************************************************");']
['test ', ['testname', 'getmethodname']]
camel sample_5688

['exchange = pollingConsumer.receiveNoWait();', '} else if (timeout < 0) {', 'exchange = pollingConsumer.receive();', '} else {', 'exchange = pollingConsumer.receive(timeout);', '}', 'if (exchange == null) {', 'break;', '}', 'messagesPolled++;']
['polled ', ['messagespolled', 'exchange']]
camel sample_4099

['private Runnable createTask(boolean maxMessagesHit) {', 'return () -> {', 'try {', 'String tail;', 'if (maxMessagesHit) {', 'tail = " due max messages " + getMaxMessages() + " processed";', '} else {', 'tail = " due max seconds " + getMaxSeconds();', '}', 'if (action == Action.STOP_CAMEL_CONTEXT) {']
['stopping camelcontext ', ['tail']]
camel sample_4133

['try {', 'String tail;', 'if (maxMessagesHit) {', 'tail = " due max messages " + getMaxMessages() + " processed";', '} else {', 'tail = " due max seconds " + getMaxSeconds();', '}', 'if (action == Action.STOP_CAMEL_CONTEXT) {', 'camelContext.stop();', '} else if (action == Action.STOP_ROUTE) {']
['stopping route ', ['routeid', 'tail']]
camel sample_4133

['if (maxMessagesHit) {', 'tail = " due max messages " + getMaxMessages() + " processed";', '} else {', 'tail = " due max seconds " + getMaxSeconds();', '}', 'if (action == Action.STOP_CAMEL_CONTEXT) {', 'camelContext.stop();', '} else if (action == Action.STOP_ROUTE) {', 'camelContext.stopRoute(routeId);', '} else if (action == Action.SUSPEND_ROUTE) {']
['suspending route ', ['routeid', 'tail']]
camel sample_4133

['} else {', 'tail = " due max seconds " + getMaxSeconds();', '}', 'if (action == Action.STOP_CAMEL_CONTEXT) {', 'camelContext.stop();', '} else if (action == Action.STOP_ROUTE) {', 'camelContext.stopRoute(routeId);', '} else if (action == Action.SUSPEND_ROUTE) {', 'camelContext.suspendRoute(routeId);', '} else if (action == Action.SUSPEND_ALL_ROUTES) {']
['suspending all routes ', ['tail']]
camel sample_4133

['if (action == Action.STOP_CAMEL_CONTEXT) {', 'camelContext.stop();', '} else if (action == Action.STOP_ROUTE) {', 'camelContext.stopRoute(routeId);', '} else if (action == Action.SUSPEND_ROUTE) {', 'camelContext.suspendRoute(routeId);', '} else if (action == Action.SUSPEND_ALL_ROUTES) {', 'camelContext.suspend();', '}', '} catch (Throwable e) {']
['error performing action ', ['action', 'e']]
camel sample_4133

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext");', 'if (curator == null) {', 'try {', 'CuratorFramework aCurator = getCamelContext().getRegistry().lookupByNameAndType("curator", CuratorFramework.class);', 'if (aCurator != null) {']
['curatorframework found in camelregistry ', ['acurator']]
camel sample_9701

['connectString = zkHost + ":" + (zkPort == null ? "2181" : zkPort);', '}', '}', 'if (connectString == null) {', 'connectString = System.getProperty(ZOOKEEPER_URL, "localhost:2181");', '}', 'String password = getZooKeeperPassword();', 'if (password == null) {', 'System.getProperty(ZOOKEEPER_PASSWORD);', '}']
['creating new curatorframework with connection ', ['connectstring']]
camel sample_9701

['}', 'String password = getZooKeeperPassword();', 'if (password == null) {', 'System.getProperty(ZOOKEEPER_PASSWORD);', '}', 'CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder() .connectString(connectString) .retryPolicy(new RetryOneTime(1000)) .connectionTimeoutMs(getMaximumConnectionTimeout());', 'if (password != null && !password.isEmpty()) {', 'builder.authorization("digest", ("fabric:" + password).getBytes());', '}', 'curator = builder.build();']
['starting curatorframework ', ['curator']]
camel sample_9701

['public void stateChanged(CuratorFramework client, ConnectionState newState) {']
['curatorframework state changed ', ['newstate']]
camel sample_9701

['request.withPlacement(placement);', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.SUBNET_ID))) {', 'String subnetId = exchange.getIn().getHeader(EC2Constants.SUBNET_ID, String.class);', 'request.withSubnetId(subnetId);', '}', 'RunInstancesResult result;', 'try {', 'result = ec2Client.runInstances(request);', '} catch (AmazonServiceException ase) {']
['run instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.SUBNET_ID))) {', 'String subnetId = exchange.getIn().getHeader(EC2Constants.SUBNET_ID, String.class);', 'request.withSubnetId(subnetId);', '}', 'RunInstancesResult result;', 'try {', 'result = ec2Client.runInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['creating and running instances with ami and instance type ', ['ami', 'instancetype', 'tostring']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'StartInstancesResult result;', 'try {', 'result = ec2Client.startInstances(request);', '} catch (AmazonServiceException ase) {']
['start instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'StartInstancesResult result;', 'try {', 'result = ec2Client.startInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['starting instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'StopInstancesResult result;', 'try {', 'result = ec2Client.stopInstances(request);', '} catch (AmazonServiceException ase) {']
['stop instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'StopInstancesResult result;', 'try {', 'result = ec2Client.stopInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['stopping instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'TerminateInstancesResult result;', 'try {', 'result = ec2Client.terminateInstances(request);', '} catch (AmazonServiceException ase) {']
['terminate instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'TerminateInstancesResult result;', 'try {', 'result = ec2Client.terminateInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['terminating instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['Collection instanceIds;', 'DescribeInstancesRequest request = new DescribeInstancesRequest();', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '}', 'DescribeInstancesResult result;', 'try {', 'result = ec2Client.describeInstances(request);', '} catch (AmazonServiceException ase) {']
['describe instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['Collection instanceIds;', 'DescribeInstanceStatusRequest request = new DescribeInstanceStatusRequest();', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '}', 'DescribeInstanceStatusResult result;', 'try {', 'result = ec2Client.describeInstanceStatus(request);', '} catch (AmazonServiceException ase) {']
['describe instances status command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['private void rebootInstances(AmazonEC2Client ec2Client, Exchange exchange) {', 'Collection instanceIds;', 'RebootInstancesRequest request = new RebootInstancesRequest();', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'try {']
['rebooting instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['RebootInstancesRequest request = new RebootInstancesRequest();', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'try {', 'ec2Client.rebootInstances(request);', '} catch (AmazonServiceException ase) {']
['reboot instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'MonitorInstancesResult result;', 'try {', 'result = ec2Client.monitorInstances(request);', '} catch (AmazonServiceException ase) {']
['monitor instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'MonitorInstancesResult result;', 'try {', 'result = ec2Client.monitorInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['start monitoring instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS))) {', 'instanceIds = exchange.getIn().getHeader(EC2Constants.INSTANCES_IDS, Collection.class);', 'request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'UnmonitorInstancesResult result;', 'try {', 'result = ec2Client.unmonitorInstances(request);', '} catch (AmazonServiceException ase) {']
['unmonitor instances command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withInstanceIds(instanceIds);', '} else {', 'throw new IllegalArgumentException("Instances Ids must be specified");', '}', 'UnmonitorInstancesResult result;', 'try {', 'result = ec2Client.unmonitorInstances(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['stop monitoring instances with ids ', ['arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_TAGS))) {', 'tags = exchange.getIn().getHeader(EC2Constants.INSTANCES_TAGS, Collection.class);', 'request.withTags(tags);', '} else {', 'throw new IllegalArgumentException("Tags must be specified");', '}', 'CreateTagsResult result = new CreateTagsResult();', 'try {', 'result = ec2Client.createTags(request);', '} catch (AmazonServiceException ase) {']
['create tags command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withTags(tags);', '} else {', 'throw new IllegalArgumentException("Tags must be specified");', '}', 'CreateTagsResult result = new CreateTagsResult();', 'try {', 'result = ec2Client.createTags(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['created tags on resources with ids ', ['arrays', 'tostring', 'tags', 'toarray', 'arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EC2Constants.INSTANCES_TAGS))) {', 'tags = exchange.getIn().getHeader(EC2Constants.INSTANCES_TAGS, Collection.class);', 'request.withTags(tags);', '} else {', 'throw new IllegalArgumentException("Tags must be specified");', '}', 'DeleteTagsResult result = new DeleteTagsResult();', 'try {', 'result = ec2Client.deleteTags(request);', '} catch (AmazonServiceException ase) {']
['delete tags command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8813

['request.withTags(tags);', '} else {', 'throw new IllegalArgumentException("Tags must be specified");', '}', 'DeleteTagsResult result = new DeleteTagsResult();', 'try {', 'result = ec2Client.deleteTags(request);', '} catch (AmazonServiceException ase) {', 'throw ase;', '}']
['delete tags on resources with ids ', ['arrays', 'tostring', 'tags', 'toarray', 'arrays', 'tostring', 'instanceids', 'toarray']]
camel sample_8813

['public void testBeanOgnlPerformance() throws Exception {', 'StopWatch watch = new StopWatch();', 'getMockEndpoint("mock:result").expectedMessageCount(size);', 'for (int i = 0; i < size; i++) {', 'template.sendBody("direct:start", "Hello World");', '}', 'assertMockEndpointsSatisfied();']
['took millis ', ['watch', 'taken']]
camel sample_3249

['outputs = new HashMap<String, Map<String, String>>();', '}', 'if (getCamelContext().getManagementStrategy().getManagementAgent() != null) {', 'extended = getCamelContext().getManagementStrategy().getManagementAgent().getStatisticsLevel().isExtended();', '}', 'if (extended) {', 'inputUtilization = new DefaultEndpointUtilizationStatistics(limit);', 'outputUtilization = new DefaultEndpointUtilizationStatistics(limit);', '}', 'if (extended) {']
['runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints cache limit ', ['limit']]
camel sample_4076

['}', 'if (getCamelContext().getManagementStrategy().getManagementAgent() != null) {', 'extended = getCamelContext().getManagementStrategy().getManagementAgent().getStatisticsLevel().isExtended();', '}', 'if (extended) {', 'inputUtilization = new DefaultEndpointUtilizationStatistics(limit);', 'outputUtilization = new DefaultEndpointUtilizationStatistics(limit);', '}', 'if (extended) {', '} else {']
['runtime endpoint registry is in normal mode gathering information of all incoming and outgoing endpoints cache limit ', ['limit']]
camel sample_4076

['} catch (Exception e) {', 'e.printStackTrace();', 'break;', '}', '}', '}', '});', 'thread.start();', 'for (int i = 0; i < numberOfMessages; i++) {', 'if (i == 5) {']
['stopping mqtt transport ', []]
camel sample_16849

['}', '});', 'thread.start();', 'for (int i = 0; i < numberOfMessages; i++) {', 'if (i == 5) {', 'brokerService.getTransportConnectorByScheme("mqtt").stop();', 'Thread starter = new Thread(new Runnable() {', 'public void run() {', 'try {', 'Thread.sleep(3000);']
['starting mqtt transport again ', []]
camel sample_16849

['public Drive makeClient(String clientId, String clientSecret, Collection<String> scopes, String applicationName, String refreshToken, String accessToken) {', 'Credential credential;', 'try {', 'credential = authorize(clientId, clientSecret, scopes);', 'return new Drive.Builder(transport, jsonFactory, credential).setApplicationName(applicationName).build();', '} catch (Exception e) {']
['could not create google drive client ', ['e']]
camel sample_15418

['public void serve() {', 'try {', 'serverTransport_.listen();', '} catch (TTransportException ttx) {']
['error occurred during listening ', ['ttx']]
camel sample_13036

['retryCount++;', 'try {', 'if (remainTimeInMillis > 0) {', 'long sleepTimeInMillis = ((long)(random.nextDouble() * (1L << Math.min(retryCount, 20)))) * beBackoffSlotInMillis;', 'sleepTimeInMillis = Math.min(sleepTimeInMillis, remainTimeInMillis);', 'TimeUnit.MILLISECONDS.sleep(sleepTimeInMillis);', 'remainTimeInMillis = remainTimeInMillis - sleepTimeInMillis;', '} else {', 'client.close();', 'wp = null;']
['task has been rejected by executorservice times till timedout reason ', ['retrycount', 't']]
camel sample_13036

['long sleepTimeInMillis = ((long)(random.nextDouble() * (1L << Math.min(retryCount, 20)))) * beBackoffSlotInMillis;', 'sleepTimeInMillis = Math.min(sleepTimeInMillis, remainTimeInMillis);', 'TimeUnit.MILLISECONDS.sleep(sleepTimeInMillis);', 'remainTimeInMillis = remainTimeInMillis - sleepTimeInMillis;', '} else {', 'client.close();', 'wp = null;', 'break;', '}', '} catch (InterruptedException e) {']
['interrupted while waiting to place client on executor queue ', []]
camel sample_13036

['} else {', 'client.close();', 'wp = null;', 'break;', '}', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();', 'break;', '}', '} else if (t instanceof Error) {']
['executorservice threw error ', ['t', 't']]
camel sample_13036

['wp = null;', 'break;', '}', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();', 'break;', '}', '} else if (t instanceof Error) {', 'throw (Error)t;', '} else {']
['executorservice threw error ', ['t', 't']]
camel sample_13036

['} else if (t instanceof Error) {', 'throw (Error)t;', '} else {', 'break;', '}', '}', '}', '} catch (TTransportException ttx) {', 'if (!stopped_) {', '++failureCount;']
['transport error occurred during acceptance of message ', ['ttx']]
camel sample_13036

['if (eventHandler != null) {', 'eventHandler.processContext(connectionContext, inputTransport, outputTransport);', '}', 'if (stopped_ || !processor.process(inputProtocol, outputProtocol)) {', 'break;', '}', '}', '} catch (TSaslTransportException ttx) {', '} catch (TTransportException ttx) {', '} catch (TException tx) {']
['thrift error occurred during processing of message ', ['tx']]
camel sample_13036

['eventHandler.processContext(connectionContext, inputTransport, outputTransport);', '}', 'if (stopped_ || !processor.process(inputProtocol, outputProtocol)) {', 'break;', '}', '}', '} catch (TSaslTransportException ttx) {', '} catch (TTransportException ttx) {', '} catch (TException tx) {', '} catch (Exception x) {']
['error occurred during processing of message ', ['x']]
camel sample_13036

['public void populateCamelHeaders(HttpServerExchange httpExchange, Map<String, Object> headersMap, Exchange exchange) throws Exception {']
['populatecamelheaders ', []]
camel sample_13173

['if (endpoint.getHttpURI() != null) {', 'String endpointPath = endpoint.getHttpURI().getPath();', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = endpointPath.toLowerCase(Locale.US);', 'if (matchPath.startsWith(match)) {', 'path = path.substring(endpointPath.length());', '}', '}', 'headersMap.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http method ', ['httpexchange', 'getrequestmethod']]
camel sample_13173

['if (endpoint.getHttpURI() != null) {', 'String endpointPath = endpoint.getHttpURI().getPath();', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = endpointPath.toLowerCase(Locale.US);', 'if (matchPath.startsWith(match)) {', 'path = path.substring(endpointPath.length());', '}', '}', 'headersMap.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http uri ', ['httpexchange', 'getrequesturi']]
camel sample_13173

['String value = httpExchange.getRequestHeaders().get(name).toString();', 'if (value != null && value.trim().startsWith("Basic")) {', 'if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(Exchange.AUTHENTICATION, "Basic", exchange)) {', 'UndertowHelper.appendHeader(headersMap, Exchange.AUTHENTICATION, "Basic");', '}', '}', '}', 'Iterator<?> it = httpExchange.getRequestHeaders().get(name).iterator();', 'while (it.hasNext()) {', 'Object value = it.next();']
['http header ', ['value']]
camel sample_13173

['}', '}', 'Map<String, Deque<String>> pathParameters = httpExchange.getQueryParameters();', 'if (!pathParameters.isEmpty()) {', 'for (Map.Entry<String, Deque<String>> entry : pathParameters.entrySet()) {', 'String name = entry.getKey();', 'Object values = entry.getValue();', 'Iterator<?> it = ObjectHelper.createIterator(values);', 'while (it.hasNext()) {', 'Object value = it.next();']
['uri parameter ', ['value']]
camel sample_13173

['if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name, value, exchange)) {', 'UndertowHelper.appendHeader(headersMap, name, value);', '}', '}', '}', '}', 'Map<String, Object> predicateContextParams = httpExchange.getAttachment(Predicate.PREDICATE_CONTEXT);', 'if (predicateContextParams != null) {', 'predicateContextParams.remove("remaining");', 'for (String paramName : predicateContextParams.keySet()) {']
['rest template variable ', ['paramname', 'predicatecontextparams', 'get', 'paramname']]
camel sample_13173

['public void populateCamelHeaders(ClientResponse response, Map<String, Object> headersMap, Exchange exchange) throws Exception {']
['populatecamelheaders ', []]
camel sample_13173

['String value = response.getResponseHeaders().get(name).toString();', 'if (value != null && value.trim().startsWith("Basic")) {', 'if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(Exchange.AUTHENTICATION, "Basic", exchange)) {', 'UndertowHelper.appendHeader(headersMap, Exchange.AUTHENTICATION, "Basic");', '}', '}', '}', 'Iterator<?> it = response.getResponseHeaders().get(name).iterator();', 'while (it.hasNext()) {', 'Object value = it.next();']
['http header ', ['value']]
camel sample_13173

['PrintWriter pw = new PrintWriter(sw);', 'exception.printStackTrace(pw);', 'body = ByteBuffer.wrap(sw.toString().getBytes());', 'message.setHeader(Exchange.CONTENT_TYPE, "text/plain");', '}', 'ExchangeHelper.setFailureHandled(message.getExchange());', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'httpExchange.getResponseHeaders().put(Headers.CONTENT_TYPE, contentType);']
['content type ', ['contenttype']]
camel sample_13173

['public Object toHttpRequest(ClientRequest clientRequest, Message message) {', 'Object body = message.getBody();', 'final HeaderMap requestHeaders = clientRequest.getRequestHeaders();', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'requestHeaders.put(Headers.CONTENT_TYPE, contentType);']
['content type ', ['contenttype']]
camel sample_13173

['public void testSuccess() throws Exception {', 'sendMessage();', 'assertTrue("Exchange did not complete.", doneLatch.await(5, TimeUnit.SECONDS));', 'assertNull("Should not have failed", failed);', 'assertNotNull("Should have received completed notification", completed);', 'assertEquals("Should have propagated the header inside the Synchronization.onComplete() callback", "bar", foo);', 'assertNull("The Synchronization.onFailure() callback should have not been invoked", baz);']
['received completed ', ['completed']]
camel sample_2233

['public void testFail() throws Exception {', 'sendMessage();', 'assertTrue("Exchange did not complete.", doneLatch.await(5, TimeUnit.SECONDS));', 'assertNull("Should not have completed", completed);', 'assertNotNull("Should have received failed notification", failed);', 'assertEquals("Should have propagated the header inside the Synchronization.onFailure() callback", "bat", baz);', 'assertNull("The Synchronization.onComplete() callback should have not been invoked", foo);']
['received fail ', ['failed']]
camel sample_2233

['public void testException() throws Exception {', 'sendMessage();', 'assertTrue("Exchange did not complete.", doneLatch.await(5, TimeUnit.SECONDS));', 'assertNull("Should not have completed", completed);', 'assertNotNull("Should have received failed notification", failed);', 'assertEquals("Should have propagated the header inside the Synchronization.onFailure() callback", "bat", baz);', 'assertNull("The Synchronization.onComplete() callback should have not been invoked", foo);']
['received fail ', ['failed']]
camel sample_2233

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("seda:async").to("direct:foo");', 'from("direct:foo").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['received ', ['exchange']]
camel sample_2233

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("seda:async").to("direct:foo");', 'from("direct:foo").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.getUnitOfWork().addSynchronization(synchronization);', 'String name = getName();', 'if (name.equals("testFail")) {']
['failing test ', []]
camel sample_2233

['public void configure() {', 'from("seda:async").to("direct:foo");', 'from("direct:foo").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.getUnitOfWork().addSynchronization(synchronization);', 'String name = getName();', 'if (name.equals("testFail")) {', 'exchange.getOut().setFault(true);', 'exchange.getOut().setBody("testFail() should always fail with a fault!");', '} else if (name.equals("testException")) {']
['throwing exception ', []]
camel sample_2233

['public void test() throws Exception {', 'CamelContext context = new DefaultCamelContext();', 'context.addRoutes(createRouteBuilder());', 'SjmsComponent component = context.getComponent("sjms", SjmsComponent.class);', 'component.setConnectionFactory(CamelJmsTestHelper.createConnectionFactory());', 'try {', 'context.start();', '} catch (Throwable t) {']
['exception was thrown as expected ', ['t']]
camel sample_12332

['type = "silver";', '} else if (i % 2 == 0) {', 'type = "gold";', '} else {', 'type = "bronze";', '}', 'template.sendBodyAndHeader("activemq:queue:inbox", "Message " + i, "type", type);', '}', 'assertMockEndpointsSatisfied();', 'long delta = System.currentTimeMillis() - start;']
['routeperformancetest sent took ms ', ['size', 'delta']]
camel sample_7031

['public void initAnnotatedFields() {', 'for (Class<?> cl : models) {', 'List<Field> linkFields = new ArrayList<Field>();', 'for (Field field : cl.getDeclaredFields()) {', 'KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class);', 'if (keyValuePairField != null) {', 'if (LOG.isDebugEnabled()) {']
['key declared in the class key field ', ['new', 'object', 'cl', 'getname', 'keyvaluepairfield', 'tag', 'keyvaluepairfield']]
camel sample_7461

['KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class);', 'if (keyValuePairField != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'keyValuePairFields.put(keyValuePairField.tag(), keyValuePairField);', 'annotatedFields.put(keyValuePairField.tag(), field);', '}', 'Link linkField = field.getAnnotation(Link.class);', 'if (linkField != null) {', 'if (LOG.isDebugEnabled()) {']
['class linked field ', ['cl', 'getname', 'field']]
camel sample_7461

['public void bind(CamelContext camelContext, List<String> data, Map<String, Object> model, int line, Map<String, List<Object>> lists) throws Exception {', 'Map<Integer, List<String>> results = new HashMap<Integer, List<String>>();']
['key value pairs data ', ['data']]
camel sample_7461

['public void bind(CamelContext camelContext, List<String> data, Map<String, Object> model, int line, Map<String, List<Object>> lists) throws Exception {', 'Map<Integer, List<String>> results = new HashMap<Integer, List<String>>();', 'ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation");', 'for (String s : data) {', 'String[] keyValuePair = s.split(getKeyValuePairSeparator());', 'if (keyValuePair.length > 1) {', 'int key = Integer.parseInt(keyValuePair[0]);', 'String value = keyValuePair[1];']
['key value ', ['key', 'value']]
camel sample_7461

['}', '} else {', 'if (values.size() >= 1) {', 'if (obj != null) {', 'value = values.get(0);', 'Object result = null;', 'if (value != null) {', 'FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField, field.getType(), field.getAnnotation(BindyConverter.class), getLocale());', 'Format<?> format = formatFactory.getFormat(formattingOptions);', 'result = formatField(format, value, key, line);']
['value formated ', ['result']]
camel sample_7461

['for (int i = 0; i < values.size(); i++) {', 'if ((!l.isEmpty()) && (l.size() > i)) {', 'obj = l.get(i);', '} else {', 'obj = clazz.newInstance();', '}', 'value = values.get(i);', 'FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField, field.getType(), field.getAnnotation(BindyConverter.class), getLocale());', 'Format<?> format = formatFactory.getFormat(formattingOptions);', 'Object result = formatField(format, value, key, line);']
['value formated ', ['result']]
camel sample_7461

['public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {', 'StringBuilder builder = new StringBuilder();', 'Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields);', 'Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator();', 'Map<Integer, String> positions = new TreeMap<Integer, String>();', 'ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation");', 'char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator());', 'if (LOG.isDebugEnabled()) {']
['separator converted from ', ['integer', 'tohexstring', 'separator', 'this', 'getpairseparator']]
camel sample_7461

['ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation");', 'char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator());', 'if (LOG.isDebugEnabled()) {', '}', 'while (it.hasNext()) {', 'KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next());', 'ObjectHelper.notNull(keyValuePairField, "KeyValuePair");', 'Field field = annotatedFields.get(keyValuePairField.tag());', 'field.setAccessible(true);', 'if (LOG.isDebugEnabled()) {']
['tag field type class ', ['new', 'object', 'keyvaluepairfield', 'tag', 'field', 'gettype', 'field', 'getdeclaringclass', 'getname']]
camel sample_7461

['}', 'Class<?> type = field.getType();', 'FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField, field.getType(), field.getAnnotation(BindyConverter.class), getLocale());', 'Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions);', 'Object obj = model.get(field.getDeclaringClass().getName());', 'if (obj != null) {', 'Object keyValue = field.get(obj);', 'if (this.isMessageOrdered()) {', 'Integer key1 = sections.get(obj.getClass().getName());', 'Integer key2 = keyValuePairField.position();']
['key of the section and the field ', []]
camel sample_7461

['FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField, field.getType(), field.getAnnotation(BindyConverter.class), getLocale());', 'Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions);', 'Object obj = model.get(field.getDeclaringClass().getName());', 'if (obj != null) {', 'Object keyValue = field.get(obj);', 'if (this.isMessageOrdered()) {', 'Integer key1 = sections.get(obj.getClass().getName());', 'Integer key2 = keyValuePairField.position();', 'Integer keyGenerated = generateKey(key1, key2);', 'if (LOG.isDebugEnabled()) {']
['key generated for section ', ['string', 'valueof', 'keygenerated']]
camel sample_7461

['}', 'if (keyValue != null) {', 'String valueFormatted;', 'try {', 'valueFormatted = format.format(keyValue);', '} catch (Exception e) {', 'throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e);', '}', 'String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted;', 'if (LOG.isDebugEnabled()) {']
['value to be formatted for the tag and its formatted value ', ['new', 'object', 'keyvalue', 'keyvaluepairfield', 'tag', 'valueformatted']]
camel sample_7461

['try {', 'valueFormatted = format.format(keyValue);', '} catch (Exception e) {', 'throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e);', '}', 'String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted;', 'if (LOG.isDebugEnabled()) {', '}', 'positions.put(keyGenerated, value);', 'if (LOG.isDebugEnabled()) {']
['positions size ', ['positions', 'size']]
camel sample_7461

['if (keyValue != null) {', 'String valueFormatted;', 'try {', 'valueFormatted = format.format(keyValue);', '} catch (Exception e) {', 'throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e);', '}', 'String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator;', 'builder.append(value);', 'if (LOG.isDebugEnabled()) {']
['value added ', ['new', 'object', 'keyvaluepairfield', 'tag', 'this', 'getkeyvaluepairseparator', 'valueformatted', 'separator']]
camel sample_7461

['}', '}', '}', '}', '}', 'if (this.isMessageOrdered()) {', 'Iterator<Integer> posit = positions.keySet().iterator();', 'while (posit.hasNext()) {', 'String value = positions.get(posit.next());', 'if (LOG.isDebugEnabled()) {']
['value added at the position ', ['new', 'object', 'posit', 'value', 'separator']]
camel sample_7461

['private void initMessageParameters() {', 'if ((pairSeparator == null) || (keyValuePairSeparator == null)) {', 'for (Class<?> cl : models) {', 'Message message = cl.getAnnotation(Message.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (message != null) {', 'ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation");', 'pairSeparator = message.pairSeparator();']
['pair separator defined for the message ', ['pairseparator']]
camel sample_7461

['private void initMessageParameters() {', 'if ((pairSeparator == null) || (keyValuePairSeparator == null)) {', 'for (Class<?> cl : models) {', 'Message message = cl.getAnnotation(Message.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (message != null) {', 'ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation");', 'pairSeparator = message.pairSeparator();', 'ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation");', 'keyValuePairSeparator = message.keyValuePairSeparator();']
['key value pair separator defined for the message ', ['keyvaluepairseparator']]
camel sample_7461

['if ((pairSeparator == null) || (keyValuePairSeparator == null)) {', 'for (Class<?> cl : models) {', 'Message message = cl.getAnnotation(Message.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (message != null) {', 'ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation");', 'pairSeparator = message.pairSeparator();', 'ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation");', 'keyValuePairSeparator = message.keyValuePairSeparator();', 'crlf = message.crlf();']
['carriage return defined for the message ', ['crlf']]
camel sample_7461

['for (Class<?> cl : models) {', 'Message message = cl.getAnnotation(Message.class);', 'Section section = cl.getAnnotation(Section.class);', 'if (message != null) {', 'ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation");', 'pairSeparator = message.pairSeparator();', 'ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation");', 'keyValuePairSeparator = message.keyValuePairSeparator();', 'crlf = message.crlf();', 'messageOrdered = message.isOrdered();']
['is the message ordered in output ', ['messageordered']]
camel sample_7461

['consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);', '}', 'if (producerConfig == null) {', 'producerConfig = new Properties();', 'StringHelper.notEmpty(bootstrapServers, "bootstrapServers");', 'producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);', '}', 'ObjectHelper.notNull(consumerConfig, "consumerConfig");', 'ObjectHelper.notNull(producerConfig, "producerConfig");', 'String groupId = UUID.randomUUID().toString();']
['creating consumer with ', ['consumerconfig', 'group', 'id', 'config', 'groupid']]
camel sample_16408

['consumer = new KafkaConsumer<>(consumerConfig);', 'producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());', 'producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());', 'producerConfig.putIfAbsent(ProducerConfig.ACKS_CONFIG, "1");', 'producerConfig.putIfAbsent(ProducerConfig.BATCH_SIZE_CONFIG, "0");', 'producer = new KafkaProducer<>(producerConfig);', 'cacheReadyLatch = new CountDownLatch(1);', 'topicPoller = new TopicPoller(consumer, cacheReadyLatch, pollDurationMs);', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "KafkaIdempotentRepository");', 'executorService.submit(topicPoller);']
['warming up cache from topic ', ['topic']]
camel sample_16408

['producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());', 'producerConfig.putIfAbsent(ProducerConfig.ACKS_CONFIG, "1");', 'producerConfig.putIfAbsent(ProducerConfig.BATCH_SIZE_CONFIG, "0");', 'producer = new KafkaProducer<>(producerConfig);', 'cacheReadyLatch = new CountDownLatch(1);', 'topicPoller = new TopicPoller(consumer, cacheReadyLatch, pollDurationMs);', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "KafkaIdempotentRepository");', 'executorService.submit(topicPoller);', 'try {', 'if (cacheReadyLatch.await(30, TimeUnit.SECONDS)) {']
['cache ok ', []]
camel sample_16408

['producerConfig.putIfAbsent(ProducerConfig.ACKS_CONFIG, "1");', 'producerConfig.putIfAbsent(ProducerConfig.BATCH_SIZE_CONFIG, "0");', 'producer = new KafkaProducer<>(producerConfig);', 'cacheReadyLatch = new CountDownLatch(1);', 'topicPoller = new TopicPoller(consumer, cacheReadyLatch, pollDurationMs);', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "KafkaIdempotentRepository");', 'executorService.submit(topicPoller);', 'try {', 'if (cacheReadyLatch.await(30, TimeUnit.SECONDS)) {', '} else {']
['timeout waiting for cache warm up from topic proceeding anyway duplicate records may not be detected ', ['topic']]
camel sample_16408

['producer = new KafkaProducer<>(producerConfig);', 'cacheReadyLatch = new CountDownLatch(1);', 'topicPoller = new TopicPoller(consumer, cacheReadyLatch, pollDurationMs);', 'executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "KafkaIdempotentRepository");', 'executorService.submit(topicPoller);', 'try {', 'if (cacheReadyLatch.await(30, TimeUnit.SECONDS)) {', '} else {', '}', '} catch (InterruptedException e) {']
['interrupted while warming up cache this exception is ignored ', ['e', 'getmessage']]
camel sample_16408

['protected void doStop() {', 'topicPoller.setRunning(false);', 'try {', 'if (topicPoller.getShutdownLatch().await(30, TimeUnit.SECONDS)) {']
['cache from topic shutdown successfully ', ['topic']]
camel sample_16408

['protected void doStop() {', 'topicPoller.setRunning(false);', 'try {', 'if (topicPoller.getShutdownLatch().await(30, TimeUnit.SECONDS)) {', '} else {']
['timeout waiting for cache to shutdown from topic proceeding anyway ', ['topic']]
camel sample_16408

['protected void doStop() {', 'topicPoller.setRunning(false);', 'try {', 'if (topicPoller.getShutdownLatch().await(30, TimeUnit.SECONDS)) {', '} else {', '}', '} catch (InterruptedException e) {']
['interrupted waiting on shutting down cache due this exception is ignored ', ['e', 'getmessage']]
camel sample_16408

['private void broadcastAction(String key, CacheAction action) {', 'try {']
['broadcasting action for key ', ['action', 'key']]
camel sample_16408

['public boolean contains(String key) {']
['checking cache for key ', ['key']]
camel sample_16408

['public void run() {']
['subscribing consumer to ', ['topic']]
camel sample_16408

['public void run() {', 'consumer.subscribe(Collections.singleton(topic));']
['seeking to beginning ', []]
camel sample_16408

['public void run() {', 'consumer.subscribe(Collections.singleton(topic));', 'consumer.seekToBeginning(consumer.assignment());', 'POLL_LOOP: while (running.get()) {']
['Polling ', []]
camel sample_16408

['public void run() {', 'consumer.subscribe(Collections.singleton(topic));', 'consumer.seekToBeginning(consumer.assignment());', 'POLL_LOOP: while (running.get()) {', 'ConsumerRecords<String, String> consumerRecords = consumer.poll(pollDurationMs);', 'if (consumerRecords.isEmpty()) {']
['messages fetched on poll ', []]
camel sample_16408

['public void run() {', 'consumer.subscribe(Collections.singleton(topic));', 'consumer.seekToBeginning(consumer.assignment());', 'POLL_LOOP: while (running.get()) {', 'ConsumerRecords<String, String> consumerRecords = consumer.poll(pollDurationMs);', 'if (consumerRecords.isEmpty()) {', 'if (cacheReadyLatch.getCount() > 0) {']
['cache warmed up ', []]
camel sample_16408

['if (consumerRecords.isEmpty()) {', 'if (cacheReadyLatch.getCount() > 0) {', 'cacheReadyLatch.countDown();', '}', '}', 'for (ConsumerRecord<String, String> consumerRecord: consumerRecords) {', 'CacheAction action;', 'try {', 'action = CacheAction.valueOf(consumerRecord.value());', '} catch (IllegalArgumentException iax) {']
['unexpected action value received on topic partition offset shutting down ', ['consumerrecord', 'key', 'consumerrecord', 'topic', 'consumerrecord', 'partition', 'consumerrecord', 'offset']]
camel sample_16408

['for (ConsumerRecord<String, String> consumerRecord: consumerRecords) {', 'CacheAction action;', 'try {', 'action = CacheAction.valueOf(consumerRecord.value());', '} catch (IllegalArgumentException iax) {', 'setRunning(false);', 'continue POLL_LOOP;', '}', 'String messageId = consumerRecord.key();', 'if (action == CacheAction.add) {']
['adding to cache messageid ', ['messageid']]
camel sample_16408

['try {', 'action = CacheAction.valueOf(consumerRecord.value());', '} catch (IllegalArgumentException iax) {', 'setRunning(false);', 'continue POLL_LOOP;', '}', 'String messageId = consumerRecord.key();', 'if (action == CacheAction.add) {', 'cache.put(messageId, messageId);', '} else if (action == CacheAction.remove) {']
['removing from cache messageid ', ['messageid']]
camel sample_16408

['continue POLL_LOOP;', '}', 'String messageId = consumerRecord.key();', 'if (action == CacheAction.add) {', 'cache.put(messageId, messageId);', '} else if (action == CacheAction.remove) {', 'cache.remove(messageId);', '} else if (action == CacheAction.clear) {', 'cache.clear();', '} else {']
['no idea how to a record shutting down ', ['action']]
camel sample_16408

['} else if (action == CacheAction.remove) {', 'cache.remove(messageId);', '} else if (action == CacheAction.clear) {', 'cache.clear();', '} else {', 'setRunning(false);', 'continue POLL_LOOP;', '}', '}', '}']
['topicpoller finished triggering shutdown latch ', []]
camel sample_16408

['public void testRouteAddSecondRoute() throws Exception {', 'if (isPlatform("aix")) {', 'return;', '}', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName route1 = ObjectName.getInstance("org.apache.camel:context=camel-1,type=routes,name=\\"foo\\"");', 'String state = (String) mbeanServer.getAttribute(route1, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);']
['adding route ', []]
camel sample_2819

['}', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName route1 = ObjectName.getInstance("org.apache.camel:context=camel-1,type=routes,name=\\"foo\\"");', 'String state = (String) mbeanServer.getAttribute(route1, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:bar").routeId("bar").to("mock:bar");', '}', '});']
['adding route done ', []]
camel sample_2819

['public void testQuartzPersistentStoreClusteredApp() throws Exception {', 'AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml");', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml");']
['the first app is going to crash now ', []]
camel sample_14966

['public void testQuartzPersistentStoreClusteredApp() throws Exception {', 'AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml");', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml");', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14966

['public void testQuartzPersistentStoreClusteredApp() throws Exception {', 'AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml");', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml");', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14966

['public void testQuartzPersistentStoreClusteredApp() throws Exception {', 'AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml");', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml");', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14966

['public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {']
['asserting is satisfied ', ['this']]
camel sample_4867

['public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {', 'doAssertIsSatisfied(timeoutForEmptyEndpoints);', 'if (assertPeriod > 0) {', 'Thread.sleep(assertPeriod);']
['re asserting is satisfied after millis ', ['this', 'assertperiod']]
camel sample_4867

['protected void doAssertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {', 'if (expectedCount == 0) {', 'if (timeoutForEmptyEndpoints > 0) {']
['sleeping for millis to check there really are no messages received ', ['timeoutforemptyendpoints']]
camel sample_4867

['}', 'if (expectedMinimumCount >= 0) {', 'int receivedCounter = getReceivedCounter();', 'assertTrue("Received message count " + receivedCounter + ", expected at least " + expectedMinimumCount, expectedMinimumCount <= receivedCounter);', '}', 'for (Runnable test : tests) {', 'test.run();', '}', 'for (Throwable failure : failures) {', 'if (failure != null) {']
['caught on exception ', ['getendpointuri', 'failure', 'failure']]
camel sample_4867

['public void assertIsNotSatisfied() throws InterruptedException {', 'boolean failed = false;', 'try {', 'assertIsSatisfied();', 'failed = true;', '} catch (AssertionError e) {']
['caught expected failure ', ['e']]
camel sample_4867

['public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {', 'boolean failed = false;', 'try {', 'assertIsSatisfied(timeoutForEmptyEndpoints);', 'failed = true;', '} catch (AssertionError e) {']
['caught expected failure ', ['e']]
camel sample_4867

['protected void waitForCompleteLatch() throws InterruptedException {', 'if (latch == null) {', 'fail("Should have a latch!");', '}', 'StopWatch watch = new StopWatch();', 'waitForCompleteLatch(resultWaitTime);', 'long delta = watch.taken();']
['took millis to complete latch ', ['delta']]
camel sample_4867

['protected void waitForCompleteLatch(long timeout) throws InterruptedException {', 'long waitTime = timeout == 0 ? 10000L : timeout;']
['waiting on the latch for millis ', ['timeout']]
camel sample_4867

['protected void fail(Object message) {', 'if (LOG.isDebugEnabled()) {', 'List<Exchange> list = getReceivedExchanges();', 'int index = 0;', 'for (Exchange exchange : list) {']
['failed and received ', ['new', 'object', 'getendpointuri', 'index', 'exchange']]
camel sample_4867

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyMethodCallRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_201

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyMethodCallRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_201

['protected QuartzEndpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {', 'URI u = new URI(uri);', 'String path = ObjectHelper.after(u.getPath(), "/");', 'String host = u.getHost();', 'String cron = getAndRemoveParameter(parameters, "cron", String.class);', 'boolean fireNow = getAndRemoveParameter(parameters, "fireNow", Boolean.class, Boolean.FALSE);', 'Integer startDelayedSeconds = getAndRemoveParameter(parameters, "startDelayedSeconds", Integer.class);', 'if (startDelayedSeconds != null) {', 'if (scheduler.isStarted()) {']
['a quartz job is already started cannot apply the startdelayedseconds configuration ', []]
camel sample_17219

['protected QuartzEndpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {', 'URI u = new URI(uri);', 'String path = ObjectHelper.after(u.getPath(), "/");', 'String host = u.getHost();', 'String cron = getAndRemoveParameter(parameters, "cron", String.class);', 'boolean fireNow = getAndRemoveParameter(parameters, "fireNow", Boolean.class, Boolean.FALSE);', 'Integer startDelayedSeconds = getAndRemoveParameter(parameters, "startDelayedSeconds", Integer.class);', 'if (startDelayedSeconds != null) {', 'if (scheduler.isStarted()) {', '} else if (this.startDelayedSeconds != 0 && !(this.startDelayedSeconds == startDelayedSeconds)) {']
['a quartz job is already configured with a different startdelayedseconds configuration all quartz jobs must share the same startdelayedseconds configuration cannot apply the startdelayedseconds configuration ', []]
camel sample_17219

['public void onCamelContextStarted(CamelContext camelContext, boolean alreadyStarted) throws Exception {', 'if (scheduler != null) {', 'String uid = QuartzHelper.getQuartzContextName(camelContext);', 'scheduler.getContext().put(QuartzConstants.QUARTZ_CAMEL_CONTEXT + "-" + uid, camelContext);', '}', 'if (!isAutoStartScheduler()) {']
['quartzcomponent configured to not auto start quartz scheduler ', []]
camel sample_17219

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduler != null) {', 'AtomicInteger number = (AtomicInteger) scheduler.getContext().get("CamelJobs");', 'if (number != null && number.get() > 0) {']
['cannot shutdown quartz scheduler as there are still jobs registered ', ['scheduler', 'getschedulername', 'number', 'get']]
camel sample_17219

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduler != null) {', 'AtomicInteger number = (AtomicInteger) scheduler.getContext().get("CamelJobs");', 'if (number != null && number.get() > 0) {', '} else {']
['there are no more jobs registered so shutting down quartz scheduler ', ['scheduler', 'getschedulername']]
camel sample_17219

['private void doAddJob(JobDetail job, Trigger trigger) throws SchedulerException {', 'Trigger existingTrigger = getScheduler().getTrigger(trigger.getName(), trigger.getGroup());', 'if (existingTrigger == null) {']
['adding job using trigger ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['private void doAddJob(JobDetail job, Trigger trigger) throws SchedulerException {', 'Trigger existingTrigger = getScheduler().getTrigger(trigger.getName(), trigger.getGroup());', 'if (existingTrigger == null) {', 'getScheduler().scheduleJob(job, trigger);', '} else if (hasTriggerChanged(existingTrigger, trigger)) {']
['trigger already exists and will be updated by quartz ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['getScheduler().scheduleJob(job, trigger);', '} else if (hasTriggerChanged(existingTrigger, trigger)) {', 'trigger.setStartTime(new Date());', 'scheduler.unscheduleJob(trigger.getName(), trigger.getGroup());', 'scheduler.addJob(job, true);', 'trigger.setJobName(job.getName());', 'trigger.setJobGroup(job.getGroup());', 'scheduler.scheduleJob(trigger);', '} else {', 'if (!isClustered()) {']
['trigger already exists and will be resumed by quartz ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['scheduler.scheduleJob(trigger);', '} else {', 'if (!isClustered()) {', 'trigger.setStartTime(new Date());', 'scheduler.unscheduleJob(trigger.getName(), trigger.getGroup());', 'scheduler.addJob(job, true);', 'trigger.setJobName(job.getName());', 'trigger.setJobGroup(job.getGroup());', 'scheduler.scheduleJob(trigger);', '} else {']
['trigger already exists and is already scheduled by clustered jobstore ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['public void pauseJob(Trigger trigger) throws SchedulerException {', 'if (isClustered()) {']
['cannot pause job using trigger as the jobstore is clustered ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['public void pauseJob(Trigger trigger) throws SchedulerException {', 'if (isClustered()) {', '} else {']
['pausing job using trigger ', ['trigger', 'getgroup', 'trigger', 'getname']]
camel sample_17219

['public void deleteJob(String name, String group) throws SchedulerException {', 'if (isClustered()) {']
['cannot delete job using trigger as the jobstore is clustered ', ['group', 'name']]
camel sample_17219

['public void deleteJob(String name, String group) throws SchedulerException {', 'if (isClustered()) {', '} else {', 'Trigger trigger = getScheduler().getTrigger(name, group);', 'if (trigger != null) {']
['deleting job using trigger ', ['group', 'name']]
camel sample_17219

['public void shutdownScheduler() throws SchedulerException {', 'if (scheduler != null) {']
['forcing shutdown of quartz scheduler ', ['scheduler', 'getschedulername']]
camel sample_17219

['public boolean isClustered() throws SchedulerException {', 'try {', 'return getScheduler().getMetaData().isJobStoreClustered();', '} catch (NoSuchMethodError e) {']
['job clustering is only supported since quartz isclustered returning false ', []]
camel sample_17219

['public void startScheduler() throws SchedulerException {', 'for (JobToAdd add : jobsToAdd) {', 'doAddJob(add.getJob(), add.getTrigger());', '}', 'jobsToAdd.clear();', 'if (!getScheduler().isStarted()) {', 'if (getStartDelayedSeconds() > 0) {']
['starting quartz scheduler delayed seconds ', ['getscheduler', 'getschedulername', 'getstartdelayedseconds']]
camel sample_17219

['public void startScheduler() throws SchedulerException {', 'for (JobToAdd add : jobsToAdd) {', 'doAddJob(add.getJob(), add.getTrigger());', '}', 'jobsToAdd.clear();', 'if (!getScheduler().isStarted()) {', 'if (getStartDelayedSeconds() > 0) {', 'try {', 'getScheduler().startDelayed(getStartDelayedSeconds());', '} catch (NoSuchMethodError e) {']
['your version of quartz is too old to support delayed startup starting quartz scheduler immediately ', ['getscheduler', 'getschedulername']]
camel sample_17219

['}', 'jobsToAdd.clear();', 'if (!getScheduler().isStarted()) {', 'if (getStartDelayedSeconds() > 0) {', 'try {', 'getScheduler().startDelayed(getStartDelayedSeconds());', '} catch (NoSuchMethodError e) {', 'getScheduler().start();', '}', '} else {']
['starting quartz scheduler ', ['getscheduler', 'getschedulername']]
camel sample_17219

['protected Properties loadProperties() throws SchedulerException {', 'Properties answer = getProperties();', 'if (answer == null && getPropertiesFile() != null) {']
['loading quartz properties file from ', ['getpropertiesfile']]
camel sample_17219

['prop.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, instName);', 'prop.put("org.quartz.scheduler.skipUpdateCheck", "true");', 'if (enableJmx && !prop.containsKey("org.quartz.scheduler.jmx.export")) {', 'prop.put("org.quartz.scheduler.jmx.export", "true");', 'LOG.info("Setting org.quartz.scheduler.jmx.export=true to ensure QuartzScheduler(s) will be enlisted in JMX.");', '}', 'answer = new StdSchedulerFactory(prop);', '}', 'if (LOG.isDebugEnabled()) {', 'String name = prop.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME);']
['creating schedulerfactory with properties ', ['name', 'prop']]
camel sample_17219

['protected Scheduler createScheduler() throws SchedulerException {', 'Scheduler scheduler = getFactory().getScheduler();', 'if (LOG.isDebugEnabled()) {']
['using schedulerfactory to get create scheduler ', ['new', 'object', 'getfactory', 'scheduler', 'objecthelper', 'getidentityhashcode', 'scheduler']]
camel sample_17219

['public synchronized CacheManager getInstance() {', 'if (cacheManager == null) {', 'cacheManager = createCacheManagerInstance();']
['turning off ehcache update checker ', []]
camel sample_10533

['public synchronized CacheManager getInstance() {', 'if (cacheManager == null) {', 'cacheManager = createCacheManagerInstance();', 'Configuration config = cacheManager.getConfiguration();', 'try {', 'System.setProperty("net.sf.ehcache.skipUpdateCheck", "true");', 'ReflectionHelper.setField(config.getClass().getDeclaredField("updateCheck"), config, false);', 'LOG.info("Turned off EHCache update checker. updateCheck={}", config.getUpdateCheck());', '} catch (Throwable e) {']
['error turning off ehcache update checker beware information sent over the internet ', ['e']]
camel sample_10533

['protected synchronized void doStop() throws Exception {', 'if (cacheManager != null) {', 'int size = cacheManager.getCacheNames().length;', 'if (size <= 0) {']
['shutting down cachemanager as its no longer in use ', []]
camel sample_10533

['protected synchronized void doStop() throws Exception {', 'if (cacheManager != null) {', 'int size = cacheManager.getCacheNames().length;', 'if (size <= 0) {', 'cacheManager.shutdown();', 'cacheManager = null;', '} else {']
['cannot stop cachemanager as its still in use by clients ', ['size']]
camel sample_10533

['public void activate() {', 'if (LOG.isDebugEnabled()) {']
['activating cxfbeandestination ', ['getcameldestinationuri']]
camel sample_8002

['public void activate() {', 'if (LOG.isDebugEnabled()) {', '}', 'endpoint = cxfBeanComponent.getEndpoint(getCamelDestinationUri());', 'if (endpoint == null) {']
['failed to find endpoint ', ['getcameldestinationuri']]
camel sample_8002

['public void process(Exchange camelExchange) throws Exception {']
['received request ', ['camelexchange']]
camel sample_8002

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ServiceNowComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.servicenow.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.servicenow.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_714

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JoltComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jolt.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jolt.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1223

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'try {', 'Messages messages = null;']
['receiving messages with request messageperpoll timeout ', ['getmaxmessagesperpoll', 'getendpoint', 'getconfiguration', 'gettimeout']]
camel sample_14570

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'try {', 'Messages messages = null;', 'messages = this.ironQueue.reserve(getMaxMessagesPerPoll(), getEndpoint().getConfiguration().getTimeout(), getEndpoint().getConfiguration().getWait());']
['received messages ', ['messages', 'getsize']]
camel sample_14570

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'try {', 'Messages messages = null;', 'messages = this.ironQueue.reserve(getMaxMessagesPerPoll(), getEndpoint().getConfiguration().getTimeout(), getEndpoint().getConfiguration().getWait());', 'Queue<Exchange> exchanges = createExchanges(messages.getMessages());', 'int noProcessed = processBatch(CastUtils.cast(exchanges));', 'if (getEndpoint().getConfiguration().isBatchDelete()) {']
['batch deleting messages ', ['messages', 'getsize']]
camel sample_14570

['protected Queue<Exchange> createExchanges(Message[] messages) {']
['received messages in this poll ', ['messages', 'length']]
camel sample_14570

['processCommit(exchange, messageid, reservationId);', '}', 'public void onFailure(Exchange exchange) {', 'processRollback(exchange);', '}', 'public String toString() {', 'return "IronMQConsumerOnCompletion";', '}', '});', '}']
['processing exchange ', ['exchange']]
camel sample_14570

['protected void processCommit(Exchange exchange, String messageid, String reservationId) {', 'try {']
['deleting message with messageid and reservationid ', ['messageid', 'reservationid']]
camel sample_14570

['protected void processCommit(Exchange exchange, String messageid, String reservationId) {', 'try {', 'this.ironQueue.deleteMessage(messageid, reservationId);']
['message deleted ', []]
camel sample_14570

['protected void processRollback(Exchange exchange) {', 'Exception cause = exchange.getException();', 'if (cause != null) {']
['exchange failed so rolling back message status ', ['exchange', 'cause']]
camel sample_14570

['protected void processRollback(Exchange exchange) {', 'Exception cause = exchange.getException();', 'if (cause != null) {', '} else {']
['exchange failed so rolling back message status ', ['exchange']]
camel sample_14570

['public Producer createProducer() throws Exception {', 'IgniteAtomicSequence atomicSeq = ignite().atomicSequence(name, initialValue, false);', 'if (atomicSeq == null) {', 'atomicSeq = ignite().atomicSequence(name, initialValue, true);']
['created atomicsequence of id generator with name ', ['name']]
camel sample_11288

['public static void startThriftServer() throws Exception {', 'processor = new Calculator.Processor(new CalculatorSyncServerImpl());', 'serverTransport = new TServerSocket(new InetSocketAddress(InetAddress.getByName("localhost"), THRIFT_TEST_PORT), THRIFT_CLIENT_TIMEOUT);', 'TThreadPoolServer.Args args = new TThreadPoolServer.Args(serverTransport);', 'args.processor((TProcessor)processor);', 'args.protocolFactory(new TBinaryProtocol.Factory());', 'args.transportFactory((TTransportFactory)new TZlibTransport.Factory());', 'server = new TThreadPoolServer(args);', 'Runnable simple = new Runnable() {', 'public void run() {']
['thrift server with zlib compression started on port ', ['thrift', 'test', 'port']]
camel sample_13020

['public static void stopThriftServer() throws IOException {', 'if (server != null) {', 'server.stop();', 'serverTransport.close();']
['thrift server with zlib compression stoped ', []]
camel sample_13020

['public void testCalculateMethodInvocation() throws Exception {']
['thrift calculate method sync test start ', []]
camel sample_13020

['public void testVoidMethodInvocation() throws Exception {']
['thrift method with empty parameters and void output sync test start ', []]
camel sample_13020

['public BoxUser getCurrentUser() {', 'try {']
['getting current user ', []]
camel sample_17433

['public void testWithEnableTLS() throws Exception {']
['grpc pingasyncsync method aync test with tls enable start ', []]
camel sample_7498

['public void testWithCorrectJWT() throws Exception {']
['grpc pingasyncsync method aync test with correct jwt start ', []]
camel sample_7498

['public void testWithIncorrectJWT() throws Exception {']
['grpc pingasyncsync method aync test with correct jwt start ', []]
camel sample_7498

['public void onError(Throwable t) {']
['Exception ', ['t']]
camel sample_7498

['public void onMessage(Message message, Session session) throws JMSException {']
['onmessage start ', []]
camel sample_7162

['public void onMessage(Message message, Session session) throws JMSException {']
['consumer received jms message ', ['endpoint', 'message']]
camel sample_7162

['public void onMessage(Message message, Session session) throws JMSException {', 'boolean sendReply;', 'RuntimeCamelException rce;', 'try {', 'Object replyDestination = getReplyToDestination(message);', 'sendReply = replyDestination != null && !disableReplyTo;', 'Destination destination = JmsMessageHelper.getJMSDestination(message);', 'if (destination != null && sendReply && !endpoint.isReplyToSameDestinationAllowed() && destination.equals(replyDestination)) {']
['jmsdestination and jmsreplyto is the same will skip sending a reply message to itself ', ['destination']]
camel sample_7162

['Destination destination = JmsMessageHelper.getJMSDestination(message);', 'if (destination != null && sendReply && !endpoint.isReplyToSameDestinationAllowed() && destination.equals(replyDestination)) {', 'sendReply = false;', '}', 'final Exchange exchange = createExchange(message, session, replyDestination);', 'if (eagerLoadingOfProperties) {', 'exchange.getIn().getHeaders();', '}', 'String correlationId = message.getJMSCorrelationID();', 'if (correlationId != null) {']
['received message has jmscorrelationid ', ['correlationid']]
camel sample_7162

['if (destination != null && sendReply && !endpoint.isReplyToSameDestinationAllowed() && destination.equals(replyDestination)) {', 'sendReply = false;', '}', 'final Exchange exchange = createExchange(message, session, replyDestination);', 'if (eagerLoadingOfProperties) {', 'exchange.getIn().getHeaders();', '}', 'String correlationId = message.getJMSCorrelationID();', 'if (correlationId != null) {', '}']
['onmessage process start ', []]
camel sample_7162

['if (eagerLoadingOfProperties) {', 'exchange.getIn().getHeaders();', '}', 'String correlationId = message.getJMSCorrelationID();', 'if (correlationId != null) {', '}', 'AsyncCallback callback = new EndpointMessageListenerAsyncCallback(message, exchange, endpoint, sendReply, replyDestination);', 'boolean forceSync = endpoint.isSynchronous() || endpoint.isTransacted();', 'if (forceSync || !isAsync()) {', 'if (LOG.isTraceEnabled()) {']
['processing exchange synchronously ', ['exchange', 'getexchangeid']]
camel sample_7162

['}', 'try {', 'processor.process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '} finally {', 'callback.done(true);', '}', '} else {', 'if (LOG.isTraceEnabled()) {']
['processing exchange asynchronously ', ['exchange', 'getexchangeid']]
camel sample_7162

['boolean sync = processor.process(exchange, callback);', 'if (!sync) {', 'return;', '}', '}', 'rce = exchange.getException(RuntimeCamelException.class);', '} catch (Exception e) {', 'rce = wrapRuntimeCamelException(e);', '}', 'if (rce != null) {']
['onmessage end throwing exception ', ['rce', 'getmessage']]
camel sample_7162

['return;', '}', '}', 'rce = exchange.getException(RuntimeCamelException.class);', '} catch (Exception e) {', 'rce = wrapRuntimeCamelException(e);', '}', 'if (rce != null) {', 'throw rce;', '}']
['onmessage end ', []]
camel sample_7162

['public void done(boolean doneSync) {']
['onmessage process end ', []]
camel sample_7162

['if (sendReply && exchange.getPattern().isOutCapable()) {', 'if (exchange.hasOut()) {', 'body = exchange.getOut();', '} else {', 'body = exchange.getIn();', '}', 'cause = null;', '}', '}', 'if (rce == null && sendReply && (body != null || cause != null)) {']
['onmessage sendreply start ', []]
camel sample_7162

['}', 'cause = null;', '}', '}', 'if (rce == null && sendReply && (body != null || cause != null)) {', 'if (replyDestination instanceof Destination) {', 'sendReply((Destination)replyDestination, message, exchange, body, cause);', '} else {', 'sendReply((String)replyDestination, message, exchange, body, cause);', '}']
['onmessage sendreply end ', []]
camel sample_7162

['protected void sendReply(Destination replyDestination, final Message message, final Exchange exchange, final org.apache.camel.Message out, final Exception cause) {', 'if (replyDestination == null) {']
['cannot send reply message as there is no replydestination for ', ['out']]
camel sample_7162

['protected void sendReply(Destination replyDestination, final Message message, final Exchange exchange, final org.apache.camel.Message out, final Exception cause) {', 'if (replyDestination == null) {', 'return;', '}', 'getTemplate().send(replyDestination, new MessageCreator() {', 'public Message createMessage(Session session) throws JMSException {', 'Message reply = endpoint.getBinding().makeJmsMessage(exchange, out, session, cause);', 'final String correlationID = determineCorrelationId(message);', 'reply.setJMSCorrelationID(correlationID);', 'if (LOG.isDebugEnabled()) {']
['sending reply jms message correlationid ', ['new', 'object', 'endpoint', 'correlationid', 'reply']]
camel sample_7162

['protected void sendReply(String replyDestination, final Message message, final Exchange exchange, final org.apache.camel.Message out, final Exception cause) {', 'if (replyDestination == null) {']
['cannot send reply message as there is no replydestination for ', ['out']]
camel sample_7162

['protected void sendReply(String replyDestination, final Message message, final Exchange exchange, final org.apache.camel.Message out, final Exception cause) {', 'if (replyDestination == null) {', 'return;', '}', 'getTemplate().send(replyDestination, new MessageCreator() {', 'public Message createMessage(Session session) throws JMSException {', 'Message reply = endpoint.getBinding().makeJmsMessage(exchange, out, session, cause);', 'final String correlationID = determineCorrelationId(message);', 'reply.setJMSCorrelationID(correlationID);', 'if (LOG.isDebugEnabled()) {']
['sending reply jms message correlationid ', ['new', 'object', 'endpoint', 'correlationid', 'reply']]
camel sample_7162

['private void stopConsumer(Route route) {', 'synchronized (lock) {', 'try {', 'if (!suspendedRoutes.contains(route)) {']
['stopping consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_12261

['private void startAllStoppedConsumers() {', 'synchronized (lock) {', 'try {', 'for (Route route : suspendedRoutes) {']
['starting consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_12261

['} else {', 'try {', 'EtcdKeysResponse response = promise.get();', 'EtcdHelper.setIndex(index, response);', 'if (response.node.value == null) {', 'setLeader(tryTakeLeadership());', '} else if (!ObjectHelper.equal(serviceName, response.node.value) && leader.get()) {', 'setLeader(false);', '}', '} catch (TimeoutException e) {']
['timeout watching for ', ['servicepath']]
camel sample_12261

['protected void doStart() throws Exception {', 'if (!localMember.hasJoined()) {']
['get group ', ['getnamespace']]
camel sample_10319

['protected void doStart() throws Exception {', 'if (!localMember.hasJoined()) {', 'group = this.atomix.getGroup( getNamespace(), new DistributedGroup.Config(configuration.getResourceConfig(getNamespace())), new DistributedGroup.Options(configuration.getResourceOptions(getNamespace())) ).get();']
['listen election events ', []]
camel sample_10319

['protected void doStart() throws Exception {', 'if (!localMember.hasJoined()) {', 'group = this.atomix.getGroup( getNamespace(), new DistributedGroup.Config(configuration.getResourceConfig(getNamespace())), new DistributedGroup.Options(configuration.getResourceOptions(getNamespace())) ).get();', 'group.election().onElection(term -> {', 'if (isRunAllowed()) {', 'fireLeadershipChangedEvent(Optional.of(toClusterMember(term.leader())));', '}', '});']
['listen join events ', []]
camel sample_10319

['group.election().onElection(term -> {', 'if (isRunAllowed()) {', 'fireLeadershipChangedEvent(Optional.of(toClusterMember(term.leader())));', '}', '});', 'group.onJoin(member -> {', 'if (isRunAllowed()) {', 'fireMemberAddedEvent(toClusterMember(member));', '}', '});']
['listen leave events ', []]
camel sample_10319

['group.onJoin(member -> {', 'if (isRunAllowed()) {', 'fireMemberAddedEvent(toClusterMember(member));', '}', '});', 'group.onLeave(member -> {', 'if (isRunAllowed()) {', 'fireMemberRemovedEvent(toClusterMember(member));', '}', '});']
['join group ', ['getnamespace']]
camel sample_10319

['public void testSynchronous() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_12324

['protected boolean useJmx() {', 'boolean enable = "testStreamResequencerTypeWithJmx".equals(getName());']
['going to jmx for the test enable disable ', ['enable', 'getname']]
camel sample_2225

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CryptoCmsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.crypto-cms.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.crypto-cms.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_997

['}', '} else {', 'StringBuilder pathsExtracted = new StringBuilder();', 'for (Map.Entry<String, Object> entry : map.entrySet()) {', 'pathsExtracted.append(entry.getKey()).append("\\n");', '}', 'exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString());', 'exchange.getIn().setBody(map);', '}', 'if (LOG.isDebugEnabled()) {']
['downloaded ', ['result', 'tostring']]
camel sample_8501

['public Exchange call() throws Exception {', 'if (client == null) {', 'throw new RuntimeCamelException("Beanstalk client not initialized");', '}', 'try {', 'final Job job = client.reserve(noWait);', 'if (job == null) {', 'return null;', '}', 'if (LOG.isDebugEnabled()) {']
['received job id d data length d ', ['string', 'format', 'job', 'getjobid', 'job', 'getdata', 'length']]
camel sample_8151

['public void onComplete(final Exchange exchange) {', 'try {', 'executor.submit(new RunCommand(successCommand, exchange)).get();', '} catch (Exception e) {']
['could not run completion of exchange s ', ['string', 'format', 'exchange', 'e']]
camel sample_8151

['public void onFailure(final Exchange exchange) {', 'try {', 'executor.submit(new RunCommand(failureCommand, exchange)).get();', '} catch (Exception e) {']
['s could not run failure of exchange s ', ['string', 'format', 'failurecommand', 'getclass', 'getname', 'exchange', 'e']]
camel sample_8151

['public void run() {', 'try {', 'try {', 'command.act(client, exchange);', '} catch (BeanstalkException e) {']
['post processing s of exchange s failed retrying ', ['string', 'format', 'command', 'getclass', 'getname', 'exchange', 'e']]
camel sample_8151

['public void run() {', 'try {', 'try {', 'command.act(client, exchange);', '} catch (BeanstalkException e) {', 'resetClient();', 'command.act(client, exchange);', '}', '} catch (final Exception e) {']
['s could not post process exchange s ', ['string', 'format', 'command', 'getclass', 'getname', 'exchange', 'e']]
camel sample_8151

['public void begin() {']
['recipientprocessorexchangepair begin ', ['index', 'exchange']]
camel sample_4522

['public void begin() {', 'exchange.setProperty(Exchange.RECIPIENT_LIST_ENDPOINT, endpoint.getEndpointUri());', 'MessageHelper.resetStreamCache(exchange.getIn());', 'if (pattern != null) {', 'originalPattern = exchange.getPattern();']
['using exchangepattern on exchange ', ['pattern', 'exchange']]
camel sample_4522

['public void done() {']
['recipientprocessorexchangepair done ', ['index', 'exchange']]
camel sample_4522

['public void done() {', 'try {', 'if (originalPattern != null) {', 'exchange.setPattern(originalPattern);', '}', 'producerCache.releaseProducer(endpoint, producer);', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['error releasing producer this exception will be ignored ', ['producer', 'e']]
camel sample_4522

['Endpoint endpoint;', 'Producer producer;', 'ExchangePattern pattern;', 'try {', 'endpoint = resolveEndpoint(exchange, recipient);', 'pattern = resolveExchangePattern(recipient);', 'producer = producerCache.acquireProducer(endpoint);', '} catch (Exception e) {', 'if (isIgnoreInvalidEndpoints()) {', 'if (LOG.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['recipient', 'e']]
camel sample_4522

['protected void throttle(Route route, Exchange exchange) {', 'Consumer consumer = route.getConsumer();', 'int size = getSize(route, exchange);', 'boolean stop = maxInflightExchanges > 0 && size > maxInflightExchanges;', 'if (log.isTraceEnabled()) {']
['evaluated as ', ['new', 'object', 'maxinflightexchanges', 'size', 'maxinflightexchanges', 'stop']]
camel sample_4172

['public void testRedeliveryErrorHandlerOnExceptionAllOptions() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {']
['mock handled ', ['illegalargumentexception', 'class', 'redeliverydelay', 'maximumredeliveries', 'loghandled', 'true', 'logretryattempted', 'true', 'logretrystacktrace', 'true', 'logexhausted', 'true', 'logstacktrace', 'true', 'handled', 'true', 'retryattemptedloglevel', 'logginglevel', 'warn', 'retriesexhaustedloglevel', 'logginglevel', 'error', 'to']]
camel sample_1665

['public void testPutAndGetNotFound() {', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");']
['created ', ['exchange', 'getexchangeid']]
camel sample_8917

['public void testPutAndGetNotFound() {', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");', 'repo.add(context, exchange.getExchangeId(), exchange);', 'Exchange out = repo.get(context, exchange.getExchangeId());', 'assertNotNull("Should find exchange", out);', 'Exchange exchange2 = new DefaultExchange(context);', 'exchange2.getIn().setBody("Bye World");']
['created ', ['getexchangeid']]
camel sample_8917

['public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {', 'int nProperties = 0;', 'for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {', 'if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {', 'properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()), entry.getValue());', 'nProperties++;', '}', '}']
['found properties in exchange ', ['nproperties']]
camel sample_9605

['public static void getEndpointProperties(FacebookEndpointConfiguration configuration, Map<String, Object> properties) {', 'if (IntrospectionSupport.getProperties(configuration, properties, null, false)) {', 'final Set<String> names = properties.keySet();', 'names.removeAll(COMPONENT_CONFIG_FIELDS);', '}', 'if (LOG.isDebugEnabled()) {', 'final Set<String> names = properties.keySet();']
['found endpoint properties ', ['names', 'retainall', 'endpoint', 'config', 'fields']]
camel sample_9605

['assertEquals("CamelHystrix", groupKey);', 'Thread.sleep(1000);', 'Long totalRequests = (Long) mbeanServer.getAttribute(on, "HystrixTotalRequests");', 'assertEquals(1, totalRequests.longValue());', 'Long errorCount = (Long) mbeanServer.getAttribute(on, "HystrixErrorCount");', 'assertEquals(0, errorCount.longValue());', 'Boolean open = (Boolean) mbeanServer.getAttribute(on, "CircuitBreakerOpen");', 'assertEquals(false, open.booleanValue());', 'Thread.sleep(1000);', 'String latest = stream.oldestMetricsAsJSon();']
['oldest json stream ', ['latest']]
camel sample_11334

['Long totalRequests = (Long) mbeanServer.getAttribute(on, "HystrixTotalRequests");', 'assertEquals(1, totalRequests.longValue());', 'Long errorCount = (Long) mbeanServer.getAttribute(on, "HystrixErrorCount");', 'assertEquals(0, errorCount.longValue());', 'Boolean open = (Boolean) mbeanServer.getAttribute(on, "CircuitBreakerOpen");', 'assertEquals(false, open.booleanValue());', 'Thread.sleep(1000);', 'String latest = stream.oldestMetricsAsJSon();', 'Stream<String> jsons = stream.streamMetrics();', 'jsons.forEach(s -> {']
['json ', ['s']]
camel sample_11334

['System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(sshDss, 0, result, index, sshDss.length);', 'index += sshDss.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {']
['cannot sign ', ['e']]
camel sample_15377

['index += 4;', 'System.arraycopy(sshDss, 0, result, index, sshDss.length);', 'index += sshDss.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {', '} catch (InvalidKeyException e) {']
['cannot sign ', ['e']]
camel sample_15377

['System.arraycopy(sshDss, 0, result, index, sshDss.length);', 'index += sshDss.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {', '} catch (InvalidKeyException e) {', '} catch (SignatureException e) {']
['cannot sign ', ['e']]
camel sample_15377

['public void testIrcMessages() throws Exception {', 'resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceived(resultEnd);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_12148

['Method method = factoryClass.getMethod("getConfiguration");', 'if (method != null) {', 'Object configuration = method.invoke(factory, null);', 'if (configuration != null) {', 'Class<?> extensionClass = camelContext.getClassResolver().resolveMandatoryClass( SAXON_EXTENDED_FUNCTION_DEFINITION_CLASS_NAME, XsltComponent.class.getClassLoader() );', 'method = configuration.getClass().getMethod("registerExtensionFunction", extensionClass);', 'if (method != null) {', 'factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);', 'for (Object extensionFunction : saxonExtensionFunctions) {', 'if (extensionClass.isInstance(extensionFunction)) {']
['saxon registerextensionfunction ', ['extensionfunction']]
camel sample_4934

['Class<?> extensionClass = camelContext.getClassResolver().resolveMandatoryClass( SAXON_EXTENDED_FUNCTION_DEFINITION_CLASS_NAME, XsltComponent.class.getClassLoader() );', 'method = configuration.getClass().getMethod("registerExtensionFunction", extensionClass);', 'if (method != null) {', 'factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);', 'for (Object extensionFunction : saxonExtensionFunctions) {', 'if (extensionClass.isInstance(extensionFunction)) {', 'method.invoke(configuration, extensionFunction);', '}', '}', '} else {']
['unable to get reference to method registerextensionfunction on ', ['configuration', 'getclass', 'getname']]
camel sample_4934

['if (method != null) {', 'factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);', 'for (Object extensionFunction : saxonExtensionFunctions) {', 'if (extensionClass.isInstance(extensionFunction)) {', 'method.invoke(configuration, extensionFunction);', '}', '}', '} else {', '}', '} else {']
['unable to get saxon configuration on ', ['saxon', 'configuration', 'class', 'name', 'factory', 'getclass', 'getname']]
camel sample_4934

['for (Object extensionFunction : saxonExtensionFunctions) {', 'if (extensionClass.isInstance(extensionFunction)) {', 'method.invoke(configuration, extensionFunction);', '}', '}', '} else {', '}', '} else {', '}', '} else {']
['unable to get reference to method getconfiguration on ', ['factoryclass', 'getname']]
camel sample_4934

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyCdiRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_186

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyCdiRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo?period=4999", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_186

['Endpoint endpoint = context.getEndpoint("direct:input");', 'ITestPojo proxy = ProxyHelper.createProxy(endpoint, ITestPojo.class);', 'Request req = new Request();', 'long start = System.currentTimeMillis();', 'for (int i = 0; i < 100; ++i) {', 'req.setPayload("REQUEST " + i);', 'Reply reply = proxy.method(req);', 'assertTrue(reply.getPayload().equals("REPLY for REQUEST " + i));', '}', 'long stop = System.currentTimeMillis();']
['took milliseconds ', ['gettestmethodname', 'stop', 'start']]
camel sample_15009

['ITestPojo proxy = ProxyHelper.createProxy(endpoint, ITestPojo.class);', 'FutureTask<Reply> task = new FutureTask<Reply>(new PojoCallable(req, proxy));', 'tasks.add(task);', 'es.submit(task);', '}', 'int i = 0;', 'for (FutureTask<Reply> futureTask : tasks) {', 'assertTrue(futureTask.get().getPayload().equals("REPLY for REQUEST " + i++));', '}', 'long stop = System.currentTimeMillis();']
['took milliseconds ', ['gettestmethodname', 'stop', 'start']]
camel sample_15009

['public void testSplitParallelBigFile() throws Exception {', 'StopWatch watch = new StopWatch();', 'NotifyBuilder builder = new NotifyBuilder(context).whenDone(lines + 1).create();', 'boolean done = builder.matches(120, TimeUnit.SECONDS);']
['took ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_2337

['}', 'String cannedAcl = exchange.getIn().getHeader(S3Constants.CANNED_ACL, String.class);', 'if (cannedAcl != null) {', 'CannedAccessControlList objectAcl = CannedAccessControlList.valueOf(cannedAcl);', 'initRequest.setCannedACL(objectAcl);', '}', 'AccessControlList acl = exchange.getIn().getHeader(S3Constants.ACL, AccessControlList.class);', 'if (acl != null) {', 'initRequest.setAccessControlList(acl);', '}']
['initiating multipart upload from exchange ', ['initrequest', 'exchange']]
camel sample_8690

['final InitiateMultipartUploadResult initResponse = getEndpoint().getS3Client().initiateMultipartUpload(initRequest);', 'final long contentLength = objectMetadata.getContentLength();', 'final List<PartETag> partETags = new ArrayList<PartETag>();', 'long partSize = getConfiguration().getPartSize();', 'CompleteMultipartUploadResult uploadResult = null;', 'long filePosition = 0;', 'try {', 'for (int part = 1; filePosition < contentLength; part++) {', 'partSize = Math.min(partSize, contentLength - filePosition);', 'UploadPartRequest uploadRequest = new UploadPartRequest().withBucketName(getConfiguration().getBucketName()).withKey(keyName) .withUploadId(initResponse.getUploadId()).withPartNumber(part).withFileOffset(filePosition).withFile(filePayload).withPartSize(partSize);']
['uploading part for ', ['part', 'keyname']]
camel sample_8690

['}', 'String cannedAcl = exchange.getIn().getHeader(S3Constants.CANNED_ACL, String.class);', 'if (cannedAcl != null) {', 'CannedAccessControlList objectAcl = CannedAccessControlList.valueOf(cannedAcl);', 'putObjectRequest.setCannedAcl(objectAcl);', '}', 'AccessControlList acl = exchange.getIn().getHeader(S3Constants.ACL, AccessControlList.class);', 'if (acl != null) {', 'putObjectRequest.setAccessControlList(acl);', '}']
['put object from exchange ', ['putobjectrequest', 'exchange']]
camel sample_8690

['String cannedAcl = exchange.getIn().getHeader(S3Constants.CANNED_ACL, String.class);', 'if (cannedAcl != null) {', 'CannedAccessControlList objectAcl = CannedAccessControlList.valueOf(cannedAcl);', 'putObjectRequest.setCannedAcl(objectAcl);', '}', 'AccessControlList acl = exchange.getIn().getHeader(S3Constants.ACL, AccessControlList.class);', 'if (acl != null) {', 'putObjectRequest.setAccessControlList(acl);', '}', 'PutObjectResult putObjectResult = getEndpoint().getS3Client().putObject(putObjectRequest);']
['received result ', ['putobjectresult']]
camel sample_8690

['protected static void setupClient() throws Exception {', 'olingoApp = new Olingo4AppImpl(getRealServiceUrl(TEST_SERVICE_BASE_URL));', 'olingoApp.setContentType(TEST_FORMAT_STRING);']
['read edm ', []]
camel sample_15459

['protected static void setupClient() throws Exception {', 'olingoApp = new Olingo4AppImpl(getRealServiceUrl(TEST_SERVICE_BASE_URL));', 'olingoApp.setContentType(TEST_FORMAT_STRING);', 'final TestOlingo4ResponseHandler<Edm> responseHandler = new TestOlingo4ResponseHandler<Edm>();', 'olingoApp.read(null, Constants.METADATA, null, null, responseHandler);', 'edm = responseHandler.await();']
['read default entitycontainer ', ['responsehandler', 'await', 'getentitycontainer', 'getname']]
camel sample_15459

['public void testServiceDocument() throws Exception {', 'final TestOlingo4ResponseHandler<ClientServiceDocument> responseHandler = new TestOlingo4ResponseHandler<ClientServiceDocument>();', 'olingoApp.read(null, "", null, null, responseHandler);', 'final ClientServiceDocument serviceDocument = responseHandler.await();', 'final Map<String, URI> entitySets = serviceDocument.getEntitySets();', 'assertEquals("Service Entity Sets", 4, entitySets.size());']
['service document entries ', ['entitysets']]
camel sample_15459

['public void testReadEntitySet() throws Exception {', 'final TestOlingo4ResponseHandler<ClientEntitySet> responseHandler = new TestOlingo4ResponseHandler<ClientEntitySet>();', 'olingoApp.read(edm, PEOPLE, null, null, responseHandler);', 'final ClientEntitySet entitySet = responseHandler.await();', 'assertNotNull(entitySet);', 'assertEquals("Entity set count", 20, entitySet.getEntities().size());']
['entities ', ['prettyprint', 'entityset']]
camel sample_15459

['public void testReadUnparsedEntitySet() throws Exception {', 'final TestOlingo4ResponseHandler<InputStream> responseHandler = new TestOlingo4ResponseHandler<InputStream>();', 'olingoApp.uread(edm, PEOPLE, null, null, responseHandler);', 'final InputStream rawEntitySet = responseHandler.await();', 'assertNotNull("Data entity set", rawEntitySet);', 'final ClientEntitySet entitySet = reader.readEntitySet(rawEntitySet, TEST_FORMAT);', 'assertEquals("Entity set count", 20, entitySet.getEntities().size());']
['entries ', ['prettyprint', 'entityset']]
camel sample_15459

['public void testReadEntity() throws Exception {', 'final TestOlingo4ResponseHandler<ClientEntity> responseHandler = new TestOlingo4ResponseHandler<ClientEntity>();', 'olingoApp.read(edm, TEST_AIRLINE, null, null, responseHandler);', 'ClientEntity entity = responseHandler.await();', 'assertEquals("Shanghai Airline", entity.getProperty("Name").getValue().toString());']
['single entity ', ['prettyprint', 'entity']]
camel sample_15459

['public void testReadEntity() throws Exception {', 'final TestOlingo4ResponseHandler<ClientEntity> responseHandler = new TestOlingo4ResponseHandler<ClientEntity>();', 'olingoApp.read(edm, TEST_AIRLINE, null, null, responseHandler);', 'ClientEntity entity = responseHandler.await();', 'assertEquals("Shanghai Airline", entity.getProperty("Name").getValue().toString());', 'responseHandler.reset();', 'olingoApp.read(edm, TEST_PEOPLE, null, null, responseHandler);', 'entity = responseHandler.await();', 'assertEquals("Russell", entity.getProperty("FirstName").getValue().toString());']
['single entry ', ['prettyprint', 'entity']]
camel sample_15459

['assertEquals("Shanghai Airline", entity.getProperty("Name").getValue().toString());', 'responseHandler.reset();', 'olingoApp.read(edm, TEST_PEOPLE, null, null, responseHandler);', 'entity = responseHandler.await();', 'assertEquals("Russell", entity.getProperty("FirstName").getValue().toString());', 'responseHandler.reset();', 'final Map<String, String> queryParams = new HashMap<String, String>();', 'queryParams.put(SystemQueryOptionKind.EXPAND.toString(), TRIPS);', 'olingoApp.read(edm, TEST_PEOPLE, queryParams, null, responseHandler);', 'ClientEntity entityExpanded = responseHandler.await();']
['single people entiry with expanded trips relation ', ['prettyprint', 'entityexpanded']]
camel sample_15459

['public void testReadUnparsedEntity() throws Exception {', 'final TestOlingo4ResponseHandler<InputStream> responseHandler = new TestOlingo4ResponseHandler<InputStream>();', 'olingoApp.uread(edm, TEST_AIRLINE, null, null, responseHandler);', 'InputStream rawEntity = responseHandler.await();', 'assertNotNull("Data entity", rawEntity);', 'ClientEntity entity = reader.readEntity(rawEntity, TEST_FORMAT);', 'assertEquals("Shanghai Airline", entity.getProperty("Name").getValue().toString());']
['single entity ', ['prettyprint', 'entity']]
camel sample_15459

['olingoApp.uread(edm, TEST_AIRLINE, null, null, responseHandler);', 'InputStream rawEntity = responseHandler.await();', 'assertNotNull("Data entity", rawEntity);', 'ClientEntity entity = reader.readEntity(rawEntity, TEST_FORMAT);', 'assertEquals("Shanghai Airline", entity.getProperty("Name").getValue().toString());', 'responseHandler.reset();', 'olingoApp.uread(edm, TEST_PEOPLE, null, null, responseHandler);', 'rawEntity = responseHandler.await();', 'entity = reader.readEntity(rawEntity, TEST_FORMAT);', 'assertEquals("Russell", entity.getProperty("FirstName").getValue().toString());']
['single entity ', ['prettyprint', 'entity']]
camel sample_15459

['olingoApp.uread(edm, TEST_PEOPLE, null, null, responseHandler);', 'rawEntity = responseHandler.await();', 'entity = reader.readEntity(rawEntity, TEST_FORMAT);', 'assertEquals("Russell", entity.getProperty("FirstName").getValue().toString());', 'responseHandler.reset();', 'final Map<String, String> queryParams = new HashMap<String, String>();', 'queryParams.put(SystemQueryOptionKind.EXPAND.toString(), TRIPS);', 'olingoApp.uread(edm, TEST_PEOPLE, queryParams, null, responseHandler);', 'rawEntity = responseHandler.await();', 'entity = reader.readEntity(rawEntity, TEST_FORMAT);']
['single people entiry with expanded trips relation ', ['prettyprint', 'entity']]
camel sample_15459

['public void testReadUpdateProperties() throws Exception {', 'final TestOlingo4ResponseHandler<ClientPrimitiveValue> propertyHandler = new TestOlingo4ResponseHandler<ClientPrimitiveValue>();', 'olingoApp.read(edm, TEST_AIRPORTS_SIMPLE_PROPERTY, null, null, propertyHandler);', 'ClientPrimitiveValue name = (ClientPrimitiveValue)propertyHandler.await();', 'assertEquals("San Francisco International Airport", name.toString());']
['airport name property value ', ['name', 'asprimitive', 'tostring']]
camel sample_15459

['public void testReadUpdateProperties() throws Exception {', 'final TestOlingo4ResponseHandler<ClientPrimitiveValue> propertyHandler = new TestOlingo4ResponseHandler<ClientPrimitiveValue>();', 'olingoApp.read(edm, TEST_AIRPORTS_SIMPLE_PROPERTY, null, null, propertyHandler);', 'ClientPrimitiveValue name = (ClientPrimitiveValue)propertyHandler.await();', 'assertEquals("San Francisco International Airport", name.toString());', 'final TestOlingo4ResponseHandler<ClientPrimitiveValue> valueHandler = new TestOlingo4ResponseHandler<ClientPrimitiveValue>();', 'olingoApp.read(edm, TEST_AIRPORTS_SIMPLE_PROPERTY_VALUE, null, null, valueHandler);', 'ClientPrimitiveValue nameValue = valueHandler.await();', 'assertEquals("San Francisco International Airport", name.toString());']
['airport name property value ', ['namevalue', 'tostring']]
camel sample_15459

['final TestOlingo4ResponseHandler<ClientPrimitiveValue> valueHandler = new TestOlingo4ResponseHandler<ClientPrimitiveValue>();', 'olingoApp.read(edm, TEST_AIRPORTS_SIMPLE_PROPERTY_VALUE, null, null, valueHandler);', 'ClientPrimitiveValue nameValue = valueHandler.await();', 'assertEquals("San Francisco International Airport", name.toString());', 'TestOlingo4ResponseHandler<HttpStatusCode> statusHandler = new TestOlingo4ResponseHandler<HttpStatusCode>();', 'ClientEntity clientEntity = objFactory.newEntity(null);', 'clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Middle")));', 'olingoApp.update(edm, TEST_PEOPLE, null, clientEntity, statusHandler);', 'HttpStatusCode statusCode = statusHandler.await();', 'assertEquals(HttpStatusCode.NO_CONTENT, statusCode);']
['name property updated with status ', ['statuscode', 'getstatuscode']]
camel sample_15459

['TestOlingo4ResponseHandler<HttpStatusCode> statusHandler = new TestOlingo4ResponseHandler<HttpStatusCode>();', 'ClientEntity clientEntity = objFactory.newEntity(null);', 'clientEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Middle")));', 'olingoApp.update(edm, TEST_PEOPLE, null, clientEntity, statusHandler);', 'HttpStatusCode statusCode = statusHandler.await();', 'assertEquals(HttpStatusCode.NO_CONTENT, statusCode);', 'final TestOlingo4ResponseHandler<ClientEntity> responseHandler = new TestOlingo4ResponseHandler<ClientEntity>();', 'olingoApp.read(edm, TEST_PEOPLE, null, null, responseHandler);', 'ClientEntity entity = responseHandler.await();', 'assertEquals("Middle", entity.getProperty("MiddleName").getValue().toString());']
['updated single entity ', ['prettyprint', 'entity']]
camel sample_15459

['public void testReadCount() throws Exception {', 'final TestOlingo4ResponseHandler<Long> countHandler = new TestOlingo4ResponseHandler<Long>();', 'olingoApp.read(edm, PEOPLE + COUNT_OPTION, null, null, countHandler);', 'Long count = countHandler.await();', 'assertEquals(20, count.intValue());']
['people count ', ['count']]
camel sample_15459

['public void testCreateUpdateDeleteEntity() throws Exception {', 'final TestOlingo4ResponseHandler<ClientEntity> entryHandler = new TestOlingo4ResponseHandler<ClientEntity>();', 'olingoApp.create(edm, PEOPLE, null, createEntity(), entryHandler);', 'ClientEntity createdEntity = entryHandler.await();']
['created entity ', ['prettyprint', 'createdentity']]
camel sample_15459

['olingoApp.update(edm, TEST_CREATE_PEOPLE, null, updateEntity, statusHandler);', 'statusHandler.await();', 'statusHandler.reset();', 'updateEntity = createEntity();', 'updateEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Middle Patched")));', 'olingoApp.patch(edm, TEST_CREATE_PEOPLE, null, updateEntity, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_PEOPLE, null, null, entryHandler);', 'ClientEntity updatedEntity = entryHandler.await();']
['updated entity successfully ', ['prettyprint', 'updatedentity']]
camel sample_15459

['updateEntity = createEntity();', 'updateEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Middle Patched")));', 'olingoApp.patch(edm, TEST_CREATE_PEOPLE, null, updateEntity, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_PEOPLE, null, null, entryHandler);', 'ClientEntity updatedEntity = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_PEOPLE, null, statusHandler);', 'HttpStatusCode statusCode = statusHandler.await();']
['deletion of entity was successful ', ['statuscode', 'getstatuscode', 'statuscode', 'getinfo']]
camel sample_15459

['updateEntity.getProperties().add(objFactory.newPrimitiveProperty("MiddleName", objFactory.newPrimitiveValueBuilder().buildString("Middle Patched")));', 'olingoApp.patch(edm, TEST_CREATE_PEOPLE, null, updateEntity, statusHandler);', 'statusHandler.await();', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_PEOPLE, null, null, entryHandler);', 'ClientEntity updatedEntity = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_PEOPLE, null, statusHandler);', 'HttpStatusCode statusCode = statusHandler.await();', 'try {']
['verify delete entity ', []]
camel sample_15459

['ClientEntity updatedEntity = entryHandler.await();', 'statusHandler.reset();', 'olingoApp.delete(TEST_CREATE_PEOPLE, null, statusHandler);', 'HttpStatusCode statusCode = statusHandler.await();', 'try {', 'entryHandler.reset();', 'olingoApp.read(edm, TEST_CREATE_PEOPLE, null, null, entryHandler);', 'entryHandler.await();', 'fail("Entity not deleted!");', '} catch (Exception e) {']
['deleted entity not found ', ['e', 'getmessage']]
camel sample_15459

['batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).contentId(TEST_UPDATE_RESOURCE_CONTENT_ID) .operation(Operation.UPDATE).body(clientEntity).build());', 'batchParts.add(Olingo4BatchChangeRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).operation(Operation.DELETE).build());', 'batchParts.add(Olingo4BatchQueryRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).build());', 'final TestOlingo4ResponseHandler<List<Olingo4BatchResponse>> responseHandler = new TestOlingo4ResponseHandler<List<Olingo4BatchResponse>>();', 'olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo4BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ClientEntitySet clientEntitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(clientEntitySet);']
['batch entity set ', ['prettyprint', 'cliententityset']]
camel sample_15459

['batchParts.add(Olingo4BatchQueryRequest.resourcePath(TEST_CREATE_PEOPLE).resourceUri(TEST_SERVICE_BASE_URL).build());', 'final TestOlingo4ResponseHandler<List<Olingo4BatchResponse>> responseHandler = new TestOlingo4ResponseHandler<List<Olingo4BatchResponse>>();', 'olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo4BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ClientEntitySet clientEntitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(clientEntitySet);', 'ClientEntity returnClientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(returnClientEntity);']
['batch read entity ', ['prettyprint', 'returncliententity']]
camel sample_15459

['olingoApp.batch(edm, null, batchParts, responseHandler);', 'final List<Olingo4BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES);', 'assertEquals("Batch responses expected", 8, responseParts.size());', 'assertNotNull(responseParts.get(0).getBody());', 'final ClientEntitySet clientEntitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(clientEntitySet);', 'ClientEntity returnClientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(returnClientEntity);', 'returnClientEntity = (ClientEntity)responseParts.get(3).getBody();', 'assertNotNull(returnClientEntity);']
['batch read entity with expand ', ['prettyprint', 'returncliententity']]
camel sample_15459

['assertNotNull(responseParts.get(0).getBody());', 'final ClientEntitySet clientEntitySet = (ClientEntitySet)responseParts.get(1).getBody();', 'assertNotNull(clientEntitySet);', 'ClientEntity returnClientEntity = (ClientEntity)responseParts.get(2).getBody();', 'assertNotNull(returnClientEntity);', 'returnClientEntity = (ClientEntity)responseParts.get(3).getBody();', 'assertNotNull(returnClientEntity);', 'ClientEntity createdClientEntity = (ClientEntity)responseParts.get(4).getBody();', 'assertNotNull(createdClientEntity);', 'assertEquals(TEST_CREATE_RESOURCE_CONTENT_ID, responseParts.get(4).getContentId());']
['batch created entity ', ['prettyprint', 'returncliententity']]
camel sample_15459

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ClientEntitySet) {']
['received response ', ['prettyprint', 'cliententityset', 'response']]
camel sample_15459

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ClientEntitySet) {', '} else if (response instanceof ClientEntity) {']
['received response ', ['prettyprint', 'cliententity', 'response']]
camel sample_15459

['public void onResponse(T response, Map<String, String> responseHeaders) {', 'this.response = response;', 'if (LOG.isDebugEnabled()) {', 'if (response instanceof ClientEntitySet) {', '} else if (response instanceof ClientEntity) {', '} else {']
['received response ', ['response']]
camel sample_15459

['if (isSendToAllSet(in)) {', 'sendToAll(store, message, exchange);', '} else {', 'String connectionKey = in.getHeader(WebsocketConstants.CONNECTION_KEY, String.class);', 'if (connectionKey != null) {', 'String pathSpec = "";', 'if (endpoint.getResourceUri() != null) {', 'pathSpec = WebsocketComponent.createPathSpec(endpoint.getResourceUri());', '}', 'DefaultWebsocket websocket = store.get(connectionKey + pathSpec);']
['sending to connection key ', ['connectionkey', 'message']]
camel sample_17464

['protected void handleSleepInterruptedException(InterruptedException e, Exchange exchange) throws InterruptedException {', 'if (log.isDebugEnabled()) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_17464

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XsltComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xslt.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xslt.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_885

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'PullRequest pullRequest = (PullRequest) in.getBody();', 'User pullRequestUser = pullRequest.getUser();', 'pullRequest.getTitle();', 'pullRequest.getHtmlUrl();', 'pullRequest.getUser().getLogin();', 'pullRequest.getUser().getHtmlUrl();']
['got pullrequest from ', ['pullrequest', 'gethtmlurl', 'pullrequest', 'gettitle', 'pullrequestuser', 'getlogin']]
camel sample_14248

['public ChannelPipeline getPipeline() throws Exception {', 'ChannelPipeline channelPipeline = Channels.pipeline();', 'SslHandler sslHandler = configureClientSSLOnDemand();', 'if (sslHandler != null) {', 'sslHandler.setCloseOnSSLException(true);']
['client ssl handler configured and added to the channelpipeline ', ['sslhandler']]
camel sample_6661

['List<ChannelHandler> encoders = producer.getConfiguration().getEncoders();', 'for (int x = 0; x < encoders.size(); x++) {', 'ChannelHandler encoder = encoders.get(x);', 'if (encoder instanceof ChannelHandlerFactory) {', 'encoder = ((ChannelHandlerFactory) encoder).newChannelHandler();', '}', 'addToPipeline("encoder-" + x, channelPipeline, encoder);', '}', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {']
['using request timeout millis ', ['producer', 'getconfiguration', 'getrequesttimeout']]
camel sample_6661

['}', 'addToPipeline("encoder-" + x, channelPipeline, encoder);', '}', 'if (producer.getConfiguration().getRequestTimeout() > 0) {', 'if (LOG.isTraceEnabled()) {', '}', 'ChannelHandler timeout = new ReadTimeoutHandler(producer.getEndpoint().getTimer(), producer.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);', 'addToPipeline("timeout", channelPipeline, timeout);', '}', 'addToPipeline("handler", channelPipeline, new ClientChannelHandler(producer));']
['created channelpipeline ', ['channelpipeline']]
camel sample_6661

['private SSLContext createSSLContext(NettyProducer producer) throws Exception {', 'NettyConfiguration configuration = producer.getConfiguration();', 'if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {']
['keystorefile is null ', []]
camel sample_6661

['if (!configuration.isSsl()) {', 'return null;', '}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {']
['truststorefile is null ', []]
camel sample_6661

['}', 'SSLContext answer;', 'if (configuration.getSslContextParameters() != null) {', 'answer = configuration.getSslContextParameters().createSSLContext(producer.getContext());', '} else {', 'if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {', '}', 'if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {', '}', 'if (configuration.getPassphrase().toCharArray() == null) {']
['passphrase is null ', []]
camel sample_6661

['protected void checkName(Object value, String name) {', 'if (ObjectHelper.isEmpty(value)) {']
['the of is empty cxf will try to load the first one in wsdl for you ', ['name', 'this', 'getendpointuri']]
camel sample_7973

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_17171

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_17171

['public void testQuartzPersistentStoreRestart() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreTest.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(2);', 'mock.assertIsSatisfied();', 'app.stop();']
['restarting ', []]
camel sample_17171

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesServiceAccountsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-service-accounts.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-service-accounts.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_539

['protected int poll() throws Exception {', 'try {', 'if (endpoint.getConfiguration().isStreaming()) {', 'dataReader.read(new SplunkResultProcessor() {', 'public void process(SplunkEvent splunkEvent) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(splunkEvent);', 'try {']
['processing exchange ', ['exchange']]
camel sample_14474

['try {', 'if (endpoint.getConfiguration().isStreaming()) {', 'dataReader.read(new SplunkResultProcessor() {', 'public void process(SplunkEvent splunkEvent) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(splunkEvent);', 'try {', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['done processing exchange ', ['exchange']]
camel sample_14474

['protected Queue<Exchange> createExchanges(List<SplunkEvent> splunkEvents) {']
['received messages in this poll ', ['splunkevents', 'size']]
camel sample_14474

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'for (int index = 0; index < total && isBatchAllowed(); index++) {', 'Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'try {']
['processing exchange ', ['exchange']]
camel sample_14474

['result = new DOMResult();', '} else if (source instanceof SAXSource) {', 'result = new SAXResult();', '} else if (source instanceof StAXSource || source instanceof StreamSource) {', 'result = null;', '}', 'if (source != null) {', 'ValidatorErrorHandler handler = errorHandler.getClass().newInstance();', 'validator.setErrorHandler(handler);', 'try {']
['validating ', ['source']]
camel sample_4575

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<StompComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stomp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stomp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_755

['protected void checkWeatherContent(String weather) {']
['the weather in format is ', ['weathermode', 'xml', 'ls', 'weather']]
camel sample_11363

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<UniVocityFixedWidthDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-fixed.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-fixed.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1262

['String foundEscaped = found.replace("$", "\\\\$").replace("{", "\\\\{").replace("}", "\\\\}");', 'Matcher paramMatcher = Pattern.compile("\\\\:\\\\?in\\\\:" + foundEscaped, Pattern.MULTILINE).matcher(query);', 'query = paramMatcher.replaceAll(replace);', '}', '}', '}', 'answer = REPLACE_PATTERN.matcher(query).replaceAll("\\\\?");', '} else {', 'answer = query;', '}']
['prepared query ', ['answer']]
camel sample_9015

['}', 'final Object[] args = new Object[expectedParams];', 'int i = 0;', 'int argNumber = 1;', 'while (iterator != null && iterator.hasNext()) {', 'Object value = iterator.next();', 'if (value instanceof CompositeIterator) {', 'Iterator it = (Iterator) value;', 'while (it.hasNext()) {', 'Object val = it.next();']
['setting parameter with value ', ['argnumber', 'val']]
camel sample_9015

['Iterator it = (Iterator) value;', 'while (it.hasNext()) {', 'Object val = it.next();', 'if (argNumber <= expectedParams) {', 'args[i] = val;', '}', 'argNumber++;', 'i++;', '}', '} else {']
['setting parameter with value ', ['argnumber', 'value']]
camel sample_9015

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JingComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jing.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jing.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1075

['public void testWSHttpCall() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'final List<Object> received = Collections.synchronizedList(new ArrayList<Object>());', 'WebSocket websocket = c.prepareGet("ws: .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13149

['public BatchGoogleDriveClientFactory(String proxyHost, int proxyPort) {', 'try {', 'Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(InetAddress.getByName(proxyHost), proxyPort));', 'this.transport = new NetHttpTransport.Builder().setProxy(proxy).build();', 'this.jsonFactory = new JacksonFactory();', '} catch (UnknownHostException e) {']
['unknow proxy host ', ['e']]
camel sample_15422

['public void testUsingContextComponent() throws Exception {', 'Object accounts = applicationContext.getBean("accounts");']
['found accounts ', ['accounts']]
camel sample_12164

['public void testUsingContextComponent() throws Exception {', 'Object accounts = applicationContext.getBean("accounts");', 'resultEndpoint.expectedHeaderReceived("received", "true");', 'resultEndpoint.expectedMessageCount(2);', 'template.sendBody("<purchaseOrder>one</purchaseOrder>");', 'template.sendBody("<purchaseOrder>two</purchaseOrder>");', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> receivedExchanges = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : receivedExchanges) {', 'Message in = exchange.getIn();']
['received from headers body ', ['exchange', 'getfromendpoint', 'in', 'getheaders', 'in', 'getbody']]
camel sample_12164

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes deployments consumer ', []]
camel sample_13325

['public static void startServer() throws Exception {', 'Object implementor = new GreeterImpl();', 'String address = "http: endpoint = Endpoint.publish(address, implementor);']
['the ws endpoint is published ', []]
camel sample_6026

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<XmlRpcDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmlrpc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmlrpc.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1219

['private void getVolumes(Exchange exchange) throws Exception {', 'String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Volumes volumes = getEndpoint().getDigitalOceanClient().getAvailableVolumes(region);']
['all volumes for region ', ['region', 'volumes', 'getvolumes']]
camel sample_8891

['volume.setRegion(new Region(in.getHeader(DigitalOceanHeaders.REGION, String.class)));', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DESCRIPTION))) {', 'volume.setDescription(in.getHeader(DigitalOceanHeaders.DESCRIPTION, String.class));', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DESCRIPTION + " must be specified");', '}', 'volume = getEndpoint().getDigitalOceanClient().createVolume(volume);']
['volume created ', ['volume']]
camel sample_8891

['if (ObjectHelper.isEmpty(name) && ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.NAME + " and " + DigitalOceanHeaders.REGION + " must be specified");', '}', 'List<Volume> volumes = getEndpoint().getDigitalOceanClient().getVolumeInfo(name, region).getVolumes();', 'if (volumes.size() > 0) {', 'volume = volumes.get(1);', '}', '} else {', 'volume = getEndpoint().getDigitalOceanClient().getVolumeInfo(volumeId);', '}']
['volume ', ['volume']]
camel sample_8891

['private void getVolumeSnapshots(Exchange exchange) throws Exception {', 'String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class);', 'if (ObjectHelper.isEmpty(volumeId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Snapshots snapshots = getEndpoint().getDigitalOceanClient().getVolumeSnapshots(volumeId, configuration.getPage(), configuration.getPerPage());']
['all snapshots for volume ', ['volumeid', 'snapshots', 'getsnapshots']]
camel sample_8891

['if (ObjectHelper.isEmpty(volumeId)) {', 'String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class);', 'String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(name) && ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.NAME + " and " + DigitalOceanHeaders.REGION + " must be specified");', '}', 'delete = getEndpoint().getDigitalOceanClient().deleteVolume(name, region);', '} else {', 'delete = getEndpoint().getDigitalOceanClient().deleteVolume(volumeId);', '}']
['delete volume ', ['delete']]
camel sample_8891

['String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(dropletId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified");', '}', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Action action;', 'if (ObjectHelper.isNotEmpty(volumeName)) {', 'action = getEndpoint().getDigitalOceanClient().attachVolumeByName(dropletId, volumeName, region);']
['attach volume to droplet ', ['volumename', 'dropletid', 'action']]
camel sample_8891

['throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified");', '}', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Action action;', 'if (ObjectHelper.isNotEmpty(volumeName)) {', 'action = getEndpoint().getDigitalOceanClient().attachVolumeByName(dropletId, volumeName, region);', '} else if (ObjectHelper.isNotEmpty(volumeId)) {', 'action = getEndpoint().getDigitalOceanClient().attachVolume(dropletId, volumeId, region);']
['attach volume to droplet ', ['volumeid', 'dropletid', 'action']]
camel sample_8891

['String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(dropletId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified");', '}', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Action action;', 'if (ObjectHelper.isNotEmpty(volumeName)) {', 'action = getEndpoint().getDigitalOceanClient().detachVolumeByName(dropletId, volumeName, region);']
['detach volume to droplet ', ['volumename', 'dropletid', 'action']]
camel sample_8891

['throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified");', '}', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Action action;', 'if (ObjectHelper.isNotEmpty(volumeName)) {', 'action = getEndpoint().getDigitalOceanClient().detachVolumeByName(dropletId, volumeName, region);', '} else if (ObjectHelper.isNotEmpty(volumeId)) {', 'action = getEndpoint().getDigitalOceanClient().detachVolume(dropletId, volumeId, region);']
['detach volume to droplet ', ['volumeid', 'dropletid', 'action']]
camel sample_8891

['}', 'String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'if (ObjectHelper.isEmpty(region)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified");', '}', 'Double size = exchange.getIn().getHeader(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES, Double.class);', 'if (ObjectHelper.isEmpty(size)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().resizeVolume(volumeId, region, size);']
['resize volume ', ['volumeid', 'action']]
camel sample_8891

['private void getVolumeActions(Exchange exchange) throws Exception {', 'String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class);', 'if (ObjectHelper.isEmpty(volumeId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified");', '}', 'Actions actions = getEndpoint().getDigitalOceanClient().getAvailableVolumeActions(volumeId);']
['actions for volume ', ['volumeid', 'actions', 'getactions']]
camel sample_8891

['private static String formatDate(Date date) {', 'if (date == null) {', 'return null;', '}', 'try {', 'return new SimpleDateFormat(DATE_TIME_FORMAT).format(date);', '} catch (Exception e) {']
['unable to format date using format ', ['date', 'date', 'time', 'format', 'e']]
camel sample_13260

['private static Date getLocalTimestamp(ConfigMap configMap, String group) {', 'String timestamp = getConfigMapValue(configMap, LOCAL_TIMESTAMP_PREFIX + group);', 'if (timestamp == null) {', 'return null;', '}', 'try {', 'return new SimpleDateFormat(DATE_TIME_FORMAT).parse(timestamp);', '} catch (Exception e) {']
['unable to parse time string using format ', ['timestamp', 'date', 'time', 'format', 'e']]
camel sample_13260

['public void testClientInvocation() throws Exception {', 'String out = template.requestBodyAndHeader("jms:queue:loan", null, Constants.PROPERTY_SSN, "Client-A", String.class);']
['result ', ['out']]
camel sample_17673

['final Result<Transaction> createResult = requestBody( "direct: new TransactionRequest() .amount(new BigDecimal("100.00")) .paymentMethodNonce("fake-valid-nonce") .options() .submitForSettlement(true) .done(), Result.class );', 'assertNotNull("sale result", createResult);', 'assertTrue(createResult.isSuccess());', 'String createId = createResult.getTarget().getId();', 'final Result<Transaction> settleResult = this.gateway.testing().settle(createId);', 'assertNotNull("settle result", settleResult);', 'assertTrue(settleResult.isSuccess());', 'final Result<Transaction> result = requestBody( "direct: createId, Result.class );', 'assertNotNull("Request Refund result", result);', 'assertTrue(result.isSuccess());']
['refund id s created for transaction id s ', ['string', 'format', 'result', 'gettarget', 'getid', 'createid']]
camel sample_17389

['final Result<Transaction> createResult = requestBody( "direct: new TransactionRequest() .amount(new BigDecimal("100.00")) .paymentMethodNonce("fake-valid-nonce") .options() .submitForSettlement(true) .done(), Result.class );', 'assertNotNull("sale result", createResult);', 'assertTrue(createResult.isSuccess());', 'String createId = createResult.getTarget().getId();', 'final Result<Transaction> settleResult = this.gateway.testing().settle(createId);', 'assertNotNull("settle result", settleResult);', 'assertTrue(settleResult.isSuccess());', 'final Result<Transaction> result = requestBodyAndHeaders( "direct: null, new BraintreeHeaderBuilder() .add("id", createId) .add("amount", new BigDecimal("99.00")) .build(), Result.class );', 'assertNotNull("Request Refund result", result);', 'assertTrue(result.isSuccess());']
['refund id s created for transaction id s ', ['string', 'format', 'result', 'gettarget', 'getid', 'createid']]
camel sample_17389

['final Result<Transaction> createResult = requestBody( "direct: new TransactionRequest() .amount(new BigDecimal("100.00")) .paymentMethodNonce("fake-valid-nonce") .options() .submitForSettlement(true) .done(), Result.class );', 'assertNotNull("sale result", createResult);', 'assertTrue(createResult.isSuccess());', 'String createId = createResult.getTarget().getId();', 'final Result<Transaction> settleResult = this.gateway.testing().settle(createId);', 'assertNotNull("settle result", settleResult);', 'assertTrue(settleResult.isSuccess());', 'final Result<Transaction> result = requestBodyAndHeaders( "direct: null, new BraintreeHeaderBuilder() .add("id", createId) .add("refundRequest", new TransactionRefundRequest() .amount(new BigDecimal("100.00"))) .build(), Result.class );', 'assertNotNull("Request Refund result", result);', 'assertTrue(result.isSuccess());']
['refund id s created for transaction id s ', ['string', 'format', 'result', 'gettarget', 'getid', 'createid']]
camel sample_17389

['public void testCancelRelease() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("cancelRelease result", result);']
['cancelrelease ', ['result']]
camel sample_17389

['public void testCredit() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("credit result", result);']
['credit ', ['result']]
camel sample_17389

['public void testHoldInEscrow() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("holdInEscrow result", result);']
['holdinescrow ', ['result']]
camel sample_17389

['public void testReleaseFromEscrow() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("releaseFromEscrow result", result);']
['releasefromescrow ', ['result']]
camel sample_17389

['public void testSearch() throws Exception {', 'final com.braintreegateway.ResourceCollection result = requestBody("direct: assertNotNull("search result", result);']
['search ', ['result']]
camel sample_17389

['public void testSubmitForPartialSettlement() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBraintree.id", null);', 'headers.put("CamelBraintree.amount", null);', 'final com.braintreegateway.Result result = requestBodyAndHeaders("direct: assertNotNull("submitForPartialSettlement result", result);']
['submitforpartialsettlement ', ['result']]
camel sample_17389

['public void testVoidTransaction() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("voidTransaction result", result);']
['voidtransaction ', ['result']]
camel sample_17389

['public void process(final Exchange exchange) throws Exception {', 'if (exchange.getPattern().isOutCapable()) {', 'if (inputChannel == null) {', 'throw new IllegalArgumentException("InputChannel has not been configured on " + getEndpoint());', '}', 'exchange.getIn().getHeaders().put(MessageHeaders.REPLY_CHANNEL, inputChannel);', 'inputChannel.subscribe(new MessageHandler() {', 'public void handleMessage(Message<?> message) {']
['received from inputchannel ', ['message', 'inputchannel']]
camel sample_11123

['throw new IllegalArgumentException("InputChannel has not been configured on " + getEndpoint());', '}', 'exchange.getIn().getHeaders().put(MessageHeaders.REPLY_CHANNEL, inputChannel);', 'inputChannel.subscribe(new MessageHandler() {', 'public void handleMessage(Message<?> message) {', 'SpringIntegrationBinding.storeToCamelMessage(message, exchange.getOut());', '}', '});', '}', 'org.springframework.messaging.Message<?> siOutmessage = SpringIntegrationBinding.createSpringIntegrationMessage(exchange);']
['sending to outputchannel ', ['sioutmessage', 'outputchannel']]
camel sample_11123

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ZipFileDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.zipfile.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.zipfile.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1188

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteIdGenComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-idgen.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-idgen.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1167

['public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition, final Processor target, final Processor nextTarget) throws Exception {', 'return new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'count++;']
['i am the container wide interceptor intercepted total count ', ['count']]
camel sample_16259

['protected void doStart() throws Exception {', 'super.doStart();']
['registering event handler to eventbus ', ['eventhandler', 'eventbus']]
camel sample_9107

['protected void doStop() throws Exception {']
['unregistering event handler from eventbus ', ['eventhandler', 'eventbus']]
camel sample_9107

['public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {', 'if (method.getAnnotation(Subscribe.class) != null) {', 'delegateHandler.doEventReceived(args[0]);', '} else {']
['non subscribe method called on listenerinterface proxy ', ['method']]
camel sample_9107

['exchange.getOut().setHeader(InfinispanConstants.EVENT_TYPE, eventType);', 'exchange.getOut().setHeader(InfinispanConstants.IS_PRE, isPre);', 'exchange.getOut().setHeader(InfinispanConstants.CACHE_NAME, cacheName);', 'exchange.getOut().setHeader(InfinispanConstants.KEY, key);', 'if (eventData != null) {', 'exchange.getOut().setHeader(InfinispanConstants.EVENT_DATA, eventData);', '}', 'try {', 'getProcessor().process(exchange);', '} catch (Exception e) {']
['error processing event ', ['e']]
camel sample_13958

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Object message = in.getBody();', 'if (message != null) {']
['sending out ', ['message']]
camel sample_13722

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {']
['simulating a task which takes millis to reply ', ['getendpoint', 'getdelay']]
camel sample_6071

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {']
['simulating a failure at attempt ', ['count']]
camel sample_6071

['executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());']
['setting reply ', ['reply']]
camel sample_6071

['public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}']
['callback done false ', []]
camel sample_6071

['exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}', 'callback.done(false);', 'return null;', '}', '});']
['task submitted now tell camel routing engine to that this exchange is being continued asynchronously ', []]
camel sample_6071

['protected boolean classPathHasSpaces() {', 'ClassLoader cl = getClass().getClassLoader();', 'if (cl instanceof URLClassLoader) {', 'URLClassLoader ucl = (URLClassLoader)cl;', 'URL[] urls = ucl.getURLs();', 'for (URL url : urls) {', 'if (url.getPath().contains(" ")) {', 'log.error("=======================================================================");']
['test skipped ', ['this', 'getclass', 'getname']]
camel sample_9384

['protected boolean classPathHasSpaces() {', 'ClassLoader cl = getClass().getClassLoader();', 'if (cl instanceof URLClassLoader) {', 'URLClassLoader ucl = (URLClassLoader)cl;', 'URL[] urls = ucl.getURLs();', 'for (URL url : urls) {', 'if (url.getPath().contains(" ")) {', 'log.error("=======================================================================");']
['your probably on windows we detected that the classpath ', []]
camel sample_9384

['protected boolean classPathHasSpaces() {', 'ClassLoader cl = getClass().getClassLoader();', 'if (cl instanceof URLClassLoader) {', 'URLClassLoader ucl = (URLClassLoader)cl;', 'URL[] urls = ucl.getURLs();', 'for (URL url : urls) {', 'if (url.getPath().contains(" ")) {', 'log.error("=======================================================================");']
['has a space in it try running maven with the following option ', []]
camel sample_9384

['public ByteSource encrypt() throws Exception {', 'if (passPhrase == bits128) {']
['using the default encryption key is not secure ', []]
camel sample_12133

['resultEndpoint.expectedMessageCount(1);', 'Map<String, Object> body = new LinkedHashMap<String, Object>();', 'body.put("foo", "abc");', 'body.put("bar", 123);', 'template.sendBody("direct:start", body);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'Message in = exchange.getIn();', 'String text = in.getBody(String.class);']
['received ', ['text']]
camel sample_12076

['Map<String, Object> body2 = new LinkedHashMap<String, Object>();', 'body2.put("foo", "def");', 'body2.put("bar", 456);', 'body2.put("baz", 789);', 'template.sendBody("direct:startMulti", body1);', 'template.sendBody("direct:startMulti", body2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'Message in1 = list.get(0).getIn();', 'String text1 = in1.getBody(String.class);']
['received ', []]
camel sample_12076

['body2.put("baz", 789);', 'template.sendBody("direct:startMulti", body1);', 'template.sendBody("direct:startMulti", body2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'Message in1 = list.get(0).getIn();', 'String text1 = in1.getBody(String.class);', 'assertTrue("First CSV body has wrong value", Pattern.matches("(abc,123)|(123,abc)", text1.trim()));', 'Message in2 = list.get(1).getIn();', 'String text2 = in2.getBody(String.class);']
['received ', []]
camel sample_12076

['Map<String, Object> body2 = new LinkedHashMap<String, Object>();', 'body2.put("foo", "def");', 'body2.put("bar", 456);', 'body2.put("baz", 789);', 'body2.put("buz", "000");', 'template.sendBody("direct:startMultiCustom", body1);', 'template.sendBody("direct:startMultiCustom", body2);', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'Message in1 = list.get(0).getIn();', 'String text1 = in1.getBody(String.class);']
['received ', []]
camel sample_12076

['body2.put("baz", 789);', 'body2.put("buz", "000");', 'template.sendBody("direct:startMultiCustom", body1);', 'template.sendBody("direct:startMultiCustom", body2);', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'Message in1 = list.get(0).getIn();', 'String text1 = in1.getBody(String.class);', 'assertEquals("First CSV body has wrong value", "abc;;123", text1.trim());', 'Message in2 = list.get(1).getIn();', 'String text2 = in2.getBody(String.class);']
['received ', []]
camel sample_12076

['public void testUnMarshal() throws Exception {', 'MockEndpoint endpoint = getMockEndpoint("mock:daltons");', 'endpoint.expectedMessageCount(1);', 'endpoint.assertIsSatisfied();', 'Exchange exchange = endpoint.getExchanges().get(0);', 'List<List<String>> data = (List<List<String>>) exchange.getIn().getBody();', 'for (List<String> line : data) {']
['s has an iq of s and is currently s ', ['string', 'format', 'line', 'get', 'line', 'get', 'line', 'get']]
camel sample_12076

['from("direct:start"). setHeader("QUERY", constant("Rodney Dangerfield")). process(new LuceneQueryProcessor("target/stdindexDir", analyzer, null, 20)). to("direct:next");', '} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit index location ', ['i', 'hits', 'gethit', 'get', 'i', 'gethitlocation']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit score ', ['i', 'hits', 'gethit', 'get', 'i', 'getscore']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit data ', ['i', 'hits', 'gethit', 'get', 'i', 'getdata']]
camel sample_6837

['printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();']
['beginning phrase standard analyzer search test ', []]
camel sample_6837

['private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();', 'sendRequest();', 'mockSearchEndpoint.assertIsSatisfied();']
['completed phrase standard analyzer search test ', []]
camel sample_6837

['from("direct:start"). setHeader("QUERY", constant("Carl*")). process(new LuceneQueryProcessor("target/simpleindexDir", analyzer, null, 20)). to("direct:next");', '} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {']
['number of hits ', ['hits', 'getnumberofhits']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit index location ', ['i', 'hits', 'gethit', 'get', 'i', 'gethitlocation']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit score ', ['i', 'hits', 'gethit', 'get', 'i', 'getscore']]
camel sample_6837

['} catch (Exception e) {', 'e.printStackTrace();', '}', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Hits hits = exchange.getIn().getBody(Hits.class);', 'printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {']
['hit data ', ['i', 'hits', 'gethit', 'get', 'i', 'getdata']]
camel sample_6837

['printResults(hits);', '}', 'private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();']
['beginning wildcard simple analyzer phrase searcher test ', []]
camel sample_6837

['private void printResults(Hits hits) {', 'for (int i = 0; i < hits.getNumberOfHits(); i++) {', '}', '}', '}).to("mock:searchResult");', '}', '});', 'context.start();', 'sendRequest();', 'mockSearchEndpoint.assertIsSatisfied();']
['completed wildcard simple analyzer phrase searcher test ', []]
camel sample_6837

['public void onNext(Event event) {']
['received docker event ', ['event']]
camel sample_6564

['public void onNext(Event event) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(event);', 'try {']
['processing exchange ', ['exchange']]
camel sample_6564

['public void onNext(Event event) {', 'final Exchange exchange = getEndpoint().createExchange();', 'Message message = exchange.getIn();', 'message.setBody(event);', 'try {', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {']
['done processing exchange ', ['exchange']]
camel sample_6564

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {']
['simulating a task which takes millis to reply ', ['getendpoint', 'getdelay']]
camel sample_10948

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {']
['simulating a failure at attempt ', ['count']]
camel sample_10948

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);']
['setting reply ', ['reply']]
camel sample_10948

['executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', '}']
['callback done false ', []]
camel sample_10948

['if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'exchange.getOut().setBody(reply);', '}', 'callback.done(false);', 'return null;', '}', '});']
['task submitted now tell camel routing engine to that this exchange is being continued asynchronously ', []]
camel sample_10948

['public void process(Exchange exchange) throws Exception {', 'String operation = getOperation(exchange);', 'Object key = getKey(exchange);']
['processing operation on ', ['operation', 'exchange']]
camel sample_14008

['exchange.getOut().setAttachments(exchange.getIn().getAttachments());', 'exchange.getOut().setHeader(KratiConstants.KRATI_OPERATION_STATUS, KratiConstants.KRATI_OPERATION_FAILURE);', '}', '} else if (KratiConstants.KRATI_OPERATION_DELETEALL.equals(operation)) {', 'try {', 'dataStore.clear();', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', 'exchange.getOut().setAttachments(exchange.getIn().getAttachments());', 'exchange.getOut().setHeader(KratiConstants.KRATI_OPERATION_STATUS, KratiConstants.KRATI_OPERATION_SUCESSFUL);', '} catch (Exception e) {']
['error clearing all entries from store ', ['e']]
camel sample_14008

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FileComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.file.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.file.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_850

['private void doCreateQueue(CloudQueue client, QueueServiceRequestOptions opts, Exchange exchange) throws Exception {']
['creating the queue from exchange ', ['getconfiguration', 'getqueuename', 'exchange']]
camel sample_9957

['private void deleteQueue(Exchange exchange) throws Exception {']
['deleting the queue from exchange ', ['getconfiguration', 'getqueuename', 'exchange']]
camel sample_9957

['private void addMessage(Exchange exchange) throws Exception {']
['putting the message into the queue from exchange ', ['getconfiguration', 'getqueuename', 'exchange']]
camel sample_9957

['private void updateMessage(Exchange exchange) throws Exception {', 'CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration());', 'QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange);', 'CloudQueueMessage message = getCloudQueueMessage(exchange);']
['updating the message in the queue from exchange ', ['getconfiguration', 'getqueuename', 'exchange']]
camel sample_9957

['private void deleteMessage(Exchange exchange) throws Exception {']
['deleting the message from the queue from exchange ', ['getconfiguration', 'getqueuename', 'exchange']]
camel sample_9957

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JsonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-xstream.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-xstream.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_503

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ElasticsearchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch5-rest.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch5-rest.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_446

['resultEndpoint.expectedMessageCount(2);', 'String badHtml = TidyMarkupTestSupport.loadFileAsString(new File( "src/test/resources/org/apache/camel/dataformat/tagsoup/testfile1.html"));', 'String evilHtml = TidyMarkupTestSupport.loadFileAsString(new File( "src/test/resources/org/apache/camel/dataformat/tagsoup/testfile2-evilHtml.html"));', 'template.sendBody("direct:start", badHtml);', 'template.sendBody("direct:start", evilHtml);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'Message in = exchange.getIn();', 'String response = in.getBody(String.class);']
['received ', ['response']]
camel sample_11973

['public void testRouteboxUsingDispatchMap() throws Exception {', 'template = new DefaultProducerTemplate(context);', 'template.start();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();']
['beginning test testrouteboxusingdispatchmap ', []]
camel sample_14622

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");']
['received book with author and title ', ['book', 'getauthor', 'book', 'gettitle']]
camel sample_14622

['public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");', 'assertEquals("The Adventures of Sherlock Holmes", book.getTitle());']
['completed test testrouteboxusingdispatchmap ', []]
camel sample_14622

['public boolean isManaged(Object managedObject, Object name) {', 'try {', 'ObjectName objectName = getObjectName(managedObject, name);', 'if (objectName != null) {', 'return getManagementAgent().isRegistered(objectName);', '}', '} catch (Exception e) {']
['cannot check whether the managed object is registered this exception will be ignored ', ['e']]
camel sample_4689

['protected void doStart() throws Exception {']
['jmx is enabled ', []]
camel sample_4689

['protected void checkWeatherContent(String weather) {']
['the weather in format is ', ['weathermode', 'xml', 'ls', 'weather']]
camel sample_11359

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<PythonLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.python.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.python.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1258

['public void testTokenize() throws InterruptedException {', 'template.setDefaultEndpointUri("direct:tokenize");', 'execute(1);', 'resetMock(count);', 'StopWatch watch = new StopWatch();', 'execute(1);', 'assertMockEndpointsSatisfied();']
['ran tests in ms ', ['count', 'watch', 'taken']]
camel sample_6437

['}', '});', 'mockRecovery.assertIsSatisfied();', 'mockResult.assertIsSatisfied();', 'List<Exchange> list = mockRecovery.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();']
['headers ', ['headers']]
camel sample_12826

['mockRecovery.assertIsSatisfied();', 'mockResult.assertIsSatisfied();', 'List<Exchange> list = mockRecovery.getReceivedExchanges();', 'Exchange exchange = list.get(0);', 'assertNotNull("exchange", exchange);', 'Message in = exchange.getIn();', 'assertNotNull("in", in);', 'Map<String, Object> headers = in.getHeaders();', 'assertTrue("Should be more than one header but was: " + headers, headers.size() > 0);', 'String body = in.getBody(String.class);']
['body ', ['body']]
camel sample_12826

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TwitterTimelineComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-timeline.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.twitter-timeline.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_780

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesBuildConfigsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-build-configs.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-build-configs.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_554

['public static void warmUp() {', 'if (INIT.compareAndSet(false, true)) {', 'Runnable task = () -> {', 'StopWatch watch = new StopWatch();']
['warming up lrucache ', []]
camel sample_4261

['public static void warmUp() {', 'if (INIT.compareAndSet(false, true)) {', 'Runnable task = () -> {', 'StopWatch watch = new StopWatch();', 'newLRUCache(16);']
['warming up lrucache complete in millis ', ['watch', 'taken']]
camel sample_4261

['public static LRUCache newLRUCache(int maximumCacheSize) {']
['creating lrucache with maximumcachesize ', ['maximumcachesize']]
camel sample_4261

['public static LRUCache newLRUCache(int initialCapacity, int maximumCacheSize) {']
['creating lrucache with initialcapacity maximumcachesize ', ['initialcapacity', 'maximumcachesize']]
camel sample_4261

['public static LRUCache newLRUCache(int initialCapacity, int maximumCacheSize, boolean stopOnEviction) {']
['creating lrucache with initialcapacity maximumcachesize stoponeviction ', ['initialcapacity', 'maximumcachesize', 'stoponeviction']]
camel sample_4261

['public static LRUSoftCache newLRUSoftCache(int maximumCacheSize) {']
['creating lrusoftcache with maximumcachesize ', ['maximumcachesize']]
camel sample_4261

['public static LRUWeakCache newLRUWeakCache(int maximumCacheSize) {']
['creating lruweakcache with maximumcachesize ', ['maximumcachesize']]
camel sample_4261

['public HdfsOsgiHelper(Map<String, String> fileSystems) {', 'try {', 'ClassLoader cl = getClass().getClassLoader();', 'Configuration conf = new Configuration();', 'conf.setClassLoader(cl);', 'for (String key : fileSystems.keySet()) {', 'URI uri = URI.create(key);', 'conf.setClass(String.format("fs.%s.impl", uri.getScheme()), cl.loadClass(fileSystems.get(key)), FileSystem.class);']
['successfully loaded class ', ['filesystems', 'get', 'key']]
camel sample_11162

['public HdfsOsgiHelper(Map<String, String> fileSystems) {', 'try {', 'ClassLoader cl = getClass().getClassLoader();', 'Configuration conf = new Configuration();', 'conf.setClassLoader(cl);', 'for (String key : fileSystems.keySet()) {', 'URI uri = URI.create(key);', 'conf.setClass(String.format("fs.%s.impl", uri.getScheme()), cl.loadClass(fileSystems.get(key)), FileSystem.class);', 'FileSystem.get(uri, conf);']
['successfully got uri from filesystem object ', ['uri']]
camel sample_11162

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<OptaPlannerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.optaplanner.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.optaplanner.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1063

['public void getBasicApiJsonSchema() throws Exception {']
['basic api schema ', []]
camel sample_14730

['public void getSObjectJsonSchema() throws Exception {', 'SObjectDescription description = new Account().description();']
['sobject schema ', []]
camel sample_14730

['public Exchange receiveNoWait() {', 'if (LOG.isTraceEnabled()) {']
['receivenowait polling file ', ['getconsumer', 'getendpoint']]
camel sample_4774

['public Exchange receive() {', 'if (LOG.isTraceEnabled()) {']
['receive polling file ', ['getconsumer', 'getendpoint']]
camel sample_4774

['public Exchange receive(long timeout) {', 'if (LOG.isTraceEnabled()) {']
['receive polling file ', ['timeout', 'getconsumer', 'getendpoint']]
camel sample_4774

['int polledMessages = 0;', 'PollingConsumerPollStrategy pollStrategy = getConsumer().getPollStrategy();', 'boolean sendEmptyMessageWhenIdle = getConsumer() instanceof ScheduledBatchPollingConsumer && getConsumer().isSendEmptyMessageWhenIdle();', 'StopWatch watch = new StopWatch();', 'while (!done) {', 'try {', 'cause = null;', 'done = true;', 'if (isRunAllowed()) {', 'if (retryCounter == -1) {']
['starting to poll ', ['this', 'getendpoint']]
camel sample_4774

['PollingConsumerPollStrategy pollStrategy = getConsumer().getPollStrategy();', 'boolean sendEmptyMessageWhenIdle = getConsumer() instanceof ScheduledBatchPollingConsumer && getConsumer().isSendEmptyMessageWhenIdle();', 'StopWatch watch = new StopWatch();', 'while (!done) {', 'try {', 'cause = null;', 'done = true;', 'if (isRunAllowed()) {', 'if (retryCounter == -1) {', '} else {']
['retrying attempt to poll ', ['retrycounter', 'this', 'getendpoint']]
camel sample_4774

['cause = null;', 'done = true;', 'if (isRunAllowed()) {', 'if (retryCounter == -1) {', '} else {', '}', 'boolean begin = pollStrategy.begin(getConsumer(), getEndpoint());', 'if (begin) {', 'retryCounter++;', 'polledMessages = getConsumer().poll();']
['polled messages ', ['polledmessages']]
camel sample_4774

['if (begin) {', 'retryCounter++;', 'polledMessages = getConsumer().poll();', 'if (polledMessages == 0 && sendEmptyMessageWhenIdle) {', 'processEmptyMessage();', '} else if (polledMessages == 0 && timeout > 0) {', 'done = false;', '}', 'pollStrategy.commit(getConsumer(), getEndpoint(), polledMessages);', '} else {']
['cannot begin polling as pollstrategy returned false ', ['pollstrategy']]
camel sample_4774

['polledMessages = getConsumer().poll();', 'if (polledMessages == 0 && sendEmptyMessageWhenIdle) {', 'processEmptyMessage();', '} else if (polledMessages == 0 && timeout > 0) {', 'done = false;', '}', 'pollStrategy.commit(getConsumer(), getEndpoint(), polledMessages);', '} else {', '}', '}']
['finished polling ', ['this', 'getendpoint']]
camel sample_4774

['public void process(Exchange exchange) throws Exception {', 'Object name = exchange.getIn().getHeader(Exchange.FILE_NAME);', 'if (name != null) {']
['received file ', ['name']]
camel sample_4774

['protected void processEmptyMessage() throws Exception {', 'Exchange exchange = getEndpoint().createExchange();']
['sending empty message as there were no messages from polling ', ['this', 'getendpoint']]
camel sample_4774

['private static void sleep(long delay) throws InterruptedException {', 'if (delay <= 0) {', 'return;', '}']
['sleeping for millis ', ['delay']]
camel sample_4774

['public void testCopyFile() throws Exception {', 'com.box.sdk.BoxFile result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.destinationFolderId", "0");', 'headers.put("CamelBox.newName", CAMEL_TEST_COPY_FILE_NAME);', 'result = requestBodyAndHeaders("direct: assertNotNull("copyFile result", result);', 'assertEquals("copyFile name", CAMEL_TEST_COPY_FILE_NAME, result.getInfo().getName());']
['copyfile ', ['result']]
camel sample_17409

['public void testCreateFileMetadata() throws Exception {', 'Metadata metadata = new Metadata();', 'metadata.add("/foo", "bar");', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.metadata", metadata);', 'headers.put("CamelBox.typeName", null);', 'final com.box.sdk.Metadata result = requestBodyAndHeaders("direct: assertNotNull("createFileMetadata result", result);', 'assertEquals("createFileMetadata result", "bar", result.get("/foo"));']
['createfilemetadata ', ['result']]
camel sample_17409

['public void testCreateFileSharedLink() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.access", BoxSharedLink.Access.DEFAULT);', 'headers.put("CamelBox.unshareDate", null);', 'headers.put("CamelBox.permissions", null);', 'final com.box.sdk.BoxSharedLink result = requestBodyAndHeaders("direct: assertNotNull("createFileSharedLink result", result);']
['createfilesharedlink ', ['result']]
camel sample_17409

['public void testDeleteFile() throws Exception {', 'requestBody("direct: BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection());', 'Iterable<BoxItem.Info> it = rootFolder.search("^" + CAMEL_TEST_FILE + "$");', 'int searchResults = sizeOfIterable(it);', 'boolean exists = searchResults > 0 ? true : false;', 'assertEquals("deleteFile exists", false, exists);']
['deletefile exists ', ['exists']]
camel sample_17409

['public void testDownloadFile() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'ByteArrayOutputStream output = new ByteArrayOutputStream();', 'headers.put("CamelBox.output", output);', 'headers.put("CamelBox.rangeStart", null);', 'headers.put("CamelBox.rangeEnd", null);', 'headers.put("CamelBox.listener", null);', 'final java.io.OutputStream result = requestBodyAndHeaders("direct: assertNotNull("downloadFile result", result);']
['downloadfile ', ['result']]
camel sample_17409

['public void testDownloadPreviousFileVersion() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.version", 0);', 'ByteArrayOutputStream output = new ByteArrayOutputStream();', 'headers.put("CamelBox.output", output);', 'headers.put("CamelBox.listener", null);', 'final java.io.OutputStream result = requestBodyAndHeaders("direct: headers);', 'assertNotNull("downloadPreviousFileVersion result", result);']
['downloadpreviousfileversion ', ['result']]
camel sample_17409

['public void testGetDownloadURL() throws Exception {', 'final java.net.URL result = requestBody("direct: assertNotNull("getDownloadURL result", result);']
['getdownloadurl ', ['result']]
camel sample_17409

['public void testGetFileInfo() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.fields", null);', 'final com.box.sdk.BoxFile.Info result = requestBodyAndHeaders("direct: assertNotNull("getFileInfo result", result);']
['getfileinfo ', ['result']]
camel sample_17409

['public void testGetFileMetadata() throws Exception {', 'testFile.createMetadata(new Metadata());', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.typeName", null);', 'final com.box.sdk.Metadata result = requestBodyAndHeaders("direct: assertNotNull("getFileMetadata result", result);']
['getfilemetadata ', ['result']]
camel sample_17409

['public void testGetFilePreviewLink() throws Exception {', 'final java.net.URL result = requestBody("direct: assertNotNull("getFilePreviewLink result", result);']
['getfilepreviewlink ', ['result']]
camel sample_17409

['public void testGetFileThumbnail() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.fileType", ThumbnailFileType.JPG);', 'headers.put("CamelBox.minWidth", 32);', 'headers.put("CamelBox.minHeight", 32);', 'headers.put("CamelBox.maxWidth", 32);', 'headers.put("CamelBox.maxHeight", 32);', 'final byte[] result = requestBodyAndHeaders("direct: assertNotNull("getFileThumbnail result", result);']
['getfilethumbnail ', ['result']]
camel sample_17409

['public void testGetFileVersions() throws Exception {', 'final java.util.Collection result = requestBody("direct: assertNotNull("getFileVersions result", result);']
['getfileversions ', ['result']]
camel sample_17409

['public void testMoveFile() throws Exception {', 'com.box.sdk.BoxFile result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.destinationFolderId", "0");', 'headers.put("CamelBox.newName", CAMEL_TEST_MOVE_FILE_NAME);', 'result = requestBodyAndHeaders("direct: assertNotNull("moveFile result", result);', 'assertEquals("moveFile name", CAMEL_TEST_MOVE_FILE_NAME, result.getInfo().getName());']
['movefile ', ['result']]
camel sample_17409

['public void testPromoteFileVersion() throws Exception {', 'testFile.uploadVersion(getClass().getResourceAsStream(CAMEL_TEST_FILE));', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.version", 1);', 'final com.box.sdk.BoxFileVersion result = requestBodyAndHeaders("direct: assertNotNull("promoteFileVersion result", result);']
['promotefileversion ', ['result']]
camel sample_17409

['public void testRenameFile() throws Exception {', 'com.box.sdk.BoxFile result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.newFileName", CAMEL_TEST_RENAME_FILE_NAME);', 'result = requestBodyAndHeaders("direct: assertNotNull("renameFile result", result);', 'assertEquals("renameFile name", CAMEL_TEST_RENAME_FILE_NAME, result.getInfo().getName());']
['renamefile ', ['result']]
camel sample_17409

['public void testUpdateFileInfo() throws Exception {', 'BoxFile.Info info = testFile.getInfo();', 'info.setDescription(CAMEL_TEST_FILE_DESCRIPTION);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.info", info);', 'final com.box.sdk.BoxFile result = requestBodyAndHeaders("direct: assertNotNull("updateFileInfo result", result);', 'assertEquals("updateFileInfo info", CAMEL_TEST_FILE_DESCRIPTION, result.getInfo().getDescription());']
['updatefileinfo ', ['result']]
camel sample_17409

['public void testUpdateFileMetadata() throws Exception {', 'Metadata metadata = new Metadata();', 'metadata = testFile.createMetadata(metadata);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.metadata", metadata);', 'final com.box.sdk.Metadata result = requestBodyAndHeaders("direct: assertNotNull("updateFileMetadata result", result);']
['updatefilemetadata ', ['result']]
camel sample_17409

['try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.parentFolderId", "0");', 'headers.put("CamelBox.content", getClass().getResourceAsStream(CAMEL_TEST_FILE));', 'headers.put("CamelBox.fileName", CAMEL_TEST_UPLOAD_FILE_NAME);', 'headers.put("CamelBox.created", null);', 'headers.put("CamelBox.modified", null);', 'headers.put("CamelBox.size", null);', 'headers.put("CamelBox.listener", null);', 'result = requestBodyAndHeaders("direct: assertNotNull("uploadFile result", result);']
['uploadfile ', ['result']]
camel sample_17409

['public void testUploadNewFileVersion() throws Exception {', 'com.box.sdk.BoxFile result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.fileContent", getClass().getResourceAsStream(CAMEL_TEST_FILE));', 'headers.put("CamelBox.modified", null);', 'headers.put("CamelBox.fileSize", null);', 'headers.put("CamelBox.listener", null);', 'result = requestBodyAndHeaders("direct: assertNotNull("uploadNewFileVersion result", result);']
['uploadnewfileversion ', ['result']]
camel sample_17409

['public void doStart() throws Exception {', 'super.doStart();', 'sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient();', 'String domainName = getConfiguration().getDomainName();']
['querying whether domain already exists ', ['domainname']]
camel sample_8757

['public void doStart() throws Exception {', 'super.doStart();', 'sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient();', 'String domainName = getConfiguration().getDomainName();', 'try {', 'sdbClient.domainMetadata(new DomainMetadataRequest(domainName));']
['domain already exists ', ['domainname']]
camel sample_8757

['public void doStart() throws Exception {', 'super.doStart();', 'sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient();', 'String domainName = getConfiguration().getDomainName();', 'try {', 'sdbClient.domainMetadata(new DomainMetadataRequest(domainName));', 'return;', '} catch (NoSuchDomainException ase) {']
['domain doesn t exist yet ', ['domainname']]
camel sample_8757

['public void doStart() throws Exception {', 'super.doStart();', 'sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient();', 'String domainName = getConfiguration().getDomainName();', 'try {', 'sdbClient.domainMetadata(new DomainMetadataRequest(domainName));', 'return;', '} catch (NoSuchDomainException ase) {']
['creating domain ', ['domainname']]
camel sample_8757

['public void doStart() throws Exception {', 'super.doStart();', 'sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient();', 'String domainName = getConfiguration().getDomainName();', 'try {', 'sdbClient.domainMetadata(new DomainMetadataRequest(domainName));', 'return;', '} catch (NoSuchDomainException ase) {', 'sdbClient.createDomain(new CreateDomainRequest(domainName));']
['domain created ', ['domainname']]
camel sample_8757

['public void validateConfiguration() {', 'for (ChannelHandler encoder : encoders) {', 'if (encoder instanceof ChannelHandlerFactory) {', 'continue;', '}', 'if (ObjectHelper.getAnnotation(encoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}']
['the encoder is not shareable or an channelhandlerfactory instance the encoder cannot safely be used ', ['encoder']]
camel sample_10266

['continue;', '}', '}', 'for (ChannelHandler decoder : decoders) {', 'if (decoder instanceof ChannelHandlerFactory) {', 'continue;', '}', 'if (ObjectHelper.getAnnotation(decoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}']
['the decoder is not shareable or an channelhandlerfactory instance the decoder cannot safely be used ', ['decoder']]
camel sample_10266

['continue;', '}', 'if (ObjectHelper.getAnnotation(decoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}', '}', 'if (sslHandler != null) {', 'boolean factory = sslHandler instanceof ChannelHandlerFactory;', 'boolean shareable = ObjectHelper.getAnnotation(sslHandler, ChannelHandler.Sharable.class) != null;', 'if (!factory && !shareable) {']
['the sslhandler is not shareable or an channelhandlerfactory instance the sslhandler cannot safely be used ', ['sslhandler']]
camel sample_10266

['if ("udp".equalsIgnoreCase(protocol)) {', 'encoders.add(ChannelHandlerFactories.newDatagramPacketEncoder());', '}', 'if (isTextline()) {', 'Charset charset = getEncoding() != null ? Charset.forName(getEncoding()) : CharsetUtil.UTF_8;', 'encoders.add(ChannelHandlerFactories.newStringEncoder(charset, protocol));', 'ByteBuf[] delimiters = delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter();', 'decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength, delimiters, protocol));', 'decoders.add(ChannelHandlerFactories.newStringDecoder(charset, protocol));', 'if (LOG.isDebugEnabled()) {']
['using textline encoders and decoders with charset delimiter and decodermaxlinelength ', ['new', 'object', 'charset', 'delimiter', 'decodermaxlinelength']]
camel sample_10266

['decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength, delimiters, protocol));', 'decoders.add(ChannelHandlerFactories.newStringDecoder(charset, protocol));', 'if (LOG.isDebugEnabled()) {', '}', '} else if ("udp".equalsIgnoreCase(protocol) && isUdpByteArrayCodec()) {', 'encoders.add(ChannelHandlerFactories.newByteArrayEncoder(protocol));', 'decoders.add(ChannelHandlerFactories.newByteArrayDecoder(protocol));', '} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder(protocol));', 'decoders.add(ChannelHandlerFactories.newObjectDecoder(protocol));']
['using object encoders and decoders ', []]
camel sample_10266

['encoders.add(ChannelHandlerFactories.newByteArrayEncoder(protocol));', 'decoders.add(ChannelHandlerFactories.newByteArrayDecoder(protocol));', '} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder(protocol));', 'decoders.add(ChannelHandlerFactories.newObjectDecoder(protocol));', '}', 'if ("udp".equalsIgnoreCase(protocol)) {', 'decoders.add(ChannelHandlerFactories.newDatagramPacketDecoder());', '}', '} else {']
['no encoders and decoders will be used ', []]
camel sample_10266

['} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder(protocol));', 'decoders.add(ChannelHandlerFactories.newObjectDecoder(protocol));', '}', 'if ("udp".equalsIgnoreCase(protocol)) {', 'decoders.add(ChannelHandlerFactories.newDatagramPacketDecoder());', '}', '} else {', '}', '} else {']
['using configured encoders and or decoders ', []]
camel sample_10266

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastMapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-map.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-map.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_692

['public void testAsyncJmsInOut() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_6933

['private void createJDBCConnection() throws ClassNotFoundException, SQLException {', 'Class.forName(DrillConstants.DRILL_DRIVER);']
['connection url ', ['endpoint', 'tojdbcuri']]
camel sample_12037

['public String greetMe(String me) {']
['executing operation greetme ', []]
camel sample_7764

['public String greetMe(String me) {']
['message received ', ['me']]
camel sample_7764

['public void greetMeOneWay(String me) {']
['executing operation greetmeoneway ', []]
camel sample_7764

['public void greetMeOneWay(String me) {']
['hello there ', ['me']]
camel sample_7764

['public String sayHi() {']
['executing operation sayhi ', []]
camel sample_7764

['private void start() throws IOException {', 'int port = 50051;', 'server = ServerBuilder.forPort(port).addService(new HelloCamelImpl()).build().start();']
['server started i m listening on ', ['port']]
camel sample_17665

['public void configure() throws Exception {']
['foo ', ['loggingerrorhandler', 'level', 'logginglevel', 'warn', 'log', 'loggerfactory', 'getlogger']]
camel sample_3727

['public void configure() throws Exception {']
['foo ', ['loggingerrorhandler', 'level', 'logginglevel', 'error', 'logname']]
camel sample_3727

['public void configure() throws Exception {']
['foo ', ['loggingerrorhandler', 'level', 'logginglevel', 'warn', 'logname']]
camel sample_3727

['protected void doGetSecret(Exchange exchange, String operation) throws Exception {', 'Secret secret = null;', 'String secretName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(secretName)) {']
['get a specific secret require specify a secret name ', []]
camel sample_13276

['protected void doGetSecret(Exchange exchange, String operation) throws Exception {', 'Secret secret = null;', 'String secretName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(secretName)) {', 'throw new IllegalArgumentException( "Get a specific Secret require specify a Secret name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific secret require specify a namespace name ', []]
camel sample_13276

['protected void doCreateSecret(Exchange exchange, String operation) throws Exception {', 'Secret secret = null;', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'Secret secretToCreate = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET, Secret.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific secret require specify a namespace name ', []]
camel sample_13276

['protected void doCreateSecret(Exchange exchange, String operation) throws Exception {', 'Secret secret = null;', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'Secret secretToCreate = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET, Secret.class);', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific secret require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(secretToCreate)) {']
['create a specific secret require specify a secret bean ', []]
camel sample_13276

['protected void doDeleteSecret(Exchange exchange, String operation) throws Exception {', 'String secretName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(secretName)) {']
['delete a specific secret require specify a secret name ', []]
camel sample_13276

['protected void doDeleteSecret(Exchange exchange, String operation) throws Exception {', 'String secretName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SECRET_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(secretName)) {', 'throw new IllegalArgumentException( "Delete a specific secret require specify a secret name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific secret require specify a namespace name ', []]
camel sample_13276

['protected void execute(Runnable runnable) {', 'try {', 'runnable.run();', '} catch (WebApplicationException e) {', 'final org.apache.camel.component.linkedin.api.model.Error error = e.getResponse().readEntity(Error.class);', 'assertNotNull(error);']
['error ', ['error', 'getmessage']]
camel sample_8868

['public void onInit(Route route) {']
['initializing throttlingexceptionroutepolicy route policy ', []]
camel sample_4095

['public void onExchangeDone(Route route, Exchange exchange) {', 'if (keepOpen.get()) {', 'if (state.get() != STATE_OPEN) {']
['opening circuit b c keepopen is on ', []]
camel sample_4095

['for (Class<?> exception : throttledExceptions) {', 'if (exchange.getException(exception) != null) {', 'answer = true;', 'break;', '}', '}', '}', '}', 'if (LOG.isDebugEnabled()) {', 'String exceptionName = exchange.getException() == null ? "none" : exchange.getException().getClass().getSimpleName();']
['hasfailed with throttled exception for exchangeid ', ['answer', 'exceptionname', 'exchange', 'getexchangeid']]
camel sample_4095

['private void calculateState(Route route) {', 'boolean failureLimitReached = isThresholdExceeded();', 'if (state.get() == STATE_CLOSED) {', 'if (failureLimitReached) {']
['opening circuit ', []]
camel sample_4095

['private void calculateState(Route route) {', 'boolean failureLimitReached = isThresholdExceeded();', 'if (state.get() == STATE_CLOSED) {', 'if (failureLimitReached) {', 'openCircuit(route);', '}', '} else if (state.get() == STATE_HALF_OPEN) {', 'if (failureLimitReached) {']
['opening circuit ', []]
camel sample_4095

['private void calculateState(Route route) {', 'boolean failureLimitReached = isThresholdExceeded();', 'if (state.get() == STATE_CLOSED) {', 'if (failureLimitReached) {', 'openCircuit(route);', '}', '} else if (state.get() == STATE_HALF_OPEN) {', 'if (failureLimitReached) {', 'openCircuit(route);', '} else {']
['closing circuit ', []]
camel sample_4095

['} else if (state.get() == STATE_HALF_OPEN) {', 'if (failureLimitReached) {', 'openCircuit(route);', '} else {', 'closeCircuit(route);', '}', '} else if (state.get() == STATE_OPEN) {', 'if (!keepOpen.get()) {', 'long elapsedTimeSinceOpened = System.currentTimeMillis() - openedAt;', 'if (halfOpenAfter <= elapsedTimeSinceOpened) {']
['checking an open circuit ', []]
camel sample_4095

['openCircuit(route);', '} else {', 'closeCircuit(route);', '}', '} else if (state.get() == STATE_OPEN) {', 'if (!keepOpen.get()) {', 'long elapsedTimeSinceOpened = System.currentTimeMillis() - openedAt;', 'if (halfOpenAfter <= elapsedTimeSinceOpened) {', 'if (halfOpenHandler != null) {', 'if (halfOpenHandler.isReadyToBeClosed()) {']
['closing circuit ', []]
camel sample_4095

['closeCircuit(route);', '}', '} else if (state.get() == STATE_OPEN) {', 'if (!keepOpen.get()) {', 'long elapsedTimeSinceOpened = System.currentTimeMillis() - openedAt;', 'if (halfOpenAfter <= elapsedTimeSinceOpened) {', 'if (halfOpenHandler != null) {', 'if (halfOpenHandler.isReadyToBeClosed()) {', 'closeCircuit(route);', '} else {']
['opening circuit ', []]
camel sample_4095

['if (!keepOpen.get()) {', 'long elapsedTimeSinceOpened = System.currentTimeMillis() - openedAt;', 'if (halfOpenAfter <= elapsedTimeSinceOpened) {', 'if (halfOpenHandler != null) {', 'if (halfOpenHandler.isReadyToBeClosed()) {', 'closeCircuit(route);', '} else {', 'openCircuit(route);', '}', '} else {']
['half opening circuit ', []]
camel sample_4095

['if (halfOpenHandler != null) {', 'if (halfOpenHandler.isReadyToBeClosed()) {', 'closeCircuit(route);', '} else {', 'openCircuit(route);', '}', '} else {', 'halfOpenCircuit(route);', '}', '} else {']
['keeping circuit open time not elapsed ', []]
camel sample_4095

['closeCircuit(route);', '} else {', 'openCircuit(route);', '}', '} else {', 'halfOpenCircuit(route);', '}', '} else {', '}', '} else {']
['keeping circuit open keepopen is true ', []]
camel sample_4095

['public void setKeepOpen(boolean keepOpen) {']
['keep open ', ['keepopen']]
camel sample_4095

['if (SmppUtils.is8Bit(alphabet)) {', 'return shortMessage;', '}', 'String encoding = IOHelper.getCharsetName(getExchange(), false);', 'if (ObjectHelper.isEmpty(encoding) || !Charset.isSupported(encoding)) {', 'encoding = configuration.getEncoding();', '}', 'try {', 'return new String(shortMessage, encoding);', '} catch (UnsupportedEncodingException e) {']
['unsupported encoding using system default encoding ', ['encoding']]
camel sample_16900

['if (consumers == null) {', 'consumers = new GenericObjectPool<MessageConsumerResources>(new MessageConsumerResourcesFactory());', 'consumers.setMaxActive(getConsumerCount());', 'consumers.setMaxIdle(getConsumerCount());', 'if (getEndpoint().isAsyncStartListener()) {', 'asyncStart = getEndpoint().getComponent().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'fillConsumersPool();', '} catch (Throwable e) {']
['error starting listener container on destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_12410

['asyncStart.cancel(true);', '}', 'if (consumers != null) {', 'if (getEndpoint().isAsyncStopListener()) {', 'getEndpoint().getComponent().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'consumers.close();', 'consumers = null;', '} catch (Throwable e) {']
['error stopping listener container on destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_12410

['MessageConsumerResources answer;', 'ConnectionResource connectionResource = getOrCreateConnectionResource();', 'Connection conn = connectionResource.borrowConnection();', 'try {', 'Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);', 'MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint());', 'MessageListener handler = createMessageHandler(session);', 'messageConsumer.setMessageListener(handler);', 'answer = new MessageConsumerResources(session, messageConsumer);', '} catch (Exception e) {']
['unable to create the messageconsumer ', ['e']]
camel sample_12410

['public void notify(EventObject event) throws Exception {', 'CamelContext context = ((CamelContextStoppingEvent) event).getContext();', 'try {', 'String className = this.getClass().getSimpleName();', 'String dir = "target/camel-route-coverage";', 'String testName = (String) testMethodName.apply(this);', 'String name = className + "-" + testName + ".xml";', 'ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();', 'if (managedCamelContext == null) {']
['cannot dump route coverage to file as jmx is not enabled override usejmx method to enable jmx in the unit test classes ', []]
camel sample_10587

['String testName = (String) testMethodName.apply(this);', 'String name = className + "-" + testName + ".xml";', 'ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();', 'if (managedCamelContext == null) {', '} else {', 'String xml = managedCamelContext.dumpRoutesCoverageAsXml();', 'String combined = "<camelRouteCoverage>\\n" + gatherTestDetailsAsXml(testName) + xml + "\\n</camelRouteCoverage>";', 'File file = new File(dir);', 'file.mkdirs();', 'file = new File(dir, name);']
['dumping route coverage to file ', ['file']]
camel sample_10587

['String combined = "<camelRouteCoverage>\\n" + gatherTestDetailsAsXml(testName) + xml + "\\n</camelRouteCoverage>";', 'File file = new File(dir);', 'file.mkdirs();', 'file = new File(dir, name);', 'InputStream is = new ByteArrayInputStream(combined.getBytes());', 'OutputStream os = new FileOutputStream(file, false);', 'IOHelper.copyAndCloseInput(is, os);', 'IOHelper.close(os);', '}', '} catch (Exception e) {']
['error during dumping route coverage statistic this exception is ignored ', ['e']]
camel sample_10587

['public void testGetProfile() throws Exception {', 'final com.google.api.services.gmail.model.Profile result = requestBody("direct: assertNotNull("getProfile result", result);', 'assertNotNull("Should be email address associated with current account", result.getEmailAddress());']
['getprofile ', ['result']]
camel sample_12040

['public void testIntegerMessage() throws Exception {', 'record = "10000,25.10";', 'template.sendBody(record);', 'result.expectedMessageCount(1);', 'result.assertIsSatisfied();', 'Object data = result.getReceivedExchanges().get(0).getIn().getBody();']
['model generated ', ['data', 'getclass', 'getname']]
camel sample_7343

['public void read(String body, @XPath("/soap:Envelope/soap:Body/foo/text()") String foo) {', 'this.foo = foo;', 'this.body = body;']
['read method called on ', ['this']]
camel sample_2454

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'IBatisEndpoint endpoint = getEndpoint();']
['polling ', ['endpoint']]
camel sample_17307

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'final IBatisEndpoint endpoint = getEndpoint();', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_17307

['total = maxMessagesPerPoll;', '}', 'for (int index = 0; index < total && isBatchAllowed(); index++) {', 'DataHolder holder = ObjectHelper.cast(DataHolder.class, exchanges.poll());', 'Exchange exchange = holder.exchange;', 'Object data = holder.data;', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;']
['processing exchange ', ['exchange']]
camel sample_17307

['}', 'final AtomicInteger total = new AtomicInteger(0);', 'final Iterator<ProcessorExchangePair> it = pairs.iterator();', 'if (it.hasNext()) {', 'final AtomicBoolean running = new AtomicBoolean(true);', 'final AtomicBoolean allTasksSubmitted = new AtomicBoolean();', 'final CountDownLatch aggregationOnTheFlyDone = new CountDownLatch(1);', 'final AtomicException executionException = new AtomicException();', 'final AggregateOnTheFlyTask aggregateOnTheFlyTask = new AggregateOnTheFlyTask(result, original, total, completion, running, aggregationOnTheFlyDone, allTasksSubmitted, executionException);', 'final AtomicBoolean aggregationTaskSubmitted = new AtomicBoolean();']
['starting to submit parallel tasks ', []]
camel sample_4580

['}', 'Integer number = getExchangeIndex(subExchange);', 'boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, "Parallel processing failed for number " + number, LOG);', 'if (stopOnException && !continueProcessing) {', 'running.set(false);', 'if (subExchange.getException() != null) {', 'CamelExchangeException cause = new CamelExchangeException("Parallel processing failed for number " + number, subExchange, subExchange.getException());', 'subExchange.setException(cause);', '}', '}']
['parallel processing complete for exchange ', ['subexchange']]
camel sample_4580

['});', 'total.incrementAndGet();', '}', '} catch (Throwable e) {', 'if (e instanceof Exception) {', 'executionException.set((Exception) e);', '} else {', 'executionException.set(ObjectHelper.wrapRuntimeCamelException(e));', '}', '}']
['signaling that all tasks has been submitted ', ['total', 'get']]
camel sample_4580

['total.incrementAndGet();', '}', '} catch (Throwable e) {', 'if (e instanceof Exception) {', 'executionException.set((Exception) e);', '} else {', 'executionException.set(ObjectHelper.wrapRuntimeCamelException(e));', '}', '}', 'allTasksSubmitted.set(true);']
['waiting for on the fly aggregation to complete aggregating responses for exchangeid ', ['total', 'get', 'original', 'getexchangeid']]
camel sample_4580

['if (e instanceof Exception) {', 'executionException.set((Exception) e);', '} else {', 'executionException.set(ObjectHelper.wrapRuntimeCamelException(e));', '}', '}', 'allTasksSubmitted.set(true);', 'aggregationOnTheFlyDone.await();', 'if (executionException.get() != null) {', 'if (LOG.isDebugEnabled()) {']
['parallel processing failed due ', ['executionexception', 'get', 'getmessage']]
camel sample_4580

['}', '}', 'allTasksSubmitted.set(true);', 'aggregationOnTheFlyDone.await();', 'if (executionException.get() != null) {', 'if (LOG.isDebugEnabled()) {', '}', 'throw executionException.get();', '}', '}']
['done parallel processing exchanges ', ['total']]
camel sample_4580

['public void run() {']
['aggregate on the fly task started for exchangeid ', ['original', 'getexchangeid']]
camel sample_4580

['public void run() {', 'try {', 'aggregateOnTheFly();', '} catch (Throwable e) {', 'if (e instanceof Exception) {', 'executionException.set((Exception) e);', '} else {', 'executionException.set(ObjectHelper.wrapRuntimeCamelException(e));', '}', '} finally {']
['signaling we are done aggregating on the fly for exchangeid ', ['original', 'getexchangeid']]
camel sample_4580

['public void run() {', 'try {', 'aggregateOnTheFly();', '} catch (Throwable e) {', 'if (e instanceof Exception) {', 'executionException.set((Exception) e);', '} else {', 'executionException.set(ObjectHelper.wrapRuntimeCamelException(e));', '}', '} finally {']
['aggregate on the fly task done for exchangeid ', ['original', 'getexchangeid']]
camel sample_4580

['private void aggregateOnTheFly() throws InterruptedException, ExecutionException {', 'final AtomicBoolean timedOut = new AtomicBoolean();', 'boolean stoppedOnException = false;', 'final StopWatch watch = new StopWatch();', 'final AtomicInteger aggregated = new AtomicInteger();', 'boolean done = false;', 'while (!done) {', 'if (allTasksSubmitted.get() && aggregated.intValue() >= total.get()) {']
['done aggregating exchanges on the fly ', ['aggregated']]
camel sample_4580

['final StopWatch watch = new StopWatch();', 'final AtomicInteger aggregated = new AtomicInteger();', 'boolean done = false;', 'while (!done) {', 'if (allTasksSubmitted.get() && aggregated.intValue() >= total.get()) {', 'break;', '}', 'Future<Exchange> future;', 'if (timedOut.get()) {', 'future = completion.poll();']
['polled completion task after timeout to grab already completed tasks ', ['aggregated', 'future']]
camel sample_4580

['break;', '}', 'Future<Exchange> future;', 'if (timedOut.get()) {', 'future = completion.poll();', '} else if (timeout > 0) {', 'long left = timeout - watch.taken();', 'if (left < 0) {', 'left = 0;', '}']
['polling completion task using timeout millis ', ['aggregated', 'left']]
camel sample_4580

['Future<Exchange> future;', 'if (timedOut.get()) {', 'future = completion.poll();', '} else if (timeout > 0) {', 'long left = timeout - watch.taken();', 'if (left < 0) {', 'left = 0;', '}', 'future = completion.poll(left, TimeUnit.MILLISECONDS);', '} else {']
['polling completion task ', ['aggregated']]
camel sample_4580

['ParallelAggregateTask task = new ParallelAggregateTask(result, subExchange, aggregated);', 'if (parallelAggregate) {', 'aggregateExecutorService.submit(task);', '} else {', 'task.run();', '}', '}', '}', 'if (timedOut.get() || stoppedOnException) {', 'if (timedOut.get()) {']
['cancelling tasks due timeout after millis ', ['timeout']]
camel sample_4580

['aggregateExecutorService.submit(task);', '} else {', 'task.run();', '}', '}', '}', 'if (timedOut.get() || stoppedOnException) {', 'if (timedOut.get()) {', '}', 'if (stoppedOnException) {']
['cancelling tasks due stoponexception ', []]
camel sample_4580

['if (strategy instanceof DelegateAggregationStrategy) {', 'strategy = ((DelegateAggregationStrategy) strategy).getDelegate();', '}', 'if (strategy instanceof TimeoutAwareAggregationStrategy) {', 'Exchange oldExchange = result.get();', 'if (oldExchange == null) {', 'oldExchange = original;', '}', '((TimeoutAwareAggregationStrategy) strategy).timeout(oldExchange, aggregated.intValue(), total.intValue(), timeout);', '} else {']
['parallel processing timed out after millis for number this task will be cancelled and will not be aggregated ', ['timeout', 'aggregated', 'intvalue']]
camel sample_4580

['strategy = ((DelegateAggregationStrategy) strategy).getDelegate();', '}', 'if (strategy instanceof TimeoutAwareAggregationStrategy) {', 'Exchange oldExchange = result.get();', 'if (oldExchange == null) {', 'oldExchange = original;', '}', '((TimeoutAwareAggregationStrategy) strategy).timeout(oldExchange, aggregated.intValue(), total.intValue(), timeout);', '} else {', '}']
['timeout occurred after millis for number task ', ['timeout', 'aggregated', 'intvalue']]
camel sample_4580

['while (it.hasNext()) {', 'ProcessorExchangePair pair = it.next();', 'if (pair == null) {', 'continue;', '}', 'Exchange subExchange = pair.getExchange();', 'updateNewExchange(subExchange, total.get(), pairs, it);', 'boolean sync = doProcessSequential(original, result, pairs, it, pair, callback, total);', 'if (!sync) {', 'if (LOG.isTraceEnabled()) {']
['processing exchangeid is continued being processed asynchronously ', ['pair', 'getexchange', 'getexchangeid']]
camel sample_4580

['}', 'Exchange subExchange = pair.getExchange();', 'updateNewExchange(subExchange, total.get(), pairs, it);', 'boolean sync = doProcessSequential(original, result, pairs, it, pair, callback, total);', 'if (!sync) {', 'if (LOG.isTraceEnabled()) {', '}', 'return false;', '}', 'if (LOG.isTraceEnabled()) {']
['processing exchangeid is continued being processed synchronously ', ['pair', 'getexchange', 'getexchangeid']]
camel sample_4580

['}', 'boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, "Sequential processing failed for number " + total.get(), LOG);', 'if (stopOnException && !continueProcessing) {', 'if (subExchange.getException() != null) {', 'CamelExchangeException cause = new CamelExchangeException("Sequential processing failed for number " + total.get(), subExchange, subExchange.getException());', 'subExchange.setException(cause);', '}', 'result.set(subExchange);', 'return true;', '}']
['sequential processing complete for number exchange ', ['total', 'subexchange']]
camel sample_4580

['result.set(subExchange);', 'return true;', '}', 'if (parallelAggregate) {', 'doAggregateInternal(getAggregationStrategy(subExchange), result, subExchange);', '} else {', 'doAggregate(getAggregationStrategy(subExchange), result, subExchange);', '}', 'total.incrementAndGet();', '}']
['done sequential processing exchanges ', ['total']]
camel sample_4580

['doDone(original, subExchange, pairs, callback, false, true);', 'return;', '}', 'total.incrementAndGet();', 'while (it.hasNext()) {', 'ProcessorExchangePair pair = it.next();', 'subExchange = pair.getExchange();', 'updateNewExchange(subExchange, total.get(), pairs, it);', 'boolean sync = doProcessSequential(original, result, pairs, it, pair, callback, total);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['original', 'getexchangeid']]
camel sample_4580

['protected Processor createErrorHandler(RouteContext routeContext, Exchange exchange, Processor processor) {', 'Processor answer;', 'boolean tryBlock = exchange.getProperty(Exchange.TRY_ROUTE_BLOCK, false, boolean.class);', 'if (!tryBlock && routeContext != null) {', 'final PreparedErrorHandler key = new PreparedErrorHandler(routeContext, processor);', 'answer = errorHandlers.get(key);', 'if (answer != null) {']
['using existing error handler for ', ['processor']]
camel sample_4580

['protected Processor createErrorHandler(RouteContext routeContext, Exchange exchange, Processor processor) {', 'Processor answer;', 'boolean tryBlock = exchange.getProperty(Exchange.TRY_ROUTE_BLOCK, false, boolean.class);', 'if (!tryBlock && routeContext != null) {', 'final PreparedErrorHandler key = new PreparedErrorHandler(routeContext, processor);', 'answer = errorHandlers.get(key);', 'if (answer != null) {', 'return answer;', '}']
['creating error handler for ', ['processor']]
camel sample_4580

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CaffeineCacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-cache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-cache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_466

['public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'SendMessageRequest request = new SendMessageRequest(getQueueUrl(), body);', 'request.setMessageAttributes(translateAttributes(exchange.getIn().getHeaders(), exchange));', 'addDelay(request, exchange);', 'configureFifoAttributes(request, exchange);']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8720

['public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'SendMessageRequest request = new SendMessageRequest(getQueueUrl(), body);', 'request.setMessageAttributes(translateAttributes(exchange.getIn().getHeaders(), exchange));', 'addDelay(request, exchange);', 'configureFifoAttributes(request, exchange);', 'SendMessageResult result = getClient().sendMessage(request);']
['received result ', ['result']]
camel sample_8720

['private void addDelay(SendMessageRequest request, Exchange exchange) {', 'Integer headerValue = exchange.getIn().getHeader(SqsConstants.DELAY_HEADER, Integer.class);', 'Integer delayValue;', 'if (headerValue == null) {']
['using the config delay ', []]
camel sample_8720

['private void addDelay(SendMessageRequest request, Exchange exchange) {', 'Integer headerValue = exchange.getIn().getHeader(SqsConstants.DELAY_HEADER, Integer.class);', 'Integer delayValue;', 'if (headerValue == null) {', 'delayValue = getEndpoint().getConfiguration().getDelaySeconds();', '} else {']
['using the header delay ', []]
camel sample_8720

['private void addDelay(SendMessageRequest request, Exchange exchange) {', 'Integer headerValue = exchange.getIn().getHeader(SqsConstants.DELAY_HEADER, Integer.class);', 'Integer delayValue;', 'if (headerValue == null) {', 'delayValue = getEndpoint().getConfiguration().getDelaySeconds();', '} else {', 'delayValue = headerValue;', '}']
['found delay ', ['delayvalue']]
camel sample_8720

['if (exchange == null) {', 'break;', '} else {', 'processor.process(exchange);', '}', '}', '} finally {', 'try {', 'ServiceHelper.stopAndShutdownService(consumer);', '} catch (Exception e) {']
['failed to stop pollingconsumer this example is ignored ', ['consumer', 'e']]
camel sample_4353

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ElsqlComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elsql.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elsql.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_935

['public List<RepositoryTag> getTags(IRepositoryIdProvider repository) throws IOException {']
['in mockrepositoryservice returning tags ', ['tags', 'size']]
camel sample_14252

['public void find(PackageScanFilter test, String packageName, Set<Class<?>> classes) {', "packageName = packageName.replace('.', '/');", 'int classesSize = classes.size();', 'loadImplementationsInBundle(test, packageName, classes);', 'if (classes.size() == classesSize) {']
['cannot find any classes in bundles not trying regular classloaders scanning ', ['packagename']]
camel sample_13082

['private Set<String> getImplementationsInBundle(PackageScanFilter test, String packageName) {', 'Bundle[] bundles;', 'if (bundle.getBundleContext() != null) {', 'bundles = bundle.getBundleContext().getBundles();', '} else {', 'bundles = new Bundle[]{bundle};', '}', 'Set<String> urls = new LinkedHashSet<String>();', 'for (Bundle bd : bundles) {']
['searching in bundle ', ['bd']]
camel sample_13082

['}', 'Set<String> urls = new LinkedHashSet<String>();', 'for (Bundle bd : bundles) {', 'try {', 'Enumeration<URL> paths = bd.findEntries("/" + packageName, "*.class", true);', 'while (paths != null && paths.hasMoreElements()) {', 'URL path = paths.nextElement();', 'String pathString = path.getPath();', 'String urlString = pathString.substring(pathString.indexOf(packageName));', 'urls.add(urlString);']
['added url ', ['urlstring']]
camel sample_13082

['for (Bundle bd : bundles) {', 'try {', 'Enumeration<URL> paths = bd.findEntries("/" + packageName, "*.class", true);', 'while (paths != null && paths.hasMoreElements()) {', 'URL path = paths.nextElement();', 'String pathString = path.getPath();', 'String urlString = pathString.substring(pathString.indexOf(packageName));', 'urls.add(urlString);', '}', '} catch (Throwable t) {']
['cannot search in bundle for classes matching criteria due this exception will be ignored ', ['bundle', 'test', 't', 'getmessage', 't']]
camel sample_13082

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SagaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.saga.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.saga.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_870

['public SolrCloudFixture(String solrHome) throws Exception {', 'String xml = IOHelper.loadText(new FileInputStream(new File(solrHome, "solr-no-core.xml")));', 'miniCluster = new MiniSolrCloudCluster(1, "/solr", new File("target/tmp").toPath(), xml, null, null);', 'String zkAddr = miniCluster.getZkServer().getZkAddress();', 'String zkHost = miniCluster.getZkServer().getZkHost();', 'buildZooKeeper(zkHost, zkAddr, new File(solrHome), "solrconfig.xml", "schema.xml");', 'List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();', 'for (JettySolrRunner jetty : jettys) {', 'if (!jetty.isRunning()) {']
['jetty not running ', []]
camel sample_13981

['public SolrCloudFixture(String solrHome) throws Exception {', 'String xml = IOHelper.loadText(new FileInputStream(new File(solrHome, "solr-no-core.xml")));', 'miniCluster = new MiniSolrCloudCluster(1, "/solr", new File("target/tmp").toPath(), xml, null, null);', 'String zkAddr = miniCluster.getZkServer().getZkAddress();', 'String zkHost = miniCluster.getZkServer().getZkHost();', 'buildZooKeeper(zkHost, zkAddr, new File(solrHome), "solrconfig.xml", "schema.xml");', 'List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();', 'for (JettySolrRunner jetty : jettys) {', 'if (!jetty.isRunning()) {', '} else {']
['jetty running at port ', ['jetty', 'getbaseurl', 'jetty', 'getlocalport']]
camel sample_13981

['public static void putConfig(String confName, SolrZkClient zkClient, File solrhome, final String srcName, String destName) throws Exception {', 'File file = new File(solrhome, "collection1" + File.separator + "conf" + File.separator + srcName);', 'if (!file.exists()) {']
['zk skipping because it doesn t exist ', ['file', 'getabsolutepath']]
camel sample_13981

['public static void putConfig(String confName, SolrZkClient zkClient, File solrhome, final String srcName, String destName) throws Exception {', 'File file = new File(solrhome, "collection1" + File.separator + "conf" + File.separator + srcName);', 'if (!file.exists()) {', 'return;', '}', 'String destPath = "/configs/" + confName + "/" + destName;']
['zk put to ', ['file', 'getabsolutepath', 'destpath']]
camel sample_13981

['Map<String, List<?>> brothers = new HashMap<String, List<?>>();', 'brothers.put(newExchange.getIn().getHeader(SURNAME_HEADER, String.class), newExchange.getIn().getBody(List.class));', 'newExchange.getIn().setBody(brothers);', '}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {']
['old headers in ', ['stringid', 'oldexchange', 'getin', 'getheaders']]
camel sample_1917

['Map<String, List<?>> brothers = new HashMap<String, List<?>>();', 'brothers.put(newExchange.getIn().getHeader(SURNAME_HEADER, String.class), newExchange.getIn().getBody(List.class));', 'newExchange.getIn().setBody(brothers);', '}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {']
['old body in ', ['stringid', 'oldexchange', 'getin', 'getbody']]
camel sample_1917

['brothers.put(newExchange.getIn().getHeader(SURNAME_HEADER, String.class), newExchange.getIn().getBody(List.class));', 'newExchange.getIn().setBody(brothers);', '}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {', '}']
['new headers in ', ['stringid', 'newexchange', 'getin', 'getheaders']]
camel sample_1917

['brothers.put(newExchange.getIn().getHeader(SURNAME_HEADER, String.class), newExchange.getIn().getBody(List.class));', 'newExchange.getIn().setBody(brothers);', '}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {', '}']
['new body in ', ['stringid', 'newexchange', 'getin', 'getbody']]
camel sample_1917

['}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {', '}', '}', 'private void debugOut(String stringId, Exchange exchange) {']
['old headers out ', ['stringid', 'exchange', 'getin', 'getheaders']]
camel sample_1917

['}', 'debugOut("Brothers Aggregator", answer);', 'return answer;', '}', '};', 'private void debugIn(String stringId, Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange != null) {', '}', '}', 'private void debugOut(String stringId, Exchange exchange) {']
['old body out ', ['stringid', 'exchange', 'getin', 'getbody']]
camel sample_1917

['}', 'if (type == TransactedPolicy.class) {', 'answer = routeContext.lookup(PROPAGATION_REQUIRED, TransactedPolicy.class);', '}', 'if (answer == null && type == TransactedPolicy.class) {', 'Class<?> tmClazz = routeContext.getCamelContext().getClassResolver().resolveClass("org.springframework.transaction.PlatformTransactionManager");', 'if (tmClazz != null) {', 'Map<String, ?> maps = routeContext.lookupByType(tmClazz);', 'if (maps.size() == 1) {', 'Object transactionManager = maps.values().iterator().next();']
['one instance of platformtransactionmanager found in registry ', ['transactionmanager']]
camel sample_5329

['answer = routeContext.lookup(PROPAGATION_REQUIRED, TransactedPolicy.class);', '}', 'if (answer == null && type == TransactedPolicy.class) {', 'Class<?> tmClazz = routeContext.getCamelContext().getClassResolver().resolveClass("org.springframework.transaction.PlatformTransactionManager");', 'if (tmClazz != null) {', 'Map<String, ?> maps = routeContext.lookupByType(tmClazz);', 'if (maps.size() == 1) {', 'Object transactionManager = maps.values().iterator().next();', 'Class<?> txClazz = routeContext.getCamelContext().getClassResolver().resolveClass("org.apache.camel.spring.spi.SpringTransactionPolicy");', 'if (txClazz != null) {']
['creating a new temporary springtransactionpolicy using the platformtransactionmanager ', ['transactionmanager']]
camel sample_5329

['public ServiceNowClient query(Class<?> model) {', 'if (model != null) {', 'String name;', 'String value;', 'for (ServiceNowSysParm parm : model.getAnnotationsByType(ServiceNowSysParm.class)) {', 'name = parm.name();', 'value = parm.value();', 'if (ObjectHelper.isNotEmpty(name) && ObjectHelper.isNotEmpty(value)) {']
['replace query param with value ', ['name', 'value']]
camel sample_13606

['public boolean matches(Exchange exchange) {', 'boolean matches = predicate.matches(exchange);']
['filter matches for exchange ', ['matches', 'exchange']]
camel sample_4538

['public EmbeddedKafkaBroker(int brokerId, int port, String zkConnection, Properties baseProperties) {', 'this.brokerId = brokerId;', 'this.port = port;', 'this.zkConnection = zkConnection;', 'this.baseProperties = baseProperties;']
['starting broker on port ', ['brokerid', 'port']]
camel sample_16404

['logDir = constructTempDir(perTest("kafka-log"));', 'Properties properties = new Properties();', 'properties.putAll(baseProperties);', 'properties.setProperty("zookeeper.connect", zkConnection);', 'properties.setProperty("broker.id", brokerId.toString());', 'properties.setProperty("host.name", "localhost");', 'properties.setProperty("port", Integer.toString(port));', 'properties.setProperty("log.dir", logDir.getAbsolutePath());', 'properties.setProperty("num.partitions", String.valueOf(1));', 'properties.setProperty("auto.create.topics.enable", String.valueOf(Boolean.TRUE));']
['log directory ', ['logdir', 'getabsolutepath']]
camel sample_16404

['public void after() {', 'kafkaServer.shutdown();', 'try {', 'TestUtils.deleteFile(logDir);', '} catch (FileNotFoundException e) {']
['could not delete not found ', ['logdir', 'getabsolutepath']]
camel sample_16404

['assertEquals("james@localhost", it.next().trim());', '} else {', 'assertEquals("bar@localhost", it.next().trim());', '}', 'i++;', '}', 'Enumeration<Header> iter = CastUtils.cast(inMessage.getAllHeaders());', 'while (iter.hasMoreElements()) {', 'Header header = iter.nextElement();', 'String[] value = message.getHeader(header.getName());']
['header has value ', ['header', 'getname', 'objecthelper', 'asstring', 'value']]
camel sample_11791

['exchange.setException(e);', 'callback.done(true);', 'return true;', '}', '}', 'try {', 'engine.insert(exchange);', 'delivery.request();', '} catch (Exception e) {', 'if (isIgnoreInvalidExchanges()) {']
['invalid exchange this exchange will be ignored ', ['exchange']]
camel sample_4492

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("file: .setProperty("PartitionID").simple("${file:name}") .convertBodyTo(String.class) .inOut("direct:source") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['the exchange s in body as string is ', ['exchange', 'getin', 'getbody', 'string', 'class']]
camel sample_2950

['for (int i = 0; i < payloads.length; i++) {', 'final int finalI = i;', 'pool.execute(new Runnable() {', 'public void run() {', 'template.sendBody(payloads[finalI]);', '}', '});', '}', 'latch.await();', 'long end = System.currentTimeMillis();']
['sending messages to took ms ', ['new', 'object', 'payloads', 'length', 'template', 'getdefaultendpoint', 'getendpointuri', 'end', 'start']]
camel sample_13743

['for (int i = 0; i < payloads.length; i++) {', 'final int finalI = i;', 'pool.execute(new Runnable() {', 'public void run() {', 'template.sendBody(payloads[finalI]);', '}', '});', '}', 'latch.await();', 'long end = System.currentTimeMillis();']
['sending messages to took ms ', ['new', 'object', 'payloads', 'length', 'template', 'getdefaultendpoint', 'getendpointuri', 'end', 'start']]
camel sample_13743

['protected void assertValidContext(CamelContext context) {', 'assertNotNull("No context found!", context);', 'List<RouteDefinition> routes = ((ModelCamelContext)context).getRouteDefinitions();']
['found routes ', ['routes']]
camel sample_15697

['protected void doStop() throws Exception {', 'if (connection != null) {', 'for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {']
['parting ', ['channel']]
camel sample_12152

['protected void doStart() throws Exception {', 'super.doStart();', 'listener = getListener();', 'connection.addIRCEventListener(listener);', 'if (ObjectHelper.isNotEmpty(configuration.getNickPassword())) {', 'try {']
['sleeping for seconds before identifying to nickserv ', []]
camel sample_12152

['protected void doStart() throws Exception {', 'super.doStart();', 'listener = getListener();', 'connection.addIRCEventListener(listener);', 'if (ObjectHelper.isNotEmpty(configuration.getNickPassword())) {', 'try {', 'Thread.sleep(5000);', '} catch (InterruptedException ex) {', '}']
['identifying and enforcing nick with nickserv ', []]
camel sample_12152

['public static ProcessDefinition getRefreshedProcessDefinition(EntityManagerTemplate entityManagerTemplate, ProcessDefinition definition) {', 'ObjectHelper.notNull(definition, "definition");', 'final Long id = definition.getId();', 'if (id == null) {']
['no primary key is available ', []]
camel sample_12502

['public final List<ApiMethodModel> parse() {', 'List<ApiMethodModel> result = new ArrayList<ApiMethodModel>();', 'for (String signature : signatures) {', 'if (signature.startsWith("##") || ObjectHelper.isEmpty(signature)) {', 'continue;', '}', 'signature = signature.replaceAll(METHOD_PREFIX, "$4 $5(");', 'signature = signature.replaceAll("(\\\\(|,\\\\s*)final\\\\s+", "$1");', 'signature = signature.replaceAll("\\\\s*<\\\\s*", "<").replaceAll("\\\\s*>", ">");']
['processing ', ['signature']]
camel sample_4304

['final int nArgsCompare = nArgs1 - model2.arguments.size();', 'if (nArgsCompare != 0) {', 'return nArgsCompare;', '} else {', 'for (int i = 0; i < nArgs1; i++) {', 'final int argCompare = model1.arguments.get(i).getName().compareTo(model2.arguments.get(i).getName());', 'if (argCompare != 0) {', 'return argCompare;', '}', '}']
['duplicate methods found ', []]
camel sample_4304

['public static void beforeClass() {']
['embedded zookeeper connection ', ['zookeeper', 'getconnection']]
camel sample_16392

['public static void beforeClass() {']
['embedded kafka cluster broker list ', ['kafkabroker', 'getbrokerlist']]
camel sample_16392

['protected Properties getDefaultProperties() {', 'Properties props = new Properties();']
['connecting to kafka port ', ['kafkabroker', 'getport']]
camel sample_16392

['public BoxFolder getRootFolder() {', 'try {']
['getting root folder ', []]
camel sample_17429

['protected void rollback(boolean isNew) throws Exception {', 'try {', 'if (isNew) {', 'transactionManager.rollback();', '} else {', 'transactionManager.setRollbackOnly();', '}', '} catch (Throwable e) {']
['could not rollback transaction ', ['e']]
camel sample_9865

['protected void resumeTransaction(final Transaction suspendedTransaction) {', 'if (suspendedTransaction == null) {', 'return;', '}', 'try {', 'transactionManager.resume(suspendedTransaction);', '} catch (Throwable e) {']
['could not resume transaction ', ['e']]
camel sample_9865

['public void process(Exchange exchange) throws Exception {', 'PutRecordRequest request = createRequest(exchange);']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8777

['public void process(Exchange exchange) throws Exception {', 'PutRecordRequest request = createRequest(exchange);', 'PutRecordResult putRecordResult = getEndpoint().getClient().putRecord(request);']
['received result ', ['putrecordresult']]
camel sample_8777

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_13893

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'HeaderDto headerDto = new HeaderDto("test", "company", 1);', "char id = 'A';"]
['sending with id ', ['value', 'id']]
camel sample_13893

['mock.expectedMinimumMessageCount(1);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'HeaderDto headerDto = new HeaderDto("test", "company", 1);', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", headerDto);', 'template.sendBodyAndHeaders("seda:start?size=" + SIZE, value, headers);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_13893

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (!validate) {']
['validation disabled ', []]
camel sample_124

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (!validate) {', '} else {', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(outDir, jsonFiles, new CamelComponentsFileFilter());', 'boolean failed = false;', 'for (File file : jsonFiles) {', 'final String name = asName(file);', 'final ErrorDetail detail = new ErrorDetail();']
['validating file ', ['file']]
camel sample_124

['} else {', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(outDir, jsonFiles, new CamelComponentsFileFilter());', 'boolean failed = false;', 'for (File file : jsonFiles) {', 'final String name = asName(file);', 'final ErrorDetail detail = new ErrorDetail();', 'validate(file, detail);', 'if (detail.hasErrors()) {', 'failed = true;']
['the has validation errors ', ['detail', 'getkind', 'name']]
camel sample_124

['final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(outDir, jsonFiles, new CamelComponentsFileFilter());', 'boolean failed = false;', 'for (File file : jsonFiles) {', 'final String name = asName(file);', 'final ErrorDetail detail = new ErrorDetail();', 'validate(file, detail);', 'if (detail.hasErrors()) {', 'failed = true;', 'if (detail.isMissingDescription()) {']
['missing description on ', ['detail', 'getkind']]
camel sample_124

['boolean failed = false;', 'for (File file : jsonFiles) {', 'final String name = asName(file);', 'final ErrorDetail detail = new ErrorDetail();', 'validate(file, detail);', 'if (detail.hasErrors()) {', 'failed = true;', 'if (detail.isMissingDescription()) {', '}', 'if (detail.isMissingLabel()) {']
['missing label on ', ['detail', 'getkind']]
camel sample_124

['final String name = asName(file);', 'final ErrorDetail detail = new ErrorDetail();', 'validate(file, detail);', 'if (detail.hasErrors()) {', 'failed = true;', 'if (detail.isMissingDescription()) {', '}', 'if (detail.isMissingLabel()) {', '}', 'if (detail.isMissingSyntax()) {']
['missing syntax on endpoint ', []]
camel sample_124

['validate(file, detail);', 'if (detail.hasErrors()) {', 'failed = true;', 'if (detail.isMissingDescription()) {', '}', 'if (detail.isMissingLabel()) {', '}', 'if (detail.isMissingSyntax()) {', '}', 'if (detail.isMissingUriPath()) {']
['missing uripath on endpoint ', []]
camel sample_124

['failed = true;', 'if (detail.isMissingDescription()) {', '}', 'if (detail.isMissingLabel()) {', '}', 'if (detail.isMissingSyntax()) {', '}', 'if (detail.isMissingUriPath()) {', '}', 'if (!detail.getMissingComponentDocumentation().isEmpty()) {']
['missing component documentation for the following options t ', ['indentcollection', 'detail', 'getmissingcomponentdocumentation']]
camel sample_124

['}', 'if (detail.isMissingLabel()) {', '}', 'if (detail.isMissingSyntax()) {', '}', 'if (detail.isMissingUriPath()) {', '}', 'if (!detail.getMissingComponentDocumentation().isEmpty()) {', '}', 'if (!detail.getMissingEndpointDocumentation().isEmpty()) {']
['missing endpoint documentation for the following options t ', ['indentcollection', 'detail', 'getmissingendpointdocumentation']]
camel sample_124

['}', 'if (!detail.getMissingComponentDocumentation().isEmpty()) {', '}', 'if (!detail.getMissingEndpointDocumentation().isEmpty()) {', '}', '}', '}', 'if (failed) {', 'throw new MojoFailureException("Validating failed, see errors above!");', '} else {']
['validation complete ', []]
camel sample_124

['public void start() throws Exception {', 'if (cacheExpression == null && cachePredicate == null && getCamelContext() != null) {', 'int maxSize = CamelContextHelper.getMaximumSimpleCacheSize(getCamelContext());', 'if (maxSize > 0) {', 'cacheExpression = LRUCacheFactory.newLRUCache(16, maxSize, false);', 'cachePredicate = LRUCacheFactory.newLRUCache(16, maxSize, false);']
['simple language predicate expression cache size ', ['maxsize']]
camel sample_5000

['public void start() throws Exception {', 'if (cacheExpression == null && cachePredicate == null && getCamelContext() != null) {', 'int maxSize = CamelContextHelper.getMaximumSimpleCacheSize(getCamelContext());', 'if (maxSize > 0) {', 'cacheExpression = LRUCacheFactory.newLRUCache(16, maxSize, false);', 'cachePredicate = LRUCacheFactory.newLRUCache(16, maxSize, false);', '} else {']
['simple language disabled predicate expression cache ', []]
camel sample_5000

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PdfComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pdf.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pdf.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_574

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ClientComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.iec60870-client.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.iec60870-client.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_827

['public void testPollEnrichCustomAggregationStrategyBody() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");']
['file log info file ', ['sendbodyandheader', 'sleeping', 'for', 'sec', 'before', 'writing', 'enrichdata']]
camel sample_1686

['public void testPollEnrichCustomAggregationStrategyBody() throws Exception {', 'getMockEndpoint("mock:start").expectedBodiesReceived("Start");', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("Big file");', 'mock.expectedFileExists("target/enrich/.done/AAA.fin");', 'mock.expectedFileExists("target/enrichdata/.done/AAA.dat");', 'Thread.sleep(500);']
['file log info done ', ['sendbodyandheader', 'write']]
camel sample_1686

['public void testReceiveTraps() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMinimumMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> events = mock.getExchanges();', 'if (LOG.isInfoEnabled()) {', 'for (Exchange e : events) {']
['asterisk events ', ['e', 'getin', 'getbody', 'string', 'class']]
camel sample_12902

['public void setUp() throws Exception {']
['starting jetty server at port ', ['jetty', 'port']]
camel sample_7752

['response.setContentType("text/xml");', 'response.setContentLength(RESPONSE_MESSAGE.length());', 'response.setStatus(HttpServletResponse.SC_OK);', 'baseRequest.setHandled(true);', 'PrintWriter pw = response.getWriter();', 'pw.write(RESPONSE_MESSAGE);', 'pw.close();', '}', '});', 'server.start();']
['start routing scenario at port ', ['cxftestsupport']]
camel sample_7752

['public void process(Exchange exchange) throws Exception {']
['cache name ', ['config', 'getcachename']]
camel sample_10529

['private void performCacheOperation(Exchange exchange, String operation, String key) throws Exception {', 'if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_ADD)) {']
['adding an element with key into the cache ', ['key']]
camel sample_10529

['private void performCacheOperation(Exchange exchange, String operation, String key) throws Exception {', 'if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_ADD)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_ADD);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_UPDATE)) {']
['updating an element with key into the cache ', ['key']]
camel sample_10529

['private void performCacheOperation(Exchange exchange, String operation, String key) throws Exception {', 'if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_ADD)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_ADD);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_UPDATE)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_UPDATE);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_DELETEALL)) {']
['deleting all elements from the cache ', []]
camel sample_10529

['private void performCacheOperation(Exchange exchange, String operation, String key) throws Exception {', 'if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_ADD)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_ADD);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_UPDATE)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_UPDATE);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_DELETEALL)) {', 'cache.removeAll();', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_DELETE)) {']
['deleting an element with key into the cache ', ['key']]
camel sample_10529

['Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_ADD);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_UPDATE)) {', 'Element element = createElementFromBody(key, exchange, CacheConstants.CACHE_OPERATION_UPDATE);', 'cache.put(element);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_DELETEALL)) {', 'cache.removeAll();', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_DELETE)) {', 'cache.remove(key);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_GET)) {']
['quering an element with key from the cache ', ['key']]
camel sample_10529

['cache.remove(key);', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_GET)) {', 'Element element = cache.get(key);', 'if (element != null) {', 'exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND, true);', 'exchange.getIn().setBody(element.getObjectValue());', '} else {', 'exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);', '}', '} else if (checkIsEqual(operation, CacheConstants.CACHE_OPERATION_URL_CHECK)) {']
['querying an element with key from the cache ', ['key']]
camel sample_10529

['public void setUp() throws Exception {', 'log.info("*******************************************************************");']
['test ', ['testname', 'getmethodname']]
camel sample_12514

['protected abstract Trigger createTrigger(Action action, Route route) throws Exception;', 'protected void onJobExecute(Action action, Route route) throws Exception {']
['scheduled event notification received performing action on route ', ['action', 'route', 'getid']]
camel sample_14993

['if (action == Action.START) {', 'if (routeStatus == ServiceStatus.Stopped) {', 'startRoute(route);', '} else if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '}', '} else if (action == Action.STOP) {', 'if ((routeStatus == ServiceStatus.Started) || (routeStatus == ServiceStatus.Suspended)) {', 'stopRoute(route, getRouteStopGracePeriod(), getTimeUnit());', '} else {']
['route is not in a started suspended state and cannot be stopped the current route state is ', ['routestatus']]
camel sample_14993

['}', '} else if (action == Action.STOP) {', 'if ((routeStatus == ServiceStatus.Started) || (routeStatus == ServiceStatus.Suspended)) {', 'stopRoute(route, getRouteStopGracePeriod(), getTimeUnit());', '} else {', '}', '} else if (action == Action.SUSPEND) {', 'if (routeStatus == ServiceStatus.Started) {', 'suspendOrStopConsumer(route.getConsumer());', '} else {']
['route is not in a started state and cannot be suspended the current route state is ', ['routestatus']]
camel sample_14993

['} else if (action == Action.SUSPEND) {', 'if (routeStatus == ServiceStatus.Started) {', 'suspendOrStopConsumer(route.getConsumer());', '} else {', '}', '} else if (action == Action.RESUME) {', 'if (routeStatus == ServiceStatus.Started) {', 'if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '} else {']
['the consumer is not suspended and cannot be resumed ', ['route', 'getconsumer']]
camel sample_14993

['suspendOrStopConsumer(route.getConsumer());', '} else {', '}', '} else if (action == Action.RESUME) {', 'if (routeStatus == ServiceStatus.Started) {', 'if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '} else {', '}', '} else {']
['route is not in a started state and cannot be resumed the current route state is ', ['routestatus']]
camel sample_14993

['public void scheduleRoute(Action action, Route route) throws Exception {', 'JobDetail jobDetail = createJobDetail(action, route);', 'Trigger trigger = createTrigger(action, route);', 'updateScheduledRouteDetails(action, jobDetail, trigger, route);', 'loadCallbackDataIntoSchedulerContext(jobDetail, action, route);', 'boolean isClustered = route.getRouteContext().getCamelContext().getComponent("quartz2", QuartzComponent.class).isClustered();', 'if (isClustered) {', 'JobDetail existingJobDetail = getScheduler().getJobDetail(jobDetail.getKey());', 'if (jobDetail.equals(existingJobDetail)) {', 'if (LOG.isInfoEnabled()) {']
['skipping to schedule the job for action on route as the job already existing inside the cluster ', ['new', 'object', 'jobdetail', 'getkey', 'action', 'route', 'getid', 'existingjobdetail', 'getkey']]
camel sample_14993

['if (isClustered) {', 'JobDetail existingJobDetail = getScheduler().getJobDetail(jobDetail.getKey());', 'if (jobDetail.equals(existingJobDetail)) {', 'if (LOG.isInfoEnabled()) {', '}', 'return;', '}', '}', 'getScheduler().scheduleJob(jobDetail, trigger);', 'if (LOG.isInfoEnabled()) {']
['scheduled trigger for action on route ', ['new', 'object', 'trigger', 'getkey', 'action', 'route', 'getid']]
camel sample_14993

['public void pauseRouteTrigger(Action action, String routeId) throws SchedulerException {', 'TriggerKey triggerKey = retrieveTriggerKey(action, routeId);', 'getScheduler().pauseTrigger(triggerKey);']
['scheduled trigger is paused ', ['triggerkey']]
camel sample_14993

['public void resumeRouteTrigger(Action action, String routeId) throws SchedulerException {', 'TriggerKey triggerKey = retrieveTriggerKey(action, routeId);', 'getScheduler().resumeTrigger(triggerKey);']
['scheduled trigger is resumed ', ['triggerkey']]
camel sample_14993

['public void deleteRouteJob(Action action, ScheduledRouteDetails scheduledRouteDetails) throws SchedulerException {', 'JobKey jobKey = retrieveJobKey(action, scheduledRouteDetails);', 'if (!getScheduler().isShutdown()) {', 'getScheduler().deleteJob(jobKey);', '}']
['scheduled job is deleted ', ['jobkey']]
camel sample_14993

['public void prepareShutdown(boolean suspendOnly, boolean forced) {', 'if (suspendOnly) {']
['skip preparing to shutdown as consumer is being suspended ', []]
camel sample_4892

['public void prepareShutdown(boolean suspendOnly, boolean forced) {', 'if (suspendOnly) {', 'return;', '}', 'shutdownPending = true;', 'forceShutdown = forced;', 'if (latch != null) {']
['preparing to shutdown waiting for consumer threads to complete ', ['latch', 'getcount']]
camel sample_4892

['public void run() {', 'taskCount.incrementAndGet();', 'try {', 'doRun();', '} finally {', 'taskCount.decrementAndGet();', 'latch.countDown();']
['ending this polling consumer thread there are still consumer threads left ', ['latch', 'getcount']]
camel sample_4892

['protected void doRun() {', 'BlockingQueue<Exchange> queue = endpoint.getQueue();', 'while (queue != null && isRunAllowed()) {', 'if (getEndpoint().getCamelContext().getStatus().isStarting()) {']
['camelcontext is starting so skip polling ', []]
camel sample_4892

['protected void doRun() {', 'BlockingQueue<Exchange> queue = endpoint.getQueue();', 'while (queue != null && isRunAllowed()) {', 'if (getEndpoint().getCamelContext().getStatus().isStarting()) {', 'try {', 'Thread.sleep(Math.min(pollTimeout, 1000));', '} catch (InterruptedException e) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_4892

['while (queue != null && isRunAllowed()) {', 'if (getEndpoint().getCamelContext().getStatus().isStarting()) {', 'try {', 'Thread.sleep(Math.min(pollTimeout, 1000));', '} catch (InterruptedException e) {', '}', 'continue;', '}', 'if (isSuspending() || isSuspended() || isStarting()) {', 'if (shutdownPending && queue.isEmpty()) {']
['consumer is suspended and shutdown is pending so this consumer thread is breaking out because the task queue is empty ', []]
camel sample_4892

['try {', 'Thread.sleep(Math.min(pollTimeout, 1000));', '} catch (InterruptedException e) {', '}', 'continue;', '}', 'if (isSuspending() || isSuspended() || isStarting()) {', 'if (shutdownPending && queue.isEmpty()) {', 'break;', '} else {']
['consumer is suspended so skip polling ', []]
camel sample_4892

['}', 'continue;', '}', 'if (isSuspending() || isSuspended() || isStarting()) {', 'if (shutdownPending && queue.isEmpty()) {', 'break;', '} else {', 'try {', 'Thread.sleep(Math.min(pollTimeout, 1000));', '} catch (InterruptedException e) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_4892

['Thread.sleep(Math.min(pollTimeout, 1000));', '} catch (InterruptedException e) {', '}', 'continue;', '}', '}', 'Exchange exchange = null;', 'try {', 'exchange = queue.poll(pollTimeout, TimeUnit.MILLISECONDS);', 'if (LOG.isTraceEnabled()) {']
['polled queue with timeout ms ', ['new', 'object', 'objecthelper', 'getidentityhashcode', 'queue', 'polltimeout', 'exchange']]
camel sample_4892

['exchange.setIn(newExchange.getIn());', '}', 'if (newExchange.getException() != null) {', 'exchange.setException(newExchange.getException());', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, e);', '}', '} else if (shutdownPending && queue.isEmpty()) {']
['shutdown is pending so this consumer thread is breaking out because the task queue is empty ', []]
camel sample_4892

['exchange.setException(newExchange.getException());', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', '} catch (Exception e) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, e);', '}', '} else if (shutdownPending && queue.isEmpty()) {', 'break;', '}', '} catch (InterruptedException e) {']
['sleep interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_4892

['protected void sendToConsumers(final Exchange exchange) throws Exception {', 'int size = endpoint.getConsumers().size();', 'if (size > 1 && !endpoint.isMultipleConsumersSupported()) {', 'throw new IllegalStateException("Multiple consumers for the same endpoint is not allowed: " + endpoint);', '}', 'if (endpoint.isMultipleConsumersSupported()) {', 'if (LOG.isTraceEnabled()) {']
['multicasting to consumers for exchange ', ['size', 'exchange']]
camel sample_4892

['private void setupTasks() {', 'int poolSize = endpoint.getConcurrentConsumers();', 'if (executor == null) {', 'executor = endpoint.getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, endpoint.getEndpointUri(), poolSize);', '}', 'int tasks = poolSize - taskCount.get();']
['creating consumer tasks with poll timeout ms ', ['tasks', 'polltimeout']]
camel sample_4892

['public void beforeGoToNextStep(Exchange exchange) {', 'Assert.assertNotNull(exchange);']
['calling beforegotonextstep ', []]
camel sample_14090

['public void goToNextStep() {', 'setStep(getStep() + 1);']
['invoked the completion complete method now updated the step to ', ['getstep']]
camel sample_14090

['config.timeBetweenEvictionRunsMillis = 30 * 1000L;', 'config.minEvictableIdleTimeMillis = configuration.getProducerPoolMinEvictableIdle();', 'config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;', 'pool = new GenericObjectPool<ChannelFuture>(new NettyProducerPoolableObjectFactory(), config);', 'if (LOG.isDebugEnabled()) {', 'LOG.debug("Created NettyProducer pool[maxActive={}, minIdle={}, maxIdle={}, minEvictableIdleTimeMillis={}] -> {}", new Object[]{config.maxActive, config.minIdle, config.maxIdle, config.minEvictableIdleTimeMillis, pool});', '}', '} else {', 'pool = new SharedSingletonObjectPool<ChannelFuture>(new NettyProducerPoolableObjectFactory());', 'if (LOG.isDebugEnabled()) {']
['created nettyproducer shared singleton pool ', ['pool']]
camel sample_10250

['protected void doStop() throws Exception {']
['stopping producer at address ', ['configuration', 'getaddress']]
camel sample_10250

['protected void doStop() throws Exception {']
['closing channels ', ['allchannels', 'size']]
camel sample_10250

['}', 'ChannelFuture channelFuture = null;', 'Channel channel = null;', 'try {', 'if (getConfiguration().isReuseChannel()) {', 'channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class);', '}', 'if (channel == null) {', 'channelFuture = pool.borrowObject();', 'if (channelFuture != null) {']
['got channel request from pool ', ['channelfuture']]
camel sample_10250

['if (ExchangeHelper.isOutCapable(exchange)) {', 'close = exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {']
['closing channel as routing the exchange is done ', ['channel']]
camel sample_10250

['} else {', 'producerCallback = new NettyProducerCallback(channelFuture, callback.getOriginalCallback());', '}', 'putState(channel, new NettyCamelState(producerCallback, exchange));', 'InetSocketAddress remoteAddress = null;', 'if (!isTcp()) {', 'remoteAddress = new InetSocketAddress(configuration.getHost(), configuration.getPort());', '}', 'NettyHelper.writeBodyAsync(LOG, channel, remoteAddress, body, exchange, new ChannelFutureListener() {', 'public void operationComplete(ChannelFuture channelFuture) throws Exception {']
['operation complete ', ['channelfuture']]
camel sample_10250

['close = exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '} else {', 'close = exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (!configuration.isReuseChannel() && disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['getendpoint', 'getconfiguration', 'getaddress']]
camel sample_10250

['clientBootstrap.option(ChannelOption.TCP_NODELAY, configuration.isTcpNoDelay());', 'clientBootstrap.option(ChannelOption.SO_REUSEADDR, configuration.isReuseAddress());', 'clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.getConnectTimeout());', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'clientBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}*/ clientBootstrap.handler(pipelineFactory);', 'answer = clientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', 'if (LOG.isDebugEnabled()) {']
['created new tcp client bootstrap connecting to with options ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'clientbootstrap']]
camel sample_10250

['}', '}*/ connectionlessClientBootstrap.handler(pipelineFactory);', 'if (!configuration.isUdpConnectionlessSending()) {', 'answer = connectionlessClientBootstrap.connect(new InetSocketAddress(configuration.getHost(), configuration.getPort()));', '} else {', 'answer = connectionlessClientBootstrap.bind(new InetSocketAddress(0)).sync();', 'Channel channel = answer.channel();', 'allChannels.add(channel);', '}', 'if (LOG.isDebugEnabled()) {']
['created new udp client bootstrap connecting to with options ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'connectionlessclientbootstrap']]
camel sample_10250

['protected void notifyChannelOpen(ChannelFuture channelFuture) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel open finished with ', ['channelfuture']]
camel sample_10250

['protected void notifyChannelOpen(ChannelFuture channelFuture) throws Exception {', 'if (LOG.isTraceEnabled()) {', '}', 'if (channelFuture.isSuccess()) {', 'Channel answer = channelFuture.channel();', 'allChannels.add(answer);', 'if (LOG.isDebugEnabled()) {']
['creating connector to address ', ['configuration', 'getaddress']]
camel sample_10250

['protected void releaseChannel(ChannelFuture channelFuture) {', 'Channel channel = channelFuture.channel();', 'try {', 'if (channel.isActive()) {']
['putting channel back to pool ', ['channel']]
camel sample_10250

['protected void releaseChannel(ChannelFuture channelFuture) {', 'Channel channel = channelFuture.channel();', 'try {', 'if (channel.isActive()) {', 'pool.returnObject(channelFuture);', '} else {']
['invalidating channel from pool ', ['channel']]
camel sample_10250

['protected void releaseChannel(ChannelFuture channelFuture) {', 'Channel channel = channelFuture.channel();', 'try {', 'if (channel.isActive()) {', 'pool.returnObject(channelFuture);', '} else {', 'pool.invalidateObject(channelFuture);', '}', '} catch (Exception e) {']
['error returning channel to pool this exception will be ignored ', ['channel', 'e']]
camel sample_10250

['public ChannelFuture makeObject() throws Exception {', 'ChannelFuture channelFuture = openConnection().addListener(new ChannelFutureListener() {', 'public void operationComplete(ChannelFuture future) throws Exception {', 'notifyChannelOpen(future);', '}', '});']
['requested channel ', ['channelfuture']]
camel sample_10250

['public void destroyObject(ChannelFuture channelFuture) throws Exception {']
['destroying channel request ', ['channelfuture']]
camel sample_10250

['public boolean validateObject(ChannelFuture channelFuture) {', 'if (!channelFuture.isDone()) {']
['validating connecting channel request ', ['channelfuture', 'true']]
camel sample_10250

['public boolean validateObject(ChannelFuture channelFuture) {', 'if (!channelFuture.isDone()) {', 'return true;', '}', 'if (!channelFuture.isSuccess()) {']
['validating unsuccessful channel request ', ['channelfuture', 'false']]
camel sample_10250

['public boolean validateObject(ChannelFuture channelFuture) {', 'if (!channelFuture.isDone()) {', 'return true;', '}', 'if (!channelFuture.isSuccess()) {', 'return false;', '}', 'Channel channel = channelFuture.channel();', 'boolean answer = channel.isActive();']
['validating channel ', ['channel', 'answer']]
camel sample_10250

['public void activateObject(ChannelFuture channelFuture) throws Exception {']
['activateobject channel request ', ['channelfuture']]
camel sample_10250

['public void passivateObject(ChannelFuture channelFuture) throws Exception {']
['passivateobject channel request ', ['channelfuture']]
camel sample_10250

['interceptPropertyNames(arguments);', 'candidates = new ArrayList<>();', 'candidates.addAll(methodHelper.getCandidateMethods(methodName, arguments));', 'candidates = Collections.unmodifiableList(candidates);', 'if (candidates.isEmpty()) {', 'throw new IllegalArgumentException( String.format("No matching method for %s/%s, with arguments %s", apiName.getName(), methodName, arguments));', '}', 'if (log.isDebugEnabled()) {', 'final Set<String> missing = methodHelper.getMissingProperties(methodName, arguments);', 'if (!missing.isEmpty()) {']
['method could use one or more properties from ', ['methodname', 'missing']]
camel sample_4312

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ElasticsearchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch5.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.elasticsearch5.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1110

['count = endpoint.getProperties().getCount();', '}', 'if (ObjectHelper.isNotEmpty(count)) {', 'query.setCount(count);', '}', 'Integer numberOfPages = exchange.getIn().getHeader(TwitterConstants.TWITTER_NUMBER_OF_PAGES, Integer.class);', 'if (numberOfPages == null) {', 'numberOfPages = endpoint.getProperties().getNumberOfPages();', '}', 'Twitter twitter = endpoint.getProperties().getTwitter();']
['searching twitter with keywords ', ['keywords']]
camel sample_14213

['if (numberOfPages == null) {', 'numberOfPages = endpoint.getProperties().getNumberOfPages();', '}', 'Twitter twitter = endpoint.getProperties().getTwitter();', 'QueryResult results = twitter.search(query);', 'List<Status> list = results.getTweets();', 'for (int i = 1; i < numberOfPages; i++) {', 'if (!results.hasNext()) {', 'break;', '}']
['fetching page ', []]
camel sample_14213

['public void testBatchLifecycle(BatchTest request) throws Exception {']
['testing batch lifecycle with content ', ['request', 'contenttype']]
camel sample_14706

['BatchInfo batchInfo  = template().requestBodyAndHeaders("direct:createBatch", request.stream, headers, BatchInfo.class);', 'assertNotNull("Null batch", batchInfo);', 'assertNotNull("Null batch id", batchInfo.getId());', 'List<BatchInfo> batches = template().requestBody("direct:getAllBatches", jobInfo, List.class);', 'assertNotNull("Null batches", batches);', 'assertFalse("Empty batch list", batches.isEmpty());', 'batchInfo = batches.get(0);', 'batchInfo = getBatchInfo(batchInfo);', 'InputStream requestStream  = template().requestBody("direct:getRequest", batchInfo, InputStream.class);', 'assertNotNull("Null batch request", requestStream);']
['waiting for batch to finish ', []]
camel sample_14706

['assertNotNull("Null batches", batches);', 'assertFalse("Empty batch list", batches.isEmpty());', 'batchInfo = batches.get(0);', 'batchInfo = getBatchInfo(batchInfo);', 'InputStream requestStream  = template().requestBody("direct:getRequest", batchInfo, InputStream.class);', 'assertNotNull("Null batch request", requestStream);', 'while (!batchProcessed(batchInfo)) {', 'Thread.sleep(5000);', 'batchInfo = getBatchInfo(batchInfo);', '}']
['batch finished with state ', ['batchinfo', 'getstate']]
camel sample_14706

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JacksonXMLDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jacksonxml.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jacksonxml.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1055

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<ZipDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.zip.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.zip.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_831

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesServicesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-services.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-services.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_562

['private int getMbeanCount(final String name) throws MalformedObjectNameException {', 'MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();', 'Set<ObjectInstance> mbeans = mbs.queryMBeans(new ObjectName("org.apache.camel:type=threadpools,*"), null);']
['mbeans size ', ['mbeans', 'size']]
camel sample_12328

['private int getMbeanCount(final String name) throws MalformedObjectNameException {', 'MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();', 'Set<ObjectInstance> mbeans = mbs.queryMBeans(new ObjectName("org.apache.camel:type=threadpools,*"), null);', 'int count = 0;', 'for (ObjectInstance mbean : mbeans) {']
['mbean ', ['mbean']]
camel sample_12328

['if (listener != null) {', 'listener.onEviction(key);', '}', '} catch (Throwable e) {', '}', 'final Runnable task = new Runnable() {', 'public void run() {', 'try {', 'value.onTimeout(key);', '} catch (Throwable e) {']
['error processing ontimeout for correlationid due this exception is ignored ', ['key', 'e', 'getmessage', 'e']]
camel sample_7181

['value.onTimeout(key);', '} catch (Throwable e) {', '}', '}', '};', 'if (executorService != null) {', 'executorService.submit(task);', '} else {', 'task.run();', '}']
['evicted correlationid ', ['key']]
camel sample_7181

['listener.onPut(key);', '}', '} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.put(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.put(key, value, timeoutMillis);', '}']
['added correlationid to timeout after millis ', ['key', 'timeoutmillis']]
camel sample_7181

['}', '} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.putIfAbsent(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.putIfAbsent(key, value, timeoutMillis);', '}', 'if (result == null) {']
['added correlationid to timeout after millis ', ['key', 'timeoutmillis']]
camel sample_7181

['} catch (Throwable e) {', '}', 'ReplyHandler result;', 'if (timeoutMillis <= 0) {', 'result = super.putIfAbsent(key, value, Integer.MAX_VALUE);', '} else {', 'result = super.putIfAbsent(key, value, timeoutMillis);', '}', 'if (result == null) {', '} else {']
['duplicate correlationid detected ', ['key']]
camel sample_7181

['public void onComplete(Exchange exchange) {', 'try {']
['Committing ', []]
camel sample_12406

['public void onComplete(Exchange exchange) {', 'try {', 'session.commit();', '} catch (JMSException ex) {']
['exception caught while committing jms session ', ['ex']]
camel sample_12406

['public void onFailure(Exchange exchange) {', 'try {']
['rolling back ', []]
camel sample_12406

['public void onFailure(Exchange exchange) {', 'try {', 'session.rollback();', '} catch (JMSException ex) {']
['exception caught while rolling back jms session ', ['ex']]
camel sample_12406

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_6817

['public void execute(Exchange exchange) throws SmppException {', 'byte[] message = getShortMessage(exchange.getIn());', 'ReplaceSm replaceSm = createReplaceSmTempate(exchange);', 'replaceSm.setShortMessage(message);', 'if (log.isDebugEnabled()) {']
['sending replacement command for a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'replacesm', 'getmessageid']]
camel sample_16916

['ReplaceSm replaceSm = createReplaceSmTempate(exchange);', 'replaceSm.setShortMessage(message);', 'if (log.isDebugEnabled()) {', '}', 'try {', 'session.replaceShortMessage( replaceSm.getMessageId(), TypeOfNumber.valueOf(replaceSm.getSourceAddrTon()), NumberingPlanIndicator.valueOf(replaceSm.getSourceAddrNpi()), replaceSm.getSourceAddr(), replaceSm.getScheduleDeliveryTime(), replaceSm.getValidityPeriod(), new RegisteredDelivery(replaceSm.getRegisteredDelivery()), replaceSm.getSmDefaultMsgId(), replaceSm.getShortMessage());', '} catch (Exception e) {', 'throw new SmppException(e);', '}', 'if (log.isDebugEnabled()) {']
['sent replacement command for a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'replacesm', 'getmessageid']]
camel sample_16916

['if (endpoint == null) {', 'continue;', '}', '} catch (Exception e) {', 'current.setException(e);', 'break;', '}', 'boolean sync = processExchange(endpoint, current, exchange, originalCallback, iter);', 'current = prepareExchangeForRoutingSlip(current, endpoint);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4579

['}', '} catch (Exception e) {', 'current.setException(e);', 'break;', '}', 'boolean sync = processExchange(endpoint, current, exchange, originalCallback, iter);', 'current = prepareExchangeForRoutingSlip(current, endpoint);', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4579

['}', 'boolean sync = processExchange(endpoint, current, exchange, originalCallback, iter);', 'current = prepareExchangeForRoutingSlip(current, endpoint);', 'if (!sync) {', 'return false;', '}', 'if (isIgnoreInvalidEndpoints()) {', 'FailedToCreateProducerException e = current.getException(FailedToCreateProducerException.class);', 'if (e != null) {', 'if (log.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['endpoint', 'e']]
camel sample_4579

['if (e != null) {', 'if (log.isDebugEnabled()) {', '}', 'current.setException(null);', '}', '}', 'if (!continueProcessing(current, "so breaking out of the routing slip", log)) {', 'break;', '}', '}']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'current']]
camel sample_4579

['protected Endpoint resolveEndpoint(RoutingSlipIterator iter, Exchange exchange) throws Exception {', 'Object nextRecipient = iter.next(exchange);', 'Endpoint endpoint = null;', 'try {', 'endpoint = ExchangeHelper.resolveEndpoint(exchange, nextRecipient);', '} catch (Exception e) {', 'if (isIgnoreInvalidEndpoints()) {']
['endpoint uri is invalid this exception will be ignored ', ['nextrecipient', 'e']]
camel sample_4579

['protected boolean processExchange(final Endpoint endpoint, final Exchange exchange, final Exchange original, final AsyncCallback originalCallback, final RoutingSlipIterator iter) {']
['processing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4579

['callback.done(true);', 'return;', '}', 'try {', 'Exchange current = prepareExchangeForRoutingSlip(exchange, endpoint);', 'while (iter.hasNext(current)) {', 'if (isIgnoreInvalidEndpoints()) {', 'FailedToCreateProducerException e = current.getException(FailedToCreateProducerException.class);', 'if (e != null) {', 'if (log.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['endpoint', 'e']]
camel sample_4579

['if (endpoint == null) {', 'continue;', '}', '} catch (Exception e) {', 'exchange.setException(e);', 'break;', '}', 'boolean sync = processExchange(endpoint, current, original, callback, iter);', 'current = prepareExchangeForRoutingSlip(current, endpoint);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['original', 'getexchangeid']]
camel sample_4579

['} catch (Exception e) {', 'exchange.setException(e);', 'break;', '}', 'boolean sync = processExchange(endpoint, current, original, callback, iter);', 'current = prepareExchangeForRoutingSlip(current, endpoint);', 'if (!sync) {', 'return;', '}', '}']
['processing complete for exchangeid ', ['original', 'getexchangeid', 'current']]
camel sample_4579

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);']
['routingslip is not using producercache ', ['this']]
camel sample_4579

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);', '} else if (cacheSize == 0) {', 'producerCache = new ProducerCache(this, camelContext);']
['routingslip using producercache with default cache size ', ['this']]
camel sample_4579

['protected synchronized void doWrite(String event) throws IOException {']
['writing event to splunk ', ['event']]
camel sample_14478

['if (qoSValue != null) {', 'qoS = MQTTConfiguration.getQoS(qoSValue.toString());', '}', 'String topicName = configuration.getPublishTopicName();', 'Object topicValue = exchange.getIn().getHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC);', 'if (topicValue != null) {', 'topicName = topicValue.toString();', '}', 'final String name = topicName;', 'try {']
['publishing to ', ['name']]
camel sample_16853

['}', 'String topicName = configuration.getPublishTopicName();', 'Object topicValue = exchange.getIn().getHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC);', 'if (topicValue != null) {', 'topicName = topicValue.toString();', '}', 'final String name = topicName;', 'try {', 'mqttEndpoint.publish(name, body, qoS, retain, new Callback<Void>() {', 'public void onSuccess(Void aVoid) {']
['onsuccess from ', ['name']]
camel sample_16853

['if (topicValue != null) {', 'topicName = topicValue.toString();', '}', 'final String name = topicName;', 'try {', 'mqttEndpoint.publish(name, body, qoS, retain, new Callback<Void>() {', 'public void onSuccess(Void aVoid) {', 'callback.done(false);', '}', 'public void onFailure(Throwable throwable) {']
['onfailure from ', ['name']]
camel sample_16853

['callback.done(false);', '}', '});', '} catch (Exception e) {', 'exchange.setException(e);', 'callback.done(true);', 'return true;', '}', 'return false;', '} else {']
['no data to publish ', []]
camel sample_16853

['private void start() throws IOException {', 'int port = 8080;', 'server = ServerBuilder.forPort(port).addService(new HelloCamelImpl()).build().start();']
['server started i m listening on ', ['port']]
camel sample_17741

['public void handleResponse(Map<String, Object> ctx, Object[] res) {', 'try {', 'super.handleResponse(ctx, res);', '} finally {', 'if (endpoint.getCookieHandler() != null) {', 'try {', 'Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS));', 'endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);', '} catch (IOException e) {']
['cannot store cookies ', ['e']]
camel sample_7990

['Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS));', 'endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);', '} catch (IOException e) {', '}', '}', 'if (!boi.getOperationInfo().isOneWay()) {', 'endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);', 'camelAsyncCallback.done(false);', '}', 'if (LOG.isDebugEnabled()) {']
['calling handleresponse ', ['thread', 'currentthread', 'getname']]
camel sample_7990

['}', '} else {', 'camelExchange.setException(ex);', '}', '} finally {', 'if (endpoint.getCookieHandler() != null) {', 'try {', 'Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS));', 'endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);', '} catch (IOException e) {']
['cannot store cookies ', ['e']]
camel sample_7990

['Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS));', 'endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders);', '} catch (IOException e) {', '}', '}', 'if (!boi.getOperationInfo().isOneWay()) {', 'endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);', 'camelAsyncCallback.done(false);', '}', 'if (LOG.isDebugEnabled()) {']
['calling handleexception ', ['thread', 'currentthread', 'getname']]
camel sample_7990

['public String parseProperty(String key, String value, Properties properties) {', 'log.trace(format("Parsing property \'%s=%s\'", key, value));', 'if (value != null) {', 'initEncryptor();', 'Matcher matcher = PATTERN.matcher(value);', 'while (matcher.find()) {']
['decrypting part s ', ['format', 'matcher', 'group']]
camel sample_14614

['private synchronized void initEncryptor() {', 'if (encryptor == null) {', 'ObjectHelper.notEmpty("password", password);', 'StandardPBEStringEncryptor pbeStringEncryptor = new StandardPBEStringEncryptor();', 'pbeStringEncryptor.setPassword(password);', 'if (algorithm != null) {', 'pbeStringEncryptor.setAlgorithm(algorithm);']
['initialized encryptor using s algorithm and provided password ', ['format', 'algorithm']]
camel sample_14614

['private synchronized void initEncryptor() {', 'if (encryptor == null) {', 'ObjectHelper.notEmpty("password", password);', 'StandardPBEStringEncryptor pbeStringEncryptor = new StandardPBEStringEncryptor();', 'pbeStringEncryptor.setPassword(password);', 'if (algorithm != null) {', 'pbeStringEncryptor.setAlgorithm(algorithm);', '} else {']
['initialized encryptor using default algorithm and provided password ', []]
camel sample_14614

['public void onFailure(Exchange exchange) {']
['callback onfailure ', []]
camel sample_7093

['public void onComplete(Exchange exchange) {']
['callback oncomplete ', []]
camel sample_7093

['public void cleanup() {']
['latch countdown count was ', ['latch', 'getcount']]
camel sample_7093

['public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {', 'String destinationName = messageSend.getDestination().getPhysicalName();']
['received message for destination ', ['destinationname']]
camel sample_7093

['public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {', 'String destinationName = messageSend.getDestination().getPhysicalName();', 'if (destinationName.toLowerCase().contains("test") && i == 0) {', 'Thread.sleep(2000);']
['waited seconds for destination ', ['destinationname']]
camel sample_7093

['public void connect(WebsocketConsumer consumer) {']
['connecting consumer ', ['consumer']]
camel sample_17468

['public void disconnect(WebsocketConsumer consumer) {']
['disconnecting consumer ', ['consumer']]
camel sample_17468

['public DefaultWebsocket doWebSocketConnect(ServletUpgradeRequest request, String protocol) {', 'String protocolKey = protocol;', 'if (protocol == null || !socketFactory.containsKey(protocol)) {']
['no factory found for the socket protocol returning default implementation ', ['protocol']]
camel sample_17468

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'synchronized (endpoints) {', 'Endpoint endpoint = endpoints.get(uri);', 'if (endpoint == null) {', 'endpoint = new TradeExecutorEndpoint(uri, new TradeExecutor());', 'endpoints.put(uri, (TradeExecutorEndpoint) endpoint);']
['created trade executor ', ['uri']]
camel sample_10657

['public Producer createProducer() throws Exception {', 'return new DefaultProducer(this) {', 'public void process(final Exchange exchange) throws Exception {', 'executor.execute(new Runnable() {', 'public void run() {', 'try {', 'tradeExecutor.execute(exchange.getIn().getMandatoryBody(Message.class));', '} catch (Exception e) {']
['error during trade execution ', ['e']]
camel sample_10657

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<StreamComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stream.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stream.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_470

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_535

['protected void onExchange(Exchange exchange) throws Exception {', 'String path = getResourceUri();', 'ObjectHelper.notNull(path, "resourceUri");', 'String newResourceUri = exchange.getIn().getHeader(MvelConstants.MVEL_RESOURCE_URI, String.class);', 'if (newResourceUri != null) {', 'exchange.getIn().removeHeader(MvelConstants.MVEL_RESOURCE_URI);']
['set to creating new endpoint to handle exchange ', ['mvelconstants', 'mvel', 'resource', 'uri', 'newresourceuri']]
camel sample_8389

['MvelEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri);', 'newEndpoint.onExchange(exchange);', 'return;', '}', 'CompiledTemplate compiled;', 'ParserContext mvelContext = ParserContext.create();', 'Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange);', 'String content = exchange.getIn().getHeader(MvelConstants.MVEL_TEMPLATE, String.class);', 'if (content != null) {', 'if (log.isDebugEnabled()) {']
['mvel content read from header for endpoint ', ['mvelconstants', 'mvel', 'template', 'getendpointuri']]
camel sample_8389

['ParserContext mvelContext = ParserContext.create();', 'Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange);', 'String content = exchange.getIn().getHeader(MvelConstants.MVEL_TEMPLATE, String.class);', 'if (content != null) {', 'if (log.isDebugEnabled()) {', '}', 'exchange.getIn().removeHeader(MvelConstants.MVEL_TEMPLATE);', 'compiled = TemplateCompiler.compileTemplate(content, mvelContext);', '} else {', 'if (log.isDebugEnabled()) {']
['mvel content read from resource with resourceuri for endpoint ', ['new', 'object', 'getresourceuri', 'path', 'getendpointuri']]
camel sample_8389

['if (log.isDebugEnabled()) {', '}', 'Reader reader = getEncoding() != null ? new InputStreamReader(getResourceAsInputStream(), getEncoding()) : new InputStreamReader(getResourceAsInputStream());', 'String template = IOConverter.toString(reader);', 'if (!template.equals(this.template)) {', 'this.template = template;', 'this.compiled = TemplateCompiler.compileTemplate(template, mvelContext);', '}', 'compiled = this.compiled;', '}']
['mvel is evaluating using mvel context ', ['variablemap']]
camel sample_8389

['public MvelEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {', 'String newUri = uri.replace(getResourceUri(), newResourceUri);']
['getting endpoint with uri ', ['newuri']]
camel sample_8389

['protected int poll() throws Exception {', 'Exchange exchange = super.getEndpoint().createExchange();', 'try {']
['getting the blob content ', []]
camel sample_9961

['getEndpointProperties(endpoint.getConfiguration(), properties);', 'final FacebookMethodsType method = findMethod(exchange, properties);', 'if (method == null) {', 'callback.done(true);', 'return true;', '}', 'Runnable invocation = new Runnable() {', 'public void run() {', 'try {', 'if (LOG.isDebugEnabled()) {']
['invoking method with ', ['method', 'getname', 'properties', 'keyset']]
camel sample_9598

['if (processInBody(exchange, properties)) {', 'final Set<String> argNames = properties.keySet();', 'final List<FacebookMethodsType> filteredMethods = filterMethods(candidates, MatchType.SUPER_SET, argNames.toArray(new String[argNames.size()]));', 'if (filteredMethods.isEmpty()) {', 'final Set<String> missing = getMissingProperties(endpoint.getMethod(), endpoint.getNameStyle(), argNames);', 'throw new RuntimeCamelException(String.format("Missing properties for %s, need one or more from %s", endpoint.getMethod(), missing));', '} else if (filteredMethods.size() == 1) {', 'method = filteredMethods.get(0);', '} else {', 'method = FacebookMethodsTypeHelper.getHighestPriorityMethod(filteredMethods);']
['calling highest priority method from methods ', ['method', 'filteredmethods']]
camel sample_9598

['private boolean processInBody(Exchange exchange, Map<String, Object> properties) {', 'final String inBodyProperty = endpoint.getInBody();', 'if (inBodyProperty != null) {', 'Object value = exchange.getIn().getBody();', 'try {', 'value = getEndpoint().getCamelContext().getTypeConverter().mandatoryConvertTo( FacebookEndpointConfiguration.class.getDeclaredField(inBodyProperty).getType(), exchange, value);', '} catch (Exception e) {', 'exchange.setException(new RuntimeCamelException(String.format( "Error converting value %s to property %s: %s", value, inBodyProperty, e.getMessage()), e));', 'return false;', '}']
['property has message body value ', ['inbodyproperty', 'value']]
camel sample_9598

['public void testUndertow() throws Exception {', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:myapp");', 'mockEndpoint.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST");']
['number of exchanges in mock myapp ', ['mockendpoint', 'getexchanges', 'size']]
camel sample_13094

['private void processApexCall(final Exchange exchange, final AsyncCallback callback) throws SalesforceException {', 'final String apexUrl = getApexUrl(exchange);', 'String apexMethod = getParameter(APEX_METHOD, exchange, IGNORE_BODY, IS_OPTIONAL);', 'if (apexMethod == null) {', 'apexMethod = "GET";']
['using http get method by default for apex rest call for ', ['apexurl']]
camel sample_14751

['}', 'try {', 'result.append(URLEncoder.encode(String.valueOf(value), "UTF-8").replaceAll("\\\\+", "%20"));', '} catch (UnsupportedEncodingException e) {', 'throw new SalesforceException("Unexpected error: " + e.getMessage(), e);', '}', '}', 'if (start != 0) {', 'result.append(apexUrl.substring(start));', 'final String resolvedUrl = result.toString();']
['resolved apex url to ', ['apexurl', 'resolvedurl']]
camel sample_14751

['Map<String, Object> queryParams = new HashMap<String, Object>(endpoint.getConfiguration().getApexQueryParams());', 'for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {', 'if (entry.getKey().startsWith(APEX_QUERY_PARAM_PREFIX)) {', 'queryParams.put(entry.getKey().substring(APEX_QUERY_PARAM_PREFIX.length()), entry.getValue());', '}', '}', 'final Object body = exchange.getIn().getBody();', 'if (body instanceof Map) {', 'queryParams.putAll((Map<String, Object>) body);', '}']
['using apex query params ', ['queryparams']]
camel sample_14751

['protected void doGetBuild(Exchange exchange, String operation) throws Exception {', 'Build build = null;', 'String buildName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_BUILD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(buildName)) {']
['get a specific build require specify a build name ', []]
camel sample_13283

['protected void doGetBuild(Exchange exchange, String operation) throws Exception {', 'Build build = null;', 'String buildName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_BUILD_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(buildName)) {', 'throw new IllegalArgumentException("Get a specific Build require specify a Build name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific build require specify a namespace name ', []]
camel sample_13283

['protected Exchange doAdd(final CamelContext camelContext, final String key, final Exchange exchange, final boolean handleOptimisticLockingException) {']
['adding key ', ['key', 'exchange']]
camel sample_11744

['protected Exchange doAdd(final CamelContext camelContext, final String key, final Exchange exchange, final boolean handleOptimisticLockingException) {', 'try {', 'final Buffer keyBuffer = codec.marshallKey(key);', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'Buffer rc = hawtDBFile.execute(new Work<Buffer>() {', 'public Buffer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> index = hawtDBFile.getRepositoryIndex(tx, repositoryName, true);', 'Buffer buffer = index.put(keyBuffer, exchangeBuffer);']
['added key index ', ['keybuffer']]
camel sample_11744

['Exchange answer = null;', 'try {', 'final Buffer keyBuffer = codec.marshallKey(key);', 'Buffer rc = hawtDBFile.execute(new Work<Buffer>() {', 'public Buffer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> index = hawtDBFile.getRepositoryIndex(tx, repositoryName, false);', 'if (index == null) {', 'return null;', '}', 'Buffer buffer = index.get(keyBuffer);']
['getting key index ', ['keybuffer']]
camel sample_11744

['public String toString() {', 'return "Getting key [" + key + "]";', '}', '});', 'if (rc != null) {', 'answer = codec.unmarshallExchange(camelContext, rc);', '}', '} catch (IOException e) {', 'throw new RuntimeException("Error getting key " + key + " from repository " + repositoryName, e);', '}']
['getting key ', ['key', 'answer']]
camel sample_11744

['public void remove(final CamelContext camelContext, final String key, final Exchange exchange) {']
['removing key ', ['key']]
camel sample_11744

['public void remove(final CamelContext camelContext, final String key, final Exchange exchange) {', 'try {', 'final Buffer keyBuffer = codec.marshallKey(key);', 'final Buffer confirmKeyBuffer = codec.marshallKey(exchange.getExchangeId());', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'hawtDBFile.execute(new Work<Buffer>() {', 'public Buffer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> index = hawtDBFile.getRepositoryIndex(tx, repositoryName, true);', 'Buffer buffer = index.remove(keyBuffer);']
['removed key index ', ['keybuffer', 'buffer']]
camel sample_11744

['try {', 'final Buffer keyBuffer = codec.marshallKey(key);', 'final Buffer confirmKeyBuffer = codec.marshallKey(exchange.getExchangeId());', 'final Buffer exchangeBuffer = codec.marshallExchange(camelContext, exchange, allowSerializedHeaders);', 'hawtDBFile.execute(new Work<Buffer>() {', 'public Buffer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> index = hawtDBFile.getRepositoryIndex(tx, repositoryName, true);', 'Buffer buffer = index.remove(keyBuffer);', 'SortedIndex<Buffer, Buffer> indexCompleted = hawtDBFile.getRepositoryIndex(tx, getRepositoryNameCompleted(), true);', 'indexCompleted.put(confirmKeyBuffer, exchangeBuffer);']
['added confirm index ', ['confirmkeybuffer']]
camel sample_11744

['public void confirm(final CamelContext camelContext, final String exchangeId) {']
['confirming exchangeid ', ['exchangeid']]
camel sample_11744

['public void confirm(final CamelContext camelContext, final String exchangeId) {', 'try {', 'final Buffer confirmKeyBuffer = codec.marshallKey(exchangeId);', 'hawtDBFile.execute(new Work<Buffer>() {', 'public Buffer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> indexCompleted = hawtDBFile.getRepositoryIndex(tx, getRepositoryNameCompleted(), true);', 'Buffer buffer = indexCompleted.remove(confirmKeyBuffer);']
['removed confirm index ', ['confirmkeybuffer', 'buffer']]
camel sample_11744

['while (it.hasNext() && isRunAllowed()) {', 'Map.Entry<Buffer, Buffer> entry = it.next();', 'Buffer keyBuffer = entry.getKey();', 'String key;', 'try {', 'key  = codec.unmarshallKey(keyBuffer);', '} catch (IOException e) {', 'throw new RuntimeException("Error unmarshalling key: " + keyBuffer, e);', '}', 'if (key != null) {']
['getkey ', ['key']]
camel sample_11744

['while (it.hasNext() && isRunAllowed()) {', 'Map.Entry<Buffer, Buffer> entry = it.next();', 'Buffer keyBuffer = entry.getKey();', 'String exchangeId;', 'try {', 'exchangeId = codec.unmarshallKey(keyBuffer);', '} catch (IOException e) {', 'throw new RuntimeException("Error unmarshalling confirm key: " + keyBuffer, e);', '}', 'if (exchangeId != null) {']
['scan exchangeid ', ['exchangeid']]
camel sample_11744

['answer.add(exchangeId);', '}', '}', 'return null;', '}', 'public String toString() {', 'return "Scan";', '}', '});', 'if (answer.size() == 0) {']
['scanned and found no exchange to recover ', []]
camel sample_11744

['}', 'return null;', '}', 'public String toString() {', 'return "Scan";', '}', '});', 'if (answer.size() == 0) {', '} else {', 'if (LOG.isDebugEnabled()) {']
['scanned and found exchange s to recover note some of them may already be in progress ', ['answer', 'size']]
camel sample_11744

['public String toString() {', 'return "Recovering exchangeId [" + exchangeId + "]";', '}', '});', 'if (rc != null) {', 'answer = codec.unmarshallExchange(camelContext, rc);', '}', '} catch (IOException e) {', 'throw new RuntimeException("Error recovering exchangeId " + exchangeId + " from repository " + repositoryName, e);', '}']
['recovering exchangeid ', ['exchangeid', 'answer']]
camel sample_11744

['private int size(final String repositoryName) {', 'int answer = hawtDBFile.execute(new Work<Integer>() {', 'public Integer execute(Transaction tx) {', 'SortedIndex<Buffer, Buffer> index = hawtDBFile.getRepositoryIndex(tx, repositoryName, false);', 'return index != null ? index.size() : 0;', '}', 'public String toString() {', 'return "Size[" + repositoryName + "]";', '}', '});']
['size of repository ', ['repositoryname', 'answer']]
camel sample_11744

['if (getPageSize() > 0) {', 'hawtDBFile.setPageSize(getPageSize());', '}', '}', 'ObjectHelper.notNull(hawtDBFile, "Either set a persistentFileName or a hawtDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(hawtDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {']
['on startup there are aggregate exchanges not completed in repository ', ['current', 'getrepositoryname']]
camel sample_11744

['hawtDBFile.setPageSize(getPageSize());', '}', '}', 'ObjectHelper.notNull(hawtDBFile, "Either set a persistentFileName or a hawtDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(hawtDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {']
['on startup there are no existing aggregate exchanges not completed in repository ', ['getrepositoryname']]
camel sample_11744

['}', 'ObjectHelper.notNull(hawtDBFile, "Either set a persistentFileName or a hawtDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(hawtDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {']
['on startup there are completed exchanges to be recovered in repository ', ['completed', 'getrepositorynamecompleted']]
camel sample_11744

['ObjectHelper.notNull(hawtDBFile, "Either set a persistentFileName or a hawtDBFile");', 'ObjectHelper.notNull(repositoryName, "repositoryName");', 'ServiceHelper.startService(hawtDBFile);', 'int current = size(getRepositoryName());', 'int completed = size(getRepositoryNameCompleted());', 'if (current > 0) {', '} else {', '}', 'if (completed > 0) {', '} else {']
['on startup there are no completed exchanges to be recovered in repository ', ['getrepositorynamecompleted']]
camel sample_11744

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MasterComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zookeeper-master.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.zookeeper-master.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1215

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_9625

['public void remove(CamelContext camelContext, String key, Exchange exchange) {']
['removing an exchange with id for key ', ['exchange', 'getexchangeid', 'key']]
camel sample_9625

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_9625

['public Set<String> scan(CamelContext camelContext) {']
['scanning for exchanges to recover in context ', ['camelcontext', 'getname']]
camel sample_9625

['public Set<String> scan(CamelContext camelContext) {', 'Set<String> scanned = Collections.unmodifiableSet(getKeys());']
['found keys for exchanges to recover in context ', ['scanned', 'size', 'camelcontext', 'getname']]
camel sample_9625

['public Exchange recover(CamelContext camelContext, String exchangeId) {']
['recovering an exchange with id ', ['exchangeid']]
camel sample_9625

['public void process(Exchange exchange) throws Exception {']
['entering processor ', []]
camel sample_7791

['public void process(Exchange exchange) throws Exception {', 'String name = exchange.getIn().getBody(String.class);', 'exchange.getOut().setBody("Hello " + name);']
['leaving processor ', []]
camel sample_7791

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MailComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mail.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mail.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_722

['if (!routeContext.isRouteAdded()) {', 'boolean endpointInterceptor = false;', 'if (processor instanceof Channel) {', 'Channel channel = (Channel) processor;', 'Processor next = channel.getNextProcessor();', 'if (next instanceof InterceptEndpointProcessor) {', 'endpointInterceptor = true;', '}', '}', 'if (endpointInterceptor) {']
['endpoint interceptor should not be added as an event driven consumer route ', ['processor']]
camel sample_5256

['boolean endpointInterceptor = false;', 'if (processor instanceof Channel) {', 'Channel channel = (Channel) processor;', 'Processor next = channel.getNextProcessor();', 'if (next instanceof InterceptEndpointProcessor) {', 'endpointInterceptor = true;', '}', '}', 'if (endpointInterceptor) {', '} else {']
['adding event driven processor ', ['processor']]
camel sample_5256

['protected Processor wrapChannel(RouteContext routeContext, Processor processor, ProcessorDefinition<?> child, Boolean inheritErrorHandler) throws Exception {', 'ModelChannel channel = createChannel(routeContext);', 'channel.setNextProcessor(processor);', 'addInterceptStrategies(routeContext, channel, routeContext.getCamelContext().getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, routeContext.getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, this.getInterceptStrategies());', 'ProcessorDefinition<?> defn = (ProcessorDefinition<?>) this;', 'channel.setChildDefinition(child);', 'channel.initChannel(defn, routeContext);', 'if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {']
['is part of dotry docatch dofinally so no error handler is applied ', ['defn']]
camel sample_5256

['ModelChannel channel = createChannel(routeContext);', 'channel.setNextProcessor(processor);', 'addInterceptStrategies(routeContext, channel, routeContext.getCamelContext().getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, routeContext.getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, this.getInterceptStrategies());', 'ProcessorDefinition<?> defn = (ProcessorDefinition<?>) this;', 'channel.setChildDefinition(child);', 'channel.initChannel(defn, routeContext);', 'if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {', '} else if (ProcessorDefinitionHelper.isParentOfType(TryDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(CatchDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(FinallyDefinition.class, defn, true)) {']
['is part of dotry docatch dofinally so no error handler is applied ', ['defn']]
camel sample_5256

['channel.setNextProcessor(processor);', 'addInterceptStrategies(routeContext, channel, routeContext.getCamelContext().getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, routeContext.getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, this.getInterceptStrategies());', 'ProcessorDefinition<?> defn = (ProcessorDefinition<?>) this;', 'channel.setChildDefinition(child);', 'channel.initChannel(defn, routeContext);', 'if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {', '} else if (ProcessorDefinitionHelper.isParentOfType(TryDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(CatchDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(FinallyDefinition.class, defn, true)) {', '} else if (defn instanceof OnExceptionDefinition || ProcessorDefinitionHelper.isParentOfType(OnExceptionDefinition.class, defn, true)) {']
['is part of onexception so no error handler is applied ', ['defn']]
camel sample_5256

['addInterceptStrategies(routeContext, channel, routeContext.getCamelContext().getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, routeContext.getInterceptStrategies());', 'addInterceptStrategies(routeContext, channel, this.getInterceptStrategies());', 'ProcessorDefinition<?> defn = (ProcessorDefinition<?>) this;', 'channel.setChildDefinition(child);', 'channel.initChannel(defn, routeContext);', 'if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {', '} else if (ProcessorDefinitionHelper.isParentOfType(TryDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(CatchDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(FinallyDefinition.class, defn, true)) {', '} else if (defn instanceof OnExceptionDefinition || ProcessorDefinitionHelper.isParentOfType(OnExceptionDefinition.class, defn, true)) {', '} else if (defn instanceof HystrixDefinition || ProcessorDefinitionHelper.isParentOfType(HystrixDefinition.class, defn, true)) {']
['is part of hystrixcircuitbreaker so no error handler is applied ', ['defn']]
camel sample_5256

['if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {', '} else if (ProcessorDefinitionHelper.isParentOfType(TryDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(CatchDefinition.class, defn, true) || ProcessorDefinitionHelper.isParentOfType(FinallyDefinition.class, defn, true)) {', '} else if (defn instanceof OnExceptionDefinition || ProcessorDefinitionHelper.isParentOfType(OnExceptionDefinition.class, defn, true)) {', '} else if (defn instanceof HystrixDefinition || ProcessorDefinitionHelper.isParentOfType(HystrixDefinition.class, defn, true)) {', '} else if (defn instanceof MulticastDefinition) {', 'MulticastDefinition def = (MulticastDefinition) defn;', 'boolean isShareUnitOfWork = def.getShareUnitOfWork() != null && def.getShareUnitOfWork();', 'if (isShareUnitOfWork && child == null) {', 'wrapChannelInErrorHandler(channel, routeContext, inheritErrorHandler);', '} else {']
['is part of multicast which have special error handling so no error handler is applied ', ['defn']]
camel sample_5256

['MulticastDefinition def = (MulticastDefinition) defn;', 'boolean isShareUnitOfWork = def.getShareUnitOfWork() != null && def.getShareUnitOfWork();', 'if (isShareUnitOfWork && child == null) {', 'wrapChannelInErrorHandler(channel, routeContext, inheritErrorHandler);', '} else {', '}', '} else {', 'wrapChannelInErrorHandler(channel, routeContext, inheritErrorHandler);', '}', 'channel.postInitChannel(defn, routeContext);']
['wrapped in channel ', ['defn', 'channel']]
camel sample_5256

['private void wrapChannelInErrorHandler(Channel channel, RouteContext routeContext, Boolean inheritErrorHandler) throws Exception {', 'if (inheritErrorHandler == null || inheritErrorHandler) {']
['is configured to inheriterrorhandler ', ['this']]
camel sample_5256

['private void wrapChannelInErrorHandler(Channel channel, RouteContext routeContext, Boolean inheritErrorHandler) throws Exception {', 'if (inheritErrorHandler == null || inheritErrorHandler) {', 'Processor output = channel.getOutput();', 'Processor errorHandler = wrapInErrorHandler(routeContext, output);', 'channel.setErrorHandler(errorHandler);', '} else {']
['is configured to not inheriterrorhandler ', ['this']]
camel sample_5256

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'String splitURI[] = ObjectHelper.splitOnCharacter(remaining, ":", 2);', 'if (splitURI[1] != null) {', 'String contextId = splitURI[0];', 'String localEndpoint = splitURI[1];', 'Component component = getCamelContext().getComponent(contextId);', 'if (component != null) {']
['attempting to create local endpoint inside the component ', ['localendpoint', 'component']]
camel sample_12168

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Object message = in.getBody();', 'if (message == null) {']
['ignoring a null message ', []]
camel sample_10010

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Object message = in.getBody();', 'if (message == null) {', 'return;', '}', 'if (!(message instanceof String || message instanceof byte[] || message instanceof Reader || message instanceof InputStream)) {', 'if (LOG.isInfoEnabled()) {']
['using string for unexpected message type ', ['message', 'getclass']]
camel sample_10010

['if (!(message instanceof String || message instanceof byte[] || message instanceof Reader || message instanceof InputStream)) {', 'if (LOG.isInfoEnabled()) {', '}', 'message = in.getBody(String.class);', '}', 'if (message instanceof Reader) {', 'message = in.getBody(String.class);', '} else if (message instanceof InputStream) {', 'message = in.getBody(byte[].class);', '}']
['sending to ', ['message']]
camel sample_10010

['if (LOG.isInfoEnabled()) {', '}', 'message = in.getBody(String.class);', '}', 'if (message instanceof Reader) {', 'message = in.getBody(String.class);', '} else if (message instanceof InputStream) {', 'message = in.getBody(byte[].class);', '}', 'if (getEndpoint().isSendToAll()) {']
['sending to all ', ['message']]
camel sample_10010

['private void messageDistributor(final List<String> connectionKeyList, final Object message) {', 'if (connectionKeyList == null) {', 'throw new IllegalArgumentException("Failed to send message to multiple connections; connetion key list is not set.");', '}', 'List<String> notValidConnectionKeys = new ArrayList<>();', 'for (final String connectionKey : connectionKeyList) {']
['sending to connection key ', ['connectionkey', 'message']]
camel sample_10010

['private void messageDistributor(final List<String> connectionKeyList, final Object message) {', 'if (connectionKeyList == null) {', 'throw new IllegalArgumentException("Failed to send message to multiple connections; connetion key list is not set.");', '}', 'List<String> notValidConnectionKeys = new ArrayList<>();', 'for (final String connectionKey : connectionKeyList) {', 'sendMessage(getWebSocket(connectionKey, notValidConnectionKeys), message);', '}', 'if (!notValidConnectionKeys.isEmpty()) {']
['some connections have not received the message ', ['message']]
camel sample_10010

['private void sendMessage(final WebSocket websocket, final Object message) {', 'if (websocket != null && message != null) {', 'executor.execute(new Runnable() {', 'public void run() {', 'try {', 'if (message instanceof String) {', 'websocket.write((String) message);', '} else if (message instanceof byte[]) {', 'websocket.write((byte[]) message, 0, ((byte[]) message).length);', '} else {']
['unexpected message type ', ['message', 'getclass']]
camel sample_10010

['executor.execute(new Runnable() {', 'public void run() {', 'try {', 'if (message instanceof String) {', 'websocket.write((String) message);', '} else if (message instanceof byte[]) {', 'websocket.write((byte[]) message, 0, ((byte[]) message).length);', '} else {', '}', '} catch (Exception e) {']
['error when writing to websocket ', ['e']]
camel sample_10010

['private WebSocket getWebSocket(final String connectionKey, final List<String> notValidConnectionKeys) {', 'WebSocket websocket;', 'if (connectionKey == null) {', 'throw new IllegalArgumentException("Failed to send message to single connection; connection key is not set.");', '} else {', 'websocket = getEndpoint().getWebSocketStore().getWebSocket(connectionKey);', 'if (websocket == null) {', 'notValidConnectionKeys.add(connectionKey);']
['failed to send message to single connection connetion key is not valid ', ['connectionkey']]
camel sample_10010

['public void testAll() throws Exception {', 'final List<AddOn> result = requestBody("direct: assertNotNull("all result", result);']
['all ', ['result']]
camel sample_17385

['public void testConvertToXmlObject() throws Exception {', 'Exchange exchange = createExchangeWithBody("<hello>world!</hello>");', 'Message in = exchange.getIn();', 'XmlObject object = in.getBody(XmlObject.class);', 'assertNotNull("Should have created an XmlObject!", object);']
['found ', ['object']]
camel sample_14403

['protected void doServiceAsync(AsyncContext context) {', 'final HttpServletRequest request = (HttpServletRequest) context.getRequest();', 'final HttpServletResponse response = (HttpServletResponse) context.getResponse();', 'try {', 'doService(request, response);', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_12884

['protected void doServiceAsync(AsyncContext context) {', 'final HttpServletRequest request = (HttpServletRequest) context.getRequest();', 'final HttpServletResponse response = (HttpServletResponse) context.getResponse();', 'try {', 'doService(request, response);', '} catch (Exception e) {', 'try {', 'response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);', '} catch (Exception e1) {']
['cannot send reply to client ', []]
camel sample_12884

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {']
['service ', ['request']]
camel sample_12884

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {', 'HttpConsumer consumer = resolve(request);', 'if (consumer == null) {', 'boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()));', 'if (hasAnyMethod) {']
['no consumer to service request as method is not allowed ', ['request', 'request', 'getmethod']]
camel sample_12884

['protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {', 'HttpConsumer consumer = resolve(request);', 'if (consumer == null) {', 'boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()));', 'if (hasAnyMethod) {', 'response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);', 'return;', '} else {']
['no consumer to service request as resource is not found ', ['request']]
camel sample_12884

['boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()));', 'if (hasAnyMethod) {', 'response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);', 'return;', '} else {', 'response.sendError(HttpServletResponse.SC_NOT_FOUND);', 'return;', '}', '}', 'if (consumer.isSuspended()) {']
['consumer suspended cannot service request ', ['request']]
camel sample_12884

['exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response));', 'String contextPath = consumer.getEndpoint().getPath();', 'exchange.getIn().setHeader("CamelServletContextPath", contextPath);', 'String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH);', 'if (contextPath != null && httpPath.startsWith(contextPath)) {', 'exchange.getIn().setHeader(Exchange.HTTP_PATH, httpPath.substring(contextPath.length()));', '}', 'try {', 'consumer.createUoW(exchange);', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_12884

['if (contextPath != null && httpPath.startsWith(contextPath)) {', 'exchange.getIn().setHeader(Exchange.HTTP_PATH, httpPath.substring(contextPath.length()));', '}', 'try {', 'consumer.createUoW(exchange);', '} catch (Exception e) {', 'throw new ServletException(e);', '}', 'try {', 'if (log.isTraceEnabled()) {']
['processing request for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_12884

['}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'consumer.getProcessor().process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'try {', 'if (log.isTraceEnabled()) {']
['writing response for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_12884

['}', 'consumer.getProcessor().process(exchange);', '} catch (Exception e) {', 'exchange.setException(e);', '}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {']
['using response buffer size ', ['bs']]
camel sample_12884

['}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {', 'response.setBufferSize(bs);', '}', 'consumer.getBinding().writeResponse(exchange, response);', '} catch (IOException e) {']
['error processing request ', ['e']]
camel sample_12884

['if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {', 'response.setBufferSize(bs);', '}', 'consumer.getBinding().writeResponse(exchange, response);', '} catch (IOException e) {', 'throw e;', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_12884

['public void connect(HttpConsumer consumer) {']
['connecting consumer ', ['consumer']]
camel sample_12884

['public void disconnect(HttpConsumer consumer) {']
['disconnecting consumer ', ['consumer']]
camel sample_12884

['protected ClassLoader overrideTccl(final Exchange exchange) {', 'ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();', 'ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader();', 'if (oldClassLoader == null || appCtxCl == null) {', 'return null;', '}', 'if (!oldClassLoader.equals(appCtxCl)) {', 'Thread.currentThread().setContextClassLoader(appCtxCl);', 'if (log.isTraceEnabled()) {']
['overrode tccl for exchangeid to on thread ', ['new', 'object', 'exchange', 'getexchangeid', 'appctxcl', 'thread', 'currentthread', 'getname']]
camel sample_12884

['protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {', 'if (oldTccl == null) {', 'return;', '}', 'Thread.currentThread().setContextClassLoader(oldTccl);', 'if (log.isTraceEnabled()) {']
['restored tccl for exchangeid to on thread ', ['new', 'string', 'exchange', 'getexchangeid', 'oldtccl', 'tostring', 'thread', 'currentthread', 'getname']]
camel sample_12884

['try {', 'final Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();', 'final Error error = (Error) unmarshaller.unmarshal(responseContext.getEntityStream());', 'final Response.ResponseBuilder builder = Response.status(responseContext.getStatusInfo());', 'builder.entity(error);', 'for (Map.Entry<String, List<String>> header : responseContext.getHeaders().entrySet()) {', 'builder.header(header.getKey(), header.getValue());', '}', 'throw new LinkedInException(error, builder.build());', '} catch (JAXBException e) {']
['unable to parse linkedin error ', ['e', 'getmessage', 'e']]
camel sample_8872

['public O process(I i) throws Exception {']
['processing item ', ['i']]
camel sample_12754

['public O process(I i) throws Exception {', 'O result = (O) producerTemplate.requestBody(endpointUri, i);']
['processed item ', []]
camel sample_12754

['public DefaultCamelContext() {', 'boolean warmUp = "true".equalsIgnoreCase(System.getProperty("CamelWarmUpLRUCacheFactory", "true"));', 'if (warmUp) {', 'LRUCacheFactory.warmUp();', '}', 'this.executorServiceManager = new DefaultExecutorServiceManager(this);', 'this.endpoints = new ProvisionalEndpointRegistry();', 'this.startupListeners.add(deferStartupListener);', 'if (WebSpherePackageScanClassResolver.isWebSphereClassLoader(this.getClass().getClassLoader())) {']
['using websphere specific packagescanclassresolver ', []]
camel sample_3947

['private Component initComponent(String name, boolean autoCreateComponents) {', 'Component component = null;', 'if (autoCreateComponents) {', 'try {', 'if (log.isDebugEnabled()) {']
['using componentresolver to resolve component with name ', ['getcomponentresolver', 'name']]
camel sample_3947

['public Component removeComponent(String componentName) {', 'Component oldComponent = components.remove(componentName);', 'if (oldComponent != null) {', 'try {', 'stopServices(oldComponent);', '} catch (Exception e) {']
['error stopping component this exception will be ignored ', ['oldcomponent', 'e']]
camel sample_3947

['if (oldEndpoint != null) {', 'answer.add(oldEndpoint);', 'stopServices(oldEndpoint);', '} else {', 'for (Map.Entry<EndpointKey, Endpoint> entry : endpoints.entrySet()) {', 'oldEndpoint = entry.getValue();', 'if (EndpointHelper.matchEndpoint(this, oldEndpoint.getEndpointUri(), uri)) {', 'try {', 'stopServices(oldEndpoint);', '} catch (Exception e) {']
['error stopping endpoint this exception will be ignored ', ['oldendpoint', 'e']]
camel sample_3947

['public Endpoint getEndpoint(String uri) {', 'ObjectHelper.notEmpty(uri, "uri");']
['getting endpoint with uri ', ['uri']]
camel sample_3947

['public Endpoint getEndpoint(String uri) {', 'ObjectHelper.notEmpty(uri, "uri");', 'try {', 'uri = resolvePropertyPlaceholders(uri);', '} catch (Exception e) {', 'throw new ResolveEndpointFailedException(uri, e);', '}', 'final String rawUri = uri;', 'uri = normalizeEndpointUri(uri);']
['getting endpoint with raw uri normalized uri ', ['rawuri', 'uri']]
camel sample_3947

['uri = normalizeEndpointUri(uri);', 'Endpoint answer;', 'String scheme = null;', 'EndpointKey key = getEndpointKeyPreNormalized(uri);', 'answer = endpoints.get(key);', 'if (answer == null) {', 'try {', 'String splitURI[] = ObjectHelper.splitOnCharacter(uri, ":", 2);', 'if (splitURI[1] != null) {', 'scheme = splitURI[0];']
['endpoint uri is from component with name ', ['uri', 'scheme']]
camel sample_3947

['String scheme = null;', 'EndpointKey key = getEndpointKeyPreNormalized(uri);', 'answer = endpoints.get(key);', 'if (answer == null) {', 'try {', 'String splitURI[] = ObjectHelper.splitOnCharacter(uri, ":", 2);', 'if (splitURI[1] != null) {', 'scheme = splitURI[0];', 'Component component = getComponent(scheme);', 'if (component != null) {']
['creating endpoint from uri using component ', ['uri', 'component']]
camel sample_3947

['if (splitURI[1] != null) {', 'scheme = splitURI[0];', 'Component component = getComponent(scheme);', 'if (component != null) {', 'if (component.useRawUri()) {', 'answer = component.createEndpoint(rawUri);', '} else {', 'answer = component.createEndpoint(uri);', '}', 'if (answer != null && log.isDebugEnabled()) {']
['converted to endpoint by component ', ['new', 'object', 'urisupport', 'sanitizeuri', 'uri', 'answer', 'component']]
camel sample_3947

['answer = component.createEndpoint(rawUri);', '} else {', 'answer = component.createEndpoint(uri);', '}', 'if (answer != null && log.isDebugEnabled()) {', '}', '}', '}', 'if (answer == null) {', 'answer = createEndpoint(uri);']
['no component to create endpoint from uri fallback lookup in registry ', ['uri', 'answer']]
camel sample_3947

['}', '}', 'if (answer == null) {', 'answer = createEndpoint(uri);', '}', 'if (answer == null && splitURI[1] == null) {', "int pos = uri.indexOf('?');", 'String componentName = pos > 0 ? uri.substring(0, pos) : uri;', 'Component component = getComponent(componentName);', 'if (component != null) {']
['creating endpoint from uri using component ', ['uri', 'component']]
camel sample_3947

["int pos = uri.indexOf('?');", 'String componentName = pos > 0 ? uri.substring(0, pos) : uri;', 'Component component = getComponent(componentName);', 'if (component != null) {', 'if (component.useRawUri()) {', 'answer = component.createEndpoint(rawUri);', '} else {', 'answer = component.createEndpoint(uri);', '}', 'if (answer != null && log.isDebugEnabled()) {']
['converted to endpoint by component ', ['new', 'object', 'urisupport', 'sanitizeuri', 'uri', 'answer', 'component']]
camel sample_3947

['public void addRoutes(final RoutesBuilder builder) throws Exception {']
['adding routes from builder ', ['builder']]
camel sample_3947

['for (Set<Endpoint> endpoints : endpointsInUse.values()) {', 'if (endpoints.contains(endpoint)) {', 'count++;', '}', '}', 'if (count <= 1) {', 'toRemove.add(endpoint);', '}', '}', 'for (Endpoint endpoint : toRemove) {']
['removing which was only in use by route ', ['endpoint', 'routeid']]
camel sample_3947

['clazz = existing.getClass();', '} else {', 'return null;', '}', '}', 'String packageName = clazz.getPackage().getName();', "packageName = packageName.replace('.', '/');", 'String path = packageName + "/" + componentName + ".json";', 'ClassResolver resolver = getClassResolver();', 'InputStream inputStream = resolver.loadResourceAsStream(path);']
['loading component json schema for using class resolver ', ['new', 'object', 'componentname', 'resolver', 'inputstream']]
camel sample_3947

['} catch (NoFactoryAvailableException e) {', '}', 'if (clazz == null) {', 'return null;', '}', 'String packageName = clazz.getPackage().getName();', "packageName = packageName.replace('.', '/');", 'String path = packageName + "/" + dataFormatName + ".json";', 'ClassResolver resolver = getClassResolver();', 'InputStream inputStream = resolver.loadResourceAsStream(path);']
['loading dataformat json schema for using class resolver ', ['new', 'object', 'dataformatname', 'resolver', 'inputstream']]
camel sample_3947

['} catch (NoFactoryAvailableException e) {', '}', 'if (clazz == null) {', 'return null;', '}', 'String packageName = clazz.getPackage().getName();', "packageName = packageName.replace('.', '/');", 'String path = packageName + "/" + languageName + ".json";', 'ClassResolver resolver = getClassResolver();', 'InputStream inputStream = resolver.loadResourceAsStream(path);']
['loading language json schema for using class resolver ', ['new', 'object', 'languagename', 'resolver', 'inputstream']]
camel sample_3947

['public String getEipParameterJsonSchema(String eipName) throws IOException {', 'String[] subPackages = new String[]{"", "/config", "/dataformat", "/language", "/loadbalancer", "/rest"};', 'for (String sub : subPackages) {', 'String path = CamelContextHelper.MODEL_DOCUMENTATION_PREFIX + sub + "/" + eipName + ".json";', 'ClassResolver resolver = getClassResolver();', 'InputStream inputStream = resolver.loadResourceAsStream(path);', 'if (inputStream != null) {']
['loading eip json schema for using class resolver ', ['new', 'object', 'eipname', 'resolver', 'inputstream']]
camel sample_3947

['public String resolvePropertyPlaceholders(String text) throws Exception {', 'PropertiesComponent pc = getPropertiesComponent();', 'if (text != null && !text.startsWith("properties:")) {', 'if (pc == null && text.contains(PropertiesComponent.DEFAULT_PREFIX_TOKEN)) {', 'pc = (PropertiesComponent) CamelContextHelper.lookupPropertiesComponent(this, true);', '}', 'if (pc != null && text.contains(pc.getPrefixToken())) {', 'String answer = pc.parseUri(text);']
['resolved text ', ['text', 'answer']]
camel sample_3947

['protected void doSuspend() throws Exception {', 'EventHelper.notifyCamelContextSuspending(this);']
['apache camel camelcontext is suspending ', ['getversion', 'getname']]
camel sample_3947

['getShutdownStrategy().suspend(this, orders);', 'for (RouteService service : suspendedRouteServices.values()) {', 'if (routeSupportsSuspension(service.getId())) {', 'service.suspend();', '} else {', 'service.stop();', '}', '}', 'watch.stop();', 'if (log.isInfoEnabled()) {']
['apache camel camelcontext is suspended in ', ['getversion', 'getname', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3947

['protected void doResume() throws Exception {', 'try {', 'EventHelper.notifyCamelContextResuming(this);']
['apache camel camelcontext is resuming ', ['getversion', 'getname']]
camel sample_3947

['StopWatch watch = new StopWatch();', 'doStartOrResumeRoutes(suspendedRouteServices, false, true, true, false);', 'for (RouteService service : suspendedRouteServices.values()) {', 'if (routeSupportsSuspension(service.getId())) {', 'service.resume();', '} else {', 'service.start();', '}', '}', 'if (log.isInfoEnabled()) {']
['resumed routes ', ['suspendedrouteservices', 'size']]
camel sample_3947

['StopWatch watch = new StopWatch();', 'doStartOrResumeRoutes(suspendedRouteServices, false, true, true, false);', 'for (RouteService service : suspendedRouteServices.values()) {', 'if (routeSupportsSuspension(service.getId())) {', 'service.resume();', '} else {', 'service.start();', '}', '}', 'if (log.isInfoEnabled()) {']
['apache camel camelcontext resumed in ', ['getversion', 'getname', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3947

['public void start() throws Exception {', 'try (MDCHelper mdcHelper = new MDCHelper()) {', 'vetoStated.set(false);', 'startDate = new Date();', 'stopWatch.restart();']
['apache camel camelcontext is starting ', ['getversion', 'getname']]
camel sample_3947

['doStartOrResumeRoutes(routeServices, true, true, false, true);', '}', 'try {', 'firstStartDone = true;', 'super.start();', '} catch (VetoCamelContextStartException e) {', 'vetoStated.set(true);', 'if (e.isRethrowException()) {', 'throw e;', '} else {']
['camelcontext vetoed to not start due ', ['getname', 'e', 'getmessage']]
camel sample_3947

['if (log.isInfoEnabled()) {', 'int started = 0;', 'for (Route route : getRoutes()) {', 'ServiceStatus status = getRouteStatus(route.getId());', 'if (status != null && status.isStarted()) {', 'started++;', '}', '}', 'final Collection<Route> controlledRoutes = getRouteController().getControlledRoutes();', 'if (controlledRoutes.isEmpty()) {']
['total routes of which are started ', ['getroutes', 'size', 'started']]
camel sample_3947

['int started = 0;', 'for (Route route : getRoutes()) {', 'ServiceStatus status = getRouteStatus(route.getId());', 'if (status != null && status.isStarted()) {', 'started++;', '}', '}', 'final Collection<Route> controlledRoutes = getRouteController().getControlledRoutes();', 'if (controlledRoutes.isEmpty()) {', '} else {']
['total routes of which are started and are managed by routecontroller ', ['getroutes', 'size', 'started', 'controlledroutes', 'size', 'getroutecontroller', 'getclass', 'getname']]
camel sample_3947

['for (Route route : getRoutes()) {', 'ServiceStatus status = getRouteStatus(route.getId());', 'if (status != null && status.isStarted()) {', 'started++;', '}', '}', 'final Collection<Route> controlledRoutes = getRouteController().getControlledRoutes();', 'if (controlledRoutes.isEmpty()) {', '} else {', '}']
['apache camel camelcontext started in ', ['getversion', 'getname', 'timeutils', 'printduration', 'stopwatch', 'taken']]
camel sample_3947

['private void doStartCamel() throws Exception {', 'if (globalOptions != null && !globalOptions.isEmpty()) {', 'for (Map.Entry<String, String> entry : globalOptions.entrySet()) {', 'String key = entry.getKey();', 'String value = entry.getValue();', 'if (value != null) {', 'String replaced = resolvePropertyPlaceholders(value);', 'if (!value.equals(replaced)) {', 'if (log.isDebugEnabled()) {']
['camel property with key replaced value from ', ['new', 'object', 'key', 'value', 'replaced']]
camel sample_3947

['}', '}', '}', 'if (classResolver instanceof CamelContextAware) {', '((CamelContextAware) classResolver).setCamelContext(this);', '}', 'if (log.isDebugEnabled()) {', 'log.debug("Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}, RouteController={}", getClassResolver(), getPackageScanClassResolver(), getApplicationContextClassLoader(), getRouteController());', '}', 'if (isStreamCaching()) {']
['streamcaching is enabled on camelcontext ', ['getname']]
camel sample_3947

['}', 'if (classResolver instanceof CamelContextAware) {', '((CamelContextAware) classResolver).setCamelContext(this);', '}', 'if (log.isDebugEnabled()) {', 'log.debug("Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}, RouteController={}", getClassResolver(), getPackageScanClassResolver(), getApplicationContextClassLoader(), getRouteController());', '}', 'if (isStreamCaching()) {', '}', 'if (isTracing()) {']
['tracing is enabled on camelcontext ', ['getname']]
camel sample_3947

['((CamelContextAware) classResolver).setCamelContext(this);', '}', 'if (log.isDebugEnabled()) {', 'log.debug("Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}, RouteController={}", getClassResolver(), getPackageScanClassResolver(), getApplicationContextClassLoader(), getRouteController());', '}', 'if (isStreamCaching()) {', '}', 'if (isTracing()) {', '}', 'if (isUseMDCLogging()) {']
['mdc logging is enabled on camelcontext ', ['getname']]
camel sample_3947

['log.debug("Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}, RouteController={}", getClassResolver(), getPackageScanClassResolver(), getApplicationContextClassLoader(), getRouteController());', '}', 'if (isStreamCaching()) {', '}', 'if (isTracing()) {', '}', 'if (isUseMDCLogging()) {', '}', 'if (isHandleFault()) {', 'if (HandleFault.getHandleFault(this) == null) {']
['handlefault is enabled on camelcontext ', ['getname']]
camel sample_3947

['if (isTracing()) {', '}', 'if (isUseMDCLogging()) {', '}', 'if (isHandleFault()) {', 'if (HandleFault.getHandleFault(this) == null) {', 'addInterceptStrategy(new HandleFault());', '}', '}', 'if (getDelayer() != null && getDelayer() > 0) {']
['delayer is enabled with ms on camelcontext ', ['getdelayer', 'getname']]
camel sample_3947

['if (isUseMDCLogging()) {', '}', 'if (isHandleFault()) {', 'if (HandleFault.getHandleFault(this) == null) {', 'addInterceptStrategy(new HandleFault());', '}', '}', 'if (getDelayer() != null && getDelayer() > 0) {', '}', 'if (getDebugger() != null) {']
['debugger is enabled on camelcontext ', ['getdebugger', 'getname']]
camel sample_3947

['((CamelContextAware) managementStrategy).setCamelContext(this);', '}', 'ServiceHelper.startService(managementStrategy);', 'ServiceHelper.startServices(lifecycleStrategies);', 'Iterator<LifecycleStrategy> it = lifecycleStrategies.iterator();', 'while (it.hasNext()) {', 'LifecycleStrategy strategy = it.next();', 'try {', 'strategy.onContextStart(this);', '} catch (VetoCamelContextStartException e) {']
['lifecycle strategy vetoed starting camelcontext due ', ['getname', 'e', 'getmessage']]
camel sample_3947

['ServiceHelper.startService(managementStrategy);', 'ServiceHelper.startServices(lifecycleStrategies);', 'Iterator<LifecycleStrategy> it = lifecycleStrategies.iterator();', 'while (it.hasNext()) {', 'LifecycleStrategy strategy = it.next();', 'try {', 'strategy.onContextStart(this);', '} catch (VetoCamelContextStartException e) {', 'throw e;', '} catch (Exception e) {']
['lifecycle strategy failed starting camelcontext due ', ['strategy', 'getname', 'e', 'getmessage']]
camel sample_3947

['addService(producerServicePool, true, true);', 'addService(pollingConsumerServicePool, true, true);', 'addService(inflightRepository, true, true);', 'addService(asyncProcessorAwaitManager, true, true);', 'addService(shutdownStrategy, true, true);', 'addService(packageScanClassResolver, true, true);', 'addService(restRegistry, true, true);', 'addService(messageHistoryFactory, true, true);', 'addService(runtimeCamelCatalog, true, true);', 'if (reloadStrategy != null) {']
['using reloadstrategy ', ['reloadstrategy']]
camel sample_3947

['if (!streamCachingInUse) {', 'for (RouteDefinition route : routeDefinitions) {', 'Boolean routeCache = CamelContextHelper.parseBoolean(this, route.getStreamCache());', 'if (routeCache != null && routeCache) {', 'streamCachingInUse = true;', 'break;', '}', '}', '}', 'if (isUseDataType()) {']
['message datatype is enabled on camelcontext ', ['getname']]
camel sample_3947

['break;', '}', '}', '}', 'if (isUseDataType()) {', '}', 'if (streamCachingInUse) {', 'getStreamCachingStrategy().setEnabled(true);', 'addService(getStreamCachingStrategy(), true, true);', '} else {']
['streamcaching is not in use if using streams then its recommended to enable stream caching see more details at http ', []]
camel sample_3947

['}', '}', '}', 'if (isUseDataType()) {', '}', 'if (streamCachingInUse) {', 'getStreamCachingStrategy().setEnabled(true);', 'addService(getStreamCachingStrategy(), true, true);', '} else {', 'if (isAllowUseOriginalMessage()) {']
['allowuseoriginalmessage enabled because useoriginalmessage is in use ', []]
camel sample_3947

['}', 'if (streamCachingInUse) {', 'getStreamCachingStrategy().setEnabled(true);', 'addService(getStreamCachingStrategy(), true, true);', '} else {', 'if (isAllowUseOriginalMessage()) {', '}', 'if (headersMapFactory instanceof DefaultHeadersMapFactory) {', 'headersMapFactory = new HeadersMapFactoryResolver().resolve(this);', '}']
['using headersmapfactory ', ['headersmapfactory']]
camel sample_3947

['if (streamCachingInUse) {', 'getStreamCachingStrategy().setEnabled(true);', 'addService(getStreamCachingStrategy(), true, true);', '} else {', 'if (isAllowUseOriginalMessage()) {', '}', 'if (headersMapFactory instanceof DefaultHeadersMapFactory) {', 'headersMapFactory = new HeadersMapFactoryResolver().resolve(this);', '}', 'if (!headersMapFactory.isCaseInsensitive()) {']
['headersmapfactory is case sensitive which can cause problems for protocols such as http based which rely on case insensitive headers ', ['getheadersmapfactory']]
camel sample_3947

['protected synchronized void doStop() throws Exception {', 'stopWatch.restart();']
['apache camel camelcontext is shutting down ', ['getversion', 'getname']]
camel sample_3947

['protected synchronized void doStop() throws Exception {', 'stopWatch.restart();', 'EventHelper.notifyCamelContextStopping(this);', 'ServiceHelper.stopAndShutdownService(this.routeController);', 'try {', 'shutdownStrategy.shutdownForced(this, getRouteStartupOrder());', '} catch (Throwable e) {']
['error occurred while shutting down routes this exception will be ignored ', ['e']]
camel sample_3947

['endpoints.clear();', 'shutdownServices(components.values());', 'components.clear();', 'shutdownServices(languages.values());', 'languages.clear();', 'try {', 'for (LifecycleStrategy strategy : lifecycleStrategies) {', 'strategy.onContextStop(this);', '}', '} catch (Throwable e) {']
['error occurred while stopping lifecycle strategies this exception will be ignored ', ['e']]
camel sample_3947

['for (EventNotifier notifier : getManagementStrategy().getEventNotifiers()) {', 'shutdownServices(notifier);', '}', 'shutdownServices(executorServiceManager);', 'shutdownServices(managementStrategy);', 'shutdownServices(managementMBeanAssembler);', 'shutdownServices(lifecycleStrategies);', 'forceStopLazyInitialization();', 'IntrospectionSupport.stop();', 'if (log.isInfoEnabled()) {']
['apache camel camelcontext uptime ', ['getversion', 'getname', 'getuptime']]
camel sample_3947

['for (EventNotifier notifier : getManagementStrategy().getEventNotifiers()) {', 'shutdownServices(notifier);', '}', 'shutdownServices(executorServiceManager);', 'shutdownServices(managementStrategy);', 'shutdownServices(managementMBeanAssembler);', 'shutdownServices(lifecycleStrategies);', 'forceStopLazyInitialization();', 'IntrospectionSupport.stop();', 'if (log.isInfoEnabled()) {']
['apache camel camelcontext is shutdown in ', ['getversion', 'getname', 'timeutils', 'printduration', 'stopwatch', 'taken']]
camel sample_3947

['private void shutdownServices(Object service) {', 'try {', 'if (service instanceof Service) {', 'ServiceHelper.stopAndShutdownService(service);', '} else if (service instanceof Collection) {', 'ServiceHelper.stopAndShutdownServices((Collection<?>)service);', '}', '} catch (Throwable e) {']
['error occurred while shutting down service this exception will be ignored ', ['service', 'e']]
camel sample_3947

['}', 'Endpoint existing = existingRoute.getEndpoint();', 'ServiceStatus status = getRouteStatus(existingRoute.getId());', 'if (status != null && (status.isStarted() || status.isStarting())) {', 'existingEndpoints.add(existing);', '}', '}', 'if (!doCheckMultipleConsumerSupportClash(endpoint, existingEndpoints)) {', 'throw new FailedToStartRouteException(routeService.getId(), "Multiple consumers for the same endpoint is not allowed: " + endpoint);', '}']
['route ', ['route', 'getid', 'route']]
camel sample_3947

['Endpoint existing = existingRoute.getEndpoint();', 'ServiceStatus status = getRouteStatus(existingRoute.getId());', 'if (status != null && (status.isStarted() || status.isStarting())) {', 'existingEndpoints.add(existing);', '}', '}', 'if (!doCheckMultipleConsumerSupportClash(endpoint, existingEndpoints)) {', 'throw new FailedToStartRouteException(routeService.getId(), "Multiple consumers for the same endpoint is not allowed: " + endpoint);', '}', 'if (resumeOnly) {']
['resuming consumer order on route ', ['order', 'route', 'getid']]
camel sample_3947

['ServiceStatus status = getRouteStatus(existingRoute.getId());', 'if (status != null && (status.isStarted() || status.isStarting())) {', 'existingEndpoints.add(existing);', '}', '}', 'if (!doCheckMultipleConsumerSupportClash(endpoint, existingEndpoints)) {', 'throw new FailedToStartRouteException(routeService.getId(), "Multiple consumers for the same endpoint is not allowed: " + endpoint);', '}', 'if (resumeOnly) {', '} else {']
['starting consumer order on route ', ['order', 'route', 'getid']]
camel sample_3947

['}', '}', 'if (!doCheckMultipleConsumerSupportClash(endpoint, existingEndpoints)) {', 'throw new FailedToStartRouteException(routeService.getId(), "Multiple consumers for the same endpoint is not allowed: " + endpoint);', '}', 'if (resumeOnly) {', '} else {', '}', 'if (resumeOnly && route.supportsSuspension()) {', 'ServiceHelper.resumeService(consumer);']
['route resumed and consuming from ', ['route', 'getid', 'endpoint']]
camel sample_3947

['for (LifecycleStrategy strategy : lifecycleStrategies) {', 'strategy.onServiceAdd(this, consumer, route);', '}', 'try {', 'startService(consumer);', 'route.getProperties().remove("route.start.exception");', '} catch (Exception e) {', 'route.getProperties().put("route.start.exception", e);', 'throw e;', '}']
['route started and consuming from ', ['route', 'getid', 'endpoint']]
camel sample_3947

['protected Registry createRegistry() {', 'JndiRegistry jndi = new JndiRegistry();', 'try {', 'jndi.getContext();', 'return jndi;', '} catch (Throwable e) {']
['cannot create javax naming initialcontext due will fallback and use simpleregistry instead this exception is ignored ', ['e', 'getmessage', 'e']]
camel sample_3947

['context.addService(createClusterService(id, address));', 'context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:atomix?delay=1s&period=1s") .routeId("route-" + id) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down client node ', ['id']]
camel sample_10293

['public Exchange createExchange(Object feed, Object entry) {', 'Exchange exchange = createExchangeWithFeedHeader(feed, RssConstants.RSS_FEED);', 'SyndFeed newFeed;', 'try {', 'newFeed = (SyndFeed)((SyndFeed) feed).clone();', 'newFeed.setEntries(Arrays.asList(entry));', '} catch (CloneNotSupportedException e) {']
['could not create a new feed this exception will be ignored ', ['e']]
camel sample_12304

['if (absolute) {', 'base = new File("");', '} else {', 'base = new File(".");', '}', 'for (String part : parts) {', 'File subDir = new File(base, part);', 'if (!subDir.exists()) {', 'if (subDir.mkdir()) {', 'if (LOG.isTraceEnabled()) {']
['setting chmod on directory ', ['posixfilepermissions', 'tostring', 'permissions', 'subdir']]
camel sample_4781

['public boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {', 'ObjectHelper.notNull(endpoint, "endpoint");', 'if (endpoint.isAutoCreate() && !endpoint.getFile().exists()) {']
['building starting directory ', ['endpoint', 'getfile']]
camel sample_4781

['if (ObjectHelper.isNotEmpty(afterRoot)) {', 'path = new File(endpoint.getFile(), afterRoot);', '} else {', 'path = new File(endpoint.getFile(), directory);', '}', '}', 'synchronized (this) {', 'if (path.isDirectory() && path.exists()) {', 'return true;', '} else {']
['building directory ', ['path']]
camel sample_4781

['public boolean storeFile(String fileName, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'ObjectHelper.notNull(endpoint, "endpoint");', 'File file = new File(fileName);', 'if (file.exists()) {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore) {']
['an existing file already exists ignore and do not override it ', ['file']]
camel sample_4781

['if (endpoint.getFileExist() == GenericFileExist.Ignore) {', 'return true;', '} else if (endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + file + ". Cannot write new file.");', '} else if (endpoint.getFileExist() == GenericFileExist.Move) {', 'doMoveExistingFile(fileName);', '}', '}', 'if (exchange.getIn().getBody() == null) {', 'if (endpoint.isAllowNullBody()) {']
['writing empty file ', []]
camel sample_4781

['if (fileBased) {', 'File local = exchange.getIn().getHeader(Exchange.FILE_LOCAL_WORK_PATH, File.class);', 'if (local != null && local.exists()) {', 'boolean renamed = writeFileByLocalWorkPath(local, file);', 'if (renamed) {', 'keepLastModified(exchange, file);', 'if (ObjectHelper.isNotEmpty(endpoint.getChmod())) {', 'Set<PosixFilePermission> permissions = endpoint.getPermissions();', 'if (!permissions.isEmpty()) {', 'if (LOG.isTraceEnabled()) {']
['setting chmod on file ', ['posixfilepermissions', 'tostring', 'permissions', 'file']]
camel sample_4781

['exchange.getIn().setHeader(Exchange.FILE_LOCAL_WORK_PATH, null);', 'return true;', '}', '} else if (source != null && source.exists()) {', 'writeFileByFile(source, file);', 'keepLastModified(exchange, file);', 'if (ObjectHelper.isNotEmpty(endpoint.getChmod())) {', 'Set<PosixFilePermission> permissions = endpoint.getPermissions();', 'if (!permissions.isEmpty()) {', 'if (LOG.isTraceEnabled()) {']
['setting chmod on file ', ['posixfilepermissions', 'tostring', 'permissions', 'file']]
camel sample_4781

['writeFileByReaderWithCharset(in, file, charset);', '} else {', 'InputStream in = exchange.getIn().getMandatoryBody(InputStream.class);', 'writeFileByStream(in, file);', '}', 'keepLastModified(exchange, file);', 'if (ObjectHelper.isNotEmpty(endpoint.getChmod())) {', 'Set<PosixFilePermission> permissions = endpoint.getPermissions();', 'if (!permissions.isEmpty()) {', 'if (LOG.isTraceEnabled()) {']
['setting chmod on file ', ['posixfilepermissions', 'tostring', 'permissions', 'file']]
camel sample_4781

['String to = endpoint.getMoveExisting().evaluate(dummy, String.class);', 'to = FileUtil.normalizePath(to);', 'if (ObjectHelper.isEmpty(to)) {', 'throw new GenericFileOperationFailedException("moveExisting evaluated as empty String, cannot move existing file: " + fileName);', '}', 'File toFile = new File(to);', 'String directory = toFile.getParent();', 'boolean absolute = FileUtil.isAbsolute(toFile);', 'if (directory != null) {', 'if (!buildDirectory(directory, absolute)) {']
['cannot build directory could be because of denied permissions ', ['directory']]
camel sample_4781

['}', 'File toFile = new File(to);', 'String directory = toFile.getParent();', 'boolean absolute = FileUtil.isAbsolute(toFile);', 'if (directory != null) {', 'if (!buildDirectory(directory, absolute)) {', '}', '}', 'if (existsFile(to)) {', 'if (endpoint.isEagerDeleteTargetFile()) {']
['deleting existing file ', ['to']]
camel sample_4781

['}', 'if (existsFile(to)) {', 'if (endpoint.isEagerDeleteTargetFile()) {', 'if (!deleteFile(to)) {', 'throw new GenericFileOperationFailedException("Cannot delete file: " + to);', '}', '} else {', 'throw new GenericFileOperationFailedException("Cannot moved existing file from: " + fileName + " to: " + to + " as there already exists a file: " + to);', '}', '}']
['moving existing file to ', ['filename', 'to']]
camel sample_4781

['Long last;', 'Date date = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Date.class);', 'if (date != null) {', 'last = date.getTime();', '} else {', 'last = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class);', '}', 'if (last != null) {', 'boolean result = file.setLastModified(last);', 'if (LOG.isTraceEnabled()) {']
['keeping last modified timestamp on file with result ', ['new', 'object', 'last', 'file', 'result']]
camel sample_4781

['private boolean writeFileByLocalWorkPath(File source, File file) throws IOException {']
['using local work file being renamed from to ', ['source', 'file']]
camel sample_4781

['private void writeFileByStream(InputStream in, File target) throws IOException {', 'try (SeekableByteChannel out = prepareOutputFileChannel(target)) {']
['using inputstream to write file ', ['target']]
camel sample_4781

['private void writeFileByReaderWithCharset(Reader in, File target, String charset) throws IOException {', 'boolean append = endpoint.getFileExist() == GenericFileExist.Append;', 'try (Writer out = Files.newBufferedWriter(target.toPath(), Charset.forName(charset), StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE)) {']
['using reader to write file with charset ', ['target', 'charset']]
camel sample_4781

['private void writeFileEmptyBody(File target) throws IOException {', 'if (!target.exists()) {']
['creating new empty file ', ['target']]
camel sample_4781

['private void writeFileEmptyBody(File target) throws IOException {', 'if (!target.exists()) {', 'FileUtil.createNewFile(target);', '} else if (endpoint.getFileExist() == GenericFileExist.Override) {']
['truncating existing file ', ['target']]
camel sample_4781

['return;', '}', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("netty:tcp: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'SSLSession session = exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION, SSLSession.class);', 'if (session != null) {', 'javax.security.cert.X509Certificate cert = session.getPeerCertificateChain()[0];', 'Principal principal = cert.getSubjectDN();']
['client cert subjectdn ', ['principal', 'getname']]
camel sample_6616

['} else {', 'int avail = input.available();', 'if (avail > bufferSize) {', 'bufferSize = avail;', '}', '}', 'if (bufferSize > 262144) {', 'bufferSize = 262144;', '}', 'if (LOG.isTraceEnabled()) {']
['copying inputstream outputstream with buffer and flush on each write ', ['new', 'object', 'input', 'output', 'buffersize', 'flushoneachwrite']]
camel sample_4294

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FlinkComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.flink.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.flink.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1096

['public void testAddAssignmentToTask() throws Exception {', 'com.box.sdk.BoxTask result = null;', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.taskId", testTask.getID());', 'headers.put("CamelBox.assignTo", getCurrentUser());', 'result = requestBodyAndHeaders("direct: assertNotNull("addAssignmentToTask result", result);']
['addassignmenttotask ', ['result']]
camel sample_17413

['com.box.sdk.BoxTask result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.fileId", testFile.getID());', 'headers.put("CamelBox.action", BoxTask.Action.REVIEW);', 'Date now = new Date();', 'Date dueAt = new Date(now.getTime() + TEN_MINUTES_IN_MILLIS);', 'headers.put("CamelBox.dueAt", dueAt);', 'headers.put("CamelBox.message", CAMEL_TEST_MESSAGE);', 'result = requestBodyAndHeaders("direct: assertNotNull("addFileTask result", result);']
['addfiletask ', ['result']]
camel sample_17413

['public void testGetFileTasks() throws Exception {', 'final java.util.List result = requestBody("direct: assertNotNull("getFileTasks result", result);']
['getfiletasks ', ['result']]
camel sample_17413

['public void testGetTaskAssignmentInfo() throws Exception {', 'BoxTaskAssignment.Info info = testTask.addAssignment(getCurrentUser());', 'com.box.sdk.BoxTaskAssignment.Info result = null;', 'try {', 'result = requestBody("direct: assertNotNull("getTaskAssignmentInfo result", result);']
['gettaskassignmentinfo ', ['result']]
camel sample_17413

['public void testGetTaskAssignments() throws Exception {', 'final java.util.List result = requestBody("direct: assertNotNull("getTaskAssignments result", result);']
['gettaskassignments ', ['result']]
camel sample_17413

['public void testGetTaskInfo() throws Exception {', 'final com.box.sdk.BoxTask.Info result = requestBody("direct: assertNotNull("getTaskInfo result", result);']
['gettaskinfo ', ['result']]
camel sample_17413

['public void testUpdateTaskInfo() throws Exception {', 'BoxTask.Info info = testTask.getInfo();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.taskId", testTask.getID());', 'headers.put("CamelBox.info", info);', 'final com.box.sdk.BoxTask result = requestBodyAndHeaders("direct: assertNotNull("updateTaskInfo result", result);']
['updatetaskinfo ', ['result']]
camel sample_17413

['public static void setupTestServer() throws Exception {', 'port = AvailablePortFinder.getNextAvailable(39913);']
['starting zookeeper test infrastructure ', []]
camel sample_12611

['public static void setupTestServer() throws Exception {', 'port = AvailablePortFinder.getNextAvailable(39913);', 'server = new TestZookeeperServer(getServerPort(), clearServerData());', 'waitForServerUp("localhost:" + getServerPort(), 1000);', 'client = new TestZookeeperClient(getServerPort(), getTestClientSessionTimeout());']
['started zookeeper test infrastructure on port ', ['getserverport']]
camel sample_12611

['public static void shutdownServer() throws Exception {']
['stopping zookeeper test infrastructure ', []]
camel sample_12611

['public static void shutdownServer() throws Exception {', 'client.shutdown();', 'server.shutdown();', 'waitForServerDown("localhost:" + getServerPort(), 1000);']
['stopped zookeeper test infrastructure ', []]
camel sample_12611

['public void create(String node, String data) throws Exception {']
['creating node s with data s ', ['string', 'format', 'node', 'data']]
camel sample_12611

['public void createPersistent(String node, String data) throws Exception {']
['creating node s with data s ', ['string', 'format', 'node', 'data']]
camel sample_12611

['public void create(String znode, String data, List<ACL> access, CreateMode mode) throws Exception {', 'delay(200);', 'String created = zk.create(znode, data != null ? data.getBytes() : null, access, mode);', 'if (log.isInfoEnabled()) {']
['created znode named s ', ['string', 'format', 'created']]
camel sample_12611

['public Stat setData(String node, String data, int version) throws Exception {']
['testclient updating data of node s to s ', ['string', 'format', 'node', 'data']]
camel sample_12611

['public void process(WatchedEvent event) {', 'if (event.getState() == KeeperState.SyncConnected) {']
['testclient connected ', []]
camel sample_12611

['public void process(WatchedEvent event) {', 'if (event.getState() == KeeperState.SyncConnected) {', 'connected.countDown();', '} else {', 'if (event.getState() == KeeperState.Disconnected) {']
['testclient connected ', ['zk', 'getstate']]
camel sample_12611

['public void deleteAll(String node) throws Exception {', 'delay(200);']
['deleting and it s immediate children ', ['node']]
camel sample_12611

['public void delete(String node) throws Exception {', 'delay(200);']
['deleting node ', ['node']]
camel sample_12611

['public static boolean waitForServerUp(String hp, long timeout) {', 'long start = System.currentTimeMillis();', 'while (true) {', 'try {', 'hp = hp.split(",")[0];', 'String result = send4LetterWord(hp, "stat");', 'if (result.startsWith("Zookeeper version:")) {', 'return true;', '}', '} catch (IOException e) {']
['server not up ', ['hp', 'e']]
camel sample_12611

['}', '} else {', 'try {', 'EtcdKeysResponse response = promise.get();', 'exchange = endpoint.createExchange();', 'exchange.getIn().setHeader(EtcdConstants.ETCD_NAMESPACE, getNamespace());', 'exchange.getIn().setHeader(EtcdConstants.ETCD_PATH, response.node.key);', 'exchange.getIn().setBody(response);', 'index.set(response.node.modifiedIndex + 1);', '} catch (TimeoutException e) {']
['timeout watching for ', ['getpath']]
camel sample_12241

['public Producer createProducer() throws Exception {', 'if (ObjectHelper.isEmpty(host)) {', 'throw new IllegalArgumentException("Hostname must be configured on either restConfiguration" + " or in the rest endpoint uri as a query parameter with name host, eg rest:" + method + ":" + path + "?host=someserver");', '}', 'RestProducerFactory apiDocFactory = null;', 'RestProducerFactory factory = null;', 'if (apiDoc != null) {']
['discovering camel swagger java on classpath for using api doc ', ['apidoc']]
camel sample_4943

['if (comp instanceof RestProducerFactory) {', 'if (found == null) {', 'found = (RestProducerFactory) comp;', 'foundName = name;', '} else {', 'throw new IllegalArgumentException("Multiple RestProducerFactory found on classpath. Configure explicit which component to use");', '}', '}', '}', 'if (found != null) {']
['auto discovered as restproducerfactory ', ['foundname']]
camel sample_4943

['} else {', 'throw new IllegalArgumentException("Multiple RestProducerFactory found on classpath. Configure explicit which component to use");', '}', '}', '}', 'if (found != null) {', 'factory = found;', '}', '}', 'if (factory != null) {']
['using restproducerfactory ', ['factory']]
camel sample_4943

['if (comp instanceof RestConsumerFactory) {', 'if (found == null) {', 'found = (RestConsumerFactory) comp;', 'foundName = name;', '} else {', 'throw new IllegalArgumentException("Multiple RestConsumerFactory found on classpath. Configure explicit which component to use");', '}', '}', '}', 'if (found != null) {']
['auto discovered as restconsumerfactory ', ['foundname']]
camel sample_4943

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Comment comment = (Comment) in.getBody();']
['got comment with id body ', ['comment', 'getid', 'comment', 'getbody']]
camel sample_12996

['if (object == null) {', 'return null;', '}', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'ObjectOutputStream oos = null;', 'try {', 'oos = new ObjectOutputStream(baos);', 'oos.writeObject(object);', 'result = baos.toByteArray();', '} catch (IOException e) {']
['error while serializing object null will be used ', ['e']]
camel sample_14004

['public Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {', 'try {', 'return classLoader.loadClass(desc.getName());', '} catch (Exception e) {', '}', 'return super.resolveClass(desc);', '}', '};', 'result = (T) ois.readObject();', '} catch (IOException e) {']
['error while deserializing object null will be used ', ['e']]
camel sample_14004

['try {', 'return classLoader.loadClass(desc.getName());', '} catch (Exception e) {', '}', 'return super.resolveClass(desc);', '}', '};', 'result = (T) ois.readObject();', '} catch (IOException e) {', '} catch (ClassNotFoundException e) {']
['could not find class while deserializing object null will be used ', ['e']]
camel sample_14004

['host = "127.0.0.1";', '}', 'if (port == -1) {', 'if (getType() == SnmpActionType.POLL) {', 'port = 161;', '} else {', 'port = 162;', '}', '}', 'String address = String.format("%s:%s/%d", getProtocol(), host, port);']
['using snmp address ', ['address']]
camel sample_8825

['public Product getProduct(@PathParam("productId")int productId) {']
['invoking getproduct with id ', ['productid']]
camel sample_6092

['public void initChannel(ProcessorDefinition<?> outputDefinition, RouteContext routeContext) throws Exception {', 'this.routeContext = routeContext;', 'this.definition = outputDefinition;', 'this.camelContext = routeContext.getCamelContext();', 'Processor target = nextProcessor;', 'Processor next;', 'if (target instanceof CamelContextAware) {', '((CamelContextAware) target).setCamelContext(camelContext);', '}', 'ProcessorDefinition<?> targetOutputDef = childDefinition != null ? childDefinition : outputDefinition;']
['initialize channel for target ', ['targetoutputdef']]
camel sample_4555

['for (InterceptStrategy strategy : interceptors) {', 'next = target == nextProcessor ? null : nextProcessor;', 'if (strategy instanceof Tracer) {', 'continue;', '}', 'if (strategy instanceof StreamCaching) {', 'continue;', '}', 'Processor wrapped = strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(), targetOutputDef, target, next);', 'if (!(wrapped instanceof AsyncProcessor)) {']
['interceptor at does not return an asyncprocessor instance this causes the asynchronous routing engine to not work as optimal as possible see more details at the interceptstrategy javadoc camel will use a bridge to adapt the interceptor to the asynchronous routing engine but its not the most optimal solution please consider changing your interceptor to comply ', ['strategy', 'outputdefinition']]
camel sample_4555

['public void testSerialize() throws Exception {', 'Method method = getClass().getMethod("cheese", String.class, String.class);', 'BeanInvocation invocation = new BeanInvocation(method, new Object[] {"a", "b"});', 'ByteArrayOutputStream buffer = new ByteArrayOutputStream();', 'ObjectOutputStream out = new ObjectOutputStream(buffer);', 'out.writeObject(invocation);', 'out.close();', 'ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));', 'Object object = in.readObject();', 'BeanInvocation actual = assertIsInstanceOf(BeanInvocation.class, object);']
['received ', ['actual']]
camel sample_3290

['BeanInvocation invocation = new BeanInvocation();', 'invocation.setArgs(new Object[] {"a", "b"});', 'invocation.setMethod(method);', 'ByteArrayOutputStream buffer = new ByteArrayOutputStream();', 'ObjectOutputStream out = new ObjectOutputStream(buffer);', 'out.writeObject(invocation);', 'out.close();', 'ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));', 'Object object = in.readObject();', 'BeanInvocation actual = assertIsInstanceOf(BeanInvocation.class, object);']
['received ', ['actual']]
camel sample_3290

['public void cheese(String a, String b) {']
['called with a b ', ['a', 'b']]
camel sample_3290

['public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {', 'if (!super.acquireExclusiveReadLock(operations, file, exchange)) {', 'return false;', '}', 'File target = new File(file.getAbsoluteFilePath());']
['waiting for exclusive read lock to file ', ['target']]
camel sample_4806

['if (delta > timeout) {', 'CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + target);', 'return false;', '}', '}', 'try {', 'lock = timeout > 0 ? channel.tryLock() : channel.lock();', '} catch (IllegalStateException ex) {', '}', 'if (lock != null) {']
['acquired exclusive read lock to file ', ['lock', 'target']]
camel sample_4806

['boolean interrupted = sleep();', 'if (interrupted) {', 'return false;', '}', '}', '}', '} catch (IOException e) {', 'if (timeout == 0) {', 'return false;', '}']
['cannot acquire read lock will try again ', ['e']]
camel sample_4806

['private boolean sleep() {']
['exclusive read lock not granted sleeping for millis ', ['checkinterval']]
camel sample_4806

['private boolean sleep() {', 'try {', 'Thread.sleep(checkInterval);', 'return false;', '} catch (InterruptedException e) {']
['sleep interrupted while waiting for exclusive read lock so breaking out ', []]
camel sample_4806

['TwitterFindComponent connector = new TwitterFindComponent();', 'connector.setCamelContext(camelContext);', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<TwitterFindComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-find.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-find.customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_40

['TwitterFindComponent connector = new TwitterFindComponent( entry.getKey());', 'connector.setCamelContext(camelContext);', 'try {', 'IntrospectionSupport.getProperties(entry.getValue(), parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<TwitterFindComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-find." + entry.getKey() + ".customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.twitter-find." + entry.getKey() + ".customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_40

['private synchronized MiloClientEndpoint createEndpoint(final String uri, final MiloClientConfiguration configuration, final Map<String, Object> parameters) throws Exception {', 'MiloClientConnection connection = this.cache.get(configuration.toCacheId());', 'if (connection == null) {']
['cache miss creating new connection instance ', ['configuration', 'tocacheid']]
camel sample_17278

['public synchronized void disposed(final MiloClientEndpoint endpoint) {', 'final MiloClientConnection connection = endpoint.getConnection();', 'this.connectionMap.remove(connection.getConnectionId(), endpoint);', 'if (!this.connectionMap.containsKey(connection.getConnectionId())) {', 'this.cache.remove(connection.getConnectionId());', 'try {', 'connection.close();', '} catch (final Exception e) {']
['failed to close connection ', ['e']]
camel sample_17278

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KafkaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kafka.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kafka.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_630

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ChronicleEngineComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.chronicle-engine.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.chronicle-engine.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1184

['public void run() {']
['received hang up stopping the main instance ', []]
camel sample_5597

['public void run() {', 'try {', 'mainInstance.stop();', '} catch (Exception ex) {']
['error during stopping the main instance ', ['ex']]
camel sample_5597

['beforeStart();', 'start();', 'try {', 'afterStart();', 'waitUntilCompleted();', 'internalBeforeStop();', 'beforeStop();', 'stop();', 'afterStop();', '} catch (Exception e) {']
['failed ', ['e', 'e']]
camel sample_5597

['private void internalBeforeStop() {', 'try {', 'if (camelTemplate != null) {', 'ServiceHelper.stopService(camelTemplate);', 'camelTemplate = null;', '}', '} catch (Exception e) {']
['error stopping cameltemplate due this exception is ignored ', ['e', 'getmessage', 'e']]
camel sample_5597

['protected void waitUntilCompleted() {', 'while (!completed.get()) {', 'try {', 'if (duration > 0) {', 'TimeUnit unit = getTimeUnit();']
['waiting for ', ['duration', 'unit']]
camel sample_5597

['protected void waitUntilCompleted() {', 'while (!completed.get()) {', 'try {', 'if (duration > 0) {', 'TimeUnit unit = getTimeUnit();', 'latch.await(duration, unit);', 'exitCode.compareAndSet(UNINITIALIZED_EXIT_CODE, durationHitExitCode);', 'completed.set(true);', '} else if (durationIdle > 0) {', 'TimeUnit unit = getTimeUnit();']
['waiting to be idle for ', ['duration', 'unit']]
camel sample_5597

['TimeUnit unit = getTimeUnit();', 'latch.await(duration, unit);', 'exitCode.compareAndSet(UNINITIALIZED_EXIT_CODE, durationHitExitCode);', 'completed.set(true);', '} else if (durationIdle > 0) {', 'TimeUnit unit = getTimeUnit();', 'exitCode.compareAndSet(UNINITIALIZED_EXIT_CODE, durationHitExitCode);', 'latch.await();', 'completed.set(true);', '} else if (durationMaxMessages > 0) {']
['waiting until messages has been processed ', ['durationmaxmessages']]
camel sample_5597

['public void run(String[] args) throws Exception {', 'parseArguments(args);', 'run();']
['mainsupport exiting code ', ['getexitcode']]
camel sample_5597

['}', 'if (fileWatchDirectory != null) {', 'ReloadStrategy reload = new FileWatcherReloadStrategy(fileWatchDirectory, fileWatchDirectoryRecursively);', 'camelContext.setReloadStrategy(reload);', 'camelContext.addService(reload);', 'Object managedObject = camelContext.getManagementStrategy().getManagementObjectStrategy().getManagedObjectForService(camelContext, reload);', 'if (managedObject == null) {', 'return;', '}', 'if (camelContext.getManagementStrategy().isManaged(managedObject, null)) {']
['the service is already managed ', ['reload']]
camel sample_5597

['Object managedObject = camelContext.getManagementStrategy().getManagementObjectStrategy().getManagedObjectForService(camelContext, reload);', 'if (managedObject == null) {', 'return;', '}', 'if (camelContext.getManagementStrategy().isManaged(managedObject, null)) {', 'return;', '}', 'try {', 'camelContext.getManagementStrategy().manageObject(managedObject);', '} catch (Exception e) {']
['could not register service as service mbean ', ['reload', 'e']]
camel sample_5597

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .to("activemq:topic:news?replyToType=Exclusive&replyTo=queue:back") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);']
['replyto ', ['replyto']]
camel sample_7115

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .to("activemq:topic:news?replyToType=Exclusive&replyTo=queue:back") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);']
['correlationid ', ['cid']]
camel sample_7115

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .to("activemq:topic:news?replyToType=Exclusive&replyTo=queue:back") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);', 'if (replyTo != null && cid != null) {', 'Thread.sleep(1000);']
['sending back reply message on ', ['replyto']]
camel sample_7115

['private ExecEndpoint createExecEndpoint(String uri) throws Exception {']
['using exec endpoint uri ', ['uri']]
camel sample_12216

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_13954

['public void remove(CamelContext camelContext, String key, Exchange exchange) {']
['removing an exchange with id for key ', ['exchange', 'getexchangeid', 'key']]
camel sample_13954

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_13954

['public Set<String> scan(CamelContext camelContext) {']
['scanning for exchanges to recover in context ', ['camelcontext', 'getname']]
camel sample_13954

['public Set<String> scan(CamelContext camelContext) {', 'Set<String> scanned = Collections.unmodifiableSet(cache.keySet());']
['found keys for exchanges to recover in context ', ['scanned', 'size', 'camelcontext', 'getname']]
camel sample_13954

['public Exchange recover(CamelContext camelContext, String exchangeId) {']
['recovering an exchange with id ', ['exchangeid']]
camel sample_13954

['assertMockEndpointsSatisfied();', 'assertEquals(1, events.size());', 'ExchangeCompletedEvent event = (ExchangeCompletedEvent) events.get(0);', 'assertNotNull(event.getExchange());', 'assertNotNull(event.getExchange().getFromEndpoint());', 'assertEquals("direct: Date created = event.getExchange().getCreated();', 'assertNotNull(created);', 'Date now = new Date();', 'long elapsed = now.getTime() - created.getTime();', 'assertTrue("Should be > 400, was: " + elapsed, elapsed > 400);']
['elapsed time in millis ', ['elapsed']]
camel sample_2747

['public AbstractGitHubConsumer(GitHubEndpoint endpoint, Processor processor) throws Exception {', 'super(endpoint, processor);', 'this.endpoint = endpoint;', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_REPOSITORY_SERVICE);', 'if (service != null) {']
['using repositoryservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14268

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start").to("restlet:http: from("restlet:http: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String authorization = exchange.getIn().getHeader("Authorization", String.class);']
['authorization header ', ['authorization']]
camel sample_9234

['private void analyzeServiceInterface(Class<?> serviceInterface) {', 'Method[] methods = serviceInterface.getMethods();', 'for (Method method : methods) {', 'MethodInfo info = analyzeMethod(method);', 'for (int i = 0; i < info.getIn().length; i++) {', 'TypeInfo ti = info.getIn()[i];', 'if (inTypeNameToQName.containsKey(ti.getTypeName())) {', 'if (ti.getTypeName() != null) {', 'if (!(ti.getTypeName().equals("javax.xml.ws.Holder")) && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {']
['ambiguous qname mapping the type is already mapped to a qname in this context ', ['ti', 'gettypename']]
camel sample_9664

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FlatpackComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.flatpack.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.flatpack.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_763

['protected void doStart() throws Exception {']
['starting consumer for ', ['endpoint', 'getendpointuri']]
camel sample_8075

['protected void doStop() throws Exception {']
['stopping consumer for ', ['endpoint', 'getendpointuri']]
camel sample_8075

['public void prepareShutdown(boolean suspendOnly, boolean forced) {', 'shutdownPending = true;', 'if (log.isDebugEnabled()) {']
['preparing to shutdown waiting for threads to complete ', ['shutdownlatch', 'getcount']]
camel sample_8075

['public void run() {']
['kestrel poller is running ', []]
camel sample_8075

['} else {', 'target = endpoint.getQueue();', '}', 'Exchanger exchanger = null;', 'while (isRunAllowed() && !shutdownPending) {', 'if (concurrent) {', 'try {', 'exchanger = exchangerQueue.take();', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {']
['interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_8075

['try {', 'exchanger = exchangerQueue.take();', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {', '}', 'continue;', '}', '}', 'Object value = null;', 'while (isRunAllowed() && !shutdownPending) {']
['polling ', ['target']]
camel sample_8075

['if (isRunAllowed() && !shutdownPending) {', 'if (endpoint.getConfiguration().getWaitTimeMs() > 0) {', '} else {', 'try {', 'Thread.sleep(100);', '} catch (InterruptedException ignored) {', '}', '}', '}', '}']
['got object from ', ['target']]
camel sample_8075

['} catch (InterruptedException ignored) {', '}', '}', '}', '}', 'if (concurrent) {', 'try {', 'exchanger.exchange(value);', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {']
['interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_8075

['getExceptionHandler().handleException("Error processing exchange", exchange, e);', '} else {', 'getExceptionHandler().handleException(e);', '}', '}', '} finally {', 'pendingExchangeCount.decrementAndGet();', '}', '}', '}']
['finished polling ', ['target']]
camel sample_8075

['public void run() {', 'if (log.isTraceEnabled()) {']
['is starting ', ['thread', 'currentthread', 'getname']]
camel sample_8075

['public void run() {', 'if (log.isTraceEnabled()) {', '}', 'while (isRunAllowed() && !shutdownPending) {', 'try {', 'exchangerQueue.put(exchanger);', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {']
['interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_8075

['}', 'continue;', '}', 'pendingExchangeCount.incrementAndGet();', 'try {', 'Object value;', 'try {', 'value = exchanger.exchange(this);', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {']
['interrupted are we stopping ', ['isstopping', 'isstopped']]
camel sample_8075

['pendingExchangeCount.incrementAndGet();', 'try {', 'Object value;', 'try {', 'value = exchanger.exchange(this);', '} catch (InterruptedException e) {', 'if (log.isDebugEnabled()) {', '}', 'continue;', '}']
['got a value from the exchanger ', []]
camel sample_8075

['} else {', 'getExceptionHandler().handleException(e);', '}', '}', '} finally {', 'pendingExchangeCount.decrementAndGet();', '}', '}', 'shutdownLatch.countDown();', 'if (log.isTraceEnabled()) {']
['is finished ', ['thread', 'currentthread', 'getname']]
camel sample_8075

['private void handleValueUpdate(final DataValue value) {', 'final Exchange exchange = getEndpoint().createExchange();', 'exchange.setIn(mapMessage(value));', 'try {', 'getAsyncProcessor().process(exchange);', '} catch (final Exception e) {']
['failed to process message ', ['e']]
camel sample_17281

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NettyHttpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty-http.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.netty-http.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_626

['public static void writeBody(IoSession session, Object body, Exchange exchange) throws CamelExchangeException {', 'WriteFuture future = session.write(body);']
['waiting for write to complete for body using session ', ['body', 'session']]
camel sample_7695

['if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {', 'if ("subject".equalsIgnoreCase(name)) {', 'String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value);', 'message.setSubject(subject);', '} else if ("language".equalsIgnoreCase(name)) {', 'String language = exchange.getContext().getTypeConverter().convertTo(String.class, value);', 'message.setLanguage(language);', '} else {', 'try {', 'JivePropertiesManager.addProperty(message, name, value);']
['added property name value ', ['name', 'value']]
camel sample_12596

['String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value);', 'message.setSubject(subject);', '} else if ("language".equalsIgnoreCase(name)) {', 'String language = exchange.getContext().getTypeConverter().convertTo(String.class, value);', 'message.setLanguage(language);', '} else {', 'try {', 'JivePropertiesManager.addProperty(message, name, value);', '} catch (IllegalArgumentException iae) {', 'if (LOG.isDebugEnabled()) {']
['cannot add property to xmpp message due ', ['name', 'iae']]
camel sample_12596

['public void populateXmppStanza(Stanza stanza, Exchange exchange) {', 'Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet();', 'for (Map.Entry<String, Object> entry : entries) {', 'String name = entry.getKey();', 'Object value = entry.getValue();', 'if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {', 'try {', 'JivePropertiesManager.addProperty(stanza, name, value);']
['added property name value ', ['name', 'value']]
camel sample_12596

['public void populateXmppStanza(Stanza stanza, Exchange exchange) {', 'Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet();', 'for (Map.Entry<String, Object> entry : entries) {', 'String name = entry.getKey();', 'Object value = entry.getValue();', 'if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {', 'try {', 'JivePropertiesManager.addProperty(stanza, name, value);', '} catch (IllegalArgumentException iae) {']
['not adding property to xmpp message due to ', ['name', 'iae']]
camel sample_12596

['PollingConsumer consumer;', 'Endpoint endpoint;', 'Object recipient = null;', 'try {', 'recipient = expression.evaluate(exchange, Object.class);', 'endpoint = resolveEndpoint(exchange, recipient);', 'consumer = consumerCache.acquirePollingConsumer(endpoint);', '} catch (Throwable e) {', 'if (isIgnoreInvalidEndpoint()) {', 'if (LOG.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['recipient', 'e']]
camel sample_4543

['boolean bridgeErrorHandler = false;', 'if (delegate instanceof DefaultConsumer) {', 'ExceptionHandler handler = ((DefaultConsumer) delegate).getExceptionHandler();', 'if (handler instanceof BridgeExceptionHandlerToErrorHandler) {', 'bridgeErrorHandler = true;', '}', '}', 'Exchange resourceExchange;', 'try {', 'if (timeout < 0) {']
['consumer receive ', ['consumer']]
camel sample_4543

['ExceptionHandler handler = ((DefaultConsumer) delegate).getExceptionHandler();', 'if (handler instanceof BridgeExceptionHandlerToErrorHandler) {', 'bridgeErrorHandler = true;', '}', '}', 'Exchange resourceExchange;', 'try {', 'if (timeout < 0) {', 'resourceExchange = consumer.receive();', '} else if (timeout == 0) {']
['consumer receivenowait ', ['consumer']]
camel sample_4543

['bridgeErrorHandler = true;', '}', '}', 'Exchange resourceExchange;', 'try {', 'if (timeout < 0) {', 'resourceExchange = consumer.receive();', '} else if (timeout == 0) {', 'resourceExchange = consumer.receiveNoWait();', '} else {']
['consumer receive with timeout ms ', ['timeout', 'consumer']]
camel sample_4543

['Exchange resourceExchange;', 'try {', 'if (timeout < 0) {', 'resourceExchange = consumer.receive();', '} else if (timeout == 0) {', 'resourceExchange = consumer.receiveNoWait();', '} else {', 'resourceExchange = consumer.receive(timeout);', '}', 'if (resourceExchange == null) {']
['consumer received no exchange ', []]
camel sample_4543

['try {', 'if (timeout < 0) {', 'resourceExchange = consumer.receive();', '} else if (timeout == 0) {', 'resourceExchange = consumer.receiveNoWait();', '} else {', 'resourceExchange = consumer.receive(timeout);', '}', 'if (resourceExchange == null) {', '} else {']
['consumer received ', ['resourceexchange']]
camel sample_4543

['protected void doStart() throws Exception {', 'if (consumerCache == null) {', 'if (cacheSize < 0) {', 'consumerCache = new EmptyConsumerCache(this, camelContext);']
['pollenrich is not using consumercache ', ['this']]
camel sample_4543

['protected void doStart() throws Exception {', 'if (consumerCache == null) {', 'if (cacheSize < 0) {', 'consumerCache = new EmptyConsumerCache(this, camelContext);', '} else if (cacheSize == 0) {', 'consumerCache = new ConsumerCache(this, camelContext);']
['pollenrich using consumercache with default cache size ', ['this']]
camel sample_4543

['public void testAddNewRoute() throws Exception {', 'deleteDirectory("target/dummy");', 'createDirectory("target/dummy");', 'context.start();', 'assertEquals(0, context.getRoutes().size());']
['copying file to target dummy ', []]
camel sample_1311

['from("direct:bar").routeId("bar").to("mock:foo");', '}', '});', 'context.start();', 'assertEquals(1, context.getRoutes().size());', 'getMockEndpoint("mock:bar").expectedMessageCount(0);', 'getMockEndpoint("mock:foo").expectedMessageCount(1);', 'template.sendBody("direct:bar", "Hello World");', 'assertMockEndpointsSatisfied();', 'resetMocks();']
['copying file to target dummy ', []]
camel sample_1311

['context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {', 'public void notify(EventObject event) throws Exception {', 'latch.countDown();', '}', 'public boolean isEnabled(EventObject event) {', 'return event instanceof RouteAddedEvent;', '}', '});', 'context.start();', 'assertEquals(0, context.getRoutes().size());']
['copying file to target dummy ', []]
camel sample_1311

['}', '});', 'context.start();', 'assertEquals(0, context.getRoutes().size());', 'FileUtil.copyFile(new File("src/test/resources/org/apache/camel/model/barRoute.xml"), new File("target/dummy/barRoute.xml"));', 'await().atMost(20, TimeUnit.SECONDS).untilAsserted(() -> assertEquals(1, context.getRoutes().size()));', 'getMockEndpoint("mock:bar").expectedMessageCount(1);', 'template.sendBody("direct:bar", "Hello World");', 'assertMockEndpointsSatisfied();', 'resetMocks();']
['updating file in target dummy ', []]
camel sample_1311

['public void testSocketReadOnClosedConnection() throws Exception {', 'final Thread acceptThread = new Thread() {', 'Logger log = LoggerFactory.getLogger("acceptThread");', 'public void run() {', 'boolean running = true;', 'try {', 'Socket echoSocket = serverSocket.accept();']
['accepted connection ', ['echosocket', 'getinetaddress']]
camel sample_13807

['echoSocket.setSoTimeout(2000);', 'while (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'StringBuilder responseBuilder = new StringBuilder(500);', 'InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();']
['inputstream available returned ', ['available']]
camel sample_13807

['while (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'StringBuilder responseBuilder = new StringBuilder(500);', 'InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();']
['processing byte ', ['readbyte']]
camel sample_13807

['InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {']
['available returned ', ['reader', 'available']]
camel sample_13807

['InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {']
['socket claims to still be open but end of stream received closing echosocket ', []]
camel sample_13807

['int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'try {', 'echoSocket.close();', '} catch (Exception ex) {']
['exception encountered closing echosocket after end of stream received ', ['ex']]
camel sample_13807

['readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'try {', 'echoSocket.close();', '} catch (Exception ex) {', '}', '}', 'running = false;', 'break;']
['complete message sending response ', []]
camel sample_13807

['running = false;', 'break;', 'byte[] response = responseBuilder.toString().getBytes();', 'responseBuilder.setLength(0);', 'writer.write(response, 0, response.length);', "writer.write('\\n');", 'break;', 'default: responseBuilder.append((char) readByte);', '}', '} catch (SocketTimeoutException timeoutEx) {']
['timeout reading data available returned ', ['available']]
camel sample_13807

['writer.write(response, 0, response.length);', "writer.write('\\n');", 'break;', 'default: responseBuilder.append((char) readByte);', '}', '} catch (SocketTimeoutException timeoutEx) {', '}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {']
['ioexception in run method ', ['ioex']]
camel sample_13807

['}', '} catch (SocketTimeoutException timeoutEx) {', '}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {', '} finally {', 'try {', 'serverSocket.close();', '} catch (IOException ioEx) {']
['exception encountered closing server socket ', ['ioex']]
camel sample_13807

['}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {', '} finally {', 'try {', 'serverSocket.close();', '} catch (IOException ioEx) {', '}', '}']
['finished processing connection ', []]
camel sample_13807

['} catch (IOException ioEx) {', '}', '}', '}', '};', 'acceptThread.start();', 'clientSocket = new Socket();', 'clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);']
['begining message send loop ', []]
camel sample_13807

['acceptThread.start();', 'clientSocket = new Socket();', 'clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();']
['sending payload ', []]
camel sample_13807

['clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();']
['sending terminator ', []]
camel sample_13807

['clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();']
['received response ', ['i', 'reader', 'readline']]
camel sample_13807

['BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}']
['message send loop complete closing connection ', []]
camel sample_13807

['reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}', 'clientSocket.getInputStream().close();', 'if (!clientSocket.isClosed()) {']
['closing input stream didn t close socket ', []]
camel sample_13807

['writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}', 'clientSocket.getInputStream().close();', 'if (!clientSocket.isClosed()) {', 'clientSocket.close();', '}']
['sleeping ', []]
camel sample_13807

['public void testAvailableOnClosedConnection() throws Exception {', 'final Thread acceptThread = new Thread() {', 'Logger log = LoggerFactory.getLogger("acceptThread");', 'public void run() {', 'boolean running = true;', 'try {', 'Socket echoSocket = serverSocket.accept();']
['accepted connection ', ['echosocket', 'getinetaddress']]
camel sample_13807

['echoSocket.setSoTimeout(2000);', 'while (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'StringBuilder responseBuilder = new StringBuilder(500);', 'InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();']
['inputstream available returned ', ['available']]
camel sample_13807

['while (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'StringBuilder responseBuilder = new StringBuilder(500);', 'InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();']
['processing byte ', ['readbyte']]
camel sample_13807

['InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {']
['available returned ', ['reader', 'available']]
camel sample_13807

['InputStream reader = echoSocket.getInputStream();', 'OutputStream writer = echoSocket.getOutputStream();', 'do {', 'int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {']
['socket claims to still be open but end of stream received closing echosocket ', []]
camel sample_13807

['int readByte = -1;', 'int available = -1;', 'try {', 'available = reader.available();', 'readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'try {', 'echoSocket.close();', '} catch (Exception ex) {']
['exception encountered closing echosocket after end of stream received ', ['ex']]
camel sample_13807

['readByte = reader.read();', 'switch (readByte) {', 'case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'try {', 'echoSocket.close();', '} catch (Exception ex) {', '}', '}', 'running = false;', 'break;']
['received escape closing connection ', []]
camel sample_13807

['case -1: if (echoSocket.isConnected() && !echoSocket.isClosed()) {', 'try {', 'echoSocket.close();', '} catch (Exception ex) {', '}', '}', 'running = false;', 'break;', 'echoSocket.close();', 'break;']
['complete message sending response ', []]
camel sample_13807

['echoSocket.close();', 'break;', 'byte[] response = responseBuilder.toString().getBytes();', 'responseBuilder.setLength(0);', 'writer.write(response, 0, response.length);', "writer.write('\\n');", 'break;', 'default: responseBuilder.append((char) readByte);', '}', '} catch (SocketTimeoutException timeoutEx) {']
['timeout reading data available returned ', ['available']]
camel sample_13807

['writer.write(response, 0, response.length);', "writer.write('\\n');", 'break;', 'default: responseBuilder.append((char) readByte);', '}', '} catch (SocketTimeoutException timeoutEx) {', '}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {']
['ioexception in run method ', ['ioex']]
camel sample_13807

['}', '} catch (SocketTimeoutException timeoutEx) {', '}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {', '} finally {', 'try {', 'serverSocket.close();', '} catch (IOException ioEx) {']
['exception encountered closing server socket ', ['ioex']]
camel sample_13807

['}', '} while (echoSocket.isConnected() && !echoSocket.isClosed());', '}', '} catch (IOException ioEx) {', '} finally {', 'try {', 'serverSocket.close();', '} catch (IOException ioEx) {', '}', '}']
['finished processing connection ', []]
camel sample_13807

['} catch (IOException ioEx) {', '}', '}', '}', '};', 'acceptThread.start();', 'clientSocket = new Socket();', 'clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);']
['begining message send loop ', []]
camel sample_13807

['acceptThread.start();', 'clientSocket = new Socket();', 'clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();']
['sending payload ', []]
camel sample_13807

['clientSocket.setSoTimeout(1000);', 'clientSocket.connect(serverSocket.getLocalSocketAddress(), 10000);', 'clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();']
['sending terminator ', []]
camel sample_13807

['clientSocket.setTcpNoDelay(true);', 'byte[] message = "Hello World".getBytes();', 'BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();']
['received response ', ['i', 'reader', 'readline']]
camel sample_13807

['BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}']
['message send loop complete closing connection ', []]
camel sample_13807

['BufferedReader reader;', 'for (int i = 1; i <= messageCount; ++i) {', 'reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));', 'OutputStream writer = clientSocket.getOutputStream();', 'writer.write(message, 0, message.length);', 'writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}']
['client socket available returned before close ', ['clientsocket', 'getinputstream', 'available']]
camel sample_13807

['writer.flush();', "writer.write('\\n');", 'writer.flush();', 'Thread.sleep(1000);', '}', 'byte[] buffer = new byte[0];', 'try {', 'clientSocket.getInputStream().read();', 'fail("read should have timed-out");', '} catch (SocketTimeoutException timeoutEx) {']
['client socket read timed out before close ', []]
camel sample_13807

['Thread.sleep(1000);', '}', 'byte[] buffer = new byte[0];', 'try {', 'clientSocket.getInputStream().read();', 'fail("read should have timed-out");', '} catch (SocketTimeoutException timeoutEx) {', '}', 'clientSocket.getOutputStream().write(27);', 'Thread.sleep(1000);']
['client socket available returned after close ', ['clientsocket', 'getinputstream', 'available']]
camel sample_13807

['}', 'byte[] buffer = new byte[0];', 'try {', 'clientSocket.getInputStream().read();', 'fail("read should have timed-out");', '} catch (SocketTimeoutException timeoutEx) {', '}', 'clientSocket.getOutputStream().write(27);', 'Thread.sleep(1000);', 'buffer = new byte[0];']
['client socket read returned after close ', ['clientsocket', 'getinputstream', 'read']]
camel sample_13807

['try {', 'clientSocket.getInputStream().read();', 'fail("read should have timed-out");', '} catch (SocketTimeoutException timeoutEx) {', '}', 'clientSocket.getOutputStream().write(27);', 'Thread.sleep(1000);', 'buffer = new byte[0];', 'clientSocket.getInputStream().close();', 'if (!clientSocket.isClosed()) {']
['closing input stream didn t close socket ', []]
camel sample_13807

['fail("read should have timed-out");', '} catch (SocketTimeoutException timeoutEx) {', '}', 'clientSocket.getOutputStream().write(27);', 'Thread.sleep(1000);', 'buffer = new byte[0];', 'clientSocket.getInputStream().close();', 'if (!clientSocket.isClosed()) {', 'clientSocket.close();', '}']
['sleeping ', []]
camel sample_13807

['public void testHeaderPredicateFails() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.message(0).header("sample.name").isEqualTo("shouldNotMatch");', 'template.sendBody("direct:start", "<sample><name>value</name></sample>");', 'try {', 'result.assertIsSatisfied();', 'fail("Should have failed this test!");', '} catch (AssertionError e) {']
['caught expected assertion failure ', ['e', 'e']]
camel sample_3906

['public void testRequestReplyWithConcurrent() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceivedInAnyOrder("Bye A", "Bye B", "Bye C", "Bye D", "Bye E");']
['sending messages ', []]
camel sample_7046

['public void testRequestReplyWithConcurrent() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceivedInAnyOrder("Bye A", "Bye B", "Bye C", "Bye D", "Bye E");', 'template.sendBody("seda:start", "A");', 'template.sendBody("seda:start", "B");', 'template.sendBody("seda:start", "C");', 'template.sendBody("seda:start", "D");', 'template.sendBody("seda:start", "E");']
['done sending messages ', []]
camel sample_7046

['private void testPath(String pathSuffix) throws InterruptedException {', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:" + pathSuffix);', 'mockEndpoint.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST");']
['number of exchanges in mock myapp ', ['mockendpoint', 'getexchanges', 'size']]
camel sample_13104

['public MyListenerService() {']
['instantiated service ', ['this']]
camel sample_16306

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RestSwaggerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest-swagger.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.rest-swagger.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1192

['public UnitTestResult executeTest(final ITestConfig config, String component) throws Exception {']
['spring boot test configuration ', ['config']]
camel sample_5997

['public UnitTestResult executeTest(final ITestConfig config, String component) throws Exception {', 'Pattern pattern = Pattern.compile(config.getUnitTestInclusionPattern());']
['scaning the classpath for test classes ', []]
camel sample_5997

['Set<BeanDefinition> defs = scanner.findCandidateComponents(config.getUnitTestBasePackage());', 'List<String> testClasses = new LinkedList<>();', 'for (BeanDefinition bd : defs) {', 'testClasses.add(bd.getBeanClassName());', '}', 'if (config.getUnitTestExclusionPattern() != null) {', 'Pattern exclusionPattern = Pattern.compile(config.getUnitTestExclusionPattern());', 'for (Iterator<String> it = testClasses.iterator(); it.hasNext();) {', 'String cn = it.next();', 'if (exclusionPattern.matcher(cn).matches()) {']
['excluding test class ', ['cn']]
camel sample_5997

['if (exclusionPattern.matcher(cn).matches()) {', 'it.remove();', '}', '}', '}', 'final List<Class<?>> classes = new ArrayList<>();', 'for (String cn : testClasses) {', 'try {', 'Class<?> clazz = Class.forName(cn);', 'if (isAdmissible(clazz)) {']
['found admissible test class ', ['cn']]
camel sample_5997

['}', '}', 'final List<Class<?>> classes = new ArrayList<>();', 'for (String cn : testClasses) {', 'try {', 'Class<?> clazz = Class.forName(cn);', 'if (isAdmissible(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {']
['test class has thrown an exception during initialization ', ['cn']]
camel sample_5997

['}', '}', 'final List<Class<?>> classes = new ArrayList<>();', 'for (String cn : testClasses) {', 'try {', 'Class<?> clazz = Class.forName(cn);', 'if (isAdmissible(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {']
['exception for test cass is ', ['cn', 't']]
camel sample_5997

['final List<Class<?>> classes = new ArrayList<>();', 'for (String cn : testClasses) {', 'try {', 'Class<?> clazz = Class.forName(cn);', 'if (isAdmissible(clazz)) {', 'classes.add(clazz);', '}', '} catch (Throwable t) {', '}', '}']
['run junit tests on test classes ', ['classes', 'size']]
camel sample_5997

['} catch (Throwable t) {', '}', '}', 'JUnitCore runner = new JUnitCore();', 'runner.addListener(new RunListener() {', 'public void testStarted(Description description) throws Exception {', 'disableJmx(config.getJmxDisabledNames());', '}', '});', 'Result result = runner.run(classes.toArray(new Class[]{}));']
['unit tests success test run failures ignored tests ', ['config', 'getmodulename', 'result', 'wassuccessful', 'result', 'getruncount', 'result', 'getfailurecount', 'result', 'getignorecount']]
camel sample_5997

['}', '}', 'JUnitCore runner = new JUnitCore();', 'runner.addListener(new RunListener() {', 'public void testStarted(Description description) throws Exception {', 'disableJmx(config.getJmxDisabledNames());', '}', '});', 'Result result = runner.run(classes.toArray(new Class[]{}));', 'for (Failure f : result.getFailures()) {']
['failed test description ', ['f', 'getdescription']]
camel sample_5997

['}', '}', 'JUnitCore runner = new JUnitCore();', 'runner.addListener(new RunListener() {', 'public void testStarted(Description description) throws Exception {', 'disableJmx(config.getJmxDisabledNames());', '}', '});', 'Result result = runner.run(classes.toArray(new Class[]{}));', 'for (Failure f : result.getFailures()) {']
['message ', ['f', 'getmessage']]
camel sample_5997

['}', 'JUnitCore runner = new JUnitCore();', 'runner.addListener(new RunListener() {', 'public void testStarted(Description description) throws Exception {', 'disableJmx(config.getJmxDisabledNames());', '}', '});', 'Result result = runner.run(classes.toArray(new Class[]{}));', 'for (Failure f : result.getFailures()) {', 'if (f.getException() != null) {']
['exception thrown from test ', ['f', 'getexception']]
camel sample_5997

['private void disableJmx(Set<String> disabledJmx) throws Exception {']
['disabling jmx names ', ['disabledjmx']]
camel sample_5997

['private void disableJmx(Set<String> disabledJmx) throws Exception {', 'for (MBeanServer server : getMBeanServers()) {', 'for (String jmxName : disabledJmx) {']
['disabling jmx query ', ['jmxname']]
camel sample_5997

['private void disableJmx(Set<String> disabledJmx) throws Exception {', 'for (MBeanServer server : getMBeanServers()) {', 'for (String jmxName : disabledJmx) {', 'ObjectName oName = new ObjectName(jmxName);', 'Set<ObjectName> names = new HashSet<>(server.queryNames(oName, null));', 'for (ObjectName name : names) {']
['disabled jmx name ', ['name']]
camel sample_5997

['protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {']
['create endpoint uri remaining parameters ', ['uri', 'remaining', 'parameters']]
camel sample_6712

['protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters);', 'private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {']
['parse connection ', ['fulluri']]
camel sample_6712

['protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters);', 'private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {', 'if (fullUri == null || fullUri.isEmpty()) {', 'throw new IllegalArgumentException("Invalid URI: " + fullUri);', '}', 'final ConnectionId id = parseConnectionId(fullUri, parameters);']
['parse connection fulluri ', ['fulluri', 'id']]
camel sample_6712

['protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters);', 'private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {', 'if (fullUri == null || fullUri.isEmpty()) {', 'throw new IllegalArgumentException("Invalid URI: " + fullUri);', '}', 'final ConnectionId id = parseConnectionId(fullUri, parameters);', 'synchronized (this) {']
['locating connection ', ['id']]
camel sample_6712

['protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters);', 'private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {', 'if (fullUri == null || fullUri.isEmpty()) {', 'throw new IllegalArgumentException("Invalid URI: " + fullUri);', '}', 'final ConnectionId id = parseConnectionId(fullUri, parameters);', 'synchronized (this) {', 'T1 connection = this.connections.get(id);']
['result ', ['id', 'connection']]
camel sample_6712

['protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters);', 'private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {', 'if (fullUri == null || fullUri.isEmpty()) {', 'throw new IllegalArgumentException("Invalid URI: " + fullUri);', '}', 'final ConnectionId id = parseConnectionId(fullUri, parameters);', 'synchronized (this) {', 'T1 connection = this.connections.get(id);', 'if (connection == null) {', 'final T2 options = parseOptions(id, parameters);']
['creating new connection ', ['options']]
camel sample_6712

['public void testWSHttpCallEcho() throws Exception {', 'received.clear();', 'latch = new CountDownLatch(1);', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17452

['assertEquals(1, received.size());', 'assertEquals("The bar has Beer", received.get(0));', 'websocket.close();', 'c.close();', 'received.clear();', 'latch = new CountDownLatch(1);', 'c = new DefaultAsyncHttpClient();', 'websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17452

['public void testForwardingJmsMessageIgnoresHeadersMQDoesntLike() throws Exception {', 'MockEndpoint endpoint = getMockEndpoint("mock:result");', 'endpoint.expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("JMSXAppID", "ABC");', 'template.sendBodyAndHeaders("activemq:test.a", "Hello World!", headers);', 'endpoint.assertIsSatisfied();', 'Exchange exchange = endpoint.getReceivedExchanges().get(0);', 'Message in = exchange.getIn();', 'assertMessageHeader(in, "JMSXAppID", null);']
['received message ', ['in']]
camel sample_7103

['private DirectVmConsumer awaitConsumer() throws InterruptedException {', 'DirectVmConsumer answer = null;', 'StopWatch watch = new StopWatch();', 'boolean done = false;', 'while (!done) {', 'Thread.sleep(500);', 'if (LOG.isDebugEnabled()) {']
['waited for consumer to be ready ', ['watch', 'taken']]
camel sample_4902

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping kubernetes pods consumer ', []]
camel sample_13295

['protected void doStop() throws Exception {', 'super.doStop();', 'if (resourceProxy != null) {', 'try {', 'WebClient.client(resourceProxy).close();', '} catch (Exception e) {']
['error closing linkedin rest proxy ', ['e', 'getmessage', 'e']]
camel sample_8864

['private void safeCloseResultSet() {', 'try {', 'resultSet.close();', '} catch (SQLException e) {']
['error by closing result set ', ['e', 'e']]
camel sample_14045

['private void safeCloseStatement() {', 'try {', 'statement.close();', '} catch (SQLException e) {']
['error by closing statement ', ['e', 'e']]
camel sample_14045

['private void safeCloseConnection() {', 'try {', 'connection.close();', '} catch (SQLException e) {']
['error by closing connection ', ['e', 'e']]
camel sample_14045

['public void testDefaultTimeoutMapPurge() throws Exception {', 'DefaultTimeoutMap<String, Integer> map = new DefaultTimeoutMap<String, Integer>(executor, 100);', 'map.start();', 'assertTrue(map.currentTime() > 0);', 'assertEquals(0, map.size());', 'map.put("A", 123, 50);', 'assertEquals(1, map.size());', 'Thread.sleep(250);', 'if (map.size() > 0) {']
['waiting extra due slow ci box ', []]
camel sample_3681

['public void testExecutor() throws Exception {', 'ScheduledExecutorService e = Executors.newScheduledThreadPool(2);', 'DefaultTimeoutMap<String, Integer> map = new DefaultTimeoutMap<String, Integer>(e, 50);', 'map.start();', 'assertEquals(50, map.getPurgePollTime());', 'map.put("A", 123, 100);', 'assertEquals(1, map.size());', 'Thread.sleep(250);', 'if (map.size() > 0) {']
['waiting extra due slow ci box ', []]
camel sample_3681

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");']
['utf utf ', ['new', 'string', 'utf', 'charset', 'forname']]
camel sample_2993

['protected void setUp() throws Exception {', 'utf = "ABC\\u00e6".getBytes("utf-8");', 'deleteDirectory("target/charset");', 'createDirectory("target/charset/input");', 'for (byte b : utf) {']
['utf byte ', ['b']]
camel sample_2993

['final Producer producer;', 'final Endpoint endpoint;', 'Object recipient = null;', 'try {', 'recipient = expression.evaluate(exchange, Object.class);', 'endpoint = resolveEndpoint(exchange, recipient);', 'producer = producerCache.acquireProducer(endpoint);', '} catch (Throwable e) {', 'if (isIgnoreInvalidEndpoint()) {', 'if (LOG.isDebugEnabled()) {']
['endpoint uri is invalid this exception will be ignored ', ['recipient', 'e']]
camel sample_4514

['}', 'exchange.setProperty(Exchange.TO_ENDPOINT, producer.getEndpoint().getEndpointUri());', 'try {', 'producerCache.releaseProducer(endpoint, producer);', '} catch (Exception e) {', '}', 'callback.done(false);', '}', '});', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4514

['try {', 'producerCache.releaseProducer(endpoint, producer);', '} catch (Exception e) {', '}', 'callback.done(false);', '}', '});', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4514

['protected void doStart() throws Exception {', 'if (aggregationStrategy == null) {', 'aggregationStrategy = defaultAggregationStrategy();', '}', 'if (aggregationStrategy instanceof CamelContextAware) {', '((CamelContextAware) aggregationStrategy).setCamelContext(camelContext);', '}', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);']
['enricher is not using producercache ', ['this']]
camel sample_4514

['aggregationStrategy = defaultAggregationStrategy();', '}', 'if (aggregationStrategy instanceof CamelContextAware) {', '((CamelContextAware) aggregationStrategy).setCamelContext(camelContext);', '}', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);', '} else if (cacheSize == 0) {', 'producerCache = new ProducerCache(this, camelContext);']
['enricher using producercache with default cache size ', ['this']]
camel sample_4514

['protected RoutesBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['caught error while performing task reason exception message stacktrace exception stacktrace ', ['exception', 'class', 'process', 'new', 'exceptionprocessor', 'maximumredeliveries', 'redeliverydelay', 'useexponentialbackoff', 'backoffmultiplier', 'onredelivery', 'new', 'exceptionretryprocessor', 'handled', 'true', 'log', 'logginglevel', 'warn', 'end']]
camel sample_8167

['public void process(Exchange exchange) throws Exception {', 'Exception ex = (Exception)exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT);']
['processing caught exception ', ['ex', 'getlocalizedmessage']]
camel sample_8167

['public void process(Exchange exchange) throws Exception {', 'Exception ex = (Exception)exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT);']
['attempting redelivery of handled exception with message ', ['ex', 'getclass', 'getsimplename', 'ex', 'getlocalizedmessage']]
camel sample_8167

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyConcatFieldRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_221

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyConcatFieldRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("ftp:localhost:{{ftpPort}}/myapp?password=admin&username=admin", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_221

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'getContext().setTracing(true);', 'from("direct:start").delay(10).to("mock:a"). process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['this is the processor being invoked between mock a and mock b ', []]
camel sample_3402

['public void testWSHttpCall() throws Exception {', 'final List<String> received = new ArrayList<String>();', 'final CountDownLatch latch = new CountDownLatch(10);', 'AsyncHttpClient c = createAsyncHttpSSLClient();', 'WebSocket websocket = c.prepareGet("wss: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13153

['public void initAnnotatedFields() {', 'for (Class<?> cl : models) {', 'List<Field> linkFields = new ArrayList<Field>();', 'if (LOG.isDebugEnabled()) {']
['class retrieved ', ['cl', 'getname']]
camel sample_7441

['public void initAnnotatedFields() {', 'for (Class<?> cl : models) {', 'List<Field> linkFields = new ArrayList<Field>();', 'if (LOG.isDebugEnabled()) {', '}', 'for (Field field : cl.getDeclaredFields()) {', 'DataField dataField = field.getAnnotation(DataField.class);', 'if (dataField != null) {', 'if (LOG.isDebugEnabled()) {']
['position defined in the class position field ', ['new', 'object', 'cl', 'getname', 'datafield', 'pos', 'datafield']]
camel sample_7441

['++numberMandatoryFields;', '} else {', '++numberOptionalFields;', '}', 'dataFields.put(dataField.pos(), dataField);', 'annotatedFields.put(dataField.pos(), field);', '}', 'Link linkField = field.getAnnotation(Link.class);', 'if (linkField != null) {', 'if (LOG.isDebugEnabled()) {']
['class linked field ', ['cl', 'getname', 'field']]
camel sample_7441

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['number of optional fields ', ['numberoptionalfields']]
camel sample_7441

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['number of mandatory fields ', ['numbermandatoryfields']]
camel sample_7441

['if (LOG.isDebugEnabled()) {', '}', 'linkFields.add(field);', '}', '}', 'if (!linkFields.isEmpty()) {', 'annotatedLinkFields.put(cl.getName(), linkFields);', '}', 'totalFields = numberMandatoryFields + numberOptionalFields;', 'if (LOG.isDebugEnabled()) {']
['total ', ['totalfields']]
camel sample_7441

['Object lengthObj =  lengthField.get(modelObj);', 'length = ((Integer)lengthObj).intValue();', '}', 'if (length < 1 && delimiter == null && dataField.lengthPos() == 0) {', 'throw new IllegalArgumentException("Either length or delimiter must be specified for the field : " + dataField.toString());', '}', 'if (offset - 1 <= -1) {', 'throw new IllegalArgumentException("Offset/Position of the field " + dataField.toString() + " cannot be negative");', '}', 'if (dataField.pos() > offset) {']
['skipping ahead chars ', ['datafield', 'pos', 'offset']]
camel sample_7441

['}', 'if (dataField.required()) {', '++counterMandatoryFields;', 'if (token.equals("")) {', 'throw new IllegalArgumentException("The mandatory field defined at the position " + pos + " is empty for the line: " + line);', '}', '}', 'field = annotatedFields.get(dataField.pos());', 'field.setAccessible(true);', 'if (LOG.isDebugEnabled()) {']
['pos offset data field type ', ['new', 'object', 'offset', 'token', 'field', 'gettype']]
camel sample_7441

['m = ReflectionHelper.findMethod(clazz, methodName);', 'value = ObjectHelper.invokeMethod(m, value);', '}', '}', 'field.set(modelField, value);', '++pos;', '}', 'if (offset <= record.length() && !(record.substring(offset - 1, record.length())).trim().equals("") && !isIgnoreTrailingChars()) {', 'throw new IllegalArgumentException("Unexpected / unmapped characters found at the end of the fixed-length record at line : " + line);', '}']
['counter mandatory fields ', ['countermandatoryfields']]
camel sample_7441

['public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {', 'StringBuilder buffer = new StringBuilder();', 'Map<Integer, List<String>> results = new HashMap<Integer, List<String>>();', 'for (Class<?> clazz : models) {', 'if (model.containsKey(clazz.getName())) {', 'Object obj = model.get(clazz.getName());', 'if (LOG.isDebugEnabled()) {']
['model object class ', ['obj', 'obj', 'getclass', 'getname']]
camel sample_7441

['result = temp.toString();', '} else if (result.length() > fieldLength) {', 'if (datafield.clip()) {', 'result = result.substring(0, fieldLength);', '} else {', 'throw new IllegalArgumentException("Length for the " + field.getName() + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength);', '}', '}', '}', 'if (LOG.isDebugEnabled()) {']
['value to be formatted position and its formatted value ', ['new', 'object', 'value', 'datafield', 'pos', 'result']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {']
['fixed length record ', ['record']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();']
['carriage return defined for the csv ', ['crlf']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();']
['eol end of line defined for the csv ', ['eol']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();']
['header ', ['header']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;']
['has header ', ['hasheader']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();']
['skip header ', ['skipheader']]
camel sample_7441

['private void initFixedLengthRecordParameters() {', 'for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();']
['footer ', ['footer']]
camel sample_7441

['for (Class<?> cl : models) {', 'FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;']
['has footer ', ['hasfooter']]
camel sample_7441

['FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class);', 'if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();']
['skip footer ', ['skipfooter']]
camel sample_7441

['if (record != null) {', 'crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;']
['is header ', ['isheader']]
camel sample_7441

['crlf = record.crlf();', 'eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;', 'isFooter = hasFooter ? cl.equals(footer) : false;']
['is footer ', ['isfooter']]
camel sample_7441

['eol = record.eol();', 'header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;', 'isFooter = hasFooter ? cl.equals(footer) : false;', 'paddingChar = record.paddingChar();']
['padding char ', ['paddingchar']]
camel sample_7441

['header =  record.header();', 'hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;', 'isFooter = hasFooter ? cl.equals(footer) : false;', 'paddingChar = record.paddingChar();', 'recordLength = record.length();']
['length of the record ', ['recordlength']]
camel sample_7441

['hasHeader = header != void.class;', 'skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;', 'isFooter = hasFooter ? cl.equals(footer) : false;', 'paddingChar = record.paddingChar();', 'recordLength = record.length();', 'ignoreTrailingChars = record.ignoreTrailingChars();']
['ignore trailing chars ', ['ignoretrailingchars']]
camel sample_7441

['skipHeader = record.skipHeader();', 'footer =  record.footer();', 'hasFooter = record.footer() != void.class;', 'skipFooter = record.skipFooter();', 'isHeader = hasHeader ? cl.equals(header) : false;', 'isFooter = hasFooter ? cl.equals(footer) : false;', 'paddingChar = record.paddingChar();', 'recordLength = record.length();', 'ignoreTrailingChars = record.ignoreTrailingChars();', 'ignoreMissingChars = record.ignoreMissingChars();']
['enable ignore missing chars ', ['ignoremissingchars']]
camel sample_7441

['public void testCreateFolder() throws Exception {', 'deleteTestFolder();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.parentFolderId", "0");', 'headers.put("CamelBox.folderName", CAMEL_TEST_FOLDER);', 'testFolder = requestBodyAndHeaders("direct: assertNotNull("createFolder result", testFolder);', 'assertEquals("createFolder folder name", CAMEL_TEST_FOLDER, testFolder.getInfo().getName());']
['createfolder ', ['testfolder']]
camel sample_17405

['public void testCreateFolderByPath() throws Exception {', 'deleteTestFolder();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.parentFolderId", "0");', 'headers.put("CamelBox.path", new String[] {CAMEL_TEST_FOLDER});', 'testFolder = requestBodyAndHeaders("direct: assertNotNull("createFolder result", testFolder);', 'assertEquals("createFolder folder name", CAMEL_TEST_FOLDER, testFolder.getInfo().getName());']
['createfolder ', ['testfolder']]
camel sample_17405

['public void testDeleteFolder() throws Exception {', 'requestBody("direct: BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection());', 'Iterable<BoxItem.Info> it = rootFolder.search("^" + CAMEL_TEST_FOLDER + "$");', 'int searchResults = sizeOfIterable(it);', 'boolean exists = searchResults > 0 ? true : false;', 'assertEquals("deleteFolder exists", false, exists);']
['deletefolder exists ', ['exists']]
camel sample_17405

['public void testCopyFolder() throws Exception {', 'com.box.sdk.BoxFolder result = null;', 'try {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.destinationFolderId", CAMEL_TEST_DESTINATION_FOLDER_ID);', 'headers.put("CamelBox.newName", CAMEL_TEST_COPY_FOLDER);', 'result = requestBodyAndHeaders("direct: assertNotNull("copyFolder result", result);', 'assertEquals("copyFolder folder name", CAMEL_TEST_COPY_FOLDER, result.getInfo().getName());']
['copyfolder ', ['result']]
camel sample_17405

['public void testCreateSharedLink() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.access", BoxSharedLink.Access.COLLABORATORS);', 'headers.put("CamelBox.unshareDate", null);', 'headers.put("CamelBox.permissions", new BoxSharedLink.Permissions());', 'final com.box.sdk.BoxSharedLink result = requestBodyAndHeaders("direct: headers);', 'assertNotNull("createFolderSharedLink result", result);']
['createfoldersharedlink ', ['result']]
camel sample_17405

['public void testGetFolder() throws Exception {', 'final com.box.sdk.BoxFolder result = requestBody("direct: assertNotNull("getFolder result", result);', 'assertEquals("getFolder folder id", testFolder.getID(), result.getID());']
['getfolder ', ['result']]
camel sample_17405

['public void testGetFolderInfo() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.fields", new String[] {"name"});', 'final com.box.sdk.BoxFolder.Info result = requestBodyAndHeaders("direct: assertNotNull("getFolderInfo result", result);', 'assertNotNull("getFolderInfo result.getName()", result.getName());', 'assertEquals("getFolderInfo info name", CAMEL_TEST_FOLDER, result.getName());']
['getfolderinfo ', ['result']]
camel sample_17405

['public void testGetFolderItems() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", CAMEL_TEST_ROOT_FOLDER_ID);', 'headers.put("CamelBox.offset", null);', 'headers.put("CamelBox.limit", null);', 'headers.put("CamelBox.fields", null);', 'final java.util.Collection result = requestBodyAndHeaders("direct: assertNotNull("getFolderItems result", result);']
['getfolderitems ', ['result']]
camel sample_17405

['public void testGetRootFolder() throws Exception {', 'final com.box.sdk.BoxFolder result = requestBody("direct: assertNotNull("getRootFolder result", result);']
['getrootfolder ', ['result']]
camel sample_17405

['public void testMoveFolder() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.destinationFolderId", CAMEL_TEST_DESTINATION_FOLDER_ID);', 'headers.put("CamelBox.newName", CAMEL_TEST_MOVE_FOLDER);', 'final com.box.sdk.BoxFolder result = requestBodyAndHeaders("direct: assertNotNull("moveFolder result", result);', 'assertEquals("moveFolder folder name", CAMEL_TEST_MOVE_FOLDER, result.getInfo().getName());']
['movefolder ', ['result']]
camel sample_17405

['public void testRenameFolder() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'headers.put("CamelBox.newFolderName", CAMEL_TEST_RENAME_FOLDER);', 'final com.box.sdk.BoxFolder result = requestBodyAndHeaders("direct: assertNotNull("renameFolder result", result);', 'assertEquals("moveFolder folder name", CAMEL_TEST_RENAME_FOLDER, result.getInfo().getName());']
['renamefolder ', ['result']]
camel sample_17405

['public void testUpdateInfo() throws Exception {', 'final BoxFolder.Info testFolderInfo = testFolder.getInfo();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", testFolder.getID());', 'testFolderInfo.setDescription(CAMEL_TEST_FOLDER_DESCRIPTION);', 'headers.put("CamelBox.info", testFolderInfo);', 'final com.box.sdk.BoxFolder result = requestBodyAndHeaders("direct: assertNotNull("updateInfo result", result);', 'assertEquals("update folder info description", CAMEL_TEST_FOLDER_DESCRIPTION, result.getInfo().getDescription());']
['updateinfo ', ['result']]
camel sample_17405

['public void startThriftSecureClient() throws IOException, TTransportException {', 'if (transport == null) {']
['connecting to the secured thrift server on port ', ['thrift', 'test', 'port']]
camel sample_13016

['public void startThriftSecureClient() throws IOException, TTransportException {', 'if (transport == null) {', 'TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters();', 'sslParams.setTrustStore(TRUST_STORE_PATH, SECURITY_STORE_PASSWORD);', 'transport = TSSLTransportFactory.getClientSocket("localhost", THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT, sslParams);', 'protocol = new TBinaryProtocol(transport);', 'thriftClient = new Calculator.Client(protocol);']
['connected to the secured thrift server ', []]
camel sample_13016

['public void stopThriftClient() throws Exception {', 'if (transport != null) {', 'transport.close();', 'transport = null;']
['connection to the thrift server closed ', []]
camel sample_13016

['public void testCalculateMethodInvocation() throws Exception {']
['test calculate method invocation ', []]
camel sample_13016

['public void testEchoMethodInvocation() throws Exception {']
['test echo method invocation ', []]
camel sample_13016

['public void testCancel() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("cancel result", result);']
['cancel ', ['result']]
camel sample_17377

['public void testCreate() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("create result", result);']
['create ', ['result']]
camel sample_17377

['public void testDelete() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBraintree.customerId", null);', 'headers.put("CamelBraintree.id", null);', 'final com.braintreegateway.Result result = requestBodyAndHeaders("direct: assertNotNull("delete result", result);']
['delete ', ['result']]
camel sample_17377

['public void testFind() throws Exception {', 'final com.braintreegateway.Subscription result = requestBody("direct: assertNotNull("find result", result);']
['find ', ['result']]
camel sample_17377

['public void testRetryCharge() throws Exception {', 'final com.braintreegateway.Result result = requestBody("direct: assertNotNull("retryCharge result", result);']
['retrycharge ', ['result']]
camel sample_17377

['public void testRetryChargeWithAmount() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBraintree.subscriptionId", null);', 'headers.put("CamelBraintree.amount", null);', 'final com.braintreegateway.Result result = requestBodyAndHeaders("direct: assertNotNull("retryCharge result", result);']
['retrycharge ', ['result']]
camel sample_17377

['public void testSearch() throws Exception {', 'final com.braintreegateway.ResourceCollection result = requestBody("direct: assertNotNull("search result", result);']
['search ', ['result']]
camel sample_17377

['public void testUpdate() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBraintree.id", null);', 'headers.put("CamelBraintree.request", null);', 'final com.braintreegateway.Result result = requestBodyAndHeaders("direct: assertNotNull("update result", result);']
['update ', ['result']]
camel sample_17377

['public void process(Exchange exchange) throws Exception {', 'String cacheKey = key.evaluate(exchange, String.class);', 'if (isValid(cacheManager, cacheName, cacheKey)) {', 'Ehcache cache = cacheManager.getCache(cacheName);', 'if (LOG.isDebugEnabled()) {']
['replacing xpath value in message with value stored against key in cachename ', ['new', 'object', 'xpath', 'cachekey', 'cachename']]
camel sample_10518

['if (endpoint.isPerformInvocation()) {', 'response = super.performInvocation(cxfExchange, serviceObject, method, paramArray);', '}', 'paramArray = insertExchange(method, paramArray, cxfExchange);', 'OperationResourceInfo ori = cxfExchange.get(OperationResourceInfo.class);', 'if (ori.isSubResourceLocator()) {', 'return method.invoke(serviceObject, paramArray);', '}', 'Continuation continuation;', 'if (!endpoint.isSynchronous() && (continuation = getContinuation(cxfExchange)) != null) {']
['calling the camel async processors ', []]
camel sample_8029

['}', 'paramArray = insertExchange(method, paramArray, cxfExchange);', 'OperationResourceInfo ori = cxfExchange.get(OperationResourceInfo.class);', 'if (ori.isSubResourceLocator()) {', 'return method.invoke(serviceObject, paramArray);', '}', 'Continuation continuation;', 'if (!endpoint.isSynchronous() && (continuation = getContinuation(cxfExchange)) != null) {', 'return asyncInvoke(cxfExchange, serviceObject, method, paramArray, continuation, response);', '} else {']
['calling the camel sync processors ', []]
camel sample_8029

['private Object asyncInvoke(Exchange cxfExchange, final Object serviceObject, Method method, Object[] paramArray, final Continuation continuation, Object response) throws Exception {', 'synchronized (continuation) {', 'if (continuation.isNew()) {', 'final org.apache.camel.Exchange camelExchange = prepareExchange(cxfExchange, method, paramArray, response);', 'cxfRsConsumer.createUoW(camelExchange);']
['suspending continuation of exchangeid ', ['camelexchange', 'getexchangeid']]
camel sample_8029

['synchronized (continuation) {', 'if (continuation.isNew()) {', 'final org.apache.camel.Exchange camelExchange = prepareExchange(cxfExchange, method, paramArray, response);', 'cxfRsConsumer.createUoW(camelExchange);', 'continuation.suspend(endpoint.getContinuationTimeout());', 'cxfExchange.put(SUSPENED, Boolean.TRUE);', 'continuation.setObject(camelExchange);', 'cxfRsConsumer.getAsyncProcessor().process(camelExchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'synchronized (continuation) {']
['resuming continuation of exchangeid ', ['camelexchange', 'getexchangeid']]
camel sample_8029

['public static void main(final String[] args) throws Exception {', 'File csvLogFile = new File(CSV_PATH);', 'if (csvLogFile.exists()) {']
['removing log file ', ['csvlogfile', 'getabsolutepath']]
camel sample_17727

['public static void main(final String[] args) throws Exception {', 'File csvLogFile = new File(CSV_PATH);', 'if (csvLogFile.exists()) {', 'csvLogFile.delete();', '}']
['starting order camel route ', []]
camel sample_17727

['File csvLogFile = new File(CSV_PATH);', 'if (csvLogFile.exists()) {', 'csvLogFile.delete();', '}', 'ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("META-INF/spring/camel-context.xml");', 'context.start();', 'CamelContext camelContext = context.getBean("order", CamelContext.class);', 'ProducerTemplate producer = camelContext.createProducerTemplate();', 'Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);']
['sending to direct java ', ['order']]
camel sample_17727

['csvLogFile.delete();', '}', 'ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("META-INF/spring/camel-context.xml");', 'context.start();', 'CamelContext camelContext = context.getBean("order", CamelContext.class);', 'ProducerTemplate producer = camelContext.createProducerTemplate();', 'Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);', 'OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);']
['received ', ['response']]
camel sample_17727

['csvLogFile.delete();', '}', 'ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("META-INF/spring/camel-context.xml");', 'context.start();', 'CamelContext camelContext = context.getBean("order", CamelContext.class);', 'ProducerTemplate producer = camelContext.createProducerTemplate();', 'Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);', 'OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);']
['csv log now contains ', ['getcsvlog']]
camel sample_17727

['ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("META-INF/spring/camel-context.xml");', 'context.start();', 'CamelContext camelContext = context.getBean("order", CamelContext.class);', 'ProducerTemplate producer = camelContext.createProducerTemplate();', 'Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);', 'OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderXml = "<order orderId=\\"Order-XML-0001\\" itemId=\\"MIKAN\\" quantity=\\"365\\"/>";']
['sending to direct xml ', ['orderxml']]
camel sample_17727

['Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);', 'OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderXml = "<order orderId=\\"Order-XML-0001\\" itemId=\\"MIKAN\\" quantity=\\"365\\"/>";', 'Exchange answerXml = producer.send("direct:xml", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderXml, new DataType("xml:XMLOrder"));', '});', 'Thread.sleep(1000);']
['received ', ['answerxml', 'getout', 'getbody', 'string', 'class']]
camel sample_17727

['Thread.sleep(1000);', 'Order order = new Order() .setOrderId("Order-Java-0001") .setItemId("MILK") .setQuantity(3);', 'OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderXml = "<order orderId=\\"Order-XML-0001\\" itemId=\\"MIKAN\\" quantity=\\"365\\"/>";', 'Exchange answerXml = producer.send("direct:xml", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderXml, new DataType("xml:XMLOrder"));', '});', 'Thread.sleep(1000);']
['csv log now contains ', ['getcsvlog']]
camel sample_17727

['OrderResponse response = producer.requestBody("direct:java", order, OrderResponse.class);', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderXml = "<order orderId=\\"Order-XML-0001\\" itemId=\\"MIKAN\\" quantity=\\"365\\"/>";', 'Exchange answerXml = producer.send("direct:xml", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderXml, new DataType("xml:XMLOrder"));', '});', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderJson = "{\\"orderId\\":\\"Order-JSON-0001\\", \\"itemId\\":\\"MIZUYO-KAN\\", \\"quantity\\":\\"16350\\"}";']
['sending to direct json ', ['orderjson']]
camel sample_17727

['Exchange answerXml = producer.send("direct:xml", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderXml, new DataType("xml:XMLOrder"));', '});', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderJson = "{\\"orderId\\":\\"Order-JSON-0001\\", \\"itemId\\":\\"MIZUYO-KAN\\", \\"quantity\\":\\"16350\\"}";', 'Exchange answerJson = producer.send("direct:json", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderJson, new DataType("json"));', '});', 'Thread.sleep(1000);']
['received ', ['answerjson', 'getout', 'getbody', 'string', 'class']]
camel sample_17727

['Exchange answerXml = producer.send("direct:xml", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderXml, new DataType("xml:XMLOrder"));', '});', 'Thread.sleep(1000);', 'Thread.sleep(1000);', 'String orderJson = "{\\"orderId\\":\\"Order-JSON-0001\\", \\"itemId\\":\\"MIZUYO-KAN\\", \\"quantity\\":\\"16350\\"}";', 'Exchange answerJson = producer.send("direct:json", ex -> {', '((DataTypeAware)ex.getIn()).setBody(orderJson, new DataType("json"));', '});', 'Thread.sleep(1000);']
['csv log now contains ', ['getcsvlog']]
camel sample_17727

['public void xxxtestTokenPairPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(5, TimeUnit.MINUTES);']
['processed file with elements in ', ['size', 'timeutils', 'printduration', 'watch', 'taken']]
camel sample_3665

['public void xxxtestTokenPairPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(5, TimeUnit.MINUTES);']
['processed tiny messages ', ['tiny', 'get']]
camel sample_3665

['public void xxxtestTokenPairPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(5, TimeUnit.MINUTES);']
['processed small messages ', ['small', 'get']]
camel sample_3665

['public void xxxtestTokenPairPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(5, TimeUnit.MINUTES);']
['processed medium messages ', ['med', 'get']]
camel sample_3665

['public void xxxtestTokenPairPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(5, TimeUnit.MINUTES);']
['processed large messages ', ['large', 'get']]
camel sample_3665

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("file:target/data?initialDelay=0&delay=10&noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['starting to process file ', []]
camel sample_3665

['from("file:target/data?initialDelay=0&delay=10&noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'watch.restart();', '}', '}) .split().tokenizeXML("order").streaming() .choice() .when().xpath("/order/amount < 10") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>3</amount>"));', 'int num = tiny.incrementAndGet();', 'if (num % 100 == 0) {']
['processed tiny messages ', ['num']]
camel sample_3665

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 50") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>44</amount>"));', 'int num = small.incrementAndGet();', 'if (num % 100 == 0) {']
['processed small messages ', ['num', 'xml']]
camel sample_3665

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 100") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>88</amount>"));', 'int num = med.incrementAndGet();', 'if (num % 100 == 0) {']
['processed medium messages ', ['num']]
camel sample_3665

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .otherwise() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>123</amount>"));', 'int num = large.incrementAndGet();', 'if (num % 100 == 0) {']
['processed large messages ', ['num']]
camel sample_3665

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'SchedulerComponent comp = context.getComponent("scheduler", SchedulerComponent.class);', 'comp.setConcurrentTasks(2);', 'from("scheduler: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (sleep.compareAndSet(true, false)) {']
['thread is sleeping ', []]
camel sample_3370

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'SchedulerComponent comp = context.getComponent("scheduler", SchedulerComponent.class);', 'comp.setConcurrentTasks(2);', 'from("scheduler: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (sleep.compareAndSet(true, false)) {', 'Thread.sleep(1000);']
['thread is done sleeping ', []]
camel sample_3370

['protected void doGetNode(Exchange exchange, String operation) throws Exception {', 'Node node = null;', 'String pvName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NODE_NAME, String.class);', 'if (ObjectHelper.isEmpty(pvName)) {']
['get a specific node require specify a node name ', []]
camel sample_13271

['protected void doStart() throws Exception {', 'if (configuration.getClient() == null) {', 'configuration.createClient();']
['producer dropbox client created ', []]
camel sample_8496

['protected void doStop() throws Exception {', 'if (configuration.getClient() == null) {', 'configuration.setClient(null);']
['producer dropbox client deleted ', []]
camel sample_8496

['protected void doStart() throws Exception {', 'if (sessionId.get() == null) {', 'client = configuration.createConsulClient(getCamelContext());', 'sessionClient = client.sessionClient();', 'keyValueClient = client.keyValueClient();', 'sessionId.set( sessionClient.createSession( ImmutableSession.builder() .name(getNamespace()) .ttl(configuration.getSessionTtl() + "s") .lockDelay(configuration.getSessionLockDelay() + "s") .build() ).getId() );']
['acquired session with id ', ['sessionid', 'get']]
camel sample_14367

['protected void doStart() throws Exception {', 'if (sessionId.get() == null) {', 'client = configuration.createConsulClient(getCamelContext());', 'sessionClient = client.sessionClient();', 'keyValueClient = client.keyValueClient();', 'sessionId.set( sessionClient.createSession( ImmutableSession.builder() .name(getNamespace()) .ttl(configuration.getSessionTtl() + "s") .lockDelay(configuration.getSessionLockDelay() + "s") .build() ).getId() );', 'boolean lock = acquireLock();']
['acquire lock on path with id result ', ['path', 'sessionid', 'get', 'lock']]
camel sample_14367

['protected void doStop() throws Exception {', 'if (sessionId.get() != null) {', 'if (keyValueClient.releaseLock(this.path, sessionId.get())) {']
['successfully released lock on path with id ', ['path', 'sessionid', 'get']]
camel sample_14367

['public void onComplete(ConsulResponse<com.google.common.base.Optional<Value>> consulResponse) {', 'if (isStarting() || isStarted()) {', 'com.google.common.base.Optional<Value> value = consulResponse.getResponse();', 'if (value.isPresent()) {', 'com.google.common.base.Optional<String> sid = value.get().getSession();', 'if (!sid.isPresent()) {', 'boolean lock = acquireLock();']
['try to acquire lock on path with id result ', ['path', 'sessionid', 'get', 'lock']]
camel sample_14367

['if (isStarting() || isStarted()) {', 'com.google.common.base.Optional<Value> value = consulResponse.getResponse();', 'if (value.isPresent()) {', 'com.google.common.base.Optional<String> sid = value.get().getSession();', 'if (!sid.isPresent()) {', 'boolean lock = acquireLock();', 'localMember.setMaster(lock);', '} else {', 'boolean master = sid.get().equals(sessionId.get());', 'if (!master) {']
['path is held by session local session is ', ['path', 'sid', 'get', 'sessionid', 'get']]
camel sample_14367

['return null;', '}', 'try {', 'ASN1Primitive current = getNextEntry();', 'if (current != null) {', 'Message answer = new DefaultMessage(exchange.getContext());', 'answer.getHeaders().putAll(exchange.getIn().getHeaders());', 'answer.setBody(current.getEncoded());', 'return answer;', '} else {']
['close ', []]
camel sample_9454

['private static boolean doNotifyEvent(EventNotifier notifier, EventObject event) {', 'boolean started = true;', 'if (notifier instanceof StatefulService) {', 'started = ((StatefulService) notifier).isStarted();', '}', 'if (!started) {']
['ignoring notifying event the eventnotifier has not been started yet ', ['event', 'notifier']]
camel sample_4266

['private static boolean doNotifyEvent(EventNotifier notifier, EventObject event) {', 'boolean started = true;', 'if (notifier instanceof StatefulService) {', 'started = ((StatefulService) notifier).isStarted();', '}', 'if (!started) {', 'return false;', '}', 'if (!notifier.isEnabled(event)) {']
['notifier is not enabled for the event ', ['notifier', 'event']]
camel sample_4266

['}', 'if (!started) {', 'return false;', '}', 'if (!notifier.isEnabled(event)) {', 'return false;', '}', 'try {', 'notifier.notify(event);', '} catch (Throwable e) {']
['error notifying event this exception will be ignored ', ['event', 'e']]
camel sample_4266

['final Object body = undertowHttpBinding.toHttpRequest(request, camelExchange.getIn());', 'final TypeConverter tc = endpoint.getCamelContext().getTypeConverter();', 'final ByteBuffer bodyAsByte = tc.tryConvertTo(ByteBuffer.class, body);', 'if (body != null && bodyAsByte != null) {', 'requestHeaders.put(Headers.CONTENT_LENGTH, bodyAsByte.remaining());', '}', 'for (final Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {', 'requestHeaders.putAll(HttpString.tryFromString(entry.getKey()), entry.getValue());', '}', 'if (LOG.isDebugEnabled()) {']
['executing http method ', ['method', 'pathandquery']]
camel sample_13158

['final Xnio xnio = Xnio.getInstance();', 'worker = xnio.createWorker(options);', 'final SSLContext sslContext = getEndpoint().getSslContext();', 'if (sslContext != null) {', 'ssl = new UndertowXnioSsl(xnio, options, sslContext);', '}', 'client = UndertowClient.getInstance();', 'if (endpoint.isWebSocket()) {', 'this.webSocketHandler = (CamelWebSocketHandler) endpoint.getComponent().registerEndpoint(endpoint.getHttpHandlerRegistrationInfo(), endpoint.getSslContext(), new CamelWebSocketHandler());', '}']
['created worker with options ', ['worker', 'options']]
camel sample_13158

['protected void doStop() throws Exception {', 'super.doStop();', 'if (endpoint.isWebSocket()) {', 'endpoint.getComponent().unregisterEndpoint(endpoint.getHttpHandlerRegistrationInfo(), endpoint.getSslContext());', '}', 'if (worker != null && !worker.isShutdown()) {']
['shutting down worker ', ['worker']]
camel sample_13158

['public void onApplicationEvent(ContextRefreshedEvent event) {', 'ApplicationContext applicationContext = event.getApplicationContext();', 'if (this.applicationContext.equals(applicationContext)) {', 'CamelContext camelContext = event.getApplicationContext().getBean(CamelContext.class);', 'if (camelContext.getStatus().isStopped()) {']
['post processing camelcontext bean ', ['camelcontext', 'getname']]
camel sample_10774

['public void onApplicationEvent(ContextRefreshedEvent event) {', 'ApplicationContext applicationContext = event.getApplicationContext();', 'if (this.applicationContext.equals(applicationContext)) {', 'CamelContext camelContext = event.getApplicationContext().getBean(CamelContext.class);', 'if (camelContext.getStatus().isStopped()) {', 'for (RoutesBuilder routesBuilder : configuration.routes()) {', 'boolean abs = Modifier.isAbstract(routesBuilder.getClass().getModifiers());', 'if (!abs) {', 'try {']
['injecting following route into the camelcontext ', ['routesbuilder']]
camel sample_10774

['try {', 'camelContext.addRoutes(routesBuilder);', '} catch (Exception e) {', 'throw new CamelSpringJavaconfigInitializationException(e);', '}', '}', '}', 'try {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['skipping starting camelcontext s as system property skipstartingcamelcontext is set to be true ', []]
camel sample_10774

['boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else {', 'camelContext.start();', '}', '} catch (Exception e) {', 'throw new CamelSpringJavaconfigInitializationException(e);', '}', '}', '} else {']
['ignore contextrefreshedevent ', ['event']]
camel sample_10774

['public void channelActive(ChannelHandlerContext ctx) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel open ', ['ctx', 'channel']]
camel sample_10261

['public void channelInactive(ChannelHandlerContext ctx) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel closed ', ['ctx', 'channel']]
camel sample_10261

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'Object in = msg;', 'if (LOG.isDebugEnabled()) {']
['channel received body ', ['new', 'object', 'ctx', 'channel', 'in']]
camel sample_10261

['private void sendResponse(Object message, ChannelHandlerContext ctx, Exchange exchange) throws Exception {', 'Object body = getResponseBody(exchange);', 'if (body == null) {', 'noReplyLogger.log("No payload to send as reply for exchange: " + exchange);', 'if (consumer.getConfiguration().isDisconnectOnNoReply()) {', 'if (LOG.isTraceEnabled()) {']
['closing channel as no payload to send as reply at address ', ['ctx', 'channel', 'remoteaddress']]
camel sample_10261

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {']
['simulating a task which takes millis to reply ', ['getendpoint', 'getdelay']]
camel sample_1988

['public boolean process(final Exchange exchange, final AsyncCallback callback) {', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {']
['simulating a failure at attempt ', ['count']]
camel sample_1988

['public Object call() throws Exception {', 'Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'reply = getEndpoint().isAppend() ? exchange.getIn().getBody() + " " + reply : reply;', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());']
['setting reply ', ['reply']]
camel sample_1988

['Thread.sleep(getEndpoint().getDelay());', 'int count = counter.incrementAndGet();', 'if (getEndpoint().getFailFirstAttempts() >= count) {', 'exchange.setException(new CamelExchangeException("Simulated error at attempt " + count, exchange));', '} else {', 'String reply = getEndpoint().getReply();', 'reply = getEndpoint().isAppend() ? exchange.getIn().getBody() + " " + reply : reply;', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}']
['callback done false ', []]
camel sample_1988

['} else {', 'String reply = getEndpoint().getReply();', 'reply = getEndpoint().isAppend() ? exchange.getIn().getBody() + " " + reply : reply;', 'exchange.getOut().setBody(reply);', 'exchange.getOut().setHeaders(exchange.getIn().getHeaders());', '}', 'callback.done(false);', 'return null;', '}', '});']
['task submitted now tell camel routing engine to that this exchange is being continued asynchronously ', []]
camel sample_1988

['public void execute() {', 'DomainMetadataRequest request = new DomainMetadataRequest() .withDomainName(determineDomainName());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8750

['public void execute() {', 'DomainMetadataRequest request = new DomainMetadataRequest() .withDomainName(determineDomainName());', 'DomainMetadataResult result = this.sdbClient.domainMetadata(request);']
['received result ', ['result']]
camel sample_8750

['public SecureRandom createSecureRandom() throws GeneralSecurityException {']
['creating securerandom from securerandomparameters ', ['this']]
camel sample_4289

['public SecureRandom createSecureRandom() throws GeneralSecurityException {', 'SecureRandom secureRandom;', 'if (this.getProvider() != null) {', 'secureRandom = SecureRandom.getInstance(this.parsePropertyValue(this.getAlgorithm()), this.parsePropertyValue(this.getProvider()));', '} else {', 'secureRandom = SecureRandom.getInstance(this.parsePropertyValue(this.getAlgorithm()));', '}']
['securerandom is using provider and algorithm ', ['new', 'object', 'securerandom', 'securerandom', 'getprovider', 'securerandom', 'getalgorithm']]
camel sample_4289

['private Repository getLocalRepository() throws IOException {', 'FileRepositoryBuilder builder = new FileRepositoryBuilder();', 'Repository repo = null;', 'try {', 'repo = builder.setGitDir(new File(endpoint.getLocalPath(), ".git")).readEnvironment() .findGitDir() .build();', '} catch (IOException e) {']
['there was an error cannot open repository ', ['endpoint', 'getlocalpath']]
camel sample_9141

['public void testFutureEcho() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['got future ', []]
camel sample_3262

['public void testFutureEcho() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['waiting for future to be done ', []]
camel sample_3262

['public void testFutureEchoCallTwoTimes() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['got future ', []]
camel sample_3262

['public void testFutureEchoCallTwoTimes() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);']
['waiting for future to be done ', []]
camel sample_3262

['public void testFutureEchoCallTwoTimes() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);', 'assertEquals("Four", future.get(5, TimeUnit.SECONDS));', 'future = service.asText(5);']
['got future ', []]
camel sample_3262

['public void testFutureEchoCallTwoTimes() throws Exception {', 'Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class);', 'Future<String> future = service.asText(4);', 'assertEquals("Four", future.get(5, TimeUnit.SECONDS));', 'future = service.asText(5);']
['waiting for future to be done ', []]
camel sample_3262

['public void testProxy() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6430

['public static void main(String[] args) throws Exception {']
['about to run splunk camel integration ', []]
camel sample_17770

['public static void main(String[] args) throws Exception {', 'CamelContext camelContext = new DefaultCamelContext();', 'camelContext.addRoutes(new SplunkPublishEventRouteBuilder());', 'ProducerTemplate eventProducer = camelContext.createProducerTemplate();', 'camelContext.start();', 'eventProducer.request("direct:start", new SplunkEventProcessor());']
['successfully published event to splunk ', []]
camel sample_17770

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JdbcComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jdbc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jdbc.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_768

['public String say() {']
['invoking say method with message ', ['message']]
camel sample_15608

['answer.setTimeoutCheckerExecutorService(timeoutThreadPool);', 'answer.setShutdownTimeoutCheckerExecutorService(shutdownTimeoutThreadPool);', 'answer.setParallelProcessing(parallel);', 'if (getOptimisticLocking() != null) {', 'answer.setOptimisticLocking(getOptimisticLocking());', '}', 'if (getCompletionPredicate() != null) {', 'Predicate predicate = getCompletionPredicate().createPredicate(routeContext);', 'answer.setCompletionPredicate(predicate);', '} else if (strategy instanceof Predicate) {']
['using aggregationstrategy as completion predicate ', ['strategy']]
camel sample_5359

['if (answer.contains(name) && port != null) {', 'answer = answer.replaceFirst(name, host + ":" + port);', '}', 'if (answer.contains(name) && port == null) {', 'answer = answer.replaceFirst(name, host);', '}', 'if (!answer.startsWith(scheme)) {', 'answer = scheme + ":" + answer;', '}', '}']
['camel endpoint uri for calling service on server ', ['answer', 'name', 'host', 'port']]
camel sample_4118

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();']
['got event with body and action ', ['in', 'getbody', 'in', 'getheader', 'kubernetesconstants', 'kubernetes', 'event', 'action']]
camel sample_13226

['String messageAsXml = MessageHelper.dumpAsXml(exchange.getIn(), true, 2, isBodyIncludeStreams(), isBodyIncludeFiles(), getBodyMaxChars());', 'long uid = debugCounter.incrementAndGet();', 'BacklogTracerEventMessage msg = new DefaultBacklogTracerEventMessage(uid, timestamp, routeId, toNode, exchangeId, messageAsXml);', 'suspendedBreakpointMessages.put(nodeId, msg);', 'final SuspendedExchange se = suspendedBreakpoints.get(nodeId);', 'if (se != null) {', 'logger.log("NodeBreakpoint at node " + toNode + " is waiting to continue for exchangeId: " + exchangeId);', 'try {', 'boolean hit = se.getLatch().await(fallbackTimeout, TimeUnit.SECONDS);', 'if (!hit) {']
['nodebreakpoint at node timed out and is continued exchangeid ', ['log', 'tonode', 'exchangeid', 'logginglevel', 'warn']]
camel sample_4548

['String messageAsXml = MessageHelper.dumpAsXml(exchange.getIn(), true, 2, isBodyIncludeStreams(), isBodyIncludeFiles(), getBodyMaxChars());', 'long uid = debugCounter.incrementAndGet();', 'BacklogTracerEventMessage msg = new DefaultBacklogTracerEventMessage(uid, timestamp, routeId, toNode, exchangeId, messageAsXml);', 'suspendedBreakpointMessages.put(toNode, msg);', 'SuspendedExchange se = new SuspendedExchange(exchange, new CountDownLatch(1));', 'suspendedBreakpoints.put(toNode, se);', 'logger.log("StepBreakpoint at node " + toNode + " is waiting to continue for exchangeId: " + exchange.getExchangeId());', 'try {', 'boolean hit = se.getLatch().await(fallbackTimeout, TimeUnit.SECONDS);', 'if (!hit) {']
['stepbreakpoint at node timed out and is continued exchangeid ', ['log', 'tonode', 'exchange', 'getexchangeid', 'logginglevel', 'warn']]
camel sample_4548

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<XStreamDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xstream.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xstream.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_504

['if (index != -1) {', 'path = uri.substring(index + 1);', "index = path.indexOf('?');", 'if (index != -1) {', 'path = path.substring(0, index);', '}', 'path = path.replaceAll(":", "");', 'try {', 'path = URLDecoder.decode(path, "UTF-8");', '} catch (UnsupportedEncodingException e) {']
['failed to decode url path ignoring exception ', ['path', 'e']]
camel sample_8212

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BonitaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bonita.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bonita.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1199

['if (!callback.await(API_TIMEOUT, TimeUnit.SECONDS)) {', 'throw new SalesforceException("API call timeout!", null);', '}', 'final SalesforceException callbackException = callback.getException();', 'if (callbackException != null) {', 'throw callbackException;', '}', 'QueryRecordsPushTopic records = OBJECT_MAPPER.readValue(callback.getResponse(), QueryRecordsPushTopic.class);', 'if (records.getTotalSize() == 1) {', 'PushTopic topic = records.getRecords().get(0);']
['found existing topic ', ['topicname', 'topic']]
camel sample_14760

['topic.setDescription("Topic created by Camel Salesforce component");', 'topic.setNotifyForFields(config.getNotifyForFields());', 'if (preApi29) {', 'topic.setNotifyForOperations(config.getNotifyForOperations());', '} else {', 'topic.setNotifyForOperationCreate(config.getNotifyForOperationCreate());', 'topic.setNotifyForOperationDelete(config.getNotifyForOperationDelete());', 'topic.setNotifyForOperationUndelete(config.getNotifyForOperationUndelete());', 'topic.setNotifyForOperationUpdate(config.getNotifyForOperationUpdate());', '}']
['creating topic ', ['topicname', 'topic']]
camel sample_14760

['private void updateTopic(String topicId) throws CamelException {', 'final String query = config.getSObjectQuery();']
['updating topic with query ', ['topicname', 'query']]
camel sample_14760

['public void parseURI(URI uri, Map<String, Object> parameters, RouteboxComponent component) throws Exception {', 'String protocol = uri.getScheme();', 'if (!protocol.equalsIgnoreCase("routebox")) {', 'throw new IllegalArgumentException("Unrecognized protocol: " + protocol + " for uri: " + uri);', '}', 'setUri(uri);', 'setAuthority(uri.getAuthority());', 'if (LOG.isTraceEnabled()) {']
['authority ', ['uri', 'getauthority']]
camel sample_14625

['innerContext = component.resolveAndRemoveReferenceParameter(parameters, "innerContext", CamelContext.class, new DefaultCamelContext());', '}', '} else {', 'innerContext = component.getCamelContext();', '}', 'innerProducerTemplate = innerContext.createProducerTemplate();', 'setQueueSize(component.getAndRemoveParameter(parameters, "size", Integer.class, 0));', 'dispatchStrategy = component.resolveAndRemoveReferenceParameter(parameters, "dispatchStrategy", RouteboxDispatchStrategy.class, null);', 'dispatchMap = component.resolveAndRemoveReferenceParameter(parameters, "dispatchMap", HashMap.class, new HashMap<String, String>());', 'if (dispatchStrategy == null && dispatchMap == null) {']
['no routebox dispatch map or strategy has been set routebox may not have more than one inner route ', []]
camel sample_14625

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DockerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.docker.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.docker.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_441

['public String[] route(String body) {']
['called with body ', ['this', 'body']]
camel sample_2465

['public void testCbr() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6426

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SjmsBatchComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms-batch.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sjms-batch.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1249

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();']
['got event with body and action ', ['in', 'getbody', 'in', 'getheader', 'kubernetesconstants', 'kubernetes', 'event', 'action']]
camel sample_13230

['public static Predicate dropNonCoordinatorViews() {', 'return new Predicate() {', 'public boolean matches(Exchange exchange) {', 'Object body = exchange.getIn().getBody();']
['filtering message ', ['body']]
camel sample_16931

['public static Predicate dropNonCoordinatorViews() {', 'return new Predicate() {', 'public boolean matches(Exchange exchange) {', 'Object body = exchange.getIn().getBody();', 'if (body instanceof View) {', 'View view = (View) body;', 'Address coordinatorNodeAddress =  view.getMembers().get(COORDINATOR_NODE_INDEX);', 'Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class);']
['comparing endpoint channel address against the coordinator node address ', ['channeladdress', 'coordinatornodeaddress']]
camel sample_16931

['public static Predicate dropNonCoordinatorViews() {', 'return new Predicate() {', 'public boolean matches(Exchange exchange) {', 'Object body = exchange.getIn().getBody();', 'if (body instanceof View) {', 'View view = (View) body;', 'Address coordinatorNodeAddress =  view.getMembers().get(COORDINATOR_NODE_INDEX);', 'Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class);', 'return channelAddress.equals(coordinatorNodeAddress);', '}']
['body is not an instance of org jgroups view skipping filter ', ['body']]
camel sample_16931

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MvelComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mvel.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mvel.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1025

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RefComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ref.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ref.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_841

['private void sendOutMessage(Exchange exchange) throws QFJException {', 'Message camelMessage = exchange.getOut();', 'quickfix.Message quickfixjMessage = camelMessage.getBody(quickfix.Message.class);']
['sending fix message reply ', ['quickfixjmessage']]
camel sample_10670

['}', 'if (System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN) != null) {', 'managementNamePattern = System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN);', 'values.put(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN, managementNamePattern);', '}', 'if (System.getProperty(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS) != null) {', 'useHostIPAddress = Boolean.getBoolean(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS);', 'values.put(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS, useHostIPAddress);', '}', 'if (!values.isEmpty()) {']
['managementagent detected jvm system properties ', ['values']]
camel sample_4698

['public void unregister(ObjectName name) throws JMException {', 'if (isRegistered(name)) {', 'ObjectName on = mbeansRegistered.remove(name);', 'server.unregisterMBean(on);']
['unregistered mbean with objectname ', ['name']]
camel sample_4698

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext");', 'if (server == null) {', 'finalizeSettings();', 'createMBeanServer();', '}', 'assembler = camelContext.getManagementMBeanAssembler();', 'ServiceHelper.startService(assembler);']
['starting jmx agent on server ', ['getmbeanserver']]
camel sample_4698

['protected void doStop() throws Exception {', 'if (cs != null) {', 'try {', 'cs.stop();']
['stopped jmx connector ', []]
camel sample_4698

['protected void doStop() throws Exception {', 'if (cs != null) {', 'try {', 'cs.stop();', '} catch (IOException e) {']
['error occurred during stopping jmxconnectorservice this exception will be ignored ', ['cs']]
camel sample_4698

['if (cs != null) {', 'try {', 'cs.stop();', '} catch (IOException e) {', '}', 'cs = null;', '}', 'if (registry != null) {', 'try {', 'UnicastRemoteObject.unexportObject(registry, true);']
['unexported jmx rmi registry ', []]
camel sample_4698

['try {', 'cs.stop();', '} catch (IOException e) {', '}', 'cs = null;', '}', 'if (registry != null) {', 'try {', 'UnicastRemoteObject.unexportObject(registry, true);', '} catch (NoSuchObjectException e) {']
['error occurred while unexporting jmx rmi registry this exception will be ignored ', []]
camel sample_4698

['}', 'if (mbeansRegistered.isEmpty()) {', 'return;', '}', 'ObjectName[] mBeans = mbeansRegistered.keySet().toArray(new ObjectName[mbeansRegistered.size()]);', 'int caught = 0;', 'for (ObjectName name : mBeans) {', 'try {', 'unregister(name);', '} catch (Exception e) {']
['exception unregistering mbean with name ', ['name', 'e']]
camel sample_4698

['ObjectName[] mBeans = mbeansRegistered.keySet().toArray(new ObjectName[mbeansRegistered.size()]);', 'int caught = 0;', 'for (ObjectName name : mBeans) {', 'try {', 'unregister(name);', '} catch (Exception e) {', 'caught++;', '}', '}', 'if (caught > 0) {']
['a number of exceptions caught while unregistering mbeans during stop operation see info log for details ', ['caught']]
camel sample_4698

['private void registerMBeanWithServer(Object obj, ObjectName name, boolean forceRegistration) throws JMException {', 'boolean exists = isRegistered(name);', 'if (exists) {', 'if (forceRegistration) {']
['forceregistration enabled unregistering existing mbean with objectname ', ['name']]
camel sample_4698

['private void registerMBeanWithServer(Object obj, ObjectName name, boolean forceRegistration) throws JMException {', 'boolean exists = isRegistered(name);', 'if (exists) {', 'if (forceRegistration) {', 'server.unregisterMBean(name);', '} else {']
['mbean already registered with objectname ', ['name']]
camel sample_4698

['private void registerMBeanWithServer(Object obj, ObjectName name, boolean forceRegistration) throws JMException {', 'boolean exists = isRegistered(name);', 'if (exists) {', 'if (forceRegistration) {', 'server.unregisterMBean(name);', '} else {', '}', '}', 'ObjectInstance instance = null;', 'if (forceRegistration || !exists) {']
['registering mbean with objectname ', ['name']]
camel sample_4698

['server.unregisterMBean(name);', '} else {', '}', '}', 'ObjectInstance instance = null;', 'if (forceRegistration || !exists) {', 'instance = server.registerMBean(obj, name);', '}', 'if (instance != null) {', 'ObjectName registeredName = instance.getObjectName();']
['registered mbean with objectname ', ['registeredname']]
camel sample_4698

['canAccessSystemProps = false;', '}', 'if (canAccessSystemProps) {', 'try {', 'if (useHostIPAddress) {', 'hostName = InetAddress.getLocalHost().getHostAddress();', '} else {', 'hostName = InetAddressUtil.getLocalHostName();', '}', '} catch (UnknownHostException uhe) {']
['cannot determine localhost name or address using default ', ['default', 'registry', 'port', 'uhe']]
camel sample_4698

['}', '} else {', 'hostName = DEFAULT_HOST;', '}', 'server = findOrCreateMBeanServer();', 'try {', 'if (createConnector) {', 'createJmxConnector(hostName);', '}', '} catch (IOException ioe) {']
['could not create and start jmx connector ', ['ioe']]
camel sample_4698

['protected MBeanServer findOrCreateMBeanServer() {', 'if (usePlatformMBeanServer) {', 'return ManagementFactory.getPlatformMBeanServer();', '}', 'List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);', 'for (MBeanServer server : servers) {']
['found mbeanserver with default domain ', ['server', 'getdefaultdomain']]
camel sample_4698

['protected void createJmxConnector(String host) throws IOException {', 'ObjectHelper.notEmpty(serviceUrlPath, "serviceUrlPath");', 'ObjectHelper.notNull(registryPort, "registryPort");', 'try {', 'registry = LocateRegistry.createRegistry(registryPort);']
['created jmxconnector rmi registry on port ', ['registryport']]
camel sample_4698

['final JMXServiceURL url;', 'if (connectorPort > 0) {', 'url = new JMXServiceURL("service:jmx:rmi: + ":" + registryPort + path);', '} else {', 'url = new JMXServiceURL("service:jmx:rmi: }', 'cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);', 'String threadName = camelContext.getExecutorServiceManager().resolveThreadName("JMXConnector: " + url);', 'Thread thread = getCamelContext().getExecutorServiceManager().newThread(threadName, new Runnable() {', 'public void run() {', 'try {']
['staring jmx connector thread to listen at ', ['url']]
camel sample_4698

['if (connectorPort > 0) {', 'url = new JMXServiceURL("service:jmx:rmi: + ":" + registryPort + path);', '} else {', 'url = new JMXServiceURL("service:jmx:rmi: }', 'cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);', 'String threadName = camelContext.getExecutorServiceManager().resolveThreadName("JMXConnector: " + url);', 'Thread thread = getCamelContext().getExecutorServiceManager().newThread(threadName, new Runnable() {', 'public void run() {', 'try {', 'cs.start();']
['jmx connector thread started and listening at ', ['url']]
camel sample_4698

['url = new JMXServiceURL("service:jmx:rmi: + ":" + registryPort + path);', '} else {', 'url = new JMXServiceURL("service:jmx:rmi: }', 'cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);', 'String threadName = camelContext.getExecutorServiceManager().resolveThreadName("JMXConnector: " + url);', 'Thread thread = getCamelContext().getExecutorServiceManager().newThread(threadName, new Runnable() {', 'public void run() {', 'try {', 'cs.start();', '} catch (IOException ioe) {']
['could not start jmxconnector thread at jmx connector not in use ', ['url', 'ioe']]
camel sample_4698

['public static void startServer() throws Exception {', 'greeterImpl = new GreeterImpl();', 'String address = "http: endpoint = Endpoint.publish(address, greeterImpl);']
['the ws endpoint is published ', []]
camel sample_6021

['Integer dropletId = exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_ID, Integer.class);', 'String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class);', 'FloatingIP ip;', 'if (ObjectHelper.isNotEmpty(dropletId)) {', 'ip = getEndpoint().getDigitalOceanClient().createFloatingIP(dropletId);', '} else if (ObjectHelper.isNotEmpty(region)) {', 'ip = getEndpoint().getDigitalOceanClient().createFloatingIP(region);', '} else {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " or " + DigitalOceanHeaders.REGION + " must be specified");', '}']
['floatingip ', ['ip']]
camel sample_8896

['private void getFloatingIPs(Exchange exchange) throws Exception {', 'FloatingIPs ips = getEndpoint().getDigitalOceanClient().getAvailableFloatingIPs(configuration.getPage(), configuration.getPerPage());']
['all floating ips page per page ', ['configuration', 'getpage', 'configuration', 'getperpage', 'ips', 'getfloatingips']]
camel sample_8896

['private void getFloatingIP(Exchange exchange) throws Exception {', 'String ipAddress = exchange.getIn().getHeader(DigitalOceanHeaders.FLOATING_IP_ADDRESS, String.class);', 'if (ObjectHelper.isEmpty(ipAddress)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.FLOATING_IP_ADDRESS + " must be specified");', '}', 'FloatingIP ip = getEndpoint().getDigitalOceanClient().getFloatingIPInfo(ipAddress);']
['floating ip ', ['ip']]
camel sample_8896

['private void deleteFloatingIP(Exchange exchange) throws Exception {', 'String ipAddress = exchange.getIn().getHeader(DigitalOceanHeaders.FLOATING_IP_ADDRESS, String.class);', 'if (ObjectHelper.isEmpty(ipAddress)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.FLOATING_IP_ADDRESS + " must be specified");', '}', 'Delete delete = getEndpoint().getDigitalOceanClient().deleteFloatingIP(ipAddress);']
['delete floating ip ', ['delete']]
camel sample_8896

['private void assignFloatingIPToDroplet(Exchange exchange) throws Exception {', 'Integer dropletId = exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_ID, Integer.class);', 'if (ObjectHelper.isEmpty(dropletId)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified");', '}', 'String ipAddress = exchange.getIn().getHeader(DigitalOceanHeaders.FLOATING_IP_ADDRESS, String.class);', 'if (ObjectHelper.isEmpty(ipAddress)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.FLOATING_IP_ADDRESS + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().assignFloatingIP(dropletId, ipAddress);']
['assign floating ip to droplet ', ['action']]
camel sample_8896

['private void unassignFloatingIP(Exchange exchange) throws Exception {', 'String ipAddress = exchange.getIn().getHeader(DigitalOceanHeaders.FLOATING_IP_ADDRESS, String.class);', 'if (ObjectHelper.isEmpty(ipAddress)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.FLOATING_IP_ADDRESS + " must be specified");', '}', 'Action action = getEndpoint().getDigitalOceanClient().unassignFloatingIP(ipAddress);']
['unassign floating ip ', ['action']]
camel sample_8896

['private void getFloatingIPActions(Exchange exchange) throws Exception {', 'String ipAddress = exchange.getIn().getHeader(DigitalOceanHeaders.FLOATING_IP_ADDRESS, String.class);', 'if (ObjectHelper.isEmpty(ipAddress)) {', 'throw new IllegalArgumentException(DigitalOceanHeaders.FLOATING_IP_ADDRESS + " must be specified");', '}', 'Actions actions = getEndpoint().getDigitalOceanClient().getAvailableFloatingIPActions(ipAddress, configuration.getPage(), configuration.getPerPage());']
['actions for floatingip page per page ', ['ipaddress', 'configuration', 'getpage', 'configuration', 'getperpage', 'actions', 'getactions']]
camel sample_8896

['public void print(Doc doc, int copies, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {']
['print service ', ['this', 'printservice', 'getname']]
camel sample_17224

['public void print(Doc doc, int copies, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {']
['about to print copy s ', ['copies']]
camel sample_17224

['public void print(Doc doc, int copies, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {', 'for (int i = 0; i < copies; i++) {', 'if (!sendToPrinter) {']
['print flag is set to false this job will not be printed until this setting remains in effect please set the flag to true or remove the setting ', []]
camel sample_17224

['File file;', 'if (mimeType.equalsIgnoreCase("GIF") || mimeType.equalsIgnoreCase("RENDERABLE_IMAGE")) {', 'file = new File("./target/TestPrintJobNo" + i + "_" + UUID.randomUUID() + ".gif");', '} else if (mimeType.equalsIgnoreCase("JPEG")) {', 'file = new File("./target/TestPrintJobNo" + i + "_" + UUID.randomUUID() + ".jpeg");', '} else if (mimeType.equalsIgnoreCase("PDF")) {', 'file = new File("./target/TestPrintJobNo" + i + "_" + UUID.randomUUID() + ".pdf");', '} else {', 'file = new File("./target/TestPrintJobNo" + i + "_" + UUID.randomUUID() + ".txt");', '}']
['writing print job to file ', ['file', 'getabsolutepath']]
camel sample_17224

['try {', 'InputStream in = doc.getStreamForBytes();', 'FileOutputStream fos = new FileOutputStream(file);', 'IOHelper.copyAndCloseInput(in, fos);', 'IOHelper.close(fos);', '} catch (Exception e) {', 'throw new PrintException("Error writing Document to the target file " + file.getAbsolutePath());', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['issuing job to printer ', ['i', 'this', 'printservice', 'getname']]
camel sample_17224

['public void consumerInjection(Method method, Object bean, String beanName) {', 'Consume consume = method.getAnnotation(Consume.class);', 'if (consume != null && matchContext(consume.context())) {']
['creating a consumer for ', ['consume']]
camel sample_4159

['if (multipleConsumer || processor == null) {', 'processor = new SubscribeMethodProcessor(endpoint);', 'endpoint.getCamelContext().addService(processor, true);', 'processor.addMethod(bean, method, endpoint, predicate);', 'Consumer consumer = endpoint.createConsumer(processor);', 'startService(consumer, endpoint.getCamelContext(), bean, beanName);', '} else {', 'processor.addMethod(bean, method, endpoint, predicate);', '}', 'if (predicate != null) {']
['subscribed method to consume from endpoint with predicate ', ['method', 'endpoint', 'predicate']]
camel sample_4159

['processor = new SubscribeMethodProcessor(endpoint);', 'endpoint.getCamelContext().addService(processor, true);', 'processor.addMethod(bean, method, endpoint, predicate);', 'Consumer consumer = endpoint.createConsumer(processor);', 'startService(consumer, endpoint.getCamelContext(), bean, beanName);', '} else {', 'processor.addMethod(bean, method, endpoint, predicate);', '}', 'if (predicate != null) {', '} else {']
['subscribed method to consume from endpoint ', ['method', 'endpoint']]
camel sample_4159

['protected void startService(Service service, CamelContext camelContext, Object bean, String beanName) throws Exception {', 'if (camelContext != null) {', 'camelContext.deferStartService(service, true);', '} else {', 'ServiceHelper.startService(service);', '}', 'boolean singleton = isSingleton(bean, beanName);', 'if (!singleton) {']
['service is not singleton so you must remember to stop it manually ', ['service']]
camel sample_4159

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesSecretsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-secrets.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-secrets.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_545

['context.addService(service);', 'context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:atomix?delay=1s&period=1s") .routeId("route-" + address.port()) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down node ', ['address']]
camel sample_10298

['protected void doStart() throws Exception {', 'super.doStart();', 'transactionTemplate.execute(new TransactionCallback<Boolean>() {', 'public Boolean doInTransaction(TransactionStatus status) {', 'try {', 'jdbcTemplate.execute(getTableExistsString());']
['expected table for jdbcmessageidrepository exist ', []]
camel sample_9012

['protected void doStart() throws Exception {', 'super.doStart();', 'transactionTemplate.execute(new TransactionCallback<Boolean>() {', 'public Boolean doInTransaction(TransactionStatus status) {', 'try {', 'jdbcTemplate.execute(getTableExistsString());', '} catch (DataAccessException e) {', 'if (createTableIfNotExists) {', 'try {']
['creating table for jdbcmessageidrepository because it doesn t exist ', []]
camel sample_9012

['protected void doStart() throws Exception {', 'super.doStart();', 'transactionTemplate.execute(new TransactionCallback<Boolean>() {', 'public Boolean doInTransaction(TransactionStatus status) {', 'try {', 'jdbcTemplate.execute(getTableExistsString());', '} catch (DataAccessException e) {', 'if (createTableIfNotExists) {', 'try {', 'jdbcTemplate.execute(getCreateString());']
['table created with query ', ['getcreatestring']]
camel sample_9012

['super.doStart();', 'transactionTemplate.execute(new TransactionCallback<Boolean>() {', 'public Boolean doInTransaction(TransactionStatus status) {', 'try {', 'jdbcTemplate.execute(getTableExistsString());', '} catch (DataAccessException e) {', 'if (createTableIfNotExists) {', 'try {', 'jdbcTemplate.execute(getCreateString());', '} catch (DataAccessException dae) {']
['can t create table for jdbcmessageidrepository with query because of this may be a permissions problem please create this table and try again ', ['getcreatestring', 'e', 'getmessage']]
camel sample_9012

['protected void initDozerBeanContainerAndMapper() throws Exception {']
['configuring ', ['mapper', 'class', 'getname']]
camel sample_9442

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XChangeComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xchange.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xchange.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1072

['public InputStream getResourceAsInputStream() throws IOException {', 'InputStream is;', 'if (isContentCache()) {', 'synchronized (this) {', 'if (buffer == null) {']
['reading resource into the content cache ', ['resourceuri']]
camel sample_4765

['public InputStream getResourceAsInputStream() throws IOException {', 'InputStream is;', 'if (isContentCache()) {', 'synchronized (this) {', 'if (buffer == null) {', 'is = getResourceAsInputStreamWithoutCache();', 'buffer = IOConverter.toBytes(is);', 'IOHelper.close(is, resourceUri, log);', '}', '}']
['using resource from the content cache ', ['resourceuri']]
camel sample_4765

['public void clearContentCache() {']
['clearing resource from the content cache ', ['resourceuri']]
camel sample_4765

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CwComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-cw.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-cw.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1137

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<WebsocketComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.websocket.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.websocket.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_953

['public void execute() {', 'GetAttributesRequest request = new GetAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withConsistentRead(determineConsistentRead()) .withAttributeNames(determineAttributeNames());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8746

['public void execute() {', 'GetAttributesRequest request = new GetAttributesRequest() .withDomainName(determineDomainName()) .withItemName(determineItemName()) .withConsistentRead(determineConsistentRead()) .withAttributeNames(determineAttributeNames());', 'GetAttributesResult result = this.sdbClient.getAttributes(request);']
['received result ', ['result']]
camel sample_8746

['clientBuilder.setConnectionManagerShared(true);', '}', 'if (!useSystemProperties) {', 'if (ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyPort"))) {', 'String host = getCamelContext().getProperty("http.proxyHost");', 'int port = Integer.parseInt(getCamelContext().getProperty("http.proxyPort"));', 'String scheme = getCamelContext().getProperty("http.proxyScheme");', 'if (scheme == null) {', 'scheme = HttpHelper.isSecureConnection(getEndpointUri()) ? "https" : "http";', '}']
['camelcontext properties http proxyhost http proxyport and http proxyscheme detected using http proxy host port scheme ', ['new', 'object', 'host', 'port', 'scheme']]
camel sample_17048

['if (isAuthenticationPreemptive()) {', 'clientBuilder.addInterceptorFirst(new PreemptiveAuthInterceptor());', '}', 'HttpClientConfigurer configurer = getHttpClientConfigurer();', 'if (configurer != null) {', 'configurer.configureHttpClient(clientBuilder);', '}', 'if (isBridgeEndpoint()) {', 'clientBuilder.setDefaultCookieStore(new NoopCookieStore());', '}']
['setup the httpclientbuilder ', ['clientbuilder']]
camel sample_17048

['} else {', 'useCdiMain = detectCDIOnClassPath();', '}', 'boolean usingBlueprintMain;', 'if (useBlueprint != null) {', 'usingBlueprintMain = useBlueprint;', '} else {', 'usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles();', '}', 'if (killAfter != -1) {']
['warning killafter is now deprecated do you need it please comment on mexec ', []]
camel sample_67

['}', 'if (!durationMaxMessages.equals("-1")) {', 'args.add("-dm");', 'args.add(durationMaxMessages);', '}', 'if (arguments != null) {', 'args.addAll(Arrays.asList(arguments));', '}', 'if (usingSpringJavaConfigureMain) {', 'mainClass = "org.apache.camel.spring.javaconfig.Main";']
['using org apache camel spring javaconfig main to initiate a camelcontext ', []]
camel sample_67

['args.add(durationMaxMessages);', '}', 'if (arguments != null) {', 'args.addAll(Arrays.asList(arguments));', '}', 'if (usingSpringJavaConfigureMain) {', 'mainClass = "org.apache.camel.spring.javaconfig.Main";', '} else if (useCdiMain) {', 'mainClass = "org.apache.camel.cdi.Main";', 'extraPluginDependencyArtifactId = "camel-cdi";']
['using to initiate a camelcontext ', ['mainclass']]
camel sample_67

['mainClass = "org.apache.camel.test.blueprint.Main";', 'extraPluginDependencyArtifactId = "camel-test-blueprint";', 'if (configAdminPid != null) {', 'args.add("-pid");', 'args.add(configAdminPid);', '}', 'if (configAdminFileName != null) {', 'args.add("-pf");', 'args.add(configAdminFileName);', '}']
['using org apache camel test blueprint main to initiate a camelcontext ', []]
camel sample_67

['extraPluginDependencyArtifactId = "camel-test-blueprint";', 'if (configAdminPid != null) {', 'args.add("-pid");', 'args.add(configAdminPid);', '}', 'if (configAdminFileName != null) {', 'args.add("-pf");', 'args.add(configAdminFileName);', '}', '} else if (mainClass != null) {']
['using custom to initiate a camelcontext ', ['mainclass']]
camel sample_67

['if (configAdminPid != null) {', 'args.add("-pid");', 'args.add(configAdminPid);', '}', 'if (configAdminFileName != null) {', 'args.add("-pf");', 'args.add(configAdminFileName);', '}', '} else if (mainClass != null) {', '} else {']
['using org apache camel spring main to initiate a camelcontext ', []]
camel sample_67

['msg.append(arguments[i]);', '}', 'msg.append(")");', 'getLog().debug(msg);', '}', 'IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass /* name */);', 'final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {', 'public void run() {', 'try {', 'beforeBootstrapCamel();']
['starting camel ', []]
camel sample_67

['IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass /* name */);', 'final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {', 'public void run() {', 'try {', 'beforeBootstrapCamel();', 'Method main = Thread.currentThread().getContextClassLoader() .loadClass(mainClass).getMethod("main", String[].class);', 'main.invoke(null, new Object[]{arguments});', 'afterBootstrapCamel();', '} catch (Exception e) {', 'getLog().error("*************************************");']
['error occurred while running main from ', ['mainclass']]
camel sample_67

['getLog().error("*************************************");', 'Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e);', '}', '}', '}, mainClass + ".main()");', 'bootstrapThread.setContextClassLoader(getClassLoader());', 'setSystemProperties();', 'bootstrapThread.start();', 'joinNonDaemonThreads(threadGroup);', 'if (keepAlive) {']
['warning keepalive is now deprecated and obsolete do you need it please comment on mexec ', []]
camel sample_67

['bootstrapThread.start();', 'joinNonDaemonThreads(threadGroup);', 'if (keepAlive) {', 'waitFor(0);', '}', 'if (cleanupDaemonThreads) {', 'terminateThreads(threadGroup);', 'try {', 'threadGroup.destroy();', '} catch (IllegalThreadStateException e) {']
['couldn t destroy threadgroup ', ['threadgroup', 'e']]
camel sample_67

['}', 'boolean doLog = false;', 'synchronized (this) {', 'if (uncaughtException == null) {', 'uncaughtException = throwable;', '} else {', 'doLog = true;', '}', '}', 'if (doLog) {']
['an additional exception was thrown ', ['throwable']]
camel sample_67

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {']
['joining on thread ', ['thread']]
camel sample_67

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {', 'thread.join(timeoutMsecs);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();']
['interrupted while joining against thread ', ['thread', 'e']]
camel sample_67

['private void joinThread(Thread thread, long timeoutMsecs) {', 'try {', 'thread.join(timeoutMsecs);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();', '}', 'if (thread.isAlive()) {']
['thread was interrupted but is still alive after waiting at least msecs ', ['thread', 'timeoutmsecs']]
camel sample_67

['private void terminateThreads(ThreadGroup threadGroup) {', 'long startTime = System.currentTimeMillis();', 'Set<Thread> uncooperativeThreads = new HashSet<Thread>();', 'for (Collection<Thread> threads = getActiveThreads(threadGroup); !threads.isEmpty(); threads = getActiveThreads(threadGroup), threads .removeAll(uncooperativeThreads)) {', 'for (Thread thread : threads) {']
['interrupting thread ', ['thread']]
camel sample_67

['}', 'long timeout = daemonThreadJoinTimeout - (System.currentTimeMillis() - startTime);', 'if (timeout > 0) {', 'joinThread(thread, timeout);', '}', 'if (!thread.isAlive()) {', 'continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {']
['thread will be thread stop ed ', ['thread']]
camel sample_67

['if (timeout > 0) {', 'joinThread(thread, timeout);', '}', 'if (!thread.isAlive()) {', 'continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {', 'thread.stop();', '} else {']
['thread will linger despite being asked to die via interruption ', ['thread']]
camel sample_67

['continue;', '}', 'uncooperativeThreads.add(thread);', 'if (stopUnresponsiveDaemonThreads) {', 'thread.stop();', '} else {', '}', '}', '}', 'if (!uncooperativeThreads.isEmpty()) {']
['note thread s did not finish despite being asked to via interruption this is not a problem with exec java it is a problem with the running code although not serious it should be remedied ', ['uncooperativethreads', 'size']]
camel sample_67

['}', '}', '}', 'if (!uncooperativeThreads.isEmpty()) {', '} else {', 'int activeCount = threadGroup.activeCount();', 'if (activeCount != 0) {', 'Thread[] threadsArray = new Thread[1];', 'threadGroup.enumerate(threadsArray);', 'if (getLog().isDebugEnabled()) {']
['strange thread s still active in the group such as ', ['activecount', 'threadgroup', 'threadsarray']]
camel sample_67

['private boolean detectCDIOnClassPath() {', 'List<Dependency> deps = project.getCompileDependencies();', 'for (Dependency dep : deps) {', 'if ("org.apache.camel".equals(dep.getGroupId()) && "camel-cdi".equals(dep.getArtifactId())) {']
['camel cdi detected on classpath ', []]
camel sample_67

['private boolean detectBlueprintOnClassPathOrBlueprintXMLFiles() {', 'List<Dependency> deps = project.getCompileDependencies();', 'for (Dependency dep : deps) {', 'if ("org.apache.camel".equals(dep.getGroupId()) && "camel-blueprint".equals(dep.getArtifactId())) {']
['camel blueprint detected on classpath ', []]
camel sample_67

['List<Dependency> deps = project.getCompileDependencies();', 'for (Dependency dep : deps) {', 'if ("org.apache.camel".equals(dep.getGroupId()) && "camel-blueprint".equals(dep.getArtifactId())) {', '}', '}', 'List<Resource> resources = project.getResources();', 'for (Resource res : resources) {', 'File dir = new File(res.getDirectory());', 'File xml = new File(dir, "OSGI-INF/blueprint");', 'if (xml.exists() && xml.isDirectory()) {']
['osgi blueprint xml files detected in directory ', ['xml']]
camel sample_67

['private ClassLoader getClassLoader() throws MojoExecutionException {', 'Set<URL> classpathURLs = new LinkedHashSet<URL>();', 'this.addRelevantProjectDependenciesToClasspath(classpathURLs);', 'this.addExtraPluginDependenciesToClasspath(classpathURLs);', 'this.addRelevantPluginDependenciesToClasspath(classpathURLs);', 'if (logClasspath) {']
['classpath ', []]
camel sample_67

['private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {', 'if (hasCommandlineArgs()) {', 'arguments = parseCommandlineArgs();', '}', 'try {', 'Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator();', 'while (iter.hasNext()) {', 'Artifact classPathElement = iter.next();', 'if (classPathElement.getArtifactId().equals("org.osgi.core")) {', 'if (getLog().isDebugEnabled()) {']
['skipping org osgi core ', ['classpathelement', 'getgroupid', 'classpathelement', 'getartifactid', 'classpathelement', 'getversion']]
camel sample_67

['}', 'try {', 'Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator();', 'while (iter.hasNext()) {', 'Artifact classPathElement = iter.next();', 'if (classPathElement.getArtifactId().equals("org.osgi.core")) {', 'if (getLog().isDebugEnabled()) {', '}', 'continue;', '}']
['adding plugin dependency artifact to classpath ', ['classpathelement', 'getartifactid']]
camel sample_67

['private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {', 'if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {', 'return;', '}', 'try {', 'Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies);', 'for (Artifact artifact : artifacts) {', 'if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId) || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {']
['adding extra plugin dependency artifact to classpath ', ['artifact', 'getartifactid']]
camel sample_67

['return;', '}', 'try {', 'Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies);', 'for (Artifact artifact : artifacts) {', 'if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId) || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {', 'path.add(artifact.getFile().toURI().toURL());', 'Set<Artifact> deps = resolveExecutableDependencies(artifact, true);', 'if (deps != null) {', 'for (Artifact dep : deps) {']
['adding extra plugin dependency artifact to classpath ', ['dep', 'getartifactid']]
camel sample_67

['private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {']
['project dependencies will be included ', []]
camel sample_67

['private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {', 'URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL();']
['adding to classpath ', ['mainclasses']]
camel sample_67

['private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {', 'if (this.includeProjectDependencies) {', 'try {', 'URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL();', 'path.add(mainClasses);', 'Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts());', 'dependencies.addAll(getAllNonTestScopedDependencies());', 'Iterator<Artifact> iter = dependencies.iterator();', 'while (iter.hasNext()) {', 'Artifact classPathElement = iter.next();']
['adding project dependency artifact to classpath ', ['classpathelement', 'getartifactid']]
camel sample_67

['Artifact classPathElement = iter.next();', 'File file = classPathElement.getFile();', 'if (file != null) {', 'path.add(file.toURI().toURL());', '}', '}', '} catch (MalformedURLException e) {', 'throw new MojoExecutionException("Error during setting up classpath", e);', '}', '} else {']
['project dependencies will be excluded ', []]
camel sample_67

['private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {', 'Set<Artifact> relevantDependencies;', 'if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {']
['all plugin dependencies will be included ', []]
camel sample_67

['private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {', 'Set<Artifact> relevantDependencies;', 'if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {', 'relevantDependencies = new HashSet<Artifact>(this.pluginDependencies);', '} else {']
['selected plugin dependencies will be included ', []]
camel sample_67

['Set<Artifact> relevantDependencies;', 'if (this.includePluginDependencies) {', 'if (this.executableDependency == null) {', 'relevantDependencies = new HashSet<Artifact>(this.pluginDependencies);', '} else {', 'Artifact executableArtifact = this.findExecutableArtifact();', 'Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact);', 'relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false);', '}', '} else {']
['only direct plugin dependencies will be included ', []]
camel sample_67

['Set<Artifact> executableDependencies = null;', 'try {', 'MavenProject executableProject = this.projectBuilder.buildFromRepository(executablePomArtifact, this.remoteRepositories, this.localRepository);', 'List<Artifact> dependencies = CastUtils.cast(executableProject.getDependencies());', 'Set<Artifact> dependencyArtifacts = CastUtils.cast(MavenMetadataSource.createArtifacts(this.artifactFactory, dependencies, null, null, null));', 'dependencyArtifacts.add(executableProject.getArtifact());', 'ArtifactResolutionResult result = artifactResolver.resolveTransitively(dependencyArtifacts, executablePomArtifact, Collections.emptyMap(), this.localRepository, this.remoteRepositories, metadataSource, new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME), Collections.emptyList());', 'executableDependencies = CastUtils.cast(result.getArtifacts());', '} catch (Exception ex) {', 'if (ignoreFailures) {']
['ignoring maven resolving dependencies failure ', ['ex', 'getmessage']]
camel sample_67

['private void waitFor(long millis) {', 'Object lock = new Object();', 'synchronized (lock) {', 'try {', 'lock.wait(millis);', '} catch (InterruptedException e) {', 'Thread.currentThread().interrupt();']
['spuriously interrupted while waiting for ms ', ['millis', 'e']]
camel sample_67

['public void process(Exchange exchange) throws Exception {', 'String eventName = getEventName(exchange);', 'String version = getVersion(exchange);']
['scheduleactivity ', ['eventname', 'version']]
camel sample_8802

['public void testJavaTransformer() throws Exception {', 'MockEndpoint abcresult = getMockEndpoint("mock:abcresult");', 'abcresult.expectedMessageCount(1);', 'abcresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting string xorderresponse convertion ', []]
camel sample_1320

['abcresult.expectedMessageCount(1);', 'abcresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals(XOrderResponse.class, exchange.getIn().getBody().getClass());', '}', '});', 'MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult");', 'xyzresult.expectedMessageCount(1);', 'xyzresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting string xorderresponse convertion is not yet performed ', []]
camel sample_1320

['public void testDataFormatTransformer() throws Exception {', 'MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult");', 'xyzresult.expectedMessageCount(1);', 'xyzresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting string xorderresponse convertion is not yet performed ', []]
camel sample_1320

['public void testEndpointTransformer() throws Exception {', 'MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult");', 'xyzresult.expectedMessageCount(1);', 'xyzresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting string xorderresponse convertion is not yet performed ', []]
camel sample_1320

['public void testCustomTransformer() throws Exception {', 'MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult");', 'xyzresult.expectedMessageCount(1);', 'xyzresult.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting string xorderresponse convertion is not yet performed ', []]
camel sample_1320

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters());', 'from("direct:abc") .inputType(AOrder.class) .outputType(AOrderResponse.class) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting input aorder convertion ', []]
camel sample_1320

['return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters());', 'from("direct:abc") .inputType(AOrder.class) .outputType(AOrderResponse.class) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals(AOrder.class, exchange.getIn().getBody().getClass());', '}', '}) .inOut("direct:xyz") .to("mock:abcresult");', 'from("direct:xyz") .inputType(XOrder.class) .outputType(XOrderResponse.class) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['asserting input xorder convertion ', []]
camel sample_1320

['public AOrder toAOrder(String order) {']
['typeconverter string aorder ', []]
camel sample_1320

['public XOrder toXOrder(AOrder aorder) {']
['typeconverter aorder xorder ', []]
camel sample_1320

['public XOrderResponse toXOrderResponse(String res) {']
['typeconverter string xorderresponse ', []]
camel sample_1320

['public AOrderResponse toAOrderResponse(XOrderResponse xres) {']
['typeconverter xorderresponse aorderresponse ', []]
camel sample_1320

['private DataFormat createDataFormat() {', 'return new DataFormat() {', 'public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {', 'assertEquals(graph.toString(), XOrderResponse.class, graph.getClass());']
['dataformat xorderresponse json ', []]
camel sample_1320

['}', 'public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {', 'BufferedReader reader = new BufferedReader(new InputStreamReader(stream));', 'String line = "";', 'String input = "";', 'while ((line = reader.readLine()) != null) {', 'input += line;', '}', 'reader.close();', 'assertEquals("{name:XOrder}", input);']
['dataformat json xorder ', []]
camel sample_1320

['public Producer createProducer() throws Exception {', 'return new DefaultAsyncProducer(this) {', 'public boolean process(Exchange exchange, AsyncCallback callback) {', 'Object input = exchange.getIn().getBody();', 'if (input instanceof XOrderResponse) {']
['endpoint xorderresponse xml ', []]
camel sample_1320

['public Producer createProducer() throws Exception {', 'return new DefaultAsyncProducer(this) {', 'public boolean process(Exchange exchange, AsyncCallback callback) {', 'Object input = exchange.getIn().getBody();', 'if (input instanceof XOrderResponse) {', 'exchange.getIn().setBody("<XOrderResponse/>");', '} else {', 'assertEquals("<XOrder/>", input);']
['endpoint xml xorder ', []]
camel sample_1320

['public void transform(Message message, DataType from, DataType to) throws Exception {', 'assertEquals("name=XOrder", message.getBody());']
['bean other xorder ', []]
camel sample_1320

['public void transform(Message message, DataType from, DataType to) throws Exception {']
['bean xorderresponse other ', []]
camel sample_1320

['private void createWriter(ProducerType producerType) {', 'switch (producerType) {', 'case TCP: {']
['creating tcpdatawriter ', []]
camel sample_14473

['private void createWriter(ProducerType producerType) {', 'switch (producerType) {', 'case TCP: {', 'dataWriter = new TcpDataWriter(endpoint, buildSplunkArgs());', '((TcpDataWriter)dataWriter).setPort(endpoint.getConfiguration().getTcpReceiverPort());']
['tcpdatawriter created for endpoint ', ['endpoint']]
camel sample_14473

['private void createWriter(ProducerType producerType) {', 'switch (producerType) {', 'case TCP: {', 'dataWriter = new TcpDataWriter(endpoint, buildSplunkArgs());', '((TcpDataWriter)dataWriter).setPort(endpoint.getConfiguration().getTcpReceiverPort());', 'break;', '}', 'case SUBMIT: {']
['creating submitdatawriter ', []]
camel sample_14473

['private void createWriter(ProducerType producerType) {', 'switch (producerType) {', 'case TCP: {', 'dataWriter = new TcpDataWriter(endpoint, buildSplunkArgs());', '((TcpDataWriter)dataWriter).setPort(endpoint.getConfiguration().getTcpReceiverPort());', 'break;', '}', 'case SUBMIT: {', 'dataWriter = new SubmitDataWriter(endpoint, buildSplunkArgs());', '((SubmitDataWriter)dataWriter).setIndex(endpoint.getConfiguration().getIndex());']
['submitdatawriter created for endpoint ', ['endpoint']]
camel sample_14473

['dataWriter = new TcpDataWriter(endpoint, buildSplunkArgs());', '((TcpDataWriter)dataWriter).setPort(endpoint.getConfiguration().getTcpReceiverPort());', 'break;', '}', 'case SUBMIT: {', 'dataWriter = new SubmitDataWriter(endpoint, buildSplunkArgs());', '((SubmitDataWriter)dataWriter).setIndex(endpoint.getConfiguration().getIndex());', 'break;', '}', 'case STREAM: {']
['creating streamdatawriter ', []]
camel sample_14473

['break;', '}', 'case SUBMIT: {', 'dataWriter = new SubmitDataWriter(endpoint, buildSplunkArgs());', '((SubmitDataWriter)dataWriter).setIndex(endpoint.getConfiguration().getIndex());', 'break;', '}', 'case STREAM: {', 'dataWriter = new StreamDataWriter(endpoint, buildSplunkArgs());', '((StreamDataWriter)dataWriter).setIndex(endpoint.getConfiguration().getIndex());']
['streamdatawriter created for endpoint ', ['endpoint']]
camel sample_14473

['public void testFutureList() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);']
['got future ', []]
camel sample_3258

['public void testFutureList() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);', 'assertFalse("Should not be done", future.isDone());']
['waiting for future to be done ', []]
camel sample_3258

['public void testFutureListCallTwoTimes() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);']
['got future ', []]
camel sample_3258

['public void testFutureListCallTwoTimes() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);', 'assertFalse("Should not be done", future.isDone());']
['waiting for future to be done ', []]
camel sample_3258

['public void testFutureListCallTwoTimes() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);', 'assertFalse("Should not be done", future.isDone());', 'List<String> users = future.get(2, TimeUnit.SECONDS);', 'assertEquals("Claus", users.get(0));', 'assertEquals("Jonathan", users.get(1));', 'future = service.getUsers(true);']
['got future ', []]
camel sample_3258

['public void testFutureListCallTwoTimes() throws Exception {', 'Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class);', 'Future<List<String>> future = service.getUsers(true);', 'assertFalse("Should not be done", future.isDone());', 'List<String> users = future.get(2, TimeUnit.SECONDS);', 'assertEquals("Claus", users.get(0));', 'assertEquals("Jonathan", users.get(1));', 'future = service.getUsers(true);', 'assertFalse("Should not be done", future.isDone());']
['waiting for future to be done ', []]
camel sample_3258

['protected void checkWeatherContent(String weather) {']
['the weather in format is ', ['weathermode', 'json', 'ls', 'weather']]
camel sample_11364

['public static Field findConfigurationField(EndpointConfiguration config, String name) {', 'if (config != null && name != null) {', 'Class<?> clazz = config.getClass();', 'Field[] fields = clazz.getDeclaredFields();', 'Field found;', 'URIField anno;', 'for (final Field field : fields) {', 'anno = field.getAnnotation(URIField.class);', 'if (anno == null ? field.getName().equals(name) : anno.component().equals(name) || (anno.component().equals(EndpointConfiguration.URI_QUERY) && anno.parameter().equals(name))) {', 'found = field;']
['found field as candidate for parameter ', ['new', 'object', 'clazz', 'getname', 'found', 'getname', 'name']]
camel sample_4067

['public void testLoadAndRecoverHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_11734

['public void testLoadAndRecoverHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);']
['sending with id ', ['value', 'id']]
camel sample_11734

['mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);', 'template.sendBodyAndHeaders("seda:start", value, headers);', 'Thread.sleep(5);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_11734

['result.whenAnyExchangeReceived(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String msg = exchange.getIn().getBody(String.class);', 'exchange.setException(new ThrottlingException(msg));', '}', '});', 'sendMessage("Message One");', 'sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);']
['sending message three ', []]
camel sample_2449

['sendMessage("Message Two");', 'final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer();', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended);', 'sendMessage("Message Three");', 'assertMockEndpointsSatisfied();', 'result.reset();', 'result.expectedMessageCount(1);', 'bodies = Arrays.asList("Message Four");', 'result.expectedBodiesReceivedInAnyOrder(bodies);', 'await().atMost(2, TimeUnit.SECONDS).until(consumer::isStarted);']
['sending message four ', []]
camel sample_2449

['protected void sendMessage(String bodyText) {', 'try {', 'template.sendBody(url, bodyText);', '} catch (Exception e) {']
['error sending ', ['e', 'getcause', 'getmessage']]
camel sample_2449

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BrowseComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.browse.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.browse.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_882

['public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent channelStateEvent) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel open ', ['ctx', 'getchannel']]
camel sample_6689

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent exceptionEvent) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['exception caught at channel ', ['ctx', 'getchannel', 'exceptionevent', 'getcause']]
camel sample_6689

['public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent exceptionEvent) throws Exception {', 'if (LOG.isTraceEnabled()) {', '}', 'if (exceptionHandled) {', 'return;', '}', 'exceptionHandled = true;', 'Throwable cause = exceptionEvent.getCause();', 'if (LOG.isDebugEnabled()) {']
['closing channel as an exception was thrown from netty ', ['cause']]
camel sample_6689

['public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel closed ', ['ctx', 'getchannel']]
camel sample_6689

['if (LOG.isTraceEnabled()) {', '}', 'Exchange exchange = getExchange(ctx);', 'AsyncCallback callback = getAsyncCallback(ctx);', 'producer.removeState(ctx.getChannel());', 'producer.getAllChannels().remove(ctx.getChannel());', 'boolean doneUoW = exchange.getUnitOfWork() == null;', 'if (producer.getConfiguration().isSync() && !doneUoW && !messageReceived && !exceptionHandled) {', 'exceptionHandled = true;', 'if (LOG.isDebugEnabled()) {']
['channel closed but no message received from address ', ['producer', 'getconfiguration', 'getaddress']]
camel sample_6689

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'messageReceived = true;', 'if (LOG.isTraceEnabled()) {']
['message received ', ['messageevent']]
camel sample_6689

['public void messageReceived(ChannelHandlerContext ctx, MessageEvent messageEvent) throws Exception {', 'messageReceived = true;', 'if (LOG.isTraceEnabled()) {', '}', 'ChannelHandler handler = ctx.getPipeline().get("timeout");', 'if (handler != null) {']
['removing timeout channel as we received message ', []]
camel sample_6689

['}', 'if (close == null) {', 'close = exchange.getProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, Boolean.class);', '}', 'boolean disconnect = producer.getConfiguration().isDisconnect();', 'if (close != null) {', 'disconnect = close;', '}', 'if (disconnect) {', 'if (LOG.isTraceEnabled()) {']
['closing channel when complete at address ', ['producer', 'getconfiguration', 'getaddress']]
camel sample_6689

['protected Message getResponseMessage(Exchange exchange, MessageEvent messageEvent) throws Exception {', 'Object body = messageEvent.getMessage();', 'if (LOG.isDebugEnabled()) {']
['channel received body ', ['new', 'object', 'messageevent', 'getchannel', 'body']]
camel sample_6689

['public void foo(@Simple("${header.foo}") String bar) {', 'this.bar = bar;']
['foo method called with ', ['bar']]
camel sample_3171

['public void foo(@Simple("${header.foo}") String bar) {', 'this.bar = bar;']
['foo method called with ', ['bar']]
camel sample_3171

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RedisComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-redis.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-redis.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_928

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MySimpleToDRoute.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/MySimpleToDRoute.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_181

['MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<CamelEndpointDetails> details = new ArrayList<>();', 'RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/MySimpleToDRoute.java", details);', 'LOG.info("{}", details);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:start", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_181

['final ListTopicsResult response = snsClient.listTopics(nextToken);', 'nextToken = response.getNextToken();', 'for (final Topic topic : response.getTopics()) {', 'if (topic.getTopicArn().endsWith(arnSuffix)) {', 'configuration.setTopicArn(topic.getTopicArn());', 'break;', '}', '}', '} while (nextToken != null);', '} catch (final AmazonServiceException ase) {']
['the list topics operation return the following error code ', ['ase', 'geterrorcode']]
camel sample_8697

['break;', '}', '}', '} while (nextToken != null);', '} catch (final AmazonServiceException ase) {', 'throw ase;', '}', '}', 'if (configuration.getTopicArn() == null) {', 'CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());']
['creating topic with request ', ['configuration', 'gettopicname', 'request']]
camel sample_8697

['}', '} while (nextToken != null);', '} catch (final AmazonServiceException ase) {', 'throw ase;', '}', '}', 'if (configuration.getTopicArn() == null) {', 'CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());', 'CreateTopicResult result = snsClient.createTopic(request);', 'configuration.setTopicArn(result.getTopicArn());']
['topic created with amazon resource name ', ['configuration', 'gettopicarn']]
camel sample_8697

['} catch (final AmazonServiceException ase) {', 'throw ase;', '}', '}', 'if (configuration.getTopicArn() == null) {', 'CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());', 'CreateTopicResult result = snsClient.createTopic(request);', 'configuration.setTopicArn(result.getTopicArn());', '}', 'if (ObjectHelper.isNotEmpty(configuration.getPolicy())) {']
['updating topic with policy ', ['configuration', 'gettopicarn', 'configuration', 'getpolicy']]
camel sample_8697

['throw ase;', '}', '}', 'if (configuration.getTopicArn() == null) {', 'CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());', 'CreateTopicResult result = snsClient.createTopic(request);', 'configuration.setTopicArn(result.getTopicArn());', '}', 'if (ObjectHelper.isNotEmpty(configuration.getPolicy())) {', 'snsClient.setTopicAttributes(new SetTopicAttributesRequest(configuration.getTopicArn(), "Policy", configuration.getPolicy()));']
['topic policy updated ', []]
camel sample_8697

['public void testQuartz() throws Exception {', 'resultEndpoint = getMockEndpoint("mock:result");', 'resultEndpoint.expectedMessageCount(2);', 'resultEndpoint.message(0).header("triggerName").isEqualTo("myTimerName");', 'resultEndpoint.message(0).header("triggerGroup").isEqualTo("myGroup");', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'Message in = exchange.getIn();']
['received with headers ', ['in', 'in', 'getheaders']]
camel sample_17199

['protected void doStart() throws Exception {', 'if (curator == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path");']
['starting zookeeper curator with namespace nodes ', ['configuration', 'getnamespace', 'string', 'join', 'configuration', 'getnodes']]
camel sample_12661

['protected void doStart() throws Exception {', 'if (curator == null) {', 'ObjectHelper.notNull(getCamelContext(), "Camel Context");', 'ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path");', 'curator = ZooKeeperCuratorHelper.createCurator(configuration);', 'curator.start();', '}', 'if (serviceDiscovery == null) {', 'ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path");']
['starting zookeeper servicediscoverybuilder with base path ', ['configuration', 'getbasepath']]
camel sample_12661

['protected void doStop() throws Exception {', 'super.doStop();', 'if (serviceDiscovery != null) {', 'try {', 'serviceDiscovery.close();', '} catch (Exception e) {']
['error closing curator servicediscovery ', ['e']]
camel sample_12661

['public synchronized void onInit(Route route) {', 'super.onInit(route);']
['route managed by setting route autostartup flag to false ', ['getclass', 'route', 'getid']]
camel sample_13973

['private synchronized void startManagedRoutes() {', 'if (!isLeader()) {', 'return;', '}', 'try {', 'for (Route route : stoppeddRoutes) {']
['starting route ', ['route', 'getid']]
camel sample_13973

['private synchronized void stopManagedRoutes() {', 'if (isLeader()) {', 'return;', '}', 'try {', 'for (Route route : startedRoutes) {']
['stopping route ', ['route', 'getid']]
camel sample_13973

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-receiver";', 'public void configure() {']
['mllp log logginglevel info routeid to result ', ['receiving', 'body']]
camel sample_13836

['public void configure() {']
['mllp log logginglevel info routeid to result ', ['receiving', 'body']]
camel sample_13836

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HBaseComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hbase.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hbase.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_494

['public static String getTextlineBody(Object body, Exchange exchange, TextLineDelimiter delimiter, boolean autoAppendDelimiter) throws NoTypeConversionAvailableException {', 'String s = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, body);', 'if (autoAppendDelimiter) {', 'if (TextLineDelimiter.LINE.equals(delimiter)) {', 'if (!s.endsWith("\\n")) {']
['auto appending missing newline delimiter to body ', []]
camel sample_6666

['public static String getTextlineBody(Object body, Exchange exchange, TextLineDelimiter delimiter, boolean autoAppendDelimiter) throws NoTypeConversionAvailableException {', 'String s = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, body);', 'if (autoAppendDelimiter) {', 'if (TextLineDelimiter.LINE.equals(delimiter)) {', 'if (!s.endsWith("\\n")) {', 's = s + "\\n";', '}', '} else {', 'if (!s.endsWith("\\u0000")) {']
['auto appending missing null delimiter to body ', []]
camel sample_6666

['public static void close(Channel channel) {', 'if (channel != null) {', 'channel.close().addListener(new ChannelFutureListener() {', 'public void operationComplete(ChannelFuture future) {']
['channel closed ', ['future', 'getchannel']]
camel sample_6666

['incident.setDescription("my incident");', 'incident.setShortDescription("An incident");', 'incident.setSeverity(1);', 'incident.setImpact(1);', 'template().sendBodyAndHeaders( "direct:servicenow", incident, kvBuilder() .put(ServiceNowConstants.RESOURCE, "table") .put(ServiceNowConstants.ACTION, ServiceNowConstants.ACTION_CREATE) .put(ServiceNowParams.PARAM_TABLE_NAME, "incident") .build() );', 'mock.assertIsSatisfied();', 'incident = mock.getExchanges().get(0).getIn().getBody(Incident.class);', 'sysId = incident.getId();', 'number = incident.getNumber();', 'LOGGER.info("****************************************************");']
['incident created ', []]
camel sample_13565

['mock.assertIsSatisfied();', 'incident = mock.getExchanges().get(0).getIn().getBody(Incident.class);', 'sysId = incident.getId();', 'number = incident.getNumber();', 'LOGGER.info("****************************************************");', 'LOGGER.info("  sysid  = {}", sysId);', 'LOGGER.info("  number = {}", number);', 'LOGGER.info("****************************************************");', '}', '{']
['search the record ', ['sysid']]
camel sample_13565

['mock.reset();', 'mock.expectedMessageCount(1);', 'template().sendBodyAndHeaders( "direct:servicenow", null, kvBuilder() .put(ServiceNowConstants.RESOURCE, "table") .put(ServiceNowConstants.ACTION, ServiceNowConstants.ACTION_RETRIEVE) .put(ServiceNowParams.PARAM_TABLE_NAME, "incident") .put(ServiceNowParams.SYSPARM_QUERY, "number=" + number) .build() );', 'mock.assertIsSatisfied();', 'List<Incident> incidents = mock.getExchanges().get(0).getIn().getBody(List.class);', 'assertEquals(1, incidents.size());', 'assertEquals(number, incidents.get(0).getNumber());', 'assertEquals(sysId, incidents.get(0).getId());', '}', '{']
['update the record ', ['sysid']]
camel sample_13565

['incident.setImpact(3);', 'template().sendBodyAndHeaders( "direct:servicenow", incident, kvBuilder() .put(ServiceNowConstants.RESOURCE, "table") .put(ServiceNowConstants.ACTION, ServiceNowConstants.ACTION_MODIFY) .put(ServiceNowParams.PARAM_TABLE_NAME, "incident") .put(ServiceNowParams.PARAM_SYS_ID, sysId) .build() );', 'mock.assertIsSatisfied();', 'incident = mock.getExchanges().get(0).getIn().getBody(Incident.class);', 'assertEquals(number, incident.getNumber());', 'assertEquals(2, incident.getSeverity());', 'assertEquals(3, incident.getImpact());', 'assertEquals("The incident", incident.getShortDescription());', '}', '{']
['retrieve the record ', ['sysid']]
camel sample_13565

['mock.assertIsSatisfied();', 'List<Incident> incidents = mock.getExchanges().get(0).getIn().getBody(List.class);', 'assertEquals(1, incidents.size());', 'assertEquals(number, incidents.get(0).getNumber());', 'assertEquals(sysId, incidents.get(0).getId());', 'assertEquals(2, incidents.get(0).getSeverity());', 'assertEquals(3, incidents.get(0).getImpact());', 'assertEquals("The incident", incidents.get(0).getShortDescription());', '}', '{']
['search the record ', ['sysid']]
camel sample_13565

['mock.expectedMessageCount(1);', 'template().sendBodyAndHeaders( "direct:servicenow", null, kvBuilder() .put(ServiceNowConstants.RESOURCE, "table") .put(ServiceNowConstants.ACTION, ServiceNowConstants.ACTION_RETRIEVE) .put(ServiceNowParams.PARAM_TABLE_NAME, "incident") .put(ServiceNowParams.PARAM_SYS_ID, sysId) .build() );', 'mock.assertIsSatisfied();', 'incident = mock.getExchanges().get(0).getIn().getBody(Incident.class);', 'assertEquals(2, incident.getSeverity());', 'assertEquals(3, incident.getImpact());', 'assertEquals("The incident", incident.getShortDescription());', 'assertEquals(number, incident.getNumber());', '}', '{']
['delete the record ', ['sysid']]
camel sample_13565

['assertEquals("The incident", incident.getShortDescription());', 'assertEquals(number, incident.getNumber());', '}', '{', 'mock.reset();', 'mock.expectedMessageCount(1);', 'template().sendBodyAndHeaders( "direct:servicenow", null, kvBuilder() .put(ServiceNowConstants.RESOURCE, "table") .put(ServiceNowConstants.ACTION, ServiceNowConstants.ACTION_DELETE) .put(ServiceNowParams.PARAM_TABLE_NAME, "incident") .put(ServiceNowParams.PARAM_SYS_ID, sysId) .build() );', 'mock.assertIsSatisfied();', '}', '{']
['find the record should fail ', ['sysid']]
camel sample_13565

['protected void doStart() throws Exception {', 'if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {']
['adding bouncycastleprovider as security provider ', []]
camel sample_11558

['public void handle(Request request, Response response) {', 'Method method = request.getMethod();']
['methodrouter received request method ', ['uripattern', 'method']]
camel sample_9317

['public void handle(Request request, Response response) {', 'Method method = request.getMethod();', 'Restlet target = routes.get(method);', 'if (target == null || org.restlet.data.Method.OPTIONS.equals(method)) {', 'response.setAllowedMethods(routes.keySet());', '}', 'if (target != null) {', 'target.handle(request, response);', '} else {']
['methodrouter method not allowed ', ['uripattern', 'method']]
camel sample_9317

['public void testGetPost() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.post_id", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Post result = requestBodyAndHeaders("direct: assertNotNull("getPost result", result);']
['getpost ', ['result']]
camel sample_8855

['public void testGetPostComments() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.post_id", null);', 'headers.put("CamelLinkedIn.count", null);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Comments result = requestBodyAndHeaders("direct: assertNotNull("getPostComments result", result);']
['getpostcomments ', ['result']]
camel sample_8855

['resultEndpoint.expectedBodiesReceived("msg1", "msg2", "msg3", "msg4", "msg5", "msg6");', 'sendBodyAndHeader(endpointUri, "msg4", "seqnum", 4L);', 'sendBodyAndHeader(endpointUri, "msg1", "seqnum", 1L);', 'sendBodyAndHeader(endpointUri, "msg3", "seqnum", 3L);', 'sendBodyAndHeader(endpointUri, "msg2", "seqnum", 2L);', 'sendBodyAndHeader(endpointUri, "msg6", "seqnum", 6L);', 'sendBodyAndHeader(endpointUri, "msg5", "seqnum", 5L);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received ', ['exchange']]
camel sample_6148

['public void read(@Body String body) {', 'this.body = body;']
['read method on with body ', ['name', 'this', 'body']]
camel sample_6148

['public void execute() {']
['started ', ['name']]
camel sample_6148

['public void execute() {']
['finished ', ['name']]
camel sample_6148

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Message in = exchange.getIn();', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final long priority = BeanstalkExchangeHelper.getPriority(endpoint, in);', 'final int delay = BeanstalkExchangeHelper.getDelay(endpoint, in);', 'final boolean result = client.release(jobId, priority, delay);', 'if (!result && LOG.isWarnEnabled()) {']
['failed to release job d priority d delay d ', ['string', 'format', 'jobid', 'priority', 'delay']]
camel sample_8156

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Message in = exchange.getIn();', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final long priority = BeanstalkExchangeHelper.getPriority(endpoint, in);', 'final int delay = BeanstalkExchangeHelper.getDelay(endpoint, in);', 'final boolean result = client.release(jobId, priority, delay);', 'if (!result && LOG.isWarnEnabled()) {', '} else if (LOG.isDebugEnabled()) {']
['job d released with priority d delay d seconds result is b ', ['string', 'format', 'jobid', 'priority', 'delay', 'result']]
camel sample_8156

['RouteBuilderParser.parseRouteBuilderEndpoints(clazz, ".", "src/test/java/org/apache/camel/parser/java/MyCdiRouteBuilder.java", details);', 'LOG.info("{}", details);', 'Assert.assertEquals("timer:foo?period=4999", details.get(0).getEndpointUri());', 'Assert.assertEquals("28", details.get(0).getLineNumber());', 'Assert.assertEquals("log:a", details.get(1).getEndpointUri());', 'Assert.assertEquals("32", details.get(1).getLineNumber());', 'Assert.assertEquals("netty4-http:http:someserver:80/hello", details.get(2).getEndpointUri());', 'Assert.assertEquals("36", details.get(2).getLineNumber());', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_210

['Assert.assertEquals("log:a", details.get(1).getEndpointUri());', 'Assert.assertEquals("32", details.get(1).getLineNumber());', 'Assert.assertEquals("netty4-http:http:someserver:80/hello", details.get(2).getEndpointUri());', 'Assert.assertEquals("36", details.get(2).getLineNumber());', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo?period=4999", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, true);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_210

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'CxfRsEndpoint answer;', 'Object value = parameters.remove("setDefaultBus");', 'if (value != null) {']
['the option setdefaultbus is deprecated use name defaultbus instead ', []]
camel sample_8013

['public void updateCorrelationId(String correlationId, String newCorrelationId, long requestTimeout) {']
['updated provisional correlationid to expected correlationid ', ['correlationid', 'newcorrelationid']]
camel sample_14131

['protected void handleReplyMessage(String correlationID, AMQP.BasicProperties properties, byte[] message) {', 'ReplyHandler handler = correlation.get(correlationID);', 'if (handler == null && endpoint.isUseMessageIDAsCorrelationID()) {', 'handler = waitForProvisionCorrelationToBeUpdated(correlationID, message);', '}', 'if (handler != null) {', 'correlation.remove(correlationID);', 'handler.onReply(correlationID, properties, message);', '} else {']
['reply received for unknown correlationid the message will be ignored ', ['correlationid', 'message']]
camel sample_14131

['protected Connection createListenerContainer() throws Exception {']
['creating connection ', []]
camel sample_14131

['protected Connection createListenerContainer() throws Exception {', 'Connection conn = endpoint.connect(executorService);']
['creating channel ', []]
camel sample_14131

['protected Connection createListenerContainer() throws Exception {', 'Connection conn = endpoint.connect(executorService);', 'Channel channel = conn.createChannel();', 'if (endpoint.isPrefetchEnabled()) {', 'channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(), endpoint.isPrefetchGlobal());', '}', 'DeclareOk result = channel.queueDeclare();']
['using temporary queue name ', ['result', 'getqueue']]
camel sample_14131

['public void shutdown() throws Exception {']
['stopping ', []]
camel sample_12636

['public void shutdown() throws Exception {', 'controlledContext.stop();']
['stopped ', []]
camel sample_12636

['public void testReplyToComment() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fileId);', 'com.google.api.services.drive.model.Comment comment = new com.google.api.services.drive.model.Comment();', 'comment.setContent("Camel rocks!");', 'headers.put("CamelGoogleDrive.content", comment);', 'requestBodyAndHeaders("direct: com.google.api.services.drive.model.CommentList result1 = requestBody("direct: assertNotNull(result1.get("items"));']
['list ', []]
camel sample_15409

['headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fileId);', 'headers.put("CamelGoogleDrive.commentId", commentId);', 'com.google.api.services.drive.model.CommentReply reply = new com.google.api.services.drive.model.CommentReply();', 'reply.setContent("I know :-)");', 'headers.put("CamelGoogleDrive.content", reply);', 'requestBodyAndHeaders("direct: headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fileId);', 'headers.put("CamelGoogleDrive.commentId", commentId);', 'final com.google.api.services.drive.model.CommentReplyList result = requestBodyAndHeaders("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15409

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = createAsyncHttpSSLClient();', 'WebSocket websocket = c.prepareGet("wss: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17434

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<XMLSecurityDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.securexml.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.securexml.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_586

['public void process(Exchange exchange) {']
['firing cdi event with ', ['event', 'this']]
camel sample_9878

['protected void doStart() throws Exception {', 'super.doStart();', 'if (server == null) {']
['starting the thrift server ', []]
camel sample_13027

['protected void doStop() throws Exception {', 'if (server != null) {']
['terminating thrift server ', []]
camel sample_13027

['throw new IllegalArgumentException("Unknown host defined: " + configuration.getHost());', '}', 'ThriftThreadPoolServer.Args args = new ThriftThreadPoolServer.Args(syncServerTransport);', 'args.processor((TProcessor)serverProcessor);', 'args.executorService(getEndpoint().getCamelContext().getExecutorServiceManager().newThreadPool(this, getEndpoint().getEndpointUri(), configuration.getPoolSize(), configuration.getMaxPoolSize()));', 'args.startThreadPool(getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "start-" + getEndpoint().getEndpointUri()));', 'args.context(endpoint.getCamelContext());', 'server = new ThriftThreadPoolServer(args);', '} else if (configuration.getCompressionType() == ThriftCompressionType.ZLIB && endpoint.isSynchronous()) {', 'if (ObjectHelper.isNotEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {']
['building sync thrift server on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_13027

['ThriftThreadPoolServer.Args args = new ThriftThreadPoolServer.Args(syncServerTransport);', 'args.processor((TProcessor)serverProcessor);', 'args.executorService(getEndpoint().getCamelContext().getExecutorServiceManager().newThreadPool(this, getEndpoint().getEndpointUri(), configuration.getPoolSize(), configuration.getMaxPoolSize()));', 'args.startThreadPool(getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "start-" + getEndpoint().getEndpointUri()));', 'args.context(endpoint.getCamelContext());', 'server = new ThriftThreadPoolServer(args);', '} else if (configuration.getCompressionType() == ThriftCompressionType.ZLIB && endpoint.isSynchronous()) {', 'if (ObjectHelper.isNotEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {', 'syncServerTransport = new TServerSocket(new InetSocketAddress(configuration.getHost(), configuration.getPort()), configuration.getClientTimeout());', '} else if (ObjectHelper.isEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {']
['building sync thrift server on any address ', ['configuration', 'getport']]
camel sample_13027

['}', 'ThriftThreadPoolServer.Args args = new ThriftThreadPoolServer.Args(syncServerTransport);', 'args.processor((TProcessor)serverProcessor);', 'args.transportFactory(new TZlibTransport.Factory());', 'args.executorService(getEndpoint().getCamelContext().getExecutorServiceManager().newThreadPool(this, getEndpoint().getEndpointUri(), configuration.getPoolSize(), configuration.getMaxPoolSize()));', 'args.startThreadPool(getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "start-" + getEndpoint().getEndpointUri()));', 'args.context(endpoint.getCamelContext());', 'server = new ThriftThreadPoolServer(args);', '} else {', 'if (ObjectHelper.isNotEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {']
['building thrift server on ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_13027

['args.processor((TProcessor)serverProcessor);', 'args.transportFactory(new TZlibTransport.Factory());', 'args.executorService(getEndpoint().getCamelContext().getExecutorServiceManager().newThreadPool(this, getEndpoint().getEndpointUri(), configuration.getPoolSize(), configuration.getMaxPoolSize()));', 'args.startThreadPool(getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "start-" + getEndpoint().getEndpointUri()));', 'args.context(endpoint.getCamelContext());', 'server = new ThriftThreadPoolServer(args);', '} else {', 'if (ObjectHelper.isNotEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {', 'asyncServerTransport = new TNonblockingServerSocket(new InetSocketAddress(configuration.getHost(), configuration.getPort()), configuration.getClientTimeout());', '} else if (ObjectHelper.isEmpty(configuration.getHost()) && ObjectHelper.isNotEmpty(configuration.getPort())) {']
['building thrift server on any address ', ['configuration', 'getport']]
camel sample_13027

['private boolean doSend(Exchange exchange, AsyncCallback callback) {', 'if (isRunAllowed()) {', 'getAsyncProcessor().process(exchange, doneSync -> {', 'if (exchange.getException() != null) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', 'callback.done(doneSync);', '});', 'return false;', '} else {']
['consumer not ready to process exchanges the exchange will be discarded ', ['exchange']]
camel sample_13027

['public void testMustachePerformance() throws Exception {', 'int messageCount = 10000;', 'endSimpleMock.expectedMessageCount(messageCount);', 'StopWatch stopwatch = new StopWatch(true);', 'for (int i = 0; i < messageCount; i++) {', 'startSimpleProducerTemplate.sendBodyAndHeader("The Body", "someHeader", "Some Header");', '}', 'assertMockEndpointsSatisfied();']
['mustache performance ms for messages ', ['stopwatch', 'stop', 'messagecount']]
camel sample_13498

['public Processor createErrorHandler(RouteContext routeContext, Processor processor) throws Exception {', 'if (transactionTemplate == null) {']
['no transactiontemplate configured on transactionerrorhandlerbuilder will try find it in the registry ', []]
camel sample_16360

['}', 'if (transactionTemplate == null) {', 'TransactedPolicy policy = routeContext.lookup(PROPAGATION_REQUIRED, TransactedPolicy.class);', 'if (policy instanceof SpringTransactionPolicy) {', 'transactionTemplate = ((SpringTransactionPolicy) policy).getTransactionTemplate();', '}', '}', 'if (transactionTemplate == null) {', 'Map<String, TransactionTemplate> mapTemplate = routeContext.lookupByType(TransactionTemplate.class);', 'if (mapTemplate == null || mapTemplate.isEmpty()) {']
['no transactiontemplate found in registry ', []]
camel sample_16360

['if (policy instanceof SpringTransactionPolicy) {', 'transactionTemplate = ((SpringTransactionPolicy) policy).getTransactionTemplate();', '}', '}', 'if (transactionTemplate == null) {', 'Map<String, TransactionTemplate> mapTemplate = routeContext.lookupByType(TransactionTemplate.class);', 'if (mapTemplate == null || mapTemplate.isEmpty()) {', '} else if (mapTemplate.size() == 1) {', 'transactionTemplate = mapTemplate.values().iterator().next();', '} else {']
['found transactiontemplate in registry cannot determine which one to use please configure a transactiontemplate on the transactionerrorhandlerbuilder ', ['maptemplate', 'size']]
camel sample_16360

['Map<String, TransactionTemplate> mapTemplate = routeContext.lookupByType(TransactionTemplate.class);', 'if (mapTemplate == null || mapTemplate.isEmpty()) {', '} else if (mapTemplate.size() == 1) {', 'transactionTemplate = mapTemplate.values().iterator().next();', '} else {', '}', '}', 'if (transactionTemplate == null) {', 'Map<String, PlatformTransactionManager> mapManager = routeContext.lookupByType(PlatformTransactionManager.class);', 'if (mapManager == null || mapManager.isEmpty()) {']
['no platformtransactionmanager found in registry ', []]
camel sample_16360

['transactionTemplate = mapTemplate.values().iterator().next();', '} else {', '}', '}', 'if (transactionTemplate == null) {', 'Map<String, PlatformTransactionManager> mapManager = routeContext.lookupByType(PlatformTransactionManager.class);', 'if (mapManager == null || mapManager.isEmpty()) {', '} else if (mapManager.size() == 1) {', 'transactionTemplate = new TransactionTemplate(mapManager.values().iterator().next());', '} else {']
['found platformtransactionmanager in registry cannot determine which one to use for transactiontemplate please configure a transactiontemplate on the transactionerrorhandlerbuilder ', ['mapmanager', 'size']]
camel sample_16360

['}', 'if (transactionTemplate == null) {', 'Map<String, PlatformTransactionManager> mapManager = routeContext.lookupByType(PlatformTransactionManager.class);', 'if (mapManager == null || mapManager.isEmpty()) {', '} else if (mapManager.size() == 1) {', 'transactionTemplate = new TransactionTemplate(mapManager.values().iterator().next());', '} else {', '}', '}', 'if (transactionTemplate != null) {']
['found transactiontemplate in registry to use ', ['transactiontemplate']]
camel sample_16360

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<Mina2Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mina2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mina2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_990

['protected void doStop() throws Exception {']
['stopping consumer ', ['this']]
camel sample_3960

['protected void doStart() throws Exception {']
['starting consumer ', ['this']]
camel sample_3960

['private void doHttpPost(final String urlString, final String requestString) {', 'final HttpClient client = HttpClientBuilder.create().build();', 'final HttpPost post = new HttpPost(urlString);', 'post.setEntity(new StringEntity(requestString, Charset.forName("UTF-8")));', 'try {', 'final HttpResponse response = client.execute(post);', 'final int statusCode = response.getStatusLine().getStatusCode();']
['response code ', ['statuscode']]
camel sample_12773

['throw new CMDirectException("CM Component and CM API show some kind of inconsistency. The component expects the status code to be 200 or 400. New api released? ");', '}', 'final BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));', 'final StringBuffer result = new StringBuffer();', 'String line = null;', 'while ((line = rd.readLine()) != null) {', 'result.append(line);', '}', 'line = result.toString();', 'if (!line.isEmpty()) {']
['result of the request processing failed ', ['line']]
camel sample_12773

['} else if (line.contains(CMConstants.ERROR_INSUFICIENT_BALANCE)) {', 'throw new InsufficientBalanceException();', '} else if (line.contains(CMConstants.ERROR_UNROUTABLE_MESSAGE)) {', 'throw new UnroutableMessageException();', '} else if (line.contains(CMConstants.ERROR_INVALID_PRODUCT_TOKEN)) {', 'throw new InvalidProductTokenException();', '} else {', 'throw new CMResponseException("CHECK ME. I am not expecting this. ");', '}', '}']
['result of the request processing successfully submited ', []]
camel sample_12773

['private void addConsumerConfiguration(String remaining, Map<String, Object> parameters, SpringWebserviceConfiguration configuration) {', 'EndpointMappingType type = EndpointMappingType.getTypeFromUriPrefix(remaining);', 'if (type != null) {']
['building spring web services consumer of type ', ['type']]
camel sample_17121

['private void configureProducerConfiguration(String remaining, SpringWebserviceConfiguration configuration) throws URISyntaxException {', 'if (configuration.getEndpointMapping() == null && configuration.getEndpointDispatcher() == null) {']
['building spring web services producer ', []]
camel sample_17121

['public void testConnectionResourceRouter() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(100);', 'mock.expectsNoDuplicates(body());', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 100; i++) {', 'template.sendBody("seda:start", "" + i);', '}', 'assertMockEndpointsSatisfied(20, TimeUnit.SECONDS);']
['took ms to process messages request reply over jms ', ['watch', 'stop']]
camel sample_12323

['public void returnConnection(Connection connection) throws Exception {']
['connection returned ', []]
camel sample_12323

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<GsonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-gson.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-gson.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_656

['public void processRequest(RequestEvent requestEvent) {', 'Request request = requestEvent.getRequest();', 'ServerTransaction serverTransactionId = requestEvent.getServerTransaction();']
['request ', ['request', 'getmethod']]
camel sample_8510

['public void processRequest(RequestEvent requestEvent) {', 'Request request = requestEvent.getRequest();', 'ServerTransaction serverTransactionId = requestEvent.getServerTransaction();']
['server transaction id ', ['servertransactionid']]
camel sample_8510

['public void processRequest(RequestEvent requestEvent) {', 'Request request = requestEvent.getRequest();', 'ServerTransaction serverTransactionId = requestEvent.getServerTransaction();', 'if (request.getMethod().equals(Request.SUBSCRIBE)) {', 'processSubscribe(requestEvent, serverTransactionId);', '} else if (request.getMethod().equals(Request.PUBLISH)) {', 'processPublish(requestEvent, serverTransactionId);', '} else {']
['received expected request with method no further processing done ', ['request', 'getmethod']]
camel sample_8510

['if (sstate.getState().equalsIgnoreCase("terminated")) {', 'sstate.setReasonCode("deactivated");', '}', '} else {', 'sstate = sipPresenceAgent.getConfiguration().getHeaderFactory().createSubscriptionStateHeader(SubscriptionStateHeader.ACTIVE);', '}', 'notifyRequest.addHeader(sstate);', 'notifyRequest.setHeader(eventHeader);', 'notifyRequest.setHeader(sipPresenceAgent.getConfiguration().getContactHeader());', 'notifyRequest.setContent(body, sipPresenceAgent.getConfiguration().getContentTypeHeader());']
['sending the following notify request to subscriber ', ['notifyrequest']]
camel sample_8510

['private void processPublish(RequestEvent requestEvent, ServerTransaction serverTransactionId) {', 'try {', 'Request request = requestEvent.getRequest();']
['sippresenceagentlistener received a publish request sending ok ', []]
camel sample_8510

['private void processPublish(RequestEvent requestEvent, ServerTransaction serverTransactionId) {', 'try {', 'Request request = requestEvent.getRequest();']
['sippresenceagentlistener request ', ['request']]
camel sample_8510

['private void processPublish(RequestEvent requestEvent, ServerTransaction serverTransactionId) {', 'try {', 'Request request = requestEvent.getRequest();', 'EventHeader eventHeader = (EventHeader) requestEvent.getRequest().getHeader(EventHeader.NAME);', 'Response response = sipPresenceAgent.getConfiguration().getMessageFactory().createResponse(202, request);', 'sipPresenceAgent.getProvider().sendResponse(response);', 'sendNotification(eventHeader, false, request.getContent());', '} catch (Exception e) {']
['exception thrown during publish notify processing in the sip presence agent listener ', ['e']]
camel sample_8510

['public void processSubscribe(RequestEvent requestEvent, ServerTransaction serverTransaction) {', 'SipProvider sipProvider = (SipProvider) requestEvent.getSource();', 'Request request = requestEvent.getRequest();', 'try {']
['sippresenceagentlistener received a subscribe request sending ok ', []]
camel sample_8510

['public void processSubscribe(RequestEvent requestEvent, ServerTransaction serverTransaction) {', 'SipProvider sipProvider = (SipProvider) requestEvent.getSource();', 'Request request = requestEvent.getRequest();', 'try {']
['sippresenceagentlistener request ', ['request']]
camel sample_8510

['public void processSubscribe(RequestEvent requestEvent, ServerTransaction serverTransaction) {', 'SipProvider sipProvider = (SipProvider) requestEvent.getSource();', 'Request request = requestEvent.getRequest();', 'try {', 'EventHeader eventHeader = (EventHeader) request.getHeader(EventHeader.NAME);', 'if (eventHeader == null) {']
['cannot find event header dropping request ', []]
camel sample_8510

['ToHeader toHeader = (ToHeader) response.getHeader(ToHeader.NAME);', 'toHeader.setTag(toTag);', 'this.dialog = st.getDialog();', 'this.dialog.terminateOnBye(false);', '} else {', 'response = sipPresenceAgent.getConfiguration().getMessageFactory().createResponse(200, request);', '}', 'response.addHeader(sipPresenceAgent.getConfiguration().getContactHeader());', 'response.addHeader(sipPresenceAgent.getConfiguration().getExpiresHeader());', 'st.sendResponse(response);']
['sippresenceagentlistener sent ok message ', []]
camel sample_8510

['ToHeader toHeader = (ToHeader) response.getHeader(ToHeader.NAME);', 'toHeader.setTag(toTag);', 'this.dialog = st.getDialog();', 'this.dialog.terminateOnBye(false);', '} else {', 'response = sipPresenceAgent.getConfiguration().getMessageFactory().createResponse(200, request);', '}', 'response.addHeader(sipPresenceAgent.getConfiguration().getContactHeader());', 'response.addHeader(sipPresenceAgent.getConfiguration().getExpiresHeader());', 'st.sendResponse(response);']
['sippresenceagentlistener response ', ['response']]
camel sample_8510

['this.dialog = st.getDialog();', 'this.dialog.terminateOnBye(false);', '} else {', 'response = sipPresenceAgent.getConfiguration().getMessageFactory().createResponse(200, request);', '}', 'response.addHeader(sipPresenceAgent.getConfiguration().getContactHeader());', 'response.addHeader(sipPresenceAgent.getConfiguration().getExpiresHeader());', 'st.sendResponse(response);', 'sendNotification(eventHeader, isInitial, request.getContent());', '} catch (Throwable e) {']
['exception thrown during notify processing in the sippresenceagentlistener ', ['e']]
camel sample_8510

['public synchronized void processResponse(ResponseEvent responseReceivedEvent) {', 'Response response = responseReceivedEvent.getResponse();', 'Integer statusCode = response.getStatusCode();', 'if (SIP_MESSAGE_CODES.containsKey(statusCode)) {']
['received from subscriber ', ['sip', 'message', 'codes', 'get', 'statuscode']]
camel sample_8510

['public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {', 'if (LOG.isWarnEnabled()) {']
['timeoutevent received at sip subscription listener ', []]
camel sample_8510

['public void processIOException(IOExceptionEvent exceptionEvent) {', 'if (LOG.isWarnEnabled()) {']
['ioexceptionevent received at sippresenceagentlistener ', []]
camel sample_8510

['public void processTransactionTerminated( TransactionTerminatedEvent transactionTerminatedEvent) {', 'if (LOG.isWarnEnabled()) {']
['transactionterminatedevent received at sippresenceagentlistener ', []]
camel sample_8510

['public void testSuspendResume() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("direct:foo", "A");', 'assertMockEndpointsSatisfied();']
['Suspending ', []]
camel sample_1361

['assertMockEndpointsSatisfied();', 'resetMocks();', 'mock.expectedMessageCount(0);', 'context.suspendRoute("foo");', 'assertEquals("Suspended", context.getRouteStatus("foo").name());', 'try {', 'template.sendBody("direct:foo", "B");', 'fail("Should have thrown an exception");', '} catch (Exception e) {', '}']
['Resuming ', []]
camel sample_1361

['exchange.setException(e);', 'callback.done(true);', 'return true;', '}', '}', 'callback = new InternalCallback(states, exchange, callback);', 'Object synchronous = exchange.removeProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC);', 'if (exchange.isTransacted() || synchronous != null) {', 'if (LOG.isTraceEnabled()) {', 'if (exchange.isTransacted()) {']
['transacted exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4533

['callback.done(true);', 'return true;', '}', '}', 'callback = new InternalCallback(states, exchange, callback);', 'Object synchronous = exchange.removeProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC);', 'if (exchange.isTransacted() || synchronous != null) {', 'if (LOG.isTraceEnabled()) {', 'if (exchange.isTransacted()) {', '} else {']
['synchronous unitofwork exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4533

['}', 'callback.done(true);', 'return true;', '} else {', 'final UnitOfWork uow = exchange.getUnitOfWork();', 'AsyncCallback async = callback;', 'if (uow != null) {', 'async = uow.beforeProcess(processor, exchange, callback);', '}', 'if (LOG.isTraceEnabled()) {']
['processing exchange for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4533

['if (uow != null) {', 'async = uow.beforeProcess(processor, exchange, callback);', '}', 'if (LOG.isTraceEnabled()) {', '}', 'boolean sync = processor.process(exchange, async);', 'if (uow != null) {', 'uow.afterProcess(processor, exchange, callback, sync);', '}', 'if (LOG.isTraceEnabled()) {']
['exchange processed and is continued routed for exchangeid synchronously asynchronously ', ['new', 'object', 'sync', 'exchange', 'getexchangeid', 'exchange']]
camel sample_4533

['protected boolean continueProcessing(Exchange exchange) {', 'Object stop = exchange.getProperty(Exchange.ROUTE_STOP);', 'if (stop != null) {', 'boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, stop);', 'if (doStop) {']
['exchange is marked to stop routing ', ['exchange']]
camel sample_4533

['public Object before(Exchange exchange) throws Exception {', 'for (RoutePolicy policy : routePolicies) {', 'try {', 'if (isRoutePolicyRunAllowed(policy)) {', 'policy.onExchangeBegin(route, exchange);', '}', '} catch (Exception e) {']
['error occurred during onexchangebegin on routepolicy this exception will be ignored ', ['policy', 'e']]
camel sample_4533

['public void after(Exchange exchange, Object data) throws Exception {', 'if (isCamelStopping(exchange.getContext())) {', 'return;', '}', 'for (RoutePolicy policy : routePolicies) {', 'try {', 'if (isRoutePolicyRunAllowed(policy)) {', 'policy.onExchangeDone(route, exchange);', '}', '} catch (Exception e) {']
['error occurred during onexchangedone on routepolicy this exception will be ignored ', ['policy', 'e']]
camel sample_4533

['public Object before(Exchange exchange) throws Exception {', 'try {']
['sleeping for millis ', ['delay']]
camel sample_4533

['public Object before(Exchange exchange) throws Exception {', 'try {', 'Thread.sleep(delay);', '} catch (InterruptedException e) {']
['sleep interrupted ', []]
camel sample_4533

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JcrComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jcr.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jcr.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1224

['public void transform(Message message, DataType from, DataType to) throws Exception {', 'Exchange exchange = message.getExchange();', 'CamelContext context = exchange.getContext();', 'if (from.isJavaType()) {', 'Object input = message.getBody();', 'Class<?> fromClass = context.getClassResolver().resolveClass(from.getName());', 'if (!fromClass.isAssignableFrom(input.getClass())) {']
['converting to ', ['fromclass', 'getname']]
camel sample_4026

['Exchange exchange = message.getExchange();', 'CamelContext context = exchange.getContext();', 'if (from.isJavaType()) {', 'Object input = message.getBody();', 'Class<?> fromClass = context.getClassResolver().resolveClass(from.getName());', 'if (!fromClass.isAssignableFrom(input.getClass())) {', 'input = context.getTypeConverter().mandatoryConvertTo(fromClass, input);', 'message.setBody(input);', '}', '}']
['sending to transform processor ', ['processor']]
camel sample_4026

['}', 'DefaultExchange transformExchange = new DefaultExchange(exchange);', 'transformExchange.setIn(message);', 'transformExchange.setProperties(exchange.getProperties());', 'processor.process(transformExchange);', 'Message answer = transformExchange.hasOut() ? transformExchange.getOut() : transformExchange.getIn();', 'if (to.isJavaType()) {', 'Object answerBody = answer.getBody();', 'Class<?> toClass = context.getClassResolver().resolveClass(to.getName());', 'if (!toClass.isAssignableFrom(answerBody.getClass())) {']
['converting to ', ['toclass', 'getname']]
camel sample_4026

['protected void doGetService(Exchange exchange, String operation) throws Exception {', 'Service service = null;', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(serviceName)) {']
['get a specific service require specify a service name ', []]
camel sample_13318

['protected void doGetService(Exchange exchange, String operation) throws Exception {', 'Service service = null;', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(serviceName)) {', 'throw new IllegalArgumentException( "Get a specific service require specify a service name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['get a specific service require specify a namespace name ', []]
camel sample_13318

['protected void doCreateService(Exchange exchange, String operation) throws Exception {', 'Service service = null;', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ServiceSpec serviceSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_SPEC, ServiceSpec.class);', 'if (ObjectHelper.isEmpty(serviceName)) {']
['create a specific service require specify a service name ', []]
camel sample_13318

['protected void doCreateService(Exchange exchange, String operation) throws Exception {', 'Service service = null;', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ServiceSpec serviceSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_SPEC, ServiceSpec.class);', 'if (ObjectHelper.isEmpty(serviceName)) {', 'throw new IllegalArgumentException( "Create a specific service require specify a service name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['create a specific service require specify a namespace name ', []]
camel sample_13318

['String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'ServiceSpec serviceSpec = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_SPEC, ServiceSpec.class);', 'if (ObjectHelper.isEmpty(serviceName)) {', 'throw new IllegalArgumentException( "Create a specific service require specify a service name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {', 'throw new IllegalArgumentException( "Create a specific service require specify a namespace name");', '}', 'if (ObjectHelper.isEmpty(serviceSpec)) {']
['create a specific service require specify a service spec bean ', []]
camel sample_13318

['protected void doDeleteService(Exchange exchange, String operation) throws Exception {', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(serviceName)) {']
['delete a specific service require specify a service name ', []]
camel sample_13318

['protected void doDeleteService(Exchange exchange, String operation) throws Exception {', 'String serviceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_SERVICE_NAME, String.class);', 'String namespaceName = exchange.getIn().getHeader( KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);', 'if (ObjectHelper.isEmpty(serviceName)) {', 'throw new IllegalArgumentException( "Delete a specific service require specify a service name");', '}', 'if (ObjectHelper.isEmpty(namespaceName)) {']
['delete a specific service require specify a namespace name ', []]
camel sample_13318

['protected void removeInterceptorWhichIsInThePhases(List<Interceptor<? extends Message>> interceptors, String[] phaseNames, Set<String> needToBeKept) {', 'for (Interceptor<? extends Message> i : interceptors) {', 'if (i instanceof PhaseInterceptor) {', 'PhaseInterceptor<? extends Message> p = (PhaseInterceptor<? extends Message>) i;', 'for (String phaseName : phaseNames) {', 'if (p.getPhase().equals(phaseName)) {', 'if (needToBeKept == null) {']
['removing the interceptor ', ['p']]
camel sample_8005

['protected void removeInterceptorWhichIsInThePhases(List<Interceptor<? extends Message>> interceptors, String[] phaseNames, Set<String> needToBeKept) {', 'for (Interceptor<? extends Message> i : interceptors) {', 'if (i instanceof PhaseInterceptor) {', 'PhaseInterceptor<? extends Message> p = (PhaseInterceptor<? extends Message>) i;', 'for (String phaseName : phaseNames) {', 'if (p.getPhase().equals(phaseName)) {', 'if (needToBeKept == null) {', 'interceptors.remove(p);', 'break;', '} else if (!needToBeKept.contains(p.getClass().getName())) {']
['removing the interceptor ', ['p']]
camel sample_8005

['if (i instanceof PhaseInterceptor) {', 'PhaseInterceptor<? extends Message> p = (PhaseInterceptor<? extends Message>) i;', 'for (String phaseName : phaseNames) {', 'if (p.getPhase().equals(phaseName)) {', 'outside = true;', 'break;', '}', '}', 'if (!outside) {', 'if (needToBeKept == null) {']
['removing the interceptor ', ['p']]
camel sample_8005

['for (String phaseName : phaseNames) {', 'if (p.getPhase().equals(phaseName)) {', 'outside = true;', 'break;', '}', '}', 'if (!outside) {', 'if (needToBeKept == null) {', 'interceptors.remove(p);', '} else if (!needToBeKept.contains(p.getClass().getName())) {']
['removing the interceptor ', ['p']]
camel sample_8005

['protected void removeInterceptors(List<Interceptor<? extends Message>> interceptors, Collection<Class<?>> toBeRemovedInterceptors) {', 'for (Interceptor<? extends Message> interceptor : interceptors) {', 'if (toBeRemovedInterceptors.contains(interceptor.getClass())) {']
['removing the interceptor ', ['interceptor']]
camel sample_8005

['public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {', 'if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {', 'String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName());']
['s doesn t support absolute paths will be converted to after camel absolute paths will be invalid ', ['string', 'format', 's', 's', 'ftpcomponent', 'getclass', 'getsimplename', 'configuration', 'getdirectoryname', 'relativepath']]
camel sample_15366

['public Message toCamelMessage(FullHttpRequest request, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['tocamelmessage ', ['request']]
camel sample_16663

['public void populateCamelHeaders(FullHttpRequest request, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['populatecamelheaders ', ['request']]
camel sample_16663

['String path = uri.getRawPath();', 'if (configuration.getPath() != null) {', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = configuration.getPath() != null ? configuration.getPath().toLowerCase(Locale.US) : null;', 'if (match != null && matchPath.startsWith(match)) {', 'path = path.substring(configuration.getPath().length());', '}', '}', 'headers.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http method ', ['request', 'method', 'name']]
camel sample_16663

['String path = uri.getRawPath();', 'if (configuration.getPath() != null) {', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = configuration.getPath() != null ? configuration.getPath().toLowerCase(Locale.US) : null;', 'if (match != null && matchPath.startsWith(match)) {', 'path = path.substring(configuration.getPath().length());', '}', '}', 'headers.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http uri ', ['request', 'uri']]
camel sample_16663

['String value = request.headers().get(name);', 'if (value != null && value.trim().startsWith("Basic")) {', 'NettyHttpHelper.appendHeader(headers, NettyHttpConstants.HTTP_AUTHENTICATION, "Basic");', '}', '}', 'List<String> values = request.headers().getAll(name);', 'Iterator<?> it = ObjectHelper.createIterator(values, ",", true);', 'while (it.hasNext()) {', 'Object extracted = it.next();', 'Object decoded = shouldUrlDecodeHeader(configuration, name, extracted, "UTF-8");']
['http header ', ['extracted']]
camel sample_16663

['if (request.uri().contains("?")) {', 'String query = ObjectHelper.after(request.uri(), "?");', 'Map<String, Object> uriParameters = URISupport.parseQuery(query, false, true);', 'for (Map.Entry<String, Object> entry : uriParameters.entrySet()) {', 'String name = entry.getKey();', 'Object values = entry.getValue();', 'Iterator<?> it = ObjectHelper.createIterator(values, ",", true);', 'while (it.hasNext()) {', 'Object extracted = it.next();', 'Object decoded = shouldUrlDecodeHeader(configuration, name, extracted, "UTF-8");']
['uri parameter ', ['extracted']]
camel sample_16663

['public Message toCamelMessage(FullHttpResponse response, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['tocamelmessage ', ['response']]
camel sample_16663

['public void populateCamelHeaders(FullHttpResponse response, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['populatecamelheaders ', ['response']]
camel sample_16663

['headers.put(Exchange.HTTP_RESPONSE_CODE, response.status().code());', 'headers.put(Exchange.HTTP_RESPONSE_TEXT, response.status().reasonPhrase());', 'for (String name : response.headers().names()) {', 'if (name.toLowerCase().equals("content-type")) {', 'name = Exchange.CONTENT_TYPE;', '}', 'List<String> values = response.headers().getAll(name);', 'Iterator<?> it = ObjectHelper.createIterator(values);', 'while (it.hasNext()) {', 'Object extracted = it.next();']
['http header ', ['extracted']]
camel sample_16663

['public HttpResponse toNettyResponse(Message message, NettyHttpConfiguration configuration) throws Exception {']
['tonettyresponse ', ['message']]
camel sample_16663

['public HttpResponse toNettyResponse(Message message, NettyHttpConfiguration configuration) throws Exception {', 'if (message.getBody() instanceof HttpResponse) {', 'return (HttpResponse) message.getBody();', '}', 'Object body = message.getBody();', 'Exception cause = message.getExchange().getException();', 'ByteBuf buffer;', 'boolean failed = message.getExchange().isFailed();', 'int defaultCode = failed ? 500 : 200;', 'int code = message.getHeader(Exchange.HTTP_RESPONSE_CODE, defaultCode, int.class);']
['http status code ', ['code']]
camel sample_16663

['}', '}', 'HttpResponse response;', 'if (buffer != null) {', 'response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(code), buffer);', 'if (buffer.readerIndex() == buffer.writerIndex()) {', 'buffer.setIndex(0, buffer.writerIndex());', '}', 'int len = buffer.readableBytes();', 'response.headers().set(HttpHeaderNames.CONTENT_LENGTH.toString(), len);']
['content length ', ['len']]
camel sample_16663

['String headerValue = tc.convertTo(String.class, it.next());', 'if (headerValue != null && headerFilterStrategy != null && !headerFilterStrategy.applyFilterToCamelHeaders(key, headerValue, message.getExchange())) {', 'LOG.trace("HTTP-Header: {}={}", key, headerValue);', 'response.headers().add(key, headerValue);', '}', '}', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'response.headers().set(HttpHeaderNames.CONTENT_TYPE.toString(), contentType);']
['content type ', ['contenttype']]
camel sample_16663

['if (configuration.isKeepAlive()) {', 'connection = HttpHeaderValues.KEEP_ALIVE.toString();', '} else {', 'connection = HttpHeaderValues.CLOSE.toString();', '}', '}', 'response.headers().set(HttpHeaderNames.CONNECTION.toString(), connection);', 'if (connection.equalsIgnoreCase(HttpHeaderValues.CLOSE.toString())) {', 'message.setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, true);', '}']
['connection ', ['connection']]
camel sample_16663

['public HttpRequest toNettyRequest(Message message, String uri, NettyHttpConfiguration configuration) throws Exception {']
['tonettyrequest ', ['message']]
camel sample_16663

['buffer = message.getBody(ByteBuf.class);', 'if (buffer == null) {', 'byte[] data = message.getMandatoryBody(byte[].class);', 'buffer = NettyConverter.toByteBuffer(data);', '}', '}', 'if (buffer != null) {', 'request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, uriForRequest, buffer);', 'int len = buffer.readableBytes();', 'request.headers().set(HttpHeaderNames.CONTENT_LENGTH.toString(), len);']
['content length ', ['len']]
camel sample_16663

['String headerValue = tc.convertTo(String.class, it.next());', 'if (headerValue != null && headerFilterStrategy != null && !headerFilterStrategy.applyFilterToCamelHeaders(key, headerValue, message.getExchange())) {', 'LOG.trace("HTTP-Header: {}={}", key, headerValue);', 'request.headers().add(key, headerValue);', '}', '}', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'request.headers().set(HttpHeaderNames.CONTENT_TYPE.toString(), contentType);']
['content type ', ['contenttype']]
camel sample_16663

['}', '}', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'request.headers().set(HttpHeaderNames.CONTENT_TYPE.toString(), contentType);', '}', 'URI u = new URI(uri);', 'String hostHeader = u.getHost() + (u.getPort() == 80 ? "" : ":" + u.getPort());', 'request.headers().set(HttpHeaderNames.HOST.toString(), hostHeader);']
['host ', ['hostheader']]
camel sample_16663

['request.headers().set(HttpHeaderNames.HOST.toString(), hostHeader);', 'String connection = message.getHeader(HttpHeaderNames.CONNECTION.toString(), String.class);', 'if (connection == null) {', 'if (configuration.isKeepAlive()) {', 'connection = HttpHeaderValues.KEEP_ALIVE.toString();', '} else {', 'connection = HttpHeaderValues.CLOSE.toString();', '}', '}', 'request.headers().set(HttpHeaderNames.CONNECTION.toString(), connection);']
['connection ', ['connection']]
camel sample_16663

['protected void doStart() throws Exception {', 'super.doStart();', 'if (configuration.getNegotiationType() == ThriftNegotiationType.SSL) {', 'if (!endpoint.isSynchronous()) {', 'throw new IllegalArgumentException("The SSL negotiation type requires to set syncronous communication mode");', '}', 'if (syncTransport == null) {', 'initializeSslTransport();']
['getting synchronous secured client implementation ', []]
camel sample_13031

['if (!endpoint.isSynchronous()) {', 'throw new IllegalArgumentException("The SSL negotiation type requires to set syncronous communication mode");', '}', 'if (syncTransport == null) {', 'initializeSslTransport();', 'thriftClient = ThriftUtils.constructClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), syncTransport, configuration.getExchangeProtocol(), configuration.getNegotiationType(), configuration.getCompressionType(), endpoint.getCamelContext());', '}', '} else if (endpoint.isSynchronous()) {', 'if (syncTransport == null) {', 'initializeSyncTransport();']
['getting synchronous client implementation ', []]
camel sample_13031

['thriftClient = ThriftUtils.constructClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), syncTransport, configuration.getExchangeProtocol(), configuration.getNegotiationType(), configuration.getCompressionType(), endpoint.getCamelContext());', '}', '} else if (endpoint.isSynchronous()) {', 'if (syncTransport == null) {', 'initializeSyncTransport();', 'thriftClient = ThriftUtils.constructClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), syncTransport, configuration.getExchangeProtocol(), configuration.getNegotiationType(), configuration.getCompressionType(), endpoint.getCamelContext());', '}', '} else {', 'if (asyncTransport == null) {', 'initializeAsyncTransport();']
['getting asynchronous client implementation ', []]
camel sample_13031

['protected void doStop() throws Exception {', 'if (syncTransport != null) {']
['terminating synchronous transport the remote thrift server ', []]
camel sample_13031

['protected void doStop() throws Exception {', 'if (syncTransport != null) {', 'syncTransport.close();', 'syncTransport = null;', '} else if (asyncTransport != null) {']
['terminating asynchronous transport the remote thrift server ', []]
camel sample_13031

['protected void initializeSyncTransport() throws TTransportException {', 'if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {']
['creating transport to the remote thrift server ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_13031

['protected void initializeAsyncTransport() throws IOException, TTransportException {', 'if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {']
['creating transport to the remote thrift server ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_13031

['protected void initializeSslTransport() throws TTransportException {', 'if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {', 'SSLContextParameters sslParameters = configuration.getSslParameters();', 'if (sslParameters == null) {', 'throw new IllegalArgumentException("SSL parameters must be initialized if negotiation type is set to " + configuration.getNegotiationType());', '}', 'ObjectHelper.notNull(sslParameters.getSecureSocketProtocol(), "Security protocol");', 'ObjectHelper.notNull(sslParameters.getTrustManagers().getKeyStore().getResource(), "Trust store path");', 'ObjectHelper.notNull(sslParameters.getTrustManagers().getKeyStore().getPassword(), "Trust store password");']
['creating secured transport to the remote thrift server ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_13031

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PgEventComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pgevent.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.pgevent.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_969

['public void testLoadAndRecoverLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);']
['staring to send messages ', ['size']]
camel sample_13898

['public void testLoadAndRecoverLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(SIZE / 10);', 'mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);']
['sending with id ', ['value', 'id']]
camel sample_13898

['mock.setResultWaitTime(50 * 1000);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', "char id = 'A';", 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("id", id);', 'headers.put("seq", i);', 'template.sendBodyAndHeaders("seda:start", value, headers);', 'Thread.sleep(5);', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_13898

['}', 'ConnectionFactory cf = resolveAndRemoveReferenceParameter(parameters, "connectionFactory", ConnectionFactory.class);', 'if (cf != null) {', 'endpoint.getConfiguration().setConnectionFactory(cf);', '}', 'String cfUsername = getAndRemoveParameter(parameters, "username", String.class, getConfiguration().getUsername());', 'String cfPassword = getAndRemoveParameter(parameters, "password", String.class, getConfiguration().getPassword());', 'if (cfUsername != null && cfPassword != null) {', 'cf = endpoint.getConfiguration().getConnectionFactory();', 'ObjectHelper.notNull(cf, "ConnectionFactory");']
['wrapping existing connectionfactory with usercredentialsconnectionfactoryadapter using username and password ', ['cfusername']]
camel sample_7173

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<RouteboxComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.routebox.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.routebox.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_590

['public void testInvalidExpressionFailsWithMeaningfulException() throws Exception {', 'try {', 'GroovyLanguage.groovy("exchange.doesNotExist").evaluate(exchange);', 'fail("This test case should have thrown an exception!");', '} catch (Exception e) {']
['caught expected exception ', ['e', 'e']]
camel sample_17137

['public Producer createProducer() throws Exception {']
['createproducer ', ['this', 'getendpointkey']]
camel sample_13877

['public Consumer createConsumer(Processor processor) throws Exception {']
['createconsumer processor ', ['this', 'getendpointkey']]
camel sample_13877

['public Charset determineCharset(byte[] hl7Bytes, String msh18) {', 'Charset answer = MllpProtocolConstants.DEFAULT_CHARSET;', 'if (configuration.hasCharsetName()) {', 'String charsetName = configuration.getCharsetName();', 'if (Charset.isSupported(charsetName)) {', 'answer = Charset.forName(charsetName);', '} else {']
['unsupported character set configured for component using default character set ', ['charsetname', 'mllpprotocolconstants', 'default', 'charset']]
camel sample_13877

['if (configuration.hasCharsetName()) {', 'String charsetName = configuration.getCharsetName();', 'if (Charset.isSupported(charsetName)) {', 'answer = Charset.forName(charsetName);', '} else {', '}', '} else if (msh18 != null && !msh18.isEmpty()) {', 'if (MllpProtocolConstants.MSH18_VALUES.containsKey(msh18)) {', 'answer = MllpProtocolConstants.MSH18_VALUES.get(msh18);', '} else {']
['unsupported character set specified for msh using default character set ', ['mllpprotocolconstants', 'default', 'charset']]
camel sample_13877

['if (MllpProtocolConstants.MSH18_VALUES.containsKey(msh18)) {', 'answer = MllpProtocolConstants.MSH18_VALUES.get(msh18);', '} else {', '}', '} else {', 'String foundMsh18 = findMsh18(hl7Bytes);', 'if (foundMsh18 != null && !foundMsh18.isEmpty()) {', 'if (MllpProtocolConstants.MSH18_VALUES.containsKey(foundMsh18)) {', 'answer = MllpProtocolConstants.MSH18_VALUES.get(foundMsh18);', '} else {']
['unsupported character set found in msh using default character set ', ['mllpprotocolconstants', 'default', 'charset']]
camel sample_13877

['} else {', '}', '} else {', 'String foundMsh18 = findMsh18(hl7Bytes);', 'if (foundMsh18 != null && !foundMsh18.isEmpty()) {', 'if (MllpProtocolConstants.MSH18_VALUES.containsKey(foundMsh18)) {', 'answer = MllpProtocolConstants.MSH18_VALUES.get(foundMsh18);', '} else {', '}', '} else {']
['character set not specified and no character set found in msh using default character set ', ['mllpprotocolconstants', 'default', 'charset']]
camel sample_13877

['public String createNewString(byte[] hl7Bytes, String msh18) {', 'if (hl7Bytes == null) {', 'return null;', '} else if (hl7Bytes.length == 0) {', 'return "";', '}', 'Charset charset = determineCharset(hl7Bytes, msh18);']
['creating new string using charset ', ['charset']]
camel sample_13877

['private static Object checkSerializableBody(String type, Exchange exchange, Object object) {', 'if (object == null) {', 'return null;', '}', 'Serializable converted = exchange.getContext().getTypeConverter().convertTo(Serializable.class, exchange, object);', 'if (converted != null) {', 'return converted;', '} else {']
['exchange containing object of type cannot be serialized it will be excluded by the holder ', ['type', 'object', 'object', 'getclass', 'getcanonicalname']]
camel sample_3976

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CxfComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cxf.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cxf.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_986

['public void testXPathPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed file with elements in ', ['size', 'timeutils', 'printduration', 'watch', 'stop']]
camel sample_16726

['public void testXPathPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed tiny messages ', ['tiny', 'get']]
camel sample_16726

['public void testXPathPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed small messages ', ['small', 'get']]
camel sample_16726

['public void testXPathPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed medium messages ', ['med', 'get']]
camel sample_16726

['public void testXPathPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed large messages ', ['large', 'get']]
camel sample_16726

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("file:target/data?noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['starting to process file ', []]
camel sample_16726

['from("file:target/data?noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'watch.restart();', '}', '}) .split().xpath("/orders/order").streaming() .choice() .when().xpath("/order/amount < 10") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>3</amount>"));', 'int num = tiny.incrementAndGet();', 'if (num % 100 == 0) {']
['processed tiny messages ', ['num']]
camel sample_16726

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 50") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>44</amount>"));', 'int num = small.incrementAndGet();', 'if (num % 100 == 0) {']
['processed small messages ', ['num']]
camel sample_16726

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 100") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>88</amount>"));', 'int num = med.incrementAndGet();', 'if (num % 100 == 0) {']
['processed medium messages ', ['num']]
camel sample_16726

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .otherwise() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>123</amount>"));', 'int num = large.incrementAndGet();', 'if (num % 100 == 0) {']
['processed large messages ', ['num']]
camel sample_16726

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_11149

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_11149

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsInfo answer = HdfsInfoFactory.newHdfsInfo(this.hdfsPath.toString());', 'if (onStartup) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_11149

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsInfo answer = HdfsInfoFactory.newHdfsInfo(this.hdfsPath.toString());', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_11149

['Path pattern = info.getPath().suffix("/" + this.config.getPattern());', 'fileStatuses = info.getFileSystem().globStatus(pattern, new ExcludePathFilter());', '}', 'for (FileStatus status : fileStatuses) {', 'if (normalFileIsDirectoryNoSuccessFile(status, info)) {', 'continue;', '}', 'if (config.getOwner() != null) {', 'if (!config.getOwner().equals(status.getOwner())) {', 'if (log.isDebugEnabled()) {']
['skipping file as not matching owner ', ['status', 'getpath', 'tostring', 'config', 'getowner']]
camel sample_11149

['if (log.isDebugEnabled()) {', '}', 'continue;', '}', '}', 'try {', 'this.rwlock.writeLock().lock();', 'this.istream = HdfsInputStream.createInputStream(status.getPath().toString(), this.config);', 'if (!this.istream.isOpened()) {', 'if (log.isDebugEnabled()) {']
['skipping file because it doesn t exist anymore ', ['status', 'getpath', 'tostring']]
camel sample_11149

['while (this.istream.next(key, value) >= 0) {', 'Exchange exchange = this.getEndpoint().createExchange();', 'Message message = new DefaultMessage(this.getEndpoint().getCamelContext());', 'String fileName = StringUtils.substringAfterLast(status.getPath().toString(), "/");', 'message.setHeader(Exchange.FILE_NAME, fileName);', 'if (key.value != null) {', 'message.setHeader(HdfsHeader.KEY.name(), key.value);', '}', 'message.setBody(value.value);', 'exchange.setIn(message);']
['processing file ', ['filename']]
camel sample_11149

['protected void assertRowExist(String tableName, Map<String, String> row) throws Exception {', 'QueryRequest queryRequest = new QueryRequest();', 'String query = "SELECT * FROM " + DATASET_ID + "." + tableName + " WHERE " + row.entrySet().stream() .map(e -> e.getKey() + " = \'" + e.getValue() + "\'") .collect(Collectors.joining(" AND "));']
['query ', ['query']]
camel sample_9356

['protected void createBqTable(String tableId) throws Exception {', 'TableReference reference = new TableReference() .setTableId(tableId) .setDatasetId(DATASET_ID) .setProjectId(PROJECT_ID);', 'InputStream in = this.getClass().getResourceAsStream("/schema/simple-table.json");', 'TableSchema schema = readDefinition(in);', 'Table table = new Table() .setTableReference(reference) .setSchema(schema);', 'try {', 'getConnectionFactory().getDefaultClient().tables() .insert(PROJECT_ID, DATASET_ID, table) .execute();', '} catch (GoogleJsonResponseException e) {', 'if (e.getDetails().getCode() == 409) {']
['table already exist ', []]
camel sample_9356

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_11667

['public void testPerformance() {', 'SimpleUuidGenerator uuidGenerator = new SimpleUuidGenerator();', 'StopWatch watch = new StopWatch();']
['first id ', ['uuidgenerator', 'generateuuid']]
camel sample_1336

['public void testPerformance() {', 'SimpleUuidGenerator uuidGenerator = new SimpleUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['last id ', ['uuidgenerator', 'generateuuid']]
camel sample_1336

['public void testPerformance() {', 'SimpleUuidGenerator uuidGenerator = new SimpleUuidGenerator();', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 500000; i++) {', 'uuidGenerator.generateUuid();', '}']
['took ', ['timeutils', 'printduration', 'watch', 'taken']]
camel sample_1336

['public void onFailure(Exchange exchange) {', 'Integer deadline = 0;', 'Object configuredDeadline = exchange.getIn().getHeader(GooglePubsubConstants.ACK_DEADLINE);', 'if (configuredDeadline != null && Integer.class.isInstance(configuredDeadline)) {', 'deadline = (Integer) configuredDeadline;', '}', 'if (configuredDeadline != null && String.class.isInstance(configuredDeadline)) {', 'try {', 'deadline = Integer.valueOf((String) configuredDeadline);', '} catch (Exception e) {']
['unable to parse ack deadline header value ', ['e']]
camel sample_17249

['if (configuredDeadline != null && Integer.class.isInstance(configuredDeadline)) {', 'deadline = (Integer) configuredDeadline;', '}', 'if (configuredDeadline != null && String.class.isInstance(configuredDeadline)) {', 'try {', 'deadline = Integer.valueOf((String) configuredDeadline);', '} catch (Exception e) {', '}', '}', 'if (deadline != 0) {']
['exchange ack deadline ', ['exchange', 'getexchangeid', 'deadline']]
camel sample_17249

['public EmbeddedServletContainerCustomizer containerCustomizer() {', 'return container -> {', 'try (ServerSocket socket = new ServerSocket(0)) {']
['server port ', ['socket', 'getlocalport']]
camel sample_17619

['public Language resolveLanguage(String name, CamelContext context) {', 'try {', 'Object bean = context.getRegistry().lookupByName(".camelBlueprint.languageResolver." + name);', 'if (bean instanceof LanguageResolver) {']
['found language resolver in registry ', ['name', 'bean']]
camel sample_8117

['public Language resolveLanguage(String name, CamelContext context) {', 'try {', 'Object bean = context.getRegistry().lookupByName(".camelBlueprint.languageResolver." + name);', 'if (bean instanceof LanguageResolver) {', 'return ((LanguageResolver) bean).resolveLanguage(name, context);', '}', '} catch (Exception e) {']
['ignored error looking up bean due ', ['name', 'e', 'getmessage', 'e']]
camel sample_8117

['public boolean postProcessAfterInstantiation(final Object bean, final String beanName) throws BeansException {', 'ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {', 'public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {', 'MagicAnnotation annotation = field.getAnnotation(MagicAnnotation.class);', 'if (annotation != null && field.getType() == String.class) {']
['found magicannotation on field of class ', ['field', 'bean', 'getclass']]
camel sample_15761

['public void process(Exchange exchange) throws Exception {', 'ExecCommand execCommand = getBinding().readInput(exchange, endpoint);', 'ExecCommandExecutor executor = endpoint.getCommandExecutor();', 'if (executor == null) {', 'executor = new DefaultExecCommandExecutor();', '}']
['executing ', ['execcommand']]
camel sample_12227

['public void process(Exchange exchange) throws Exception {', 'ExecCommand execCommand = getBinding().readInput(exchange, endpoint);', 'ExecCommandExecutor executor = endpoint.getCommandExecutor();', 'if (executor == null) {', 'executor = new DefaultExecCommandExecutor();', '}', 'ExecResult result = executor.execute(execCommand);', 'ObjectHelper.notNull(result, "The command executor must return a not-null result");']
['the command had exit value ', ['execcommand', 'result', 'getexitvalue']]
camel sample_12227

['public void process(Exchange exchange) throws Exception {', 'ExecCommand execCommand = getBinding().readInput(exchange, endpoint);', 'ExecCommandExecutor executor = endpoint.getCommandExecutor();', 'if (executor == null) {', 'executor = new DefaultExecCommandExecutor();', '}', 'ExecResult result = executor.execute(execCommand);', 'ObjectHelper.notNull(result, "The command executor must return a not-null result");', 'if (result.getExitValue() != 0) {']
['the command returned exit value ', ['execcommand', 'result', 'getexitvalue']]
camel sample_12227

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");']
['using osgicamelcontextnamestrategy ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));']
['using osgimanagementnamestrategy ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));']
['using osgiclassresolver ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));', 'camelContext.setClassResolver(new OsgiClassResolver(camelContext, bundleContext));']
['using osgifactoryfinderresolver ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));', 'camelContext.setClassResolver(new OsgiClassResolver(camelContext, bundleContext));', 'camelContext.setFactoryFinderResolver(new OsgiFactoryFinderResolver(bundleContext));']
['using osgipackagescanclassresolver ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));', 'camelContext.setClassResolver(new OsgiClassResolver(camelContext, bundleContext));', 'camelContext.setFactoryFinderResolver(new OsgiFactoryFinderResolver(bundleContext));', 'camelContext.setPackageScanClassResolver(new OsgiPackageScanClassResolver(bundleContext));']
['using osgicomponentresolver ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));', 'camelContext.setClassResolver(new OsgiClassResolver(camelContext, bundleContext));', 'camelContext.setFactoryFinderResolver(new OsgiFactoryFinderResolver(bundleContext));', 'camelContext.setPackageScanClassResolver(new OsgiPackageScanClassResolver(bundleContext));', 'camelContext.setComponentResolver(new OsgiComponentResolver(bundleContext));']
['using osgilanguageresolver ', []]
camel sample_13089

['public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");', 'camelContext.setNameStrategy(new OsgiCamelContextNameStrategy(bundleContext));', 'camelContext.setManagementNameStrategy(new OsgiManagementNameStrategy(camelContext, bundleContext));', 'camelContext.setClassResolver(new OsgiClassResolver(camelContext, bundleContext));', 'camelContext.setFactoryFinderResolver(new OsgiFactoryFinderResolver(bundleContext));', 'camelContext.setPackageScanClassResolver(new OsgiPackageScanClassResolver(bundleContext));', 'camelContext.setComponentResolver(new OsgiComponentResolver(bundleContext));', 'camelContext.setLanguageResolver(new OsgiLanguageResolver(bundleContext));']
['using osgidataformatresolver ', []]
camel sample_13089

['public static Registry wrapRegistry(CamelContext camelContext, Registry registry, BundleContext bundleContext) {', 'ObjectHelper.notNull(bundleContext, "BundleContext");']
['setting up osgi serviceregistry ', []]
camel sample_13089

['public AS400 getConnection() {', 'AS400 system = null;', 'try {', 'if (LOG.isDebugEnabled()) {']
['getting an object for from ', ['systemname', 'userid', 'connectionpool']]
camel sample_16771

['system = connectionPool.getSecureConnection(systemName, userID, password);', '} else {', 'system = connectionPool.getConnection(systemName, userID, password);', '}', 'if (ccsid != DEFAULT_SYSTEM_CCSID) {', 'system.setCcsid(ccsid);', '}', 'try {', 'system.setGuiAvailable(guiAvailable);', '} catch (PropertyVetoException e) {']
['failed to disable as prompting in the environment running camel this exception will be ignored ', ['e']]
camel sample_16771

['public void configure() {', 'from("timer:period=20000") .setHeader("CamelFacebook.reading.limit", constant("10")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'if (lastTimestamp > 0) {', 'exchange.getIn().setHeader("CamelFacebook.reading.since", lastTimestamp);', '}', '}', '}) .to("facebook: .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'ResponseList<Post> body = (ResponseList<Post>) exchange.getIn().getBody();']
['number of posts received ', ['body', 'size']]
camel sample_9585

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'ServiceHelper.suspendService(context.getRoute("test").getConsumer());', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_17160

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'Thread.sleep(1000);', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_17160

['policy.setRouteResumeRepeatInterval(3000);', 'from("direct:start") .routeId("test") .routePolicy(policy) .to("mock:success");', '}', '});', 'context.start();', 'Thread.sleep(1000);', 'try {', 'template.sendBody("direct:start", "Ready or not, Here, I come");', 'fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['consumer successfully suspended ', []]
camel sample_17160

['int completionTimeout = 1000;', 'int completionSize = 200;', 'fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy", queueName, completionTimeout, completionSize, consumerCount) .routeId("batchConsumer").startupOrder(10).autoStartup(false) .split(body()) .to("mock:split");', '}', '});', 'context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);']
['sending messages ', []]
camel sample_12362

['int completionSize = 200;', 'fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy", queueName, completionTimeout, completionSize, consumerCount) .routeId("batchConsumer").startupOrder(10).autoStartup(false) .split(body()) .to("mock:split");', '}', '});', 'context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);', 'template.sendBody("direct:in", generateStrings(messageCount));']
['send complete ', []]
camel sample_12362

['context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);', 'template.sendBody("direct:in", generateStrings(messageCount));', 'StopWatch stopWatch = new StopWatch();', 'context.startRoute("batchConsumer");', 'assertMockEndpointsSatisfied();', 'long time = stopWatch.stop();']
['processed messages in ms ', ['messagecount', 'time']]
camel sample_12362

['context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);', 'template.sendBody("direct:in", generateStrings(messageCount));', 'StopWatch stopWatch = new StopWatch();', 'context.startRoute("batchConsumer");', 'assertMockEndpointsSatisfied();', 'long time = stopWatch.stop();']
['average throughput msg s ', ['long', 'messagecount', 'time']]
camel sample_12362

['int completionTimeout = 1000;', 'int completionSize = 200;', 'fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy&keepAliveDelay=300", queueName, completionTimeout, completionSize, consumerCount) .routeId("batchConsumer").startupOrder(10).autoStartup(false) .split(body()) .to("mock:split");', '}', '});', 'context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);']
['sending messages ', []]
camel sample_12362

['int completionSize = 200;', 'fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy&keepAliveDelay=300", queueName, completionTimeout, completionSize, consumerCount) .routeId("batchConsumer").startupOrder(10).autoStartup(false) .split(body()) .to("mock:split");', '}', '});', 'context.start();', 'MockEndpoint mockBefore = getMockEndpoint("mock:before");', 'mockBefore.setExpectedMessageCount(messageCount);', 'MockEndpoint mockSplit = getMockEndpoint("mock:split");', 'mockSplit.setExpectedMessageCount(messageCount);', 'template.sendBody("direct:in", generateStrings(messageCount));']
['send complete ', []]
camel sample_12362

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GangliaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ganglia.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ganglia.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_528

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['write error ', ['mllpwriteexception', 'class', 'handled', 'true', 'to', 'writeex', 'log', 'logginglevel', 'error', 'routeid', 'stop']]
camel sample_13857

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['receive error ', ['mllpacknowledgementreceiveexception', 'class', 'handled', 'true', 'to', 'receiveex', 'log', 'logginglevel', 'error', 'routeid', 'stop']]
camel sample_13857

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'String routeId = "mllp-sender";', 'public void configure() {']
['sending message mllp log logginglevel info routeid acknowledgement to complete ', ['source', 'getdefaultendpoint', 'routeid', 'routeid', 'log', 'logginglevel', 'info', 'routeid', 'tof', 'received']]
camel sample_13857

['source.sendBody(Hl7TestMessageGenerator.generateMessage());', 'assertTrue("Should have completed two exchanges", done.matches(5, TimeUnit.SECONDS));', 'Thread.sleep((long) (IDLE_TIMEOUT * 1.1));', 'try {', 'mllpServer.checkClientConnections();', 'fail("Should receive and exception for the closed connection");', '} catch (MllpJUnitResourceException expectedEx) {', '}', 'source.sendBody(Hl7TestMessageGenerator.generateMessage());', 'assertMockEndpointsSatisfied(5, TimeUnit.SECONDS);']
['Breakpoint ', []]
camel sample_13857

['public RoutePolicy createRoutePolicy(CamelContext camelContext, String routeId, RouteDefinition route) {', 'if (filters.stream().allMatch(filter -> filter.test(camelContext, routeId, route))) {', 'if (ObjectHelper.isNotEmpty(route.getRoutePolicies())) {', 'if (route.getRoutePolicies().stream().anyMatch(ClusteredRoutePolicy.class::isInstance)) {']
['route has a clusteredroutepolicy already set up ', ['routeid']]
camel sample_3956

['return null;', '}', '}', 'try {', 'final ClusteredRouteConfiguration configuration = configurations.getOrDefault(routeId, defaultConfiguration);', 'final String namespace = ObjectHelper.supplyIfEmpty(configuration.getNamespace(), defaultConfiguration::getNamespace);', 'final Duration initialDelay = ObjectHelper.supplyIfEmpty(configuration.getInitialDelay(), defaultConfiguration::getInitialDelay);', 'ClusteredRoutePolicy policy = ClusteredRoutePolicy.forNamespace(clusterService, namespace);', 'policy.setCamelContext(getCamelContext());', 'policy.setInitialDelay(initialDelay);']
['attaching route to namespace ', ['routeid', 'namespace']]
camel sample_3956

['protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {']
['content encryption algorithm ', ['conf', 'getalgorithmid']]
camel sample_11539

['protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {']
['parameter secretkeylength ', ['conf', 'getsecretkeylength']]
camel sample_11539

['protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {', 'OutputStream encryptingStream = null;', 'try {', 'CMSEnvelopedDataStreamGenerator gen = new CMSEnvelopedDataStreamGenerator();', 'OriginatorInformationProvider originatorInformationProvider = conf.getOriginatorInformationProvider();', 'if (originatorInformationProvider != null) {']
['originatorinformationprovider found ', []]
camel sample_11539

['protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {', 'OutputStream encryptingStream = null;', 'try {', 'CMSEnvelopedDataStreamGenerator gen = new CMSEnvelopedDataStreamGenerator();', 'OriginatorInformationProvider originatorInformationProvider = conf.getOriginatorInformationProvider();', 'if (originatorInformationProvider != null) {', 'OriginatorInformation originatorInformation = originatorInformationProvider.getOriginatorInformation(exchange);', 'if (originatorInformation != null) {']
['originatorinformation found ', []]
camel sample_11539

['CMSEnvelopedDataStreamGenerator gen = new CMSEnvelopedDataStreamGenerator();', 'OriginatorInformationProvider originatorInformationProvider = conf.getOriginatorInformationProvider();', 'if (originatorInformationProvider != null) {', 'OriginatorInformation originatorInformation = originatorInformationProvider.getOriginatorInformation(exchange);', 'if (originatorInformation != null) {', 'gen.setOriginatorInfo(originatorInformation);', '}', '}', 'AttributesGeneratorProvider attributeGeneratorProvider = conf.getUnprotectedAttributesGeneratorProvider();', 'if (attributeGeneratorProvider != null) {']
['attributegeneratorprovider found ', []]
camel sample_11539

['}', 'AttributesGeneratorProvider attributeGeneratorProvider = conf.getUnprotectedAttributesGeneratorProvider();', 'if (attributeGeneratorProvider != null) {', 'gen.setUnprotectedAttributeGenerator(attributeGeneratorProvider.getAttributesGenerator(exchange));', '}', 'if (conf.getRecipient().isEmpty()) {', 'throw new CryptoCmsException("No recipient configured.");', '}', 'for (RecipientInfo recipientInfo : conf.getRecipient()) {', 'TransRecipientInfo keyTransrecipientInfo = (TransRecipientInfo)recipientInfo;']
['recipient info ', ['keytransrecipientinfo']]
camel sample_11539

['AttributesGeneratorProvider attributeGeneratorProvider = conf.getUnprotectedAttributesGeneratorProvider();', 'if (attributeGeneratorProvider != null) {', 'gen.setUnprotectedAttributeGenerator(attributeGeneratorProvider.getAttributesGenerator(exchange));', '}', 'if (conf.getRecipient().isEmpty()) {', 'throw new CryptoCmsException("No recipient configured.");', '}', 'for (RecipientInfo recipientInfo : conf.getRecipient()) {', 'TransRecipientInfo keyTransrecipientInfo = (TransRecipientInfo)recipientInfo;', 'X509Certificate encryptCert = keyTransrecipientInfo.getCertificate(exchange);']
['encryption certificate for recipient with ', ['keytransrecipientinfo', 'encryptcert']]
camel sample_11539

['TransRecipientInfo keyTransrecipientInfo = (TransRecipientInfo)recipientInfo;', 'X509Certificate encryptCert = keyTransrecipientInfo.getCertificate(exchange);', 'AlgorithmIdentifier keyEncryptionAlgorithm = determineKeyEncryptionAlgorithmIdentifier(keyTransrecipientInfo.getKeyEncryptionAlgorithm(exchange), keyTransrecipientInfo);', 'JceKeyTransRecipientInfoGenerator keyTransRecipeintInfoGen = new JceKeyTransRecipientInfoGenerator(encryptCert, keyEncryptionAlgorithm);', 'keyTransRecipeintInfoGen.setProvider(BouncyCastleProvider.PROVIDER_NAME);', 'gen.addRecipientInfoGenerator(keyTransRecipeintInfoGen);', '}', 'OutputEncryptor encryptor = new JceCMSContentEncryptorBuilder(conf.getAlgorithmID()).setProvider(BouncyCastleProvider.PROVIDER_NAME).build();', 'encryptingStream = gen.open(os, encryptor);', 'IOHelper.copy(is, encryptingStream);']
['cms enveloped data creation successful ', []]
camel sample_11539

['public void testStopStart() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();']
['Stopping ', []]
camel sample_1438

['resetMocks();', 'mock.expectedMessageCount(0);', 'context.stopRoute("foo");', 'assertEquals("Stopped", context.getRouteStatus("foo").name());', 'Route route = context.getRoute("foo");', 'if (route instanceof StatefulService) {', 'assertEquals("Stopped", ((StatefulService) route).getStatus().name());', '}', 'template.sendBody("seda:foo", "B");', 'mock.assertIsSatisfied(1000);']
['Starting ', []]
camel sample_1438

['public void testWSHttpCallEcho() throws Exception {', '{', 'final List<String> received = new ArrayList<String>();', 'final CountDownLatch latch = new CountDownLatch(1);', 'final AsyncHttpClient c = new DefaultAsyncHttpClient();', 'final WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13154

['websocket.close();', 'c.close();', '}', '{', 'final List<String> received = new ArrayList<String>();', 'final CountDownLatch latch = new CountDownLatch(1);', 'final AsyncHttpClient c = new DefaultAsyncHttpClient();', 'final WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_13154

['public void testConsume() throws Exception {', 'final MockEndpoint mockEndpoint = camelContext.getEndpoint("mock:results", MockEndpoint.class);', 'mockEndpoint.expectedBodiesReceived("b", "d");', 'Observable<Order> observable = reactiveCamel.toObservable("seda:orders", Order.class);', 'Observable<String> largeOrderIds = observable.filter(order -> order.getAmount() > 100.0).map(order -> order.getId());', 'largeOrderIds.take(2).subscribe(body -> {']
['processing ', ['body']]
camel sample_11169

['public ModelMBean assemble(MBeanServer mBeanServer, Object obj, ObjectName name) throws JMException {', 'ModelMBeanInfo mbi = null;', 'if (obj instanceof ManagedInstance) {', 'Object custom = ((ManagedInstance) obj).getInstance();', 'if (custom != null && ObjectHelper.hasAnnotation(custom.getClass().getAnnotations(), ManagedResource.class)) {']
['assembling mbeaninfo for from custom managedresource object ', ['name', 'custom']]
camel sample_16356

['ModelMBeanInfo mbi = null;', 'if (obj instanceof ManagedInstance) {', 'Object custom = ((ManagedInstance) obj).getInstance();', 'if (custom != null && ObjectHelper.hasAnnotation(custom.getClass().getAnnotations(), ManagedResource.class)) {', 'mbi = springAssembler.getMBeanInfo(custom, name.toString());', 'obj = custom;', '}', '}', 'if (mbi == null) {', 'if (ObjectHelper.hasAnnotation(obj.getClass().getAnnotations(), ManagedResource.class)) {']
['assembling mbeaninfo for from managedresource object ', ['name', 'obj']]
camel sample_16356

['obj = custom;', '}', '}', 'if (mbi == null) {', 'if (ObjectHelper.hasAnnotation(obj.getClass().getAnnotations(), ManagedResource.class)) {', 'mbi = springAssembler.getMBeanInfo(obj, name.toString());', '} else {', 'return super.assemble(mBeanServer, obj, name);', '}', '}']
['assembled mbeaninfo ', ['mbi']]
camel sample_16356

['protected InputStream resolveResource(String resource) throws IOException {', 'InputStream is = null;', 'try {']
['trying to open resource as a file ', ['resource']]
camel sample_4285

['protected InputStream resolveResource(String resource) throws IOException {', 'InputStream is = null;', 'try {', 'is = new FileInputStream(resource);']
['opened resource as a file ', ['resource']]
camel sample_4285

['protected InputStream resolveResource(String resource) throws IOException {', 'InputStream is = null;', 'try {', 'is = new FileInputStream(resource);', '} catch (FileNotFoundException e) {']
['could not open resource as a file ', ['resource', 'e']]
camel sample_4285

['protected InputStream resolveResource(String resource) throws IOException {', 'InputStream is = null;', 'try {', 'is = new FileInputStream(resource);', '} catch (FileNotFoundException e) {', '}', 'if (is == null && this.context != null) {']
['trying to open resource using the camelcontext classresolver ', ['context', 'getclassresolver']]
camel sample_4285

['protected InputStream resolveResource(String resource) throws IOException {', 'InputStream is = null;', 'try {', 'is = new FileInputStream(resource);', '} catch (FileNotFoundException e) {', '}', 'if (is == null && this.context != null) {', 'try {', 'is = context.getClassResolver().loadResourceAsStream(resource);', 'if (is == null) {']
['could not to open resource using the camelcontext classresolver ', ['resource', 'context', 'getclassresolver']]
camel sample_4285

['InputStream is = null;', 'try {', 'is = new FileInputStream(resource);', '} catch (FileNotFoundException e) {', '}', 'if (is == null && this.context != null) {', 'try {', 'is = context.getClassResolver().loadResourceAsStream(resource);', 'if (is == null) {', '} else {']
['opened resource using the camelcontext classresolver ', ['resource', 'this', 'getclass', 'getclassloader']]
camel sample_4285

['is = new FileInputStream(resource);', '} catch (FileNotFoundException e) {', '}', 'if (is == null && this.context != null) {', 'try {', 'is = context.getClassResolver().loadResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '} catch (Throwable e) {']
['could not open resource using the camelcontext classresolver ', ['resource', 'e']]
camel sample_4285

['if (is == null && this.context != null) {', 'try {', 'is = context.getClassResolver().loadResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '} catch (Throwable e) {', '}', '}', 'if (is == null && Thread.currentThread().getContextClassLoader() != null) {']
['trying to open resource as a class path resource with the tccl ', ['resource', 'thread', 'currentthread', 'getcontextclassloader']]
camel sample_4285

['is = context.getClassResolver().loadResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '} catch (Throwable e) {', '}', '}', 'if (is == null && Thread.currentThread().getContextClassLoader() != null) {', 'is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);', 'if (is == null) {']
['could not open resource as a class path resource using the tccl ', ['resource', 'thread', 'currentthread', 'getcontextclassloader']]
camel sample_4285

['if (is == null) {', '} else {', '}', '} catch (Throwable e) {', '}', '}', 'if (is == null && Thread.currentThread().getContextClassLoader() != null) {', 'is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);', 'if (is == null) {', '} else {']
['opened resource as a class path resource with the tccl ', ['resource', 'thread', 'currentthread', 'getcontextclassloader']]
camel sample_4285

['} catch (Throwable e) {', '}', '}', 'if (is == null && Thread.currentThread().getContextClassLoader() != null) {', 'is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {']
['trying to open resource as a class path resource using the classloader ', ['this', 'getclass', 'getclassloader']]
camel sample_4285

['}', 'if (is == null && Thread.currentThread().getContextClassLoader() != null) {', 'is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {', 'is = this.getClass().getResourceAsStream(resource);', 'if (is == null) {']
['could not open resource as a class path resource using the classloader ', ['resource', 'this', 'getclass', 'getclassloader']]
camel sample_4285

['if (is == null && Thread.currentThread().getContextClassLoader() != null) {', 'is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {', 'is = this.getClass().getResourceAsStream(resource);', 'if (is == null) {', '} else {']
['opened resource as a class path resource with the classloader ', ['resource', 'this', 'getclass', 'getclassloader']]
camel sample_4285

['}', '}', 'if (is == null) {', 'is = this.getClass().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {', 'try {']
['trying to open resource as a url ', ['resource']]
camel sample_4285

['}', 'if (is == null) {', 'is = this.getClass().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {', 'try {', 'is = new URL(resource).openStream();']
['opened resource as a url ', ['resource']]
camel sample_4285

['if (is == null) {', 'is = this.getClass().getResourceAsStream(resource);', 'if (is == null) {', '} else {', '}', '}', 'if (is == null) {', 'try {', 'is = new URL(resource).openStream();', '} catch (IOException e) {']
['could not open resource as a url ', ['resource', 'e']]
camel sample_4285

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixQueueComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-queue.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-queue.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1087

['public void run() throws TTransportException {', 'TTransport transport = new TSocket("localhost", THRIFT_SYNC_REQUEST_TEST_PORT);', 'transport.open();', 'TProtocol protocol = new TBinaryProtocol(new TFramedTransport(transport));', 'Calculator.Client client = (new Calculator.Client.Factory()).getClient(protocol);', 'int instanceId = createId();', 'int calculateResponse = 0;', 'try {', 'calculateResponse = client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY));', '} catch (TException e) {']
['Exception ', ['e']]
camel sample_13011

['RunnableAssert ra = new RunnableAssert("testAsyncWithConcurrentThreads") {', 'public void run() throws TTransportException, IOException, InterruptedException {', 'final CountDownLatch latch = new CountDownLatch(1);', 'TNonblockingTransport transport = new TNonblockingSocket("localhost", THRIFT_ASYNC_REQUEST_TEST_PORT);', 'Calculator.AsyncClient client = (new Calculator.AsyncClient.Factory(new TAsyncClientManager(), new TBinaryProtocol.Factory())).getAsyncClient(transport);', 'int instanceId = createId();', 'CalculateAsyncMethodCallback calculateCallback = new CalculateAsyncMethodCallback(latch);', 'try {', 'client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY), calculateCallback);', '} catch (TException e) {']
['Exception ', ['e']]
camel sample_13011

['public void onError(Exception exception) {']
['Exception ', ['exception']]
camel sample_13011

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<SnakeYAMLDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.yaml-snakeyaml.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.yaml-snakeyaml.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_949

['public void someMethod(String body, @Header("foo") String header, @ExchangeProperty("cheese") String cheese) throws ValidationException {', 'assertEquals("old", cheese);', 'if ("bar".equals(header)) {']
['somemethod called with valid header and body ', ['body']]
camel sample_2351

['int pos = uri.indexOf(" if (pos != -1) {', 'String part = uri.substring(pos + 2);', 'if (part.startsWith("http:") || part.startsWith("https:")) {', 'throw new ResolveEndpointFailedException(uri, "The uri part is not configured correctly. You have duplicated the http(s) protocol.");', '}', '}', 'HttpClientConfigurer configurer = createHttpClientConfigurer(parameters, secure);', 'URI endpointUri = URISupport.createRemainingURI(uriHttpUriAddress, httpClientParameters);', 'String scheme = ObjectHelper.before(uri, ": endpointUri = URISupport.createRemainingURI( new URI(scheme, endpointUri.getUserInfo(), endpointUri.getHost(), endpointUri.getPort(), endpointUri.getPath(), endpointUri.getQuery(), endpointUri.getFragment()), httpClientParameters);', 'String endpointUriString = endpointUri.toString();']
['creating endpoint uri ', ['endpointuristring']]
camel sample_17052

['if (localMaxTotalConnections > 0) {', 'answer.setMaxTotal(localMaxTotalConnections);', '}', 'int localConnectionsPerRoute = connectionsPerRoute;', 'if (localConnectionsPerRoute == 0) {', 'localConnectionsPerRoute = getConnectionsPerRoute();', '}', 'if (localConnectionsPerRoute > 0) {', 'answer.setDefaultMaxPerRoute(localConnectionsPerRoute);', '}']
['created clientconnectionmanager ', ['answer']]
camel sample_17052

['public void doStop() throws Exception {', 'if (clientConnectionManager != null) {']
['shutting down clientconnectionmanager ', ['clientconnectionmanager']]
camel sample_17052

['public void testAsyncEndpointEventNotifier() throws Exception {', 'getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");', 'getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");', 'String reply = template.requestBody("direct:start", "Hello Camel", String.class);', 'assertEquals("Bye Camel", reply);', 'assertMockEndpointsSatisfied();', 'assertTrue("Should count down", latch.await(10, TimeUnit.SECONDS));', 'long delta = time.get();']
['exchangeeventsent took ms ', ['delta']]
camel sample_1984

['public static void startGrpcServer() throws Exception {', 'grpcServer = ServerBuilder.forPort(GRPC_TEST_PORT).addService(new PingPongImpl()).build().start();']
['grpc server started on port ', ['grpc', 'test', 'port']]
camel sample_7503

['public static void stopGrpcServer() throws IOException {', 'if (grpcServer != null) {', 'grpcServer.shutdown();']
['grpc server stoped ', []]
camel sample_7503

['public void testPingSyncSyncMethodInvocation() throws Exception {']
['grpc pingsyncsync method test start ', []]
camel sample_7503

['public void testPingSyncAsyncMethodInvocation() throws Exception {']
['grpc pingsyncasync method test start ', []]
camel sample_7503

['public void testPingAsyncSyncMethodInvocation() throws Exception {']
['grpc pingasyncsync method test start ', []]
camel sample_7503

['public void testPingAsyncAsyncMethodInvocation() throws Exception {']
['grpc pingasyncasync method test start ', []]
camel sample_7503

['public StreamObserver<PingRequest> pingAsyncSync(StreamObserver<PongResponse> responseObserver) {', 'StreamObserver<PingRequest> requestObserver = new StreamObserver<PingRequest>() {', 'public void onNext(PingRequest request) {', 'PongResponse response = PongResponse.newBuilder().setPongName(request.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(request.getPingId()).build();', 'responseObserver.onNext(response);', '}', 'public void onError(Throwable t) {']
['error in pingasyncsync ', ['t', 'getmessage']]
camel sample_7503

['public StreamObserver<PingRequest> pingAsyncAsync(StreamObserver<PongResponse> responseObserver) {', 'StreamObserver<PingRequest> requestObserver = new StreamObserver<PingRequest>() {', 'public void onNext(PingRequest request) {', 'PongResponse response = PongResponse.newBuilder().setPongName(request.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(request.getPingId()).build();', 'responseObserver.onNext(response);', '}', 'public void onError(Throwable t) {']
['error in pingasyncasync ', ['t', 'getmessage']]
camel sample_7503

['public XmppPrivateChatProducer(XmppEndpoint endpoint, String participant) {', 'super(endpoint);', 'this.endpoint = endpoint;', 'this.participant = participant;', 'StringHelper.notEmpty(participant, "participant");']
['creating xmppprivatechatproducer to participant ', ['participant']]
camel sample_12600

['}', 'Message message = new Message();', 'try {', 'message.setTo(JidCreate.from(participant));', 'message.setThread(thread);', 'message.setType(Message.Type.normal);', 'ChatManager chatManager = ChatManager.getInstanceFor(connection);', 'Chat chat = getOrCreateChat(chatManager, participant, thread);', 'endpoint.getBinding().populateXmppMessage(message, exchange);', 'if (LOG.isDebugEnabled()) {']
['sending xmpp message to from ', ['new', 'object', 'participant', 'endpoint', 'getuser', 'message', 'getbody']]
camel sample_12600

['private synchronized void reconnect() throws InterruptedException, IOException, SmackException, XMPPException {', 'if (!connection.isConnected()) {', 'if (LOG.isDebugEnabled()) {']
['reconnecting to ', ['xmppendpoint', 'getconnectionmessage', 'connection']]
camel sample_12600

['protected void doStart() throws Exception {', 'if (connection == null) {', 'try {', 'connection = endpoint.createConnection();', '} catch (SmackException e) {', 'if (endpoint.isTestConnectionOnStartup()) {', 'throw new RuntimeException("Could not establish connection to XMPP server: " + endpoint.getConnectionDescription(), e);', '} else {']
['could not connect to xmpp server producer will attempt lazy connection when needed ', ['e', 'getmessage']]
camel sample_12600

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JacksonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-jackson.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-jackson.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1204

['public Consumer createConsumer(Processor processor) throws Exception {', 'IgniteEvents events = createIgniteEvents();', 'IgniteEventsConsumer consumer = new IgniteEventsConsumer(this, processor, events);', 'configureConsumer(consumer);']
['created ignite events consumer for event types ', ['events']]
camel sample_11305

['private IgniteEvents createIgniteEvents() {', 'Ignite ignite = ignite();', 'IgniteEvents events;', 'if (clusterGroupExpression == null) {']
['ignite events endpoint for event types using no cluster group ', ['this', 'events']]
camel sample_11305

['private IgniteEvents createIgniteEvents() {', 'Ignite ignite = ignite();', 'IgniteEvents events;', 'if (clusterGroupExpression == null) {', 'events = ignite.events();', '} else {', 'ClusterGroup group = clusterGroupExpression.getClusterGroup(ignite);']
['ignite events endpoint for event types using cluster group ', ['this', 'events', 'group']]
camel sample_11305

['public void testInOut() throws Exception {', 'getMockEndpoint("mock:log").expectedBodiesReceived("Logging: Bye World");', 'String out = template.requestBody("direct:start", "Hello World", String.class);', 'assertEquals("Bye World", out);']
['got reply ', ['out']]
camel sample_3393

['public void onEvent(Map<String, Object> heartbeat) {', 'String key = (String) heartbeat.get("name");']
['event for details ', ['key', 'heartbeat']]
camel sample_6938

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FtpsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ftps.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ftps.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_733

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_12179

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_12179

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsInfo answer = HdfsInfoFactory.newHdfsInfo(this.hdfsPath.toString());', 'if (onStartup) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_12179

['private HdfsInfo setupHdfs(boolean onStartup) throws Exception {', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsInfo answer = HdfsInfoFactory.newHdfsInfo(this.hdfsPath.toString());', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'hdfspath', 'tostring']]
camel sample_12179

['Path pattern = info.getPath().suffix("/" + this.config.getPattern());', 'fileStatuses = info.getFileSystem().globStatus(pattern, new ExcludePathFilter());', '}', 'for (FileStatus status : fileStatuses) {', 'if (normalFileIsDirectoryNoSuccessFile(status, info)) {', 'continue;', '}', 'if (config.getOwner() != null) {', 'if (!config.getOwner().equals(status.getOwner())) {', 'if (log.isDebugEnabled()) {']
['skipping file as not matching owner ', ['status', 'getpath', 'tostring', 'config', 'getowner']]
camel sample_12179

['if (log.isDebugEnabled()) {', '}', 'continue;', '}', '}', 'try {', 'this.rwlock.writeLock().lock();', 'this.istream = HdfsInputStream.createInputStream(status.getPath().toString(), this.config);', 'if (!this.istream.isOpened()) {', 'if (log.isDebugEnabled()) {']
['skipping file because it doesn t exist anymore ', ['status', 'getpath', 'tostring']]
camel sample_12179

['Exchange exchange = this.getEndpoint().createExchange();', 'Message message = new DefaultMessage(this.getEndpoint().getCamelContext());', 'String fileName = StringUtils.substringAfterLast(status.getPath().toString(), "/");', 'message.setHeader(Exchange.FILE_NAME, fileName);', 'message.setHeader(Exchange.FILE_PATH, status.getPath().toString());', 'if (key.value != null) {', 'message.setHeader(HdfsHeader.KEY.name(), key.value);', '}', 'message.setBody(value.value);', 'exchange.setIn(message);']
['processing file ', ['filename']]
camel sample_12179

['protected void doStart() throws Exception {', 'super.doStart();', 'if (bundleContext == null) {', 'String descriptors = getDescriptors();', 'if (descriptors == null) {', 'throw new IllegalArgumentException("Descriptors must be provided, with the name of the blueprint XML file");', '}']
['starting blueprint xml file ', ['descriptors']]
camel sample_10144

['protected void doStop() throws Exception {', 'if (camelContext != null) {', 'camelContext.stop();', '}']
['stopping blueprint xml file ', ['descriptors']]
camel sample_10144

['AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppDatabase.xml");', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppOne.xml");', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppTwo.xml");', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();']
['the first app is going to crash now ', []]
camel sample_14941

['AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppTwo.xml");', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14941

['AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppTwo.xml");', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14941

['AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppTwo.xml");', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMessageCount(1);', 'mock.expectedBodiesReceived("clustering PINGS!");', 'Thread.sleep(5000);', 'app.getBean("template", ProducerTemplate.class).sendBody("direct:start", "clustering");', 'mock.assertIsSatisfied();', 'app.getBean(Scheduler.class).shutdown();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_14941

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Message in = exchange.getIn();', 'final long priority = BeanstalkExchangeHelper.getPriority(endpoint, in);', 'final int delay = BeanstalkExchangeHelper.getDelay(endpoint, in);', 'final int timeToRun = BeanstalkExchangeHelper.getTimeToRun(endpoint, in);', 'final long jobId = client.put(priority, delay, timeToRun, in.getBody(byte[].class));', 'if (LOG.isDebugEnabled()) {']
['created job d with priority d delay d seconds and time to run d ', ['string', 'format', 'jobid', 'priority', 'delay', 'timetorun']]
camel sample_8160

['try {', 'if (camelContext != null && scriptResource != null) {', 'reader = createScriptReader(camelContext.getClassResolver(), scriptResource);', '} else if (this.scriptText != null) {', 'reader = new StringReader(this.scriptText);', '}', 'if (reader != null) {', 'if (compileScripte(camelContext) && scriptEngine instanceof Compilable) {', 'Compilable compilable = (Compilable) scriptEngine;', 'this.compiledScript = compilable.compile(reader);']
['using compiled script ', ['this', 'compiledscript']]
camel sample_11240

['ScriptEngineManager manager = new ScriptEngineManager(classLoader);', 'ScriptEngine engine = null;', 'String[] names = getScriptNames(language);', 'for (String name : names) {', 'try {', 'engine = manager.getEngineByName(name);', 'if (engine != null) {', 'break;', '}', '} catch (NoClassDefFoundError ex) {']
['cannot load scriptengine for please ensure correct jars is provided on classpath stacktrace in debug logging ', ['name']]
camel sample_11240

['ScriptEngineManager manager = new ScriptEngineManager(classLoader);', 'ScriptEngine engine = null;', 'String[] names = getScriptNames(language);', 'for (String name : names) {', 'try {', 'engine = manager.getEngineByName(name);', 'if (engine != null) {', 'break;', '}', '} catch (NoClassDefFoundError ex) {']
['cannot load scriptengine for please ensure correct jars is provided on classpath ', ['name', 'ex']]
camel sample_11240

['private static ScriptEngine checkForOSGiEngine(String language) {']
['no script engine found for using standard javax script auto registration checking osgi registry ', ['language']]
camel sample_11240

['private static ScriptEngine checkForOSGiEngine(String language) {', 'try {', 'Class<?> c = Class.forName("org.apache.camel.script.osgi.Activator");', 'Method mth = c.getDeclaredMethod("getBundleContext");', 'Object ctx = mth.invoke(null);']
['found osgi bundlecontext ', ['ctx']]
camel sample_11240

['private static ScriptEngine checkForOSGiEngine(String language) {', 'try {', 'Class<?> c = Class.forName("org.apache.camel.script.osgi.Activator");', 'Method mth = c.getDeclaredMethod("getBundleContext");', 'Object ctx = mth.invoke(null);', 'if (ctx != null) {', 'Method resolveScriptEngine = c.getDeclaredMethod("resolveScriptEngine", String.class);', 'return (ScriptEngine)resolveScriptEngine.invoke(null, language);', '}', '} catch (Throwable t) {']
['unable to detect osgi scriptengine for cannot be resolved ', ['language', 't']]
camel sample_11240

['protected Object evaluateScript(Exchange exchange) {', 'try {', 'if (reuseScriptEngine(exchange)) {', 'synchronized (this) {']
['calling doevaluatescript without creating a new scriptengine ', []]
camel sample_11240

['protected Object evaluateScript(Exchange exchange) {', 'try {', 'if (reuseScriptEngine(exchange)) {', 'synchronized (this) {', 'return doEvaluateScript(exchange, scriptEngine);', '}', '} else {']
['calling doevaluatescript with a new scriptengine ', []]
camel sample_11240

['if (reuseScriptEngine(exchange)) {', 'synchronized (this) {', 'return doEvaluateScript(exchange, scriptEngine);', '}', '} else {', 'ScriptEngine engine = scriptEngineFactory.getScriptEngine();', 'return doEvaluateScript(exchange, engine);', '}', '} catch (ScriptException e) {', 'if (LOG.isDebugEnabled()) {']
['script evaluation failed ', ['e', 'getmessage', 'e']]
camel sample_11240

['protected Object doEvaluateScript(Exchange exchange, ScriptEngine scriptEngine) throws ScriptException, IOException {', 'ScriptContext context = populateBindings(scriptEngine, exchange, attributes);', 'addScriptEngineArguments(scriptEngine, exchange);', 'Object result = runScript(scriptEngine, exchange, context);']
['the script evaluation result is ', ['result']]
camel sample_11240

['protected Object runScript(ScriptEngine engine, Exchange exchange, ScriptContext context) throws ScriptException, IOException {', 'Object result = null;', 'if (compiledScript != null) {']
['evaluate using compiled script for context on exchange ', ['context', 'exchange']]
camel sample_11240

['protected Object runScript(ScriptEngine engine, Exchange exchange, ScriptContext context) throws ScriptException, IOException {', 'Object result = null;', 'if (compiledScript != null) {', 'result = compiledScript.eval(context);', '} else {', 'if (scriptText != null) {']
['evaluate script for context on exchange ', ['context', 'exchange']]
camel sample_11240

['protected Object runScript(ScriptEngine engine, Exchange exchange, ScriptContext context) throws ScriptException, IOException {', 'Object result = null;', 'if (compiledScript != null) {', 'result = compiledScript.eval(context);', '} else {', 'if (scriptText != null) {', 'result = engine.eval(scriptText, context);', '} else if (scriptResource != null) {', 'Reader reader = createScriptReader(exchange.getContext().getClassResolver(), scriptResource);', 'try {']
['evaluate script for context on exchange ', ['context', 'exchange']]
camel sample_11240

['protected void addScriptEngineArguments(ScriptEngine engine, Exchange exchange) {', 'if (!exchange.getIn().hasHeaders()) {', 'return;', '}', 'Map<Object, Object> args = exchange.getIn().getHeader(ARGUMENTS, Map.class);', 'if (args != null) {', 'for (Map.Entry<Object, Object> entry : args.entrySet()) {', 'String key = exchange.getContext().getTypeConverter().convertTo(String.class, entry.getKey());', 'Object value = entry.getValue();', 'if (!ObjectHelper.isEmpty(key) && value != null) {']
['putting on scriptengine ', ['key', 'value']]
camel sample_11240

['return message;', '}', 'for (LogListener listener : listeners) {', 'if (listener == null) {', 'continue;', '}', 'try {', 'String output = listener.onLog(exchange, log, message);', 'message = output != null ? output : message;', '} catch (Throwable t) {']
['ignoring an exception thrown by ', ['listener', 'getclass', 'getname', 't', 'getmessage']]
camel sample_4513

['public void onFileSendToQueue(String body, @Header("CamelFileName") String name) {']
['incoming file ', ['name']]
camel sample_17843

['protected String generateAcknowledgement(String hl7Message, String acknowledgementCode) {', 'final String defaulNackMessage = "MSH|^~\\\\&|||||||NACK||P|2.2" + MllpProtocolConstants.SEGMENT_DELIMITER + "MSA|AR|" + MllpProtocolConstants.SEGMENT_DELIMITER + MllpProtocolConstants.MESSAGE_TERMINATOR;', 'if (hl7Message == null) {']
['invalid message for parsing operation please check your inputs ', []]
camel sample_13800

['throw new IllegalArgumentException("Acknowledgemnt Code must be AA, AE or AR: " + acknowledgementCode);', '}', 'String messageControlId;', 'int endOfMshSegment = hl7Message.indexOf(MllpProtocolConstants.SEGMENT_DELIMITER);', 'if (-1 != endOfMshSegment) {', 'String mshSegment = hl7Message.substring(0, endOfMshSegment);', 'char fieldSeparator = mshSegment.charAt(3);', 'String fieldSeparatorPattern = Pattern.quote("" + fieldSeparator);', 'String[] mshFields = mshSegment.split(fieldSeparatorPattern);', 'if (mshFields.length == 0) {']
['failed to split msh segment into fields ', []]
camel sample_13800

['ackBuilder.append(fieldSeparator);', '--emptyFieldIndex;', '}', '}', 'ackBuilder.append(MllpProtocolConstants.SEGMENT_DELIMITER);', 'ackBuilder .append("MSA").append(fieldSeparator) .append(acknowledgementCode).append(fieldSeparator) .append(mshFields[9]).append(fieldSeparator) .append(MllpProtocolConstants.SEGMENT_DELIMITER);', 'ackBuilder.append(MllpProtocolConstants.MESSAGE_TERMINATOR);', 'return ackBuilder.toString();', '}', '} else {']
['failed to find the end of the msh segment ', []]
camel sample_13800

['listenAddress = new InetSocketAddress(this.listenHost, this.listenPort);', '} else {', 'listenAddress = new InetSocketAddress(this.listenPort);', '}', 'long startTicks = System.currentTimeMillis();', 'while (!serverSocket.isBound()) {', 'try {', 'serverSocket.bind(listenAddress, backlog);', '} catch (BindException bindEx) {', 'if (System.currentTimeMillis() < startTicks + bindTimeout) {']
['unable to bind to retrying in milliseconds ', ['listenaddress', 'tostring', 'bindretrydelay']]
camel sample_13800

['}', 'long startTicks = System.currentTimeMillis();', 'while (!serverSocket.isBound()) {', 'try {', 'serverSocket.bind(listenAddress, backlog);', '} catch (BindException bindEx) {', 'if (System.currentTimeMillis() < startTicks + bindTimeout) {', 'try {', 'Thread.sleep(bindRetryDelay);', '} catch (InterruptedException interruptedEx) {']
['wait for bind retry was interrupted rethrowing bindexception ', []]
camel sample_13800

['Thread.sleep(bindRetryDelay);', '} catch (InterruptedException interruptedEx) {', 'throw bindEx;', '}', '}', '}', '}', 'if (0 >= this.listenPort) {', 'this.listenPort = serverSocket.getLocalPort();', '}']
['opened tcp listener on port ', ['serversocket', 'getlocalport']]
camel sample_13800

['public void run() {']
['accepting connections on port ', ['serversocket', 'getlocalport']]
camel sample_13800

['public void run() {', 'this.setName("MllpServerResource$AcceptSocketThread - " + serverSocket.getLocalSocketAddress().toString());', 'while (!isInterrupted() && serverSocket.isBound() && !serverSocket.isClosed()) {', 'Socket clientSocket = null;', 'try {', 'clientSocket = serverSocket.accept();', '} catch (SocketTimeoutException timeoutEx) {', 'if (raiseExceptionOnAcceptTimeout) {', 'throw new MllpJUnitResourceTimeoutException("Timeout Accepting client connection", timeoutEx);', '}']
['timeout waiting for client connection ', []]
camel sample_13800

['this.setName("MllpServerResource$AcceptSocketThread - " + serverSocket.getLocalSocketAddress().toString());', 'while (!isInterrupted() && serverSocket.isBound() && !serverSocket.isClosed()) {', 'Socket clientSocket = null;', 'try {', 'clientSocket = serverSocket.accept();', '} catch (SocketTimeoutException timeoutEx) {', 'if (raiseExceptionOnAcceptTimeout) {', 'throw new MllpJUnitResourceTimeoutException("Timeout Accepting client connection", timeoutEx);', '}', '} catch (SocketException socketEx) {']
['socketexception encountered accepting client connection ignoring ', ['socketex']]
camel sample_13800

['if (raiseExceptionOnAcceptTimeout) {', 'throw new MllpJUnitResourceTimeoutException("Timeout Accepting client connection", timeoutEx);', '}', '} catch (SocketException socketEx) {', 'if (null == clientSocket) {', 'continue;', '} else if (!clientSocket.isClosed()) {', 'try {', 'clientSocket.setSoLinger(true, 0);', '} catch (SocketException soLingerEx) {']
['ignoring socketexception encountered when setting so linger in preparation of resetting client socket ', ['solingerex']]
camel sample_13800

['if (null == clientSocket) {', 'continue;', '} else if (!clientSocket.isClosed()) {', 'try {', 'clientSocket.setSoLinger(true, 0);', '} catch (SocketException soLingerEx) {', '}', 'try {', 'clientSocket.close();', '} catch (IOException ioEx) {']
['ignoring ioexception encountered when resetting client socket ', ['ioex']]
camel sample_13800

['try {', 'clientSocket.setKeepAlive(true);', 'clientSocket.setTcpNoDelay(false);', 'clientSocket.setSoLinger(false, -1);', 'clientSocket.setSoTimeout(5000);', 'ClientSocketThread clientSocketThread = new ClientSocketThread(clientSocket);', 'clientSocketThread.setDaemon(true);', 'clientSocketThread.start();', 'clientSocketThreads.add(clientSocketThread);', '} catch (Exception unexpectedEx) {']
['unexpected exception encountered configuring client socket ', []]
camel sample_13800

['clientSocket.setSoLinger(false, -1);', 'clientSocket.setSoTimeout(5000);', 'ClientSocketThread clientSocketThread = new ClientSocketThread(clientSocket);', 'clientSocketThread.setDaemon(true);', 'clientSocketThread.start();', 'clientSocketThreads.add(clientSocketThread);', '} catch (Exception unexpectedEx) {', 'try {', 'clientSocket.close();', '} catch (IOException ingoreEx) {']
['exceptiong encountered closing client socket after attempting to accept connection ', ['ingoreex']]
camel sample_13800

['clientSocketThreads.add(clientSocketThread);', '} catch (Exception unexpectedEx) {', 'try {', 'clientSocket.close();', '} catch (IOException ingoreEx) {', '}', 'throw new MllpJUnitResourceException("Unexpected exception encountered configuring client socket", unexpectedEx);', '}', '}', '}']
['no longer accepting connections closing tcp listener on port ', ['serversocket', 'getlocalport']]
camel sample_13800

['}', 'throw new MllpJUnitResourceException("Unexpected exception encountered configuring client socket", unexpectedEx);', '}', '}', '}', 'try {', 'serverSocket.close();', '} catch (IOException e) {', 'e.printStackTrace();', '}']
['closed tcp listener on port ', ['serversocket', 'getlocalport']]
camel sample_13800

['public void interrupt() {', 'for (ClientSocketThread clientSocketThread : clientSocketThreads) {', 'clientSocketThread.interrupt();', '}', 'if (serverSocket != null && serverSocket.isBound() && !serverSocket.isClosed()) {', 'try {', 'serverSocket.close();', '} catch (Exception ex) {']
['exception encountered closing server socket on interrupt ', ['ex']]
camel sample_13800

['public String getMessage(InputStream anInputStream) throws IOException {', 'try {', 'boolean waitingForStartOfBlock = true;', 'while (waitingForStartOfBlock) {', 'int potentialStartCharacter = anInputStream.read();', 'switch (potentialStartCharacter) {', 'case MllpProtocolConstants.END_OF_STREAM: return null;', 'case MllpProtocolConstants.START_OF_BLOCK: waitingForStartOfBlock = false;', 'break;']
['start of block character has not been received out of band character received ', ['potentialstartcharacter']]
camel sample_13800

['int potentialStartCharacter = anInputStream.read();', 'switch (potentialStartCharacter) {', 'case MllpProtocolConstants.END_OF_STREAM: return null;', 'case MllpProtocolConstants.START_OF_BLOCK: waitingForStartOfBlock = false;', 'break;', '}', '}', '} catch (SocketException socketEx) {', 'if (clientSocket != null) {', 'if (clientSocket.isClosed()) {']
['client socket closed while waiting for start of block ', []]
camel sample_13800

['switch (potentialStartCharacter) {', 'case MllpProtocolConstants.END_OF_STREAM: return null;', 'case MllpProtocolConstants.START_OF_BLOCK: waitingForStartOfBlock = false;', 'break;', '}', '}', '} catch (SocketException socketEx) {', 'if (clientSocket != null) {', 'if (clientSocket.isClosed()) {', '} else if (clientSocket.isConnected()) {']
['socketexception encountered while waiting for start of block ', []]
camel sample_13800

['case MllpProtocolConstants.START_OF_BLOCK: waitingForStartOfBlock = false;', 'break;', '}', '}', '} catch (SocketException socketEx) {', 'if (clientSocket != null) {', 'if (clientSocket.isClosed()) {', '} else if (clientSocket.isConnected()) {', 'resetConnection();', '} else {']
['unable to read from socket stream when expected start of block resetting connection ', ['socketex']]
camel sample_13800

['resetConnection();', '}', '}', 'return null;', '}', 'boolean endOfMessage = false;', 'StringBuilder parsedMessage = new StringBuilder(anInputStream.available() + 10);', 'while (!endOfMessage) {', 'int characterReceived = anInputStream.read();', 'switch (characterReceived) {']
['received start of block before end of data discarding data ', ['parsedmessage', 'tostring']]
camel sample_13800

['}', '}', 'return null;', '}', 'boolean endOfMessage = false;', 'StringBuilder parsedMessage = new StringBuilder(anInputStream.available() + 10);', 'while (!endOfMessage) {', 'int characterReceived = anInputStream.read();', 'switch (characterReceived) {', 'return null;']
['received end of stream without end of data discarding data ', ['parsedmessage', 'tostring']]
camel sample_13800

['}', 'boolean endOfMessage = false;', 'StringBuilder parsedMessage = new StringBuilder(anInputStream.available() + 10);', 'while (!endOfMessage) {', 'int characterReceived = anInputStream.read();', 'switch (characterReceived) {', 'return null;', 'return null;', 'case MllpProtocolConstants.END_OF_BLOCK: characterReceived = anInputStream.read();', 'if (characterReceived != MllpProtocolConstants.END_OF_DATA) {']
['received when expecting end of data after end of block discarding ', ['characterreceived', 'parsedmessage', 'tostring']]
camel sample_13800

['private void uncheckedSleep(long milliseconds) {', 'try {', 'Thread.sleep(milliseconds);', '} catch (InterruptedException e) {']
['sleep interrupted ', ['e']]
camel sample_13800

['public void run() {', 'String localAddress = clientSocket.getLocalAddress().toString();', 'String remoteAddress = clientSocket.getRemoteSocketAddress().toString();']
['handling connection ', ['localaddress', 'remoteaddress']]
camel sample_13800

['public void run() {', 'String localAddress = clientSocket.getLocalAddress().toString();', 'String remoteAddress = clientSocket.getRemoteSocketAddress().toString();', 'try {', 'while (!isInterrupted() && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'InputStream instream;', 'try {', 'instream = clientSocket.getInputStream();', '} catch (IOException ioEx) {', 'if (clientSocket.isClosed()) {']
['client socket was closed ignoring exception ', ['clientsocket']]
camel sample_13800

['} else {', 'throw new MllpJUnitResourceException("Unexpected IOException encounted getting input stream", ioEx);', '}', '} catch (Exception unexpectedEx) {', 'throw new MllpJUnitResourceException("Unexpected exception encounted getting input stream", unexpectedEx);', '}', 'String parsedHL7Message;', 'try {', 'parsedHL7Message = getMessage(instream);', '} catch (SocketTimeoutException timeoutEx) {']
['waiting for message from client ', []]
camel sample_13800

['}', 'String parsedHL7Message;', 'try {', 'parsedHL7Message = getMessage(instream);', '} catch (SocketTimeoutException timeoutEx) {', 'continue;', '}', 'if (null != parsedHL7Message && parsedHL7Message.length() > 0) {', '++messageCounter;', 'if (closeSocketBeforeAcknowledgement(messageCounter)) {']
['closing socket before sending acknowledgement ', []]
camel sample_13800

['}', 'if (null != parsedHL7Message && parsedHL7Message.length() > 0) {', '++messageCounter;', 'if (closeSocketBeforeAcknowledgement(messageCounter)) {', 'clientSocket.shutdownInput();', 'clientSocket.shutdownOutput();', 'clientSocket.close();', 'break;', '}', 'if (resetSocketBeforeAcknowledgement(messageCounter)) {']
['resetting socket before sending acknowledgement ', []]
camel sample_13800

['if (closeSocketBeforeAcknowledgement(messageCounter)) {', 'clientSocket.shutdownInput();', 'clientSocket.shutdownOutput();', 'clientSocket.close();', 'break;', '}', 'if (resetSocketBeforeAcknowledgement(messageCounter)) {', 'try {', 'clientSocket.setSoLinger(true, 0);', '} catch (IOException ioEx) {']
['ignoring ioexception encountered setting so linger when prepareing to reset socket ', ['ioex']]
camel sample_13800

['}', '} else {', 'acknowledgmentMessage = acknowledgementString;', '}', 'BufferedOutputStream outstream = new BufferedOutputStream(clientSocket.getOutputStream());', 'if (sendOutOfBandData(messageCounter)) {', 'byte[] outOfBandDataBytes = "Out Of Band Hl7TestMessageGenerator".getBytes();', 'outstream.write(outOfBandDataBytes, 0, outOfBandDataBytes.length);', '}', 'if (excludeStartOfBlock(messageCounter)) {']
['not sending start of block ', []]
camel sample_13800

['}', 'if (excludeStartOfBlock(messageCounter)) {', '} else {', 'outstream.write(MllpProtocolConstants.START_OF_BLOCK);', 'if (delayBeforeStartOfBlock > 0) {', 'uncheckedSleep(delayBeforeStartOfBlock);', 'uncheckedFlush(outstream);', '}', '}', 'if (excludeAcknowledgement(messageCounter)) {']
['not sending acknowledgement body ', []]
camel sample_13800

['if (delayBeforeStartOfBlock > 0) {', 'uncheckedSleep(delayBeforeStartOfBlock);', 'uncheckedFlush(outstream);', '}', '}', 'if (excludeAcknowledgement(messageCounter)) {', '} else {', 'if (delayBeforeAcknowledgement > 0) {', 'uncheckedSleep(delayBeforeAcknowledgement);', '}']
['buffering acknowledgement t ', ['acknowledgmentmessage', 'replace', 'r']]
camel sample_13800

['uncheckedFlush(outstream);', '} else {', 'outstream.write(ackBytes, 0, ackBytes.length);', '}', 'if (delayAfterAcknowledgement > 0) {', 'uncheckedFlush(outstream);', 'uncheckedSleep(delayAfterAcknowledgement);', '}', '}', 'if (excludeEndOfBlock(messageCounter)) {']
['not sending end of block ', []]
camel sample_13800

['}', 'if (excludeEndOfBlock(messageCounter)) {', '} else {', 'outstream.write(MllpProtocolConstants.END_OF_BLOCK);', 'if (delayAfterEndOfBlock > 0) {', 'uncheckedFlush(outstream);', 'uncheckedSleep(delayAfterEndOfBlock);', '}', '}', 'if (excludeEndOfData(messageCounter)) {']
['not sending end of data ', []]
camel sample_13800

['outstream.write(MllpProtocolConstants.END_OF_BLOCK);', 'if (delayAfterEndOfBlock > 0) {', 'uncheckedFlush(outstream);', 'uncheckedSleep(delayAfterEndOfBlock);', '}', '}', 'if (excludeEndOfData(messageCounter)) {', '} else {', 'outstream.write(MllpProtocolConstants.END_OF_DATA);', '}']
['writing acknowledgement t ', ['acknowledgmentmessage', 'replace', 'r']]
camel sample_13800

['uncheckedFlush(outstream);', 'uncheckedSleep(delayAfterEndOfBlock);', '}', '}', 'if (excludeEndOfData(messageCounter)) {', '} else {', 'outstream.write(MllpProtocolConstants.END_OF_DATA);', '}', 'uncheckedFlush(outstream);', 'if (closeSocketAfterAcknowledgement(messageCounter)) {']
['closing client ', []]
camel sample_13800

['if (clientSocket != null) {', 'try {', 'clientSocket.close();', '} catch (IOException e) {', 'String errorMessage = "Error while attempting to close to client Socket";', 'log.error(errorMessage, e);', 'throw new MllpJUnitResourceException(errorMessage, e);', '}', '}', '}']
['client connection finished ', ['localaddress', 'remoteaddress']]
camel sample_13800

['private void uncheckedFlush(OutputStream outputStream) {', 'try {', 'outputStream.flush();', '} catch (IOException e) {']
['ignoring exception caught while flushing output stream ', ['e']]
camel sample_13800

['public void interrupt() {', 'if (clientSocket != null && clientSocket.isConnected() && !clientSocket.isClosed()) {', 'try {', 'clientSocket.close();', '} catch (Exception ex) {']
['exception encountered closing client socket on interrput ', ['ex']]
camel sample_13800

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<Olingo4Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.olingo4.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.olingo4.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_508

['public OperationResult<List<String>> getResult() {', 'try {', 'Stat statistics = new Stat();', 'List<String> children = connection.getChildren(node, true, statistics);', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {']
['received children from s path with statistics s ', ['format', 'node', 'statistics']]
camel sample_12657

['public OperationResult<List<String>> getResult() {', 'try {', 'Stat statistics = new Stat();', 'List<String> children = connection.getChildren(node, true, statistics);', 'if (LOG.isDebugEnabled()) {', 'if (LOG.isTraceEnabled()) {', '} else {']
['received children from s path ', ['format', 'node']]
camel sample_12657

['public void process(Exchange exchange) throws Exception {']
['some ', ['counter']]
camel sample_3844

['public String slip(String body, @ExchangeProperties Map<String, Object> properties) {']
['slip EXIT ', ['properties', 'get']]
camel sample_3844

['public String slip(String body, @ExchangeProperties Map<String, Object> properties) {', 'if (properties.get("EXIT") != null && properties.get("EXIT").equals("PLEASE")) {']
['exiting after iterations ', ['max', 'iterations']]
camel sample_3844

['if (Character.isDigit(ch)) {', 'buffer.append(ch);', '}', '}', 'value = buffer.toString();', '}', 'if (ObjectHelper.isNotEmpty(value)) {', 'double number = Double.parseDouble(value);', 'return number >= minimumVersion;', '} else {']
['could not determine version of package ', ['packagename']]
camel sample_4378

['}', 'if (ObjectHelper.isNotEmpty(value)) {', 'double number = Double.parseDouble(value);', 'return number >= minimumVersion;', '} else {', '}', '}', '}', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['could not determine version of package ', ['packagename', 'e']]
camel sample_4378

['throw new IllegalArgumentException(String.format("SObject Class not found for %s", sObjectName));', '}', '} else {', 'final String className = endpoint.getConfiguration().getSObjectClass();', 'if (className != null) {', 'sObjectClass = endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);', 'if (sObjectClass == null) {', 'throw new IllegalArgumentException(String.format("SObject Class not found %s", className));', '}', '} else {']
['property sobjectname or sobjectclass not set messages will be of type java lang map ', []]
camel sample_14783

['public void processMessage(ClientSessionChannel channel, Message message) {', 'final Exchange exchange = endpoint.createExchange();', 'org.apache.camel.Message in = exchange.getIn();', 'setHeaders(in, message);', 'Map<String, Object> data = message.getDataAsMap();', 'final Map<String, Object> event = (Map<String, Object>) data.get(EVENT_PROPERTY);', 'final Object eventType = event.get(TYPE_PROPERTY);', 'Object createdDate = event.get(CREATED_DATE_PROPERTY);', 'Object replayId = event.get(REPLAY_ID_PROPERTY);', 'if (log.isDebugEnabled()) {']
['received event s on channel s created on s ', ['string', 'format', 'eventtype', 'channel', 'getchannelid', 'createddate']]
camel sample_14783

['if (log.isDebugEnabled()) {', '}', 'in.setHeader("CamelSalesforceEventType", eventType);', 'in.setHeader("CamelSalesforceCreatedDate", createdDate);', 'if (replayId != null) {', 'in.setHeader("CamelSalesforceReplayId", replayId);', '}', 'final Map<String, Object> sObject = (Map<String, Object>) data.get(SOBJECT_PROPERTY);', 'try {', 'final String sObjectString = objectMapper.writeValueAsString(sObject);']
['received sobject ', ['sobjectstring']]
camel sample_14783

['in.setBody(objectMapper.readValue( new StringReader(sObjectString), sObjectClass));', '}', '} catch (IOException e) {', 'final String msg = String.format("Error parsing message [%s] from Topic %s: %s", message, topicName, e.getMessage());', 'handleException(msg, new SalesforceException(msg, e));', '}', 'try {', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'if (log.isTraceEnabled()) {']
['done processing event synchronously asynchronously ', ['eventtype', 'tostring', 'donesync']]
camel sample_14783

['protected ClientConnectionMultiplexor createConnection(final ConnectionId id, final ClientOptions options) {']
['create new connection id ', ['id']]
camel sample_6715

['protected void doStartInnerContext() throws Exception {', 'CamelContext context = endpoint.getConfig().getInnerContext();', 'List<RouteBuilder> routeBuildersList = endpoint.getConfig().getRouteBuilders();', 'if (!(routeBuildersList.isEmpty())) {', 'for (RouteBuilder routeBuilder : routeBuildersList) {', 'if (log.isDebugEnabled()) {']
['adding routebuilder to ', ['routebuilder', 'context', 'getname']]
camel sample_14629

['protected void doStart() throws Exception {']
['starting hystrixmetricspoller with delay and queue size ', ['delay', 'queuesize']]
camel sample_11352

['protected void doStop() throws Exception {', 'if (poller != null) {']
['shutting down hystrixmetricspoller ', []]
camel sample_11352

['public void handleJsonMetric(String json) {']
['handlejsonmetric ', ['json']]
camel sample_11352

['public void handleJsonMetric(String json) {', 'int drain = queue.size() - queueSize + 1;', 'if (drain > 0) {']
['draining queue to make room ', ['drain']]
camel sample_11352

['private <T> T execute(ChannelCallback<T> callback) throws Exception {', 'Channel channel;', 'try {', 'channel = channelPool.borrowObject();', '} catch (IllegalStateException e) {', 'checkConnectionAndChannelPool();', 'channel = channelPool.borrowObject();', '}', 'if (!channel.isOpen()) {']
['got a closed channel from the pool invalidating and borrowing a new one from the pool ', []]
camel sample_14150

['private synchronized void openConnectionAndChannelPool() throws Exception {']
['creating connection ', []]
camel sample_14150

['private synchronized void openConnectionAndChannelPool() throws Exception {', 'this.conn = getEndpoint().connect(executorService);']
['created connection ', ['conn']]
camel sample_14150

['private synchronized void openConnectionAndChannelPool() throws Exception {', 'this.conn = getEndpoint().connect(executorService);']
['creating channel pool ', []]
camel sample_14150

['private synchronized void checkConnectionAndChannelPool() throws Exception {', 'if (this.conn == null || !this.conn.isOpen()) {']
['reconnecting to rabbitmq ', []]
camel sample_14150

['protected void doStart() throws Exception {', 'this.executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "CamelRabbitMQProducer[" + getEndpoint().getQueue() + "]");', 'try {', 'openConnectionAndChannelPool();', '} catch (IOException e) {']
['failed to create connection it will attempt to connect again when publishing a message ', ['e']]
camel sample_14150

['private synchronized void closeConnectionAndChannel() throws IOException {', 'if (channelPool != null) {', 'try {', 'channelPool.close();', 'channelPool = null;', '} catch (Exception e) {', 'throw new IOException("Error closing channelPool", e);', '}', '}', 'if (conn != null) {']
['closing connection with timeout ms ', ['conn', 'closetimeout']]
camel sample_14150

['if (exchangeName == null || getEndpoint().isBridgeEndpoint()) {', 'exchangeName = getEndpoint().getExchangeName();', '}', 'String key = in.getHeader(RabbitMQConstants.ROUTING_KEY, String.class);', 'if (key == null || getEndpoint().isBridgeEndpoint()) {', 'key = getEndpoint().getRoutingKey() == null ? "" : getEndpoint().getRoutingKey();', '}', 'if (ObjectHelper.isEmpty(key) && ObjectHelper.isEmpty(exchangeName)) {', 'throw new IllegalArgumentException("ExchangeName and RoutingKey is not provided in the endpoint: " + getEndpoint());', '}']
['registering reply for ', ['correlationid']]
camel sample_14150

['protected void initReplyManager() {', 'if (!started.get()) {', 'synchronized (this) {', 'if (started.get()) {', 'return;', '}']
['starting reply manager ', []]
camel sample_14150

['}', 'if (getEndpoint().getReplyToType() != null) {', 'if (getEndpoint().getReplyTo() != null && getEndpoint().getReplyToType().equals(ReplyToType.Temporary.name())) {', 'throw new IllegalArgumentException("ReplyToType " + ReplyToType.Temporary + " is not supported when replyTo " + getEndpoint().getReplyTo() + " is also configured.");', '}', '}', 'if (getEndpoint().getReplyTo() != null) {', 'throw new IllegalArgumentException("Specifying replyTo " + getEndpoint().getReplyTo() + " is currently not supported.");', '} else {', 'replyManager = createReplyManager();']
['using rabbitmqreplymanager to process replies from temporary queue ', ['replymanager']]
camel sample_14150

['protected ReplyManager createReplyManager() throws Exception {', 'ReplyManager replyManager = new TemporaryQueueReplyManager(getEndpoint().getCamelContext());', 'replyManager.setEndpoint(getEndpoint());', 'String name = "RabbitMQReplyManagerTimeoutChecker[" + getEndpoint().getExchangeName() + "]";', 'ScheduledExecutorService replyManagerExecutorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(name, name);', 'replyManager.setScheduledExecutorService(replyManagerExecutorService);']
['starting reply manager service ', ['name']]
camel sample_14150

['public void prepare(Message message) throws IOException {']
['camelconduit send message ', []]
camel sample_6579

['public void close() {']
['camelconduit closed ', []]
camel sample_6579

['public void close() {', 'try {', 'producer.stop();', '} catch (Exception e) {']
['camelconduit producer stop with the exception ', ['e']]
camel sample_6579

['public void testJettyAsyncTimeout() throws Exception {', 'getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");', 'StopWatch watch = new StopWatch();', 'try {', 'template.requestBody("http: fail("Should have thrown an exception");', '} catch (CamelExecutionException e) {']
['timeout hit and client got reply with failure status code ', []]
camel sample_10955

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JIRAComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jira.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jira.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1183

['private Object doAppend(Exchange exchange) throws IOException {']
['got operation going to append text to provided pdf ', ['pdfconfiguration', 'getoperation']]
camel sample_14280

['private String doExtractText(Exchange exchange) throws IOException {']
['got operation going to extract text from provided pdf ', ['pdfconfiguration', 'getoperation']]
camel sample_14280

['private OutputStream doCreate(Exchange exchange) throws IOException {']
['got operation going to create and write provided string to pdf document ', ['pdfconfiguration', 'getoperation']]
camel sample_14280

['private String send(Verb verb, String params) throws Exception {', 'String url = apiUrl + ((params != null) ? params : "");', 'OAuthRequest request = new OAuthRequest(verb, url);', 'request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, apiAccessToken);', 'StringBuilder sb = new StringBuilder();', 'sb.append("Bearer ");', 'sb.append(apiAccessToken);', 'request.addHeader("Authorization",  sb.toString());', 'if (LOG.isDebugEnabled()) {']
['yammer request url ', ['request', 'getcompleteurl']]
camel sample_13545

['public static boolean process(final AsyncProcessor processor, final Exchange exchange, final AsyncCallback callback) {', 'boolean sync;', 'if (exchange.isTransacted()) {']
['transacted exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4381

['AsyncCallback async = callback;', 'if (uow != null) {', 'async = uow.beforeProcess(processor, exchange, callback);', '}', 'sync = processor.process(exchange, async);', 'if (uow != null) {', 'uow.afterProcess(processor, exchange, callback, sync);', '}', '}', 'if (LOG.isTraceEnabled()) {']
['exchange processed and is continued routed for exchangeid synchronously asynchronously ', ['new', 'object', 'sync', 'exchange', 'getexchangeid', 'exchange']]
camel sample_4381

['public void doesNotAddCamelHeaders() {', 'Map<String, Object> pointInMapFormat = new HashMap<>();', 'pointInMapFormat.put(InfluxDbConstants.MEASUREMENT_NAME, "testCPU");', 'double value = 99.999999d;', 'pointInMapFormat.put("busy", value);', 'Point p = CamelInfluxDbConverters.fromMapToPoint(pointInMapFormat);', 'assertNotNull(p);', 'String line = p.lineProtocol();', 'assertNotNull(line);']
['doesnotaddcamelheaders generated ', ['line']]
camel sample_11128

['public void canAddDouble() {', 'Map<String, Object> pointInMapFormat = new HashMap<>();', 'pointInMapFormat.put(InfluxDbConstants.MEASUREMENT_NAME, "testCPU");', 'double value = 99.999999d;', 'pointInMapFormat.put("busy", value);', 'Point p = CamelInfluxDbConverters.fromMapToPoint(pointInMapFormat);', 'assertNotNull(p);', 'String line = p.lineProtocol();', 'assertNotNull(line);']
['doublecommand generated ', ['line']]
camel sample_11128

['public void canAddInt() {', 'Map<String, Object> pointInMapFormat = new HashMap<>();', 'pointInMapFormat.put(InfluxDbConstants.MEASUREMENT_NAME, "testCPU");', 'int value = 99999999;', 'pointInMapFormat.put("busy", value);', 'Point p = CamelInfluxDbConverters.fromMapToPoint(pointInMapFormat);', 'assertNotNull(p);', 'String line = p.lineProtocol();', 'assertNotNull(line);']
['int command generated ', ['line']]
camel sample_11128

['public void canAddByte() {', 'Map<String, Object> pointInMapFormat = new HashMap<>();', 'pointInMapFormat.put(InfluxDbConstants.MEASUREMENT_NAME, "testCPU");', 'byte value = Byte.MAX_VALUE;', 'pointInMapFormat.put("busy", value);', 'Point p = CamelInfluxDbConverters.fromMapToPoint(pointInMapFormat);', 'assertNotNull(p);', 'String line = p.lineProtocol();', 'assertNotNull(line);']
['byte command generated ', ['line']]
camel sample_11128

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<LdapComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ldap.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ldap.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1029

['public synchronized Handle register() throws Exception {', 'final HandleImplementation handle = new HandleImplementation();', 'final boolean needStart = this.handles.isEmpty();', 'this.handles.add(handle);', 'if (needStart) {']
['calling performstart ', []]
camel sample_6703

['private synchronized void unregister(final HandleImplementation handle) throws Exception {', 'if (!this.handles.remove(handle)) {', 'return;', '}', 'if (this.handles.isEmpty()) {']
['calling performstop ', []]
camel sample_6703

['public synchronized void dispose() {']
['Disposing ', []]
camel sample_6703

['public synchronized void dispose() {', 'if (this.handles.isEmpty()) {']
['disposing not started ', []]
camel sample_6703

['public synchronized void dispose() {', 'if (this.handles.isEmpty()) {', 'return;', '}']
['disposing calling performstop ', []]
camel sample_6703

['public void configure(ApplicationContext applicationContext, SpringCamelContext camelContext) {', 'CamelConfigurationProperties config = applicationContext.getBean(CamelConfigurationProperties.class);', 'if (config != null) {', 'try {']
['merging xml based camelcontext with spring boot configuration properties ', []]
camel sample_13400

['getMockEndpoint("mock:result").expectedMessageCount(2);', 'String out = template.requestBody("direct:start", null, String.class);', 'String out2 = template.requestBody("direct:start", null, String.class);', 'assertEquals("9091", out);', 'assertEquals("9090", out2);', 'assertMockEndpointsSatisfied();', 'context.stopRoute("9090");', 'servers.removeServer("localhost", 9090);', 'String out3 = template.requestBody("direct:start", null, String.class);', 'assertEquals("9091", out3);']
['sleeping to all the server list updated to run ', []]
camel sample_13050

['String out = template.requestBody("direct:start", null, String.class);', 'String out2 = template.requestBody("direct:start", null, String.class);', 'assertEquals("9091", out);', 'assertEquals("9090", out2);', 'assertMockEndpointsSatisfied();', 'context.stopRoute("9090");', 'servers.removeServer("localhost", 9090);', 'String out3 = template.requestBody("direct:start", null, String.class);', 'assertEquals("9091", out3);', 'Thread.sleep(1000);']
['calling the service now ', []]
camel sample_13050

['public void testConvertStringToAndFromByteArray() throws Exception {', 'byte[] array = converter.convertTo(byte[].class, "foo");', 'assertNotNull(array);']
['found array of size ', ['array', 'length']]
camel sample_1496

['public void testConvertStringToAndFromCharArray() throws Exception {', 'char[] array = converter.convertTo(char[].class, "foo");', 'assertNotNull(array);']
['found array of size ', ['array', 'length']]
camel sample_1496

['list.add(5);', 'list.add(6);', 'Integer[] integerArray = converter.convertTo(Integer[].class, list);', 'assertEquals("Integer[] length", 2, integerArray.length);', 'int[] intArray = converter.convertTo(int[].class, list);', 'assertEquals("int[] length", 2, intArray.length);', 'long[] longArray = converter.convertTo(long[].class, intArray);', 'assertEquals("long[] length", 2, longArray.length);', 'List<?> resultList = converter.convertTo(List.class, intArray);', 'assertEquals("List size", 2, resultList.size());']
['from primitive type array we ve created the list ', ['resultlist']]
camel sample_1496

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['direct start mock local mock exhausted seda foo ', ['errorhandler', 'deadletterchannel', 'maximumredeliveries', 'redeliverydelay', 'onexception', 'connectexception', 'class', 'maximumredeliveries', 'redeliverydelay', 'logretryattempted', 'true', 'retryattemptedloglevel', 'logginglevel', 'warn', 'to', 'end', 'to']]
camel sample_3852

['public void activate() {']
['cameldestination activate ', []]
camel sample_6580

['public void activate() {', 'ObjectHelper.notNull(camelContext, "CamelContext", this);', 'try {']
['establishing camel connection ', []]
camel sample_6580

['public void deactivate() {', 'try {', 'ServiceHelper.stopService(consumer);', '} catch (Exception e) {']
['error stopping consumer ', ['e']]
camel sample_6580

['public void shutdown() {']
['cameldestination shutdown ', []]
camel sample_6580

['protected void incoming(org.apache.camel.Exchange camelExchange) {']
['server received request ', ['camelexchange']]
camel sample_6580

['Exception exception = outMessage.getContent(Exception.class);', 'if (checkException && exception != null) {', 'camelExchange.setException(exception);', '}', 'OutputStream outputStream = outMessage.getContent(OutputStream.class);', 'if (outputStream instanceof CachedOutputStream) {', 'camelExchange.getOut().setBody(((CachedOutputStream)outputStream).getInputStream());', '} else {', 'camelExchange.getOut().setBody(outputStream);', '}']
['send the response message ', ['outputstream']]
camel sample_6580

['private void openConnection() throws IOException, TimeoutException {']
['creating connection ', []]
camel sample_14146

['private void openConnection() throws IOException, TimeoutException {', 'this.conn = getEndpoint().connect(executor);']
['created connection ', ['conn']]
camel sample_14146

['protected synchronized Connection getConnection() throws IOException, TimeoutException {', 'if (this.conn == null) {', 'openConnection();', 'return this.conn;', '} else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {', 'return this.conn;', '} else {']
['the existing connection is closed ', []]
camel sample_14146

['private void startConsumers() {', 'try {', 'for (RabbitConsumer consumer : this.consumers) {', 'consumer.start();', '}', '} catch (Exception e) {']
['connection failed will start background thread to retry ', ['e']]
camel sample_14146

['private void closeConnectionAndChannel() throws IOException, TimeoutException {', 'if (startConsumerCallable != null) {', 'startConsumerCallable.stop();', '}', 'for (RabbitConsumer consumer : this.consumers) {', 'try {', 'consumer.stop();', '} catch (TimeoutException e) {']
['timeout occurred while stopping consumer this exception is ignored ', ['e']]
camel sample_14146

['startConsumerCallable.stop();', '}', 'for (RabbitConsumer consumer : this.consumers) {', 'try {', 'consumer.stop();', '} catch (TimeoutException e) {', '}', '}', 'this.consumers.clear();', 'if (conn != null) {']
['closing connection with timeout ms ', ['conn', 'closetimeout']]
camel sample_14146

['protected void doStart() throws Exception {', 'executor = endpoint.createExecutor();']
['using executor ', ['executor']]
camel sample_14146

['public Void call() throws Exception {', 'boolean connectionFailed = true;', 'while (running.get() && connectionFailed) {', 'try {', 'for (RabbitConsumer consumer : consumers) {', 'consumer.reconnect();', '}', 'connectionFailed = false;', '} catch (Exception e) {']
['connection failed will retry in ms ', ['connectionretryinterval', 'e']]
camel sample_14146

['public static void traceMBeans(String domain) throws Exception {', 'MBeanServer mbsc =  ManagementFactory.getPlatformMBeanServer();', 'String d = getDomainName(domain);', 'Set<ObjectName> s = mbsc.queryNames(new ObjectName(d + ":*"), null);', 'if (s.size() > 0) {']
['objectnames registered in domain ', ['s', 'size', 'd']]
camel sample_2890

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(deadLetterChannel("mock:global") .maximumRedeliveries(2) .redeliveryDelay(500));']
['direct start mock exhausted seda foo ', ['onexception', 'connectexception', 'class', 'maximumredeliveries', 'redeliverydelay', 'logretryattempted', 'true', 'retryattemptedloglevel', 'logginglevel', 'warn', 'to', 'end', 'to']]
camel sample_3782

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'errorHandler(deadLetterChannel("mock:global") .maximumRedeliveries(2) .redeliveryDelay(500));']
['direct mock seda ', ['onexception', 'connectexception', 'class', 'maximumredeliveries', 'redeliverydelay', 'logretryattempted', 'true', 'retryattemptedloglevel', 'logginglevel', 'error', 'to', 'end', 'to']]
camel sample_3782

['public void notify(EventObject event) throws Exception {', 'if (event instanceof ExchangeSendingEvent) {']
['sending ', ['event']]
camel sample_1615

['Iterator<Processor> processors = next().iterator();', 'Object lastHandled = exchange.getProperty(Exchange.EXCEPTION_HANDLED);', 'exchange.setProperty(Exchange.EXCEPTION_HANDLED, null);', 'while (continueRouting(processors, exchange)) {', 'exchange.setProperty(Exchange.TRY_ROUTE_BLOCK, true);', 'ExchangeHelper.prepareOutToIn(exchange);', 'Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, callback, processors, async, lastHandled);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4417

['exchange.setProperty(Exchange.EXCEPTION_HANDLED, null);', 'while (continueRouting(processors, exchange)) {', 'exchange.setProperty(Exchange.TRY_ROUTE_BLOCK, true);', 'ExchangeHelper.prepareOutToIn(exchange);', 'Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, callback, processors, async, lastHandled);', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4417

['Processor processor = processors.next();', 'AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);', 'boolean sync = process(exchange, callback, processors, async, lastHandled);', 'if (!sync) {', 'return false;', '}', '}', 'ExchangeHelper.prepareOutToIn(exchange);', 'exchange.removeProperty(Exchange.TRY_ROUTE_BLOCK);', 'exchange.setProperty(Exchange.EXCEPTION_HANDLED, lastHandled);']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4417

['protected boolean process(final Exchange exchange, final AsyncCallback callback, final Iterator<Processor> processors, final AsyncProcessor processor, final Object lastHandled) {']
['processing exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4417

['public void done(boolean doneSync) {', 'if (doneSync) {', 'return;', '}', 'while (continueRouting(processors, exchange)) {', 'exchange.setProperty(Exchange.TRY_ROUTE_BLOCK, true);', 'ExchangeHelper.prepareOutToIn(exchange);', 'AsyncProcessor processor = AsyncProcessorConverterHelper.convert(processors.next());', 'doneSync = process(exchange, callback, processors, processor, lastHandled);', 'if (!doneSync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4417

['ExchangeHelper.prepareOutToIn(exchange);', 'AsyncProcessor processor = AsyncProcessorConverterHelper.convert(processors.next());', 'doneSync = process(exchange, callback, processors, processor, lastHandled);', 'if (!doneSync) {', 'return;', '}', '}', 'ExchangeHelper.prepareOutToIn(exchange);', 'exchange.removeProperty(Exchange.TRY_ROUTE_BLOCK);', 'exchange.setProperty(Exchange.EXCEPTION_HANDLED, lastHandled);']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4417

['protected boolean continueRouting(Iterator<Processor> it, Exchange exchange) {', 'Object stop = exchange.getProperty(Exchange.ROUTE_STOP);', 'if (stop != null) {', 'boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, stop);', 'if (doStop) {']
['exchange is marked to stop routing ', ['exchange']]
camel sample_4417

['optParam = new OptionalParameter.OctetString(key, (byte[]) value);', '} else if (value instanceof String) {', 'optParam = new OptionalParameter.COctetString(key, (String) value);', '} else if (value instanceof Byte) {', 'optParam = new OptionalParameter.Byte(key, (Byte) value);', '} else if (value instanceof Integer) {', 'optParam = new OptionalParameter.Int(key, (Integer) value);', '} else if (value instanceof Short) {', 'optParam = new OptionalParameter.Short(key, (Short) value);', '} else {']
['couldn t determine optional parameter for value type skip this one ', ['value', 'value', 'getclass']]
camel sample_16897

['optParam = new OptionalParameter.Byte(key, (Byte) value);', '} else if (value instanceof Integer) {', 'optParam = new OptionalParameter.Int(key, (Integer) value);', '} else if (value instanceof Short) {', 'optParam = new OptionalParameter.Short(key, (Short) value);', '} else {', 'continue;', '}', 'optParams.add(optParam);', '} catch (Exception e) {']
['couldn t determine optional parameter for key and value skip this one ', ['key', 'value']]
camel sample_16897

['optParam = (OptionalParameter) type.getConstructor(byte.class).newInstance(byteValue);', '} else if (ancestorClasses.contains(OptionalParameter.Int.class)) {', 'Integer intValue = (value == null) ? 0 : Integer.valueOf(value);', 'optParam = (OptionalParameter) type.getConstructor(int.class).newInstance(intValue);', '} else if (ancestorClasses.contains(OptionalParameter.Short.class)) {', 'Short shortValue = (value == null) ? 0 : Short.valueOf(value);', 'optParam = (OptionalParameter) type.getConstructor(short.class).newInstance(shortValue);', '}', 'optParams.add(optParam);', '} catch (Exception e) {']
['couldn t determine optional parameter for key and value skip this one ', ['entry', 'getkey', 'value']]
camel sample_16897

['}', 'if (delegatedConsumer != null) {', 'return;', '}', 'delegatedConsumer = delegatedEndpoint.createConsumer(processor);', 'if (delegatedConsumer instanceof StartupListener) {', 'getEndpoint().getCamelContext().addStartupListener((StartupListener) delegatedConsumer);', '}', 'ServiceHelper.startService(delegatedEndpoint);', 'ServiceHelper.startService(delegatedConsumer);']
['leadership taken consumer started ', ['delegatedendpoint']]
camel sample_14453

['private synchronized void onLeadershipLost() throws Exception {', 'ServiceHelper.stopAndShutdownServices(delegatedConsumer);', 'ServiceHelper.stopAndShutdownServices(delegatedEndpoint);', 'delegatedConsumer = null;']
['leadership lost consumer stopped ', ['delegatedendpoint']]
camel sample_14453

['context.setName("context-" + id);', 'context.addService(createClusterService(id, address));', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("timer:atomix?delay=1s&period=1s") .routeId("route-" + id) .routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")) .log("From ${routeId}") .process(e -> contextLatch.countDown());', '}', '});', 'Thread.sleep(ThreadLocalRandom.current().nextInt(500));', 'context.start();', 'contextLatch.await();']
['shutting down client node ', ['id']]
camel sample_10294

['public static void main(String[] args) throws Exception {']
['about to run google pubsub camel integration ', []]
camel sample_17551

['GooglePubsubComponent googlePubsub = PubsubUtil.createComponent();', 'camelContext.addComponent("google-pubsub", googlePubsub);', 'from("direct:googlePubsubStart").routeId("DirectToGooglePubsub") .to("google-pubsub:{{pubsub.projectId}}:{{pubsub.topic}}").log("${headers}");', 'from("stream:in") .to("direct:googlePubsubStart");', '}', '});', 'ProducerTemplate producerTemplate = camelContext.createProducerTemplate();', 'camelContext.start();', 'Map<String, Object> headers = new HashMap<>();', 'producerTemplate.sendBodyAndHeaders("direct:googlePubsubStart", testPubsubMessage, headers);']
['successfully published message to pubsub ', []]
camel sample_17551

['public I read() throws Exception {']
['reading new item ', []]
camel sample_12753

['public I read() throws Exception {', 'I item = (I) consumerTemplate.receiveBody(endpointUri);']
['read item ', ['item']]
camel sample_12753

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo");']
['direct bar bar also got body mock bar ', ['routeid', 'log', 'logginglevel', 'warn', 'to']]
camel sample_2202

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo");']
['direct baz baz cool me got body mock baz ', ['routeid', 'log', 'logginglevel', 'error', 'to']]
camel sample_2202

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo");']
['direct wombat wombat cool mymarker me got body mock wombat ', ['routeid', 'log', 'logginglevel', 'info', 'to']]
camel sample_2202

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo");']
['direct nolog nolog should not log body mock bar ', ['routeid', 'log', 'logginglevel', 'trace', 'to']]
camel sample_2202

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesBuildsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-builds.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-builds.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_549

['public void testPutAndGetNotFound() {', 'LevelDBAggregationRepository repo = new LevelDBAggregationRepository();', 'repo.setLevelDBFile(levelDBFile);', 'repo.setRepositoryName("repo1");', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");']
['created ', ['exchange', 'getexchangeid']]
camel sample_13904

['LevelDBAggregationRepository repo = new LevelDBAggregationRepository();', 'repo.setLevelDBFile(levelDBFile);', 'repo.setRepositoryName("repo1");', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody("Hello World");', 'repo.add(context, exchange.getExchangeId(), exchange);', 'Exchange out = repo.get(context, exchange.getExchangeId());', 'assertNotNull("Should find exchange", out);', 'Exchange exchange2 = new DefaultExchange(context);', 'exchange2.getIn().setBody("Bye World");']
['created ', ['getexchangeid']]
camel sample_13904

['public void testSearchFolder() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelBox.folderId", "0");', 'headers.put("CamelBox.query", CAMEL_TEST_FILE_NAME);', 'final java.util.Collection result = requestBodyAndHeaders("direct: assertNotNull("searchFolder result", result);', 'assertEquals("searchFolder file found", 1, result.size());']
['searchfolder ', ['result']]
camel sample_17414

['private String findCamelConnectorJSonSchema(Class<?> componentClass) {']
['finding camel connector json in classpath for connector ', ['componentname']]
camel sample_6

['try {', 'urls = componentClass.getClassLoader().getResources("camel-connector.json");', '} catch (IOException e) {', 'throw new IllegalArgumentException("Cannot open camel-connector.json in classpath for connector " + componentName);', '}', 'while (urls.hasMoreElements()) {', 'try (InputStream is = urls.nextElement().openStream()) {', 'String json = IOHelper.loadText(is);', 'JsonObject output = (JsonObject) Jsoner.deserialize(json);', 'String javaType = output.getString("javaType");']
['found camel connector json in classpath with javatype ', ['javatype']]
camel sample_6

['public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Void>() {', 'public void onComplete(Void o) {', 'ping_result result = new ping_result();', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {']
['ttransportexception writing to internal frame buffer ', ['e']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Void>() {', 'public void onComplete(Void o) {', 'ping_result result = new ping_result();', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {', 'fb.close();', '} catch (java.lang.Exception e) {']
['exception writing to internal frame buffer ', ['e']]
camel sample_13007

['fb.close();', '} catch (java.lang.Exception e) {', 'onError(e);', '}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'ping_result result = new ping_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'ping_result result = new ping_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {']
['tapplicationexception inside handler ', ['e']]
camel sample_13007

['byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'ping_result result = new ping_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {']
['exception inside handler ', ['e']]
camel sample_13007

['} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());', '}', 'try {', 'fcall.sendResponse(fb,msg,msgType,seqid);', '} catch (java.lang.Exception ex) {']
['exception writing to internal frame buffer ', ['ex']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'add_result result = new add_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {']
['ttransportexception writing to internal frame buffer ', ['e']]
camel sample_13007

['return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'add_result result = new add_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {', 'fb.close();', '} catch (java.lang.Exception e) {']
['exception writing to internal frame buffer ', ['e']]
camel sample_13007

['fb.close();', '} catch (java.lang.Exception e) {', 'onError(e);', '}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'add_result result = new add_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'add_result result = new add_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {']
['tapplicationexception inside handler ', ['e']]
camel sample_13007

['byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'add_result result = new add_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {']
['exception inside handler ', ['e']]
camel sample_13007

['} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());', '}', 'try {', 'fcall.sendResponse(fb,msg,msgType,seqid);', '} catch (java.lang.Exception ex) {']
['exception writing to internal frame buffer ', ['ex']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'calculate_result result = new calculate_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {']
['ttransportexception writing to internal frame buffer ', ['e']]
camel sample_13007

['return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'calculate_result result = new calculate_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {', 'fb.close();', '} catch (java.lang.Exception e) {']
['exception writing to internal frame buffer ', ['e']]
camel sample_13007

['}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'calculate_result result = new calculate_result();', 'if (e instanceof InvalidOperation) {', 'result.ouch = (InvalidOperation) e;', 'result.setOuchIsSet(true);', 'msg = result;', '} else if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['org.apache.thrift.TSerializable msg;', 'calculate_result result = new calculate_result();', 'if (e instanceof InvalidOperation) {', 'result.ouch = (InvalidOperation) e;', 'result.setOuchIsSet(true);', 'msg = result;', '} else if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {']
['tapplicationexception inside handler ', ['e']]
camel sample_13007

['result.ouch = (InvalidOperation) e;', 'result.setOuchIsSet(true);', 'msg = result;', '} else if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {']
['exception inside handler ', ['e']]
camel sample_13007

['} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());', '}', 'try {', 'fcall.sendResponse(fb,msg,msgType,seqid);', '} catch (java.lang.Exception ex) {']
['exception writing to internal frame buffer ', ['ex']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Void>() {', 'public void onComplete(Void o) {', '}', 'public void onError(java.lang.Exception e) {', 'if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Void>() {', 'public void onComplete(Void o) {', '}', 'public void onError(java.lang.Exception e) {', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', '} else {']
['exception inside oneway handler ', ['e']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<Work> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Work>() {', 'public void onComplete(Work o) {', 'echo_result result = new echo_result();', 'result.success = o;', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {']
['ttransportexception writing to internal frame buffer ', ['e']]
camel sample_13007

['final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<Work>() {', 'public void onComplete(Work o) {', 'echo_result result = new echo_result();', 'result.success = o;', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {', 'fb.close();', '} catch (java.lang.Exception e) {']
['exception writing to internal frame buffer ', ['e']]
camel sample_13007

['fb.close();', '} catch (java.lang.Exception e) {', 'onError(e);', '}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'echo_result result = new echo_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'echo_result result = new echo_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {']
['tapplicationexception inside handler ', ['e']]
camel sample_13007

['byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'echo_result result = new echo_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {']
['exception inside handler ', ['e']]
camel sample_13007

['} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());', '}', 'try {', 'fcall.sendResponse(fb,msg,msgType,seqid);', '} catch (java.lang.Exception ex) {']
['exception writing to internal frame buffer ', ['ex']]
camel sample_13007

['public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {', 'final org.apache.thrift.AsyncProcessFunction fcall = this;', 'return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'alltypes_result result = new alltypes_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {']
['ttransportexception writing to internal frame buffer ', ['e']]
camel sample_13007

['return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {', 'public void onComplete(java.lang.Integer o) {', 'alltypes_result result = new alltypes_result();', 'result.success = o;', 'result.setSuccessIsSet(true);', 'try {', 'fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);', '} catch (org.apache.thrift.transport.TTransportException e) {', 'fb.close();', '} catch (java.lang.Exception e) {']
['exception writing to internal frame buffer ', ['e']]
camel sample_13007

['fb.close();', '} catch (java.lang.Exception e) {', 'onError(e);', '}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'alltypes_result result = new alltypes_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {']
['ttransportexception inside handler ', ['e']]
camel sample_13007

['}', '}', 'public void onError(java.lang.Exception e) {', 'byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'alltypes_result result = new alltypes_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {']
['tapplicationexception inside handler ', ['e']]
camel sample_13007

['byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;', 'org.apache.thrift.TSerializable msg;', 'alltypes_result result = new alltypes_result();', 'if (e instanceof org.apache.thrift.transport.TTransportException) {', 'fb.close();', 'return;', '} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {']
['exception inside handler ', ['e']]
camel sample_13007

['} else if (e instanceof org.apache.thrift.TApplicationException) {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = (org.apache.thrift.TApplicationException)e;', '} else {', 'msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;', 'msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());', '}', 'try {', 'fcall.sendResponse(fb,msg,msgType,seqid);', '} catch (java.lang.Exception ex) {']
['exception writing to internal frame buffer ', ['ex']]
camel sample_13007

['protected List<Status> doDirect() throws TwitterException {']
['dodirect getretweetsofme ', []]
camel sample_14238

['Class<?> c = Class.forName("org.bouncycastle.jce.provider.BouncyCastleProvider");', 'cons = c.getConstructor(new Class[] {});', 'Provider provider = (java.security.Provider)cons.newInstance();', 'Security.insertProviderAt(provider, 2);', '}', 'if (isJavaVendor("IBM")) {', 'canTest = false;', '}', '} catch (Exception e) {', 'System.err.println("Cannot test due " + e.getMessage());']
['cannot test due ', ['e', 'getmessage', 'e']]
camel sample_6754

['public void setUp() throws Exception {', 'disableJMX();', 'try {', 'super.setUp();', '} catch (Exception e) {', 'System.err.println("Cannot test due " + e.getMessage());']
['cannot test due ', ['e', 'getmessage', 'e']]
camel sample_6754

['public void onCompleted() {', 'if (producer != null) {', 'try {', 'ServiceHelper.stopService(producer);', '} catch (Exception e) {']
['error stopping producer due this exception is ignored ', ['producer', 'e', 'getmessage', 'e']]
camel sample_11190

['try {', 'if (!doneSync) {', 'NettyHttpMessage nettyMessage = exchange.hasOut() ? exchange.getOut(NettyHttpMessage.class) : exchange.getIn(NettyHttpMessage.class);', 'if (nettyMessage != null) {', 'final FullHttpResponse response = nettyMessage.getHttpResponse();', 'if (response != null) {', 'response.content().retain();', 'exchange.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange exchange) {', 'if (response.refCnt() > 0) {']
['releasing netty httpresonse bytebuf ', []]
camel sample_16655

['response.content().retain();', 'exchange.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange exchange) {', 'if (response.refCnt() > 0) {', 'ReferenceCountUtil.release(response);', '}', '}', '});', 'String actualUrl = exchange.getIn().getHeader(Exchange.HTTP_URL, String.class);', 'int code = response.status() != null ? response.status().code() : -1;']
['http responsecode ', ['code']]
camel sample_16655

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {']
['configuring client side sslcontext parameters on sslcontext ', ['context']]
camel sample_4293

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {']
['configuring client side sslcontext session timeout on sslcontext to ', ['context', 'this', 'getsessiontimeout']]
camel sample_4293

['protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {', 'if (this.getSessionTimeout() != null) {', 'this.configureSessionContext(context.getClientSessionContext(), this.getSessionTimeout());', '}']
['configured client side sslcontext parameters on sslcontext ', ['context']]
camel sample_4293

['public void process(final Exchange exchange) {', 'for (int i = 1; i <= retryCount; i++) {', 'if (i > 1) {']
['retrying attempt ', ['i']]
camel sample_12495

['Thread.sleep(retrySleep);', '} catch (InterruptedException e) {', '}', '}', 'try {', 'transactionTemplate.execute(new TransactionCallback<T>() {', 'public T doInTransaction(TransactionStatus status) {', 'try {', 'Object key = getCorrelationKey(exchange);', 'T entity = loadEntity(exchange, key);']
['correlation key with entity ', ['key', 'entity']]
camel sample_12495

['T entity = loadEntity(exchange, key);', 'processEntity(exchange, entity);', 'return entity;', '} catch (Exception e) {', 'onError(status, e);', 'return null;', '}', '}', '});', 'if (i > 1) {']
['attempt worked ', ['i']]
camel sample_12495

['} catch (Exception e) {', 'onError(status, e);', 'return null;', '}', '}', '});', 'if (i > 1) {', '}', 'return;', '} catch (Exception e) {']
['failed to complete transaction this exception is ignored ', ['e']]
camel sample_12495

['protected void onError(TransactionStatus status, Exception e) throws RuntimeCamelException {', 'status.setRollbackOnly();']
['caught ', ['e', 'e']]
camel sample_12495

['public void testTemporaryDestinationTypes() throws Exception {', 'JmsEndpoint endpoint = getMandatoryEndpoint("activemq:test.queue", JmsEndpoint.class);', 'JmsConfiguration configuration = endpoint.getConfiguration();', 'JmsProviderMetadata providerMetadata = configuration.getProviderMetadata();', 'assertNotNull("provider", providerMetadata);', 'Class<? extends TemporaryQueue> queueType = endpoint.getTemporaryQueueType();', 'Class<? extends TemporaryTopic> topicType = endpoint.getTemporaryTopicType();']
['found queue type ', ['queuetype']]
camel sample_6884

['public void testTemporaryDestinationTypes() throws Exception {', 'JmsEndpoint endpoint = getMandatoryEndpoint("activemq:test.queue", JmsEndpoint.class);', 'JmsConfiguration configuration = endpoint.getConfiguration();', 'JmsProviderMetadata providerMetadata = configuration.getProviderMetadata();', 'assertNotNull("provider", providerMetadata);', 'Class<? extends TemporaryQueue> queueType = endpoint.getTemporaryQueueType();', 'Class<? extends TemporaryTopic> topicType = endpoint.getTemporaryTopicType();']
['found topic type ', ['topictype']]
camel sample_6884

['public void testCacheBasedXPathElementReplacer() throws Exception {']
['beginning test testcachebasedxpathelementreplacer ', []]
camel sample_10502

['in.setBody(book1);', '} else if (key.equalsIgnoreCase("book2")) {', 'in.setBody(book2);', '} else {', 'in.setBody(xmlFragment);', '}', '}', '});', '}', 'resultEndpoint.assertIsSatisfied();']
['completed test testcachebasedxpathelementreplacer ', []]
camel sample_10502

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedXPathReplacer("cache: .process(new CacheBasedXPathReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['payload replacement results ', []]
camel sample_10502

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() {', 'from("cache: .process(new CacheBasedXPathReplacer("cache: .process(new CacheBasedXPathReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {']
['the following payload was replaced from cache ', []]
camel sample_10502

['from("cache: .process(new CacheBasedXPathReplacer("cache: .process(new CacheBasedXPathReplacer("cache: .to("direct:next");', 'from("direct:next").process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String key = (String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);', 'Object body = exchange.getIn().getBody();', 'String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);', 'if (log.isDebugEnabled()) {', 'log.debug("key = {}", key);', 'log.debug("Before Value = {}", xmlFragment);', 'log.debug("After value = {}", data);']
['end ', []]
camel sample_10502

['public void start() {', 'if (getFile() == null) {', 'throw new IllegalArgumentException("A file must be configured");', '}', 'if (LOG.isDebugEnabled()) {']
['starting hawtdb using file ', ['getfile']]
camel sample_11743

['throw new IllegalArgumentException("A file must be configured");', '}', 'if (LOG.isDebugEnabled()) {', '}', 'open();', 'pageFile = getTxPageFile();', 'execute(new Work<Boolean>() {', 'public Boolean execute(Transaction tx) {', 'if (!tx.allocator().isAllocated(0)) {', 'ROOT_INDEXES_FACTORY.create(tx);']
['aggregation repository data store created using file ', ['getfile']]
camel sample_11743

['if (LOG.isDebugEnabled()) {', '}', 'open();', 'pageFile = getTxPageFile();', 'execute(new Work<Boolean>() {', 'public Boolean execute(Transaction tx) {', 'if (!tx.allocator().isAllocated(0)) {', 'ROOT_INDEXES_FACTORY.create(tx);', '} else {', 'SortedIndex<String, Integer> indexes = ROOT_INDEXES_FACTORY.open(tx);']
['aggregation repository data store loaded using file containing repositories ', ['getfile', 'indexes', 'size']]
camel sample_11743

['public void stop() {', 'File file = getFile();']
['stopping hawtdb using file ', ['file']]
camel sample_11743

['public void stop() {', 'File file = getFile();', 'try {', 'close();', '} catch (IOException e) {']
['error closing hawtdb file this exception will be ignored ', ['file', 'e']]
camel sample_11743

['public <T> T execute(Work<T> work, boolean rollbackOnOptimisticUpdateException) {']
['executing work start ', ['work']]
camel sample_11743

['public <T> T execute(Work<T> work, boolean rollbackOnOptimisticUpdateException) {', 'Transaction tx = pageFile.tx();', 'T answer = doExecute(work, tx, pageFile, rollbackOnOptimisticUpdateException);']
['executing work done ', ['work']]
camel sample_11743

['public SortedIndex<Buffer, Buffer> getRepositoryIndex(Transaction tx, String name, boolean create) {', 'SortedIndex<Buffer, Buffer> answer = null;', 'SortedIndex<String, Integer> indexes = ROOT_INDEXES_FACTORY.open(tx);', 'Integer location = indexes.get(name);', 'if (create && location == null) {', 'SortedIndex<Buffer, Buffer> created = INDEX_FACTORY.create(tx);', 'int page = created.getIndexLocation();', 'indexes.put(name, page);']
['created new repository index with name at location ', ['name', 'page']]
camel sample_11743

['public SortedIndex<Buffer, Buffer> getRepositoryIndex(Transaction tx, String name, boolean create) {', 'SortedIndex<Buffer, Buffer> answer = null;', 'SortedIndex<String, Integer> indexes = ROOT_INDEXES_FACTORY.open(tx);', 'Integer location = indexes.get(name);', 'if (create && location == null) {', 'SortedIndex<Buffer, Buffer> created = INDEX_FACTORY.create(tx);', 'int page = created.getIndexLocation();', 'indexes.put(name, page);', 'answer = created;', '} else if (location != null) {']
['repository index with name at location ', ['name', 'location']]
camel sample_11743

['SortedIndex<String, Integer> indexes = ROOT_INDEXES_FACTORY.open(tx);', 'Integer location = indexes.get(name);', 'if (create && location == null) {', 'SortedIndex<Buffer, Buffer> created = INDEX_FACTORY.create(tx);', 'int page = created.getIndexLocation();', 'indexes.put(name, page);', 'answer = created;', '} else if (location != null) {', 'answer = INDEX_FACTORY.open(tx, location);', '}']
['repository index with name ', ['name', 'answer']]
camel sample_11743

['private static <T> T doExecute(Work<T> work, Transaction tx, TxPageFile page, boolean handleOptimisticLockingException) {', 'T answer = null;', 'boolean done = false;', 'int attempt = 0;', 'while (!done) {', 'try {', 'if (attempt > 0) {']
['attempt to execute work ', ['attempt', 'work']]
camel sample_11743

['private static <T> T doExecute(Work<T> work, Transaction tx, TxPageFile page, boolean handleOptimisticLockingException) {', 'T answer = null;', 'boolean done = false;', 'int attempt = 0;', 'while (!done) {', 'try {', 'if (attempt > 0) {', '}', 'attempt++;', 'answer = work.execute(tx);']
['tx is read only for executed work ', ['tx', 'isreadonly', 'work']]
camel sample_11743

['try {', 'if (attempt > 0) {', '}', 'attempt++;', 'answer = work.execute(tx);', 'tx.commit();', 'page.flush();', 'done = true;', '} catch (OptimisticUpdateException e) {', 'if (handleOptimisticLockingException) {']
['optimisticupdateexception occurred at attempt executing work will do rollback and retry ', ['attempt', 'work']]
camel sample_11743

['page.flush();', 'done = true;', '} catch (OptimisticUpdateException e) {', 'if (handleOptimisticLockingException) {', 'tx.rollback();', '} else {', 'tx.rollback();', 'throw e;', '}', '} catch (RuntimeException e) {']
['error executing work will do rollback ', ['work', 'e']]
camel sample_11743

['return false;', '}', 'boolean filtered = false;', 'for (int i = offset; i < offset + length; i++) {', 'if (isFiltered(content[i])) {', 'filtered = true;', 'content[i] = REPLACEMENT_CHAR;', '}', '}', 'if (filtered) {']
['identified and replaced non xml chars ', []]
camel sample_13791

['PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null);', 'String name;', 'if (config.getHostname().equalsIgnoreCase("localhost")) {', 'name = config.getPrintername();', '} else {', 'name = config.getHostname() + "/" + config.getPrintername();', 'if (config.getPrinterPrefix() != null) {', 'name = config.getPrinterPrefix() + name;', '}', '}']
['using printer name ', ['name']]
camel sample_17228

['private int findPrinter(PrintService[] services, String printer) {', 'int position = -1;', 'printer = printer.toLowerCase(Locale.US);', "printer = printer.replace('\\\\', '/');", 'for (int i = 0; i < services.length; i++) {', 'String printerName = services[i].getName();']
['printer service printer name ', ['printername']]
camel sample_17228

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<PGPDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.pgp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.pgp.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_660

['try {', 'properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES));', '} catch (Exception e) {', 'throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e);', '}', 'Map<String, Object> options = new HashMap<>();', 'for (Map.Entry<Object, Object> entry : properties.entrySet()) {', 'options.put(entry.getKey().toString(), entry.getValue());', '}', 'AuthenticationType configurationType = getAuthenticationType();']
['test using s configuration profile ', ['string', 'format', 'configurationtype']]
camel sample_17382

['public Message toCamelMessage(HttpRequest request, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['tocamelmessage ', ['request']]
camel sample_8361

['public void populateCamelHeaders(HttpRequest request, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['populatecamelheaders ', ['request']]
camel sample_8361

['String path = uri.getRawPath();', 'if (configuration.getPath() != null) {', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = configuration.getPath() != null ? configuration.getPath().toLowerCase(Locale.US) : null;', 'if (match != null && matchPath.startsWith(match)) {', 'path = path.substring(configuration.getPath().length());', '}', '}', 'headers.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http method ', ['request', 'getmethod', 'getname']]
camel sample_8361

['String path = uri.getRawPath();', 'if (configuration.getPath() != null) {', 'String matchPath = path.toLowerCase(Locale.US);', 'String match = configuration.getPath() != null ? configuration.getPath().toLowerCase(Locale.US) : null;', 'if (match != null && matchPath.startsWith(match)) {', 'path = path.substring(configuration.getPath().length());', '}', '}', 'headers.put(Exchange.HTTP_PATH, path);', 'if (LOG.isTraceEnabled()) {']
['http uri ', ['request', 'geturi']]
camel sample_8361

['String value = request.headers().get(name);', 'if (value != null && value.trim().startsWith("Basic")) {', 'NettyHttpHelper.appendHeader(headers, NettyHttpConstants.HTTP_AUTHENTICATION, "Basic");', '}', '}', 'List<String> values = request.headers().getAll(name);', 'Iterator<?> it = ObjectHelper.createIterator(values);', 'while (it.hasNext()) {', 'Object extracted = it.next();', 'Object decoded = shouldUrlDecodeHeader(configuration, name, extracted, "UTF-8");']
['http header ', ['extracted']]
camel sample_8361

['if (request.getUri().contains("?")) {', 'String query = ObjectHelper.after(request.getUri(), "?");', 'Map<String, Object> uriParameters = URISupport.parseQuery(query, false, true);', 'for (Map.Entry<String, Object> entry : uriParameters.entrySet()) {', 'String name = entry.getKey();', 'Object values = entry.getValue();', 'Iterator<?> it = ObjectHelper.createIterator(values);', 'while (it.hasNext()) {', 'Object extracted = it.next();', 'Object decoded = shouldUrlDecodeHeader(configuration, name, extracted, "UTF-8");']
['uri parameter ', ['extracted']]
camel sample_8361

['public Message toCamelMessage(HttpResponse response, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['tocamelmessage ', ['response']]
camel sample_8361

['public void populateCamelHeaders(HttpResponse response, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception {']
['populatecamelheaders ', ['response']]
camel sample_8361

['headers.put(Exchange.HTTP_RESPONSE_CODE, response.getStatus().getCode());', 'headers.put(Exchange.HTTP_RESPONSE_TEXT, response.getStatus().getReasonPhrase());', 'for (String name : response.headers().names()) {', 'if (name.toLowerCase().equals("content-type")) {', 'name = Exchange.CONTENT_TYPE;', '}', 'List<String> values = response.headers().getAll(name);', 'Iterator<?> it = ObjectHelper.createIterator(values);', 'while (it.hasNext()) {', 'Object extracted = it.next();']
['http header ', ['extracted']]
camel sample_8361

['public HttpResponse toNettyResponse(Message message, NettyHttpConfiguration configuration) throws Exception {']
['tonettyresponse ', ['message']]
camel sample_8361

['public HttpResponse toNettyResponse(Message message, NettyHttpConfiguration configuration) throws Exception {', 'if (message.getBody() instanceof HttpResponse) {', 'return (HttpResponse) message.getBody();', '}', 'boolean failed = message.getExchange().isFailed();', 'int defaultCode = failed ? 500 : 200;', 'int code = message.getHeader(Exchange.HTTP_RESPONSE_CODE, defaultCode, int.class);', 'HttpResponse response = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(code));']
['http status code ', ['code']]
camel sample_8361

['}', '}', '}', 'if (buffer != null) {', 'response.setContent(buffer);', 'if (buffer.readerIndex() == buffer.writerIndex()) {', 'buffer.setIndex(0, buffer.writerIndex());', '}', 'int len = buffer.readableBytes();', 'response.headers().set(HttpHeaders.Names.CONTENT_LENGTH, len);']
['content length ', ['len']]
camel sample_8361

['response.setContent(buffer);', 'if (buffer.readerIndex() == buffer.writerIndex()) {', 'buffer.setIndex(0, buffer.writerIndex());', '}', 'int len = buffer.readableBytes();', 'response.headers().set(HttpHeaders.Names.CONTENT_LENGTH, len);', '}', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'response.headers().set(HttpHeaders.Names.CONTENT_TYPE, contentType);']
['content type ', ['contenttype']]
camel sample_8361

['if (configuration.isKeepAlive()) {', 'connection = HttpHeaders.Values.KEEP_ALIVE;', '} else {', 'connection = HttpHeaders.Values.CLOSE;', '}', '}', 'response.headers().set(HttpHeaders.Names.CONNECTION, connection);', 'if (connection.equalsIgnoreCase(HttpHeaders.Values.CLOSE)) {', 'message.setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, true);', '}']
['connection ', ['connection']]
camel sample_8361

['public HttpRequest toNettyRequest(Message message, String uri, NettyHttpConfiguration configuration) throws Exception {']
['tonettyrequest ', ['message']]
camel sample_8361

['buffer = message.getBody(ChannelBuffer.class);', 'if (buffer == null) {', 'byte[] data = message.getMandatoryBody(byte[].class);', 'buffer = ChannelBuffers.copiedBuffer(data);', '}', '}', 'if (buffer != null) {', 'request.setContent(buffer);', 'int len = buffer.readableBytes();', 'request.headers().set(HttpHeaders.Names.CONTENT_LENGTH, len);']
['content length ', ['len']]
camel sample_8361

['request.headers().set(HttpHeaders.Names.CONTENT_LENGTH, len);', '} else {', 'throw new NoTypeConversionAvailableException(body, ChannelBuffer.class);', '}', '}', 'HttpMethod method = NettyHttpHelper.createMethod(message, body != null);', 'request.setMethod(method);', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'request.headers().set(HttpHeaders.Names.CONTENT_TYPE, contentType);']
['content type ', ['contenttype']]
camel sample_8361

['}', 'HttpMethod method = NettyHttpHelper.createMethod(message, body != null);', 'request.setMethod(method);', 'String contentType = MessageHelper.getContentType(message);', 'if (contentType != null) {', 'request.headers().set(HttpHeaders.Names.CONTENT_TYPE, contentType);', '}', 'URI u = new URI(uri);', 'String hostHeader = u.getHost() + (u.getPort() == 80 ? "" : ":" + u.getPort());', 'request.headers().set(HttpHeaders.Names.HOST, hostHeader);']
['host ', ['hostheader']]
camel sample_8361

['request.headers().set(HttpHeaders.Names.HOST, hostHeader);', 'String connection = message.getHeader(HttpHeaders.Names.CONNECTION, String.class);', 'if (connection == null) {', 'if (configuration.isKeepAlive()) {', 'connection = HttpHeaders.Values.KEEP_ALIVE;', '} else {', 'connection = HttpHeaders.Values.CLOSE;', '}', '}', 'request.headers().set(HttpHeaders.Names.CONNECTION, connection);']
['connection ', ['connection']]
camel sample_8361

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<JsonPathLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.jsonpath.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.jsonpath.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_477

['private void removeJobInScheduler() throws Exception {', 'Scheduler scheduler = getComponent().getScheduler();', 'if (scheduler == null) {', 'return;', '}', 'if (deleteJob) {', 'boolean isClustered = scheduler.getMetaData().isJobStoreClustered();', 'if (!scheduler.isShutdown() && !isClustered) {']
['deleting job ', ['triggerkey']]
camel sample_15002

['private Trigger createTrigger(JobDetail jobDetail) throws Exception {', 'Trigger result;', 'Date startTime = new Date();', 'if (getComponent().getScheduler().isStarted()) {', 'startTime = new Date(System.currentTimeMillis() + triggerStartDelay);', '}', 'if (cron != null) {']
['creating crontrigger ', ['cron']]
camel sample_15002

['} else {', 'if (ObjectHelper.isNotEmpty(customCalendar)) {', 'result = TriggerBuilder.newTrigger() .withIdentity(triggerKey) .startAt(startTime) .withSchedule(cronSchedule(cron) .withMisfireHandlingInstructionFireAndProceed()) .modifiedByCalendar(QuartzConstants.QUARTZ_CAMEL_CUSTOM_CALENDAR) .build();', '} else {', 'result = TriggerBuilder.newTrigger() .withIdentity(triggerKey) .startAt(startTime) .withSchedule(cronSchedule(cron) .withMisfireHandlingInstructionFireAndProceed()) .build();', '}', '}', 'jobDetail.getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE, "cron");', 'jobDetail.getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, cron);', '} else {']
['creating simpletrigger ', []]
camel sample_15002

['}', 'if (fireNow) {', 'triggerBuilder = triggerBuilder.startNow();', '}', 'result = triggerBuilder.build();', 'jobDetail.getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE, "simple");', 'jobDetail.getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_COUNTER, repeat);', 'jobDetail.getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_INTERVAL, interval);', '}', 'if (triggerParameters != null && triggerParameters.size() > 0) {']
['setting user extra triggerparameters ', ['triggerparameters']]
camel sample_15002

['private JobDetail createJobDetail() throws Exception {', 'String name = triggerKey.getName();', 'String group = triggerKey.getGroup();', 'Class<? extends Job> jobClass = stateful ? StatefulCamelJob.class : CamelJob.class;']
['creating new ', ['jobclass', 'getsimplename']]
camel sample_15002

['Class<? extends Job> jobClass = stateful ? StatefulCamelJob.class : CamelJob.class;', 'JobBuilder builder = JobBuilder.newJob(jobClass) .withIdentity(name, group);', 'if (durableJob) {', 'builder = builder.storeDurably();', '}', 'if (recoverableJob) {', 'builder = builder.requestRecovery();', '}', 'JobDetail result = builder.build();', 'if (jobParameters != null && jobParameters.size() > 0) {']
['setting user extra jobparameters ', ['jobparameters']]
camel sample_15002

['public void pauseTrigger() throws Exception {', 'Scheduler scheduler = getComponent().getScheduler();', 'boolean isClustered = scheduler.getMetaData().isJobStoreClustered();', 'if (jobPaused.get() || isClustered) {', 'return;', '}', 'jobPaused.set(true);', 'if (!scheduler.isShutdown()) {']
['pausing trigger ', ['triggerkey']]
camel sample_15002

['public void resumeTrigger() throws Exception {', 'if (!jobPaused.get()) {', 'return;', '}', 'jobPaused.set(false);', 'Scheduler scheduler = getComponent().getScheduler();', 'if (scheduler != null) {']
['resuming trigger ', ['triggerkey']]
camel sample_15002

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<EC2Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ec2.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ec2.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1140

['public void notify(EventObject eventObject) throws Exception {', 'String message = eventObject.toString();', 'Level level = determineLevel(eventObject);', 'MessagePayload payload = new MessagePayload(getHostName(), level, getServiceName(), message);', 'if (log.isInfoEnabled()) {']
['sending notification to nagios ', ['payload', 'getmessage']]
camel sample_9120

['public void notify(EventObject eventObject) throws Exception {', 'String message = eventObject.toString();', 'Level level = determineLevel(eventObject);', 'MessagePayload payload = new MessagePayload(getHostName(), level, getServiceName(), message);', 'if (log.isInfoEnabled()) {', '}', 'sender.send(payload);']
['sending notification done ', []]
camel sample_9120

['protected void doStart() throws Exception {', 'if (nagiosSettings == null) {', 'nagiosSettings = configuration.getNagiosSettings();', '}', 'if (sender == null) {', 'sender = new NagiosPassiveCheckSender(nagiosSettings);', '}']
['using ', ['configuration']]
camel sample_9120

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TimerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.timer.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.timer.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_861

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (cause instanceof IOException) {']
['io exception client connection closed ', ['cause']]
camel sample_7581

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (cause instanceof IOException) {', '} else {']
['caught an exception while reading closing channel ', ['cause']]
camel sample_7581

['public void testPerformance() throws Exception {', 'StopWatch watch = new StopWatch();', 'MockEndpoint endpoint = getMockEndpoint(uri);', 'endpoint.expectedMessageCount((int) dataSet.getSize());', 'endpoint.expectedHeaderReceived("foo", 123);', 'MockEndpoint.assertIsSatisfied(context, 30, TimeUnit.SECONDS);']
['routeperformancetest sent took ms ', ['size', 'watch', 'taken']]
camel sample_2500

['public void contextInitialized(ServletContextEvent sce) {']
['camelcontextservletlistener initializing ', []]
camel sample_12114

['registry = createRegistry();', 'camelContext = new ServletCamelContext(registry, sce.getServletContext());', '} catch (Exception e) {', 'throw new RuntimeException("Error creating CamelContext.", e);', '}', 'Map<String, Object> map = extractInitParameters(sce);', 'String test = (String) map.remove("test");', 'if (test != null && "true".equalsIgnoreCase(test)) {', 'this.test = true;', '}']
['in test mode ', ['this', 'test']]
camel sample_12114

['camelContextLifecycle = camelContext.getInjector().newInstance(clazz);', '} catch (ClassNotFoundException e) {', 'throw new RuntimeException("Error creating CamelContextLifecycle class with name " + lifecycle, e);', '}', '}', 'try {', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.beforeAddRoutes(camelContext, registry);', '}', '} catch (Exception e) {']
['error before adding routes to camelcontext ', ['e']]
camel sample_12114

['try {', 'camelContext.addRouteDefinition((RouteDefinition) route);', '} catch (Exception e) {', 'throw new RuntimeException("Error adding route(s) " + route, e);', '}', '} else {', 'throw new IllegalArgumentException("Unsupported route: " + route);', '}', '}', 'if (!map.isEmpty()) {']
['there are servletcontext init parameters unknown to camel maybe they are used by other frameworks ', ['map', 'size', 'map']]
camel sample_12114

['throw new IllegalArgumentException("Unsupported route: " + route);', '}', '}', 'if (!map.isEmpty()) {', '}', 'try {', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.afterAddRoutes(camelContext, registry);', '}', '} catch (Exception e) {']
['error after adding routes to camelcontext ', ['e']]
camel sample_12114

['}', 'try {', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.beforeStart(camelContext, registry);', '}', 'camelContext.start();', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.afterStart(camelContext, registry);', '}', '} catch (Exception e) {']
['error starting camelcontext ', ['e']]
camel sample_12114

['if (camelContextLifecycle != null) {', 'camelContextLifecycle.afterStart(camelContext, registry);', '}', '} catch (Exception e) {', 'throw new RuntimeException("Error starting CamelContext.", e);', '}', 'if (this.test) {', 'instance = camelContext;', '}', 'sce.getServletContext().setAttribute(CAMEL_CONTEXT_KEY, camelContext);']
['camelcontextservletlistener initialized ', []]
camel sample_12114

['public void contextDestroyed(ServletContextEvent sce) {']
['camelcontextservletlistener destroying ', []]
camel sample_12114

['if (camelContext != null) {', 'try {', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.beforeStop(camelContext, registry);', '}', 'camelContext.stop();', 'if (camelContextLifecycle != null) {', 'camelContextLifecycle.afterStop(camelContext, registry);', '}', '} catch (Exception e) {']
['error stopping camelcontext this exception will be ignored ', ['e']]
camel sample_12114

['if (camelContextLifecycle != null) {', 'camelContextLifecycle.afterStop(camelContext, registry);', '}', '} catch (Exception e) {', '}', '}', 'camelContext = null;', 'registry = null;', 'instance = null;', 'sce.getServletContext().removeAttribute(CAMEL_CONTEXT_KEY);']
['camelcontextservletlistener destroyed ', []]
camel sample_12114

['Map<String, Object> map = new LinkedHashMap<String, Object>();', 'Enumeration<?> names = sce.getServletContext().getInitParameterNames();', 'while (names.hasMoreElements()) {', 'String name = (String) names.nextElement();', 'String value = sce.getServletContext().getInitParameter(name);', 'if (ObjectHelper.isNotEmpty(value)) {', 'Object target = value;', 'if (value.startsWith("#")) {', 'value = value.substring(1);', 'target = lookupRegistryByName(value);']
['resolved the servlet context s initialization parameter to ', ['value', 'target']]
camel sample_12114

['private void initJmx(ServletCamelContext camelContext, Map<String, Object> parameters) throws Exception {', 'Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "jmx.");', 'if (properties != null && !properties.isEmpty()) {', 'String disabled = (String) properties.remove("disabled");', 'boolean disableJmx = CamelContextHelper.parseBoolean(camelContext, disabled != null ? disabled : "false");', 'if (disableJmx) {']
['jmxagent disabled ', []]
camel sample_12114

['private void initJmx(ServletCamelContext camelContext, Map<String, Object> parameters) throws Exception {', 'Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "jmx.");', 'if (properties != null && !properties.isEmpty()) {', 'String disabled = (String) properties.remove("disabled");', 'boolean disableJmx = CamelContextHelper.parseBoolean(camelContext, disabled != null ? disabled : "false");', 'if (disableJmx) {', 'camelContext.getLifecycleStrategies().clear();', 'camelContext.setManagementStrategy(new DefaultManagementStrategy());', '} else {']
['jmxagent enabled ', []]
camel sample_12114

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_2015

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_2015

['errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("World")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_2015

['public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {']
['disabling camel jmx globally as disablejmx annotation was found and disablejmx is set to true ', []]
camel sample_10579

['public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {', 'System.setProperty(JmxSystemPropertyKeys.DISABLED, "true");', '} else {']
['enabling camel jmx as disablejmx annotation was found and disablejmx is set to false ', []]
camel sample_10579

['public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {', 'CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED));', 'if (testClass.isAnnotationPresent(DisableJmx.class)) {', 'if (testClass.getAnnotation(DisableJmx.class).value()) {', 'System.setProperty(JmxSystemPropertyKeys.DISABLED, "true");', '} else {', 'System.clearProperty(JmxSystemPropertyKeys.DISABLED);', '}', '} else {']
['disabling camel jmx globally for tests by default use the disablejmx annotation to override the default setting ', []]
camel sample_10579

['public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {', 'if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {', 'System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true");', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['enabling routecoverage ', []]
camel sample_10579

['}', 'if (breakpoints.size() != 0) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'Debugger debugger = camelContext.getDebugger();', 'if (debugger == null) {', 'debugger = new DefaultDebugger();', 'camelContext.setDebugger(debugger);', '}', 'for (Breakpoint breakpoint : breakpoints) {']
['adding breakpoint to camelcontext with name ', ['breakpoint', 'contextname']]
camel sample_10579

['final TimeUnit shutdownTimeUnit;', 'if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {', 'shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value();', 'shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit();', '} else {', 'shutdownTimeout = 10;', 'shutdownTimeUnit = TimeUnit.SECONDS;', '}', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['setting shutdown timeout to on camelcontext with name ', ['new', 'object', 'shutdowntimeout', 'shutdowntimeunit', 'contextname']]
camel sample_10579

['public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {', 'if (testClass.isAnnotationPresent(MockEndpoints.class)) {', 'final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value();', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {']
['enabling auto mocking of endpoints matching pattern on camelcontext with name ', ['mockendpoints', 'contextname']]
camel sample_10579

['public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {', 'if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {', 'final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value();', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints);']
['enabling auto mocking and skipping of endpoints matching pattern on camelcontext with name ', ['mockendpointsvalue', 'contextname']]
camel sample_10579

['}', 'if (properties.size() != 0) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class);', 'Properties extra = new Properties();', 'for (Properties prop : properties) {', 'extra.putAll(prop);', '}', 'if (!extra.isEmpty()) {']
['using properties to override any existing properties on the propertiescomponent on camelcontext with name ', ['extra', 'size', 'contextname']]
camel sample_10579

['public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {']
['skipping starting camelcontext s as system property skipstartingcamelcontext is set to be true ', []]
camel sample_10579

['public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {', 'if (testClass.getAnnotation(UseAdviceWith.class).value()) {']
['skipping starting camelcontext s as useadvicewith annotation was found and isuseadvicewith is set to true ', []]
camel sample_10579

['public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {', 'boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));', 'if (skip) {', '} else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {', 'if (testClass.getAnnotation(UseAdviceWith.class).value()) {', 'skip = true;', '} else {']
['starting camelcontext s as useadvicewith annotation was found but isuseadvicewith is set to false ', []]
camel sample_10579

['if (testClass.getAnnotation(UseAdviceWith.class).value()) {', 'skip = true;', '} else {', 'skip = false;', '}', '}', 'if (!skip) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'if (!camelContext.isStarted()) {']
['starting camelcontext with name ', ['contextname']]
camel sample_10579

['} else {', 'skip = false;', '}', '}', 'if (!skip) {', 'CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {', 'public void execute(String contextName, SpringCamelContext camelContext) throws Exception {', 'if (!camelContext.isStarted()) {', 'camelContext.start();', '} else {']
['camelcontext with name already started ', ['contextname']]
camel sample_10579

['protected void createConnection() {', 'if (connection != null) {', 'connection.disconnect(null);', '}', 'connection = configuration.callbackConnection();', 'connection.listener(new Listener() {', 'public void onConnected() {', 'connected = true;']
['mqtt connection connected to ', ['configuration', 'gethost']]
camel sample_16854

['protected void createConnection() {', 'if (connection != null) {', 'connection.disconnect(null);', '}', 'connection = configuration.callbackConnection();', 'connection.listener(new Listener() {', 'public void onConnected() {', 'connected = true;', '}', 'public void onDisconnected() {']
['mqtt connection disconnected from ', ['configuration', 'gethost']]
camel sample_16854

['for (MQTTConsumer consumer : consumers) {', 'consumer.processExchange(exchange);', '}', '}', 'if (ack != null) {', 'ack.run();', '}', '}', 'public void onFailure(Throwable value) {', 'connected = false;']
['connection to failure due forcing a disconnect to re connect on next attempt ', ['configuration', 'gethost', 'value', 'getmessage']]
camel sample_16854

['if (ack != null) {', 'ack.run();', '}', '}', 'public void onFailure(Throwable value) {', 'connected = false;', 'connection.disconnect(new Callback<Void>() {', 'public void onSuccess(Void value) {', '}', 'public void onFailure(Throwable e) {']
['failed to disconnect from this exception is ignored ', ['configuration', 'gethost', 'e']]
camel sample_16854

['public void onSuccess(Void value) {']
['connected to ', ['configuration', 'gethost']]
camel sample_16854

['public void onSuccess(Void value) {', 'Topic[] topics = createSubscribeTopics();', 'if (topics != null && topics.length > 0) {', 'connection.subscribe(topics, new Callback<byte[]>() {', 'public void onSuccess(byte[] value) {', 'promise.onSuccess(value);', 'connected = true;', '}', 'public void onFailure(Throwable value) {']
['failed to subscribe ', ['value']]
camel sample_16854

['public void onFailure(Throwable value) {']
['failed to connect to due ', ['configuration', 'gethost', 'value', 'getmessage']]
camel sample_16854

['public void run() {']
['publishing to ', ['configuration', 'gethost']]
camel sample_16854

['public static String getEffectiveAddress(Exchange exchange, String defaultAddress) {', 'String retval = exchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class);', 'if (retval == null) {', 'retval = defaultAddress;', '} else {']
['client address is overridden by header to value ', ['exchange', 'destination', 'override', 'url', 'retval']]
camel sample_8048

['public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {', 'try {', 'if (config != null && config.getUseGlobalSslContextParameters() != null && config.getUseGlobalSslContextParameters()) {', 'SSLContextParameters globalSSLParams = context.getSSLContextParameters();', 'if (globalSSLParams != null) {', 'ProtocolSocketFactory factory = new SSLContextParametersSecureProtocolSocketFactory(globalSSLParams, context);', 'Protocol.registerProtocol("https", new Protocol( "https", factory, 443));', '}', '}', '} catch (NoUniqueBeanDefinitionException e) {']
['multiple instance of sslcontextparameters found skipping configuration ', []]
camel sample_1269

['try {', 'if (config != null && config.getUseGlobalSslContextParameters() != null && config.getUseGlobalSslContextParameters()) {', 'SSLContextParameters globalSSLParams = context.getSSLContextParameters();', 'if (globalSSLParams != null) {', 'ProtocolSocketFactory factory = new SSLContextParametersSecureProtocolSocketFactory(globalSSLParams, context);', 'Protocol.registerProtocol("https", new Protocol( "https", factory, 443));', '}', '}', '} catch (NoUniqueBeanDefinitionException e) {', '} catch (NoSuchBeanDefinitionException e) {']
['no instance of sslcontextparameters found ', []]
camel sample_1269

['if (config != null && config.getUseGlobalSslContextParameters() != null && config.getUseGlobalSslContextParameters()) {', 'SSLContextParameters globalSSLParams = context.getSSLContextParameters();', 'if (globalSSLParams != null) {', 'ProtocolSocketFactory factory = new SSLContextParametersSecureProtocolSocketFactory(globalSSLParams, context);', 'Protocol.registerProtocol("https", new Protocol( "https", factory, 443));', '}', '}', '} catch (NoUniqueBeanDefinitionException e) {', '} catch (NoSuchBeanDefinitionException e) {', '} catch (BeansException e) {']
['cannot create sslcontextparameters ', ['e']]
camel sample_1269

['public void run() {', 'BaseQueue<?> queue = endpoint.getHazelcastInstance().getQueue(endpoint.getConfiguration().getQueueName());', 'while (queue != null && isRunAllowed()) {', 'final Exchange exchange = this.getEndpoint().createExchange();', 'TransactionContext transactionCtx = null;', 'try {', 'if (endpoint.getConfiguration().isTransacted()) {', 'transactionCtx = endpoint.getHazelcastInstance().newTransactionContext();', 'if (transactionCtx != null) {']
['begin transaction ', ['transactionctx', 'gettxnid']]
camel sample_9527

['public void done(boolean asyncDone) {', '}', '});', 'if (exchange.getException() != null) {', 'if (transactionCtx != null) {', 'transactionCtx.rollbackTransaction();', '}', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', '} catch (Exception e) {']
['hzlq exception caught ', ['e', 'e']]
camel sample_9527

['}', '});', 'if (exchange.getException() != null) {', 'if (transactionCtx != null) {', 'transactionCtx.rollbackTransaction();', '}', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', '} catch (Exception e) {', 'if (transactionCtx != null) {']
['rollback transaction ', ['transactionctx', 'gettxnid']]
camel sample_9527

['}', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', '} catch (Exception e) {', 'if (transactionCtx != null) {', 'transactionCtx.rollbackTransaction();', '}', '}', '}', 'if (exchange.getException() == null && transactionCtx != null) {']
['commit transaction ', ['transactionctx', 'gettxnid']]
camel sample_9527

['if (transactionCtx != null) {', 'transactionCtx.rollbackTransaction();', '}', '}', '}', 'if (exchange.getException() == null && transactionCtx != null) {', 'transactionCtx.commitTransaction();', '}', '} catch (InterruptedException e) {', 'if (LOG.isDebugEnabled()) {']
['hzlq consumer interrupted ', ['e', 'e']]
camel sample_9527

['}', 'if (exchange.getException() == null && transactionCtx != null) {', 'transactionCtx.commitTransaction();', '}', '} catch (InterruptedException e) {', 'if (LOG.isDebugEnabled()) {', '}', 'continue;', '} catch (Throwable e) {', 'if (transactionCtx != null) {']
['rollback transaction ', ['transactionctx', 'gettxnid']]
camel sample_9527

['public List<Exchange> pollConsume() throws TwitterException {', 'String keywords = this.keywords;', 'Query query;', 'if (keywords != null && keywords.trim().length() > 0) {', 'query = new Query(keywords);']
['searching twitter with keywords ', ['keywords']]
camel sample_14214

['public List<Exchange> pollConsume() throws TwitterException {', 'String keywords = this.keywords;', 'Query query;', 'if (keywords != null && keywords.trim().length() > 0) {', 'query = new Query(keywords);', '} else {', 'query = new Query();']
['searching twitter without keywords ', []]
camel sample_14214

['public List<Exchange> directConsume() throws TwitterException {', 'String keywords = this.keywords;', 'if (keywords == null || keywords.trim().length() == 0) {', 'return Collections.emptyList();', '}', 'Query query = new Query(keywords);']
['searching twitter with keywords ', ['keywords']]
camel sample_14214

['}', 'if (ObjectHelper.isNotEmpty(endpoint.getProperties().getCount())) {', 'query.setCount(endpoint.getProperties().getCount());', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getProperties().getNumberOfPages())) {', 'numberOfPages = endpoint.getProperties().getNumberOfPages();', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getProperties().getLatitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getLongitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getRadius())) {', 'GeoLocation location = new GeoLocation(endpoint.getProperties().getLatitude(), endpoint.getProperties().getLongitude());', 'query.setGeoCode(location, endpoint.getProperties().getRadius(), Unit.valueOf(endpoint.getProperties().getDistanceMetric()));']
['searching with additional geolocation parameters ', []]
camel sample_14214

['if (ObjectHelper.isNotEmpty(endpoint.getProperties().getCount())) {', 'query.setCount(endpoint.getProperties().getCount());', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getProperties().getNumberOfPages())) {', 'numberOfPages = endpoint.getProperties().getNumberOfPages();', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getProperties().getLatitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getLongitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getRadius())) {', 'GeoLocation location = new GeoLocation(endpoint.getProperties().getLatitude(), endpoint.getProperties().getLongitude());', 'query.setGeoCode(location, endpoint.getProperties().getRadius(), Unit.valueOf(endpoint.getProperties().getDistanceMetric()));', '}']
['searching with pages ', ['numberofpages']]
camel sample_14214

['final Set<String> argNames = new HashSet<>(endpoint.getEndpointPropertyNames());', 'propertyNamesInterceptor.interceptPropertyNames(argNames);', 'List<ApiMethod> filteredMethods = endpoint.methodHelper.filterMethods( endpoint.getCandidates(), ApiMethodHelper.MatchType.SUPER_SET, argNames);', 'if (filteredMethods.isEmpty()) {', 'ApiMethodHelper<? extends ApiMethod> methodHelper = endpoint.getMethodHelper();', 'throw new IllegalArgumentException( String.format("Missing properties for %s/%s, need one or more from %s", endpoint.getApiName().getName(), endpoint.getMethodName(), methodHelper.getMissingProperties(endpoint.getMethodName(), argNames)));', '} else if (filteredMethods.size() == 1) {', 'result = filteredMethods.get(0);', '} else {', 'result = ApiMethodHelper.getHighestPriorityMethod(filteredMethods);']
['using highest priority operation s from operations s for endpoint s ', ['string', 'format', 'result', 'filteredmethods', 'endpoint', 'getendpointuri']]
camel sample_4315

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BindyCsvDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-csv.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-csv.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_973

['count++;', 'model = factory.factory();', 'List<String> result = Arrays.asList(line.split(separator));', 'if (result.size() == 0 || result.isEmpty()) {', 'throw new java.lang.IllegalArgumentException("No records have been defined in the KVP");', '}', 'if (result.size() > 0) {', 'factory.bind(getCamelContext(), result, model, count, lists);', 'factory.link(model);', 'models.add(model);']
['graph of objects created ', ['model']]
camel sample_7493

['result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");', 'Set<ObjectName> namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['adding route ', []]
camel sample_2691

['}', '});', 'MockEndpoint bar = getMockEndpoint("mock:bar");', 'bar.expectedMessageCount(1);', 'template.sendBody("direct:bar", "Hello World");', 'bar.assertIsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(2, namesP.size());']
['removing route ', []]
camel sample_2691

['assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(2, namesP.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['shutting down ', []]
camel sample_2691

['result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");', 'Set<ObjectName> namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['adding route ', []]
camel sample_2691

['}', '});', 'MockEndpoint bar = getMockEndpoint("mock:bar");', 'bar.expectedMessageCount(1);', 'template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:bar");', 'bar.assertIsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['removing route ', []]
camel sample_2691

['assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['shutting down ', []]
camel sample_2691

['result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");', 'Set<ObjectName> namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['adding route ', []]
camel sample_2691

['}', '});', 'MockEndpoint bar = getMockEndpoint("mock:bar");', 'bar.expectedMessageCount(1);', 'template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:bar");', 'bar.assertIsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['removing route ', []]
camel sample_2691

['assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'namesP = mbeanServer.queryNames(onP, null);', 'assertEquals(1, namesP.size());']
['shutting down ', []]
camel sample_2691

['public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnException() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['adding route ', []]
camel sample_2691

['});', 'getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:error").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("error", "mock:error");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['stopping route ', []]
camel sample_2691

['getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:error").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("error", "mock:error");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");']
['removing route ', []]
camel sample_2691

['headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['shutting down ', []]
camel sample_2691

['public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnException() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['adding route ', []]
camel sample_2691

['});', 'getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:error").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("error", "mock:error");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['stopping route ', []]
camel sample_2691

['getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:error").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("error", "mock:error");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");']
['removing route ', []]
camel sample_2691

['headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['shutting down ', []]
camel sample_2691

['public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnCompletion() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['adding route ', []]
camel sample_2691

['});', 'getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:done").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("done", "mock:done");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['stopping route ', []]
camel sample_2691

['getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:done").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("done", "mock:done");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");']
['removing route ', []]
camel sample_2691

['headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['shutting down ', []]
camel sample_2691

['public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnCompletion() throws Exception {', 'MockEndpoint result = getMockEndpoint("mock:result");', 'result.expectedMessageCount(1);', 'template.sendBody("direct:start", "Hello World");', 'result.assertIsSatisfied();', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");', 'Set<ObjectName> names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['adding route ', []]
camel sample_2691

['});', 'getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:done").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("done", "mock:done");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['stopping route ', []]
camel sample_2691

['getMockEndpoint("mock:bar").expectedMessageCount(1);', 'getMockEndpoint("mock:done").expectedMessageCount(1);', 'Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("done", "mock:done");', 'headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");']
['removing route ', []]
camel sample_2691

['headers.put("bar", "mock:bar");', 'template.sendBodyAndHeaders("direct:bar", "Hello World", headers);', 'assertMockEndpointsSatisfied();', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());', 'context.stopRoute("bar");', 'boolean removed = context.removeRoute("bar");', 'assertTrue(removed);', 'names = mbeanServer.queryNames(on, null);', 'assertEquals(services, names.size());']
['shutting down ', []]
camel sample_2691

['public Object extractBodyFromJms(Exchange exchange, Message message) {', 'try {', 'if (endpoint != null && endpoint.getMessageConverter() != null) {', 'if (LOG.isTraceEnabled()) {']
['extracting body using a custom messageconverter from jms message ', ['endpoint', 'getmessageconverter', 'message']]
camel sample_7169

['public Object extractBodyFromJms(Exchange exchange, Message message) {', 'try {', 'if (endpoint != null && endpoint.getMessageConverter() != null) {', 'if (LOG.isTraceEnabled()) {', '}', 'return endpoint.getMessageConverter().fromMessage(message);', '}', 'if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {']
['option map jms message is false so using jms message as body ', ['message']]
camel sample_7169

['try {', 'if (endpoint != null && endpoint.getMessageConverter() != null) {', 'if (LOG.isTraceEnabled()) {', '}', 'return endpoint.getMessageConverter().fromMessage(message);', '}', 'if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {', 'return message;', '}', 'if (message instanceof ObjectMessage) {']
['extracting body as a objectmessage from jms message ', ['message']]
camel sample_7169

['ObjectMessage objectMessage = (ObjectMessage)message;', 'Object payload = objectMessage.getObject();', 'if (payload instanceof DefaultExchangeHolder) {', 'DefaultExchangeHolder holder = (DefaultExchangeHolder) payload;', 'DefaultExchangeHolder.unmarshal(exchange, holder);', 'return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {']
['extracting body as a textmessage from jms message ', ['message']]
camel sample_7169

['DefaultExchangeHolder holder = (DefaultExchangeHolder) payload;', 'DefaultExchangeHolder.unmarshal(exchange, holder);', 'return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {']
['extracting body as a mapmessage from jms message ', ['message']]
camel sample_7169

['return exchange.getIn().getBody();', '} else {', 'return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {', 'return createMapFromMapMessage((MapMessage)message);', '} else if (message instanceof BytesMessage) {']
['extracting body as a bytesmessage from jms message ', ['message']]
camel sample_7169

['return objectMessage.getObject();', '}', '} else if (message instanceof TextMessage) {', 'TextMessage textMessage = (TextMessage)message;', 'return textMessage.getText();', '} else if (message instanceof MapMessage) {', 'return createMapFromMapMessage((MapMessage)message);', '} else if (message instanceof BytesMessage) {', 'return createByteArrayFromBytesMessage(exchange, (BytesMessage)message);', '} else if (message instanceof StreamMessage) {']
['extracting body as a streammessage from jms message ', ['message']]
camel sample_7169

['protected Object createByteArrayFromBytesMessage(Exchange exchange, BytesMessage message) throws JMSException {', 'Long size = getSafeLongProperty(message, "_AMQ_LARGE_SIZE");', 'if (size != null && size > 0) {']
['optimised for artemis reading from bytesmessage in streaming mode directly into cachedoutputstream payload ', []]
camel sample_7169

['return cos.getInputStream();', '} catch (IOException e) {', 'JMSException cause = new MessageFormatException(e.getMessage());', 'cause.initCause(e);', 'throw cause;', '} finally {', 'IOHelper.close(cos);', '}', '}', 'if (message.getBodyLength() > Integer.MAX_VALUE) {']
['length of bytesmessage is too long ', ['message', 'getbodylength']]
camel sample_7169

['answer = answer instanceof ObjectMessage ? answer : null;', '} else if (type == Stream) {', 'answer = answer instanceof StreamMessage ? answer : null;', '}', '}', '}', '}', '}', 'if (answer == null) {', 'if (cause != null) {']
['will create jmsmessage with caused exception ', ['cause']]
camel sample_7169

['JmsMessageHelper.setJMSReplyTo(jmsMessage, replyTo);', '} else if (headerName.equals("JMSType")) {', 'jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue));', '} else if (headerName.equals("JMSPriority")) {', 'jmsMessage.setJMSPriority(ExchangeHelper.convertToType(exchange, Integer.class, headerValue));', '} else if (headerName.equals("JMSDeliveryMode")) {', 'JmsMessageHelper.setJMSDeliveryMode(exchange, jmsMessage, headerValue);', '} else if (headerName.equals("JMSExpiration")) {', 'jmsMessage.setJMSExpiration(ExchangeHelper.convertToType(exchange, Long.class, headerValue));', '} else {']
['ignoring jms header with value ', ['headername', 'headervalue']]
camel sample_7169

['jmsMessage.setJMSExpiration(ExchangeHelper.convertToType(exchange, Long.class, headerValue));', '} else {', '}', '} else if (shouldOutputHeader(in, headerName, headerValue, exchange)) {', 'Object value = getValidJMSHeaderValue(headerName, headerValue);', 'if (value == null && endpoint.getConfiguration().getAllowAdditionalHeaders() != null) {', 'Iterator it = ObjectHelper.createIterator(endpoint.getConfiguration().getAllowAdditionalHeaders());', 'while (it.hasNext()) {', 'String pattern = (String) it.next();', 'if (EndpointHelper.matchPattern(headerName, pattern)) {']
['header allowed as additional header despite not being valid according to the jms specification ', ['headername']]
camel sample_7169

['if (EndpointHelper.matchPattern(headerName, pattern)) {', 'value = headerValue;', 'break;', '}', '}', '}', 'if (value != null) {', 'String key = jmsKeyFormatStrategy.encodeKey(headerName);', 'JmsMessageHelper.setProperty(jmsMessage, key, value);', '} else if (LOG.isDebugEnabled()) {']
['ignoring non primitive header of class with value ', ['new', 'object', 'headername', 'headervalue', 'getclass', 'getname', 'headervalue']]
camel sample_7169

['protected Message createJmsMessage(Exception cause, Session session) throws JMSException {']
['using jmsmessagetype ', ['object']]
camel sample_7169

['JmsMessageType type;', 'if (endpoint != null && endpoint.isTransferExchange()) {', 'LOG.trace("Option transferExchange=true so we use JmsMessageType: Object");', 'Serializable holder = DefaultExchangeHolder.marshal(exchange, true, endpoint.isAllowSerializedHeaders());', 'Message answer = session.createObjectMessage(holder);', 'answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);', 'return answer;', '}', 'if (endpoint != null && endpoint.getMessageConverter() != null) {', 'if (LOG.isTraceEnabled()) {']
['creating jmsmessage using a custom messageconverter with body ', ['endpoint', 'getmessageconverter', 'body']]
camel sample_7169

['type = context.getTypeConverter().convertTo(JmsMessageType.class, headers.get(JmsConstants.JMS_MESSAGE_TYPE));', '} else if (endpoint != null && endpoint.getConfiguration().getJmsMessageType() != null) {', 'type = endpoint.getConfiguration().getJmsMessageType();', '} else {', 'type = getJMSMessageTypeForBody(exchange, body, headers, session, context);', '}', 'if (type != null) {', 'if (body == null && (endpoint != null && !endpoint.getConfiguration().isAllowNullBody())) {', 'throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}']
['using jmsmessagetype ', ['type']]
camel sample_7169

['throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}', 'Message answer = createJmsMessageForType(exchange, body, headers, session, context, type);', 'answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);', 'return answer;', '}', 'if (body == null && (endpoint != null && !endpoint.getConfiguration().isAllowNullBody())) {', 'throw new JMSException("Cannot send message as message body is null, and option allowNullBody is false.");', '}', 'if (body != null && LOG.isWarnEnabled()) {']
['cannot determine specific jmsmessage type to use from body class will use generic jmsmessage body class if you want to send a pojo then your class might need to implement java io serializable or you can force a specific type by setting the jmsmessagetype option on the jms endpoint ', ['objecthelper', 'classcanonicalname', 'body']]
camel sample_7169

['String payload = context.getTypeConverter().convertTo(String.class, exchange, body);', 'message.setText(payload);', '}', 'return message;', '}', 'case Bytes: {', 'BytesMessage message = session.createBytesMessage();', 'if (body != null) {', 'try {', 'if (isVendor(session, "Artemis")) {']
['optimised for artemis streaming payload in bytesmessage ', []]
camel sample_7169

['}', 'return message;', '}', 'case Bytes: {', 'BytesMessage message = session.createBytesMessage();', 'if (body != null) {', 'try {', 'if (isVendor(session, "Artemis")) {', 'InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body);', 'message.setObjectProperty("JMS_AMQ_InputStream", is);']
['optimised for artemis finished streaming payload in bytesmessage ', []]
camel sample_7169

['}', '}', 'return message;', '}', 'case Stream: {', 'StreamMessage message = session.createStreamMessage();', 'if (body != null) {', 'long size = 0;', 'try {', 'InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body);']
['writing payload in streammessage ', []]
camel sample_7169

['try {', 'InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body);', 'byte[] buffer = new byte[FileUtil.BUFFER_SIZE];', 'int len = 0;', 'int count = 0;', 'while (len >= 0) {', 'count++;', 'len = is.read(buffer);', 'if (len >= 0) {', 'size += len;']
['writing payload chunk as bytes in streammessage ', ['count']]
camel sample_7169

['int len = 0;', 'int count = 0;', 'while (len >= 0) {', 'count++;', 'len = is.read(buffer);', 'if (len >= 0) {', 'size += len;', 'message.writeBytes(buffer, 0, len);', '}', '}']
['finished writing payload size as bytes in streammessage ', ['size']]
camel sample_7169

['public void testUploadFileToFolder() throws Exception {', 'File folder = uploadTestFolder();', 'File file = uploadTestFile();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.folderId", folder.getId());', 'com.google.api.services.drive.model.ChildReference child = new com.google.api.services.drive.model.ChildReference();', 'child.setId(file.getId());', 'headers.put("CamelGoogleDrive.content", child);', 'requestBodyAndHeaders("direct: final com.google.api.services.drive.model.ChildList result = requestBody("direct: assertNotNull("insert result", result);']
['insert ', ['result']]
camel sample_15405

['if (exchange.getProperty(Exchange.ASYNC_WAIT) != null) {', 'wait = exchange.getProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.class);', '}', 'if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {', 'final Exchange copy = prepareCopy(exchange, false);', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(final Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {']
['timeout occurred so response will be ignored ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_10742

['if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {', 'final Exchange copy = prepareCopy(exchange, false);', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(final Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {', '}', '} else {', 'if (log.isTraceEnabled()) {']
['with response ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_10742

['public boolean allowHandover() {', 'return false;', '}', 'public String toString() {', 'return "onDone at endpoint: " + endpoint;', '}', '});', 'doPublish(copy);', 'if (timeout > 0) {', 'if (log.isTraceEnabled()) {']
['waiting for task to complete using timeout ms at ', ['timeout', 'endpoint', 'getendpointuri']]
camel sample_10742

['done = latch.await(timeout, TimeUnit.MILLISECONDS);', '} catch (InterruptedException e) {', '}', 'if (!done) {', 'exchange.setProperty(DisruptorEndpoint.DISRUPTOR_IGNORE_EXCHANGE, true);', 'exchange.setException(new ExchangeTimedOutException(exchange, timeout));', 'latch.countDown();', '}', '} else {', 'if (log.isTraceEnabled()) {']
['waiting for task to complete blocking at ', ['endpoint', 'getendpointuri']]
camel sample_10742

['private void doPublish(Exchange exchange) {']
['publishing exchange to disruptor ringbuffer ', ['exchange']]
camel sample_10742

['public void process(Exchange exchange) throws Exception {']
['crafting standard response in stockquoteresponseprocessor ', []]
camel sample_17087

['public void process(Exchange exchange) throws Exception {', 'List<MetricDatum> metricData = getMetricData(exchange);', 'PutMetricDataRequest request = new PutMetricDataRequest() .withMetricData(metricData) .withNamespace(determineNameSpace(exchange));']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8789

['AtomicReference<Throwable> thrown = new AtomicReference<>(null);', 'callback = ReactiveStreamsHelper.attachCallback(data, (exchange, error) -> {', 'thrown.compareAndSet(null, error);', 'if (counter.decrementAndGet() == 0) {', 'originalCallback.processed(exchange, thrown.get());', '}', '});', '}', 'if (subs.size() > 0) {', 'if (LOG.isDebugEnabled()) {']
['exchange published to subscriptions for the stream ', ['subs', 'size', 'name', 'data']]
camel sample_11503

['}', 'SplitStrategy idleStrategy = null;', 'for (SplitStrategy strategy : config.getSplitStrategies()) {', 'if (strategy.type == SplitStrategyType.IDLE) {', 'idleStrategy = strategy;', 'break;', '}', '}', 'if (idleStrategy != null) {', 'scheduler = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "HdfsIdleCheck");']
['creating idlecheck task scheduled to run every millis ', ['config', 'getcheckidleinterval']]
camel sample_11153

['private synchronized HdfsOutputStream setupHdfs(boolean onStartup) throws Exception {', 'if (ostream != null) {', 'return ostream;', '}', 'StringBuilder actualPath = new StringBuilder(hdfsPath);', 'if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_11153

['if (ostream != null) {', 'return ostream;', '}', 'StringBuilder actualPath = new StringBuilder(hdfsPath);', 'if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connecting to hdfs file system may take a while if connection is not available ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_11153

['if (config.getSplitStrategies().size() > 0) {', 'actualPath = newFileName();', '}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsOutputStream answer = HdfsOutputStream.createOutputStream(actualPath.toString(), config);', 'if (onStartup) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_11153

['}', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {', '}', '}', 'HdfsOutputStream answer = HdfsOutputStream.createOutputStream(actualPath.toString(), config);', 'if (onStartup) {', '} else {', 'if (log.isDebugEnabled()) {']
['connected to hdfs file system ', ['new', 'object', 'config', 'gethostname', 'config', 'getport', 'actualpath', 'tostring']]
camel sample_11153

['public void run() {', 'if (ostream == null) {', 'return;', '}']
['idlecheck running ', []]
camel sample_11153

['public void run() {', 'if (ostream == null) {', 'return;', '}', 'if (System.currentTimeMillis() - ostream.getLastAccess() > strategy.value && !idle.get() && !ostream.isBusy().get()) {', 'idle.set(true);', 'try {']
['closing stream as idle ', []]
camel sample_11153

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<TerserLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.terser.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.terser.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_1052

['properties.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_CACHE, isLoaderCache() ? "true" : "false");', 'properties.setProperty(RuntimeConstants.RESOURCE_LOADER, "file, class");', 'properties.setProperty("class.resource.loader.description", "Camel Velocity Classpath Resource Loader");', 'properties.setProperty("class.resource.loader.class", CamelVelocityClasspathResourceLoader.class.getName());', 'final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity");', 'properties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName());', 'if (ObjectHelper.isNotEmpty(getPropertiesFile())) {', 'InputStream reader = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), getPropertiesFile());', 'try {', 'properties.load(reader);']
['loaded the velocity configuration file ', ['getpropertiesfile']]
camel sample_13494

['final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity");', 'properties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName());', 'if (ObjectHelper.isNotEmpty(getPropertiesFile())) {', 'InputStream reader = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), getPropertiesFile());', 'try {', 'properties.load(reader);', '} finally {', 'IOHelper.close(reader, getPropertiesFile(), log);', '}', '}']
['initializing velocityengine with properties ', ['properties']]
camel sample_13494

['public VelocityEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {', 'String newUri = uri.replace(getResourceUri(), newResourceUri);']
['getting endpoint with uri ', ['newuri']]
camel sample_13494

['protected void onExchange(Exchange exchange) throws Exception {', 'String path = getResourceUri();', 'ObjectHelper.notNull(path, "resourceUri");', 'String newResourceUri = exchange.getIn().getHeader(VelocityConstants.VELOCITY_RESOURCE_URI, String.class);', 'if (newResourceUri != null) {', 'exchange.getIn().removeHeader(VelocityConstants.VELOCITY_RESOURCE_URI);']
['set to creating new endpoint to handle exchange ', ['velocityconstants', 'velocity', 'resource', 'uri', 'newresourceuri']]
camel sample_13494

['exchange.getIn().removeHeader(VelocityConstants.VELOCITY_RESOURCE_URI);', 'VelocityEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri);', 'newEndpoint.onExchange(exchange);', 'return;', '}', 'Reader reader;', 'String content = exchange.getIn().getHeader(VelocityConstants.VELOCITY_TEMPLATE, String.class);', 'if (content != null) {', 'reader = new StringReader(content);', 'if (log.isDebugEnabled()) {']
['velocity content read from header for endpoint ', ['velocityconstants', 'velocity', 'template', 'getendpointuri']]
camel sample_13494

['}', 'Reader reader;', 'String content = exchange.getIn().getHeader(VelocityConstants.VELOCITY_TEMPLATE, String.class);', 'if (content != null) {', 'reader = new StringReader(content);', 'if (log.isDebugEnabled()) {', '}', 'exchange.getIn().removeHeader(VelocityConstants.VELOCITY_TEMPLATE);', '} else {', 'if (log.isDebugEnabled()) {']
['velocity content read from resource with resourceuri for endpoint ', ['new', 'object', 'getresourceuri', 'path', 'getendpointuri']]
camel sample_13494

['Context velocityContext = exchange.getIn().getHeader(VelocityConstants.VELOCITY_CONTEXT, Context.class);', 'if (velocityContext == null) {', 'Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange);', 'Map<String, Object> supplementalMap = exchange.getIn().getHeader(VelocityConstants.VELOCITY_SUPPLEMENTAL_CONTEXT, Map.class);', 'if (supplementalMap != null) {', 'variableMap.putAll(supplementalMap);', '}', 'velocityContext = new VelocityContext(variableMap);', '}', 'VelocityEngine engine = getVelocityEngine();']
['velocity is evaluating using velocity context ', ['velocitycontext']]
camel sample_13494

['if (exchange.getException(exception) != null) {', 'answer = true;', 'break;', '}', '}', '}', 'if (answer) {', 'statistics.onHandledFailure(exchange.getException());', '}', '}']
['should failover for exchangeid ', ['answer', 'exchange', 'getexchangeid']]
camel sample_4483

['public boolean isRunAllowed() {', 'boolean forceShutdown = camelContext.getShutdownStrategy().forceShutdown(this);', 'if (forceShutdown) {']
['run not allowed as shutdownstrategy is forcing shutting down ', []]
camel sample_4483

['if (idx == -1) {', 'idx = 0;', '}', 'index.set(idx);', '} else if (isRoundRobin()) {', 'if (counter.incrementAndGet() >= processors.size()) {', 'counter.set(0);', '}', 'index.set(counter.get());', '}']
['failover starting with endpoint index ', ['index']]
camel sample_4483

['}', 'index.set(idx);', '} else if (isRoundRobin()) {', 'if (counter.incrementAndGet() >= processors.size()) {', 'counter.set(0);', '}', 'index.set(counter.get());', '}', 'while (first || shouldFailOver(copy)) {', 'if (!isRunAllowed()) {']
['run not allowed will reject executing exchange ', ['exchange']]
camel sample_4483

['if (!isRunAllowed()) {', 'if (exchange.getException() == null) {', 'exchange.setException(new RejectedExecutionException());', '}', 'callback.done(true);', 'return true;', '}', 'if (!first) {', 'attempts.incrementAndGet();', 'if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {']
['breaking out of failover after failover attempts ', ['attempts']]
camel sample_4483

['if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {', 'break;', '}', 'index.incrementAndGet();', 'counter.incrementAndGet();', '} else {', 'first = false;', '}', 'if (index.get() >= processors.size()) {', 'if (isRoundRobin()) {']
['failover is round robin enabled and therefore starting from the first endpoint ', []]
camel sample_4483

['index.incrementAndGet();', 'counter.incrementAndGet();', '} else {', 'first = false;', '}', 'if (index.get() >= processors.size()) {', 'if (isRoundRobin()) {', 'index.set(0);', 'counter.set(0);', '} else {']
['breaking out of failover as we reached the end of endpoints to use for failover ', []]
camel sample_4483

['index.set(0);', 'counter.set(0);', '} else {', 'break;', '}', '}', 'copy = prepareExchangeForFailover(exchange);', 'Processor processor = processors.get(index.get());', 'boolean sync = processExchange(processor, exchange, copy, attempts, index, callback, processors);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4483

['} else {', 'break;', '}', '}', 'copy = prepareExchangeForFailover(exchange);', 'Processor processor = processors.get(index.get());', 'boolean sync = processExchange(processor, exchange, copy, attempts, index, callback, processors);', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['exchange', 'getexchangeid']]
camel sample_4483

['Processor processor = processors.get(index.get());', 'boolean sync = processExchange(processor, exchange, copy, attempts, index, callback, processors);', 'if (!sync) {', 'return false;', '}', '}', 'lastGoodIndex.set(index.get());', 'if (copy != null) {', 'ExchangeHelper.copyResults(exchange, copy);', '}']
['failover complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4483

['private boolean processExchange(Processor processor, Exchange exchange, Exchange copy, AtomicInteger attempts, AtomicInteger index, AsyncCallback callback, List<Processor> processors) {', 'if (processor == null) {', 'throw new IllegalStateException("No processors could be chosen to process " + copy);', '}']
['processing failover at attempt for ', ['attempts', 'copy']]
camel sample_4483

['public void done(boolean doneSync) {', 'if (doneSync) {', 'return;', '}', 'while (shouldFailOver(copy)) {', 'if (!isRunAllowed()) {']
['run not allowed will reject executing exchange ', ['exchange']]
camel sample_4483

['}', 'while (shouldFailOver(copy)) {', 'if (!isRunAllowed()) {', 'if (exchange.getException() == null) {', 'exchange.setException(new RejectedExecutionException());', '}', 'callback.done(false);', '}', 'attempts.incrementAndGet();', 'if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {']
['breaking out of failover after failover attempts ', ['attempts']]
camel sample_4483

['callback.done(false);', '}', 'attempts.incrementAndGet();', 'if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {', 'break;', '}', 'index.incrementAndGet();', 'counter.incrementAndGet();', 'if (index.get() >= processors.size()) {', 'if (isRoundRobin()) {']
['failover is round robin enabled and therefore starting from the first endpoint ', []]
camel sample_4483

['if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {', 'break;', '}', 'index.incrementAndGet();', 'counter.incrementAndGet();', 'if (index.get() >= processors.size()) {', 'if (isRoundRobin()) {', 'index.set(0);', 'counter.set(0);', '} else {']
['breaking out of failover as we reached the end of endpoints to use for failover ', []]
camel sample_4483

['index.set(0);', 'counter.set(0);', '} else {', 'break;', '}', '}', 'copy = prepareExchangeForFailover(exchange);', 'Processor processor = processors.get(index.get());', 'doneSync = processExchange(processor, exchange, copy, attempts, index, callback, processors);', 'if (!doneSync) {']
['processing exchangeid is continued being processed asynchronously ', ['exchange', 'getexchangeid']]
camel sample_4483

['Processor processor = processors.get(index.get());', 'doneSync = processExchange(processor, exchange, copy, attempts, index, callback, processors);', 'if (!doneSync) {', 'return;', '}', '}', 'lastGoodIndex.set(index.get());', 'if (copy != null) {', 'ExchangeHelper.copyResults(exchange, copy);', '}']
['failover complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4483

['protected void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset) {', 'if (partitionLastOffset != -1) {', 'if (offsetRepository != null) {', 'offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));', '} else {']
['commitsync from topic with offset ', ['threadid', 'topicname', 'partitionlastoffset']]
camel sample_16415

['public Boolean executeTest(ITestConfig config, String language) throws Exception {']
['getting camel language ', ['language']]
camel sample_6001

['public Boolean executeTest(ITestConfig config, String language) throws Exception {', 'Language lan = context.resolveLanguage(language);', 'assertNotNull("Cannot get language with name: " + language, lan);']
['found camel language instance with classname ', ['language', 'lan', 'lan', 'getclass']]
camel sample_6001

['protected int poll() throws Exception {', 'shutdownRunningTask = null;', 'pendingExchanges = 0;', 'if (entityManager == null) {', 'if (getEndpoint().isSharedEntityManager()) {', 'this.entityManager = SharedEntityManagerCreator.createSharedEntityManager(entityManagerFactory);', '} else {', 'this.entityManager = entityManagerFactory.createEntityManager();', '}']
['recreated entitymanager on ', ['entitymanager', 'this']]
camel sample_14097

['Object messagePolled = null;', 'try {', 'messagePolled = transactionTemplate.execute(new TransactionCallback<Object>() {', 'public Object doInTransaction(TransactionStatus status) {', 'if (getEndpoint().isJoinTransaction()) {', 'entityManager.joinTransaction();', '}', 'Queue<DataHolder> answer = new LinkedList<DataHolder>();', 'Query query = getQueryFactory().createQuery(entityManager);', 'configureParameters(query);']
['created query ', ['query']]
camel sample_14097

['try {', 'messagePolled = transactionTemplate.execute(new TransactionCallback<Object>() {', 'public Object doInTransaction(TransactionStatus status) {', 'if (getEndpoint().isJoinTransaction()) {', 'entityManager.joinTransaction();', '}', 'Queue<DataHolder> answer = new LinkedList<DataHolder>();', 'Query query = getQueryFactory().createQuery(entityManager);', 'configureParameters(query);', 'List<?> results = query.getResultList();']
['got result list from query ', ['results']]
camel sample_14097

['messagePolled = processBatch(CastUtils.cast(answer));', '} catch (Exception e) {', 'if (e instanceof PersistenceException) {', 'cause = (PersistenceException) e;', '} else {', 'cause = new PersistenceException(e);', '}', '}', 'if (cause != null) {', 'if (!isTransacted()) {']
['error processing last message due will commit all previous successful processed message and ignore this last failure ', ['cause', 'getmessage', 'cause']]
camel sample_14097

['} else {', 'cause = new PersistenceException(e);', '}', '}', 'if (cause != null) {', 'if (!isTransacted()) {', '} else {', 'throw cause;', '}', '}']
['flushing entitymanager ', []]
camel sample_14097

['} else {', 'throw cause;', '}', '}', 'entityManager.flush();', 'entityManager.clear();', 'return messagePolled;', '}', '});', '} catch (Exception e) {']
['disposing entitymanager on due to coming transaction rollback ', ['entitymanager', 'this']]
camel sample_14097

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {']
['limiting to maximum messages to poll as there were messages in this poll ', ['maxmessagesperpoll', 'total']]
camel sample_14097

['DataHolder holder = ObjectHelper.cast(DataHolder.class, exchanges.poll());', 'EntityManager entityManager = holder.manager;', 'Exchange exchange = holder.exchange;', 'Object result = holder.result;', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;', 'if (lockEntity(result, entityManager)) {', 'createPreDeleteHandler().deleteObject(entityManager, result, exchange);']
['processing exchange ', ['exchange']]
camel sample_14097

['protected boolean lockEntity(Object entity, EntityManager entityManager) {', 'if (!getEndpoint().isConsumeLockEntity()) {', 'return true;', '}', 'try {']
['acquiring exclusive lock on entity ', ['entity']]
camel sample_14097

['}', 'try {', 'if (isSkipLockedEntity()) {', 'entityManager.lock(entity, lockModeType, NOWAIT);', '} else {', 'entityManager.lock(entity, lockModeType);', '}', 'return true;', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['failed to achieve lock on entity reason ', ['entity', 'e', 'e']]
camel sample_14097

['protected void doStart() throws Exception {', 'if (getEndpoint().isSharedEntityManager()) {', 'this.entityManager = SharedEntityManagerCreator.createSharedEntityManager(entityManagerFactory);', '} else {', 'this.entityManager = entityManagerFactory.createEntityManager();', '}']
['created entitymanager on ', ['entitymanager', 'this']]
camel sample_14097

['protected void doShutdown() throws Exception {', 'if (entityManager != null) {', 'this.entityManager.close();']
['closed entitymanager on ', ['entitymanager', 'this']]
camel sample_14097

['public void testInvocation() throws Exception {', 'LoanBrokerWS loanBroker = Client.getProxy(url);', 'String result = loanBroker.getLoanQuote("SSN", 1000.54, 10);']
['result ', ['result']]
camel sample_17711

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastQueueComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-queue.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-queue.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_709

['protected RoutesBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['creating new test route ', []]
camel sample_12143

['public void test() throws Exception {', 'resultEndpoint.setMinimumExpectedMessageCount(1);', 'resultEndpoint.assertIsSatisfied();', 'String body = resultEndpoint.getExchanges().get(0).getIn().getBody(String.class);']
['received usernames ', ['body']]
camel sample_12143

['public void testList() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'final com.google.api.services.drive.model.PermissionList result = requestBody("direct: assertNotNull("list result", result);']
['list ', ['result']]
camel sample_15413

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JohnzonDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-johnzon.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.json-johnzon.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_436

['final Policy policy = transactedDefinition.resolvePolicy(routeContext);', 'if (policy != null) {', 'if (!(policy instanceof JtaTransactionPolicy)) {', 'throw new RuntimeCamelException("The configured policy \'" + policyRef + "\' is of type \'" + policyRef.getClass().getName() + "\' but an instance of \'" + JtaTransactionPolicy.class.getName() + "\' is required!");', '}', 'transactionPolicy = (JtaTransactionPolicy) policy;', '}', '}', '}', 'if (transactionPolicy == null) {']
['no transaction policy configured on transactionerrorhandlerbuilder will try find it in the registry ', []]
camel sample_9862

['transactionPolicy = (JtaTransactionPolicy) policy;', '}', '}', 'if (transactionPolicy == null) {', 'TransactedPolicy policy = routeContext.lookup(PROPAGATION_REQUIRED, TransactedPolicy.class);', 'if (policy instanceof JtaTransactionPolicy) {', 'transactionPolicy = (JtaTransactionPolicy) policy;', '}', '}', 'if (transactionPolicy != null) {']
['found transactionpolicy in registry to use ', ['transactionpolicy']]
camel sample_9862

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SparkComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spark.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spark.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_965

['public static boolean renameFile(File from, File to, boolean copyAndDeleteOnRenameFail) throws IOException {', 'if (!from.exists()) {', 'return false;', '}', 'boolean renamed = false;', 'int count = 0;', 'while (!renamed && count < 3) {', 'if (LOG.isDebugEnabled() && count > 0) {']
['retrying attempt to rename file from to ', ['new', 'object', 'count', 'from', 'to']]
camel sample_4303

['renamed = from.renameTo(to);', 'if (!renamed && count > 0) {', 'try {', 'Thread.sleep(1000);', '} catch (InterruptedException e) {', '}', '}', 'count++;', '}', 'if (!renamed && copyAndDeleteOnRenameFail) {']
['cannot rename file from to will now use a copy delete approach instead ', ['from', 'to']]
camel sample_4303

['Thread.sleep(1000);', '} catch (InterruptedException e) {', '}', '}', 'count++;', '}', 'if (!renamed && copyAndDeleteOnRenameFail) {', 'renamed = renameFileUsingCopy(from, to);', '}', 'if (LOG.isDebugEnabled() && count > 0) {']
['tried to rename file to with result ', ['new', 'object', 'count', 'from', 'to', 'renamed']]
camel sample_4303

['public static boolean renameFileUsingCopy(File from, File to) throws IOException {', 'if (!from.exists()) {', 'return false;', '}']
['rename file to using copy delete strategy ', ['from', 'to']]
camel sample_4303

['public static boolean deleteFile(File file) {', 'if (!file.exists()) {', 'return false;', '}', 'boolean deleted = false;', 'int count = 0;', 'while (!deleted && count < 3) {']
['retrying attempt to delete file ', ['count', 'file']]
camel sample_4303

['deleted = file.delete();', 'if (!deleted && count > 0) {', 'try {', 'Thread.sleep(1000);', '} catch (InterruptedException e) {', '}', '}', 'count++;', '}', 'if (LOG.isDebugEnabled() && count > 0) {']
['tried to delete file with result ', ['new', 'object', 'count', 'file', 'deleted']]
camel sample_4303

['public Output get(Input input) throws Exception {', 'XmlSignatureProperties.Output result = new Output();', 'if (!isAddSignedSignatureProperties() && !isAddSignedDataObjectPropeties()) {']
['xades signature properties are empty therefore no xades element will be added to the signature ', []]
camel sample_6781

['Document doc;', 'if (Node.DOCUMENT_NODE == parent.getNodeType()) {', 'doc = (Document) parent;', '} else {', 'doc = parent.getOwnerDocument();', '}', 'Element qualifyingProperties = createElement("QualifyingProperties", doc, input);', 'setIdAttributeFromHeader(XmlSignatureConstants.HEADER_XADES_QUALIFYING_PROPERTIES_ID, qualifyingProperties, input);', 'String signatureId = input.getSignatureId();', 'if (signatureId == null || signatureId.isEmpty()) {']
['no signature id configured therefore a value is generated ', []]
camel sample_6781

['protected void addSignedSignatureProperties(Document doc, Element signedProperties, Input input) throws Exception {', 'if (isAddSignedSignatureProperties()) {']
['adding signed signature properties ', []]
camel sample_6781

['protected void addSignatureProductionPlace(Document doc, Element signedSignatureProperties, Input input) {', 'if (!isAddSignatureProductionPlace()) {', 'return;', '}', 'Element signatureProductionPlace = createElement("SignatureProductionPlace", doc, input);', 'signedSignatureProperties.appendChild(signatureProductionPlace);', 'if (getSignatureProductionPlaceCity() != null && !getSignatureProductionPlaceCity().isEmpty()) {']
['adding production city ', []]
camel sample_6781

['return;', '}', 'Element signatureProductionPlace = createElement("SignatureProductionPlace", doc, input);', 'signedSignatureProperties.appendChild(signatureProductionPlace);', 'if (getSignatureProductionPlaceCity() != null && !getSignatureProductionPlaceCity().isEmpty()) {', 'Element city = createElement("City", doc, input);', 'signatureProductionPlace.appendChild(city);', 'city.setTextContent(getSignatureProductionPlaceCity());', '}', 'if (getSignatureProductionPlaceStateOrProvince() != null && !getSignatureProductionPlaceStateOrProvince().isEmpty()) {']
['adding production state or province ', []]
camel sample_6781

['Element city = createElement("City", doc, input);', 'signatureProductionPlace.appendChild(city);', 'city.setTextContent(getSignatureProductionPlaceCity());', '}', 'if (getSignatureProductionPlaceStateOrProvince() != null && !getSignatureProductionPlaceStateOrProvince().isEmpty()) {', 'Element stateOrProvince = createElement("StateOrProvince", doc, input);', 'signatureProductionPlace.appendChild(stateOrProvince);', 'stateOrProvince.setTextContent(getSignatureProductionPlaceStateOrProvince());', '}', 'if (getSignatureProductionPlacePostalCode() != null && !getSignatureProductionPlacePostalCode().isEmpty()) {']
['adding production postal code ', []]
camel sample_6781

['Element stateOrProvince = createElement("StateOrProvince", doc, input);', 'signatureProductionPlace.appendChild(stateOrProvince);', 'stateOrProvince.setTextContent(getSignatureProductionPlaceStateOrProvince());', '}', 'if (getSignatureProductionPlacePostalCode() != null && !getSignatureProductionPlacePostalCode().isEmpty()) {', 'Element postalCode = createElement("PostalCode", doc, input);', 'signatureProductionPlace.appendChild(postalCode);', 'postalCode.setTextContent(getSignatureProductionPlacePostalCode());', '}', 'if (getSignatureProductionPlaceCountryName() != null && !getSignatureProductionPlaceCountryName().isEmpty()) {']
['adding production country name ', []]
camel sample_6781

['protected void addSignerRole(Document doc, Element signedSignatureProperties, Input input) throws XmlSignatureException, SAXException, IOException, ParserConfigurationException {', 'if (!isAddSignerRole()) {', 'return;', '}', 'Element signerRole = createElement("SignerRole", doc, input);', 'signedSignatureProperties.appendChild(signerRole);', 'List<String> claimedRoles = getSignerClaimedRoles();', 'if (!claimedRoles.isEmpty()) {']
['adding claimed roles ', []]
camel sample_6781

['Element claimedRolesEl = createElement("ClaimedRoles", doc, input);', 'signerRole.appendChild(claimedRolesEl);', 'String errorMessage = "The XAdES confguration is invalid. The list of the claimed roles contains the invalid entry \'%s\'." + " An entry must either be a text or an XML fragment with the root element \'%s\' with the namespace \'%s\'.";', 'for (String claimedRole : claimedRoles) {', 'Element claimedRoleEl = createChildFromXmlFragmentOrText(doc, input, "ClaimedRole", errorMessage, claimedRole);', 'claimedRolesEl.appendChild(claimedRoleEl);', '}', '}', 'List<XAdESEncapsulatedPKIData> certifiedRoles = getSignerCertifiedRoles();', 'if (!certifiedRoles.isEmpty()) {']
['adding certified roles ', []]
camel sample_6781

['protected void addSignaturePolicyIdentifier(Document doc, Element signedProperties, Input input) throws XmlSignatureException, SAXException, IOException, ParserConfigurationException {', 'if (!isAddSignaturePolicy()) {', 'return;', '}', 'Element signaturePolicyIdentifier = createElement("SignaturePolicyIdentifier", doc, input);', 'signedProperties.appendChild(signaturePolicyIdentifier);', 'if (SIG_POLICY_IMPLIED.equals(getSignaturePolicy())) {']
['adding implied signature policy ', []]
camel sample_6781

['protected void addSignaturePolicyIdentifier(Document doc, Element signedProperties, Input input) throws XmlSignatureException, SAXException, IOException, ParserConfigurationException {', 'if (!isAddSignaturePolicy()) {', 'return;', '}', 'Element signaturePolicyIdentifier = createElement("SignaturePolicyIdentifier", doc, input);', 'signedProperties.appendChild(signaturePolicyIdentifier);', 'if (SIG_POLICY_IMPLIED.equals(getSignaturePolicy())) {', 'Element implied = createElement("SignaturePolicyImplied", doc, input);', 'signaturePolicyIdentifier.appendChild(implied);', '} else if (SIG_POLICY_EXPLICIT_ID.equals(getSignaturePolicy())) {']
['adding signatue policy id ', []]
camel sample_6781

['protected void addSigningCertificate(Document doc, Element signedProperties, Input input) throws Exception {', 'if (getSigningCertificate() == null && (getSigningCertificateChain() == null || getSigningCertificateChain().length == 0)) {', 'return;', '}', 'Element signedCertificate = createElement("SigningCertificate", doc, input);', 'signedProperties.appendChild(signedCertificate);', 'if (getSigningCertificate() != null) {']
['adding signing certificate ', []]
camel sample_6781

['}', 'Element signedCertificate = createElement("SigningCertificate", doc, input);', 'signedProperties.appendChild(signedCertificate);', 'if (getSigningCertificate() != null) {', 'X509Certificate cert = getSigningCertificate();', 'addCertificate(cert, signedCertificate, doc, 0, input);', '} else if (getSigningCertificateChain() != null && getSigningCertificateChain().length > 0) {', 'Certificate[] certs = getSigningCertificateChain();', 'int index = 0;', 'for (Certificate cert : certs) {']
['adding chain certtificate ', ['index']]
camel sample_6781

['protected void addSigningTime(Document doc, Element signedProperties, Input input) {', 'if (isAddSigningTime()) {']
['adding signing time ', []]
camel sample_6781

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'HttpRequest request = (HttpRequest) msg;']
['message received ', ['request']]
camel sample_16680

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'HttpRequest request = (HttpRequest) msg;', 'if (consumer.isSuspended()) {']
['consumer suspended cannot service request ', ['request']]
camel sample_16680

['boolean inRole = true;', 'if (principal != null) {', 'subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {']
['http basic auth required for resource ', ['url']]
camel sample_16680

['if (principal != null) {', 'subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {', '} else if (subject == null) {']
['http basic auth not authorized for username ', ['principal', 'getusername']]
camel sample_16680

['subject = authenticate(security.getSecurityAuthenticator(), security.getLoginDeniedLoggingLevel(), principal);', 'if (subject != null) {', 'String userRoles = security.getSecurityAuthenticator().getUserRoles(subject);', 'inRole = matchesRoles(roles, userRoles);', '}', '}', 'if (principal == null || subject == null || !inRole) {', 'if (principal == null) {', '} else if (subject == null) {', '} else {']
['http basic auth not in role for username ', ['principal', 'getusername']]
camel sample_16680

['} else {', '}', 'HttpResponse response = new DefaultHttpResponse(HTTP_1_1, UNAUTHORIZED);', 'response.headers().set("WWW-Authenticate", "Basic realm=\\"" + security.getRealm() + "\\"");', 'response.headers().set(Exchange.CONTENT_TYPE, "text/plain");', 'response.headers().set(Exchange.CONTENT_LENGTH, 0);', 'ctx.writeAndFlush(response);', 'ctx.channel().close();', 'return;', '} else {']
['http basic auth authorized for username ', ['principal', 'getusername']]
camel sample_16680

['if (constraint != null) {', 'if ("Basic".equalsIgnoreCase(constraint.trim())) {', 'String decoded = ObjectHelper.after(auth, " ");', 'ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes());', 'ByteBuf out = Base64.decode(buf);', 'try {', 'String userAndPw = out.toString(Charset.defaultCharset());', 'String username = ObjectHelper.before(userAndPw, ":");', 'String password = ObjectHelper.after(userAndPw, ":");', 'HttpPrincipal principal = new HttpPrincipal(username, password);']
['extracted basic auth principal from http header ', ['principal']]
camel sample_16680

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (consumer.isRunAllowed()) {', 'if (cause instanceof ClosedChannelException) {']
['channel already closed ignoring this exception ', []]
camel sample_16680

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'if (consumer.isRunAllowed()) {', 'if (cause instanceof ClosedChannelException) {', '} else {']
['closing channel as an exception was thrown from netty ', ['cause']]
camel sample_16680

['protected void onFullBinaryMessage(final WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {']
['onfullbinarymessage ', []]
camel sample_13178

['for (ByteBuffer buffer : buffers) {', 'int increment = buffer.remaining();', 'buffer.get(bytes, offset, increment);', 'offset += increment;', '}', 'synchronized (consumerLock) {', 'if (consumer != null) {', 'final Object outMsg = consumer.getEndpoint().isUseStreaming() ? new ByteArrayInputStream(bytes) : bytes;', 'consumer.sendMessage(connectionKey, outMsg);', '} else {']
['no consumer to handle message received ', ['message']]
camel sample_13178

['protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage message) {', 'final String text = message.getData();']
['onfulltextmessage ', ['text']]
camel sample_13178

['final String text = message.getData();', 'final String connectionKey = (String) channel.getAttribute(UndertowConstants.CONNECTION_KEY);', 'if (connectionKey == null) {', 'throw new RuntimeCamelException(UndertowConstants.CONNECTION_KEY + " attribute not found on " + WebSocketChannel.class.getSimpleName() + " " + channel);', '}', 'synchronized (consumerLock) {', 'if (consumer != null) {', 'final Object outMsg = consumer.getEndpoint().isUseStreaming() ? new StringReader(text) : text;', 'consumer.sendMessage(connectionKey, outMsg);', '} else {']
['no consumer to handle message received ', ['message']]
camel sample_13178

['public void onConnect(WebSocketHttpExchange exchange, WebSocketChannel channel) {']
['onconnect ', ['exchange']]
camel sample_13178

['public void testVertxMessages() throws Exception {', 'resultEndpoint = context.getEndpoint(resultUri, MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceivedInAnyOrder(body1, body2);', 'template.sendBody(startUri, body1);', 'template.sendBody(startUri, body2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_11515

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['direct foo foo got body mock foo ', ['routeid', 'log', 'logginglevel', 'info', 'to']]
camel sample_2668

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['direct bar bar org apache camel customlogger also got body mock bar ', ['routeid', 'log', 'logginglevel', 'info', 'loggerfactory', 'getlogger', 'to']]
camel sample_2668

['public RouteBuilder route() {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'Assert.hasLength(uri);']
['cm component is an uri based component cm uri ', ['uri']]
camel sample_12769

['protected void assertChildTo(String message, ProcessorDefinition<?> route, String uri) {', 'ProcessorDefinition<?> processor = assertOneElement(route.getOutputs());', 'ToDefinition value = assertIsInstanceOf(ToDefinition.class, processor);', 'String text = message + "To URI";']
['testing is equal to for processor ', ['text', 'uri', 'processor']]
camel sample_3700

['protected void assertTo(String message, ProcessorDefinition<?> processor, String uri) {', 'ToDefinition value = assertIsInstanceOf(ToDefinition.class, processor);', 'String text = message + "To URI";']
['testing is equal to for processor ', ['text', 'uri', 'processor']]
camel sample_3700

['public void testRouteAddSecondRoute() throws Exception {', 'if (isPlatform("aix")) {', 'return;', '}', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName route1 = ObjectName.getInstance("org.apache.camel:context=camel-1,type=routes,name=\\"foo\\"");', 'String state = (String) mbeanServer.getAttribute(route1, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);']
['adding route ', []]
camel sample_2812

['}', 'MBeanServer mbeanServer = getMBeanServer();', 'ObjectName route1 = ObjectName.getInstance("org.apache.camel:context=camel-1,type=routes,name=\\"foo\\"");', 'String state = (String) mbeanServer.getAttribute(route1, "State");', 'assertEquals("Should be started", ServiceStatus.Started.name(), state);', 'context.addRoutes(new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:bar").routeId("bar").to("mock:bar");', '}', '});']
['adding route done ', []]
camel sample_2812

['public void onMessage(String body) {']
['received ', ['body']]
camel sample_6152

['public synchronized boolean connect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {', 'if (isConnected()) {', 'return true;', '}', 'boolean connected = false;', 'int attempt = 0;', 'while (!connected) {', 'try {', 'if (LOG.isTraceEnabled() && attempt > 0) {']
['reconnect attempt connecting to ', ['attempt', 'configuration', 'remoteserverinformation']]
camel sample_15385

['return true;', '}', 'boolean connected = false;', 'int attempt = 0;', 'while (!connected) {', 'try {', 'if (LOG.isTraceEnabled() && attempt > 0) {', '}', 'if (channel == null || !channel.isConnected()) {', 'if (session == null || !session.isConnected()) {']
['session isn t connected trying to recreate and connect ', []]
camel sample_15385

['boolean connected = false;', 'int attempt = 0;', 'while (!connected) {', 'try {', 'if (LOG.isTraceEnabled() && attempt > 0) {', '}', 'if (channel == null || !channel.isConnected()) {', 'if (session == null || !session.isConnected()) {', 'session = createSession(configuration);', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {']
['connecting use connecttimeout ', ['endpoint', 'getconfiguration', 'getconnecttimeout']]
camel sample_15385

['while (!connected) {', 'try {', 'if (LOG.isTraceEnabled() && attempt > 0) {', '}', 'if (channel == null || !channel.isConnected()) {', 'if (session == null || !session.isConnected()) {', 'session = createSession(configuration);', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'session.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {']
['connecting ', []]
camel sample_15385

['}', 'if (channel == null || !channel.isConnected()) {', 'if (session == null || !session.isConnected()) {', 'session = createSession(configuration);', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'session.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {', 'session.connect();', '}', '}']
['channel isn t connected trying to recreate and connect ', []]
camel sample_15385

['if (session == null || !session.isConnected()) {', 'session = createSession(configuration);', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'session.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {', 'session.connect();', '}', '}', 'channel = (ChannelSftp) session.openChannel("sftp");', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {']
['connecting use connecttimeout ', ['endpoint', 'getconfiguration', 'getconnecttimeout']]
camel sample_15385

['if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'session.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {', 'session.connect();', '}', '}', 'channel = (ChannelSftp) session.openChannel("sftp");', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'channel.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {']
['connecting ', []]
camel sample_15385

['} else {', 'session.connect();', '}', '}', 'channel = (ChannelSftp) session.openChannel("sftp");', 'if (endpoint.getConfiguration().getConnectTimeout() > 0) {', 'channel.connect(endpoint.getConfiguration().getConnectTimeout());', '} else {', 'channel.connect();', '}']
['connected to ', ['configuration', 'remoteserverinformation']]
camel sample_15385

['} else {', 'channel.connect();', '}', '}', 'connected = true;', '} catch (Exception e) {', 'if (Thread.currentThread().isInterrupted()) {', 'throw new GenericFileOperationFailedException("Interrupted during connecting", new InterruptedException("Interrupted during connecting"));', '}', 'GenericFileOperationFailedException failed = new GenericFileOperationFailedException("Cannot connect to " + configuration.remoteServerInformation(), e);']
['cannot connect due ', ['failed', 'getmessage']]
camel sample_15385

['private void tryConfigureBulkRequests() throws JSchException {', 'Integer bulkRequests = endpoint.getConfiguration().getBulkRequests();', 'if (bulkRequests != null) {']
['configuring channel to use up to bulk request s ', ['bulkrequests']]
camel sample_15385

['protected Session createSession(final RemoteFileConfiguration configuration) throws JSchException {', 'final JSch jsch = new JSch();', 'JSch.setLogger(new JSchLogger(endpoint.getConfiguration().getJschLoggingLevel()));', 'SftpConfiguration sftpConfig = (SftpConfiguration) configuration;', 'if (isNotEmpty(sftpConfig.getCiphers())) {']
['using ciphers ', ['sftpconfig', 'getciphers']]
camel sample_15385

['final JSch jsch = new JSch();', 'JSch.setLogger(new JSchLogger(endpoint.getConfiguration().getJschLoggingLevel()));', 'SftpConfiguration sftpConfig = (SftpConfiguration) configuration;', 'if (isNotEmpty(sftpConfig.getCiphers())) {', 'Hashtable<String, String> ciphers = new Hashtable<String, String>();', 'ciphers.put("cipher.s2c", sftpConfig.getCiphers());', 'ciphers.put("cipher.c2s", sftpConfig.getCiphers());', 'JSch.setConfig(ciphers);', '}', 'if (isNotEmpty(sftpConfig.getPrivateKeyFile())) {']
['using private keyfile ', ['sftpconfig', 'getprivatekeyfile']]
camel sample_15385

['JSch.setConfig(ciphers);', '}', 'if (isNotEmpty(sftpConfig.getPrivateKeyFile())) {', 'if (isNotEmpty(sftpConfig.getPrivateKeyPassphrase())) {', 'jsch.addIdentity(sftpConfig.getPrivateKeyFile(), sftpConfig.getPrivateKeyPassphrase());', '} else {', 'jsch.addIdentity(sftpConfig.getPrivateKeyFile());', '}', '}', 'if (sftpConfig.getPrivateKey() != null) {']
['using private key information from byte array ', []]
camel sample_15385

['if (isNotEmpty(sftpConfig.getPrivateKeyPassphrase())) {', 'try {', 'passphrase = sftpConfig.getPrivateKeyPassphrase().getBytes("UTF-8");', '} catch (UnsupportedEncodingException e) {', 'throw new JSchException("Cannot transform passphrase to byte[]", e);', '}', '}', 'jsch.addIdentity("ID", sftpConfig.getPrivateKey(), null, passphrase);', '}', 'if (sftpConfig.getPrivateKeyUri() != null) {']
['using private key uri ', ['sftpconfig', 'getprivatekeyuri']]
camel sample_15385

['try {', 'InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(endpoint.getCamelContext(), sftpConfig.getPrivateKeyUri());', 'ByteArrayOutputStream bos = new ByteArrayOutputStream();', 'IOHelper.copyAndCloseInput(is, bos);', 'jsch.addIdentity("ID", bos.toByteArray(), null, passphrase);', '} catch (IOException e) {', 'throw new JSchException("Cannot read resource: " + sftpConfig.getPrivateKeyUri(), e);', '}', '}', 'if (sftpConfig.getKeyPair() != null) {']
['using private key information from key pair ', []]
camel sample_15385

['}', '}', 'if (sftpConfig.getKeyPair() != null) {', 'KeyPair keyPair = sftpConfig.getKeyPair();', 'if (keyPair.getPrivate() != null && keyPair.getPublic() != null) {', 'if (keyPair.getPrivate() instanceof RSAPrivateKey && keyPair.getPublic() instanceof RSAPublicKey) {', 'jsch.addIdentity(new RSAKeyPairIdentity("ID", keyPair), null);', '} else if (keyPair.getPrivate() instanceof DSAPrivateKey && keyPair.getPublic() instanceof DSAPublicKey) {', 'jsch.addIdentity(new DSAKeyPairIdentity("ID", keyPair), null);', '} else {']
['only rsa and dsa key pairs are supported ', []]
camel sample_15385

['if (sftpConfig.getKeyPair() != null) {', 'KeyPair keyPair = sftpConfig.getKeyPair();', 'if (keyPair.getPrivate() != null && keyPair.getPublic() != null) {', 'if (keyPair.getPrivate() instanceof RSAPrivateKey && keyPair.getPublic() instanceof RSAPublicKey) {', 'jsch.addIdentity(new RSAKeyPairIdentity("ID", keyPair), null);', '} else if (keyPair.getPrivate() instanceof DSAPrivateKey && keyPair.getPublic() instanceof DSAPublicKey) {', 'jsch.addIdentity(new DSAKeyPairIdentity("ID", keyPair), null);', '} else {', '}', '} else {']
['privatekey and publickey in the keypair must be filled ', []]
camel sample_15385

['if (keyPair.getPrivate() instanceof RSAPrivateKey && keyPair.getPublic() instanceof RSAPublicKey) {', 'jsch.addIdentity(new RSAKeyPairIdentity("ID", keyPair), null);', '} else if (keyPair.getPrivate() instanceof DSAPrivateKey && keyPair.getPublic() instanceof DSAPublicKey) {', 'jsch.addIdentity(new DSAKeyPairIdentity("ID", keyPair), null);', '} else {', '}', '} else {', '}', '}', 'if (isNotEmpty(sftpConfig.getKnownHostsFile())) {']
['using knownhosts file ', ['sftpconfig', 'getknownhostsfile']]
camel sample_15385

['jsch.addIdentity(new DSAKeyPairIdentity("ID", keyPair), null);', '} else {', '}', '} else {', '}', '}', 'if (isNotEmpty(sftpConfig.getKnownHostsFile())) {', 'jsch.setKnownHosts(sftpConfig.getKnownHostsFile());', '}', 'if (isNotEmpty(sftpConfig.getKnownHostsUri())) {']
['using known hosts uri ', ['sftpconfig', 'getknownhostsuri']]
camel sample_15385

['}', 'if (isNotEmpty(sftpConfig.getKnownHostsUri())) {', 'try {', 'InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(endpoint.getCamelContext(), sftpConfig.getKnownHostsUri());', 'jsch.setKnownHosts(is);', '} catch (IOException e) {', 'throw new JSchException("Cannot read resource: " + sftpConfig.getKnownHostsUri(), e);', '}', '}', 'if (sftpConfig.getKnownHosts() != null) {']
['using known hosts information from byte array ', []]
camel sample_15385

['} catch (IOException e) {', 'throw new JSchException("Cannot read resource: " + sftpConfig.getKnownHostsUri(), e);', '}', '}', 'if (sftpConfig.getKnownHosts() != null) {', 'jsch.setKnownHosts(new ByteArrayInputStream(sftpConfig.getKnownHosts()));', '}', 'String knownHostsFile = sftpConfig.getKnownHostsFile();', 'if (knownHostsFile == null && sftpConfig.isUseUserKnownHostsFile()) {', 'knownHostsFile = System.getProperty("user.home") + "/.ssh/known_hosts";']
['known host file not configured using user known host file ', ['knownhostsfile']]
camel sample_15385

['}', '}', 'if (sftpConfig.getKnownHosts() != null) {', 'jsch.setKnownHosts(new ByteArrayInputStream(sftpConfig.getKnownHosts()));', '}', 'String knownHostsFile = sftpConfig.getKnownHostsFile();', 'if (knownHostsFile == null && sftpConfig.isUseUserKnownHostsFile()) {', 'knownHostsFile = System.getProperty("user.home") + "/.ssh/known_hosts";', '}', 'if (ObjectHelper.isNotEmpty(knownHostsFile)) {']
['using known hosts information from file ', ['knownhostsfile']]
camel sample_15385

['}', 'String knownHostsFile = sftpConfig.getKnownHostsFile();', 'if (knownHostsFile == null && sftpConfig.isUseUserKnownHostsFile()) {', 'knownHostsFile = System.getProperty("user.home") + "/.ssh/known_hosts";', '}', 'if (ObjectHelper.isNotEmpty(knownHostsFile)) {', 'jsch.setKnownHosts(knownHostsFile);', '}', 'final Session session = jsch.getSession(configuration.getUsername(), configuration.getHost(), configuration.getPort());', 'if (isNotEmpty(sftpConfig.getStrictHostKeyChecking())) {']
['using strickhostkeychecking ', ['sftpconfig', 'getstricthostkeychecking']]
camel sample_15385

['if (ObjectHelper.isNotEmpty(knownHostsFile)) {', 'jsch.setKnownHosts(knownHostsFile);', '}', 'final Session session = jsch.getSession(configuration.getUsername(), configuration.getHost(), configuration.getPort());', 'if (isNotEmpty(sftpConfig.getStrictHostKeyChecking())) {', 'session.setConfig("StrictHostKeyChecking", sftpConfig.getStrictHostKeyChecking());', '}', 'session.setServerAliveInterval(sftpConfig.getServerAliveInterval());', 'session.setServerAliveCountMax(sftpConfig.getServerAliveCountMax());', 'if (sftpConfig.getCompression() > 0) {']
['using compression ', ['sftpconfig', 'getcompression']]
camel sample_15385

['session.setConfig("StrictHostKeyChecking", sftpConfig.getStrictHostKeyChecking());', '}', 'session.setServerAliveInterval(sftpConfig.getServerAliveInterval());', 'session.setServerAliveCountMax(sftpConfig.getServerAliveCountMax());', 'if (sftpConfig.getCompression() > 0) {', 'session.setConfig("compression.s2c", "zlib@openssh.com,zlib,none");', 'session.setConfig("compression.c2s", "zlib@openssh.com,zlib,none");', 'session.setConfig("compression_level", Integer.toString(sftpConfig.getCompression()));', '}', 'if (sftpConfig.getPreferredAuthentications() != null) {']
['using preferredauthentications ', ['sftpconfig', 'getpreferredauthentications']]
camel sample_15385

['public String getPassword() {', 'return configuration.getPassword();', '}', 'public boolean promptPassword(String s) {', 'return true;', '}', 'public boolean promptPassphrase(String s) {', 'return true;', '}', 'public boolean promptYesNo(String s) {']
['server asks for confirmation yes no camel will answer no ', ['s']]
camel sample_15385

['public boolean promptPassword(String s) {', 'return true;', '}', 'public boolean promptPassphrase(String s) {', 'return true;', '}', 'public boolean promptYesNo(String s) {', 'return false;', '}', 'public void showMessage(String s) {']
['message received from server ', ['s']]
camel sample_15385

['public synchronized boolean deleteFile(String name) throws GenericFileOperationFailedException {']
['deleting file ', ['name']]
camel sample_15385

['public synchronized boolean deleteFile(String name) throws GenericFileOperationFailedException {', 'try {', 'reconnectIfNecessary();', 'channel.rm(name);', 'return true;', '} catch (SftpException e) {']
['cannot delete file ', ['name', 'e']]
camel sample_15385

['public synchronized boolean renameFile(String from, String to) throws GenericFileOperationFailedException {']
['renaming file to ', ['from', 'to']]
camel sample_15385

['public synchronized boolean renameFile(String from, String to) throws GenericFileOperationFailedException {', 'try {', 'reconnectIfNecessary();', "to = FileUtil.compactPath(to, '/');", 'channel.rename(from, to);', 'return true;', '} catch (SftpException e) {']
['cannot rename file from to ', ['from', 'to', 'e']]
camel sample_15385

['public synchronized boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {', 'directory = endpoint.getConfiguration().normalizePath(directory);']
['builddirectory ', ['directory', 'absolute']]
camel sample_15385

['directory = endpoint.getConfiguration().normalizePath(directory);', 'boolean success = false;', 'String originalDirectory = getCurrentDirectory();', 'try {', 'try {', 'channel.cd(directory);', 'success = true;', '} catch (SftpException e) {', '}', 'if (!success) {']
['trying to build remote directory ', ['directory']]
camel sample_15385

['for (String dir : dirs) {', 'if (first) {', 'first = false;', '} else {', "sb.append('/');", '}', 'sb.append(dir);', 'String directory = endpoint.getConfiguration().normalizePath(sb.toString());', 'if (!(directory.equals("/") || directory.equals("\\\\"))) {', 'try {']
['trying to build remote directory by chunk ', ['directory']]
camel sample_15385

['public synchronized String getCurrentDirectory() throws GenericFileOperationFailedException {']
['getcurrentdirectory ', []]
camel sample_15385

['public synchronized String getCurrentDirectory() throws GenericFileOperationFailedException {', 'try {', 'String answer = channel.pwd();']
['current dir ', ['answer']]
camel sample_15385

['public synchronized void changeCurrentDirectory(String path) throws GenericFileOperationFailedException {']
['changecurrentdirectory ', ['path']]
camel sample_15385

['public synchronized void changeCurrentDirectory(String path) throws GenericFileOperationFailedException {', 'if (ObjectHelper.isEmpty(path)) {', 'return;', '}', 'String before = path;', "char separatorChar = '/';", 'path = FileUtil.compactPath(path, separatorChar);', 'if (LOG.isTraceEnabled()) {']
['compacted path using separator ', ['new', 'object', 'before', 'path', 'separatorchar']]
camel sample_15385

['private void doChangeDirectory(String path) {', 'if (path == null || ".".equals(path) || ObjectHelper.isEmpty(path)) {', 'return;', '}']
['changing directory ', ['path']]
camel sample_15385

['public synchronized void changeToParentDirectory() throws GenericFileOperationFailedException {']
['changetoparentdirectory ', []]
camel sample_15385

['public synchronized List<SftpRemoteFile> listFiles(String path) throws GenericFileOperationFailedException {']
['listfiles ', ['path']]
camel sample_15385

['public synchronized boolean retrieveFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {']
['retrievefile ', ['name']]
camel sample_15385

['if (endpoint.getConfiguration().isStepwise()) {', 'currentDir = getCurrentDirectory();', 'String path = FileUtil.onlyPath(name);', 'if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}', 'channel.get(remoteName, os);', '} catch (SftpException e) {']
['error occurred during retrieving file to local directory deleting local work file ', ['name', 'temp']]
camel sample_15385

['if (path != null) {', 'changeCurrentDirectory(path);', '}', 'remoteName = FileUtil.stripPath(name);', '}', 'channel.get(remoteName, os);', '} catch (SftpException e) {', 'IOHelper.close(os, "retrieve: " + name, LOG);', 'boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {']
['error occurred during retrieving file to local directory cannot delete local work file ', ['name', 'temp']]
camel sample_15385

['boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {', '}', 'throw new GenericFileOperationFailedException("Cannot retrieve file: " + name, e);', '} finally {', 'IOHelper.close(os, "retrieve: " + name, LOG);', 'if (currentDir != null) {', 'changeCurrentDirectory(currentDir);', '}', '}']
['retrieve file to local work file result true ', []]
camel sample_15385

['boolean deleted = FileUtil.deleteFile(temp);', 'if (!deleted) {', '}', 'throw new GenericFileOperationFailedException("Cannot retrieve file: " + name, e);', '} finally {', 'IOHelper.close(os, "retrieve: " + name, LOG);', 'if (currentDir != null) {', 'changeCurrentDirectory(currentDir);', '}', '}']
['renaming local in progress file from to ', ['temp', 'local']]
camel sample_15385

['public synchronized boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {', 'name = endpoint.getConfiguration().normalizePath(name);']
['storefile ', ['name']]
camel sample_15385

['private boolean doStoreFile(String name, String targetName, Exchange exchange) throws GenericFileOperationFailedException {']
['dostorefile ', ['targetname']]
camel sample_15385

['private boolean doStoreFile(String name, String targetName, Exchange exchange) throws GenericFileOperationFailedException {', 'if (endpoint.getFileExist() == GenericFileExist.Ignore || endpoint.getFileExist() == GenericFileExist.Fail || endpoint.getFileExist() == GenericFileExist.Move) {', 'boolean existFile = existsFile(targetName);', 'if (existFile && endpoint.getFileExist() == GenericFileExist.Ignore) {']
['an existing file already exists ignore and do not override it ', ['name']]
camel sample_15385

['return true;', '} else if (existFile && endpoint.getFileExist() == GenericFileExist.Fail) {', 'throw new GenericFileOperationFailedException("File already exist: " + name + ". Cannot write new file.");', '} else if (existFile && endpoint.getFileExist() == GenericFileExist.Move) {', 'doMoveExistingFile(name, targetName);', '}', '}', 'InputStream is = null;', 'if (exchange.getIn().getBody() == null) {', 'if (endpoint.isAllowNullBody()) {']
['writing empty file ', []]
camel sample_15385

['is = new ByteArrayInputStream(new byte[]{});', '} else {', 'throw new GenericFileOperationFailedException("Cannot write null body to file: " + name);', '}', '}', 'try {', 'if (is == null) {', 'String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));']
['using inputstream with charset ', ['is', 'charset']]
camel sample_15385

['try {', 'if (is == null) {', 'String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();']
['about to store file using stream ', ['targetname', 'is']]
camel sample_15385

['if (is == null) {', 'String charset = endpoint.getCharset();', 'if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();', 'if (endpoint.getFileExist() == GenericFileExist.Append) {']
['client appendfile ', ['targetname']]
camel sample_15385

['if (charset != null) {', 'is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));', '} else {', 'is = exchange.getIn().getMandatoryBody(InputStream.class);', '}', '}', 'final StopWatch watch = new StopWatch();', 'if (endpoint.getFileExist() == GenericFileExist.Append) {', 'channel.put(is, targetName, ChannelSftp.APPEND);', '} else {']
['client storefile ', ['targetname']]
camel sample_15385

['}', '}', 'final StopWatch watch = new StopWatch();', 'if (endpoint.getFileExist() == GenericFileExist.Append) {', 'channel.put(is, targetName, ChannelSftp.APPEND);', '} else {', 'channel.put(is, targetName);', '}', 'if (LOG.isDebugEnabled()) {', 'long time = watch.taken();']
['took millis to store file and ftp client returned true ', ['new', 'object', 'timeutils', 'printduration', 'time', 'time', 'targetname']]
camel sample_15385

['channel.put(is, targetName, ChannelSftp.APPEND);', '} else {', 'channel.put(is, targetName);', '}', 'if (LOG.isDebugEnabled()) {', 'long time = watch.taken();', '}', 'String mode = endpoint.getConfiguration().getChmod();', 'if (ObjectHelper.isNotEmpty(mode)) {', 'int permissions = Integer.parseInt(mode, 8);']
['setting chmod on file ', ['mode', 'targetname']]
camel sample_15385

['to = endpoint.getConfiguration().normalizePath(to);', 'if (ObjectHelper.isEmpty(to)) {', 'throw new GenericFileOperationFailedException("moveExisting evaluated as empty String, cannot move existing file: " + name);', '}', 'String dir = FileUtil.onlyPath(to);', 'if (dir != null) {', 'buildDirectory(dir, false);', '}', 'if (existsFile(to)) {', 'if (endpoint.isEagerDeleteTargetFile()) {']
['deleting existing file ', ['to']]
camel sample_15385

['if (dir != null) {', 'buildDirectory(dir, false);', '}', 'if (existsFile(to)) {', 'if (endpoint.isEagerDeleteTargetFile()) {', 'deleteFile(to);', '} else {', 'throw new GenericFileOperationFailedException("Cannot moved existing file from: " + name + " to: " + to + " as there already exists a file: " + to);', '}', '}']
['moving existing file to ', ['name', 'to']]
camel sample_15385

['public synchronized boolean existsFile(String name) throws GenericFileOperationFailedException {']
['existsfile ', ['name']]
camel sample_15385

['}', 'String onlyName = FileUtil.stripPath(name);', 'try {', 'Vector files = channel.ls(directory);', 'if (files == null) {', 'return false;', '}', 'for (Object file : files) {', 'ChannelSftp.LsEntry entry = (ChannelSftp.LsEntry) file;', 'String existing = entry.getFilename();']
['existing file target file ', ['existing', 'name']]
camel sample_15385

['protected boolean fastExistsFile(String name) throws GenericFileOperationFailedException {']
['fastexistsfile ', ['name']]
camel sample_15385

['public synchronized boolean sendNoop() throws GenericFileOperationFailedException {', 'if (isConnected()) {', 'try {', 'session.sendKeepAliveMsg();', 'return true;', '} catch (Exception e) {']
['sftp session was closed ignoring this exception ', ['e']]
camel sample_15385

['StringWriter buffer = new StringWriter();', 'Map<String, Object> variableMap = exchange.getIn().getHeader(StringTemplateConstants.STRINGTEMPLATE_VARIABLE_MAP, Map.class);', 'if (variableMap == null) {', 'variableMap = ExchangeHelper.createVariableMap(exchange);', '}', 'String text = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, getResourceAsInputStream());', 'ST template = new ST(text, delimiterStart, delimiterStop);', 'for (Map.Entry<String, Object> entry : variableMap.entrySet()) {', 'template.add(entry.getKey(), entry.getValue());', '}']
['stringtemplate is writing using attributes ', ['variablemap']]
camel sample_12440

['public void onDisconnected() {']
['server ondisconnected ', ['server']]
camel sample_12155

['public void onRegistered() {']
['server onregistered ', ['server']]
camel sample_12155

['public void init(final ServletConfig config) throws ServletException {', 'super.init(config);', 'Map<String, Object> parameters = new HashMap<String, Object>();', 'Enumeration en = config.getInitParameterNames();', 'while (en.hasMoreElements()) {', 'String name = (String) en.nextElement();', 'Object value = config.getInitParameter(name);', 'parameters.put(name, value);', '}', 'if (parameters.get("cors") != null) {']
['use restswaggercorsfilter when uisng this servlet to enable cors ', []]
camel sample_17357

['boolean match = false;', 'if (name != null) {', 'match = true;', 'if (apiContextIdPattern != null) {', 'if ("#name#".equals(apiContextIdPattern)) {', 'match = true;', '} else {', 'match = EndpointHelper.matchPattern(name, apiContextIdPattern);', '}', 'if (LOG.isDebugEnabled()) {']
['match contextid with pattern ', ['new', 'object', 'name', 'apicontextidpattern', 'match']]
camel sample_17357

['}', '}', '}', 'if (!match) {', 'adapter.noContent();', '} else {', 'support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, classResolver, null);', '}', '}', '} catch (Exception e) {']
['error rendering swagger api due ', ['e', 'getmessage', 'e']]
camel sample_17357

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'LoggingLevel level = getLoggingLevel(parameters);', 'Logger providedLogger = getLogger(parameters);', 'if (providedLogger == null) {', 'Map<String, Logger> availableLoggers = getCamelContext().getRegistry().findByTypeWithName(Logger.class);', 'if (availableLoggers.size() == 1) {', 'providedLogger = availableLoggers.values().iterator().next();']
['using custom logger ', ['providedlogger']]
camel sample_4929

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'LoggingLevel level = getLoggingLevel(parameters);', 'Logger providedLogger = getLogger(parameters);', 'if (providedLogger == null) {', 'Map<String, Logger> availableLoggers = getCamelContext().getRegistry().findByTypeWithName(Logger.class);', 'if (availableLoggers.size() == 1) {', 'providedLogger = availableLoggers.values().iterator().next();', '} else if (availableLoggers.size() > 1) {']
['more than one instance found in the registry falling back to creating logger from uri ', ['logger', 'class', 'getname', 'uri']]
camel sample_4929

['public Object populateCxfRsResponseFromExchange(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) throws Exception {', 'if (camelExchange.isFailed() && camelExchange.getException() != null) {', 'throw camelExchange.getException();', '}', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();']
['get the response from the out message ', []]
camel sample_8009

['public Object populateCxfRsResponseFromExchange(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) throws Exception {', 'if (camelExchange.isFailed() && camelExchange.getException() != null) {', 'throw camelExchange.getException();', '}', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();', '} else {', 'response = camelExchange.getIn();']
['get the response from the in message as a fallback ', []]
camel sample_8009

['}', 'org.apache.camel.Message response;', 'if (camelExchange.getPattern().isOutCapable()) {', 'if (camelExchange.hasOut()) {', 'response = camelExchange.getOut();', '} else {', 'response = camelExchange.getIn();', '}', '} else {', 'response = camelExchange.getIn();']
['get the response from the in message ', []]
camel sample_8009

['public HttpClient createHttpClient() {', 'ObjectHelper.notNull(clientParams, "clientParams");', 'ObjectHelper.notNull(httpConnectionManager, "httpConnectionManager");', 'HttpClient answer = new HttpClient(getClientParams());', 'if (ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyPort"))) {', 'String host = getCamelContext().getProperty("http.proxyHost");', 'int port = Integer.parseInt(getCamelContext().getProperty("http.proxyPort"));']
['camelcontext properties http proxyhost and http proxyport detected using http proxy host port ', ['host', 'port']]
camel sample_12856

['public HttpClient createHttpClient() {', 'ObjectHelper.notNull(clientParams, "clientParams");', 'ObjectHelper.notNull(httpConnectionManager, "httpConnectionManager");', 'HttpClient answer = new HttpClient(getClientParams());', 'if (ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyPort"))) {', 'String host = getCamelContext().getProperty("http.proxyHost");', 'int port = Integer.parseInt(getCamelContext().getProperty("http.proxyPort"));', 'answer.getHostConfiguration().setProxy(host, port);', '}', 'if (getProxyHost() != null) {']
['using proxy ', ['getproxyhost', 'getproxyport']]
camel sample_12856

['if (getAuthMethodPriority() != null) {', 'List<String> authPrefs = new ArrayList<String>();', 'Iterator<?> it = getCamelContext().getTypeConverter().convertTo(Iterator.class, getAuthMethodPriority());', 'int i = 1;', 'while (it.hasNext()) {', 'Object value = it.next();', 'AuthMethod auth = getCamelContext().getTypeConverter().convertTo(AuthMethod.class, value);', 'if (auth == null) {', 'throw new IllegalArgumentException("Unknown authMethod: " + value + " in authMethodPriority: " + getAuthMethodPriority());', '}']
['using authschemepriority ', ['i', 'auth']]
camel sample_12856

['private void processExchangeForUser(String user, Exchange exchange) throws Exception {', 'String urlPath = String.format(getMostRecentMessageUrl(), user);']
['polling hipchat api for new messages at UTC ', ['urlpath', 'calendar', 'getinstance', 'timezone', 'gettimezone', 'gettime']]
camel sample_11329

['private void processApiResponse(Exchange exchange, CloseableHttpResponse response) throws Exception {', 'try {', 'Map<String, Object> jsonMap = MAPPER.readValue(response.getEntity().getContent(), MAP_TYPE);']
['hipchat response json ', ['response', 'mapper', 'writevalueasstring', 'jsonmap']]
camel sample_11329

['private void processApiResponse(Exchange exchange, CloseableHttpResponse response) throws Exception {', 'try {', 'Map<String, Object> jsonMap = MAPPER.readValue(response.getEntity().getContent(), MAP_TYPE);', 'if (jsonMap != null && jsonMap.size() > 0) {', 'List<Map<String, Object>> items = (List<Map<String, Object>>) jsonMap.get(HipchatApiConstants.API_ITEMS);', 'if (items != null && items.size() > 0) {', 'try {', 'Map<String, Object> item = items.get(0);', 'String date = (String) item.get(HipchatApiConstants.API_DATE);', 'String message = (String) item.get(HipchatApiConstants.API_MESSAGE);']
['setting exchange body header ', ['message', 'hipchatconstants', 'message', 'date', 'date']]
camel sample_11329

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CinderComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-cinder.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-cinder.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1228

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<BeanLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.bean.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.bean.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_898

['if (ObjectHelper.isNotEmpty(endpoint.getUsername()) && ObjectHelper.isNotEmpty(endpoint.getPassword())) {', 'UsernamePasswordCredentialsProvider credentials = new UsernamePasswordCredentialsProvider(endpoint.getUsername(), endpoint.getPassword());', 'result = Git.cloneRepository().setCredentialsProvider(credentials).setURI(endpoint.getRemotePath()).setDirectory(new File(endpoint.getLocalPath(), "")).call();', '} else {', 'result = Git.cloneRepository().setURI(endpoint.getRemotePath()).setDirectory(new File(endpoint.getLocalPath(), "")).call();', '}', '} else {', 'throw new IllegalArgumentException("The local repository directory already exists");', '}', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doInit(Exchange exchange, String operation) throws Exception {', 'Git result = null;', 'if (ObjectHelper.isEmpty(endpoint.getLocalPath())) {', 'throw new IllegalArgumentException("Local path must specified to execute " + operation);', '}', 'try {', 'result = Git.init().setDirectory(new File(endpoint.getLocalPath(), "")).setBare(false).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['fileName = exchange.getIn().getHeader(GitConstants.GIT_FILE_NAME, String.class);', '} else {', 'throw new IllegalArgumentException("File name must be specified to execute " + operation);', '}', 'try {', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'git.add().addFilepattern(fileName).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['fileName = exchange.getIn().getHeader(GitConstants.GIT_FILE_NAME, String.class);', '} else {', 'throw new IllegalArgumentException("File name must be specified to execute " + operation);', '}', 'try {', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'git.rm().addFilepattern(fileName).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['try {', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'if (ObjectHelper.isNotEmpty(username) && ObjectHelper.isNotEmpty(email)) {', 'git.commit().setAllowEmpty(allowEmpty).setCommitter(username, email).setMessage(commitMessage).call();', '} else {', 'git.commit().setAllowEmpty(allowEmpty).setMessage(commitMessage).call();', '}', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['try {', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'if (ObjectHelper.isNotEmpty(username) && ObjectHelper.isNotEmpty(email)) {', 'git.commit().setAllowEmpty(allowEmpty).setAll(true).setCommitter(username, email).setMessage(commitMessage).call();', '} else {', 'git.commit().setAllowEmpty(allowEmpty).setAll(true).setMessage(commitMessage).call();', '}', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doCreateBranch(Exchange exchange, String operation) throws Exception {', 'if (ObjectHelper.isEmpty(endpoint.getBranchName())) {', 'throw new IllegalArgumentException("Branch Name must be specified to execute " + operation);', '}', 'try {', 'git.branchCreate().setName(endpoint.getBranchName()).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doDeleteBranch(Exchange exchange, String operation) throws Exception {', 'if (ObjectHelper.isEmpty(endpoint.getBranchName())) {', 'throw new IllegalArgumentException("Branch Name must be specified to execute " + operation);', '}', 'try {', 'git.branchDelete().setBranchNames(endpoint.getBranchName()).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doStatus(Exchange exchange, String operation) throws Exception {', 'Status status = null;', 'try {', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'status = git.status().call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getUsername()) && ObjectHelper.isNotEmpty(endpoint.getPassword())) {', 'UsernamePasswordCredentialsProvider credentials = new UsernamePasswordCredentialsProvider(endpoint.getUsername(), endpoint.getPassword());', 'result = git.push().setCredentialsProvider(credentials).setRemote(endpoint.getRemoteName()).call();', '} else {', 'result = git.push().setRemote(endpoint.getRemoteName()).call();', '}', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'if (ObjectHelper.isNotEmpty(endpoint.getUsername()) && ObjectHelper.isNotEmpty(endpoint.getPassword())) {', 'UsernamePasswordCredentialsProvider credentials = new UsernamePasswordCredentialsProvider(endpoint.getUsername(), endpoint.getPassword());', 'result = git.pull().setCredentialsProvider(credentials).setRemote(endpoint.getRemoteName()).call();', '} else {', 'result = git.pull().setRemote(endpoint.getRemoteName()).call();', '}', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doCreateTag(Exchange exchange, String operation) throws Exception {', 'if (ObjectHelper.isEmpty(endpoint.getTagName())) {', 'throw new IllegalArgumentException("Tag Name must be specified to execute " + operation);', '}', 'try {', 'git.tag().setName(endpoint.getTagName()).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doDeleteTag(Exchange exchange, String operation) throws Exception {', 'if (ObjectHelper.isEmpty(endpoint.getTagName())) {', 'throw new IllegalArgumentException("Tag Name must be specified to execute " + operation);', '}', 'try {', 'git.tagDelete().setTags(endpoint.getTagName()).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doShowBranches(Exchange exchange, String operation) throws Exception {', 'List<Ref> result = null;', 'try {', 'result = git.branchList().setListMode(ListMode.ALL).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['}', 'RevWalk walk = new RevWalk(repo);', 'ObjectId id = repo.resolve(commitId);', 'RevCommit commit = walk.parseCommit(id);', 'walk.dispose();', 'if (ObjectHelper.isNotEmpty(endpoint.getBranchName())) {', 'git.checkout().setCreateBranch(false).setName(endpoint.getBranchName()).call();', '}', 'result = git.cherryPick().include(commit).call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['if (ObjectHelper.isEmpty(endpoint.getRemotePath())) {', 'throw new IllegalArgumentException("Remote Path must be specified to execute " + operation);', '}', 'RemoteConfig result = null;', 'try {', 'RemoteAddCommand remoteAddCommand = git.remoteAdd();', 'remoteAddCommand.setUri(new URIish(endpoint.getRemotePath()));', 'remoteAddCommand.setName(endpoint.getRemoteName());', 'result = remoteAddCommand.call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['protected void doRemoteList(Exchange exchange, String operation) throws Exception {', 'List<RemoteConfig> result = null;', 'try {', 'result = git.remoteList().call();', '} catch (Exception e) {']
['there was an error in git operation ', ['operation']]
camel sample_9136

['private Repository getLocalRepository() throws IOException {', 'FileRepositoryBuilder builder = new FileRepositoryBuilder();', 'Repository repo = null;', 'try {', 'repo = builder.setGitDir(new File(endpoint.getLocalPath(), ".git")).readEnvironment() .findGitDir() .build();', '} catch (IOException e) {']
['there was an error cannot open repository ', ['endpoint', 'getlocalpath']]
camel sample_9136

['public synchronized RepositoryCommit addRepositoryCommit() {', 'User author = new User();', 'author.setEmail("someguy@gmail.com");', 'author.setHtmlUrl("http: author.setLogin("someguy");', 'RepositoryCommit rc = new RepositoryCommit();', 'rc.setAuthor(author);', 'rc.setSha(fakeSha.incrementAndGet() + "");']
['in mockcommitservice added commit with sha ', ['rc', 'getsha']]
camel sample_14255

['public synchronized List<RepositoryCommit> getCommits(IRepositoryIdProvider repository, String sha, String path) throws IOException {']
['returning list of size ', ['commitslist', 'size']]
camel sample_14255

['public void validateConfiguration() {', 'for (ChannelHandler encoder : encoders) {', 'if (encoder instanceof ChannelHandlerFactory) {', 'continue;', '}', 'if (ObjectHelper.getAnnotation(encoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}']
['the encoder is not shareable or an channelhandlerfactory instance the encoder cannot safely be used ', ['encoder']]
camel sample_6693

['continue;', '}', '}', 'for (ChannelHandler decoder : decoders) {', 'if (decoder instanceof ChannelHandlerFactory) {', 'continue;', '}', 'if (ObjectHelper.getAnnotation(decoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}']
['the decoder is not shareable or an channelhandlerfactory instance the decoder cannot safely be used ', ['decoder']]
camel sample_6693

['continue;', '}', 'if (ObjectHelper.getAnnotation(decoder, ChannelHandler.Sharable.class) != null) {', 'continue;', '}', '}', 'if (sslHandler != null) {', 'boolean factory = sslHandler instanceof ChannelHandlerFactory;', 'boolean shareable = ObjectHelper.getAnnotation(sslHandler, ChannelHandler.Sharable.class) != null;', 'if (!factory && !shareable) {']
['the sslhandler is not shareable or an channelhandlerfactory instance the sslhandler cannot safely be used ', ['sslhandler']]
camel sample_6693

['}', 'if (encoders.isEmpty() && decoders.isEmpty()) {', 'if (isAllowDefaultCodec()) {', 'if (isTextline()) {', 'Charset charset = getEncoding() != null ? Charset.forName(getEncoding()) : CharsetUtil.UTF_8;', 'encoders.add(ChannelHandlerFactories.newStringEncoder(charset));', 'ChannelBuffer[] delimiters = delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter();', 'decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength, delimiters));', 'decoders.add(ChannelHandlerFactories.newStringDecoder(charset));', 'if (LOG.isDebugEnabled()) {']
['using textline encoders and decoders with charset delimiter and decodermaxlinelength ', ['new', 'object', 'charset', 'delimiter', 'decodermaxlinelength']]
camel sample_6693

['Charset charset = getEncoding() != null ? Charset.forName(getEncoding()) : CharsetUtil.UTF_8;', 'encoders.add(ChannelHandlerFactories.newStringEncoder(charset));', 'ChannelBuffer[] delimiters = delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter();', 'decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength, delimiters));', 'decoders.add(ChannelHandlerFactories.newStringDecoder(charset));', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder());', 'decoders.add(ChannelHandlerFactories.newObjectDecoder());']
['using object encoders and decoders ', []]
camel sample_6693

['ChannelBuffer[] delimiters = delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter();', 'decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength, delimiters));', 'decoders.add(ChannelHandlerFactories.newStringDecoder(charset));', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder());', 'decoders.add(ChannelHandlerFactories.newObjectDecoder());', '}', '} else {']
['no encoders and decoders will be used ', []]
camel sample_6693

['decoders.add(ChannelHandlerFactories.newStringDecoder(charset));', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'encoders.add(ChannelHandlerFactories.newObjectEncoder());', 'decoders.add(ChannelHandlerFactories.newObjectDecoder());', '}', '} else {', '}', '} else {']
['using configured encoders and or decoders ', []]
camel sample_6693

['public static InputStream resolveResourceAsInputStream(ClassResolver classResolver, String uri) throws IOException {', 'if (uri.startsWith("file:")) {', 'uri = ObjectHelper.after(uri, "file:");', 'uri = tryDecodeUri(uri);']
['loading resource from file system ', ['uri']]
camel sample_4354

['public static InputStream resolveResourceAsInputStream(ClassResolver classResolver, String uri) throws IOException {', 'if (uri.startsWith("file:")) {', 'uri = ObjectHelper.after(uri, "file:");', 'uri = tryDecodeUri(uri);', 'return new FileInputStream(uri);', '} else if (uri.startsWith("http:")) {', 'URL url = new URL(uri);']
['loading resource from http ', ['uri']]
camel sample_4354

['} catch (IOException e) {', 'if (con instanceof HttpURLConnection) {', '((HttpURLConnection) con).disconnect();', '}', 'throw e;', '}', '} else if (uri.startsWith("classpath:")) {', 'uri = ObjectHelper.after(uri, "classpath:");', 'uri = tryDecodeUri(uri);', '} else if (uri.contains(":")) {']
['loading resource with urlhandler for protocol ', ['uri', 'uri', 'split']]
camel sample_4354

['}', '} else if (uri.startsWith("classpath:")) {', 'uri = ObjectHelper.after(uri, "classpath:");', 'uri = tryDecodeUri(uri);', '} else if (uri.contains(":")) {', 'URL url = new URL(uri);', 'URLConnection con = url.openConnection();', 'return con.getInputStream();', '}', 'String resolvedName = resolveUriPath(uri);']
['loading resource from classpath ', ['resolvedname']]
camel sample_4354

['public static URL resolveResourceAsUrl(ClassResolver classResolver, String uri) throws MalformedURLException {', 'if (uri.startsWith("file:")) {', 'String name = ObjectHelper.after(uri, "file:");', 'uri = tryDecodeUri(uri);']
['loading resource from file system ', ['uri']]
camel sample_4354

['public static URL resolveResourceAsUrl(ClassResolver classResolver, String uri) throws MalformedURLException {', 'if (uri.startsWith("file:")) {', 'String name = ObjectHelper.after(uri, "file:");', 'uri = tryDecodeUri(uri);', 'File file = new File(name);', 'if (!file.exists()) {', 'return null;', '}', 'return new URL(uri);', '} else if (uri.startsWith("http:")) {']
['loading resource from http ', ['uri']]
camel sample_4354

['if (!file.exists()) {', 'return null;', '}', 'return new URL(uri);', '} else if (uri.startsWith("http:")) {', 'return new URL(uri);', '} else if (uri.startsWith("classpath:")) {', 'uri = ObjectHelper.after(uri, "classpath:");', 'uri = tryDecodeUri(uri);', '} else if (uri.contains(":")) {']
['loading resource with urlhandler for protocol ', ['uri', 'uri', 'split']]
camel sample_4354

['return new URL(uri);', '} else if (uri.startsWith("http:")) {', 'return new URL(uri);', '} else if (uri.startsWith("classpath:")) {', 'uri = ObjectHelper.after(uri, "classpath:");', 'uri = tryDecodeUri(uri);', '} else if (uri.contains(":")) {', 'return new URL(uri);', '}', 'String resolvedName = resolveUriPath(uri);']
['loading resource from classpath ', ['resolvedname']]
camel sample_4354

['private static String tryDecodeUri(String uri) {', 'try {', 'uri = URLDecoder.decode(uri, "UTF-8");', '} catch (Exception e) {']
['error url decoding uri using utf encoding this exception is ignored ', ['uri']]
camel sample_4354

['int nummsg = 1000;', 'MockEndpoint resultEndpoint = context.getEndpoint("mock:mymock", MockEndpoint.class);', 'resultEndpoint.expectedMessageCount(nummsg);', 'long start = System.currentTimeMillis();', 'producer.start();', 'for (int i = 0; i < nummsg; ++i) {', 'producer.process(exchange);', '}', 'resultEndpoint.assertIsSatisfied();', 'long stop = System.currentTimeMillis();']
['took milliseconds ', ['gettestmethodname', 'stop', 'start']]
camel sample_15014

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JpaComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jpa.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.jpa.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_461

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeCronExpression() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerOptions() throws Exception {', 'AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute");', 'long repeatInterval = trigger.getRepeatInterval();', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_17183

['public void testRestartAppChangeTriggerType() throws Exception {', 'app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");', 'app.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'assertNotNull(camel);', 'assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger);', 'app.stop();']
['restarting ', []]
camel sample_17183

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<HessianDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.hessian.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.hessian.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_524

['public Processor wrapProcessorInInterceptors(CamelContext camelContext, ProcessorDefinition<?> processorDefinition, Processor target, Processor nextTarget) throws Exception {', 'String defName = processorDefinition.getShortName();', 'return new DelegateAsyncProcessor((Exchange exchange) -> {']
['creating new subsegment for eip ', ['defname', 'target']]
camel sample_8232

['public Processor wrapProcessorInInterceptors(CamelContext camelContext, ProcessorDefinition<?> processorDefinition, Processor target, Processor nextTarget) throws Exception {', 'String defName = processorDefinition.getShortName();', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(defName));', 'try {']
['processing eip ', ['target']]
camel sample_8232

['public Processor wrapProcessorInInterceptors(CamelContext camelContext, ProcessorDefinition<?> processorDefinition, Processor target, Processor nextTarget) throws Exception {', 'String defName = processorDefinition.getShortName();', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(defName));', 'try {', 'target.process(exchange);', '} catch (Exception ex) {']
['handling exception thrown by invoked eip ', ['target']]
camel sample_8232

['public Processor wrapProcessorInInterceptors(CamelContext camelContext, ProcessorDefinition<?> processorDefinition, Processor target, Processor nextTarget) throws Exception {', 'String defName = processorDefinition.getShortName();', 'return new DelegateAsyncProcessor((Exchange exchange) -> {', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(defName));', 'try {', 'target.process(exchange);', '} catch (Exception ex) {', 'subsegment.addException(ex);', 'throw ex;', '} finally {']
['closing down subsegment for ', ['defname']]
camel sample_8232

['public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {', 'if (e.getCause() instanceof FacebookException) {', 'FacebookException facebookException = (FacebookException) e.getCause();', 'if (facebookException.getErrorCode() == 11 || facebookException.getErrorCode() == 12 || facebookException.getErrorCode() == 1) {', 'context().stopRoute(route.getId());', 'String method = ((FacebookEndpoint) route.getEndpoint()).getMethod();', 'MockEndpoint mock = getMockEndpoint("mock:consumeQueryResult" + method);', 'mock.expectedMinimumMessageCount(0);', 'MockEndpoint mock2 = getMockEndpoint("mock:consumeResult" + method);', 'mock2.expectedMinimumMessageCount(0);']
['ignoring failed facebook deprecated api call ', ['facebookexception']]
camel sample_9589

['public void process(Exchange exchange) throws Exception {', 'MqttClient client = getEndpoint().getClient();', 'String topic = exchange.getIn().getHeader(PahoConstants.CAMEL_PAHO_OVERRIDE_TOPIC, getEndpoint().getTopic(), String.class);', 'int qos = exchange.getIn().getHeader(PahoConstants.CAMEL_PAHO_MSG_QOS, getEndpoint().getQos(), Integer.class);', 'boolean retained = exchange.getIn().getHeader(PahoConstants.CAMEL_PAHO_MSG_RETAINED, getEndpoint().isRetained(), Boolean.class);', 'byte[] payload = exchange.getIn().getBody(byte[].class);', 'MqttMessage message = new MqttMessage(payload);', 'message.setQos(qos);', 'message.setRetained(retained);']
['publishing to topic qos retrained ', ['topic', 'qos', 'retained']]
camel sample_9073

['public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {', 'super(endpoint, processor);', 'this.configuration = config;', 'this.internalSessionStateListener = new SessionStateListener() {', 'public void onStateChange(SessionState newState, SessionState oldState, Session source) {', 'if (configuration.getSessionStateListener() != null) {', 'configuration.getSessionStateListener().onStateChange(newState, oldState, source);', '}', 'if (newState.equals(SessionState.CLOSED)) {']
['lost connection to trying to reconnect ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['protected void doStart() throws Exception {']
['connecting to ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['protected void doStart() throws Exception {', 'super.doStart();', 'session = createSession();']
['connected to ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['protected void doStop() throws Exception {']
['disconnecting from ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['protected void doStop() throws Exception {', 'super.doStop();', 'closeSession();']
['disconnected from ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['private void reconnect(final long initialReconnectDelay) {', 'if (reconnectLock.tryLock()) {', 'try {', 'Runnable r = new Runnable() {', 'public void run() {', 'boolean reconnected = false;']
['schedule reconnect after millis ', ['initialreconnectdelay']]
camel sample_16907

['public void run() {', 'boolean reconnected = false;', 'try {', 'Thread.sleep(initialReconnectDelay);', '} catch (InterruptedException e) {', '}', 'int attempt = 0;', 'while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {', 'try {', 'attempt++;']
['trying to reconnect to attempt ', ['getendpoint', 'getconnectionstring', 'attempt']]
camel sample_16907

['Thread.sleep(initialReconnectDelay);', '} catch (InterruptedException e) {', '}', 'int attempt = 0;', 'while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {', 'try {', 'attempt++;', 'session = createSession();', 'reconnected = true;', '} catch (IOException e) {']
['failed to reconnect to ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['reconnected = true;', '} catch (IOException e) {', 'closeSession();', 'try {', 'Thread.sleep(configuration.getReconnectDelay());', '} catch (InterruptedException ee) {', '}', '}', '}', 'if (reconnected) {']
['reconnected to ', ['getendpoint', 'getconnectionstring']]
camel sample_16907

['protected void doStart() throws Exception {', 'super.doStart();']
['starting google pubsub consumer for ', ['endpoint', 'getprojectid', 'endpoint', 'getdestinationname']]
camel sample_17245

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping google pubsub consumer for ', ['endpoint', 'getprojectid', 'endpoint', 'getdestinationname']]
camel sample_17245

['public void run() {', 'if (localLog.isDebugEnabled()) {']
['subscribing to ', ['threadid', 'subscriptionfullname']]
camel sample_17245

['public void run() {', 'if (localLog.isDebugEnabled()) {', '}', 'while (isRunAllowed() && !isSuspendingOrSuspended()) {', 'try {', 'PullRequest pullRequest = new PullRequest().setMaxMessages(endpoint.getMaxMessagesPerPoll());', 'PullResponse pullResponse;', 'try {', 'if (localLog.isTraceEnabled()) {']
['polling ', ['threadid']]
camel sample_17245

['while (isRunAllowed() && !isSuspendingOrSuspended()) {', 'try {', 'PullRequest pullRequest = new PullRequest().setMaxMessages(endpoint.getMaxMessagesPerPoll());', 'PullResponse pullResponse;', 'try {', 'if (localLog.isTraceEnabled()) {', '}', 'pullResponse = GooglePubsubConsumer.this.pubsub .projects() .subscriptions() .pull(subscriptionFullName, pullRequest) .execute();', '} catch (SocketTimeoutException ste) {', 'if (localLog.isTraceEnabled()) {']
['socket timeout ', ['threadid']]
camel sample_17245

['continue;', '}', 'if (null == pullResponse.getReceivedMessages()) {', 'continue;', '}', 'List<ReceivedMessage> receivedMessages = pullResponse.getReceivedMessages();', 'for (ReceivedMessage receivedMessage : receivedMessages) {', 'PubsubMessage pubsubMessage = receivedMessage.getMessage();', 'byte[] body = pubsubMessage.decodeData();', 'if (localLog.isTraceEnabled()) {']
['received message id ', ['pubsubmessage', 'getmessageid']]
camel sample_17245

['if (endpoint.getAckMode() != GooglePubsubConstants.AckMode.NONE) {', 'exchange.addOnCompletion(GooglePubsubConsumer.this.ackStrategy);', '}', 'try {', 'processor.process(exchange);', '} catch (Throwable e) {', 'exchange.setException(e);', '}', '}', '} catch (Exception e) {']
['failure getting messages from pubsub ', ['e']]
camel sample_17245

['public void prepareTestInstance(TestContext testContext) throws Exception {']
['runwith camelspringbootrunner class preparing ', ['testcontext', 'gettestclass']]
camel sample_10580

['public void beforeTestMethod(TestContext testContext) throws Exception {']
['runwith camelspringbootrunner class before ', ['testcontext', 'gettestclass', 'testcontext', 'gettestmethod', 'getname']]
camel sample_10580

['public void beforeTestMethod(TestContext testContext) throws Exception {', 'Class<?> testClass = testContext.getTestClass();', 'String testName = testContext.getTestMethod().getName();', 'ConfigurableApplicationContext context = (ConfigurableApplicationContext) testContext.getApplicationContext();', 'System.clearProperty("skipStartingCamelContext");', 'CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> testName);']
['initialized camelspringbootrunner now ready to start camelcontext ', []]
camel sample_10580

['public void testSendReceiveTraps() throws Exception {', 'PDU trap = new PDU();', 'trap.setType(PDU.TRAP);', 'OID oid = new OID("1.2.3.4.5");', 'trap.add(new VariableBinding(SnmpConstants.snmpTrapOID, oid));', 'trap.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(5000)));', 'trap.add(new VariableBinding(SnmpConstants.sysDescr, new OctetString("System Description")));', 'Variable var = new OctetString("some string");', 'trap.add(new VariableBinding(oid, var));']
['sending pdu ', ['trap']]
camel sample_8818

['Thread.sleep(1000);', '}', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(1);', 'mock.assertIsSatisfied();', 'List<Exchange> exchanges = mock.getExchanges();', 'SnmpMessage msg = (SnmpMessage) exchanges.get(0).getIn();', 'PDU receivedTrap = msg.getSnmpMessage();', 'Assert.assertEquals(trap, receivedTrap);', 'if (LOG.isInfoEnabled()) {']
['received snmp trap ', []]
camel sample_8818

['public String prepareQuery(String query, boolean allowNamedParameters) throws SQLException {', 'String answer;', 'if (allowNamedParameters && hasNamedParameters(query)) {', 'answer = query.replaceAll("\\\\:\\\\?\\\\w+", "\\\\?");', '} else {', 'answer = query;', '}']
['prepared query ', ['answer']]
camel sample_14039

['public void populateStatement(PreparedStatement ps, Iterator<?> iterator, int expectedParams) throws SQLException {', 'int argNumber = 1;', 'if (expectedParams > 0) {', 'while (iterator != null && iterator.hasNext() && argNumber <= expectedParams) {', 'Object value = iterator.next();']
['setting parameter with value ', ['argnumber', 'value']]
camel sample_14039

['protected byte[] readSchemaResource() throws IOException {']
['reading schema resource ', ['schemaresourceuri']]
camel sample_4568

['public void process(Exchange exchange) {']
['called with exchange ', ['exchange']]
camel sample_3757

['public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause) throws Exception {', 'Integer times = state.get(consumer);', 'if (times == null) {', 'times = 1;', '} else {', 'times += 1;', '}']
['rollback occurred after times when consuming ', ['times', 'endpoint']]
camel sample_4092

['protected void onSuspend(Consumer consumer, Endpoint endpoint) throws Exception {']
['suspending consumer after attempts to consume from you have to manually resume the consumer ', ['consumer', 'limit', 'endpoint']]
camel sample_4092

['applicationContext = createApplicationContext();', 'threadAppContext.set(applicationContext);', '}', '} else {', 'applicationContext = createApplicationContext();', '}', 'assertNotNull(applicationContext, "Should have created a valid spring context");', 'SpringCamelContext.setNoStart(false);', '}', '} else {']
['skipping starting camelcontext as system property skipstartingcamelcontext is set to be true ', []]
camel sample_11684

['public ModelMBeanInfo getMBeanInfo(Object defaultManagedBean, Object customManagedBean, String objectName) throws JMException {', 'if (defaultManagedBean != null && Proxy.isProxyClass(defaultManagedBean.getClass())) {']
['skip creating modelmbeaninfo due proxy class ', ['defaultmanagedbean', 'getclass']]
camel sample_4587

['extractMbeanAttributes(customManagedBean, attributes, mBeanAttributes, mBeanOperations);', 'extractMbeanOperations(customManagedBean, operations, mBeanOperations);', 'extractMbeanNotifications(customManagedBean, mBeanNotifications);', '}', 'String name = getName(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);', 'String description = getDescription(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);', 'ModelMBeanAttributeInfo[] arrayAttributes = mBeanAttributes.toArray(new ModelMBeanAttributeInfo[mBeanAttributes.size()]);', 'ModelMBeanOperationInfo[] arrayOperations = mBeanOperations.toArray(new ModelMBeanOperationInfo[mBeanOperations.size()]);', 'ModelMBeanNotificationInfo[] arrayNotifications = mBeanNotifications.toArray(new ModelMBeanNotificationInfo[mBeanNotifications.size()]);', 'ModelMBeanInfo info = new ModelMBeanInfoSupport(name, description, arrayAttributes, null, arrayOperations, arrayNotifications);']
['created modelmbeaninfo ', []]
camel sample_4587

['private void doExtractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {', 'doDoExtractAttributesAndOperations(managedClass, attributes, operations);', 'if (managedClass.getSuperclass() != null) {', 'Class<?> clazz = managedClass.getSuperclass();', 'if (!clazz.getName().startsWith("java")) {']
['extracting attributes and operations from sub class ', ['clazz']]
camel sample_4587

['Class<?> clazz = managedClass.getSuperclass();', 'if (!clazz.getName().startsWith("java")) {', 'doExtractAttributesAndOperations(clazz, attributes, operations);', '}', '}', 'if (managedClass.getInterfaces() != null) {', 'for (Class<?> clazz : managedClass.getInterfaces()) {', 'if (clazz.getName().startsWith("java")) {', 'continue;', '}']
['extracting attributes and operations from implemented interface ', ['clazz']]
camel sample_4587

['private void doDoExtractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {']
['extracting attributes and operations from class ', ['managedclass']]
camel sample_4587

['private void doDoExtractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {', 'IntrospectionSupport.ClassInfo cache = IntrospectionSupport.cacheClass(managedClass);', 'for (IntrospectionSupport.MethodInfo cacheInfo : cache.methods) {', 'if (cacheInfo.method.getDeclaringClass() != managedClass) {', 'continue;', '}']
['extracting attributes and operations from method ', ['cacheinfo', 'method']]
camel sample_4587

['mbeanOperation.setDescriptor(opDesc);', 'mBeanOperations.add(mbeanOperation);', '}', 'if (info.getSetter() != null) {', 'desc.setField("setMethod", info.getSetter().getName());', 'ModelMBeanOperationInfo mbeanOperation = new ModelMBeanOperationInfo(info.getKey(), info.getSetter());', 'mBeanOperations.add(mbeanOperation);', '}', 'mbeanAttribute.setDescriptor(desc);', 'mBeanAttributes.add(mbeanAttribute);']
['assembled attribute ', ['mbeanattribute']]
camel sample_4587

['private void extractMbeanOperations(Object managedBean, Set<ManagedOperationInfo> operations, Set<ModelMBeanOperationInfo> mBeanOperations) {', 'for (ManagedOperationInfo info : operations) {', 'ModelMBeanOperationInfo mbean = new ModelMBeanOperationInfo(info.getDescription(), info.getOperation());', 'Descriptor opDesc = mbean.getDescriptor();', 'opDesc.setField("mask", info.isMask() ? "true" : "false");', 'mbean.setDescriptor(opDesc);', 'mBeanOperations.add(mbean);']
['assembled operation ', ['mbean']]
camel sample_4587

['private void extractMbeanNotifications(Object managedBean, Set<ModelMBeanNotificationInfo> mBeanNotifications) {', 'ManagedNotifications notifications = managedBean.getClass().getAnnotation(ManagedNotifications.class);', 'if (notifications != null) {', 'for (ManagedNotification notification : notifications.value()) {', 'ModelMBeanNotificationInfo info = new ModelMBeanNotificationInfo(notification.notificationTypes(), notification.name(), notification.description());', 'mBeanNotifications.add(info);']
['assembled notification ', []]
camel sample_4587

['private void testIteration(int i) throws Exception {', 'MockEndpoint me = context.getEndpoint("mock:result", MockEndpoint.class);', 'me.reset();', 'me.expectedMessageCount(4);']
['run ', ['i']]
camel sample_1785

['template.sendBody("direct:start", "4");', 'template.sendBody("direct:start", "1");', 'template.sendBody("direct:start", "3");', 'template.sendBody("direct:start", "2");', 'assertMockEndpointsSatisfied();', 'String a = me.getExchanges().get(0).getIn().getBody(String.class);', 'String b = me.getExchanges().get(1).getIn().getBody(String.class);', 'String c = me.getExchanges().get(2).getIn().getBody(String.class);', 'String d = me.getExchanges().get(3).getIn().getBody(String.class);', 'String line = a + b + c + d;']
['order ', ['line']]
camel sample_1785

['public void onNewArtifacts(Set<NexusArtifactDto> newArtifacts) {', 'for (NexusArtifactDto dto : newArtifacts) {', 'try {']
['processing new artifact ', ['dto', 'getgroupid', 'dto', 'getartifactid', 'dto', 'getversion']]
camel sample_318

['public void onNewArtifacts(Set<NexusArtifactDto> newArtifacts) {', 'for (NexusArtifactDto dto : newArtifacts) {', 'try {', 'String url = createArtifactURL(dto);', 'URL jarUrl = new URL(url);', 'addCustomCamelConnectorFromArtifact(dto, jarUrl);', '} catch (Throwable e) {']
['error downloading connector jar this exception is ignored ', ['dto', 'getartifactlink', 'e', 'getmessage']]
camel sample_318

['protected void addConnector(NexusArtifactDto dto, String name, String scheme, String javaType, String description, String labels, String connectorJson, String connectorSchemaJson, String componentSchemaJson) {', 'String groupId = dto.getGroupId();', 'String artifactId = dto.getArtifactId();', 'String version = dto.getVersion();', 'camelConnectorCatalog.addConnector(groupId, artifactId, version, name, scheme, javaType, description, labels, connectorJson, connectorSchemaJson, componentSchemaJson);']
['added connector ', ['dto', 'getgroupid', 'dto', 'getartifactid', 'dto', 'getversion']]
camel sample_318

['String description = tree.get("description").textValue();', 'Iterator<JsonNode> it = tree.withArray("labels").iterator();', 'CollectionStringBuffer csb = new CollectionStringBuffer(",");', 'while (it.hasNext()) {', 'String text = it.next().textValue();', 'csb.append(text);', '}', 'addConnector(dto, name, scheme, javaType, description, csb.toString(), json[0], json[1], json[2]);', '}', '} catch (IOException e) {']
['error scanning jar for custom camel components ', ['e']]
camel sample_318

['private String[] loadConnectorJSonSchema(ClassLoader classLoader) {', 'String[] answer = new String[3];', 'String path = "camel-connector.json";', 'try {', 'InputStream is = classLoader.getResourceAsStream(path);', 'if (is != null) {', 'answer[0] = loadText(is);', '}', '} catch (Throwable e) {']
['error loading file ', ['path', 'e']]
camel sample_318

['} catch (Throwable e) {', 'return null;', '}', 'path = "camel-connector-schema.json";', 'try {', 'InputStream is = classLoader.getResourceAsStream(path);', 'if (is != null) {', 'answer[1] = loadText(is);', '}', '} catch (Throwable e) {']
['error loading file ', ['path', 'e']]
camel sample_318

['} catch (Throwable e) {', 'return null;', '}', 'path = "camel-component-schema.json";', 'try {', 'InputStream is = classLoader.getResourceAsStream(path);', 'if (is != null) {', 'answer[2] = loadText(is);', '}', '} catch (Throwable e) {']
['error loading file ', ['path', 'e']]
camel sample_318

['public void startListenerContainer() {']
['starting listener container on destination ', ['listenercontainer', 'getdestinationname']]
camel sample_7201

['public void startListenerContainer() {', 'listenerContainer.start();']
['started listener container on destination ', ['listenercontainer', 'getdestinationname']]
camel sample_7201

['protected void testConnectionOnStartup() throws FailedToCreateConsumerException {', 'try {']
['testing jms connection on startup for destination ', ['getdestinationname']]
camel sample_7201

['protected void testConnectionOnStartup() throws FailedToCreateConsumerException {', 'try {', 'Connection con = listenerContainer.getConnectionFactory().createConnection();', 'JmsUtils.closeConnection(con);']
['successfully tested jms connection on startup for destination ', ['getdestinationname']]
camel sample_7201

['if (listenerContainer == null) {', 'createMessageListenerContainer();', '}', 'getEndpoint().onListenerContainerStarting(listenerContainer);', 'if (getEndpoint().getConfiguration().isAsyncStartListener()) {', 'getEndpoint().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'prepareAndStartListenerContainer();', '} catch (Throwable e) {']
['error starting listener container on destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_7201

['protected void doStop() throws Exception {', 'if (listenerContainer != null) {', 'if (getEndpoint().getConfiguration().isAsyncStopListener()) {', 'getEndpoint().getAsyncStartStopExecutorService().submit(new Runnable() {', 'public void run() {', 'try {', 'stopAndDestroyListenerContainer();', '} catch (Throwable e) {']
['error stopping listener container on destination this exception will be ignored ', ['getdestinationname', 'e']]
camel sample_7201

['protected void doResume() throws Exception {', 'if (!initialized) {', 'doStart();', '} else {', 'if (listenerContainer != null) {', 'startListenerContainer();', '} else {']
['the listenercontainer is not instantiated probably there was a timeout during the suspend operation please restart your consumer route ', []]
camel sample_7201

['public void process(Exchange exchange) throws Exception {']
['processing exchange in camel ', []]
camel sample_7715

['public void process(Exchange exchange) throws Exception {', 'BindingOperationInfo boi = (BindingOperationInfo)exchange.getProperty(BindingOperationInfo.class.getName());', 'if (boi != null) {']
['boi isunwrapped ', ['boi', 'isunwrapped']]
camel sample_7715

['public void process(Exchange exchange) throws Exception {', 'BindingOperationInfo boi = (BindingOperationInfo)exchange.getProperty(BindingOperationInfo.class.getName());', 'if (boi != null) {', '}', 'MessageContentsList msgList = (MessageContentsList)exchange.getIn().getBody();', 'Holder<String> personId = (Holder<String>)msgList.get(0);', 'Holder<String> ssn = (Holder<String>)msgList.get(1);', 'Holder<String> name = (Holder<String>)msgList.get(2);', 'if (personId.value == null || personId.value.length() == 0) {']
['person id so throwing exception ', []]
camel sample_7715

['if (personId.value == null || personId.value.length() == 0) {', 'org.apache.camel.wsdl_first.types.UnknownPersonFault personFault = new org.apache.camel.wsdl_first.types.UnknownPersonFault();', 'personFault.setPersonId("");', 'org.apache.camel.wsdl_first.UnknownPersonFault fault = new org.apache.camel.wsdl_first.UnknownPersonFault("Get the null value of person name", personFault);', 'exchange.getOut().setFault(true);', 'exchange.getOut().setBody(fault);', 'return;', '}', 'name.value = "Bonjour";', 'ssn.value = "123";']
['setting bonjour as the response ', []]
camel sample_7715

['protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_6807

['private Charset getCharsetForMessage(Message message) {', 'if (message.getHeaders().containsKey(SmppConstants.ENCODING)) {', 'String encoding = message.getHeader(SmppConstants.ENCODING, String.class);', 'if (Charset.isSupported(encoding)) {', 'return Charset.forName(encoding);', '} else {']
['unsupported encoding requested in header ', ['encoding']]
camel sample_16906

['public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {', 'Class<?> testClass = getTestClass();', 'if (logger.isDebugEnabled()) {']
['loading applicationcontext for merged context configuration ', ['mergedconfig']]
camel sample_10581

['public boolean unregister(String messageName) {', 'if (!StringUtils.isEmpty(messageName)) {', 'if (consumerRegistry.remove(messageName) == null) {']
['consumer with message name was already unregistered ', ['messagename']]
camel sample_13657

['List<RouteStartupOrder> routesOrdered = new ArrayList<RouteStartupOrder>(routes);', 'routesOrdered.sort(new Comparator<RouteStartupOrder>() {', 'public int compare(RouteStartupOrder o1, RouteStartupOrder o2) {', 'return o1.getStartupOrder() - o2.getStartupOrder();', '}', '});', 'if (shutdownRoutesInReverseOrder) {', 'Collections.reverse(routesOrdered);', '}', 'if (suspendOnly) {']
['starting to graceful suspend routes timeout ', ['routesordered', 'size', 'timeout', 'timeunit', 'tostring', 'tolowercase', 'locale', 'english']]
camel sample_4093

['routesOrdered.sort(new Comparator<RouteStartupOrder>() {', 'public int compare(RouteStartupOrder o1, RouteStartupOrder o2) {', 'return o1.getStartupOrder() - o2.getStartupOrder();', '}', '});', 'if (shutdownRoutesInReverseOrder) {', 'Collections.reverse(routesOrdered);', '}', 'if (suspendOnly) {', '} else {']
['starting to graceful shutdown routes timeout ', ['routesordered', 'size', 'timeout', 'timeunit', 'tostring', 'tolowercase', 'locale', 'english']]
camel sample_4093

['currentShutdownTaskFuture = getExecutorService().submit(new ShutdownTask(context, routesOrdered, timeout, timeUnit, suspendOnly, abortAfterTimeout, timeoutOccurred, isLogInflightExchangesOnTimeout()));', 'try {', 'currentShutdownTaskFuture.get(timeout, timeUnit);', '} catch (ExecutionException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e.getCause());', '} catch (Exception e) {', 'timeoutOccurred.set(true);', 'currentShutdownTaskFuture.cancel(true);', 'this.forceShutdown = forceShutdown;', 'if (!forceShutdown && abortAfterTimeout) {']
['timeout occurred during graceful shutdown aborting the shutdown now notice some resources may still be running as graceful shutdown did not complete successfully ', []]
camel sample_4093

['throw ObjectHelper.wrapRuntimeCamelException(e.getCause());', '} catch (Exception e) {', 'timeoutOccurred.set(true);', 'currentShutdownTaskFuture.cancel(true);', 'this.forceShutdown = forceShutdown;', 'if (!forceShutdown && abortAfterTimeout) {', 'logInflightExchanges(context, routes, isLogInflightExchangesOnTimeout());', 'return false;', '} else {', 'if (forceShutdown || shutdownNowOnTimeout) {']
['timeout occurred during graceful shutdown forcing the routes to be shutdown now notice some resources may still be running as graceful shutdown did not complete successfully ', []]
camel sample_4093

['} else {', 'if (forceShutdown || shutdownNowOnTimeout) {', 'logInflightExchanges(context, routes, isLogInflightExchangesOnTimeout());', 'shutdownRoutesNow(routesOrdered);', 'for (RouteStartupOrder order : routes) {', 'for (Service service : order.getServices()) {', 'prepareShutdown(service, false, true, true, isSuppressLoggingOnTimeout());', '}', '}', '} else {']
['timeout occurred during graceful shutdown will ignore shutting down the remainder routes notice some resources may still be running as graceful shutdown did not complete successfully ', []]
camel sample_4093

['}', '}', '} else {', 'logInflightExchanges(context, routes, isLogInflightExchangesOnTimeout());', '}', '}', '} finally {', 'currentShutdownTaskFuture = null;', '}', 'long seconds = TimeUnit.SECONDS.convert(watch.taken(), TimeUnit.MILLISECONDS);']
['graceful shutdown of routes completed in seconds ', ['routesordered', 'size', 'seconds']]
camel sample_4093

['protected void shutdownRoutesNow(List<RouteStartupOrder> routes) {', 'for (RouteStartupOrder order : routes) {', 'ShutdownRunningTask current = order.getRoute().getRouteContext().getShutdownRunningTask();', 'if (current != ShutdownRunningTask.CompleteCurrentTaskOnly) {']
['changing shutdownrunningtask from to on route to shutdown faster ', ['shutdownrunningtask', 'completecurrenttaskonly', 'current', 'order', 'getroute', 'getid']]
camel sample_4093

['protected static void shutdownNow(Consumer consumer) {']
['shutting down ', ['consumer']]
camel sample_4093

['protected static void shutdownNow(Consumer consumer) {', 'try {', 'ServiceHelper.stopService(consumer);', '} catch (Throwable e) {']
['error occurred while shutting down route this exception will be ignored ', ['consumer', 'e']]
camel sample_4093

['protected static void shutdownNow(Consumer consumer) {', 'try {', 'ServiceHelper.stopService(consumer);', '} catch (Throwable e) {', 'EventHelper.notifyServiceStopFailure(consumer.getEndpoint().getCamelContext(), consumer, e);', '}']
['shutdown complete for ', ['consumer']]
camel sample_4093

['protected static void suspendNow(Consumer consumer) {']
['suspending ', ['consumer']]
camel sample_4093

['protected static void suspendNow(Consumer consumer) {', 'try {', 'ServiceHelper.suspendService(consumer);', '} catch (Throwable e) {']
['error occurred while suspending route this exception will be ignored ', ['consumer', 'e']]
camel sample_4093

['protected static void suspendNow(Consumer consumer) {', 'try {', 'ServiceHelper.suspendService(consumer);', '} catch (Throwable e) {', 'EventHelper.notifyServiceStopFailure(consumer.getEndpoint().getCamelContext(), consumer, e);', '}']
['suspend complete for ', ['consumer']]
camel sample_4093

['public void run() {']
['there are routes to suspend shutdown ', ['routes', 'size', 'suspendonly']]
camel sample_4093

['public void run() {', 'List<ShutdownDeferredConsumer> deferredConsumers = new ArrayList<ShutdownDeferredConsumer>();', 'for (RouteStartupOrder order : routes) {', 'ShutdownRoute shutdownRoute = order.getRoute().getRouteContext().getShutdownRoute();', 'ShutdownRunningTask shutdownRunningTask = order.getRoute().getRouteContext().getShutdownRunningTask();', 'if (LOG.isTraceEnabled()) {']
['with options suspending route shutting down route ', ['new', 'object', 'suspendonly', 'order', 'getroute', 'getid', 'shutdownroute', 'shutdownrunningtask']]
camel sample_4093

['if (consumer instanceof ShutdownAware) {', 'shutdown = !((ShutdownAware) consumer).deferShutdown(shutdownRunningTask);', '}', 'if (shutdown && consumer instanceof Suspendable) {', 'suspend = true;', '}', '}', 'if (suspend) {', 'suspendNow(consumer);', 'deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(), consumer));']
['route suspended and shutdown deferred was consuming from ', ['order', 'getroute', 'getid', 'order', 'getroute', 'getendpoint']]
camel sample_4093

['}', 'if (shutdown && consumer instanceof Suspendable) {', 'suspend = true;', '}', '}', 'if (suspend) {', 'suspendNow(consumer);', 'deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(), consumer));', '} else if (shutdown) {', 'shutdownNow(consumer);']
['route shutdown complete was consuming from ', ['order', 'getroute', 'getid', 'order', 'getroute', 'getendpoint']]
camel sample_4093

['suspend = true;', '}', '}', 'if (suspend) {', 'suspendNow(consumer);', 'deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(), consumer));', '} else if (shutdown) {', 'shutdownNow(consumer);', '} else {', 'deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(), consumer));']
['route shutdown deferred suspension deferred ', ['order', 'getroute', 'getid', 'suspendonly']]
camel sample_4093

['while (!done && !timeoutOccurred.get()) {', 'int size = 0;', 'final Map<String, Integer> routeInflight = new LinkedHashMap<String, Integer>();', 'for (RouteStartupOrder order : routes) {', 'int inflight = context.getInflightRepository().size(order.getRoute().getId());', 'inflight += getPendingInflightExchanges(order);', 'if (inflight > 0) {', 'String routeId = order.getRoute().getId();', 'routeInflight.put(routeId, inflight);', 'size += inflight;']
['inflight and pending exchanges for route ', ['inflight', 'routeid']]
camel sample_4093

['String row = String.format("%s = %s", entry.getKey(), entry.getValue());', 'csb.append(row);', '}', 'String msg = "Waiting as there are still " + size + " inflight and pending exchanges to complete, timeout in " + (TimeUnit.SECONDS.convert(timeout, timeUnit) - (loopCount++ * loopDelaySeconds)) + " seconds.";', 'msg += " Inflights per route: [" + csb.toString() + "]";', 'LOG.info(msg);', 'logInflightExchanges(context, routes, logInflightExchangesOnTimeout);', 'Thread.sleep(loopDelaySeconds * 1000);', '} catch (InterruptedException e) {', 'if (abortAfterTimeout) {']
['interrupted while waiting during graceful shutdown will abort ', []]
camel sample_4093

['}', 'String msg = "Waiting as there are still " + size + " inflight and pending exchanges to complete, timeout in " + (TimeUnit.SECONDS.convert(timeout, timeUnit) - (loopCount++ * loopDelaySeconds)) + " seconds.";', 'msg += " Inflights per route: [" + csb.toString() + "]";', 'LOG.info(msg);', 'logInflightExchanges(context, routes, logInflightExchangesOnTimeout);', 'Thread.sleep(loopDelaySeconds * 1000);', '} catch (InterruptedException e) {', 'if (abortAfterTimeout) {', 'return;', '} else {']
['interrupted while waiting during graceful shutdown will force shutdown now ', []]
camel sample_4093

['break;', '}', '}', '} else {', 'done = true;', '}', '}', 'for (ShutdownDeferredConsumer deferred : deferredConsumers) {', 'Consumer consumer = deferred.getConsumer();', 'if (consumer instanceof ShutdownAware) {']
['route preparing to shutdown ', ['deferred', 'getroute', 'getid']]
camel sample_4093

['} else {', 'done = true;', '}', '}', 'for (ShutdownDeferredConsumer deferred : deferredConsumers) {', 'Consumer consumer = deferred.getConsumer();', 'if (consumer instanceof ShutdownAware) {', 'boolean forced = context.getShutdownStrategy().forceShutdown(consumer);', 'boolean suppress = context.getShutdownStrategy().isSuppressLoggingOnTimeout();', 'prepareShutdown(consumer, suspendOnly, forced, false, suppress);']
['route preparing to shutdown complete ', ['deferred', 'getroute', 'getid']]
camel sample_4093

['if (consumer instanceof ShutdownAware) {', 'boolean forced = context.getShutdownStrategy().forceShutdown(consumer);', 'boolean suppress = context.getShutdownStrategy().isSuppressLoggingOnTimeout();', 'prepareShutdown(consumer, suspendOnly, forced, false, suppress);', '}', '}', 'for (ShutdownDeferredConsumer deferred : deferredConsumers) {', 'Consumer consumer = deferred.getConsumer();', 'if (suspendOnly) {', 'suspendNow(consumer);']
['route suspend complete was consuming from ', ['deferred', 'getroute', 'getid', 'deferred', 'getconsumer', 'getendpoint']]
camel sample_4093

['boolean suppress = context.getShutdownStrategy().isSuppressLoggingOnTimeout();', 'prepareShutdown(consumer, suspendOnly, forced, false, suppress);', '}', '}', 'for (ShutdownDeferredConsumer deferred : deferredConsumers) {', 'Consumer consumer = deferred.getConsumer();', 'if (suspendOnly) {', 'suspendNow(consumer);', '} else {', 'shutdownNow(consumer);']
['route shutdown complete was consuming from ', ['deferred', 'getroute', 'getid', 'deferred', 'getconsumer', 'getendpoint']]
camel sample_4093

['container.disableJMX();', 'container.addRoutes(builder);', 'container.start();', 'Endpoint endpoint = container.getEndpoint("direct:a");', 'Exchange exchange = endpoint.createExchange();', 'if (header != null) {', 'exchange.getIn().setHeader("foo", header);', '}', 'Producer producer = endpoint.createProducer();', 'producer.process(exchange);']
['invocation order ', ['order']]
camel sample_3756

['public void handleNotification(Notification notification, Object handback) {']
['get the notification ', ['notification']]
camel sample_2844

['public static void assertInMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull(exchange, "Should have a response exchange!");', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getIn().getMandatoryBody();', 'assertEquals(actual, expected, "in body of: " + exchange);', '} else {', 'actual = exchange.getIn().getMandatoryBody(expected.getClass());', '}', 'assertEquals(actual, expected, "in body of: " + exchange);']
['received response with in ', ['exchange', 'exchange', 'getin']]
camel sample_11685

['public static void assertOutMessageBodyEquals(Exchange exchange, Object expected) throws InvalidPayloadException {', 'assertNotNull(exchange, "Should have a response exchange!");', 'Object actual;', 'if (expected == null) {', 'actual = exchange.getOut().getMandatoryBody();', 'assertEquals(actual, expected, "output body of: " + exchange);', '} else {', 'actual = exchange.getOut().getMandatoryBody(expected.getClass());', '}', 'assertEquals(actual, expected, "output body of: " + exchange);']
['received response with out ', ['exchange', 'exchange', 'getout']]
camel sample_11685

['public static Object assertExpression(Expression expression, Exchange exchange, Object expected) {', 'Object value;', 'if (expected != null) {', 'value = expression.evaluate(exchange, expected.getClass());', '} else {', 'value = expression.evaluate(exchange, Object.class);', '}']
['evaluated expression on exchange result ', ['expression', 'exchange', 'value']]
camel sample_11685

['public static void assertPredicateDoesNotMatch(Predicate predicate, Exchange exchange) {', 'try {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate should match: ", exchange);', '} catch (AssertionError e) {']
['caught expected assertion error ', ['e']]
camel sample_11685

['public static boolean assertPredicate(final Predicate predicate, Exchange exchange, boolean expected) {', 'if (expected) {', 'PredicateAssertHelper.assertMatches(predicate, "Predicate failed: ", exchange);', '}', 'boolean value = predicate.matches(exchange);']
['evaluated predicate on exchange result ', ['predicate', 'exchange', 'value']]
camel sample_11685

['return;', '}', 'if (file.isDirectory()) {', 'File[] files = file.listFiles();', 'for (File child : files) {', 'recursivelyDeleteDirectory(child);', '}', '}', 'boolean success = file.delete();', 'if (!success) {']
['deletion of file failed ', ['file', 'getabsolutepath']]
camel sample_11685

['public Exchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange) throws OptimisticLockingException {', 'if (!optimistic) {', 'throw new UnsupportedOperationException();', '}']
['adding an exchange with id for key in an optimistic manner ', ['newexchange', 'getexchangeid', 'key']]
camel sample_12553

['DefaultExchangeHolder oldHolder = cache.getAndPut(key, newHolder);', 'if (oldHolder != null) {', 'Exchange exchange = unmarshallExchange(camelContext, oldHolder);', 'LOG.error("Optimistic locking failed for exchange with key {}: IMap#putIfAbsend returned Exchange with ID {}, while it\'s expected no exchanges to be returned", key, exchange != null ? exchange.getExchangeId() : "<null>");', 'throw new OptimisticLockingException();', '}', '} else {', 'DefaultExchangeHolder oldHolder = DefaultExchangeHolder.marshal(oldExchange, true, allowSerializedHeaders);', 'DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders);', 'if (!cache.replace(key, oldHolder, newHolder)) {']
['optimistic locking failed for exchange with key imap replace returned no exchanges while it s expected to replace one ', ['key']]
camel sample_12553

['LOG.error("Optimistic locking failed for exchange with key {}: IMap#putIfAbsend returned Exchange with ID {}, while it\'s expected no exchanges to be returned", key, exchange != null ? exchange.getExchangeId() : "<null>");', 'throw new OptimisticLockingException();', '}', '} else {', 'DefaultExchangeHolder oldHolder = DefaultExchangeHolder.marshal(oldExchange, true, allowSerializedHeaders);', 'DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders);', 'if (!cache.replace(key, oldHolder, newHolder)) {', 'throw new OptimisticLockingException();', '}', '}']
['added an exchange with id for key in optimistic manner ', ['newexchange', 'getexchangeid', 'key']]
camel sample_12553

['public Exchange add(CamelContext camelContext, String key, Exchange exchange) {', 'if (optimistic) {', 'throw new UnsupportedOperationException();', '}']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_12553

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {']
['removing an exchange with id for key in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_12553

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {']
['optimistic locking failed for exchange with key imap remove removed no exchanges while it s expected to remove one ', ['key']]
camel sample_12553

['public void remove(CamelContext camelContext, String key, Exchange exchange) {', 'DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);', 'if (optimistic) {', 'if (!cache.remove(key, holder)) {', 'throw new OptimisticLockingException();', '}']
['removed an exchange with id for key in an optimistic manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_12553

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_12553

['public void connect(SocketAddress endpoint, int timeout) throws IOException {']
['connecting socket ', ['system', 'identityhashcode', 'this']]
camel sample_15296

['public synchronized void close() throws IOException {']
['disconnecting socket ', ['system', 'identityhashcode', 'this']]
camel sample_15296

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ApnsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.apns.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.apns.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_749

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<TelegramComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.telegram.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.telegram.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1157

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<XmppComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmpp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.xmpp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_933

['final Processor exceptionThrower = new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.getIn().setBody("<exception/>");', 'throw new IllegalArgumentException("Exception thrown intentionally.");', '}', '};', 'return new RouteBuilder() {', 'public void configure() {', 'errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));', 'if (getName().endsWith("WithLongHandler")) {']
['using long exception handler ', []]
camel sample_3869

['exchange.getIn().setBody("<exception/>");', 'throw new IllegalArgumentException("Exception thrown intentionally.");', '}', '};', 'return new RouteBuilder() {', 'public void configure() {', 'errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));', 'if (getName().endsWith("WithLongHandler")) {', 'onException(IllegalArgumentException.class).setBody(constant("<not-handled/>")). to("mock:exception");', '} else if (getName().endsWith("WithHandler")) {']
['using exception handler ', []]
camel sample_3869

['protected void doService(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {']
['service ', ['request']]
camel sample_17497

['}', 'if (epContinuationTimeout != null) {', 'continuationTimeout = epContinuationTimeout;', '} else {', 'continuationTimeout = jettyEndpoint.getComponent().getContinuationTimeout();', '}', '}', 'if (useContinuation) {', 'log.trace("Start request with continuation timeout of {}", continuationTimeout != null ? continuationTimeout : "jetty default");', '} else {']
['usage of continuation is disabled either by component or endpoint configuration fallback to normal servlet processing instead ', []]
camel sample_17497

['if (continuation.isInitial() && continuationTimeout != null) {', 'continuation.setTimeout(continuationTimeout);', '}', 'if (consumer.isSuspended() && continuation.isInitial()) {', 'response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);', 'return;', '}', 'if (continuation.isExpired()) {', 'String id = (String) continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);', 'expiredExchanges.put(id, id);']
['continuation expired of exchangeid ', ['id']]
camel sample_17497

['}', 'if (consumer.getEndpoint().isDisableStreamCache()) {', 'exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE);', '}', 'HttpHelper.setCharsetFromContentType(request.getContentType(), exchange);', 'exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response));', 'String contextPath = consumer.getEndpoint().getPath();', 'exchange.getIn().setHeader("CamelServletContextPath", contextPath);', 'updateHttpPath(exchange, contextPath);', 'if (log.isTraceEnabled()) {']
['suspending continuation of exchangeid ', ['exchange', 'getexchangeid']]
camel sample_17497

['exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response));', 'String contextPath = consumer.getEndpoint().getPath();', 'exchange.getIn().setHeader("CamelServletContextPath", contextPath);', 'updateHttpPath(exchange, contextPath);', 'if (log.isTraceEnabled()) {', '}', 'continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());', 'try {', 'consumer.createUoW(exchange);', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_17497

['}', 'continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());', 'try {', 'consumer.createUoW(exchange);', '} catch (Exception e) {', 'throw new ServletException(e);', '}', 'continuation.suspend();', 'ClassLoader oldTccl = overrideTccl(exchange);', 'if (log.isTraceEnabled()) {']
['processing request for exchangeid ', ['exchange', 'getexchangeid']]
camel sample_17497

['}', 'continuation.suspend();', 'ClassLoader oldTccl = overrideTccl(exchange);', 'if (log.isTraceEnabled()) {', '}', 'consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;', 'if (!expired) {', 'if (log.isTraceEnabled()) {']
['resuming continuation of exchangeid ', ['exchange', 'getexchangeid']]
camel sample_17497

['}', 'consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;', 'if (!expired) {', 'if (log.isTraceEnabled()) {', '}', 'continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME, exchange);', 'continuation.resume();', '} else {']
['cannot resume expired continuation of exchangeid ', ['exchange', 'getexchangeid']]
camel sample_17497

['}', '}', '});', 'if (oldTccl != null) {', 'restoreTccl(exchange, oldTccl);', '}', 'return;', '}', 'try {', 'if (log.isTraceEnabled()) {']
['resumed continuation and writing response for exchangeid ', ['result', 'getexchangeid']]
camel sample_17497

['if (oldTccl != null) {', 'restoreTccl(exchange, oldTccl);', '}', 'return;', '}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {']
['using response buffer size ', ['bs']]
camel sample_17497

['}', 'try {', 'if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {', 'response.setBufferSize(bs);', '}', 'consumer.getBinding().writeResponse(result, response);', '} catch (IOException e) {']
['error processing request ', ['e']]
camel sample_17497

['if (log.isTraceEnabled()) {', '}', 'Integer bs = consumer.getEndpoint().getResponseBufferSize();', 'if (bs != null) {', 'response.setBufferSize(bs);', '}', 'consumer.getBinding().writeResponse(result, response);', '} catch (IOException e) {', 'throw e;', '} catch (Exception e) {']
['error processing request ', ['e']]
camel sample_17497

['public void testGuice() throws Exception {', 'Injector injector = Guice.createInjector(new MyModule());', 'MyConfigurableRoute2 instance = injector.getInstance(Key.get(MyConfigurableRoute2.class, Names.named("foo")));', 'assertNotNull("should have found a key for \'foo\'", instance);']
['found instance ', ['instance']]
camel sample_8399

['public void testGuice() throws Exception {', 'Injector injector = Guice.createInjector(new MyModule());', 'MyConfigurableRoute2 instance = injector.getInstance(Key.get(MyConfigurableRoute2.class, Names.named("foo")));', 'assertNotNull("should have found a key for \'foo\'", instance);', 'Collection<RouteBuilder> list = Injectors.getInstancesOf(injector, RouteBuilder.class);']
['routebuilder list ', ['list']]
camel sample_8399

['public void testGuice() throws Exception {', 'Injector injector = Guice.createInjector(new MyModule());', 'MyConfigurableRoute2 instance = injector.getInstance(Key.get(MyConfigurableRoute2.class, Names.named("foo")));', 'assertNotNull("should have found a key for \'foo\'", instance);', 'Collection<RouteBuilder> list = Injectors.getInstancesOf(injector, RouteBuilder.class);', 'assertEquals("route builder list: " + list, 1, list.size());', 'list = Injectors.getInstancesOf(injector, Matchers.subclassesOf(RouteBuilder.class));']
['routebuilder list ', ['list']]
camel sample_8399

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SolrComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.solr.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.solr.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_525

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext", this);', 'camelContext.getManagementStrategy().addEventNotifier(eventNotifier);', 'if (!camelContext.getRoutePolicyFactories().contains(this)) {', 'camelContext.addRoutePolicyFactory(this);', '}', 'if (null == tracingStrategy) {']
['no tracing strategy available defaulting to no op strategy ', []]
camel sample_8233

['protected void doStart() throws Exception {', 'ObjectHelper.notNull(camelContext, "CamelContext", this);', 'camelContext.getManagementStrategy().addEventNotifier(eventNotifier);', 'if (!camelContext.getRoutePolicyFactories().contains(this)) {', 'camelContext.addRoutePolicyFactory(this);', '}', 'if (null == tracingStrategy) {', 'tracingStrategy = new NoopTracingStrategy();', '}', 'camelContext.addInterceptStrategy(tracingStrategy);']
['starting xray tracer ', []]
camel sample_8233

['protected void doStop() throws Exception {', 'camelContext.getManagementStrategy().removeEventNotifier(eventNotifier);', 'ServiceHelper.stopAndShutdownService(eventNotifier);', 'camelContext.getRoutePolicyFactories().remove(this);']
['xray tracer stopped ', []]
camel sample_8233

['public void init(CamelContext camelContext) {', 'if (!camelContext.hasService(this)) {', 'try {']
['initializing xray tracer ', []]
camel sample_8233

['private boolean isExcluded(String routeId) {', 'if (!excludePatterns.isEmpty()) {', 'for (String pattern : excludePatterns) {', 'if (pattern.equals(routeId)) {']
['ignoring route with id ', ['routeid']]
camel sample_8233

['public void notify(EventObject event) throws Exception {', 'if (event instanceof ExchangeSendingEvent) {', 'ExchangeSendingEvent ese = (ExchangeSendingEvent) event;']
['target routeid ', ['event', 'getclass', 'getsimplename', 'ese', 'getendpoint', 'ese', 'getexchange', 'getfromrouteid']]
camel sample_8233

['public void notify(EventObject event) throws Exception {', 'if (event instanceof ExchangeSendingEvent) {', 'ExchangeSendingEvent ese = (ExchangeSendingEvent) event;', 'if (Thread.currentThread().getName().contains("Multicast")) {', 'Segment segment = (Segment) ese.getExchange().getProperty(CURRENT_SEGMENT);']
['copying over segment from exchange received from to exchange processing ', ['segment', 'getid', 'segment', 'getname', 'ese', 'getexchange', 'getfromendpoint', 'ese', 'getendpoint']]
camel sample_8233

['if (!sd.newSegment()) {', 'return;', '}', 'if (AWSXRay.getCurrentSegmentOptional().isPresent()) {', 'String name = sd.getOperationName(ese.getExchange(), ese.getEndpoint());', 'if (sd.getComponent() != null) {', 'name = sd.getComponent() + ":" + name;', '}', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'sd.pre(subsegment, ese.getExchange(), ese.getEndpoint());']
['creating new subsegment with id and name ', ['subsegment', 'getid', 'subsegment', 'getname']]
camel sample_8233

['return;', '}', 'if (AWSXRay.getCurrentSegmentOptional().isPresent()) {', 'String name = sd.getOperationName(ese.getExchange(), ese.getEndpoint());', 'if (sd.getComponent() != null) {', 'name = sd.getComponent() + ":" + name;', '}', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'sd.pre(subsegment, ese.getExchange(), ese.getEndpoint());', '} else {']
['ignoring creation of xray subsegment as no segment exists in the current thread ', []]
camel sample_8233

['String name = sd.getOperationName(ese.getExchange(), ese.getEndpoint());', 'if (sd.getComponent() != null) {', 'name = sd.getComponent() + ":" + name;', '}', 'Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name));', 'sd.pre(subsegment, ese.getExchange(), ese.getEndpoint());', '} else {', '}', '} else if (event instanceof ExchangeSentEvent) {', 'ExchangeSentEvent ese = (ExchangeSentEvent) event;']
['target routeid ', ['event', 'getclass', 'getsimplename', 'ese', 'getendpoint', 'ese', 'getexchange', 'getfromrouteid']]
camel sample_8233

['sd.pre(subsegment, ese.getExchange(), ese.getEndpoint());', '} else {', '}', '} else if (event instanceof ExchangeSentEvent) {', 'ExchangeSentEvent ese = (ExchangeSentEvent) event;', 'SegmentDecorator sd = getSegmentDecorator(ese.getEndpoint());', 'if (AWSXRay.getCurrentSubsegmentOptional().isPresent()) {', 'Subsegment subsegment = AWSXRay.getCurrentSubsegment();', 'sd.post(subsegment, ese.getExchange(), ese.getEndpoint());', 'subsegment.close();']
['closing down subsegment with id and name ', ['subsegment', 'getid', 'subsegment', 'getname']]
camel sample_8233

['}', '} else if (event instanceof ExchangeSentEvent) {', 'ExchangeSentEvent ese = (ExchangeSentEvent) event;', 'SegmentDecorator sd = getSegmentDecorator(ese.getEndpoint());', 'if (AWSXRay.getCurrentSubsegmentOptional().isPresent()) {', 'Subsegment subsegment = AWSXRay.getCurrentSubsegment();', 'sd.post(subsegment, ese.getExchange(), ese.getEndpoint());', 'subsegment.close();', '}', '} else {']
['received event from source ', ['event', 'event', 'getsource']]
camel sample_8233

['traceID = TraceID.fromString(exchange.getIn().getHeader(XRAY_TRACE_ID, String.class));', '} else {', 'traceID = new TraceID();', 'exchange.getIn().setHeader(XRAY_TRACE_ID, traceID.toString());', '}', 'SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());', 'if (!AWSXRay.getCurrentSegmentOptional().isPresent()) {', 'Segment segment = AWSXRay.beginSegment(sanitizeName(route.getId()));', 'segment.setTraceId(traceID);', 'sd.pre(segment, exchange, route.getEndpoint());']
['created new xray segment with name ', ['segment', 'getid', 'segment', 'getname']]
camel sample_8233

['}', 'SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());', 'if (!AWSXRay.getCurrentSegmentOptional().isPresent()) {', 'Segment segment = AWSXRay.beginSegment(sanitizeName(route.getId()));', 'segment.setTraceId(traceID);', 'sd.pre(segment, exchange, route.getEndpoint());', 'exchange.setProperty(CURRENT_SEGMENT, segment);', '} else {', 'Subsegment subsegment = AWSXRay.beginSubsegment(route.getId());', 'sd.pre(subsegment, exchange, route.getEndpoint());']
['created new xray subsegment with name ', ['subsegment', 'getid', 'subsegment', 'getname']]
camel sample_8233

['public void onExchangeDone(Route route, Exchange exchange) {', 'if (isExcluded(route.getId())) {', 'return;', '}', 'LOG.trace("=> RoutePolicy-Done: Route: {} - RouteId: {}", routeId, route.getId());', 'SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());', 'if (AWSXRay.getCurrentSubsegmentOptional().isPresent()) {', 'Subsegment subsegment = AWSXRay.getCurrentSubsegment();', 'sd.post(subsegment, exchange, route.getEndpoint());', 'subsegment.close();']
['closing down subsegment with name ', ['subsegment', 'getid', 'subsegment', 'getname']]
camel sample_8233

['LOG.trace("=> RoutePolicy-Done: Route: {} - RouteId: {}", routeId, route.getId());', 'SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());', 'if (AWSXRay.getCurrentSubsegmentOptional().isPresent()) {', 'Subsegment subsegment = AWSXRay.getCurrentSubsegment();', 'sd.post(subsegment, exchange, route.getEndpoint());', 'subsegment.close();', '} else if (AWSXRay.getCurrentSegmentOptional().isPresent()) {', 'Segment segment = AWSXRay.getCurrentSegment();', 'sd.post(segment, exchange, route.getEndpoint());', 'segment.close();']
['closing down segment with name ', ['segment', 'getid', 'segment', 'getname']]
camel sample_8233

['if (conf.isVerifySignaturesOfAllSigners(exchange)) {', 'throw new CryptoCmsNoCertificateForSignerInfoException("KCS7/CMS signature verification failed. The public key for the signer information with" + signerInformationToString(signer) + " cannot be found in the configured certificates: " + certsToString(allowedVerifyCerts));', '} else {', 'continue;', '}', '}', 'Iterator<X509CertificateHolder> certIt = certCollection.iterator();', 'X509CertificateHolder cert = certIt.next();', 'try {', 'if (signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME).build(cert))) {']
['verification successful ', []]
camel sample_11543

['protected MqttConnectOptions resolveMqttConnectOptions() {', 'if (connectOptions != null) {', 'return connectOptions;', '}', 'Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);', 'if (connectOptions.size() == 1) {']
['single mqttconnectoptions instance found in the registry it will be used by the endpoint ', []]
camel sample_9072

['protected MqttConnectOptions resolveMqttConnectOptions() {', 'if (connectOptions != null) {', 'return connectOptions;', '}', 'Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);', 'if (connectOptions.size() == 1) {', 'return connectOptions.iterator().next();', '} else if (connectOptions.size() > 1) {']
['found instances of the mqttconnectoptions in the registry none of these will be used by the endpoint please use connectoptions endpoint option to select one ', ['connectoptions', 'size']]
camel sample_9072

['ServiceReference<?> sr = bundleContext.getServiceReference(name);', 'if (sr == null) {', 'String filterExpression = "(" + Constants.SERVICE_PID + "=" + name + ")";', 'try {', 'ServiceReference<?>[] refs = bundleContext.getServiceReferences((String)null, filterExpression);', 'if (refs != null && refs.length > 0) {', 'sr = refs[0];', '}', '} catch (InvalidSyntaxException ex) {', 'if (LOG.isDebugEnabled()) {']
['invalid osgi service reference filter skipped lookup by service pid filter expression ', ['filterexpression', 'ex']]
camel sample_13084

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<PropertiesComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.properties.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.properties.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_876

['public void run() {']
['continue routing exchange ', ['exchange']]
camel sample_4494

['public void reject() {', 'exchange.setException(new RejectedExecutionException());']
['rejected routing exchange ', ['exchange']]
camel sample_4494

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'if (shutdown.get()) {', 'throw new IllegalStateException("ThreadsProcessor is not running.");', '}', 'if (exchange.isTransacted()) {']
['transacted exchange must be routed synchronously for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4494

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'if (shutdown.get()) {', 'throw new IllegalStateException("ThreadsProcessor is not running.");', '}', 'if (exchange.isTransacted()) {', 'callback.done(true);', 'return true;', '}', 'try {', 'ProcessCall call = new ProcessCall(exchange, callback, false);']
['submitting task ', ['call']]
camel sample_4494

['public static KubernetesClient getKubernetesClient(KubernetesConfiguration configuration) {', 'if (configuration.getKubernetesClient() != null) {', 'return configuration.getKubernetesClient();', '} else if (configuration.getMasterUrl() != null) {', 'return createKubernetesClient(configuration);', '} else {']
['creating default kubernetes client without applying configuration ', []]
camel sample_13250

['private static KubernetesClient createKubernetesClient(KubernetesConfiguration configuration) {']
['create kubernetes client with the following configuration ', ['configuration', 'tostring']]
camel sample_13250

['private void handleNickInUse() {', 'IRCConnection connection = component.getIRCConnection(configuration);', 'String nick = connection.getNick() + "-";', 'if (nick.endsWith("----")) {']
['unable to set nick disconnecting ', ['nick']]
camel sample_12154

['private void handleNickInUse() {', 'IRCConnection connection = component.getIRCConnection(configuration);', 'String nick = connection.getNick() + "-";', 'if (nick.endsWith("----")) {', '} else {']
['unable to set nick retrying with ', ['nick', 'nick']]
camel sample_12154

['public void joinChannel(IrcChannel channel) {', 'if (channel == null) {', 'return;', '}', 'IRCConnection connection = component.getIRCConnection(configuration);', 'String chn = channel.getName();', 'String key = channel.getKey();', 'if (ObjectHelper.isNotEmpty(key)) {', 'if (LOG.isDebugEnabled()) {']
['joining using with secret key ', ['channel', 'connection', 'getclass', 'getname']]
camel sample_12154

['}', 'IRCConnection connection = component.getIRCConnection(configuration);', 'String chn = channel.getName();', 'String key = channel.getKey();', 'if (ObjectHelper.isNotEmpty(key)) {', 'if (LOG.isDebugEnabled()) {', '}', 'connection.doJoin(chn, key);', '} else {', 'if (LOG.isDebugEnabled()) {']
['joining using ', ['channel', 'connection', 'getclass', 'getname']]
camel sample_12154

['return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'beforeThreadName = Thread.currentThread().getName();', '}', '}) .to("async:camel") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['processing at attempt ', ['attempt', 'exchange']]
camel sample_2055

['errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());', 'from("seda:start") .to("log:before") .to("mock:before") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'beforeThreadName = Thread.currentThread().getName();', '}', '}) .to("async:camel") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("Camel")) {', 'if (++attempt <= 2) {']
['processing failed will thrown an exception ', []]
camel sample_2055

['}', '}) .to("async:camel") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String body = exchange.getIn().getBody(String.class);', 'if (body.contains("Camel")) {', 'if (++attempt <= 2) {', 'throw new IllegalArgumentException("Damn");', '}', '}', 'exchange.getIn().setBody("Hello " + body);']
['processing at attempt complete ', ['attempt', 'exchange']]
camel sample_2055

['public void configure() {']
['adding route from to ', ['a', 'b']]
camel sample_6446

['String s = entry.getValue().size() > 1 ? entry.getValue().toString() : entry.getValue().get(0);', 'method.addRequestHeader(key, s);', '}', '}', '}', 'if (getEndpoint().isConnectionClose()) {', 'method.addRequestHeader("Connection", "close");', '}', 'try {', 'if (LOG.isDebugEnabled()) {']
['executing http method ', ['method', 'getname', 'method', 'geturi', 'tostring']]
camel sample_12857

['}', '}', '}', 'if (getEndpoint().isConnectionClose()) {', 'method.addRequestHeader("Connection", "close");', '}', 'try {', 'if (LOG.isDebugEnabled()) {', '}', 'int responseCode = executeMethod(method);']
['http responsecode ', ['responsecode']]
camel sample_12857

["url = url.substring(0, url.indexOf('?'));", '}', 'RequestEntity requestEntity = createRequestEntity(exchange);', 'String methodName = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null).name();', 'HttpMethods methodsToUse = HttpMethods.valueOf(methodName);', 'HttpMethod method = methodsToUse.createMethod(url);', 'if (queryString != null) {', 'queryString = UnsafeUriCharactersEncoder.encode(queryString);', 'method.setQueryString(queryString);', '}']
['using url with method ', ['url', 'method']]
camel sample_12857

['String methodName = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null).name();', 'HttpMethods methodsToUse = HttpMethods.valueOf(methodName);', 'HttpMethod method = methodsToUse.createMethod(url);', 'if (queryString != null) {', 'queryString = UnsafeUriCharactersEncoder.encode(queryString);', 'method.setQueryString(queryString);', '}', 'if (methodsToUse.isEntityEnclosing()) {', '((EntityEnclosingMethod) method).setRequestEntity(requestEntity);', 'if (requestEntity != null && requestEntity.getContentType() == null) {']
['no content type provided for url with exchange ', ['url', 'exchange']]
camel sample_12857

['protected void doStart() throws Exception {', 'super.doStart();', 'launchContinuousQuery();']
['started ignite cache continuous query consumer for cache with query \xa0 ', ['cache', 'getname', 'endpoint', 'getquery']]
camel sample_11282

['ContinuousQuery<Object, Object> continuousQuery = new ContinuousQuery<>();', 'if (endpoint.getQuery() != null) {', 'continuousQuery.setInitialQuery(endpoint.getQuery());', '}', 'if (endpoint.getRemoteFilter() != null) {', 'continuousQuery.setRemoteFilter(endpoint.getRemoteFilter());', '}', 'continuousQuery.setLocalListener(new CacheEntryUpdatedListener<Object, Object>() {', 'public void onUpdated(Iterable<CacheEntryEvent<? extends Object, ? extends Object>> events) throws CacheEntryListenerException {', 'if (LOG.isTraceEnabled()) {']
['processing continuous query event s \xa0 ', ['events']]
camel sample_11282

['protected void doStop() throws Exception {', 'super.doStop();', 'cursor.close();']
['stopped ignite cache continuous query consumer for cache with query \xa0 ', ['cache', 'getname', 'endpoint', 'getquery']]
camel sample_11282

['private MessagePublisherClient() { }', 'public static void main(String[] args) throws Exception {']
['about to run kafka camel integration ', []]
camel sample_17585

['headers.put(KafkaConstants.KEY, "2");', 'headers.put(KafkaConstants.TOPIC, "TestLog");', 'producerTemplate.sendBodyAndHeaders("direct:kafkaStartNoTopic", testKafkaMessage, headers);', 'testKafkaMessage = "PART 0 :  " + testKafkaMessage;', 'Map<String, Object> newHeader = new HashMap<String, Object>();', 'newHeader.put(KafkaConstants.KEY, "AB");', 'producerTemplate.sendBodyAndHeaders("direct:kafkaStartWithPartitioner", testKafkaMessage, newHeader);', 'testKafkaMessage = "PART 1 :  " + testKafkaMessage;', 'newHeader.put(KafkaConstants.KEY, "ABC");', 'producerTemplate.sendBodyAndHeaders("direct:kafkaStartWithPartitioner", testKafkaMessage, newHeader);']
['successfully published event to kafka ', []]
camel sample_17585

['private void listBrokers(AmazonMQ mqClient, Exchange exchange) {', 'ListBrokersRequest request = new ListBrokersRequest();', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.MAX_RESULTS))) {', 'int maxResults = exchange.getIn().getHeader(MQConstants.MAX_RESULTS, Integer.class);', 'request.withMaxResults(maxResults);', '}', 'ListBrokersResult result;', 'try {', 'result = mqClient.listBrokers(request);', '} catch (AmazonServiceException ase) {']
['list brokers command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8771

['throw new IllegalArgumentException("Broker Name must be specified");', '}', 'if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_DEPLOYMENT_MODE))) {', 'deploymentMode = exchange.getIn().getHeader(MQConstants.BROKER_DEPLOYMENT_MODE, String.class);', 'request.withDeploymentMode(deploymentMode);', '}', 'CreateBrokerResult result;', 'try {', 'result = mqClient.createBroker(request);', '} catch (AmazonServiceException ase) {']
['create broker command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8771

['if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ID))) {', 'brokerId = exchange.getIn().getHeader(MQConstants.BROKER_ID, String.class);', 'request.withBrokerId(brokerId);', '} else {', 'throw new IllegalArgumentException("Broker Name must be specified");', '}', 'DeleteBrokerResult result;', 'try {', 'result = mqClient.deleteBroker(request);', '} catch (AmazonServiceException ase) {']
['delete broker command returned the error code ', ['ase', 'geterrorcode']]
camel sample_8771

['protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {', 'final CMConfiguration config = new CMConfiguration();', 'setProperties(config, parameters);']
['validating uri based configuration ', []]
camel sample_12787

['protected Endpoint doCreateEndpoint(TwitterConfiguration properties, String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'String[] tokens = remaining.split("/");']
['the scheme syntax twitter has been deprecated use twitter instead ', ['tokens', 'tokens']]
camel sample_14203

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<StAXComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stax.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.stax.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1100

['public int commit(DefaultSqlEndpoint defaultSqlEndpoint, Exchange exchange, Object data, NamedParameterJdbcTemplate jdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {', 'final SqlParameterSource param = new ElsqlSqlMapSource(exchange, data);', 'final String sql = elSql.getSql(query, new SpringSqlParams(param));']
['commit using sql ', ['query', 'sql']]
camel sample_13196

['public int commit(DefaultSqlEndpoint defaultSqlEndpoint, Exchange exchange, Object data, NamedParameterJdbcTemplate jdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {', 'final SqlParameterSource param = new ElsqlSqlMapSource(exchange, data);', 'final String sql = elSql.getSql(query, new SpringSqlParams(param));', 'return jdbcTemplate.execute(sql, param, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {', 'ps.execute();', 'int updateCount = ps.getUpdateCount();', 'if (LOG.isTraceEnabled()) {']
['update count ', ['updatecount']]
camel sample_13196

['public int commitBatchComplete(DefaultSqlEndpoint endpoint, NamedParameterJdbcTemplate namedJdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {', 'final SqlParameterSource param = new EmptySqlParameterSource();', 'final String sql = elSql.getSql(query, new SpringSqlParams(param));']
['commitbatchcomplete using sql ', ['query', 'sql']]
camel sample_13196

['public int commitBatchComplete(DefaultSqlEndpoint endpoint, NamedParameterJdbcTemplate namedJdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {', 'final SqlParameterSource param = new EmptySqlParameterSource();', 'final String sql = elSql.getSql(query, new SpringSqlParams(param));', 'return namedJdbcTemplate.execute(sql, param, new PreparedStatementCallback<Integer>() {', 'public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {', 'ps.execute();', 'int updateCount = ps.getUpdateCount();', 'if (LOG.isTraceEnabled()) {']
['update count ', ['updatecount']]
camel sample_13196

['public boolean canTest() {', 'if (System.getProperty("java.vendor").contains("IBM")) {', 'return false;', '}', 'try {', 'javax.security.auth.login.Configuration.getConfiguration();', '} catch (Exception e) {']
['cannot run test due security exception ', ['e']]
camel sample_11144

['protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {', 'HttpRequest request = (HttpRequest) msg;']
['message received ', ['request']]
camel sample_16681

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'Attribute<HttpServerChannelHandler> attr = ctx.channel().attr(SERVER_HANDLER_KEY);', 'HttpServerChannelHandler handler = attr.get();', 'if (handler != null) {', 'handler.exceptionCaught(ctx, cause);', '} else {', 'if (cause instanceof ClosedChannelException) {']
['channel already closed ignoring this exception ', []]
camel sample_16681

['public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {', 'Attribute<HttpServerChannelHandler> attr = ctx.channel().attr(SERVER_HANDLER_KEY);', 'HttpServerChannelHandler handler = attr.get();', 'if (handler != null) {', 'handler.exceptionCaught(ctx, cause);', '} else {', 'if (cause instanceof ClosedChannelException) {', 'return;', '} else {']
['httpserverchannelhandler is not found as attachment to handle exception send back to the client ', ['cause']]
camel sample_16681

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CacheComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cache.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_821

['public void testUriIssue() throws Exception {', 'String uri = "rss:http: PollingConsumer consumer = context.getEndpoint(uri).createPollingConsumer();', 'consumer.start();', 'Exchange exchange = consumer.receive();']
['receive ', ['exchange']]
camel sample_12292

['protected boolean runningAllowed() {', 'boolean quickStop = false;', 'if (isAllowQuickStop() && !endpoint.isAcceptMessagesWhileStopping()) {', 'quickStop = endpoint.getCamelContext().getStatus().isStopping();', '}', 'if (quickStop) {']
['runningallowed false due camelcontext is stopping and endpoint configured to not accept messages while stopping ', []]
camel sample_7191

['protected boolean runningAllowed() {', 'boolean quickStop = false;', 'if (isAllowQuickStop() && !endpoint.isAcceptMessagesWhileStopping()) {', 'quickStop = endpoint.getCamelContext().getStatus().isStopping();', '}', 'if (quickStop) {', 'return false;', '} else {', 'boolean answer = endpoint.isRunning();']
['runningallowed ', ['answer']]
camel sample_7191

['public void stop() throws JmsException {', 'if (logger.isDebugEnabled()) {']
['stopping listenercontainer with cachelevel and sharedconnectionenabled ', ['this', 'getcachelevel', 'sharedconnectionenabled']]
camel sample_7191

['public void destroy() {', 'if (logger.isDebugEnabled()) {']
['destroying listenercontainer with cachelevel and sharedconnectionenabled ', ['this', 'getcachelevel', 'sharedconnectionenabled']]
camel sample_7191

['protected void stopSharedConnection() {', 'if (logger.isDebugEnabled()) {', 'if (sharedConnectionEnabled()) {']
['stopping shared connection on listenercontainer ', ['this']]
camel sample_7191

['private void verifyTheRecivedEmail(String expectString) throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.assertIsSatisfied();', 'Exchange out = mock.assertExchangeReceived(0);', 'ByteArrayOutputStream baos = new ByteArrayOutputStream(((MailMessage)out.getIn()).getMessage().getSize());', '((MailMessage)out.getIn()).getMessage().writeTo(baos);', 'String dumpedMessage = baos.toString();', 'assertTrue("There should have the " + expectString, dumpedMessage.indexOf(expectString) > 0);']
['multipart alternative ', ['dumpedmessage']]
camel sample_11847

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (!isStarterAllowed()) {']
['spring boot starter starter not allowed for module skipping ', ['project', 'getartifactid']]
camel sample_122

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (!isStarterAllowed()) {', 'return;', '}', 'try {', 'File starterDir = starterDir();']
['spring boot starter starter dir for the component is ', ['starterdir', 'getabsolutepath']]
camel sample_122

['String stdName = (comps[0] + ":" + comps[1]).replace("-starter", "");', 'if (stdName.equals(project.getGroupId() + ":" + project.getArtifactId())) {', 'inGlobal = true;', 'break;', '}', '}', 'if (!inGlobal) {', 'deps.addAll(globalProps);', '}', 'if (deps.size() > 0) {']
['the following dependencies will be added to the starter ', ['deps']]
camel sample_122

['DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();', 'Document originalPom = builder.parse(project.getFile());', 'XPath xpath = XPathFactory.newInstance().newXPath();', 'Node repositories = (Node) xpath.compile("/project/repositories").evaluate(originalPom, XPathConstants.NODE);', 'if (repositories != null) {', 'pom.getDocumentElement().appendChild(pom.createComment(GENERATED_SECTION_START));', 'pom.getDocumentElement().appendChild(pom.importNode(repositories, true));', 'pom.getDocumentElement().appendChild(pom.createComment(GENERATED_SECTION_END));', '}', '} else {']
['cannot access the project pom file to retrieve repositories ', []]
camel sample_122

['loggingImpl.add("org.slf4j:slf4j-jcl");', 'loggingImpl.add("org.slf4j:slf4j-jdk14");', 'loggingImpl.add("org.slf4j:slf4j-log4j12");', 'loggingImpl.add("org.slf4j:slf4j-log4j13");', 'loggingImpl.add("org.slf4j:slf4j-nop");', 'loggingImpl.add("org.slf4j:slf4j-simple");', 'Set<String> configExclusions = new HashSet<>();', 'Properties properties = new Properties();', 'properties.load(getClass().getResourceAsStream("/spring-boot-fix-dependencies.properties"));', 'String artExcl = properties.getProperty("exclude_" + project.getArtifactId());']
['configured exclusions ', ['artexcl']]
camel sample_122

['loggingImpl.add("org.slf4j:slf4j-log4j12");', 'loggingImpl.add("org.slf4j:slf4j-log4j13");', 'loggingImpl.add("org.slf4j:slf4j-nop");', 'loggingImpl.add("org.slf4j:slf4j-simple");', 'Set<String> configExclusions = new HashSet<>();', 'Properties properties = new Properties();', 'properties.load(getClass().getResourceAsStream("/spring-boot-fix-dependencies.properties"));', 'String artExcl = properties.getProperty("exclude_" + project.getArtifactId());', 'if (artExcl != null && artExcl.trim().length() > 0) {', 'for (String dep : artExcl.split(",")) {']
['adding configured exclusion ', ['dep']]
camel sample_122

['if (artExcl != null && artExcl.trim().length() > 0) {', 'for (String dep : artExcl.split(",")) {', 'configExclusions.add(dep);', '}', '}', 'Set<String> libsToRemove = new TreeSet<>();', 'libsToRemove.addAll(loggingImpl);', 'libsToRemove.addAll(configExclusions);', 'libsToRemove = filterIncludedArtifacts(libsToRemove);', 'if (libsToRemove.size() > 0) {']
['spring boot starter the following dependencies will be removed from the starter ', ['libstoremove']]
camel sample_122

['node.accept(visitor);', 'List<DependencyNode> nodes = visitor.getNodes();', 'for (DependencyNode dependencyNode : nodes) {', 'Artifact artifact = dependencyNode.getArtifact();', 'if (getLog().isDebugEnabled()) {', 'getLog().debug("Found dependency node: " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + " - scope=" + artifact.getScope());', '}', 'if (!Artifact.SCOPE_TEST.equals(artifact.getScope()) && !Artifact.SCOPE_PROVIDED.equals(artifact.getScope())) {', 'String canonicalName = artifact.getGroupId() + ":" + artifact.getArtifactId();', 'if (artifacts.contains(canonicalName)) {']
['marked for exclusion ', ['canonicalname']]
camel sample_122

['try (InputStream in = new FileInputStream(pomFile)) {', 'String content = IOUtils.toString(in, "UTF-8");', 'boolean editablePom = content.contains(GENERATED_SECTION_START_COMMENT);', 'if (editablePom) {', 'content = removeGeneratedSections(content, 10);', 'DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();', 'Document pom;', 'try (InputStream contentIn = new ByteArrayInputStream(content.getBytes("UTF-8"))) {', 'pom = builder.parse(contentIn);', '}']
['reusing the existing pom xml for the starter ', []]
camel sample_122

['DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();', 'Document pom;', 'try (InputStream contentIn = new ByteArrayInputStream(content.getBytes("UTF-8"))) {', 'pom = builder.parse(contentIn);', '}', 'return pom;', '}', '}', '}', '} catch (Exception e) {']
['cannot use the existing pom xml file ', ['e']]
camel sample_122

['private Document createBasePomFromScratch() throws Exception {']
['creating a new pom xml for the starter from scratch ', []]
camel sample_122

['private boolean isStarterAllowed() {', 'for (String ignored : IGNORE_MODULES) {', 'if (ignored.equals(project.getArtifactId())) {']
['component inside ignore list ', []]
camel sample_122

['private boolean isStarterAllowed() {', 'for (String ignored : IGNORE_MODULES) {', 'if (ignored.equals(project.getArtifactId())) {', 'return false;', '}', '}', 'if (IGNORE_TEST_MODULES && (project.getArtifactId().startsWith("camel-test") || project.getArtifactId().startsWith("camel-testng"))) {']
['test components are ignored ', []]
camel sample_122

['private boolean isStarterAllowed() {', 'for (String ignored : IGNORE_MODULES) {', 'if (ignored.equals(project.getArtifactId())) {', 'return false;', '}', '}', 'if (IGNORE_TEST_MODULES && (project.getArtifactId().startsWith("camel-test") || project.getArtifactId().startsWith("camel-testng"))) {', 'return false;', '}', 'if (project.getPackaging() != null && !project.getPackaging().equals("jar")) {']
['ignored for wrong packaging ', []]
camel sample_122

['}', 'if (project.getPackaging() != null && !project.getPackaging().equals("jar")) {', 'return false;', '}', 'if (baseDir.getName().equals("camel-core")) {', 'return true;', '}', 'if (baseDir.getParentFile().getName().equals("components") || baseDir.getName().endsWith("-component")) {', 'return true;', '}']
['component directory mismatch ', []]
camel sample_122

['}', 'content = content.replaceFirst("-->", "-->\\n").replaceFirst("\\\\?><!--", "\\\\?>\\n<!--");', 'writeIfChanged(content, destination);', '}', 'private void writeIfChanged(String content, File file) throws IOException {', 'boolean write = true;', 'if (file.exists()) {', 'try (FileReader fr = new FileReader(file)) {', 'String oldContent = IOUtils.toString(fr);', 'if (!content.equals(oldContent)) {']
['writing new file ', ['file', 'getabsolutepath']]
camel sample_122

['writeIfChanged(content, destination);', '}', 'private void writeIfChanged(String content, File file) throws IOException {', 'boolean write = true;', 'if (file.exists()) {', 'try (FileReader fr = new FileReader(file)) {', 'String oldContent = IOUtils.toString(fr);', 'if (!content.equals(oldContent)) {', 'fr.close();', '} else {']
['file has been left unchanged ', ['file', 'getabsolutepath']]
camel sample_122

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<FacebookComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.facebook.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.facebook.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_572

['private Message getNextElement() {', 'if (tarInputStream == null) {', 'return null;', '}', 'try {', 'TarArchiveEntry current = getNextEntry();', 'if (current != null) {']
['reading tarentry ', ['current', 'getname']]
camel sample_12457

['answer.getHeaders().putAll(exchange.getIn().getHeaders());', 'answer.setHeader(TARFILE_ENTRY_NAME_HEADER, current.getName());', 'answer.setHeader(Exchange.FILE_NAME, current.getName());', 'if (current.getSize() > 0) {', 'answer.setBody(new TarElementInputStreamWrapper(tarInputStream));', '} else {', 'answer.setBody(new ByteArrayInputStream(new byte[0]));', '}', 'return answer;', '} else {']
['closed tarinputstream ', []]
camel sample_12457

['protected void doStart() throws Exception {', 'boolean startScheduler = isStartScheduler();', 'setStartScheduler(false);', 'try {', 'super.doStart();', 'if (endpoint.isAutoCreate()) {']
['auto creating directory ', ['endpoint', 'getconfiguration', 'getdirectory']]
camel sample_15392

['protected void doStart() throws Exception {', 'boolean startScheduler = isStartScheduler();', 'setStartScheduler(false);', 'try {', 'super.doStart();', 'if (endpoint.isAutoCreate()) {', 'try {', 'connectIfNecessary();', 'operations.buildDirectory(endpoint.getConfiguration().getDirectory(), true);', '} catch (GenericFileOperationFailedException e) {']
['error auto creating directory due this exception is ignored ', ['endpoint', 'getconfiguration', 'getdirectory', 'e', 'getmessage', 'e']]
camel sample_15392

['protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<SftpRemoteFile>> fileList, int depth) {']
['dopolldirectory from absolutepath dirname ', ['absolutepath', 'dirname']]
camel sample_15392

['protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<SftpRemoteFile>> fileList, int depth) {', 'depth++;', 'dirName = FileUtil.stripTrailingSeparator(dirName);', 'String dir;', 'if (isStepwise()) {', 'dir = ObjectHelper.isNotEmpty(dirName) ? dirName : absolutePath;', 'operations.changeCurrentDirectory(dir);', '} else {', 'dir = absolutePath;', '}']
['polling directory ', ['dir']]
camel sample_15392

['}', '} else {', 'fileExpressionResult = evaluateFileExpression();', 'if (fileExpressionResult != null) {', 'SftpRemoteFile file = new SftpRemoteFileSingle(fileExpressionResult);', 'files = new ArrayList<SftpRemoteFile>(1);', 'files.add(file);', '}', '}', 'if (files == null || files.isEmpty()) {']
['no files found in directory ', ['dir']]
camel sample_15392

['fileExpressionResult = evaluateFileExpression();', 'if (fileExpressionResult != null) {', 'SftpRemoteFile file = new SftpRemoteFileSingle(fileExpressionResult);', 'files = new ArrayList<SftpRemoteFile>(1);', 'files.add(file);', '}', '}', 'if (files == null || files.isEmpty()) {', 'return true;', '} else {']
['found in directory ', ['files', 'size', 'dir']]
camel sample_15392

['protected boolean isMatched(GenericFile<SftpRemoteFile> file, String doneFileName, List<SftpRemoteFile> files) {', 'String onlyName = FileUtil.stripPath(doneFileName);', 'for (SftpRemoteFile f : files) {', 'if (f.getFilename().equals(onlyName)) {', 'return true;', '}', '}']
['done file does not exist ', ['donefilename']]
camel sample_15392

['public void testExpressionArray() throws Exception {', 'Exchange exchange = new DefaultExchange(context);', 'exchange.getIn().setBody(new File("src/test/resources/books.json"));', 'Language lan = context.resolveLanguage("jsonpath");', 'Expression exp = lan.createExpression("$.store.book[*].author");', 'List<?> authors = exp.evaluate(exchange, List.class);']
['authors ', ['authors']]
camel sample_16947

['getMockEndpoint("mock:deadLetter").expectedMessageCount(1);', 'getMockEndpoint("mock:deadLetter").setResultWaitTime(25000);', 'template.sendBody("seda:foo", "Hello World");', 'getMockEndpoint("mock:foo").assertIsSatisfied();', 'StopWatch watch = new StopWatch();', 'Thread.sleep(500);', 'log.info("==== stopping route foo ====");', 'context.stopRoute("foo");', 'long taken = watch.taken();', 'getMockEndpoint("mock:deadLetter").assertIsSatisfied();']
['onredelivery processor counter ', ['counter', 'get']]
camel sample_2106

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['mock deadletter ', ['deadletterchannel', 'allowredeliverywhilestopping', 'false', 'onredelivery', 'new', 'myredeliverprocessor', 'maximumredeliveries', 'redeliverydelay', 'retryattemptedloglevel', 'logginglevel', 'info']]
camel sample_2106

['public void testSendingAndReceivingMessages() throws Exception {']
['sending messages ', ['getmessagecount']]
camel sample_6145

['public void testSendingAndReceivingMessages() throws Exception {', 'sendLoop(getMessageCount());']
['sending messages completed now will assert on their content as well as the order of their receipt ', ['getmessagecount']]
camel sample_6145

['}', 'final Exchange original = exchange;', 'Exchange target = exchange;', 'if (predicate == null) {', 'exchange.setProperty(Exchange.LOOP_SIZE, count);', '}', 'while ((predicate != null && doWhile.get()) || (index.get() < count.get())) {', 'target = prepareExchange(exchange, index.get(), original);', 'boolean sync = process(target, callback, index, count, doWhile, original);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['target', 'getexchangeid']]
camel sample_4528

['Exchange target = exchange;', 'if (predicate == null) {', 'exchange.setProperty(Exchange.LOOP_SIZE, count);', '}', 'while ((predicate != null && doWhile.get()) || (index.get() < count.get())) {', 'target = prepareExchange(exchange, index.get(), original);', 'boolean sync = process(target, callback, index, count, doWhile, original);', 'if (!sync) {', 'return false;', '}']
['processing exchangeid is continued being processed synchronously ', ['target', 'getexchangeid']]
camel sample_4528

['target = prepareExchange(exchange, index.get(), original);', 'boolean sync = process(target, callback, index, count, doWhile, original);', 'if (!sync) {', 'return false;', '}', 'if (!continueProcessing(target, "so breaking out of loop", LOG)) {', 'break;', '}', '}', 'ExchangeHelper.copyResults(exchange, target);']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4528

['protected boolean process(final Exchange exchange, final AsyncCallback callback, final AtomicInteger index, final AtomicInteger count, final AtomicBoolean doWhile, final Exchange original) {']
['loopprocessor iteration ', ['index', 'get']]
camel sample_4528

['return;', '}', 'Exchange target = exchange;', 'while ((predicate != null && doWhile.get()) || (index.get() < count.get())) {', 'if (!continueProcessing(target, "so breaking out of loop", LOG)) {', 'break;', '}', 'target = prepareExchange(exchange, index.get(), original);', 'boolean sync = process(target, callback, index, count, doWhile, original);', 'if (!sync) {']
['processing exchangeid is continued being processed asynchronously ', ['target', 'getexchangeid']]
camel sample_4528

['if (!continueProcessing(target, "so breaking out of loop", LOG)) {', 'break;', '}', 'target = prepareExchange(exchange, index.get(), original);', 'boolean sync = process(target, callback, index, count, doWhile, original);', 'if (!sync) {', 'return;', '}', '}', 'ExchangeHelper.copyResults(exchange, target);']
['processing complete for exchangeid ', ['exchange', 'getexchangeid', 'exchange']]
camel sample_4528

['String topic = endpoint.getConfiguration().getTopic();', 'if (!endpoint.getConfiguration().isBridgeEndpoint()) {', 'String headerTopic = exchange.getIn().getHeader(KafkaConstants.TOPIC, String.class);', 'boolean allowHeader = true;', 'if (headerTopic != null && endpoint.getConfiguration().isCircularTopicDetection()) {', 'Endpoint from = exchange.getFromEndpoint();', 'if (from instanceof KafkaEndpoint) {', 'String fromTopic = ((KafkaEndpoint) from).getConfiguration().getTopic();', 'allowHeader = !headerTopic.equals(fromTopic);', 'if (!allowHeader) {']
['circular topic detected from message header cannot send to same topic as the message comes from will use endpoint configured topic ', ['from', 'topic']]
camel sample_16414

['if (endpoint.getConfiguration().isRecordMetadata()) {', 'if (exchange.hasOut()) {', 'exchange.getOut().setHeader(KafkaConstants.KAFKA_RECORDMETA, recordMetadatas);', '} else {', 'exchange.getIn().setHeader(KafkaConstants.KAFKA_RECORDMETA, recordMetadatas);', '}', '}', 'while (c.hasNext()) {', 'ProducerRecord rec = c.next();', 'if (log.isDebugEnabled()) {']
['sending message to topic partition key ', ['rec', 'topic', 'rec', 'partition', 'rec', 'key']]
camel sample_16414

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'try {', 'Iterator<ProducerRecord> c = createRecorder(exchange);', 'KafkaProducerCallBack cb = new KafkaProducerCallBack(exchange, callback);', 'while (c.hasNext()) {', 'cb.increment();', 'ProducerRecord rec = c.next();', 'if (log.isDebugEnabled()) {']
['sending message to topic partition key ', ['rec', 'topic', 'rec', 'partition', 'rec', 'key']]
camel sample_16414

['public void onCompletion(RecordMetadata recordMetadata, Exception e) {', 'if (e != null) {', 'exchange.setException(e);', '}', 'recordMetadatas.add(recordMetadata);', 'if (count.decrementAndGet() == 0) {', 'workerPool.submit(new Runnable() {', 'public void run() {']
['all messages sent continue routing ', []]
camel sample_16414

['public void testIrcPrivateMessages() throws Exception {', 'resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class);', 'resultEndpoint.expectedBodiesReceived(expectedBody1, expectedBody2);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {']
['received exchange headers ', ['exchange', 'exchange', 'getin', 'getheaders']]
camel sample_12142

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<S3Component> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-s3.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-s3.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1116

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<BindyFixedLengthDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-fixed.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.bindy-fixed.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_972

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<XmlBeansDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmlbeans.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.xmlbeans.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_421

['protected void doStart() throws Exception {', 'if (isSingleton()) {']
['starting producer ', ['this']]
camel sample_3982

['protected void doStart() throws Exception {', 'if (isSingleton()) {', '} else {']
['starting producer ', ['this']]
camel sample_3982

['protected void doStop() throws Exception {', 'if (isSingleton()) {']
['stopping producer ', ['this']]
camel sample_3982

['protected void doStop() throws Exception {', 'if (isSingleton()) {', '} else {']
['stopping producer ', ['this']]
camel sample_3982

['public void testCopy() throws Exception {', 'File testFile = uploadTestFile();', 'String fromFileId = testFile.getId();', 'File toFile = new File();', 'toFile.setTitle(UPLOAD_FILE.getName() + "_copy");', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fromFileId);', 'headers.put("CamelGoogleDrive.content", toFile);', 'final File result = requestBodyAndHeaders("direct: assertNotNull("copy result", result);', 'assertEquals(toFile.getTitle(), result.getTitle());']
['copy ', ['result']]
camel sample_15404

['public void testGet() throws Exception {', 'File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'final File result = requestBody("direct: assertNotNull("get result", result);']
['get ', ['result']]
camel sample_15404

['public void testInsert() throws Exception {', 'File file = new File();', 'file.setTitle(UPLOAD_FILE.getName());', 'File result = requestBody("direct: assertNotNull("insert result", result);']
['insert ', ['result']]
camel sample_15404

['public void testInsert1() throws Exception {', 'File result = uploadTestFile();', 'assertNotNull("insert result", result);']
['insert ', ['result']]
camel sample_15404

['public void testPatch() throws Exception {', 'File file = uploadTestFile();', 'file.setTitle(UPLOAD_FILE.getName() + "PATCHED");', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", file.getId());', 'headers.put("CamelGoogleDrive.fields", "title");', 'headers.put("CamelGoogleDrive.content", file);', 'File result = requestBodyAndHeaders("direct: assertNotNull("patch result", result);', 'assertEquals(UPLOAD_FILE.getName() + "PATCHED", result.getTitle());']
['patch ', ['result']]
camel sample_15404

['public void testUpdate() throws Exception {', 'File theTestFile = uploadTestFile();', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", theTestFile.getId());', 'headers.put("CamelGoogleDrive.content", theTestFile);', 'File result = requestBodyAndHeaders("direct: assertNotNull("update result", result);']
['update ', ['result']]
camel sample_15404

['File testFile = uploadTestFile();', 'String fileId = testFile.getId();', 'final File file = requestBody("direct: file.setTitle("camel.png");', 'java.io.File fileContent = new java.io.File(TEST_UPLOAD_IMG);', 'FileContent mediaContent = new FileContent(null, fileContent);', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", fileId);', 'headers.put("CamelGoogleDrive.content", file);', 'headers.put("CamelGoogleDrive.mediaContent", mediaContent);', 'File result = requestBodyAndHeaders("direct: assertNotNull("update result", result);']
['update ', ['result']]
camel sample_15404

['public void testWatch() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelGoogleDrive.fileId", null);', 'headers.put("CamelGoogleDrive.contentChannel", null);', 'final com.google.api.services.drive.Drive.Files.Watch result = requestBodyAndHeaders("direct: assertNotNull("watch result", result);']
['watch ', ['result']]
camel sample_15404

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17439

['public void testWSBytesHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new DefaultWebSocketListener() {', 'public void onMessage(byte[] message) {', 'received.add(message);']
['received ', ['arrays', 'tostring', 'message']]
camel sample_17439

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KubernetesDeploymentsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-deployments.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kubernetes-deployments.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_564

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<HL7DataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.hl7.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.hl7.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1053

['public void testUsingJavaExtensions() throws Exception {', 'Object instance = null;', 'try {', 'instance = Class.forName("org.apache.xalan.extensions.XPathFunctionResolverImpl").newInstance();', '} catch (Throwable e) {']
['could not find xalan on the classpath so ignoring this test case ', ['e']]
camel sample_3740

['public void execute(Exchange exchange) throws SmppException {', 'CancelSm cancelSm = createCancelSm(exchange);', 'if (log.isDebugEnabled()) {']
['canceling a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'cancelsm', 'getmessageid']]
camel sample_16910

['public void execute(Exchange exchange) throws SmppException {', 'CancelSm cancelSm = createCancelSm(exchange);', 'if (log.isDebugEnabled()) {', '}', 'try {', 'session.cancelShortMessage( cancelSm.getServiceType(), cancelSm.getMessageId(), TypeOfNumber.valueOf(cancelSm.getSourceAddrTon()), NumberingPlanIndicator.valueOf(cancelSm.getSourceAddrNpi()), cancelSm.getSourceAddr(), TypeOfNumber.valueOf(cancelSm.getDestAddrTon()), NumberingPlanIndicator.valueOf(cancelSm.getDestAddrNpi()), cancelSm.getDestinationAddress());', '} catch (Exception e) {', 'throw new SmppException(e);', '}', 'if (log.isDebugEnabled()) {']
['cancel a short message for exchange id and message id ', ['exchange', 'getexchangeid', 'cancelsm', 'getmessageid']]
camel sample_16910

['public void onFailure(Exchange exchange) {', 'try {', 'if (commitStrategy.rollback(exchange)) {']
['processing failure of exchange id ', ['exchange', 'getexchangeid']]
camel sample_12400

['public void onFailure(Exchange exchange) {', 'try {', 'if (commitStrategy.rollback(exchange)) {', 'if (session != null && session.getTransacted()) {', 'session.rollback();', '}', '}', '} catch (Exception e) {']
['failed to rollback the session ', ['e', 'getmessage']]
camel sample_12400

['public void onComplete(Exchange exchange) {', 'try {', 'if (commitStrategy.commit(exchange)) {']
['processing completion of exchange id ', ['exchange', 'getexchangeid']]
camel sample_12400

['public void onComplete(Exchange exchange) {', 'try {', 'if (commitStrategy.commit(exchange)) {', 'if (session != null && session.getTransacted()) {', 'session.commit();', '}', '}', '} catch (Exception e) {']
['failed to commit the session ', ['e', 'getmessage']]
camel sample_12400

['Gauge<?> gauge = endpoint.getRegistry().getGauges().get(endpoint.getMetricsName());', 'if (gauge instanceof CamelMetricsGauge) {', 'CamelMetricsGauge camelMetricsGauge = (CamelMetricsGauge)gauge;', 'if (endpoint.getSubject() != null) {', 'camelMetricsGauge.setValue(endpoint.getSubject());', '}', '} else {', 'if (endpoint.getSubject() != null) {', 'endpoint.getRegistry().register(endpoint.getMetricsName(), new CamelMetricsGauge(endpoint.getSubject()));', '} else {']
['no subject found for gauge ignoring ', ['endpoint', 'getmetricsname']]
camel sample_13704

['Object subject = exchange.getIn().getHeader(HEADER_GAUGE_SUBJECT, Object.class);', 'if (subject != null) {', 'camelMetricsGauge.setValue(subject);', '}', '} else {', 'Object subject = exchange.getIn().getHeader(HEADER_GAUGE_SUBJECT, Object.class);', 'Object finalSubject = subject != null ? subject : endpoint.getSubject();', 'if (finalSubject != null) {', 'registry.register(metricsName, new CamelMetricsGauge(finalSubject));', '} else {']
['no subject found for gauge ignoring ', ['metricsname']]
camel sample_13704

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HttpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.http.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.http.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1268

['final CountDownLatch logonLatch = new CountDownLatch(2);', 'final CountDownLatch receivedMessageLatch = new CountDownLatch(1);', 'RouteBuilder routes = new RouteBuilder() {', 'public void configure() throws Exception {', 'from("quickfix:examples/inprocess.cfg"). filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)). bean(new CountDownLatchDecrementer("logon", logonLatch));', 'from("quickfix:examples/inprocess.cfg"). filter(PredicateBuilder.or( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived), header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived))). bean(new QuickfixjMessageJsonPrinter());', 'from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER"). filter(header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.EMAIL)). bean(new CountDownLatchDecrementer("message", receivedMessageLatch));', '}', '};', 'context.addRoutes(routes);']
['starting camel context ', []]
camel sample_10651

['}', 'String marketUri = "quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET";', 'Producer producer = context.getEndpoint(marketUri).createProducer();', 'Email email = TestSupport.createEmailMessage("Example");', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(email);', 'producer.process(exchange);', 'if (!receivedMessageLatch.await(5L, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Message did not reach market");', '}']
['message received shutting down camel context ', []]
camel sample_10651

['String marketUri = "quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET";', 'Producer producer = context.getEndpoint(marketUri).createProducer();', 'Email email = TestSupport.createEmailMessage("Example");', 'Exchange exchange = producer.createExchange(ExchangePattern.InOnly);', 'exchange.getIn().setBody(email);', 'producer.process(exchange);', 'if (!receivedMessageLatch.await(5L, TimeUnit.SECONDS)) {', 'throw new IllegalStateException("Message did not reach market");', '}', 'context.stop();']
['example complete ', []]
camel sample_10651

['public void setJmsMessage(Message jmsMessage) {', 'if (jmsMessage != null) {', 'try {', 'setMessageId(jmsMessage.getJMSMessageID());', '} catch (JMSException e) {']
['unable to retrieve jmsmessageid from jms message ', ['e']]
camel sample_12396

['protected String createMessageId() {', 'if (jmsMessage == null) {']
['no javax jms message set so generating a new message id ', []]
camel sample_12396

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {']
['mock exception ', ['exception', 'class', 'maximumredeliveries', 'redelivery', 'count', 'retryattemptedloglevel', 'logginglevel', 'info', 'retriesexhaustedloglevel', 'logginglevel', 'error', 'redeliverydelay', 'to', 'handled', 'true']]
camel sample_10201

['prop.setProperty(StdSchedulerFactory.PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN, "true");', '}', 'if (enableJmx && !prop.containsKey("org.quartz.scheduler.jmx.export")) {', 'prop.put("org.quartz.scheduler.jmx.export", "true");', 'LOG.info("Setting org.quartz.scheduler.jmx.export=true to ensure QuartzScheduler(s) will be enlisted in JMX.");', '}', 'answer = new StdSchedulerFactory(prop);', '}', 'if (LOG.isDebugEnabled()) {', 'String name = prop.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME);']
['creating schedulerfactory with properties ', ['name', 'prop']]
camel sample_15003

['private Properties loadProperties() throws SchedulerException {', 'Properties answer = getProperties();', 'if (answer == null && getPropertiesFile() != null) {']
['loading quartz properties file from ', ['getpropertiesfile']]
camel sample_15003

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'Integer startDelayedSeconds = getAndRemoveParameter(parameters, "startDelayedSeconds", Integer.class);', 'if (startDelayedSeconds != null) {', 'if (this.startDelayedSeconds != 0 && !(this.startDelayedSeconds == startDelayedSeconds)) {']
['a quartz job is already configured with a different startdelayedseconds configuration all quartz jobs must share the same startdelayedseconds configuration cannot apply the startdelayedseconds configuration ', []]
camel sample_15003

['private void createAndInitScheduler() throws SchedulerException {']
['create and initializing scheduler ', []]
camel sample_15003

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduler != null) {', 'if (isInterruptJobsOnShutdown()) {']
['shutting down scheduler will interrupts jobs to shutdown quicker ', []]
camel sample_15003

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduler != null) {', 'if (isInterruptJobsOnShutdown()) {', 'scheduler.shutdown(false);', 'scheduler = null;', '} else {', 'AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);', 'if (number != null && number.get() > 0) {']
['cannot shutdown scheduler as there are still jobs registered ', ['scheduler', 'getschedulername', 'number', 'get']]
camel sample_15003

['protected void doStop() throws Exception {', 'super.doStop();', 'if (scheduler != null) {', 'if (isInterruptJobsOnShutdown()) {', 'scheduler.shutdown(false);', 'scheduler = null;', '} else {', 'AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);', 'if (number != null && number.get() > 0) {', '} else {']
['shutting down scheduler will wait for all jobs to complete first ', []]
camel sample_15003

['public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {', 'if (scheduler == null) {', 'createAndInitScheduler();', '} else {', 'storeCamelContextInQuartzContext();', '}', 'if (!autoStartScheduler) {']
['not starting scheduler because autostartscheduler is set to false ', []]
camel sample_15003

['public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {', 'if (scheduler == null) {', 'createAndInitScheduler();', '} else {', 'storeCamelContextInQuartzContext();', '}', 'if (!autoStartScheduler) {', '} else {', 'if (startDelayedSeconds > 0) {', 'if (scheduler.isStarted()) {']
['the scheduler has already started cannot apply the startdelayedseconds configuration ', []]
camel sample_15003

['if (!autoStartScheduler) {', '} else {', 'if (startDelayedSeconds > 0) {', 'if (scheduler.isStarted()) {', '} else {', 'LOG.info("Starting scheduler with startDelayedSeconds={}", startDelayedSeconds);', 'scheduler.startDelayed(startDelayedSeconds);', '}', '} else {', 'if (scheduler.isStarted()) {']
['the scheduler has already been started ', []]
camel sample_15003

['} else {', 'if (startDelayedSeconds > 0) {', 'if (scheduler.isStarted()) {', '} else {', 'LOG.info("Starting scheduler with startDelayedSeconds={}", startDelayedSeconds);', 'scheduler.startDelayed(startDelayedSeconds);', '}', '} else {', 'if (scheduler.isStarted()) {', '} else {']
['starting scheduler ', []]
camel sample_15003

['public static String getSystemProperty(String name, String defaultValue) {', 'try {', 'return System.getProperty(name, defaultValue);', '} catch (Exception e) {', 'if (LOG.isDebugEnabled()) {']
['caught security exception accessing system property will use default value ', ['name', 'defaultvalue', 'e']]
camel sample_4343

['clazz = doLoadClass(name, Thread.currentThread().getContextClassLoader());', '}', 'if (clazz == null) {', 'clazz = doLoadClass(name, loader);', '}', 'if (clazz == null) {', 'clazz = doLoadClass(name, ObjectHelper.class.getClassLoader());', '}', 'if (clazz == null) {', 'if (needToWarn) {']
['cannot find class ', ['name']]
camel sample_4343

['}', 'if (clazz == null) {', 'clazz = doLoadClass(name, loader);', '}', 'if (clazz == null) {', 'clazz = doLoadClass(name, ObjectHelper.class.getClassLoader());', '}', 'if (clazz == null) {', 'if (needToWarn) {', '} else {']
['cannot find class ', ['name']]
camel sample_4343

['private static Class<?> doLoadClass(String name, ClassLoader loader) {', 'ObjectHelper.notEmpty(name, "name");', 'if (loader == null) {', 'return null;', '}', 'try {']
['loading class using classloader ', ['name', 'loader']]
camel sample_4343

['private static Class<?> doLoadClass(String name, ClassLoader loader) {', 'ObjectHelper.notEmpty(name, "name");', 'if (loader == null) {', 'return null;', '}', 'try {', 'return loader.loadClass(name);', '} catch (ClassNotFoundException e) {', 'if (LOG.isTraceEnabled()) {']
['cannot load class using classloader ', ['name', 'loader', 'e']]
camel sample_4343

['private synchronized void stopConsumer(Route route) {', 'try {', 'if (!suspendedRoutes.contains(route)) {']
['stopping consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_9571

['private synchronized void startAllStoppedConsumers() {', 'try {', 'for (Route route : suspendedRoutes) {']
['starting consumer for ', ['route', 'getid', 'route', 'getconsumer']]
camel sample_9571

['public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {', 'CamelContext context = exchange != null ? exchange.getContext() : null;', 'ClassLoader appcl = context != null ? context.getApplicationContextClassLoader() : null;', 'T result;', 'ClassLoader tccl = Thread.currentThread().getContextClassLoader();', 'try {', 'if (appcl != null && appcl != tccl) {']
['switching tccl to ', ['appcl']]
camel sample_9434

['Class<?> sourceType = value.getClass();', 'ClassMappingMetadata metadata = getClassMappingMetadata(sourceType, type);', 'if (metadata != null) {', 'mapId = metadata.getMapId();', '}', '}', 'result = mapper.map(value, type, mapId);', '} finally {', 'if (appcl != null && appcl != tccl) {', 'Thread.currentThread().setContextClassLoader(tccl);']
['restored tccl to ', ['tccl']]
camel sample_9434

['int actualExchanges = exchangeCounter.decrementAndGet();', 'if (actualExchanges == 0) {', 'try {', 'closeFileInputStreams();', 'if (outputStream != null) {', 'outputStream.close();', '}', 'try {', 'cleanUpTempFile();', '} catch (Exception e) {']
['error deleting temporary cache file this exception will be ignored ', ['tempfile', 'e']]
camel sample_4206

['try {', 'closeFileInputStreams();', 'if (outputStream != null) {', 'outputStream.close();', '}', 'try {', 'cleanUpTempFile();', '} catch (Exception e) {', '}', '} catch (Exception e) {']
['error closing streams this exception will be ignored ', ['e']]
camel sample_4206

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<RssDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.rss.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.rss.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_499

['protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {', 'in.markReaderIndex();', 'boolean frameDecoded = false;', 'try {', 'if (!in.isReadable(FRAME_HEADER_LENGTH)) {', 'return;', '}', 'int frameVersion = in.readUnsignedByte();', 'sessionHandler.versionRead(frameVersion);', 'int frameType = in.readUnsignedByte();']
['received a lumberjack frame of type ', ['char', 'frametype']]
camel sample_7580

['case TYPE_DATA: frameDecoded = handleDataFrame(in, out);', 'break;', 'case TYPE_WINDOW: frameDecoded = handleWindowFrame(in);', 'break;', 'case TYPE_COMPRESS: frameDecoded = handleCompressedFrame(ctx, in, out);', 'break;', 'default: throw new RuntimeException("Unsupported frame type=" + frameType);', '}', '} finally {', 'if (!frameDecoded) {']
['not enough data to decode a complete frame retry when more data is available reader index was ', ['in', 'readerindex']]
camel sample_7580

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<MimeMultipartDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.mime-multipart.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.mime-multipart.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_724

['public void test() throws Exception {', 'String result = template.requestBody("direct:out", "hello", String.class);', 'Assert.assertEquals("hello", result);']
['sleeping for seconds and no netty exception should occur ', []]
camel sample_10153

['protected int poll() throws Exception {', 'CurrencyPair pair = getEndpoint().getConfiguration().getCurrencyPair();']
['going to execute ticker query for ', ['pair']]
camel sample_8462

['private String getPropertyValue(String key, String input) {', 'if (propertiesComponent != null) {', 'for (PropertiesFunction function : propertiesComponent.getFunctions().values()) {', 'String token = function.getName() + ":";', 'if (key.startsWith(token)) {', 'String remainder = key.substring(token.length());']
['property with key is applied by function ', ['key', 'function', 'getname']]
camel sample_4912

['if (propertiesComponent != null) {', 'for (PropertiesFunction function : propertiesComponent.getFunctions().values()) {', 'String token = function.getName() + ":";', 'if (key.startsWith(token)) {', 'String remainder = key.substring(token.length());', 'String value = function.apply(remainder);', 'if (value == null) {', 'throw new IllegalArgumentException("Property with key [" + key + "] using function [" + function.getName() + "]" + " returned null value which is not allowed, from input: " + input);', '} else {', 'if (log.isDebugEnabled()) {']
['property with key applied by function ', ['new', 'object', 'key', 'function', 'getname', 'value']]
camel sample_4912

['}', 'String defaultValue = null;', 'if (defaultFallbackEnabled && key.contains(GET_OR_ELSE_TOKEN)) {', 'defaultValue = ObjectHelper.after(key, GET_OR_ELSE_TOKEN);', 'key = ObjectHelper.before(key, GET_OR_ELSE_TOKEN);', '}', 'String augmentedKey = getAugmentedKey(key);', 'boolean shouldFallback = fallbackToUnaugmentedProperty && !key.equals(augmentedKey);', 'String value = doGetPropertyValue(augmentedKey);', 'if (value == null && shouldFallback) {']
['property with key not found attempting with unaugmented key ', ['augmentedkey', 'key']]
camel sample_4912

['defaultValue = ObjectHelper.after(key, GET_OR_ELSE_TOKEN);', 'key = ObjectHelper.before(key, GET_OR_ELSE_TOKEN);', '}', 'String augmentedKey = getAugmentedKey(key);', 'boolean shouldFallback = fallbackToUnaugmentedProperty && !key.equals(augmentedKey);', 'String value = doGetPropertyValue(augmentedKey);', 'if (value == null && shouldFallback) {', 'value = doGetPropertyValue(key);', '}', 'if (value == null && defaultValue != null) {']
['property with key not found using default value ', ['augmentedkey', 'defaultvalue']]
camel sample_4912

['private String getAugmentedKey(String key) {', 'String augmentedKey = key;', 'if (propertyPrefix != null) {']
['augmenting property key with prefix ', ['key', 'propertyprefix']]
camel sample_4912

['private String getAugmentedKey(String key) {', 'String augmentedKey = key;', 'if (propertyPrefix != null) {', 'augmentedKey = propertyPrefix + augmentedKey;', '}', 'if (propertySuffix != null) {']
['augmenting property key with suffix ', ['key', 'propertysuffix']]
camel sample_4912

['private String doGetPropertyValue(String key) {', 'if (ObjectHelper.isEmpty(key)) {', 'return parseProperty(key, null, properties);', '}', 'String value = null;', 'int mode = propertiesComponent != null ? propertiesComponent.getSystemPropertiesMode() : PropertiesComponent.SYSTEM_PROPERTIES_MODE_OVERRIDE;', 'if (mode == PropertiesComponent.SYSTEM_PROPERTIES_MODE_OVERRIDE) {', 'value = System.getProperty(key);', 'if (value != null) {']
['found a jvm system property with value to be used ', ['key', 'value']]
camel sample_4912

['String value = null;', 'int mode = propertiesComponent != null ? propertiesComponent.getSystemPropertiesMode() : PropertiesComponent.SYSTEM_PROPERTIES_MODE_OVERRIDE;', 'if (mode == PropertiesComponent.SYSTEM_PROPERTIES_MODE_OVERRIDE) {', 'value = System.getProperty(key);', 'if (value != null) {', '}', '}', 'if (value == null && properties != null) {', 'value = properties.getProperty(key);', 'if (value != null) {']
['found property with value to be used ', ['key', 'value']]
camel sample_4912

['}', '}', 'if (value == null && properties != null) {', 'value = properties.getProperty(key);', 'if (value != null) {', '}', '}', 'if (value == null && mode == PropertiesComponent.SYSTEM_PROPERTIES_MODE_FALLBACK) {', 'value = System.getProperty(key);', 'if (value != null) {']
['found a jvm system property with value to be used ', ['key', 'value']]
camel sample_4912

['public void onContextStop(CamelContext context) {']
['camelcontext has been shutdown triggering shutdown of the jvm ', ['context', 'getname']]
camel sample_5600

['protected AggregationStrategyMethodInfo createMethodInfo() {', 'Class<?>[] parameterTypes = method.getParameterTypes();', 'int size = parameterTypes.length;', 'if (LOG.isTraceEnabled()) {']
['creating methodinfo for class method having parameters ', ['new', 'object', 'type', 'method', 'size']]
camel sample_4441

['public Olingo2SampleServer(int port, String resourcePath) {', 'this.port = port;', 'server = new org.eclipse.jetty.server.Server(port);', 'WebAppContext webappcontext = new WebAppContext();', 'String contextPath = null;', 'try {', 'contextPath = Olingo2SampleServer.class.getResource(resourcePath).toURI().getPath();', '} catch (URISyntaxException e) {']
['unable to read the resource at ', ['resourcepath', 'e']]
camel sample_14540

['public void start() throws Exception {', 'server.start();']
['olingo sample server started at port ', ['port']]
camel sample_14540

['static void generateSampleData(String serviceUrl) throws IOException {', 'try {', 'Class<?> clz = Class.forName("org.apache.olingo.sample.annotation.util.AnnotationSampleDataGenerator");', 'Method m = clz.getMethod("generateData", String.class);', 'm.invoke(null, serviceUrl);', '} catch (Throwable t) {']
['unable to load the required sample class ', ['t']]
camel sample_14540

['public PollingConsumer createPollingConsumer() throws Exception {', 'if (LOG.isDebugEnabled()) {']
['creating eventdrivenpollingconsumer with queuesize blockwhenfull blocktimeout ', ['new', 'object', 'getpollingconsumerqueuesize', 'ispollingconsumerblockwhenfull', 'getpollingconsumerblocktimeout']]
camel sample_4011

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GrpcComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.grpc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.grpc.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1213

['public void readRequest(HttpServletRequest request, HttpMessage message) {']
['readrequest ', ['request']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http method ', ['request', 'getmethod']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http query ', ['request', 'getquerystring']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http url ', ['request', 'getrequesturl']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http uri ', ['request', 'getrequesturi']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http path ', ['rawpath']]
camel sample_12882

['String rawPath = getRawPath(request);', 'headers.put(Exchange.HTTP_METHOD, request.getMethod());', 'headers.put(Exchange.HTTP_QUERY, request.getQueryString());', 'headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());', 'headers.put(Exchange.HTTP_URI, request.getRequestURI());', 'headers.put(Exchange.HTTP_PATH, rawPath);', 'if (!headers.containsKey(Exchange.CONTENT_TYPE)) {', 'headers.put(Exchange.CONTENT_TYPE, request.getContentType());', '}', 'if (LOG.isTraceEnabled()) {']
['http content type ', ['headers', 'get', 'exchange', 'content', 'type']]
camel sample_12882

['protected void readHeaders(HttpServletRequest request, HttpMessage message) {']
['readheaders ', ['request']]
camel sample_12882

['protected void readBody(HttpServletRequest request, HttpMessage message) {']
['readbody ', ['request']]
camel sample_12882

['protected void readFormUrlEncodedBody(HttpServletRequest request, HttpMessage message) throws UnsupportedEncodingException {']
['readformurlencodedbody ', ['request']]
camel sample_12882

['protected void readFormUrlEncodedBody(HttpServletRequest request, HttpMessage message) throws UnsupportedEncodingException {', 'if (mapHttpMessageBody && mapHttpMessageHeaders) {']
['http method with content type ', ['request', 'getmethod', 'request', 'getcontenttype']]
camel sample_12882

['if (is != null) {', 'ServletOutputStream os = response.getOutputStream();', 'if (!checkChunked(message, exchange)) {', 'CachedOutputStream stream = new CachedOutputStream(exchange);', 'try {', 'int len = copyStream(is, stream, response.getBufferSize());', 'response.setContentLength(len);', 'OutputStream current = stream.getCurrentStream();', 'if (current instanceof ByteArrayOutputStream) {', 'if (LOG.isDebugEnabled()) {']
['streaming direct response in non chunked mode with content length ', []]
camel sample_12882

['int len = copyStream(is, stream, response.getBufferSize());', 'response.setContentLength(len);', 'OutputStream current = stream.getCurrentStream();', 'if (current instanceof ByteArrayOutputStream) {', 'if (LOG.isDebugEnabled()) {', '}', 'ByteArrayOutputStream bos = (ByteArrayOutputStream) current;', 'bos.writeTo(os);', '} else {', 'if (LOG.isDebugEnabled()) {']
['streaming response in non chunked mode with content length and buffer size ', ['len', 'len']]
camel sample_12882

['} else {', 'if (LOG.isDebugEnabled()) {', '}', 'copyStream(stream.getInputStream(), os, len);', '}', '} finally {', 'IOHelper.close(is, os);', '}', '} else {', 'if (LOG.isDebugEnabled()) {']
['streaming response in chunked mode with buffer size ', ['response', 'getbuffersize']]
camel sample_12882

['copyStream(is, os, response.getBufferSize());', '}', '} else {', 'String data = message.getBody(String.class);', 'if (data != null) {', 'String charset = IOHelper.getCharsetName(exchange, true);', 'final int dataByteLength = data.getBytes(charset).length;', 'response.setCharacterEncoding(charset);', 'response.setContentLength(dataByteLength);', 'if (LOG.isDebugEnabled()) {']
['writing response in non chunked mode as plain text with content length and buffer size ', ['databytelength', 'response', 'getbuffersize']]
camel sample_12882

['byte[] bytes;', 'try {', 'bytes = message.getMandatoryBody(byte[].class);', '} catch (InvalidPayloadException e) {', 'throw ObjectHelper.wrapRuntimeCamelException(e);', '}', 'byte[] data = GZIPHelper.compressGZIP(bytes);', 'ServletOutputStream os = response.getOutputStream();', 'try {', 'if (LOG.isDebugEnabled()) {']
['streaming response as gzip in non chunked mode with content length and buffer size ', ['data', 'length', 'response', 'getbuffersize']]
camel sample_12882

['public Object parseBody(HttpMessage httpMessage) throws IOException {', 'HttpServletRequest request = httpMessage.getRequest();', 'int len = request.getContentLength();']
['httpservletrequest content length ', ['len']]
camel sample_12882

['protected RouteContainer assertParseAsJaxb(String uri) throws JAXBException {', 'Object value = parseUri(uri);', 'RouteContainer context = assertIsInstanceOf(RouteContainer.class, value);']
['found ', ['context']]
camel sample_3691

['protected RestContainer assertParseRestAsJaxb(String uri) throws JAXBException {', 'Object value = parseUri(uri);', 'RestContainer context = assertIsInstanceOf(RestContainer.class, value);']
['found ', ['context']]
camel sample_3691

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<CryptoDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.crypto.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.crypto.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_661

['protected void before() throws Throwable {']
['starting up mock aws daemon ', []]
camel sample_8177

['protected void after() {']
['shutting down mock aws daemon ', []]
camel sample_8177

['protected void after() {', 'socketListener.close();', 'executorService.shutdown();', 'try {', 'if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {', 'executorService.shutdownNow();', 'if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {']
['could not terminate udp server ', []]
camel sample_8177

['public void run() {', 'try {']
['starting udp socket listening on port ', []]
camel sample_8177

['public void run() {', 'try {', 'serverSocket = new DatagramSocket(2000);', 'StringBuilder sb = new StringBuilder();', 'while (!done) {', 'byte[] receiveData = new byte[2048];', 'DatagramPacket receivedPacket = new DatagramPacket(receiveData, receiveData.length);', 'serverSocket.receive(receivedPacket);']
['receiving udp data ', []]
camel sample_8177

['byte[] receiveData = new byte[2048];', 'DatagramPacket receivedPacket = new DatagramPacket(receiveData, receiveData.length);', 'serverSocket.receive(receivedPacket);', 'sb.append(new String(receivedPacket.getData()));', 'String locSegment = null;', 'try {', 'String raw = sb.toString().trim();', 'String[] segments = raw.split("\\\\n");', 'for (String segment : segments) {', 'locSegment = segment;']
['processing received segment ', ['segment']]
camel sample_8177

['serverSocket.receive(receivedPacket);', 'sb.append(new String(receivedPacket.getData()));', 'String locSegment = null;', 'try {', 'String raw = sb.toString().trim();', 'String[] segments = raw.split("\\\\n");', 'for (String segment : segments) {', 'locSegment = segment;', 'if (!"".equals(segment)) {', 'if (!segment.endsWith("}") || StringUtils.countMatches(segment, "{") != StringUtils.countMatches(segment, "}") || StringUtils.countMatches(segment, "[") != StringUtils.countMatches(segment, "]")) {']
['skipping incomplete content ', ['segment']]
camel sample_8177

['try {', 'String raw = sb.toString().trim();', 'String[] segments = raw.split("\\\\n");', 'for (String segment : segments) {', 'locSegment = segment;', 'if (!"".equals(segment)) {', 'if (!segment.endsWith("}") || StringUtils.countMatches(segment, "{") != StringUtils.countMatches(segment, "}") || StringUtils.countMatches(segment, "[") != StringUtils.countMatches(segment, "]")) {', 'continue;', '}', 'if (segment.contains("format") && segment.contains("version")) {']
['skipping format and version json ', []]
camel sample_8177

['String raw = sb.toString().trim();', 'String[] segments = raw.split("\\\\n");', 'for (String segment : segments) {', 'locSegment = segment;', 'if (!"".equals(segment)) {', 'if (!segment.endsWith("}") || StringUtils.countMatches(segment, "{") != StringUtils.countMatches(segment, "}") || StringUtils.countMatches(segment, "[") != StringUtils.countMatches(segment, "]")) {', 'continue;', '}', 'if (segment.contains("format") && segment.contains("version")) {', '} else {']
['converting segment to a java object ', ['segment']]
camel sample_8177

['String raw = sb.toString().trim();', 'String[] segments = raw.split("\\\\n");', 'for (String segment : segments) {', 'locSegment = segment;', 'if (!"".equals(segment)) {', 'if (!segment.endsWith("}") || StringUtils.countMatches(segment, "{") != StringUtils.countMatches(segment, "}") || StringUtils.countMatches(segment, "[") != StringUtils.countMatches(segment, "]")) {', 'continue;', '}', 'if (segment.contains("format") && segment.contains("version")) {', '} else {']
['original json content ', ['segment']]
camel sample_8177

['}', 'testTrace.withSegment(convertData(json));', 'receivedTraces.put(traceId, testTrace);', '}', 'sb.delete(0, segment.length());', "if (sb.length() > 1 && sb.charAt(0) == '\\n') {", 'sb.deleteCharAt(0);', '}', '}', '}']
['item received json content raw ', ['receivedtraces', 'size', 'receivedtraces', 'raw']]
camel sample_8177

['testTrace.withSegment(convertData(json));', 'receivedTraces.put(traceId, testTrace);', '}', 'sb.delete(0, segment.length());', "if (sb.length() > 1 && sb.charAt(0) == '\\n') {", 'sb.deleteCharAt(0);', '}', '}', '}', '} catch (Exception jsonEx) {']
['could not convert segment to a java object ', ['locsegment', 'jsonex']]
camel sample_8177

['sb.delete(0, segment.length());', "if (sb.length() > 1 && sb.charAt(0) == '\\n') {", 'sb.deleteCharAt(0);', '}', '}', '}', '} catch (Exception jsonEx) {', '}', '}', '} catch (SocketException sex) {']
['udp socket closed ', []]
camel sample_8177

["if (sb.length() > 1 && sb.charAt(0) == '\\n') {", 'sb.deleteCharAt(0);', '}', '}', '}', '} catch (Exception jsonEx) {', '}', '}', '} catch (SocketException sex) {', '} catch (Exception ex) {']
['udp socket failed due to ', ['ex', 'getlocalizedmessage', 'ex']]
camel sample_8177

['private void close() {', 'done = true;', 'if (null != serverSocket) {']
['shutting down udp socket ', []]
camel sample_8177

['public void run() {', 'try {', 'runMethodWithoutCatchingExceptions();', '} catch (NoSuchMethodException e) {']
['class does not have a main method ', ['name', 'main', 'e', 'e']]
camel sample_16341

['public void run() {', 'try {', 'runMethodWithoutCatchingExceptions();', '} catch (NoSuchMethodException e) {', '} catch (IllegalAccessException e) {']
['failed to run reason ', ['this', 'e', 'e']]
camel sample_16341

['public void run() {', 'try {', 'runMethodWithoutCatchingExceptions();', '} catch (NoSuchMethodException e) {', '} catch (IllegalAccessException e) {', '} catch (InvocationTargetException e) {', 'Throwable throwable = e.getTargetException();']
['failed to run reason ', ['this', 'throwable', 'throwable']]
camel sample_16341

['public void write(List<? extends I> items) throws Exception {', 'for (I item : items) {']
['writing item ', ['item']]
camel sample_12752

['public void write(List<? extends I> items) throws Exception {', 'for (I item : items) {', 'producerTemplate.sendBody(endpointUri, item);']
['wrote item ', []]
camel sample_12752

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'int connectTimeout = 500;', 'int responseTimeout = 5000;', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";']
['test route complete ', ['oncompleteonly', 'log', 'logginglevel', 'info', 'routeid', 'to', 'complete']]
camel sample_13840

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'int connectTimeout = 500;', 'int responseTimeout = 5000;', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";']
['test route failed ', ['onfailureonly', 'log', 'logginglevel', 'info', 'routeid', 'to', 'failure']]
camel sample_13840

['protected RouteBuilder createRouteBuilder() {', 'mllpClient.setMllpHost("localhost");', 'mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());', 'return new RouteBuilder() {', 'int connectTimeout = 500;', 'int responseTimeout = 5000;', 'public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";']
['mllp mllpclient getmllphost mllpclient getmllpport connecttimeout responsetimeout routeid routeid log logginglevel info routeid message to target routeid consumer log logginglevel info routeid message to result ', ['test', 'route', 'received', 'target', 'from', 'jms', 'test', 'jms', 'consumer', 'received']]
camel sample_13840

['models.add(model);', '}', '}', 'Collections.sort(models, new EipComparator());', 'long deprecated = models.stream() .filter(EipModel::isDeprecated) .count();', 'File file = new File(readmeCoreDir, "readme-eip.adoc");', 'boolean exists = file.exists();', 'String changed = templateEips(models, deprecated);', 'boolean updated = updateEips(file, changed);', 'if (updated) {']
['updated readme eip adoc file ', ['file']]
camel sample_118

['}', '}', 'Collections.sort(models, new EipComparator());', 'long deprecated = models.stream() .filter(EipModel::isDeprecated) .count();', 'File file = new File(readmeCoreDir, "readme-eip.adoc");', 'boolean exists = file.exists();', 'String changed = templateEips(models, deprecated);', 'boolean updated = updateEips(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme eip adoc file ', ['file']]
camel sample_118

['}', 'Collections.sort(models, new EipComparator());', 'long deprecated = models.stream() .filter(EipModel::isDeprecated) .count();', 'File file = new File(readmeCoreDir, "readme-eip.adoc");', 'boolean exists = file.exists();', 'String changed = templateEips(models, deprecated);', 'boolean updated = updateEips(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme eip adoc file ', ['file']]
camel sample_118

['File file;', 'if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateComponents(components, count, deprecated);', 'boolean updated = updateComponents(file, changed);', 'if (updated) {']
['updated readme adoc file ', ['file']]
camel sample_118

['if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateComponents(components, count, deprecated);', 'boolean updated = updateComponents(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme adoc file ', ['file']]
camel sample_118

['file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateComponents(components, count, deprecated);', 'boolean updated = updateComponents(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme adoc file ', ['file']]
camel sample_118

['others.add(model);', '}', 'Collections.sort(others, new OtherComparator());', 'int count = others.stream() .map(OtherModel::getArtifactId) .collect(toSet()).size();', 'long deprecated = others.stream() .filter(o -> "true".equals(o.getDeprecated())) .count();', 'File file = new File(readmeComponentsDir, "readme.adoc");', 'boolean exists = file.exists();', 'String changed = templateOthers(others, count, deprecated);', 'boolean updated = updateOthers(file, changed);', 'if (updated) {']
['updated readme adoc file ', ['file']]
camel sample_118

['}', 'Collections.sort(others, new OtherComparator());', 'int count = others.stream() .map(OtherModel::getArtifactId) .collect(toSet()).size();', 'long deprecated = others.stream() .filter(o -> "true".equals(o.getDeprecated())) .count();', 'File file = new File(readmeComponentsDir, "readme.adoc");', 'boolean exists = file.exists();', 'String changed = templateOthers(others, count, deprecated);', 'boolean updated = updateOthers(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme adoc file ', ['file']]
camel sample_118

['Collections.sort(others, new OtherComparator());', 'int count = others.stream() .map(OtherModel::getArtifactId) .collect(toSet()).size();', 'long deprecated = others.stream() .filter(o -> "true".equals(o.getDeprecated())) .count();', 'File file = new File(readmeComponentsDir, "readme.adoc");', 'boolean exists = file.exists();', 'String changed = templateOthers(others, count, deprecated);', 'boolean updated = updateOthers(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme adoc file ', ['file']]
camel sample_118

['File file;', 'if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateDataFormats(dataFormats, count, deprecated);', 'boolean updated = updateDataFormats(file, changed);', 'if (updated) {']
['updated readme adoc file ', ['file']]
camel sample_118

['if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateDataFormats(dataFormats, count, deprecated);', 'boolean updated = updateDataFormats(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme adoc file ', ['file']]
camel sample_118

['file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateDataFormats(dataFormats, count, deprecated);', 'boolean updated = updateDataFormats(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme adoc file ', ['file']]
camel sample_118

['File file;', 'if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateLanguages(languages, count, deprecated);', 'boolean updated = updateLanguages(file, changed);', 'if (updated) {']
['updated readme adoc file ', ['file']]
camel sample_118

['if (coreOnly) {', 'file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateLanguages(languages, count, deprecated);', 'boolean updated = updateLanguages(file, changed);', 'if (updated) {', '} else if (exists) {']
['no changes to readme adoc file ', ['file']]
camel sample_118

['file = new File(readmeCoreDir, "readme.adoc");', '} else {', 'file = new File(readmeComponentsDir, "readme.adoc");', '}', 'boolean exists = file.exists();', 'String changed = templateLanguages(languages, count, deprecated);', 'boolean updated = updateLanguages(file, changed);', 'if (updated) {', '} else if (exists) {', '} else {']
['no readme adoc file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['cannot find markers in file ', ['file']]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['add the following markers ', []]
camel sample_118

['String existing = StringHelper.between(text, " if (existing != null) {', 'existing = existing.trim();', 'changed = changed.trim();', 'if (existing.equals(changed)) {', 'return false;', '} else {', 'String before = StringHelper.before(text, " String after = StringHelper.after(text, " text = before + " writeText(file, text);', 'return true;', '}', '} else {']
['t getlog warn ', ['t', 'return', 'false']]
camel sample_118

['SyndFeed oldFeed = oldExchange.getIn().getBody(SyndFeed.class);', 'SyndFeed newFeed = newExchange.getIn().getBody(SyndFeed.class);', 'if (oldFeed != null && newFeed != null) {', 'List<SyndEntryImpl> oldEntries = CastUtils.cast(oldFeed.getEntries());', 'List<SyndEntryImpl> newEntries = CastUtils.cast(newFeed.getEntries());', 'List<SyndEntryImpl> mergedList = new ArrayList<SyndEntryImpl>(oldEntries.size() + newEntries.size());', 'mergedList.addAll(oldEntries);', 'mergedList.addAll(newEntries);', 'oldFeed.setEntries(mergedList);', '} else {']
['could not merge exchanges one body was null ', []]
camel sample_12302

['} finally {', 'deleteTestFile();', '}', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:boxEvents");', 'mockEndpoint.expectedMinimumMessageCount(2);', 'mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS));', 'mockEndpoint.assertIsSatisfied();', 'final List<Exchange> exchanges = mockEndpoint.getExchanges();', 'assertNotNull("poll result", exchanges);', 'assertFalse("poll result", exchanges.isEmpty());']
['poll result ', ['exchanges']]
camel sample_17415

['exchange.setException(e);', 'logTransactionRollback(redelivered, ids, e, false);', '} finally {', 'exchange.getUnitOfWork().endTransactedBy(transactionKey);', '}', 'Boolean onlyLast = (Boolean) exchange.removeProperty(Exchange.ROLLBACK_ONLY_LAST);', 'if (onlyLast != null && onlyLast) {', 'if (log.isDebugEnabled()) {', 'Exception cause = exchange.getException();', 'if (cause != null) {']
['transaction rollback redelivered for due exchange was marked for rollbackonlylast and caught ', ['transactionkey', 'redelivered', 'ids', 'cause']]
camel sample_9859

['logTransactionRollback(redelivered, ids, e, false);', '} finally {', 'exchange.getUnitOfWork().endTransactedBy(transactionKey);', '}', 'Boolean onlyLast = (Boolean) exchange.removeProperty(Exchange.ROLLBACK_ONLY_LAST);', 'if (onlyLast != null && onlyLast) {', 'if (log.isDebugEnabled()) {', 'Exception cause = exchange.getException();', 'if (cause != null) {', '} else {']
['transaction rollback redelivered for due exchange was marked for rollbackonlylast ', ['transactionkey', 'redelivered', 'ids']]
camel sample_9859

['public void run() throws Throwable {', 'Throwable rce;', 'processByErrorHandler(exchange);', 'if (exchange.getException() != null || exchange.isRollbackOnly()) {', 'if (exchange.getException() != null) {', 'rce = exchange.getException();', '} else {', 'rce = new TransactionRolledbackException();', '}', 'if (log.isTraceEnabled()) {']
['throwing runtime exception to force transaction to rollback on ', ['transactionpolicy']]
camel sample_9859

['public void prepareShutdown(boolean suspendOnly, boolean forced) {']
['prepare shutdown on error handler ', ['this']]
camel sample_9859

['protected List<Status> doDirect() throws TwitterException {']
['dodirect getmentionstimeline ', []]
camel sample_14239

['public void process(Exchange exchange) throws Exception {', 'if (endpoint.getConsumer() == null) {', 'if (endpoint.isFailIfNoConsumers()) {', 'throw new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange);', '} else {']
['message ignored no consumers available on endpoint ', ['endpoint']]
camel sample_4768

['public boolean process(Exchange exchange, AsyncCallback callback) {', 'if (endpoint.getConsumer() == null) {', 'if (endpoint.isFailIfNoConsumers()) {', 'exchange.setException(new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange));', '} else {']
['message ignored no consumers available on endpoint ', ['endpoint']]
camel sample_4768

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtomixMessagingComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-messaging.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atomix-messaging.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1090

['public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {', 'ObjectHelper.notNull(graph, "The object to marshal must be provided");', 'List<Map<String, Object>> data = (List<Map<String, Object>>) graph;', 'if (data.isEmpty()) {']
['no data to marshal as the list is empty ', []]
camel sample_14669

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AMQPComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.amqp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.amqp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1244

['return;', '}', 'try {', 'doHandleDelivery(consumerTag, envelope, properties, body);', '} finally {', 'if (!consumer.getEndpoint().isAutoAck()) {', 'lock.release();', '}', '}', '} catch (InterruptedException e) {']
['thread interrupted ', []]
camel sample_14147

['public void doHandleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {', 'Exchange exchange = consumer.getEndpoint().createRabbitExchange(envelope, properties, body);', 'consumer.getEndpoint().getMessageConverter().mergeAmqpProperties(exchange, properties);', 'boolean sendReply = properties.getReplyTo() != null;', 'if (sendReply && !exchange.getPattern().isOutCapable()) {']
['in an inout capable route ', []]
camel sample_14147

['}', 'if (tag != null && isChannelOpen()) {', 'channel.basicCancel(tag);', '}', 'try {', 'lock.acquire();', 'if (isChannelOpen()) {', 'channel.close();', '}', '} catch (TimeoutException e) {']
['timeout occured ', []]
camel sample_14147

['channel.basicCancel(tag);', '}', 'try {', 'lock.acquire();', 'if (isChannelOpen()) {', 'channel.close();', '}', '} catch (TimeoutException e) {', 'throw e;', '} catch (InterruptedException e1) {']
['thread interrupted ', []]
camel sample_14147

['public void handleCancelOk(String consumerTag) {']
['received cancelok signal on the rabbitmq channel ', []]
camel sample_14147

['public void handleCancel(String consumerTag) throws IOException {']
['received cancel signal on the rabbitmq channel ', []]
camel sample_14147

['public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {']
['received shutdown signal on the rabbitmq channel ', []]
camel sample_14147

['public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {', 'if (!sig.isInitiatedByApplication()) {', 'boolean connected = false;', 'while (!connected && !stopping) {', 'try {', 'reconnect();', 'connected = true;', '} catch (IOException | TimeoutException e) {']
['unable to obtain a rabbitmq channel will try again ', []]
camel sample_14147

['public void handleRecoverOk(String consumerTag) {']
['received recover ok signal on the rabbitmq channel ', []]
camel sample_14147

['public void reconnect() throws IOException, TimeoutException {', 'if (isChannelOpen()) {', 'return;', '} else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {', 'throw new IOException("Waiting for channel to re-open.");', '} else if (channel == null || !isAutomaticRecoveryEnabled()) {']
['attempting to open a new rabbitmq channel ', []]
camel sample_14147

['private Channel openChannel(Connection conn) throws IOException {']
['creating channel ', []]
camel sample_14147

['private Channel openChannel(Connection conn) throws IOException {', 'Channel channel = conn.createChannel();']
['created channel ', ['channel']]
camel sample_14147

['public CuratorFramework getObject() throws Exception {']
['connecting to zookeeper on ', ['connectstring']]
camel sample_9674

['public CuratorFramework getObject() throws Exception {', 'CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder() .connectString(connectString) .retryPolicy(new ExponentialBackoffRetry(5, 10)) .connectionTimeoutMs(getTimeout());', 'this.curator = builder.build();']
['starting curator ', ['curator']]
camel sample_9674

['} else if (org.jsmpp.bean.OptionalParameter.Byte.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), Byte.valueOf(((org.jsmpp.bean.OptionalParameter.Byte) optPara).getValue()));', '} else if (org.jsmpp.bean.OptionalParameter.Short.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), Short.valueOf(((org.jsmpp.bean.OptionalParameter.Short) optPara).getValue()));', '} else if (org.jsmpp.bean.OptionalParameter.Int.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), Integer.valueOf(((org.jsmpp.bean.OptionalParameter.Int) optPara).getValue()));', '} else if (Null.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), null);', '}', '} else {']
['skipping optional parameter with tag because it was not recogized ', ['optpara', 'tag']]
camel sample_16896

['} else if (org.jsmpp.bean.OptionalParameter.Short.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), Short.valueOf(((org.jsmpp.bean.OptionalParameter.Short) optPara).getValue()));', '} else if (org.jsmpp.bean.OptionalParameter.Int.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), Integer.valueOf(((org.jsmpp.bean.OptionalParameter.Int) optPara).getValue()));', '} else if (Null.class.isInstance(optPara)) {', 'optParams.put(valueOfTag.toString(), null);', '}', '} else {', '}', '} catch (IllegalArgumentException e) {']
['skipping optional parameter with tag due ', ['e', 'getmessage', 'optpara', 'tag']]
camel sample_16896

['PetStoreComponent connector = new PetStoreComponent();', 'connector.setCamelContext(camelContext);', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<PetStoreComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.petstore.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.petstore.customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_46

['PetStoreComponent connector = new PetStoreComponent(entry.getKey());', 'connector.setCamelContext(camelContext);', 'try {', 'IntrospectionSupport.getProperties(entry.getValue(), parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);', 'connector.setOptions(parameters);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ConnectorCustomizer<PetStoreComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.petstore." + entry.getKey() + ".customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.connector.customizer", "camel.connector.petstore." + entry.getKey() + ".customizer");', 'if (useCustomizer) {']
['configure connector with customizer ', ['connector', 'customizer']]
camel sample_46

['LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'TextLineCodecFactory codecFactory = new TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(config, codecFactory);', 'if (LOG.isDebugEnabled()) {']
['using textlinecodecfactory using encoding line delimiter ', ['new', 'object', 'type', 'codecfactory', 'charset', 'configuration', 'gettextlinedelimiter', 'delimiter']]
camel sample_7685

['LineDelimiter delimiter = getLineDelimiterParameter(configuration.getTextlineDelimiter());', 'TextLineCodecFactory codecFactory = new TextLineCodecFactory(charset, delimiter);', 'if (configuration.getEncoderMaxLineLength() > 0) {', 'codecFactory.setEncoderMaxLineLength(configuration.getEncoderMaxLineLength());', '}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(config, codecFactory);', 'if (LOG.isDebugEnabled()) {']
['encoder maximum line length decoder maximum line length ', ['codecfactory', 'getencodermaxlinelength', 'codecfactory', 'getdecodermaxlinelength']]
camel sample_7685

['}', 'if (configuration.getDecoderMaxLineLength() > 0) {', 'codecFactory.setDecoderMaxLineLength(configuration.getDecoderMaxLineLength());', '}', 'addCodecFactory(config, codecFactory);', 'if (LOG.isDebugEnabled()) {', '}', '} else {', 'ObjectSerializationCodecFactory codecFactory = new ObjectSerializationCodecFactory();', 'addCodecFactory(config, codecFactory);']
['using objectserializationcodecfactory ', ['type', 'codecfactory']]
camel sample_7685

['protected void configureDataGramCodecFactory(final String type, final IoServiceConfig config, final MinaConfiguration configuration) {', 'ProtocolCodecFactory codecFactory = configuration.getCodec();', 'if (codecFactory == null) {', 'codecFactory = new MinaUdpProtocolCodecFactory(getCamelContext());', 'if (LOG.isDebugEnabled()) {']
['using codecfactory ', ['new', 'object', 'type', 'codecfactory']]
camel sample_7685

['private static Charset getEncodingParameter(String type, MinaConfiguration configuration) {', 'String encoding = configuration.getEncoding();', 'if (encoding == null) {', 'encoding = Charset.defaultCharset().name();', 'configuration.setEncoding(encoding);']
['no encoding parameter using default charset ', ['type', 'encoding']]
camel sample_7685

['type = findComponent(name, context);', 'if (type == null) {', 'return null;', '}', '} catch (NoFactoryAvailableException e) {', 'return null;', '} catch (Exception e) {', 'throw new IllegalArgumentException("Invalid URI, no Component registered for scheme: " + name, e);', '}', 'if (getLog().isDebugEnabled()) {']
['found component via type via ', ['new', 'object', 'name', 'type', 'getname', 'factoryfinder', 'getresourcepath', 'name']]
camel sample_4103

['public void testAmbiguousMethodCallFails() throws Exception {', 'try {', 'Object value = template.requestBody("bean:myBean", body);', 'fail("We should have failed to invoke an ambiguous method but instead got: " + value);', '} catch (Exception e) {']
['caught expected failure ', ['e', 'e']]
camel sample_15490

['public static String evaluate(final String xpath, final String xml) {', 'JAXPXPathEngine xpathEngine = new JAXPXPathEngine();', 'xpathEngine.setNamespaceContext(Collections.singletonMap("svrl", Constants.HTTP_PURL_OCLC_ORG_DSDL_SVRL));', 'try {', 'return xpathEngine.evaluate(xpath, Input.fromString(xml).build());', '} catch (Exception e) {']
['failed to apply xpath on xml ', ['xpath', 'xml']]
camel sample_11980

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = input.getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());']
['sending data ', []]
camel sample_11579

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = input.getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());', 'socket.send(packet);', 'Thread.sleep(1000);', 'byte[] buf = new byte[128];', 'DatagramPacket receive = new DatagramPacket(buf, buf.length, address, getPort());']
['receiveing data ', []]
camel sample_11579

['public InfluxDB influxDbBean() throws UnknownHostException {', 'if (LOG.isDebugEnabled()) {']
['creating new instance of a mocked influx db connection ', []]
camel sample_11129

['public void onApplicationEvent(ContextRefreshedEvent event) {', 'CamelContext camelContext = applicationContext.getBean(CamelContext.class);', 'if (camelContext.getStatus().isStopped()) {']
['post processing camelcontext bean ', ['camelcontext', 'getname']]
camel sample_13401

['if (!abs) {', 'String name = routesBuilder.getClass().getName();', "name = name.replace('.', '/');", 'String exclude = configurationProperties.getJavaRoutesExcludePattern();', 'String include = configurationProperties.getJavaRoutesIncludePattern();', 'boolean match = !"false".equals(include);', 'if (match && ObjectHelper.isNotEmpty(exclude)) {', 'String[] parts = exclude.split(",");', 'for (String part : parts) {', 'match = !matcher.match(part, name);']
['java routesbuilder exclude filter ', ['name', 'part', 'match']]
camel sample_13401

['match = !matcher.match(part, name);', 'if (!match) {', 'break;', '}', '}', '}', 'if (match && ObjectHelper.isNotEmpty(include)) {', 'String[] parts = include.split(",");', 'for (String part : parts) {', 'match = matcher.match(part, name);']
['java routesbuilder include filter ', ['name', 'part', 'match']]
camel sample_13401

['}', 'if (match && ObjectHelper.isNotEmpty(include)) {', 'String[] parts = include.split(",");', 'for (String part : parts) {', 'match = matcher.match(part, name);', 'if (match) {', 'break;', '}', '}', '}']
['java routesbuilder accepted by include exclude filter ', ['name', 'match']]
camel sample_13401

['String[] parts = include.split(",");', 'for (String part : parts) {', 'match = matcher.match(part, name);', 'if (match) {', 'break;', '}', '}', '}', 'if (match) {', 'try {']
['injecting following route into the camelcontext ', ['routesbuilder']]
camel sample_13401

['try {', 'boolean scan = !configurationProperties.getXmlRoutes().equals("false");', 'if (scan) {', 'loadXmlRoutes(applicationContext, camelContext, configurationProperties.getXmlRoutes());', '}', 'boolean scanRests = !configurationProperties.getXmlRests().equals("false");', 'if (scanRests) {', 'loadXmlRests(applicationContext, camelContext, configurationProperties.getXmlRests());', '}', 'for (CamelContextConfiguration camelContextConfiguration : camelContextConfigurations) {']
['camelcontextconfiguration found invoking beforeapplicationstart ', ['camelcontextconfiguration']]
camel sample_13401

['if (scanRests) {', 'loadXmlRests(applicationContext, camelContext, configurationProperties.getXmlRests());', '}', 'for (CamelContextConfiguration camelContextConfiguration : camelContextConfigurations) {', 'camelContextConfiguration.beforeApplicationStart(camelContext);', '}', 'if (configurationProperties.isMainRunController()) {', 'CamelMainRunController controller = new CamelMainRunController(applicationContext, camelContext);', 'if (configurationProperties.getDurationMaxMessages() > 0 || configurationProperties.getDurationMaxIdleSeconds() > 0) {', 'if (configurationProperties.getDurationMaxMessages() > 0) {']
['camelspringboot will terminate after processing messages ', ['configurationproperties', 'getdurationmaxmessages']]
camel sample_13401

['}', 'for (CamelContextConfiguration camelContextConfiguration : camelContextConfigurations) {', 'camelContextConfiguration.beforeApplicationStart(camelContext);', '}', 'if (configurationProperties.isMainRunController()) {', 'CamelMainRunController controller = new CamelMainRunController(applicationContext, camelContext);', 'if (configurationProperties.getDurationMaxMessages() > 0 || configurationProperties.getDurationMaxIdleSeconds() > 0) {', 'if (configurationProperties.getDurationMaxMessages() > 0) {', '}', 'if (configurationProperties.getDurationMaxIdleSeconds() > 0) {']
['camelspringboot will terminate after being idle for more seconds ', ['configurationproperties', 'getdurationmaxidleseconds']]
camel sample_13401

['if (configurationProperties.getDurationMaxMessages() > 0 || configurationProperties.getDurationMaxIdleSeconds() > 0) {', 'if (configurationProperties.getDurationMaxMessages() > 0) {', '}', 'if (configurationProperties.getDurationMaxIdleSeconds() > 0) {', '}', 'EventNotifier notifier = new MainDurationEventNotifier(camelContext, configurationProperties.getDurationMaxMessages(), configurationProperties.getDurationMaxIdleSeconds(), controller.getCompleted(), controller.getLatch(), true);', 'ServiceHelper.startService(notifier);', 'camelContext.getManagementStrategy().addEventNotifier(notifier);', '}', 'if (configurationProperties.getDurationMaxSeconds() > 0) {']
['camelspringboot will terminate after seconds ', ['configurationproperties', 'getdurationmaxseconds']]
camel sample_13401

['EventNotifier notifier = new MainDurationEventNotifier(camelContext, configurationProperties.getDurationMaxMessages(), configurationProperties.getDurationMaxIdleSeconds(), controller.getCompleted(), controller.getLatch(), true);', 'ServiceHelper.startService(notifier);', 'camelContext.getManagementStrategy().addEventNotifier(notifier);', '}', 'if (configurationProperties.getDurationMaxSeconds() > 0) {', 'terminateMainControllerAfter(camelContext, configurationProperties.getDurationMaxSeconds(), controller.getCompleted(), controller.getLatch());', '}', 'camelContext.addStartupListener(new StartupListener() {', 'public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {', 'if (!alreadyStarted) {']
['starting camelmainruncontroller to ensure the main thread keeps running ', []]
camel sample_13401

['public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {', 'if (!alreadyStarted) {', 'controller.start();', '}', '}', '});', '} else {', 'if (applicationContext instanceof ConfigurableApplicationContext) {', 'ConfigurableApplicationContext cac = (ConfigurableApplicationContext) applicationContext;', 'if (configurationProperties.getDurationMaxSeconds() > 0) {']
['camelspringboot will terminate after seconds ', ['configurationproperties', 'getdurationmaxseconds']]
camel sample_13401

['}', '});', '} else {', 'if (applicationContext instanceof ConfigurableApplicationContext) {', 'ConfigurableApplicationContext cac = (ConfigurableApplicationContext) applicationContext;', 'if (configurationProperties.getDurationMaxSeconds() > 0) {', 'terminateApplicationContext(cac, camelContext, configurationProperties.getDurationMaxSeconds());', '}', 'if (configurationProperties.getDurationMaxMessages() > 0 || configurationProperties.getDurationMaxIdleSeconds() > 0) {', 'if (configurationProperties.getDurationMaxMessages() > 0) {']
['camelspringboot will terminate after processing messages ', ['configurationproperties', 'getdurationmaxmessages']]
camel sample_13401

['} else {', 'if (applicationContext instanceof ConfigurableApplicationContext) {', 'ConfigurableApplicationContext cac = (ConfigurableApplicationContext) applicationContext;', 'if (configurationProperties.getDurationMaxSeconds() > 0) {', 'terminateApplicationContext(cac, camelContext, configurationProperties.getDurationMaxSeconds());', '}', 'if (configurationProperties.getDurationMaxMessages() > 0 || configurationProperties.getDurationMaxIdleSeconds() > 0) {', 'if (configurationProperties.getDurationMaxMessages() > 0) {', '}', 'if (configurationProperties.getDurationMaxIdleSeconds() > 0) {']
['camelspringboot will terminate after being idle for more seconds ', ['configurationproperties', 'getdurationmaxidleseconds']]
camel sample_13401

['ServiceHelper.startService(notifier);', 'camelContext.getManagementStrategy().addEventNotifier(notifier);', 'terminateApplicationContext(cac, camelContext, latch);', '}', '}', '}', 'if (!camelContextConfigurations.isEmpty()) {', 'camelContext.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {', 'public void notify(EventObject eventObject) throws Exception {', 'for (CamelContextConfiguration camelContextConfiguration : camelContextConfigurations) {']
['camelcontextconfiguration found invoking afterapplicationstart ', ['camelcontextconfiguration']]
camel sample_13401

['}', '}', '}', 'if (!camelContextConfigurations.isEmpty()) {', 'camelContext.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {', 'public void notify(EventObject eventObject) throws Exception {', 'for (CamelContextConfiguration camelContextConfiguration : camelContextConfigurations) {', 'try {', 'camelContextConfiguration.afterApplicationStart(camelContext);', '} catch (Exception e) {']
['error during calling afterapplicationstart due this exception is ignored ', ['e', 'getmessage', 'e']]
camel sample_13401

['}', 'public boolean isEnabled(EventObject eventObject) {', 'return eventObject instanceof CamelContextStartedEvent;', '}', '});', '}', '} catch (Exception e) {', 'throw new CamelSpringBootInitializationException(e);', '}', '} else {']
['camel already started not adding routes ', []]
camel sample_13401

['private void loadXmlRoutes(ApplicationContext applicationContext, CamelContext camelContext, String directory) throws Exception {']
['loading additional camel xml routes from ', ['directory']]
camel sample_13401

['private void loadXmlRoutes(ApplicationContext applicationContext, CamelContext camelContext, String directory) throws Exception {', 'try {', 'Resource[] xmlRoutes = applicationContext.getResources(directory);', 'for (Resource xmlRoute : xmlRoutes) {']
['found xml route ', ['xmlroute']]
camel sample_13401

['private void loadXmlRoutes(ApplicationContext applicationContext, CamelContext camelContext, String directory) throws Exception {', 'try {', 'Resource[] xmlRoutes = applicationContext.getResources(directory);', 'for (Resource xmlRoute : xmlRoutes) {', 'RoutesDefinition xmlDefinition = camelContext.loadRoutesDefinition(xmlRoute.getInputStream());', 'camelContext.addRouteDefinitions(xmlDefinition.getRoutes());', '}', '} catch (FileNotFoundException e) {']
['no xml routes found in skipping xml routes detection ', ['directory']]
camel sample_13401

['private void loadXmlRests(ApplicationContext applicationContext, CamelContext camelContext, String directory) {']
['loading additional camel xml rests from ', ['directory']]
camel sample_13401

['final Resource[] xmlRests = applicationContext.getResources(directory);', 'for (final Resource xmlRest : xmlRests) {', 'final RestsDefinition xmlDefinitions = camelContext.loadRestsDefinition(xmlRest.getInputStream());', 'camelContext.addRestDefinitions(xmlDefinitions.getRests());', 'for (final RestDefinition xmlDefinition : xmlDefinitions.getRests()) {', 'final List<RouteDefinition> routeDefinitions = xmlDefinition.asRouteDefinition(camelContext);', 'camelContext.addRouteDefinitions(routeDefinitions);', '}', '}', '} catch (FileNotFoundException e) {']
['no xml rests found in skipping xml rests detection ', ['directory']]
camel sample_13401

['private void terminateMainControllerAfter(final CamelContext camelContext, int seconds, final AtomicBoolean completed, final CountDownLatch latch) {', 'ScheduledExecutorService executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "CamelSpringBootTerminateTask");', 'Runnable task = () -> {']
['camelspringboot triggering shutdown of the jvm ', []]
camel sample_13401

['private void terminateMainControllerAfter(final CamelContext camelContext, int seconds, final AtomicBoolean completed, final CountDownLatch latch) {', 'ScheduledExecutorService executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "CamelSpringBootTerminateTask");', 'Runnable task = () -> {', 'try {', 'camelContext.stop();', '} catch (Throwable e) {']
['error during stopping camelcontext ', ['e']]
camel sample_13401

['private void terminateApplicationContext(final ConfigurableApplicationContext applicationContext, final CamelContext camelContext, int seconds) {', 'ScheduledExecutorService executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "CamelSpringBootTerminateTask");', 'Runnable task = () -> {']
['camelspringboot triggering shutdown of the jvm ', []]
camel sample_13401

['private void terminateApplicationContext(final ConfigurableApplicationContext applicationContext, final CamelContext camelContext, final CountDownLatch latch) {', 'ExecutorService executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, "CamelSpringBootTerminateTask");', 'Runnable task = () -> {', 'try {', 'latch.await();']
['camelspringboot triggering shutdown of the jvm ', []]
camel sample_13401

['protected String mask(String opName, String value) {', 'String answer = URISupport.sanitizeUri(value);', 'if (LOG.isTraceEnabled()) {']
['masking jmx operation value ', ['new', 'object', 'getmbeaninfo', 'getclassname', 'opname', 'value', 'answer']]
camel sample_4695

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<ConstantLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.constant.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.constant.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_909

['public void testWSHttpCallEcho() throws Exception {', 'received.clear();', 'latch = new CountDownLatch(2);', 'DefaultAsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17442

['public void process(Exchange exchange) throws Exception {', 'if (connection == null) {', 'connection = this.zkm.getConnection();', '}', 'ProductionContext context = new ProductionContext(connection, exchange);', 'String operation = exchange.getIn().getHeader(ZooKeeperMessage.ZOOKEEPER_OPERATION, String.class);', 'boolean isDelete = ZK_OPERATION_DELETE.equals(operation);', 'if (ExchangeHelper.isOutCapable(exchange)) {', 'if (isDelete) {', 'if (log.isDebugEnabled()) {']
['deleting znode s waiting for confirmation ', ['format', 'context', 'node']]
camel sample_12640

['if (isDelete) {', 'if (log.isDebugEnabled()) {', '}', 'OperationResult result = synchronouslyDelete(context);', 'if (configuration.isListChildren()) {', 'result = listChildren(context);', '}', 'updateExchangeWithResult(context, result);', '} else {', 'if (log.isDebugEnabled()) {']
['storing data to znode s waiting for confirmation ', ['format', 'context', 'node']]
camel sample_12640

['protected void doStart() throws Exception {', 'connection = zkm.getConnection();', 'if (log.isTraceEnabled()) {']
['starting zookeeper producer of s ', ['string', 'format', 'configuration', 'getpath']]
camel sample_12640

['protected void doStop() throws Exception {', 'super.doStop();', 'if (log.isTraceEnabled()) {']
['shutting down zookeeper producer of s ', ['string', 'format', 'configuration', 'getpath']]
camel sample_12640

['private void asynchronouslyDeleteNode(ZooKeeper connection, ProductionContext context) {', 'if (log.isDebugEnabled()) {']
['deleting node s not waiting for confirmation ', ['format', 'context', 'node']]
camel sample_12640

['private void asynchronouslySetDataOnNode(ZooKeeper connection, ProductionContext context) {', 'if (log.isDebugEnabled()) {']
['storing data to node s not waiting for confirmation ', ['format', 'context', 'node']]
camel sample_12640

['public void processResult(int rc, String node, Object ctx, Stat statistics) {', 'if (Code.NONODE.equals(Code.get(rc))) {', 'if (configuration.isCreate()) {']
['node s did not exist creating it ', ['format', 'node']]
camel sample_12640

['public void processResult(int rc, String node, Object ctx, Stat statistics) {', 'if (Code.NONODE.equals(Code.get(rc))) {', 'if (configuration.isCreate()) {', 'ProductionContext context = (ProductionContext)ctx;', 'OperationResult<String> result = null;', 'try {', 'result = createNode(context);', '} catch (Exception e) {']
['error trying to create node s ', ['format', 'node', 'e']]
camel sample_12640

['public void processResult(int rc, String node, Object ctx, Stat statistics) {', 'if (Code.NONODE.equals(Code.get(rc))) {', 'if (configuration.isCreate()) {', 'ProductionContext context = (ProductionContext)ctx;', 'OperationResult<String> result = null;', 'try {', 'result = createNode(context);', '} catch (Exception e) {', '}', 'if (result == null || !result.isOk()) {']
['error creating node s ', ['format', 'node', 'result', 'getexception']]
camel sample_12640

['public void processResult(int rc, String path, Object ctx) {', 'if (log.isDebugEnabled()) {', 'if (log.isTraceEnabled()) {']
['removed data node s ', ['format', 'path']]
camel sample_12640

['public void processResult(int rc, String path, Object ctx) {', 'if (log.isDebugEnabled()) {', 'if (log.isTraceEnabled()) {', '} else {']
['removed data node s ', ['format', 'path']]
camel sample_12640

['private OperationResult synchronouslySetData(ProductionContext ctx) throws Exception {', 'SetDataOperation setData = new SetDataOperation(ctx.connection, ctx.node, ctx.payload);', 'setData.setVersion(ctx.version);', 'OperationResult result = setData.get();', 'if (!result.isOk() && configuration.isCreate() && result.failedDueTo(Code.NONODE)) {']
['node s did not exist creating it ', ['format', 'ctx', 'node']]
camel sample_12640

['private OperationResult synchronouslyDelete(ProductionContext ctx) throws Exception {', 'DeleteOperation setData = new DeleteOperation(ctx.connection, ctx.node);', 'setData.setVersion(ctx.version);', 'OperationResult result = setData.get();', 'if (!result.isOk() && configuration.isCreate() && result.failedDueTo(Code.NONODE)) {']
['node s did not exist creating it ', ['format', 'ctx', 'node']]
camel sample_12640

['boolean shutdownThreadPool = ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext, this, true);', 'ExecutorService threadPool = ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext, name, this, false);', 'ThreadPoolRejectedPolicy policy = resolveRejectedPolicy(routeContext);', 'if (policy == null) {', 'if (callerRunsWhenRejected == null || callerRunsWhenRejected) {', 'policy = ThreadPoolRejectedPolicy.CallerRuns;', '} else {', 'policy = ThreadPoolRejectedPolicy.Abort;', '}', '}']
['using threadpoolrejectedpolicy ', ['policy']]
camel sample_5211

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<FlatpackDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.flatpack.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.flatpack.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_765

['return false;', '}', 'if (!relayHeaders) {', 'return true;', '}', 'if (relayAllMessageHeaders) {', 'return false;', '}', 'MessageHeaderFilter messageHeaderfilter = getMessageHeaderFilter(exchange);', 'if (messageHeaderfilter == null) {']
['no cxf binding namespace can be resolved message headers are intact ', []]
camel sample_6597

['}', 'MessageHeaderFilter messageHeaderfilter = getMessageHeaderFilter(exchange);', 'if (messageHeaderfilter == null) {', 'return false;', '}', 'LOG.trace("messageHeaderfilter = {}", messageHeaderfilter);', 'try {', 'messageHeaderfilter.filter(direction, (List<Header>)value);', '} catch (Throwable t) {', 'if (LOG.isDebugEnabled()) {']
['failed to cast value to header list due to ', ['t', 'tostring', 't']]
camel sample_6597

['protected void debugBefore(Exchange exchange, org.apache.camel.Processor processor, ProcessorDefinition<?> definition, String id, String label) {']
['before with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_10057

['protected void debugAfter(Exchange exchange, org.apache.camel.Processor processor, ProcessorDefinition<?> definition, String id, String label, long timeTaken) {']
['after with body ', ['definition', 'exchange', 'getin', 'getbody']]
camel sample_10057

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<SpelLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.spel.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.spel.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_620

['public boolean acquireExclusiveReadLock(GenericFileOperations<T> operations, GenericFile<T> file, Exchange exchange) throws Exception {']
['waiting for exclusive read lock to file ', ['file']]
camel sample_4816

['try {', 'exclusive = operations.renameFile(file.getAbsoluteFilePath(), newFile.getAbsoluteFilePath());', '} catch (GenericFileOperationFailedException ex) {', 'if (ex.getCause() instanceof FileNotFoundException) {', 'exclusive = false;', '} else {', 'throw ex;', '}', '}', 'if (exclusive) {']
['acquired exclusive read lock to file ', ['file']]
camel sample_4816

['private boolean sleep() {']
['exclusive read lock not granted sleeping for millis ', ['checkinterval']]
camel sample_4816

['private boolean sleep() {', 'try {', 'Thread.sleep(checkInterval);', 'return false;', '} catch (InterruptedException e) {']
['sleep interrupted while waiting for exclusive read lock so breaking out ', []]
camel sample_4816

['public String[] route(@XPath("/person/city/text()") String city) {', 'if (city.equals("London")) {']
['person is from emea region ', []]
camel sample_17842

['public String[] route(@XPath("/person/city/text()") String city) {', 'if (city.equals("London")) {', 'return new String[] {"file:target/messages/emea/hr_pickup", "file:target/messages/emea/finance_pickup"};', '} else {']
['person is from amer region ', []]
camel sample_17842

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ExecComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.exec.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.exec.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1194

['public void close() {', 'try {', 'if (null != inputStream) {', 'clientSocket.close();', '}', '} catch (IOException e) {']
['exception encountered closing connection to ', ['string', 'format', 'mllphost', 'mllpport', 'e']]
camel sample_13801

['public void reset() {', 'try {', 'clientSocket.setSoLinger(true, 0);', '} catch (SocketException socketEx) {']
['exception encountered setting set so linger to force a tcp reset ', ['socketex']]
camel sample_13801

['public void reset() {', 'try {', 'clientSocket.setSoLinger(true, 0);', '} catch (SocketException socketEx) {', '}', 'try {', 'if (null != inputStream) {', 'clientSocket.close();', '}', '} catch (IOException e) {']
['exception encountered resetting connection to ', ['string', 'format', 'mllphost', 'mllpport', 'e']]
camel sample_13801

['public void sendData(String data, boolean disconnectAfterSend) {', 'byte[] payloadBytes = data.getBytes();', 'try {', 'outputStream.write(payloadBytes, 0, payloadBytes.length);', '} catch (IOException e) {']
['unable to send raw string ', ['e']]
camel sample_13801

['public void sendData(String data, boolean disconnectAfterSend) {', 'byte[] payloadBytes = data.getBytes();', 'try {', 'outputStream.write(payloadBytes, 0, payloadBytes.length);', '} catch (IOException e) {', 'throw new MllpJUnitResourceException("Unable to send raw string", e);', '}', 'if (disconnectAfterSend) {']
['closing tcp connection ', []]
camel sample_13801

['throw new MllpJUnitResourceException("Cannot send message - client is not connected");', '}', 'if (null == outputStream) {', 'throw new MllpJUnitResourceException("Cannot send message - output stream is null");', '}', 'byte[] payloadBytes = hl7Message.getBytes();', 'try {', 'if (sendStartOfBlock) {', 'outputStream.write(START_OF_BLOCK);', '} else {']
['not sending start of block ', []]
camel sample_13801

['byte[] payloadBytes = hl7Message.getBytes();', 'try {', 'if (sendStartOfBlock) {', 'outputStream.write(START_OF_BLOCK);', '} else {', '}', 'outputStream.write(payloadBytes, 0, payloadBytes.length);', 'if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {']
['not sending end of block ', []]
camel sample_13801

['} else {', '}', 'outputStream.write(payloadBytes, 0, payloadBytes.length);', 'if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {', '}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {']
['not sending end of data ', []]
camel sample_13801

['if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {', '}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {', '}', 'outputStream.flush();', '} catch (IOException e) {']
['unable to send message ', ['e']]
camel sample_13801

['}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {', '}', 'outputStream.flush();', '} catch (IOException e) {', 'throw new MllpJUnitResourceException("Unable to send HL7 message", e);', '}', 'if (disconnectAfterSend) {']
['closing tcp connection ', []]
camel sample_13801

['throw new MllpJUnitResourceException("Cannot send message - client is not connected");', '}', 'if (null == outputStream) {', 'throw new MllpJUnitResourceException("Cannot send message - output stream is null");', '}', 'byte[] payloadBytes = hl7Message.getBytes();', 'try {', 'if (sendStartOfBlock) {', 'outputStream.write(START_OF_BLOCK);', '} else {']
['not sending start of block ', []]
camel sample_13801

['}', 'for (int i = 0; i < payloadBytes.length; ++i) {', 'outputStream.write(payloadBytes[i]);', 'if (flushByte == payloadBytes[i]) {', 'outputStream.flush();', '}', '}', 'if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {']
['not sending end of block ', []]
camel sample_13801

['outputStream.flush();', '}', '}', 'if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {', '}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {']
['not sending end of data ', []]
camel sample_13801

['if (sendEndOfBlock) {', 'outputStream.write(END_OF_BLOCK);', '} else {', '}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {', '}', 'outputStream.flush();', '} catch (IOException e) {']
['unable to send message ', ['e']]
camel sample_13801

['}', 'if (sendEndOfData) {', 'outputStream.write(END_OF_DATA);', '} else {', '}', 'outputStream.flush();', '} catch (IOException e) {', 'throw new MllpJUnitResourceException("Unable to send HL7 message", e);', '}', 'if (disconnectAfterSend) {']
['closing tcp connection ', []]
camel sample_13801

['if (null == outputStream) {', 'throw new MllpJUnitResourceException("Cannot receive acknowledgement - output stream is null");', '}', 'clientSocket.setSoTimeout(timout);', 'StringBuilder acknowledgement = new StringBuilder();', 'try {', 'int firstByte = inputStream.read();', 'if (START_OF_BLOCK != firstByte) {', 'if (isConnected()) {', 'if (END_OF_STREAM == firstByte) {']
['end of stream reached while waiting for start of block closing socket ', []]
camel sample_13801

['clientSocket.setSoTimeout(timout);', 'StringBuilder acknowledgement = new StringBuilder();', 'try {', 'int firstByte = inputStream.read();', 'if (START_OF_BLOCK != firstByte) {', 'if (isConnected()) {', 'if (END_OF_STREAM == firstByte) {', 'try {', 'clientSocket.close();', '} catch (Exception ex) {']
['exception encountered closing socket after receiving end of stream while waiting for start of block ', []]
camel sample_13801

['int firstByte = inputStream.read();', 'if (START_OF_BLOCK != firstByte) {', 'if (isConnected()) {', 'if (END_OF_STREAM == firstByte) {', 'try {', 'clientSocket.close();', '} catch (Exception ex) {', '}', 'return "";', '} else {']
['acknowledgement did not start with start of block ', ['firstbyte']]
camel sample_13801

['case END_OF_BLOCK: if (END_OF_DATA != inputStream.read()) {', 'throw new MllpJUnitResourceCorruptFrameException("END_OF_BLOCK was not followed by END_OF_DATA");', '}', 'readingMessage = false;', 'break;', 'default: acknowledgement.append((char) nextByte);', '}', '}', '} catch (SocketTimeoutException timeoutEx) {', 'if (0 < acknowledgement.length()) {']
['timeout waiting for acknowledgement ', ['timeoutex']]
camel sample_13801

['throw new MllpJUnitResourceCorruptFrameException("END_OF_BLOCK was not followed by END_OF_DATA");', '}', 'readingMessage = false;', 'break;', 'default: acknowledgement.append((char) nextByte);', '}', '}', '} catch (SocketTimeoutException timeoutEx) {', 'if (0 < acknowledgement.length()) {', '} else {']
['timeout while reading acknowledgement ', ['acknowledgement', 'tostring', 'replace', 'r', 'timeoutex']]
camel sample_13801

['break;', 'default: acknowledgement.append((char) nextByte);', '}', '}', '} catch (SocketTimeoutException timeoutEx) {', 'if (0 < acknowledgement.length()) {', '} else {', '}', 'throw new MllpJUnitResourceTimeoutException("Timeout while reading acknowledgement", timeoutEx);', '} catch (IOException e) {']
['unable to read acknowledgement ', ['e']]
camel sample_13801

['public String receiveData(int timeout) throws SocketException, SocketTimeoutException {', 'clientSocket.setSoTimeout(timeout);', 'StringBuilder availableInput = new StringBuilder();', 'try {', 'do {', 'availableInput.append((char) inputStream.read());', '} while (0 < inputStream.available());', '} catch (SocketTimeoutException timeoutEx) {']
['timeout while receiving available input ', ['timeoutex']]
camel sample_13801

['public String receiveData(int timeout) throws SocketException, SocketTimeoutException {', 'clientSocket.setSoTimeout(timeout);', 'StringBuilder availableInput = new StringBuilder();', 'try {', 'do {', 'availableInput.append((char) inputStream.read());', '} while (0 < inputStream.available());', '} catch (SocketTimeoutException timeoutEx) {', 'throw new MllpJUnitResourceTimeoutException("Timeout while receiving available input", timeoutEx);', '} catch (IOException e) {']
['exception encountered eating available input ', ['e']]
camel sample_13801

['public String eatData(int timeout) throws SocketException {', 'clientSocket.setSoTimeout(timeout);', 'StringBuilder availableInput = new StringBuilder();', 'try {', 'while (0 < inputStream.available()) {', 'availableInput.append((char) inputStream.read());', '}', '} catch (IOException e) {']
['exception encountered eating available input ', ['e']]
camel sample_13801

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MiloServerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.milo-server.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.milo-server.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_509

['public void process(WatchedEvent event) {', 'this.event = event;', 'EventType received = event.getType();', 'if (LOG.isDebugEnabled()) {']
['recieved event of type s for node s ', ['format', 'received', 'event', 'getpath']]
camel sample_12656

['}', '}', 'if (LOG.isTraceEnabled() && waitForAnyWatchedType.getCount() > 0) {', 'StringBuilder b = new StringBuilder();', 'for (EventType type : awaitedTypes) {', 'b.append(type).append(", ");', '}', 'if (b.length() > 0) {', 'b.setLength(b.length() - 2);', '}']
['recieved event of type s did not match any watched types s ', ['string', 'format', 'received', 'awaitedtypes']]
camel sample_12656

['public void testWSHttpCall() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17454

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .recipientList().header("whereTo") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);']
['replyto ', ['replyto']]
camel sample_7105

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .recipientList().header("whereTo") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);']
['correlationid ', ['cid']]
camel sample_7105

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .recipientList().header("whereTo") .to("mock:result");', 'from("activemq:topic:news?disableReplyTo=true") .transform(body().prepend("Bye ")) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class);', 'String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class);', 'if (replyTo != null && cid != null) {', 'Thread.sleep(1000);']
['sending back reply message on ', ['replyto']]
camel sample_7105

['public static void doneUow(UnitOfWork uow, Exchange exchange) {', 'try {', 'if (uow != null) {', 'uow.done(exchange);', '}', '} catch (Throwable e) {']
['exception occurred during done unitofwork for exchange this exception will be ignored ', ['exchange', 'e']]
camel sample_4379

['if (uow != null) {', 'uow.done(exchange);', '}', '} catch (Throwable e) {', '}', 'try {', 'if (uow != null) {', 'uow.stop();', '}', '} catch (Throwable e) {']
['exception occurred during stopping unitofwork for exchange this exception will be ignored ', ['exchange', 'e']]
camel sample_4379

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'OperationName operationName = null;', 'String topicName = null;', 'String apexUrl = null;', 'try {']
['creating endpoint for ', ['remaining']]
camel sample_14782

['loginConfig.setInstanceUrl(instanceUrl);', 'loginConfig.setClientId(clientId);', 'loginConfig.setClientSecret(clientSecret);', 'loginConfig.setKeystore(keystore);', 'loginConfig.setLazyLogin(lazyLogin);', 'loginConfig.setLoginUrl(loginUrl);', 'loginConfig.setPassword(password);', 'loginConfig.setRefreshToken(refreshToken);', 'loginConfig.setType(authenticationType);', 'loginConfig.setUserName(userName);']
['created login configuration ', ['loginconfig']]
camel sample_14782

['loginConfig.setClientId(clientId);', 'loginConfig.setClientSecret(clientSecret);', 'loginConfig.setKeystore(keystore);', 'loginConfig.setLazyLogin(lazyLogin);', 'loginConfig.setLoginUrl(loginUrl);', 'loginConfig.setPassword(password);', 'loginConfig.setRefreshToken(refreshToken);', 'loginConfig.setType(authenticationType);', 'loginConfig.setUserName(userName);', '} else {']
['using shared login configuration ', ['loginconfig']]
camel sample_14782

['if (session == null) {', 'session = new SalesforceSession(getCamelContext(), httpClient, httpClient.getTimeout(), loginConfig);', '}', 'httpClient.setSession(session);', 'httpClient.start();', 'if (!loginConfig.isLazyLogin()) {', 'ServiceHelper.startService(session);', '}', 'if (packages != null && packages.length > 0) {', 'classMap = parsePackages();']
['found generated classes in packages ', ['classmap', 'size', 'arrays', 'aslist', 'packages']]
camel sample_14782

['Object out = transactionTemplate.execute(new TransactionCallback<Object>() {', 'public Object doInTransaction(TransactionStatus status) {', 'if (getEndpoint().isJoinTransaction()) {', 'entityManager.joinTransaction();', '}', 'Query query = getQueryFactory().createQuery(entityManager);', 'configureParameters(query);', 'if (getEndpoint().isConsumeLockEntity()) {', 'query.setLockMode(getLockModeType());', '}']
['created query ', ['query']]
camel sample_14106

['query.setLockMode(getLockModeType());', '}', 'Object answer;', 'try {', 'List<?> results = query.getResultList();', 'if (results != null && results.size() == 1) {', 'answer = results.get(0);', '} else {', 'answer = results;', '}']
['flushing entitymanager ', []]
camel sample_14106

['try {', 'List<?> results = query.getResultList();', 'if (results != null && results.size() == 1) {', 'answer = results.get(0);', '} else {', 'answer = results;', '}', 'entityManager.flush();', 'entityManager.clear();', '} catch (PersistenceException e) {']
['disposing entitymanager on due to coming transaction rollback ', ['entitymanager', 'this']]
camel sample_14106

['public void testSendMessages() throws Exception {', 'long start = System.currentTimeMillis();', 'for (int i = 0; i < size; i++) {', 'template.sendBody(url, "Message " + i);', '}', 'assertEquals(size, processor.getCounter());', 'long delta = System.currentTimeMillis() - start;']
['routeperformancecounttest sent took ms ', ['size', 'delta']]
camel sample_2429

['public void testAddingDataToCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'context.start();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testAddingDataToCacheWithNonStringCacheKey() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant(10L)). to("cache: }', '});', 'context.start();', 'NotifyBuilder notify = new NotifyBuilder(context).whenExactlyDone(1).create();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testAddingDataElementEternal() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setHeader(CacheConstants.CACHE_ELEMENT_EXPIRY_ETERNAL, constant(Boolean.TRUE)). to("cache: }', '});', 'context.start();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testAddingDataElementIdle() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setHeader(CacheConstants.CACHE_ELEMENT_EXPIRY_IDLE, constant(24)). to("cache: }', '});', 'context.start();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testAddingDataElementTimeToLive() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setHeader(CacheConstants.CACHE_ELEMENT_EXPIRY_TTL, constant(42)). to("cache: }', '});', 'context.start();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testAddingDataToCacheDoesFailOnEmptyBody() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(1);', 'context.start();']
['beginning cacheproducer add does fail on empty body test ', []]
camel sample_10515

['public void testAddingSerializableDataToCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'context.start();']
['beginning cacheproducer add test ', []]
camel sample_10515

['public void testUpdatingDataInCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_UPDATE)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'context.start();']
['beginning cacheproducer update test ', []]
camel sample_10515

['public void testUpdatingDataInCacheDoesFailOnEmptyBody() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_UPDATE)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'cacheExceptionEndpoint.expectedMessageCount(1);', 'context.start();']
['beginning cacheproducer update does fail on empty body test ', []]
camel sample_10515

['public void testDeletingDataFromCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETE)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'context.start();']
['beginning cacheproducer delete test ', []]
camel sample_10515

['public void testDeletingDataFromCacheDoesNotFailOnEmptyBody() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETE)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: }', '});', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer delete does not fail on empty body test ', []]
camel sample_10515

['public void testDeletingAllDataFromCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL)). to("cache: }', '});', 'context.start();']
['beginning cacheproducer delete all elements test ', []]
camel sample_10515

['public void testDeletingAllDataFromCacheDoesNotFailOnEmptyBody() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL)). to("cache: }', '});', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer delete all elements does not fail on empty body test ', []]
camel sample_10515

['public void testUnknownOperation() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant("UNKNOWN")). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: to("mock:CacheProducerTest.result");', '}', '});', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(1);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['public void configure() {', 'onException(CacheException.class). handled(true). choice().when(exceptionMessage().isEqualTo(CacheConstants.CACHE_OPERATION + " UNKNOWN is not supported.")). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException").end();', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant("UNKNOWN")). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: to("mock:CacheProducerTest.result");', '}', '};', 'context.setTracing(true);', 'context.addRoutes(builder);', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(1);', 'context.start();']
['beginning cacheproducer query an elements does fail on empty body test ', []]
camel sample_10515

['public void testQueringNonExistingDataFromCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL)). to("cache: setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['public void testQueringNonExistingDataFromCacheDoesNotFailOnEmptyBody() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL)). to("cache: setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer query an elements does not fail on empty body test ', []]
camel sample_10515

['public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: setBody(constant("Don\'t care. This body will be overridden.")). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'String body = new String(getFileAsByteArray(FILEPATH_UPDATEDTEST_TXT), "UTF-8");', 'resultEndpoint.expectedBodiesReceived(body);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). to("cache: setBody(constant("Don\'t care. This body will be overridden.")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'resultEndpoint.expectedBodiesReceived(POETRY);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). to("cache: setBody(constant("Don\'t care. This body will be overridden.")). setHeader(CacheConstants.CACHE_KEY, constant("foo")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'resultEndpoint.expectedBodiesReceived(POETRY);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("foo")). to("cache: setBody(constant("Don\'t care. This body will be overridden.")). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET)). setHeader(CacheConstants.CACHE_KEY, constant("foo")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'resultEndpoint.expectedBodiesReceived(POETRY);', 'context.start();']
['beginning cacheproducer query an elements test ', []]
camel sample_10515

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setBody(constant("Test body")). to("cache: setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_URL_CHECK)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'resultEndpoint.expectedBodiesReceived("Test body");', 'context.start();']
['beginning cacheproducer check an element exists test ', []]
camel sample_10515

['public void testCheckDataFromCacheNegativeTest() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setBody(constant("Test body")). to("cache: setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_URL_CHECK)). setHeader(CacheConstants.CACHE_KEY, constant("foo")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(0);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer check an element does not exist test ', []]
camel sample_10515

['public void testCheckExpiredDataFromCache() throws Exception {', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'onException(CacheException.class). handled(true). to("log:LOGGER"). to("mock:CacheProducerTest.cacheException");', 'from("direct:a"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). setBody(constant("Test body")). to("cache: from("direct:b"). setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_URL_CHECK)). setHeader(CacheConstants.CACHE_KEY, constant("Ralph_Waldo_Emerson")). to("cache: choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNull()). to("mock:CacheProducerTest.result").end();', '}', '});', 'resultEndpoint.expectedMessageCount(1);', 'cacheExceptionEndpoint.expectedMessageCount(0);', 'context.start();']
['beginning cacheproducer check an element does not exist after expiry test ', []]
camel sample_10515

['public String echo(String text) {']
['call for echo with ', ['text']]
camel sample_7781

['public void ping() {', 'invocationCount++;']
['call for oneway ping ', []]
camel sample_7781

['protected void doStart() throws Exception {', 'super.doStart();']
['starting couchdb consumer ', []]
camel sample_12482

['protected void doStop() throws Exception {', 'super.doStop();']
['stopping couchdb consumer ', []]
camel sample_12482

['idx2 = i;', '}', '}', 'if (idx1 >= 0 && idx2 >= 0 && idx1 > idx2) {', 'bundleDescriptors.add(idx2, bundleDescriptors.remove(idx1));', '}', 'bundles.addAll(bundleDescriptors);', 'if (LOG.isDebugEnabled()) {', 'for (int i = 0; i < bundles.size(); i++) {', 'BundleDescriptor desc = bundles.get(i);']
['bundle ', ['i', 'desc']]
camel sample_10145

['public static void disposeBundleContext(BundleContext bundleContext) throws BundleException {', 'try {', 'if (bundleContext != null) {', 'List<Bundle> bundles = new ArrayList<Bundle>();', 'bundles.addAll(Arrays.asList(bundleContext.getBundles()));', 'Collections.reverse(bundles);', 'for (Bundle bundle : bundles) {']
['stopping bundle ', ['bundle']]
camel sample_10145

['List<Bundle> bundles = new ArrayList<Bundle>();', 'bundles.addAll(Arrays.asList(bundleContext.getBundles()));', 'Collections.reverse(bundles);', 'for (Bundle bundle : bundles) {', 'bundle.stop();', '}', '}', '} catch (Exception e) {', 'IllegalStateException ise = ObjectHelper.getException(IllegalStateException.class, e);', 'if (ise != null) {']
['error during disposing bundlecontext this exception will be ignored ', ['e']]
camel sample_10145

['bundles.addAll(Arrays.asList(bundleContext.getBundles()));', 'Collections.reverse(bundles);', 'for (Bundle bundle : bundles) {', 'bundle.stop();', '}', '}', '} catch (Exception e) {', 'IllegalStateException ise = ObjectHelper.getException(IllegalStateException.class, e);', 'if (ise != null) {', '} else {']
['error during disposing bundlecontext this exception will be ignored ', ['e']]
camel sample_10145

['}', '}', '} catch (Exception e) {', 'IllegalStateException ise = ObjectHelper.getException(IllegalStateException.class, e);', 'if (ise != null) {', '} else {', '}', '} finally {', 'String tempDir = System.clearProperty("org.osgi.framework.storage");', 'if (tempDir != null) {']
['deleting work directory ', ['tempdir']]
camel sample_10145

['public static void setPersistentFileForConfigAdmin(BundleContext bundleContext, String pid, String fileName, final Dictionary props, String symbolicName, Set<Long> bpEvents, boolean expectReload) throws IOException, InterruptedException {', 'if (pid != null) {', 'if (fileName == null) {', 'throw new IllegalArgumentException("The persistent file should not be null");', '} else {', 'File load = new File(fileName);']
['loading properties from osgi config admin file ', ['load']]
camel sample_10145

['throw new IllegalArgumentException("The persistent file should not be null");', '} else {', 'File load = new File(fileName);', 'org.apache.felix.utils.properties.Properties cfg = new org.apache.felix.utils.properties.Properties(load);', 'for (Object key : cfg.keySet()) {', 'props.put(key, cfg.get(key));', '}', 'ConfigurationAdmin configAdmin = CamelBlueprintHelper .getOsgiService(bundleContext, ConfigurationAdmin.class);', 'if (configAdmin != null) {', 'final Configuration config = configAdmin.getConfiguration(pid, null);']
['updating configadmin by overriding properties ', ['config', 'props']]
camel sample_10145

['}', '} else {', 'flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";', '}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker<T, T>(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();']
['test bundle headers ', ['explode', 'dic']]
camel sample_10145

['} else {', 'flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";', '}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker<T, T>(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {']
['servicereference bundle symbolicname ', ['ref', 'ref', 'getbundle', 'ref', 'getbundle', 'getsymbolicname']]
camel sample_10145

['}', 'Filter osgiFilter = FrameworkUtil.createFilter(flt);', 'tracker = new ServiceTracker<T, T>(bundleContext, osgiFilter, null);', 'tracker.open(true);', 'Object svc = tracker.waitForService(timeout);', 'if (svc == null) {', 'Dictionary<?, ?> dic = bundleContext.getBundle().getHeaders();', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {', '}', 'for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, flt))) {']
['filtered servicereference bundle symbolicname ', ['ref', 'ref', 'getbundle', 'ref', 'getbundle', 'getsymbolicname']]
camel sample_10145

['protected static TinyBundle createTestBundle(String name, String version, String descriptors) throws IOException {', 'TinyBundle bundle = TinyBundles.newBundle();', 'for (URL url : getBlueprintDescriptors(descriptors)) {']
['using blueprint xml file ', ['url', 'getfile']]
camel sample_10145

['protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {', 'List<URL> answer = new ArrayList<URL>();', 'if (descriptors != null) {', 'Iterator<Object> it = ObjectHelper.createIterator(descriptors);', 'while (it.hasNext()) {', 'String s = (String) it.next();']
['resource descriptor ', ['s']]
camel sample_10145

['Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName);', 'while (urls.hasMoreElements()) {', 'URL url = urls.nextElement();', 'File dir = new File(url.getFile());', 'if (dir.isDirectory()) {', 'File[] files = dir.listFiles();', 'if (files != null) {', 'for (File file : files) {', 'if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {', 'String name = packageName + file.getName();']
['resolving resource ', ['name']]
camel sample_10145

['URL xmlUrl = ObjectHelper.loadResourceAsURL(name);', 'if (xmlUrl != null) {', 'answer.add(xmlUrl);', '}', '}', '}', '}', '}', '}', '} else {']
['resolving resource ', ['s']]
camel sample_10145

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SftpComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sftp.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.sftp.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_732

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException, InvalidPayloadException {', 'final Integer jobs = exchange.getIn().getMandatoryBody(Integer.class);', 'final int result = client.kick(jobs);', 'if (LOG.isDebugEnabled()) {']
['kick d jobs kicked d actually ', ['string', 'format', 'jobs', 'result']]
camel sample_8161

['public void onOpen(WebSocket websocket) {']
['ws opened ', []]
camel sample_10000

['public void onClose(WebSocket websocket) {']
['ws closed ', []]
camel sample_10000

['public void onError(Throwable t) {']
['ws error ', ['t']]
camel sample_10000

['public void onMessage(byte[] message) {', 'received.add(message);']
['ws received bytes ', ['arrays', 'tostring', 'message']]
camel sample_10000

['public void onMessage(String message) {', 'received.add(message);']
['ws received ', ['message']]
camel sample_10000

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastAtomicnumberComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-atomicvalue.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-atomicvalue.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_677

['public void run() {', 'for (int j = 0; j < inner; j++) {', 'Document dom = context.getTypeConverter().convertTo(Document.class, "<hello>World</hello>");', 'assertNotNull(dom);', '}', 'latch.countDown();', '}', '});', '}', 'assertTrue("Should all work", latch.await(2, TimeUnit.MINUTES));']
['took ', ['watch', 'taken']]
camel sample_1340

['public void testXPathSTaXPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed file with elements in ', ['size', 'timeutils', 'printduration', 'watch', 'stop']]
camel sample_9320

['public void testXPathSTaXPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed tiny messages ', ['tiny', 'get']]
camel sample_9320

['public void testXPathSTaXPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed small messages ', ['small', 'get']]
camel sample_9320

['public void testXPathSTaXPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed medium messages ', ['med', 'get']]
camel sample_9320

['public void testXPathSTaXPerformanceRoute() throws Exception {', 'NotifyBuilder notify = new NotifyBuilder(context).whenDone(size).create();', 'boolean matches = notify.matches(60, TimeUnit.SECONDS);']
['processed large messages ', ['large', 'get']]
camel sample_9320

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("file:target/data?noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['starting to process file ', []]
camel sample_9320

['from("file:target/data?noop=true") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'watch.restart();', '}', '}) .split(stax(Order.class)).streaming() .choice() .when().xpath("/order/amount < 10") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>3</amount>"));', 'int num = tiny.incrementAndGet();', 'if (num % 100 == 0) {']
['processed tiny messages ', ['num']]
camel sample_9320

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 50") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>44</amount>"));', 'int num = small.incrementAndGet();', 'if (num % 100 == 0) {']
['processed small messages ', ['num']]
camel sample_9320

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .when().xpath("/order/amount < 100") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>88</amount>"));', 'int num = med.incrementAndGet();', 'if (num % 100 == 0) {']
['processed medium messages ', ['num']]
camel sample_9320

['if (num % 100 == 0) {', 'log.debug(xml);', '}', '}', '}) .otherwise() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'String xml = exchange.getIn().getBody(String.class);', 'assertTrue(xml, xml.contains("<amount>123</amount>"));', 'int num = large.incrementAndGet();', 'if (num % 100 == 0) {']
['processed large messages ', ['num']]
camel sample_9320

['public void onInit(Route route) {', 'super.onInit(route);']
['route managed by setting route autostartup flag to false ', ['getclass', 'route', 'getid']]
camel sample_3957

['private synchronized void setLeader(boolean isLeader) {', 'if (isLeader && leader.compareAndSet(false, isLeader)) {']
['leadership taken ', []]
camel sample_3957

['private synchronized void setLeader(boolean isLeader) {', 'if (isLeader && leader.compareAndSet(false, isLeader)) {', 'startManagedRoutes();', '} else if (!isLeader && leader.getAndSet(isLeader)) {']
['leadership lost ', []]
camel sample_3957

['private void doStartManagedRoutes() {', 'if (!isRunAllowed()) {', 'return;', '}', 'try {', 'for (Route route : stoppedRoutes) {', 'ServiceStatus status = route.getRouteContext().getRoute().getStatus(getCamelContext());', 'if (status.isStartable()) {']
['starting route ', ['route', 'getid']]
camel sample_3957

['private void doStopManagedRoutes() {', 'if (!isRunAllowed()) {', 'return;', '}', 'try {', 'for (Route route : startedRoutes) {', 'ServiceStatus status = route.getRouteContext().getRoute().getStatus(getCamelContext());', 'if (status.isStoppable()) {']
['stopping route ', ['route', 'getid']]
camel sample_3957

['private void onCamelContextStarted() {', 'if (contextStarted.compareAndSet(false, true)) {', 'if (initialDelay.toMillis() > 0) {']
['policy will be effective in ', ['initialdelay']]
camel sample_3957

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("direct:start"). marshal().json(JsonLibrary.XStream, PurchaseOrder.class). process(new Processor() {', 'public void process(Exchange exchange) throws Exception {']
['marshalled ', ['exchange', 'getin', 'getbody', 'string', 'class']]
camel sample_10283

['public void testUsingCustomExceptionHandlerAndOneRedelivery() throws Exception {', 'a.expectedMessageCount(1);', 'sendBody("direct:start", "a");', 'MockEndpoint.assertIsSatisfied(a, b);', 'List<Exchange> list = a.getReceivedExchanges();', 'assertTrue("List should not be empty!", !list.isEmpty());', 'Exchange exchange = list.get(0);', 'Message in = exchange.getIn();']
['found message with headers ', ['in', 'getheaders']]
camel sample_2645

['public void testUsingCustomExceptionHandlerWithNoRedeliveries() throws Exception {', 'b.expectedMessageCount(1);', 'sendBody("direct:start", "b");', 'MockEndpoint.assertIsSatisfied(a, b);', 'List<Exchange> list = b.getReceivedExchanges();', 'assertTrue("List should not be empty!", !list.isEmpty());', 'Exchange exchange = list.get(0);', 'Message in = exchange.getIn();']
['found message with headers ', ['in', 'getheaders']]
camel sample_2645

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = (input + "\\n").getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());']
['sending data ', []]
camel sample_6606

['private String sendAndReceiveUdpMessages(String input) throws Exception {', 'DatagramSocket socket = new DatagramSocket();', 'InetAddress address = InetAddress.getByName("127.0.0.1");', 'byte[] data = (input + "\\n").getBytes();', 'DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort());', 'socket.send(packet);', 'Thread.sleep(1000);', 'byte[] buf = new byte[128];', 'DatagramPacket receive = new DatagramPacket(buf, buf.length, address, getPort());']
['receiving data ', []]
camel sample_6606

['protected RouteBuilder createRouteBuilder() {', 'return new RouteBuilder() {', 'public void configure() {', 'from("netty:udp: public void process(Exchange exchange) throws Exception {', 'String s = exchange.getIn().getBody(String.class);']
['server got ', ['s']]
camel sample_6606

['ExecutorService executorService = this.executor;', 'if (executorService != null && this.isRunAllowed()) {', 'executorService.execute(() -> this.getAsyncProcessor().process(exchange, doneSync -> {', 'if (exchange.getException() != null) {', 'getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException());', '}', 'callback.done(doneSync);', '}));', 'return false;', '} else {']
['consumer not ready to process exchanges the exchange will be discarded ', ['exchange']]
camel sample_11492

['public KeyManager[] createKeyManagers() throws GeneralSecurityException, IOException {']
['creating keymanager from keymanagersparameters ', ['this']]
camel sample_4284

['String kmfAlgorithm = this.parsePropertyValue(this.getAlgorithm());', 'if (kmfAlgorithm == null) {', 'kmfAlgorithm = KeyManagerFactory.getDefaultAlgorithm();', '}', 'KeyManagerFactory kmf;', 'if (this.getProvider() == null) {', 'kmf = KeyManagerFactory.getInstance(kmfAlgorithm);', '} else {', 'kmf = KeyManagerFactory.getInstance(kmfAlgorithm, this.parsePropertyValue(this.getProvider()));', '}']
['keymanagerfactory initialized from is using provider and algorithm ', ['new', 'object', 'kmf', 'this', 'kmf', 'getprovider', 'kmf', 'getalgorithm']]
camel sample_4284

['} else {', 'kmf = KeyManagerFactory.getInstance(kmfAlgorithm, this.parsePropertyValue(this.getProvider()));', '}', 'char[] kmfPassword = null;', 'if (this.getKeyPassword() != null) {', 'kmfPassword = this.parsePropertyValue(this.getKeyPassword()).toCharArray();', '}', 'KeyStore ks = this.getKeyStore() == null ? null : this.getKeyStore().createKeyStore();', 'kmf.init(ks, kmfPassword);', 'keyManagers = kmf.getKeyManagers();']
['keymanager initialized from keymanagerfactory ', ['keymanagers', 'kmf']]
camel sample_4284

['public FilePropertySource(String name, ApplicationContext applicationContext, String directory) {', 'super(name);', 'StringHelper.notEmpty(directory, "directory");', 'Properties loaded = new Properties();', 'try {', 'Resource[] files = applicationContext.getResources(directory);', 'for (Resource file : files) {', 'if (file.exists()) {', 'try (FileInputStream fis = new FileInputStream(file.getFile())) {']
['loading properties from file ', ['file']]
camel sample_13440

['loaded.putAll(extra);', '}', '} catch (IOException e) {', '}', '}', '}', '} catch (IOException e) {', '}', 'if (loaded.isEmpty()) {', 'properties = null;']
['no properties found while loading from ', ['directory']]
camel sample_13440

['} catch (IOException e) {', '}', '}', '}', '} catch (IOException e) {', '}', 'if (loaded.isEmpty()) {', 'properties = null;', '} else {', 'properties = loaded;']
['loaded properties from ', ['properties', 'size', 'directory']]
camel sample_13440

['public Object getProperty(String name) {', 'Object answer = properties != null ? properties.getProperty(name) : null;']
['getproperty ', ['name', 'answer']]
camel sample_13440

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.setUseMDCLogging(true);', 'from("direct:a").routeId("route-a") .onCompletion() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals("route-a", MDC.get("camel.routeId"));', 'assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId"));', 'assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId"));', 'assertEquals("1", MDC.get("custom.id"));']
['from oncompletion after route a ', []]
camel sample_2350

['assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId"));', 'assertEquals("1", MDC.get("custom.id"));', '}', '}) .end() .to("log:foo") .to("direct:b");', 'from("direct:b").routeId("route-b") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'assertEquals("route-b", MDC.get("camel.routeId"));', 'assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId"));', 'assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId"));', 'MDC.put("custom.id", "1");']
['from processor in route b ', []]
camel sample_2350

['} else if (exchange.getIn().getHeader(Exchange.CONTENT_TYPE) != null) {', 'contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);', '}', 'if (contentType != null && contentType.contains(";")) {', 'contentType = MailUtils.padContentType(contentType);', '}', 'if (contentType != null) {', 'String charset = determineCharSet(configuration, exchange);', 'contentType = MailUtils.replaceCharSet(contentType, charset);', '}']
['determined content type ', ['contenttype']]
camel sample_11884

['try {', 'supported = Charset.isSupported(charset);', '} catch (IllegalCharsetNameException e) {', 'supported = false;', '}', 'if (supported) {', 'return charset;', '} else if (!configuration.isIgnoreUnsupportedCharset()) {', 'return charset;', '} else if (configuration.isIgnoreUnsupportedCharset()) {']
['charset is not supported and cannot be used as charset in content type header ', ['charset']]
camel sample_11884

['protected String populateContentOnMimeMessage(MimeMessage part, MailConfiguration configuration, Exchange exchange) throws MessagingException, IOException {', 'String contentType = determineContentType(configuration, exchange);']
['using content type for mimemessage ', ['contenttype', 'part']]
camel sample_11884

['protected String populateContentOnBodyPart(BodyPart part, MailConfiguration configuration, Exchange exchange) throws MessagingException, IOException {', 'String contentType = determineContentType(configuration, exchange);', 'if (contentType != null) {']
['using content type for bodypart ', ['contenttype', 'part']]
camel sample_11884

['public Object extractBodyFromMail(Exchange exchange, MailMessage mailMessage) {', 'Message message = mailMessage.getMessage();', 'try {', 'if (((MailEndpoint) exchange.getFromEndpoint()).getConfiguration().isMapMailMessage()) {', 'return message.getContent();', '}', 'return message;', '} catch (Exception e) {', 'UnsupportedEncodingException uee = ObjectHelper.getException(UnsupportedEncodingException.class, e);', 'if (uee != null) {']
['unsupported encoding detected ', ['uee', 'getmessage']]
camel sample_11884

['return message.getContent();', '}', 'return message;', '} catch (Exception e) {', 'UnsupportedEncodingException uee = ObjectHelper.getException(UnsupportedEncodingException.class, e);', 'if (uee != null) {', 'try {', 'String contentType = message.getContentType();', 'String type = ObjectHelper.before(contentType, "charset=");', 'if (type != null) {']
['trying to extract mail message again with fixed content type ', ['type']]
camel sample_11884

['public void extractAttachmentsFromMail(Message message, Map<String, Attachment> map) throws MessagingException, IOException {']
['extracting attachments start ', []]
camel sample_11884

['public void extractAttachmentsFromMail(Message message, Map<String, Attachment> map) throws MessagingException, IOException {', 'Object content = message.getContent();', 'if (content instanceof Multipart) {', 'extractAttachmentsFromMultipart((Multipart) content, map);', '} else if (content != null) {']
['no attachments to extract as content is not multipart ', ['content', 'getclass', 'getname']]
camel sample_11884

['public void extractAttachmentsFromMail(Message message, Map<String, Attachment> map) throws MessagingException, IOException {', 'Object content = message.getContent();', 'if (content instanceof Multipart) {', 'extractAttachmentsFromMultipart((Multipart) content, map);', '} else if (content != null) {', '}']
['extracting attachments done ', []]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);']
['part ', ['i', 'part']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {']
['part is mimetype multipart ', ['i']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part disposition ', ['i', 'disposition']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part description ', ['i', 'part', 'getdescription']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part contenttype ', ['i', 'part', 'getcontenttype']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part filename ', ['i', 'filename']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part size ', ['i', 'part', 'getsize']]
camel sample_11884

['protected void extractAttachmentsFromMultipart(Multipart mp, Map<String, Attachment> map) throws MessagingException, IOException {', 'for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {']
['part linecount ', ['i', 'part', 'getlinecount']]
camel sample_11884

['for (int i = 0; i < mp.getCount(); i++) {', 'Part part = mp.getBodyPart(i);', 'if (part.isMimeType("multipart/*")) {', 'extractAttachmentsFromMultipart((Multipart) part.getContent(), map);', '} else {', 'String disposition = part.getDisposition();', 'String fileName = part.getFileName();', 'if (LOG.isTraceEnabled()) {', '}', 'if (validDisposition(disposition, fileName) || fileName != null) {']
['mail contains file attachment ', ['filename']]
camel sample_11884

['if (validDisposition(disposition, fileName) || fileName != null) {', 'if (!map.containsKey(fileName)) {', 'DefaultAttachment camelAttachment = new DefaultAttachment(part.getDataHandler());', 'Enumeration<Header> headers = part.getAllHeaders();', 'while (headers.hasMoreElements()) {', 'Header header = headers.nextElement();', 'camelAttachment.addHeader(header.getName(), header.getValue());', '}', 'map.put(fileName, camelAttachment);', '} else {']
['cannot extract duplicate file attachment ', ['filename']]
camel sample_11884

['protected void addAttachmentsToMultipart(MimeMultipart multipart, String partDisposition, AttachmentsContentTransferEncodingResolver encodingResolver, Exchange exchange) throws MessagingException {']
['adding attachments start ', []]
camel sample_11884

['protected void addAttachmentsToMultipart(MimeMultipart multipart, String partDisposition, AttachmentsContentTransferEncodingResolver encodingResolver, Exchange exchange) throws MessagingException {', 'int i = 0;', 'for (Map.Entry<String, Attachment> entry : exchange.getIn().getAttachmentObjects().entrySet()) {', 'String attachmentFilename = entry.getKey();', 'Attachment attachment = entry.getValue();', 'if (LOG.isTraceEnabled()) {']
['attachment disposition ', ['i', 'partdisposition']]
camel sample_11884

['protected void addAttachmentsToMultipart(MimeMultipart multipart, String partDisposition, AttachmentsContentTransferEncodingResolver encodingResolver, Exchange exchange) throws MessagingException {', 'int i = 0;', 'for (Map.Entry<String, Attachment> entry : exchange.getIn().getAttachmentObjects().entrySet()) {', 'String attachmentFilename = entry.getKey();', 'Attachment attachment = entry.getValue();', 'if (LOG.isTraceEnabled()) {']
['attachment datahandler ', ['i', 'attachment', 'getdatahandler']]
camel sample_11884

['protected void addAttachmentsToMultipart(MimeMultipart multipart, String partDisposition, AttachmentsContentTransferEncodingResolver encodingResolver, Exchange exchange) throws MessagingException {', 'int i = 0;', 'for (Map.Entry<String, Attachment> entry : exchange.getIn().getAttachmentObjects().entrySet()) {', 'String attachmentFilename = entry.getKey();', 'Attachment attachment = entry.getValue();', 'if (LOG.isTraceEnabled()) {']
['attachment filename ', ['i', 'attachmentfilename']]
camel sample_11884

['for (String value : values) {', 'messageBodyPart.setHeader(headerName, value);', '}', '}', 'if (attachmentFilename.toLowerCase().startsWith("cid:")) {', 'messageBodyPart.addHeader("Content-ID", "<" + attachmentFilename.substring(4) + ">");', 'messageBodyPart.setFileName(attachmentFilename.substring(4));', '} else {', 'messageBodyPart.setFileName(attachmentFilename);', '}']
['attachment contenttype ', ['i', 'messagebodypart', 'getcontenttype']]
camel sample_11884

['}', '}', 'if (attachmentFilename.toLowerCase().startsWith("cid:")) {', 'messageBodyPart.addHeader("Content-ID", "<" + attachmentFilename.substring(4) + ">");', 'messageBodyPart.setFileName(attachmentFilename.substring(4));', '} else {', 'messageBodyPart.setFileName(attachmentFilename);', '}', 'if (contentTypeResolver != null) {', 'String contentType = contentTypeResolver.resolveContentType(attachmentFilename);']
['attachment using content type resolver resolved content type as ', ['i', 'contenttyperesolver', 'contenttype']]
camel sample_11884

['messageBodyPart.addHeader("Content-ID", "<" + attachmentFilename.substring(4) + ">");', 'messageBodyPart.setFileName(attachmentFilename.substring(4));', '} else {', 'messageBodyPart.setFileName(attachmentFilename);', '}', 'if (contentTypeResolver != null) {', 'String contentType = contentTypeResolver.resolveContentType(attachmentFilename);', 'if (contentType != null) {', 'String value = contentType + "; name=" + attachmentFilename;', 'messageBodyPart.setHeader("Content-Type", value);']
['attachment contenttype ', ['i', 'messagebodypart', 'getcontenttype']]
camel sample_11884

['String contentType = contentTypeResolver.resolveContentType(attachmentFilename);', 'if (contentType != null) {', 'String value = contentType + "; name=" + attachmentFilename;', 'messageBodyPart.setHeader("Content-Type", value);', '}', '}', 'resolveContentTransferEncoding(encodingResolver, i, messageBodyPart);', 'messageBodyPart.setDisposition(partDisposition);', 'multipart.addBodyPart(messageBodyPart);', '} else {']
['shouldaddattachment false ', []]
camel sample_11884

['String value = contentType + "; name=" + attachmentFilename;', 'messageBodyPart.setHeader("Content-Type", value);', '}', '}', 'resolveContentTransferEncoding(encodingResolver, i, messageBodyPart);', 'messageBodyPart.setDisposition(partDisposition);', 'multipart.addBodyPart(messageBodyPart);', '} else {', '}', '} else {']
['cannot add attachment as datahandler is null ', ['attachmentfilename']]
camel sample_11884

['}', 'resolveContentTransferEncoding(encodingResolver, i, messageBodyPart);', 'messageBodyPart.setDisposition(partDisposition);', 'multipart.addBodyPart(messageBodyPart);', '} else {', '}', '} else {', '}', 'i++;', '}']
['adding attachments done ', []]
camel sample_11884

['protected void resolveContentTransferEncoding(AttachmentsContentTransferEncodingResolver resolver, int i, BodyPart messageBodyPart) throws MessagingException {', 'if (resolver != null) {', 'String contentTransferEncoding = resolver.resolveContentTransferEncoding(messageBodyPart);']
['attachment using content transfer encoding resolver resolved content transfer encoding as ', ['i', 'resolver', 'contenttransferencoding']]
camel sample_11884

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from("direct:start") .log("Start ${body}") .split(body().tokenize("@"), new UseLatestAggregationStrategy()).parallelProcessing().streaming() .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'int num = exchange.getIn().getBody(int.class);', 'final long sleep = num * delay;']
['sleep for ms ', ['sleep']]
camel sample_3812

['public static void startGrpcServer() throws Exception {', 'grpcServerWithTLS = NettyServerBuilder.forPort(GRPC_TLS_TEST_PORT) .sslContext(GrpcSslContexts.forServer(new File("src/test/resources/certs/server.pem"), new File("src/test/resources/certs/server.key")) .trustManager(new File("src/test/resources/certs/ca.pem")) .clientAuth(ClientAuth.REQUIRE) .sslProvider(SslProvider.OPENSSL) .build()) .addService(new PingPongImpl()).build().start();', 'grpcServerWithJWT = NettyServerBuilder.forPort(GRPC_JWT_TEST_PORT) .addService(new PingPongImpl()) .intercept(new JwtServerInterceptor(JwtAlgorithm.HMAC256, GRPC_JWT_CORRECT_SECRET, null, null)) .build() .start();']
['grpc server with tls started on port ', ['grpc', 'tls', 'test', 'port']]
camel sample_7502

['public static void startGrpcServer() throws Exception {', 'grpcServerWithTLS = NettyServerBuilder.forPort(GRPC_TLS_TEST_PORT) .sslContext(GrpcSslContexts.forServer(new File("src/test/resources/certs/server.pem"), new File("src/test/resources/certs/server.key")) .trustManager(new File("src/test/resources/certs/ca.pem")) .clientAuth(ClientAuth.REQUIRE) .sslProvider(SslProvider.OPENSSL) .build()) .addService(new PingPongImpl()).build().start();', 'grpcServerWithJWT = NettyServerBuilder.forPort(GRPC_JWT_TEST_PORT) .addService(new PingPongImpl()) .intercept(new JwtServerInterceptor(JwtAlgorithm.HMAC256, GRPC_JWT_CORRECT_SECRET, null, null)) .build() .start();']
['grpc server with the jwt auth started on port ', ['grpc', 'jwt', 'test', 'port']]
camel sample_7502

['public static void stopGrpcServer() throws IOException {', 'if (grpcServerWithTLS != null) {', 'grpcServerWithTLS.shutdown();']
['grpc server with tls stoped ', []]
camel sample_7502

['public static void stopGrpcServer() throws IOException {', 'if (grpcServerWithTLS != null) {', 'grpcServerWithTLS.shutdown();', '}', 'if (grpcServerWithJWT != null) {', 'grpcServerWithJWT.shutdown();']
['grpc server with jwt stoped ', []]
camel sample_7502

['public void testWithEnableTLS() throws Exception {']
['grpc pingsyncsync method test start with tls enable ', []]
camel sample_7502

['public void testWithCorrectJWT() throws Exception {']
['grpc pingsyncsync method test start with correct jwt authentication ', []]
camel sample_7502

['public void testWithIncorrectJWT() throws Exception {']
['grpc pingsyncsync method test start with incorrect jwt authentication ', []]
camel sample_7502

['public void process(Exchange exchange) throws Exception {', 'try {', 'if (connection == null) {', 'connection = endpoint.createConnection();', '}', 'if (!connection.isConnected()) {', 'if (LOG.isDebugEnabled()) {']
['reconnecting to ', ['xmppendpoint', 'getconnectionmessage', 'connection']]
camel sample_12601

['public void testHammerJms() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(size);', 'for (int i = 0; i < size; i++) {', 'template.sendBody("direct:start", message);']
['send ', ['i']]
camel sample_7125

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_196

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyRouteTest.java"));', 'MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz);', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("direct:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, false);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_196

['public PullRequestCommentProducer(GitHubEndpoint endpoint) throws Exception {', 'super(endpoint);', 'Registry registry = endpoint.getCamelContext().getRegistry();', 'Object service = registry.lookupByName(GitHubConstants.GITHUB_PULL_REQUEST_SERVICE);', 'if (service != null) {']
['using pullrequestservice found in registry ', ['service', 'getclass', 'getcanonicalname']]
camel sample_14258

['protected void assertMethodPattern(BeanInfo info, String methodName, ExchangePattern expectedPattern) throws NoSuchMethodException {', 'Class<?> type = info.getType();', 'Method method = type.getMethod(methodName);', 'assertNotNull("Could not find method: " + methodName, method);', 'MethodInfo methodInfo = info.getMethodInfo(method);', 'assertNotNull("Could not find methodInfo for: " + method, methodInfo);', 'ExchangePattern actualPattern = methodInfo.getPattern();', 'assertEquals("Pattern for: " + method, expectedPattern, actualPattern);']
['method has pattern ', ['method', 'actualpattern']]
camel sample_3166

['private static Calendar parseRfc3164Date(ByteBuffer byteBuffer) {', 'char charFound;', 'char[] month = new char[3];', 'for (int i = 0; i < 3; i++) {', 'month[i] = (char) (byteBuffer.get() & 0xff);', '}', 'charFound = (char) byteBuffer.get();', "if (charFound != ' ') {"]
['invalid syslog message missing a mandatory space after month ', []]
camel sample_6734

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<XPathLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xpath.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.xpath.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_895

['protected Language getLanguage(String name, CamelContext context) {']
['finding language ', ['name']]
camel sample_13088

['protected LanguageResolver getLanguageResolver(String name, CamelContext context) {']
['finding languageresolver ', ['name']]
camel sample_13088

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> properties) throws Exception {', 'AS400ConnectionPool connectionPool;', 'if (properties.containsKey(CONNECTION_POOL)) {']
['instance specified in the uri will look it up ', []]
camel sample_16770

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> properties) throws Exception {', 'AS400ConnectionPool connectionPool;', 'if (properties.containsKey(CONNECTION_POOL)) {', 'String poolId = properties.remove(CONNECTION_POOL).toString();', 'connectionPool = EndpointHelper.resolveReferenceParameter(getCamelContext(), poolId, AS400ConnectionPool.class, true);', '} else {']
['no instance specified in the uri one will be provided ', []]
camel sample_16770

['public synchronized AS400ConnectionPool getConnectionPool() {', 'if (connectionPool == null) {']
['instantiating the default connection pool ', []]
camel sample_16770

['protected void doShutdown() throws Exception {', 'super.doShutdown();', 'if (connectionPool != null) {']
['shutting down the default connection pool ', ['connectionpool']]
camel sample_16770

['protected void doSuspend() throws Exception {', 'if (channel != null) {']
['serverbootstrap disconnecting from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6671

['serverBootstrap.setOption("reuseAddress", configuration.isReuseAddress());', 'serverBootstrap.setOption("connectTimeoutMillis", configuration.getConnectTimeout());', 'if (configuration.getBacklog() > 0) {', 'serverBootstrap.setOption("backlog", configuration.getBacklog());', '}', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'serverBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}']
['created serverbootstrap with options ', ['serverbootstrap', 'serverbootstrap', 'getoptions']]
camel sample_6671

['serverBootstrap.setOption("connectTimeoutMillis", configuration.getConnectTimeout());', 'if (configuration.getBacklog() > 0) {', 'serverBootstrap.setOption("backlog", configuration.getBacklog());', '}', 'if (configuration.getOptions() != null) {', 'for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {', 'serverBootstrap.setOption(entry.getKey(), entry.getValue());', '}', '}', 'serverBootstrap.setPipelineFactory(pipelineFactory);']
['serverbootstrap connecting to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6671

['protected Channel openChannel(ChannelFuture channelFuture) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['waiting for operation to complete for millis ', ['channelfuture', 'configuration', 'getconnecttimeout']]
camel sample_6671

['}', 'if (!channelFuture.isDone() || !channelFuture.isSuccess()) {', 'ConnectException cause = new ConnectException("Cannot connect to " + configuration.getAddress());', 'if (channelFuture.getCause() != null) {', 'cause.initCause(channelFuture.getCause());', '}', 'throw cause;', '}', 'Channel answer = channelFuture.getChannel();', 'if (LOG.isDebugEnabled()) {']
['creating connector to address ', ['configuration', 'getaddress']]
camel sample_6671

['protected void stopServerBootstrap() {']
['serverbootstrap disconnecting from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_6671

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<TidyMarkupDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.tidymarkup.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.tidymarkup.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_483

['public void configure() throws Exception {', 'String routeId = "mllp-test-receiver-route";', 'onCompletion() .to("mock: .toF("log:%s?level=INFO&showAll=true", routeId) .log(LoggingLevel.INFO, routeId, "Test route complete");']
['mllp mllpclient getmllphost mllpclient getmllpport connecttimeout responsetimeout routeid routeid log logginglevel info routeid message to result ', ['test', 'route', 'received']]
camel sample_13821

['public Exchange add(final CamelContext camelContext, final String key, final Exchange exchange) {']
['adding an exchange with id for key in a thread safe manner ', ['exchange', 'getexchangeid', 'key']]
camel sample_12733

['public void remove(CamelContext camelContext, String key, Exchange exchange) {']
['removing an exchange with id for key ', ['exchange', 'getexchangeid', 'key']]
camel sample_12733

['public void confirm(CamelContext camelContext, String exchangeId) {']
['confirming an exchange with id ', ['exchangeid']]
camel sample_12733

['public Set<String> scan(CamelContext camelContext) {']
['scanning for exchanges to recover in context ', ['camelcontext', 'getname']]
camel sample_12733

['public Set<String> scan(CamelContext camelContext) {', 'Set<String> scanned = Collections.unmodifiableSet(getKeys());']
['found keys for exchanges to recover in context ', ['scanned', 'size', 'camelcontext', 'getname']]
camel sample_12733

['public Exchange recover(CamelContext camelContext, String exchangeId) {']
['recovering an exchange with id ', ['exchangeid']]
camel sample_12733

['private boolean convertIfRequired(Message message, DataType type) throws Exception {', 'if (type != null && type.isJavaType() && type.getName() != null) {', 'CamelContext context = message.getExchange().getContext();', 'Class<?> typeJava = getClazz(type.getName(), context);', 'if (!typeJava.isAssignableFrom(message.getBody().getClass())) {']
['converting to ', ['typejava', 'getname']]
camel sample_4565

['public void groupEvent(Group group, GroupEvent event) {', 'switch (event) {', 'case CONNECTED: break;', 'case CHANGED: if (singleton.isConnected()) {', 'if (singleton.isMaster()) {', 'if (LOG.isDebugEnabled()) {']
['master standby endpoint is master for in ', ['endpoint', 'endpoint', 'getcamelcontext']]
camel sample_9707

['public void groupEvent(Group group, GroupEvent event) {', 'switch (event) {', 'case CONNECTED: break;', 'case CHANGED: if (singleton.isConnected()) {', 'if (singleton.isMaster()) {', 'if (LOG.isDebugEnabled()) {', '}', 'onLockOwned();', '} else {', 'if (LOG.isDebugEnabled()) {']
['master standby endpoint is standby for in ', ['endpoint', 'endpoint', 'getcamelcontext']]
camel sample_9707

['if (LOG.isDebugEnabled()) {', '}', 'onLockOwned();', '} else {', 'if (LOG.isDebugEnabled()) {', '}', '}', '}', 'break;', 'case DISCONNECTED: try {']
['disconnecting as master stopping consumer ', ['endpoint']]
camel sample_9707

['onLockOwned();', '} else {', 'if (LOG.isDebugEnabled()) {', '}', '}', '}', 'break;', 'case DISCONNECTED: try {', 'onDisconnected();', '} catch (Exception e) {']
['failed to stop master consumer for this exception is ignored ', ['endpoint', 'e']]
camel sample_9707

['public void process(Exchange exchange) throws Exception {', 'List<Exchange> entryList = prepareExchangeList(exchange);', 'if (entryList == null || entryList.size() == 0) {']
['the incoming message is either null or empty triggered by an aggregation timeout ', []]
camel sample_17248

['public void process(Exchange exchange) throws Exception {', 'List<Exchange> entryList = prepareExchangeList(exchange);', 'if (entryList == null || entryList.size() == 0) {', 'return;', '}', 'if (logger.isDebugEnabled()) {']
['uploader thread id api call completed ', ['thread', 'currentthread', 'getid', 'exchange', 'getexchangeid']]
camel sample_17248

['try {', 'String fqn = file.getPath();', 'String baseDir = ".";', 'JavaType out = Roaster.parse(file);', 'if (out instanceof JavaClassSource) {', 'JavaClassSource clazz = (JavaClassSource) out;', 'List<CamelNodeDetails> result = RouteBuilderParser.parseRouteBuilderTree(clazz, baseDir, fqn, true);', 'routeTrees.addAll(result);', '}', '} catch (Exception e) {']
['error parsing java file code due ', ['file', 'e', 'getmessage', 'e']]
camel sample_70

['for (File file : xmlFiles) {', 'if (matchFile(file)) {', 'try {', 'String fqn = file.getPath();', 'String baseDir = ".";', 'InputStream is = new FileInputStream(file);', 'List<CamelNodeDetails> result = XmlRouteParser.parseXmlRouteTree(is, baseDir, fqn);', 'routeTrees.addAll(result);', 'is.close();', '} catch (Exception e) {']
['error parsing xml file code due ', ['file', 'e', 'getmessage', 'e']]
camel sample_70

['String fqn = file.getPath();', 'String baseDir = ".";', 'InputStream is = new FileInputStream(file);', 'List<CamelNodeDetails> result = XmlRouteParser.parseXmlRouteTree(is, baseDir, fqn);', 'routeTrees.addAll(result);', 'is.close();', '} catch (Exception e) {', '}', '}', '}']
['discovered routes ', ['routetrees', 'size']]
camel sample_70

['InputStream is = new FileInputStream(file);', 'List<CamelNodeDetails> result = XmlRouteParser.parseXmlRouteTree(is, baseDir, fqn);', 'routeTrees.addAll(result);', 'is.close();', '} catch (Exception e) {', '}', '}', '}', 'long anonymous = routeTrees.stream().filter(t -> t.getRouteId() == null).count();', 'if (!anonymousRoutes && anonymous > 0) {']
['discovered anonymous routes add route ids to these routes for route coverage support ', ['anonymous']]
camel sample_70

['}', 'final AtomicInteger notCovered = new AtomicInteger();', 'List<CamelNodeDetails> routeIdTrees = routeTrees.stream().filter(t -> t.getRouteId() != null).collect(Collectors.toList());', 'List<CamelNodeDetails> anonymousRouteTrees = routeTrees.stream().filter(t -> t.getRouteId() == null).collect(Collectors.toList());', 'for (CamelNodeDetails t : routeIdTrees) {', 'String routeId = t.getRouteId();', 'String fileName = stripRootPath(asRelativeFile(t.getFileName()));', 'try {', 'List<CoverageData> coverageData = RouteCoverageHelper.parseDumpRouteCoverageByRouteId("target/camel-route-coverage", routeId);', 'if (coverageData.isEmpty()) {']
['no route coverage data found for route make sure to enable route coverage in your unit tests and assign unique route ids to your routes also remember to run unit tests first ', ['routeid']]
camel sample_70

['List<CamelNodeDetails> anonymousRouteTrees = routeTrees.stream().filter(t -> t.getRouteId() == null).collect(Collectors.toList());', 'for (CamelNodeDetails t : routeIdTrees) {', 'String routeId = t.getRouteId();', 'String fileName = stripRootPath(asRelativeFile(t.getFileName()));', 'try {', 'List<CoverageData> coverageData = RouteCoverageHelper.parseDumpRouteCoverageByRouteId("target/camel-route-coverage", routeId);', 'if (coverageData.isEmpty()) {', '} else {', 'List<RouteCoverageNode> coverage = gatherRouteCoverageSummary(Collections.singletonList(t), coverageData);', 'String out = templateCoverageData(fileName, routeId, coverage, notCovered);']
['route coverage summary ', ['out']]
camel sample_70

['getLog().info("");', '}', '} catch (Exception e) {', 'throw new MojoExecutionException("Error during gathering route coverage data for route: " + routeId, e);', '}', '}', 'if (anonymousRoutes && !anonymousRouteTrees.isEmpty()) {', 'try {', 'Map<String, List<CoverageData>> datas = RouteCoverageHelper.parseDumpRouteCoverageByClassAndTestMethod("target/camel-route-coverage");', 'if (datas.isEmpty()) {']
['no route coverage data found make sure to enable route coverage in your unit tests also remember to run unit tests first ', []]
camel sample_70

['String key = entry.getKey();', "String dataClassName = key.substring(0, key.indexOf('-'));", 'if (dataClassName.equals(className)) {', 'List<RouteCoverageNode> result = gatherRouteCoverageSummary(t.getValue(), entry.getValue());', 'mergeCoverageData(coverage, result);', '}', '}', 'if (!coverage.isEmpty()) {', 'String fileName = stripRootPath(asRelativeFile(t.getValue().get(0).getFileName()));', 'String out = templateCoverageData(fileName, null, coverage, notCovered);']
['route coverage summary ', ['out']]
camel sample_70

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {']
['found routebuilder class ', ['aclass']]
camel sample_8116

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {', 'if (shouldIgnoreBean(aClass)) {']
['ignoring routebuilder class ', ['aclass']]
camel sample_8116

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {', 'if (shouldIgnoreBean(aClass)) {', 'continue;', '}', 'if (!isValidClass(aClass)) {']
['ignoring invalid routebuilder class ', ['aclass']]
camel sample_8116

['public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {', 'Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages);', 'for (Class<?> aClass : classes) {', 'if (shouldIgnoreBean(aClass)) {', 'continue;', '}', 'if (!isValidClass(aClass)) {', 'continue;', '}', 'RoutesBuilder builder = instantiateBuilder(aClass);']
['adding instantiated routebuilder ', ['builder']]
camel sample_8116

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<BeanValidatorComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bean-validator.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.bean-validator.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_745

['public void onNewArtifacts(Set<NexusArtifactDto> newArtifacts) {', 'for (NexusArtifactDto dto : newArtifacts) {', 'try {']
['processing new artifact ', ['dto', 'getgroupid', 'dto', 'getartifactid', 'dto', 'getversion']]
camel sample_315

['public void onNewArtifacts(Set<NexusArtifactDto> newArtifacts) {', 'for (NexusArtifactDto dto : newArtifacts) {', 'try {', 'String url = createArtifactURL(dto);', 'URL jarUrl = new URL(url);', 'addCustomCamelComponentsFromArtifact(dto, jarUrl);', '} catch (Throwable e) {']
['error downloading component jar this exception is ignored ', ['dto', 'getartifactlink', 'e', 'getmessage']]
camel sample_315

['if (javaType != null) {', 'String json = loadComponentJSonSchema(log, classLoader, scheme);', 'if (json != null) {', 'addComponent(dto, getCamelCatalog(), scheme, javaType, json);', '}', '}', '}', '}', '}', '} catch (IOException e) {']
['error scanning jar for custom camel components ', ['e']]
camel sample_315

['public void testLoadTestHawtDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);']
['staring to send messages ', ['size']]
camel sample_11723

['MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];']
['sending with id ', ['value', 'id']]
camel sample_11723

['final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];', 'template.sendBodyAndHeader("direct:start", value, "id", "" + id);', 'Thread.sleep(3);', 'return null;', '}', '});', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_11723

['public void remove(Table table, byte[] row) {', 'Delete delete = new Delete(row);', 'try {', 'table.delete(delete);', '} catch (IOException e) {']
['failed to delete row from table this exception will be ignored ', ['e']]
camel sample_14521

['public String doOrder(Order order) {']
['processing order ', []]
camel sample_7871

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AtmosComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atmos.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.atmos.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_968

['public void onEvent(BoxEvent event) {', 'try {']
['processed event for ', ['apiconsumerhelper', 'getresultsprocessed', 'this', 'event', 'false', 'boxconnection']]
camel sample_17423

['public void onEvent(BoxEvent event) {', 'try {', '} catch (Exception e) {']
['received exception consuming event ', ['e']]
camel sample_17423

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DozerComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dozer.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.dozer.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_591

['public void doCheese() {']
['docheese called ', []]
camel sample_10759

['public void validate(Message message, DataType type) throws ValidationException {', 'Exchange exchange = message.getExchange();']
['sending to validate processor ', ['processor']]
camel sample_3977

['protected void onEventBusEvent(final Message event) {']
['onevent ', ['event']]
camel sample_11518

['protected void onEventBusEvent(final Message event) {', 'final boolean reply = event.replyAddress() != null;', 'final Exchange exchange = endpoint.createExchange(reply ? ExchangePattern.InOut : ExchangePattern.InOnly);', 'exchange.getIn().setBody(event.body());', 'try {', 'getAsyncProcessor().process(exchange, new AsyncCallback() {', 'public void done(boolean doneSync) {', 'if (reply) {', 'Object body = getVertxBody(exchange);', 'if (body != null) {']
['sending reply to with body ', ['event', 'replyaddress', 'body']]
camel sample_11518

['protected void doStart() throws Exception {', 'if (LOG.isDebugEnabled()) {']
['registering eventbus handler on address ', ['endpoint', 'getaddress']]
camel sample_11518

['protected void doStop() throws Exception {', 'if (LOG.isDebugEnabled()) {']
['unregistering eventbus handler on address ', ['endpoint', 'getaddress']]
camel sample_11518

['protected void doStop() throws Exception {', 'if (LOG.isDebugEnabled()) {', '}', 'try {', 'if (messageConsumer != null && messageConsumer.isRegistered()) {', 'messageConsumer.unregister();', 'messageConsumer = null;', '}', '} catch (IllegalStateException e) {']
['eventbus already stopped on address ', ['endpoint', 'getaddress']]
camel sample_11518

['public void create() throws Exception {']
['creating database tables ', []]
camel sample_17835

['if (connection == null) {', 'EmbeddedDriver driver = new EmbeddedDriver();', 'connection = driver.connect(url + ";create=true", null);', '}', 'String sql = "create table ORDERS (\\n" + "  ORD_ID integer primary key,\\n" + "  ITEM varchar(10),\\n" + "  ITEM_COUNT varchar(5),\\n" + "  ITEM_DESC varchar(30),\\n" + "  ORD_DELETED boolean\\n" + ")";', 'try {', 'execute("drop table orders");', '} catch (Throwable e) {', '}', 'execute(sql);']
['database tables created ', []]
camel sample_17835

['public void drop() throws Exception {']
['dropping database tables ', []]
camel sample_17835

['public void drop() throws Exception {', 'try {', 'execute("drop table orders");', '} catch (Throwable e) {', '}', 'connection.close();']
['database tables dropped ', []]
camel sample_17835

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<CxfRsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cxfrs.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.cxfrs.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_987

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<QuickfixjComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.quickfix.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.quickfix.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1049

['public void configure() {', 'errorHandler(deadLetterChannel("mock:error") .maximumRedeliveries(3) .redeliveryDelay(0L) .onRedelivery(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'final Message in = exchange.getIn();', 'final int count = in.getHeader(Exchange.REDELIVERY_COUNTER, Integer.class);', 'final int maxCount = in.getHeader(Exchange.REDELIVERY_MAX_COUNTER, Integer.class);', 'log.info("Redelivery count = {}", count);', 'if (count >= (maxCount - 1)) {', 'if (sshd != null) {', 'sshd.start();']
['restarting sshd ', []]
camel sample_10020

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<JaxbDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jaxb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.jaxb.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_657

['StringBuilder sb = new StringBuilder();', 'for (char ch : hostName.toCharArray()) {', 'if (ch < 127) {', 'sb.append(ch);', '} else {', 'changed = true;', '}', '}', 'if (changed) {', 'String newHost = sb.toString();']
['sanitized hostname from to ', ['hostname', 'newhost']]
camel sample_4162

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);']
['recipientlist is not using producercache ', ['this']]
camel sample_4532

['protected void doStart() throws Exception {', 'if (producerCache == null) {', 'if (cacheSize < 0) {', 'producerCache = new EmptyProducerCache(this, camelContext);', '} else if (cacheSize == 0) {', 'producerCache = new ProducerCache(this, camelContext);']
['recipientlist using producercache with default cache size ', ['this']]
camel sample_4532

['private Connection openConnection() throws IOException, TimeoutException {', 'if (!isConnectionOpened()) {']
['open connection ', []]
camel sample_14126

['private Channel openChannel() throws IOException, TimeoutException {', 'if (!isChannelOpened()) {']
['open channel ', []]
camel sample_14126

['public void closeConnection() throws TimeoutException {', 'if (isChannelOpened()) {', 'try {']
['close channel ', []]
camel sample_14126

['public void closeConnection() throws TimeoutException {', 'if (isChannelOpened()) {', 'try {', 'channel.close();', '} catch (IOException e) {', '}', '}', 'if (isConnectionOpened()) {', 'try {']
['close connection ', []]
camel sample_14126

['public void read(String body, @Simple("${header.foo}") String foo) {', 'this.foo = foo;', 'this.body = body;']
['read method called on ', ['this']]
camel sample_3218

['public void transform(Message message, DataType from, DataType to) throws Exception {', 'Exchange exchange = message.getExchange();', 'CamelContext context = exchange.getContext();', 'if ((to == null || to.isJavaType()) && (from.equals(getFrom()) || from.getModel().equals(getModel()))) {', 'DataFormat dataFormat = getDataFormat(exchange);']
['unmarshaling with ', ['dataformat']]
camel sample_4027

['public void transform(Message message, DataType from, DataType to) throws Exception {', 'Exchange exchange = message.getExchange();', 'CamelContext context = exchange.getContext();', 'if ((to == null || to.isJavaType()) && (from.equals(getFrom()) || from.getModel().equals(getModel()))) {', 'DataFormat dataFormat = getDataFormat(exchange);', 'Object answer = dataFormat.unmarshal(exchange, message.getBody(InputStream.class));', 'if (to != null && to.getName() != null) {', 'Class<?> toClass = context.getClassResolver().resolveClass(to.getName());', 'if (!toClass.isAssignableFrom(answer.getClass())) {']
['converting to ', ['toclass', 'getname']]
camel sample_4027

['if (!toClass.isAssignableFrom(answer.getClass())) {', 'answer = context.getTypeConverter().mandatoryConvertTo(toClass, answer);', '}', '}', 'message.setBody(answer);', '} else if ((from == null || from.isJavaType()) && (to.equals(getTo()) || to.getModel().equals(getModel()))) {', 'Object input = message.getBody();', 'if (from != null && from.getName() != null) {', 'Class<?> fromClass = context.getClassResolver().resolveClass(from.getName());', 'if (!fromClass.isAssignableFrom(input.getClass())) {']
['converting to ', ['fromclass', 'getname']]
camel sample_4027

['} else if ((from == null || from.isJavaType()) && (to.equals(getTo()) || to.getModel().equals(getModel()))) {', 'Object input = message.getBody();', 'if (from != null && from.getName() != null) {', 'Class<?> fromClass = context.getClassResolver().resolveClass(from.getName());', 'if (!fromClass.isAssignableFrom(input.getClass())) {', 'input = context.getTypeConverter().mandatoryConvertTo(fromClass, input);', '}', '}', 'OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);', 'DataFormat dataFormat = getDataFormat(exchange);']
['marshaling with ', ['dataformat']]
camel sample_4027

['public void testApi() throws Exception {', 'Exchange exchange = template.request("http: assertThat(exchange.getOut().getHeader(HTTP_RESPONSE_CODE, Integer.class), is(200));', 'String body = exchange.getOut().getBody(String.class);']
['received body ', ['body']]
camel sample_9245

['public void initialize(Client client, Bus bus) {', 'client.getEndpoint().put("org.apache.cxf.binding.soap.addNamespaceContext", "true");', 'removeFaultInInterceptorFromClient(client);', 'removeInterceptor(client.getEndpoint().getInInterceptors(), HolderInInterceptor.class);', 'removeInterceptor(client.getEndpoint().getOutInterceptors(), HolderOutInterceptor.class);', 'removeInterceptor(client.getEndpoint().getBinding().getInInterceptors(), SoapHeaderInterceptor.class);', 'client.getEndpoint().getBinding().getInInterceptors().add(new ConfigureDocLitWrapperInterceptor(true));', 'resetPartTypes(client.getEndpoint().getBinding());']
['initialized cxf client in payload mode with allow streaming ', ['client', 'allowstreaming']]
camel sample_8004

['public void initialize(Server server, Bus bus) {', 'server.getEndpoint().put("org.apache.cxf.binding.soap.addNamespaceContext", "true");', 'server.getEndpoint().getBinding().getInInterceptors().add(new ConfigureDocLitWrapperInterceptor(true));', 'if (server.getEndpoint().getBinding() instanceof SoapBinding) {', 'server.getEndpoint().getBinding().getOutInterceptors().add(new SetSoapVersionInterceptor());', '}', 'removeInterceptor(server.getEndpoint().getInInterceptors(), HolderInInterceptor.class);', 'removeInterceptor(server.getEndpoint().getOutInterceptors(), HolderOutInterceptor.class);', 'removeInterceptor(server.getEndpoint().getBinding().getInInterceptors(), SoapHeaderInterceptor.class);', 'resetPartTypes(server.getEndpoint().getBinding());']
['initialized cxf server in payload mode with allow streaming ', ['server', 'allowstreaming']]
camel sample_8004

['public void notifyElementEvicted(Ehcache cache, Element element) {']
['element is being evicted from cache ', ['element', 'cache', 'getname']]
camel sample_10535

['public void notifyElementExpired(Ehcache cache, Element element) {']
['element has expired in cache ', ['element', 'cache', 'getname']]
camel sample_10535

['public void notifyElementPut(Ehcache cache, Element element) throws CacheException {']
['element has just been added put in cache ', ['element', 'cache', 'getname']]
camel sample_10535

['public void notifyElementRemoved(Ehcache cache, Element element) throws CacheException {']
['element has just been removed from cache ', ['element', 'cache', 'getname']]
camel sample_10535

['public void notifyElementUpdated(Ehcache cache, Element element) throws CacheException {']
['element has just been updated in cache ', ['element', 'cache', 'getname']]
camel sample_10535

['public void notifyRemoveAll(Ehcache cache) {']
['cache is being emptied and all elements removed ', ['cache', 'getname']]
camel sample_10535

['private void dispatchExchange(Ehcache cache, Element element, String operation) {', 'Exchange exchange;']
['consumer dispatching the exchange containing the element in cache ', ['element', 'cache', 'getname']]
camel sample_10535

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastSetComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-set.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-set.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_712

['private CuratorFramework getOrCreateCurator() throws Exception {', 'if (curator == null) {', 'curator = configuration.getCuratorFramework();', 'if (curator == null) {', 'managedInstance = true;']
['starting zookeeper curator with namespace nodes ', ['configuration', 'getnamespace', 'string', 'join', 'configuration', 'getnodes']]
camel sample_12637

['public void testStaticResource() throws Exception {', 'AsyncHttpClient c = new DefaultAsyncHttpClient();', 'WebSocket websocket = c.prepareGet("ws: new WebSocketUpgradeHandler.Builder() .addWebSocketListener(new WebSocketTextListener() {', 'public void onMessage(String message) {', 'received.add(message);']
['received ', ['message']]
camel sample_17435

['public void testGet() throws Exception {', 'final com.google.api.services.drive.model.About result = requestBody("direct: assertNotNull("get result", result);']
['get ', ['result']]
camel sample_15408

['try {', 'getProcessor().process(camelExchange);', '} catch (Exception e) {', 'getExceptionHandler().handleException(e);', '} finally {', 'doneUoW(camelExchange);', '}', 'Object body = getResponseBody(httpExchange, camelExchange);', 'TypeConverter tc = getEndpoint().getCamelContext().getTypeConverter();', 'if (body == null) {']
['no payload to send as reply for exchange ', ['camelexchange']]
camel sample_13163

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DigitalOceanComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.digitalocean.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.digitalocean.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_991

['public void testJaxrsRelayRoute() throws Exception {', 'final Main main = new Main();', 'try {', 'main.setApplicationContextUri("org/apache/camel/component/cxf/jaxrs/CxfRsSpringRelay.xml");', 'main.start();', 'Thread t = new Thread(new Runnable() {', 'public void run() {', 'try {', 'JAXRSClientFactory.create("http: .upload(CamelRouteBuilder.class.getResourceAsStream(SAMPLE_CONTENT_PATH), SAMPLE_NAME);', '} catch (Exception e) {']
['error uploading to http ', []]
camel sample_7922

['public void testGetCompanies() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.email_domain", "linkedin.com");', 'final org.apache.camel.component.linkedin.api.model.Companies result = requestBodyAndHeaders("direct: assertNotNull("getCompanies result", result);']
['getcompanies ', ['result']]
camel sample_8854

['public void testGetCompanyById() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", TEST_COMPANY_ID);', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Company result = requestBodyAndHeaders("direct: assertNotNull("getCompanyById result", result);']
['getcompanybyid ', ['result']]
camel sample_8854

['public void testGetCompanyByName() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.universal_name", "linkedin");', 'headers.put("CamelLinkedIn.fields", null);', 'final org.apache.camel.component.linkedin.api.model.Company result = requestBodyAndHeaders("direct: assertNotNull("getCompanyByName result", result);']
['getcompanybyname ', ['result']]
camel sample_8854

['public void testGetCompanyUpdateComments() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", 0L);', 'headers.put("CamelLinkedIn.update_key", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.UpdateComments result = requestBodyAndHeaders("direct: assertNotNull("getCompanyUpdateComments result", result);']
['getcompanyupdatecomments ', ['result']]
camel sample_8854

['public void testGetCompanyUpdateLikes() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", 0L);', 'headers.put("CamelLinkedIn.update_key", null);', 'headers.put("CamelLinkedIn.fields", null);', 'headers.put("CamelLinkedIn.secure_urls", null);', 'final org.apache.camel.component.linkedin.api.model.Likes result = requestBodyAndHeaders("direct: assertNotNull("getCompanyUpdateLikes result", result);']
['getcompanyupdatelikes ', ['result']]
camel sample_8854

['public void testGetCompanyUpdates() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", TEST_COMPANY_ID);', 'headers.put("CamelLinkedIn.event_type", EventType.STATUS_UPDATE);', 'headers.put("CamelLinkedIn.start", null);', 'headers.put("CamelLinkedIn.count", null);', 'final org.apache.camel.component.linkedin.api.model.Updates result = requestBodyAndHeaders("direct: assertNotNull("getCompanyUpdates result", result);']
['getcompanyupdates ', ['result']]
camel sample_8854

['public void testGetHistoricalFollowStatistics() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", 0L);', 'headers.put("CamelLinkedIn.start_timestamp", null);', 'headers.put("CamelLinkedIn.end_timestamp", null);', 'headers.put("CamelLinkedIn.time_granularity", null);', 'final org.apache.camel.component.linkedin.api.model.HistoricalFollowStatistics result = requestBodyAndHeaders("direct: assertNotNull("getHistoricalFollowStatistics result", result);']
['gethistoricalfollowstatistics ', ['result']]
camel sample_8854

['public void testGetHistoricalStatusUpdateStatistics() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", TEST_COMPANY_ID);', 'headers.put("CamelLinkedIn.start_timestamp", null);', 'headers.put("CamelLinkedIn.end_timestamp", null);', 'headers.put("CamelLinkedIn.time_granularity", null);', 'headers.put("CamelLinkedIn.statistics_update_key", null);', 'final org.apache.camel.component.linkedin.api.model.HistoricalStatusUpdateStatistics result = requestBodyAndHeaders("direct: assertNotNull("getHistoricalStatusUpdateStatistics result", result);']
['gethistoricalstatusupdatestatistics ', ['result']]
camel sample_8854

['public void testGetNumberOfFollowers() throws Exception {', 'final Map<String, Object> headers = new HashMap<String, Object>();', 'headers.put("CamelLinkedIn.company_id", TEST_COMPANY_ID);', 'headers.put("CamelLinkedIn.geos", null);', 'headers.put("CamelLinkedIn.companySizes", null);', 'headers.put("CamelLinkedIn.jobFunc", null);', 'headers.put("CamelLinkedIn.industries", null);', 'headers.put("CamelLinkedIn.seniorities", null);', 'final org.apache.camel.component.linkedin.api.model.NumFollowers result = requestBodyAndHeaders("direct: assertNotNull("getNumberOfFollowers result", result);']
['getnumberoffollowers ', ['result']]
camel sample_8854

['public void testGetStatistics() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.CompanyStatistics result = requestBody("direct: assertNotNull("getStatistics result", result);']
['getstatistics ', ['result']]
camel sample_8854

['public void testIsShareEnabled() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.IsCompanyShareEnabled result = requestBody("direct: assertNotNull("isShareEnabled result", result);']
['isshareenabled ', ['result']]
camel sample_8854

['public void testIsViewerShareEnabled() throws Exception {', 'final org.apache.camel.component.linkedin.api.model.IsCompanyShareEnabled result = requestBody("direct: assertNotNull("isViewerShareEnabled result", result);']
['isviewershareenabled ', ['result']]
camel sample_8854

['protected abstract Trigger createTrigger(Action action, Route route) throws Exception;', 'protected void onJobExecute(Action action, Route route) throws Exception {']
['scheduled event notification received performing action on route ', ['action', 'route', 'getid']]
camel sample_17209

['if (action == Action.START) {', 'if (routeStatus == ServiceStatus.Stopped) {', 'startRoute(route);', '} else if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '}', '} else if (action == Action.STOP) {', 'if ((routeStatus == ServiceStatus.Started) || (routeStatus == ServiceStatus.Suspended)) {', 'stopRoute(route, getRouteStopGracePeriod(), getTimeUnit());', '} else {']
['route is not in a started suspended state and cannot be stopped the current route state is ', ['routestatus']]
camel sample_17209

['}', '} else if (action == Action.STOP) {', 'if ((routeStatus == ServiceStatus.Started) || (routeStatus == ServiceStatus.Suspended)) {', 'stopRoute(route, getRouteStopGracePeriod(), getTimeUnit());', '} else {', '}', '} else if (action == Action.SUSPEND) {', 'if (routeStatus == ServiceStatus.Started) {', 'suspendOrStopConsumer(route.getConsumer());', '} else {']
['route is not in a started state and cannot be suspended the current route state is ', ['routestatus']]
camel sample_17209

['} else if (action == Action.SUSPEND) {', 'if (routeStatus == ServiceStatus.Started) {', 'suspendOrStopConsumer(route.getConsumer());', '} else {', '}', '} else if (action == Action.RESUME) {', 'if (routeStatus == ServiceStatus.Started) {', 'if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '} else {']
['the consumer is not suspended and cannot be resumed ', ['route', 'getconsumer']]
camel sample_17209

['suspendOrStopConsumer(route.getConsumer());', '} else {', '}', '} else if (action == Action.RESUME) {', 'if (routeStatus == ServiceStatus.Started) {', 'if (ServiceHelper.isSuspended(route.getConsumer())) {', 'resumeOrStartConsumer(route.getConsumer());', '} else {', '}', '} else {']
['route is not in a started state and cannot be resumed the current route state is ', ['routestatus']]
camel sample_17209

['public void scheduleRoute(Action action, Route route) throws Exception {', 'JobDetail jobDetail = createJobDetail(action, route);', 'Trigger trigger = createTrigger(action, route);', 'updateScheduledRouteDetails(action, jobDetail, trigger, route);', 'loadCallbackDataIntoSchedulerContext(jobDetail, action, route);', 'boolean isClustered = route.getRouteContext().getCamelContext().getComponent("quartz", QuartzComponent.class).isClustered();', 'if (isClustered) {', 'JobDetail existingJobDetail = getScheduler().getJobDetail(jobDetail.getName(), jobDetail.getGroup());', 'if (jobDetail.equals(existingJobDetail)) {', 'if (LOG.isInfoEnabled()) {']
['skipping to schedule the job for action on route as the job already existing inside the cluster ', ['new', 'object', 'jobdetail', 'getfullname', 'action', 'route', 'getid', 'existingjobdetail', 'getfullname']]
camel sample_17209

['if (isClustered) {', 'JobDetail existingJobDetail = getScheduler().getJobDetail(jobDetail.getName(), jobDetail.getGroup());', 'if (jobDetail.equals(existingJobDetail)) {', 'if (LOG.isInfoEnabled()) {', '}', 'return;', '}', '}', 'getScheduler().scheduleJob(jobDetail, trigger);', 'if (LOG.isInfoEnabled()) {']
['scheduled trigger for action on route ', ['new', 'object', 'trigger', 'getfullname', 'action', 'route', 'getid']]
camel sample_17209

['public void pauseRouteTrigger(Action action, String routeId) throws SchedulerException {', 'String triggerName = retrieveTriggerName(action, routeId);', 'String triggerGroup = retrieveTriggerGroup(action, routeId);', 'getScheduler().pauseTrigger(triggerName, triggerGroup);']
['scheduled trigger is paused ', ['triggergroup', 'triggername']]
camel sample_17209

['public void resumeRouteTrigger(Action action, String routeId) throws SchedulerException {', 'String triggerName = retrieveTriggerName(action, routeId);', 'String triggerGroup = retrieveTriggerGroup(action, routeId);', 'getScheduler().resumeTrigger(triggerName, triggerGroup);']
['scheduled trigger is resumed ', ['triggergroup', 'triggername']]
camel sample_17209

['public void deleteRouteJob(Action action, ScheduledRouteDetails scheduledRouteDetails) throws SchedulerException {', 'String jobDetailName = retrieveJobDetailName(action, scheduledRouteDetails);', 'String jobDetailGroup = retrieveJobDetailGroup(action, scheduledRouteDetails);', 'if (!getScheduler().isShutdown()) {', 'getScheduler().deleteJob(jobDetailName, jobDetailGroup);', '}']
['scheduled job is deleted ', ['jobdetailgroup', 'jobdetailname']]
camel sample_17209

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final boolean result = client.delete(jobId);', 'if (!result && LOG.isWarnEnabled()) {']
['failed to delete job d ', ['string', 'format', 'jobid']]
camel sample_8157

['public void act(final Client client, final Exchange exchange) throws NoSuchHeaderException {', 'final Long jobId = BeanstalkExchangeHelper.getJobID(exchange);', 'final boolean result = client.delete(jobId);', 'if (!result && LOG.isWarnEnabled()) {', '} else if (LOG.isDebugEnabled()) {']
['job d deleted result is b ', ['string', 'format', 'jobid', 'result']]
camel sample_8157

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNewLineConstRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {']
['consumer ', ['result', 'getelement']]
camel sample_211

['public void parse() throws Exception {', 'JavaClassSource clazz = (JavaClassSource) Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MyNewLineConstRouteBuilder.java"));', 'MethodSource<JavaClassSource> method = clazz.getMethod("configure");', 'List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, false);', 'for (ParserResult result : list) {', '}', 'Assert.assertEquals("timer:foo", list.get(0).getElement());', 'list = CamelJavaParserHelper.parseCamelProducerUris(method, true, false);', 'for (ParserResult result : list) {']
['producer ', ['result', 'getelement']]
camel sample_211

['protected int sendTimerExchange() {', 'final Exchange exchange = getEndpoint().createExchange();', 'exchange.setProperty(Exchange.TIMER_NAME, getEndpoint().getName());', 'Date now = new Date();', 'exchange.setProperty(Exchange.TIMER_FIRED_TIME, now);', 'if (log.isTraceEnabled()) {']
['timer is firing ', ['getendpoint', 'getname']]
camel sample_4877

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<HazelcastInstanceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-instance.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.hazelcast-instance.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_704

['System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(sshRsa, 0, result, index, sshRsa.length);', 'index += sshRsa.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {']
['cannot sign ', ['e']]
camel sample_15371

['index += 4;', 'System.arraycopy(sshRsa, 0, result, index, sshRsa.length);', 'index += sshRsa.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {', '} catch (InvalidKeyException e) {']
['cannot sign ', ['e']]
camel sample_15371

['System.arraycopy(sshRsa, 0, result, index, sshRsa.length);', 'index += sshRsa.length;', 'intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array();', 'System.arraycopy(intAsByteArray, 0, result, index, 4);', 'index += 4;', 'System.arraycopy(signature, 0, result, index, signature.length);', 'return result;', '} catch (NoSuchAlgorithmException e) {', '} catch (InvalidKeyException e) {', '} catch (SignatureException e) {']
['cannot sign ', ['e']]
camel sample_15371

['answer = ExchangeHelper.createCorrelatedCopy(exchange, false);', 'if (answer.hasOut()) {', 'answer.setIn(answer.getOut());', 'answer.setOut(null);', '}', 'answer.setPattern(ExchangePattern.InOnly);', '} else {', 'answer = exchange;', '}', 'if (useOriginalBody) {']
['using the original in message instead of current ', []]
camel sample_4461

['if (onFailureOnly) {', 'return;', '}', 'if (onWhen != null && !onWhen.matches(exchange)) {', 'return;', '}', 'final Exchange copy = prepareExchange(exchange);', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {']
['processing oncomplete ', ['copy']]
camel sample_4461

['}', 'final Exchange copy = prepareExchange(exchange);', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {', 'doProcess(processor, copy);', 'return copy;', '}', '});', '} else {']
['processing oncomplete ', ['copy']]
camel sample_4461

['final boolean originalFault = copy.hasOut() ? copy.getOut().isFault() : copy.getIn().isFault();', 'copy.setException(null);', 'if (copy.hasOut()) {', 'copy.getOut().setFault(false);', '} else {', 'copy.getIn().setFault(false);', '}', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {']
['processing onfailure ', ['copy']]
camel sample_4461

['}', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {', 'doProcess(processor, copy);', 'copy.setException(original);', 'return null;', '}', '});', '} else {']
['processing onfailure ', ['copy']]
camel sample_4461

['if (!exchange.isFailed() && onFailureOnly) {', 'return;', '}', 'if (onWhen != null && !onWhen.matches(exchange)) {', 'return;', '}', 'final Exchange copy = prepareExchange(exchange);', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {']
['processing onafterroute ', ['copy']]
camel sample_4461

['}', 'final Exchange copy = prepareExchange(exchange);', 'if (executorService != null) {', 'executorService.submit(new Callable<Exchange>() {', 'public Exchange call() throws Exception {', 'doProcess(processor, copy);', 'return copy;', '}', '});', '} else {']
['processing onafterroute ', ['copy']]
camel sample_4461

['public void testSuspendResume() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived("A");', 'template.sendBody("seda:foo", "A");', 'assertMockEndpointsSatisfied();']
['Suspending ', []]
camel sample_1399

['context.suspendRoute("foo");', 'await().atMost(1, TimeUnit.SECONDS).until(() -> {', 'return context.getEndpoint("seda:bar", SedaEndpoint.class).getQueue().size() == 0;', '});', 'template.sendBody("seda:foo", "B");', 'template.sendBody("direct:bar", "C");', 'mockBar.assertIsSatisfied();', 'mock.assertIsSatisfied(1000);', 'assertEquals("Suspended", context.getRouteStatus("foo").name());', 'assertEquals("Started", context.getRouteStatus("bar").name());']
['Resuming ', []]
camel sample_1399

['list.add(payloadToSend);', 'if (i % 100 == 0) {', 'noOfBlocks++;', 'System.out.println("sending blok " + noOfBlocks);', 'template.sendBody(sedaEndpoint, list.toArray(new String[0]));', 'list.clear();', '}', '}', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:iron");', 'while (mockEndpoint.getReceivedCounter() != noOfBlocks) {']
['waiting for queue to fill up current size is ', ['mockendpoint', 'getreceivedcounter']]
camel sample_14560

['list.clear();', '}', '}', 'MockEndpoint mockEndpoint = getMockEndpoint("mock:iron");', 'while (mockEndpoint.getReceivedCounter() != noOfBlocks) {', 'Thread.sleep(1000);', '}', 'long delta = System.currentTimeMillis() - start;', 'int seconds = (int)delta / 1000;', 'int msgPrSec = NO_OF_MESSAGES / seconds;']
['ironmqperformancetest took seconds to produce messages which is messages pr second ', ['seconds', 'no', 'of', 'messages', 'msgprsec']]
camel sample_14560

['public void testConcurrentConsumers() throws Exception {', 'long start = System.currentTimeMillis();', 'context.startRoute("iron");', 'MockEndpoint endpoint = getMockEndpoint("mock:result");', 'endpoint.expectedMessageCount(NO_OF_MESSAGES);', 'assertMockEndpointsSatisfied(4, TimeUnit.MINUTES);', 'long delta = System.currentTimeMillis() - start;', 'int seconds = (int)delta / 1000;', 'int msgPrSec = NO_OF_MESSAGES / seconds;']
['ironmqperformancetest took seconds to consume messages which is messages pr second ', ['seconds', 'no', 'of', 'messages', 'msgprsec']]
camel sample_14560

['protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {', 'HipchatEndpoint endpoint = getHipchatEndpoint(uri);', 'setProperties(endpoint.getConfiguration(), parameters);', 'if (endpoint.getConfiguration().getAuthToken() == null) {', 'throw new HipchatException("OAuth 2 auth token must be specified");', '}', 'parseUri(remaining, endpoint);']
['using hipchat api url ', ['endpoint', 'getconfiguration', 'hipchaturl']]
camel sample_11332

['final ZonedDateTime now = ZonedDateTime.now();', 'final boolean enabled = ObjectHelper.supplyIfEmpty(conf.isEnabled(), HealthCheckConfiguration::defaultValueEnabled);', 'final Duration interval = ObjectHelper.supplyIfEmpty(conf.getInterval(), HealthCheckConfiguration::defaultValueInterval);', 'final Integer threshold = ObjectHelper.supplyIfEmpty(conf.getFailureThreshold(), HealthCheckConfiguration::defaultValueFailureThreshold);', 'int invocationCount = (Integer)meta.getOrDefault(INVOCATION_COUNT, 0);', 'int failureCount = (Integer)meta.getOrDefault(FAILURE_COUNT, 0);', 'String invocationTime = now.format(DateTimeFormatter.ISO_ZONED_DATE_TIME);', 'boolean call = true;', 'meta.put(INVOCATION_ATTEMPT_TIME, invocationTime);', 'if (!enabled) {']
['health check won t be invoked as not enabled ', ['getgroup', 'getid']]
camel sample_4031

['return builder.unknown().build();', '}', 'if (lastResult != null && lastInvocation != null && !interval.isZero()) {', 'Duration elapsed = Duration.between(lastInvocation, now);', 'if (elapsed.compareTo(interval) < 0) {', 'LOGGER.debug("health-check {}/{} won\'t be invoked as interval ({}) is not yet expired (last-invocation={})", getGroup(), getId(), elapsed, lastInvocation);', 'call = false;', '}', '}', 'if (call) {']
['invoke health check ', ['getgroup', 'getid']]
camel sample_4031

['if (elapsed.compareTo(interval) < 0) {', 'LOGGER.debug("health-check {}/{} won\'t be invoked as interval ({}) is not yet expired (last-invocation={})", getGroup(), getId(), elapsed, lastInvocation);', 'call = false;', '}', '}', 'if (call) {', 'doCall(builder, options);', 'ObjectHelper.notNull(builder.state(), "Response State");', 'if (builder.state() == State.DOWN) {', 'if (failureCount++ < threshold) {']
['health check has status down but failure count is less than configured threshold ', ['getgroup', 'getid', 'failurecount', 'threshold']]
camel sample_4031

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<NeutronComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-neutron.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.openstack-neutron.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1233

['public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {', 'final List<FacebookMethodsType> methods = METHOD_MAP.get(name);', 'if (methods == null) {']
['no matching method for method ', ['name']]
camel sample_9603

['public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {', 'final List<FacebookMethodsType> methods = METHOD_MAP.get(name);', 'if (methods == null) {', 'return Collections.emptyList();', '}', 'int nArgs = argNames != null ? argNames.length : 0;', 'if (nArgs == 0) {']
['found methods for method ', ['methods', 'size', 'name']]
camel sample_9603

['final List<FacebookMethodsType> methods = METHOD_MAP.get(name);', 'if (methods == null) {', 'return Collections.emptyList();', '}', 'int nArgs = argNames != null ? argNames.length : 0;', 'if (nArgs == 0) {', 'return Collections.unmodifiableList(methods);', '} else {', 'final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames);', 'if (LOG.isDebugEnabled()) {']
['found filtered methods for ', ['filteredset', 'size', 'name', 'arrays', 'tostring', 'argnames', 'replace', 'replace']]
camel sample_9603

['public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties) throws RuntimeCamelException {']
['invoking with arguments ', ['method', 'getname', 'properties']]
camel sample_9603

['static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {', 'Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class);', 'if (tracer != null) {', 'TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class);', 'if (formatter != null) {', 'tracer.setFormatter(formatter);', '}']
['using custom tracer ', ['tracer']]
camel sample_13421

['Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class);', 'if (tracer != null) {', 'TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class);', 'if (formatter != null) {', 'tracer.setFormatter(formatter);', '}', 'camelContext.addInterceptStrategy(tracer);', '}', 'BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class);', 'if (backlogTracer != null) {']
['using custom backlogtracer ', ['backlogtracer']]
camel sample_13421

['tracer.setFormatter(formatter);', '}', 'camelContext.addInterceptStrategy(tracer);', '}', 'BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class);', 'if (backlogTracer != null) {', 'camelContext.addInterceptStrategy(backlogTracer);', '}', 'HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class);', 'if (handleFault != null) {']
['using custom handlefault ', ['handlefault']]
camel sample_13421

['BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class);', 'if (backlogTracer != null) {', 'camelContext.addInterceptStrategy(backlogTracer);', '}', 'HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class);', 'if (handleFault != null) {', 'camelContext.addInterceptStrategy(handleFault);', '}', 'InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class);', 'if (inflightRepository != null) {']
['using custom inflightrepository ', ['inflightrepository']]
camel sample_13421

['HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class);', 'if (handleFault != null) {', 'camelContext.addInterceptStrategy(handleFault);', '}', 'InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class);', 'if (inflightRepository != null) {', 'camelContext.setInflightRepository(inflightRepository);', '}', 'AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {']
['using custom asyncprocessorawaitmanager ', ['asyncprocessorawaitmanager']]
camel sample_13421

['InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class);', 'if (inflightRepository != null) {', 'camelContext.setInflightRepository(inflightRepository);', '}', 'AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {', 'camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager);', '}', 'ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class);', 'if (managementStrategy != null) {']
['using custom managementstrategy ', ['managementstrategy']]
camel sample_13421

['AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {', 'camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager);', '}', 'ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class);', 'if (managementStrategy != null) {', 'camelContext.setManagementStrategy(managementStrategy);', '}', 'ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {']
['using custom managementnamingstrategy ', ['managementnamingstrategy']]
camel sample_13421

['ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class);', 'if (managementStrategy != null) {', 'camelContext.setManagementStrategy(managementStrategy);', '}', 'ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {', 'camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy);', '}', 'EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class);', 'if (eventFactory != null) {']
['using custom eventfactory ', ['eventfactory']]
camel sample_13421

['ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {', 'camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy);', '}', 'EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class);', 'if (eventFactory != null) {', 'camelContext.getManagementStrategy().setEventFactory(eventFactory);', '}', 'UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class);', 'if (unitOfWorkFactory != null) {']
['using custom unitofworkfactory ', ['unitofworkfactory']]
camel sample_13421

['EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class);', 'if (eventFactory != null) {', 'camelContext.getManagementStrategy().setEventFactory(eventFactory);', '}', 'UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class);', 'if (unitOfWorkFactory != null) {', 'camelContext.setUnitOfWorkFactory(unitOfWorkFactory);', '}', 'RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class);', 'if (runtimeEndpointRegistry != null) {']
['using custom runtimeendpointregistry ', ['runtimeendpointregistry']]
camel sample_13421

['camelContext.setUnitOfWorkFactory(unitOfWorkFactory);', '}', 'RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class);', 'if (runtimeEndpointRegistry != null) {', 'camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry);', '}', 'Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class);', 'if (typeConverters != null && !typeConverters.isEmpty()) {', 'for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {', 'TypeConverters converter = entry.getValue();']
['adding custom typeconverters with id and implementation ', ['entry', 'getkey', 'converter']]
camel sample_13421

['for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {', 'TypeConverters converter = entry.getValue();', 'camelContext.getTypeConverterRegistry().addTypeConverters(converter);', '}', '}', 'Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class);', 'if (eventNotifiers != null && !eventNotifiers.isEmpty()) {', 'for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {', 'EventNotifier notifier = entry.getValue();', 'if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {']
['using custom eventnotifier with id and implementation ', ['entry', 'getkey', 'notifier']]
camel sample_13421

['EventNotifier notifier = entry.getValue();', 'if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {', 'camelContext.getManagementStrategy().addEventNotifier(notifier);', '}', '}', '}', 'Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class);', 'if (endpointStrategies != null && !endpointStrategies.isEmpty()) {', 'for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {', 'EndpointStrategy strategy = entry.getValue();']
['using custom endpointstrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_13421

['}', 'Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class);', 'if (endpointStrategies != null && !endpointStrategies.isEmpty()) {', 'for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {', 'EndpointStrategy strategy = entry.getValue();', 'camelContext.addRegisterEndpointCallback(strategy);', '}', '}', 'ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class);', 'if (shutdownStrategy != null) {']
['using custom shutdownstrategy ', ['shutdownstrategy']]
camel sample_13421

['}', 'ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class);', 'if (shutdownStrategy != null) {', 'camelContext.setShutdownStrategy(shutdownStrategy);', '}', 'Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class);', 'if (interceptStrategies != null && !interceptStrategies.isEmpty()) {', 'for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {', 'InterceptStrategy strategy = entry.getValue();', 'if (!camelContext.getInterceptStrategies().contains(strategy)) {']
['using custom interceptstrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_13421

['if (!camelContext.getInterceptStrategies().contains(strategy)) {', 'camelContext.addInterceptStrategy(strategy);', '}', '}', '}', 'Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class);', 'if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {', 'for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {', 'LifecycleStrategy strategy = entry.getValue();', 'if (!camelContext.getLifecycleStrategies().contains(strategy)) {']
['using custom lifecyclestrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_13421

['LifecycleStrategy strategy = entry.getValue();', 'if (!camelContext.getLifecycleStrategies().contains(strategy)) {', 'camelContext.addLifecycleStrategy(strategy);', '}', '}', '}', 'Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class);', 'if (clusterServices != null && !clusterServices.isEmpty()) {', 'for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {', 'CamelClusterService service = entry.getValue();']
['using camelclusterservice with id and implementation ', ['service', 'getid', 'service']]
camel sample_13421

['if (clusterServices != null && !clusterServices.isEmpty()) {', 'for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {', 'CamelClusterService service = entry.getValue();', 'camelContext.addService(service);', '}', '}', 'Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class);', 'if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {', 'for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {', 'RoutePolicyFactory factory = entry.getValue();']
['using custom routepolicyfactory with id and implementation ', ['entry', 'getkey', 'factory']]
camel sample_13421

['camelContext.addRoutePolicyFactory(factory);', '}', '}', 'GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class);', 'if (sslContextParametersSupplier != null) {', 'camelContext.setSSLContextParameters(sslContextParametersSupplier.get());', '}', 'HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class);', 'if (healthCheckRegistry != null) {', 'healthCheckRegistry.setCamelContext(camelContext);']
['using healthcheckregistry ', ['healthcheckregistry']]
camel sample_13421

['healthCheckRegistry.setCamelContext(camelContext);', '}', 'Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class);', 'if (ObjectHelper.isNotEmpty(repositories)) {', 'for (HealthCheckRepository repository: repositories.values()) {', 'healthCheckRegistry.addRepository(repository);', '}', '}', 'HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class);', 'if (healthCheckService != null) {']
['using healthcheckservice ', ['healthcheckservice']]
camel sample_13421

['for (HealthCheckRepository repository: repositories.values()) {', 'healthCheckRegistry.addRepository(repository);', '}', '}', 'HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class);', 'if (healthCheckService != null) {', 'camelContext.addService(healthCheckService);', '}', 'RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class);', 'if (routeController != null) {']
['using routecontroller ', ['routecontroller']]
camel sample_13421

['private static void initThreadPoolProfiles(ApplicationContext applicationContext, CamelContext camelContext) {', 'Set<String> defaultIds = new HashSet<String>();', 'Map<String, ThreadPoolProfile> profiles = applicationContext.getBeansOfType(ThreadPoolProfile.class);', 'if (profiles != null && !profiles.isEmpty()) {', 'for (Map.Entry<String, ThreadPoolProfile> entry : profiles.entrySet()) {', 'ThreadPoolProfile profile = entry.getValue();', 'if (profile.isDefaultProfile()) {']
['using custom default threadpoolprofile with id and implementation ', ['entry', 'getkey', 'profile']]
camel sample_13421

['public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel open ', ['e', 'getchannel']]
camel sample_6688

['public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {', 'if (LOG.isTraceEnabled()) {']
['channel closed ', ['e', 'getchannel']]
camel sample_6688

['public void messageReceived(final ChannelHandlerContext ctx, final MessageEvent messageEvent) throws Exception {', 'Object in = messageEvent.getMessage();', 'if (LOG.isDebugEnabled()) {']
['channel received body ', ['new', 'object', 'messageevent', 'getchannel', 'in']]
camel sample_6688

['private void sendResponse(MessageEvent messageEvent, Exchange exchange) throws Exception {', 'Object body = getResponseBody(exchange);', 'if (body == null) {', 'noReplyLogger.log("No payload to send as reply for exchange: " + exchange);', 'if (consumer.getConfiguration().isDisconnectOnNoReply()) {', 'if (LOG.isTraceEnabled()) {']
['closing channel as no payload to send as reply at address ', ['messageevent', 'getremoteaddress']]
camel sample_6688

['public void testSplitAndAggregateInOut() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedBodiesReceived(expectedBody);', 'Object out = template.requestBody("direct:start", "A@B@C");', 'assertEquals(expectedBody, out);']
['response to caller ', ['out']]
camel sample_2331

['public String handleOrder(String line) {']
['handleorder ', ['line']]
camel sample_2331

['public String buildCombinedResponse(String line) {']
['buildcombinedresponse ', ['line']]
camel sample_2331

['public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange == null) {', 'return newExchange;', '}', 'String orders = oldExchange.getIn().getBody(String.class);', 'String newLine = newExchange.getIn().getBody(String.class);']
['aggregate old orders ', ['orders']]
camel sample_2331

['public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {', 'if (oldExchange == null) {', 'return newExchange;', '}', 'String orders = oldExchange.getIn().getBody(String.class);', 'String newLine = newExchange.getIn().getBody(String.class);']
['aggregate new order ', ['newline']]
camel sample_2331

['AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppOne.xml");', 'app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();']
['the first app is going to crash now ', []]
camel sample_17198

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17198

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17198

['app.start();', 'AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppTwo.xml");', 'app2.start();', 'CamelContext camel = app.getBean("camelContext", CamelContext.class);', 'MockEndpoint mock = camel.getEndpoint("mock:result", MockEndpoint.class);', 'mock.expectedMinimumMessageCount(3);', 'mock.expectedMessagesMatches(new ClusteringPredicate(true));', 'Thread.sleep(5000);', 'mock.assertIsSatisfied();', 'IOHelper.close(app);']
['crashed ', []]
camel sample_17198

['DefaultZookeeperConnectionStrategy(ZooKeeperEndpoint endpoint) {', 'this.configuration = endpoint.getConfiguration();']
['creating connection to zookeeper ', ['configuration']]
camel sample_12660

['public void shutdown() {']
['shutting down connection to zookeeper ', ['configuration']]
camel sample_12660

['public void process(Exchange exchange) throws Exception {', 'PublishRequest request = new PublishRequest();', 'request.setTopicArn(getConfiguration().getTopicArn());', 'request.setSubject(determineSubject(exchange));', 'request.setMessageStructure(determineMessageStructure(exchange));', 'request.setMessage(exchange.getIn().getBody(String.class));', 'request.setMessageAttributes(this.translateAttributes(exchange.getIn().getHeaders(), exchange));']
['sending request from exchange ', ['request', 'exchange']]
camel sample_8696

['public void process(Exchange exchange) throws Exception {', 'PublishRequest request = new PublishRequest();', 'request.setTopicArn(getConfiguration().getTopicArn());', 'request.setSubject(determineSubject(exchange));', 'request.setMessageStructure(determineMessageStructure(exchange));', 'request.setMessage(exchange.getIn().getBody(String.class));', 'request.setMessageAttributes(this.translateAttributes(exchange.getIn().getHeaders(), exchange));', 'PublishResult result = getEndpoint().getSNSClient().publish(request);']
['received result ', ['result']]
camel sample_8696

['public void onRemoval(Object key, Object value, RemovalCause cause) {']
['key s was removed s n ', ['key', 'cause']]
camel sample_12725

['StaxUtils.copy(reader, cos);', 'li.set(new StreamSourceCache(cos.newStreamCache()));', 'continue;', '} catch (Exception e) {', 'StreamResult sr = new StreamResult(cos);', 'try {', 'xml.toResult(source, sr);', 'li.set(new StreamSourceCache(cos.newStreamCache()));', 'continue;', '} catch (Exception e2) {']
['error during parsing xmlstreamreader from staxsource staxsource will fallback to using dom mode this exception is ignored ', []]
camel sample_7975

['private void configureGlobalSettings(Mapper mapper) {', 'GlobalSettings settings;', 'try {']
['attempting to retrieve globalsettings from ', ['mapper']]
camel sample_9438

['Field field = mapper.getClass().getDeclaredField("globalSettings");', 'field.setAccessible(true);', 'settings = (GlobalSettings)field.get(mapper);', '} catch (Exception e) {', 'throw new IllegalStateException("Cannot retrieve Dozer GlobalSettings due " + e.getMessage(), e);', '}', 'if (settings == null) {', 'throw new IllegalStateException("Cannot retrieve Dozer GlobalSettings due null reflection response");', '}', 'try {']
['configuring globalsettings to use camel classloader ', ['dozerthreadcontextclassloader', 'class', 'getname']]
camel sample_9438

['if (settings == null) {', 'throw new IllegalStateException("Cannot retrieve Dozer GlobalSettings due null reflection response");', '}', 'try {', 'Field field = settings.getClass().getDeclaredField("classLoaderBeanName");', 'ReflectionHelper.setField(field, settings, DozerThreadContextClassLoader.class.getName());', '} catch (Exception e) {', 'throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use DozerThreadContextClassLoader as classloader due " + e.getMessage(), e);', '}', 'try {']
['configuring globalsettings to enable el ', []]
camel sample_9438

['ClassLoader tccl = Thread.currentThread().getContextClassLoader();', 'try {', 'ClassLoader appcl = camelContext.getApplicationContextClassLoader();', 'ClassLoader auxcl = appcl != null ? appcl : DozerEndpoint.class.getClassLoader();', 'Thread.currentThread().setContextClassLoader(auxcl);', 'try {', 'Class<?> clazz = auxcl.loadClass("com.sun.el.ExpressionFactoryImpl");', 'ExpressionFactory factory = (ExpressionFactory)clazz.newInstance();', 'System.setProperty("javax.el.ExpressionFactory", factory.getClass().getName());', '} catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {']
['cannot load glasfish expression engine using default ', []]
camel sample_9438

['private BeanContainer resolveBeanContainer(Mapper mapper) {']
['attempting to retrieve beancontainer from ', ['mapper']]
camel sample_9438

['public void start() {', 'if (Boolean.TRUE.equals(NO_START.get())) {']
['ignoring start as no start is false ', []]
camel sample_16336

['public void start() {', 'if (Boolean.TRUE.equals(NO_START.get())) {', 'return;', '}', 'if (!isStarted() && !isStarting()) {', 'try {', 'StopWatch watch = new StopWatch();', 'super.start();']
['start took millis ', ['watch', 'stop']]
camel sample_16336

['return;', '}', 'if (!isStarted() && !isStarting()) {', 'try {', 'StopWatch watch = new StopWatch();', 'super.start();', '} catch (Exception e) {', 'throw wrapRuntimeCamelException(e);', '}', '} else {']
['ignoring start as camel is already started ', []]
camel sample_16336

['public void stop() {', 'if (!isStopping() && !isStopped()) {', 'try {', 'super.stop();', '} catch (Exception e) {', 'throw wrapRuntimeCamelException(e);', '}', '} else {']
['ignoring stop as camel is already stopped ', []]
camel sample_16336

['public void onApplicationEvent(ApplicationEvent event) {']
['onapplicationevent ', ['event']]
camel sample_16336

['public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {', 'this.applicationContext = applicationContext;', 'ClassLoader cl;', 'if (applicationContext != null && applicationContext.getClassLoader() != null) {', 'cl = applicationContext.getClassLoader();', '} else {']
['cannot find the class loader from application context using the thread context class loader instead ', []]
camel sample_16336

['public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {', 'this.applicationContext = applicationContext;', 'ClassLoader cl;', 'if (applicationContext != null && applicationContext.getClassLoader() != null) {', 'cl = applicationContext.getClassLoader();', '} else {', 'cl = Thread.currentThread().getContextClassLoader();', '}']
['set the application context classloader to ', ['cl']]
camel sample_16336

['protected Injector createInjector() {', 'if (applicationContext instanceof ConfigurableApplicationContext) {', 'return new SpringInjector((ConfigurableApplicationContext)applicationContext);', '} else {']
['cannot use springinjector as applicationcontext is not a configurableapplicationcontext as its ', ['applicationcontext']]
camel sample_16336

['protected void runCamel(ClassLoader newLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {']
['running camel in ', ['newloader']]
camel sample_66

['protected void runCamel(ClassLoader newLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {', 'Class<?> type = newLoader.loadClass(mainClass);', 'Method method = type.getMethod("main", String[].class);', 'String[] arguments = createArguments();']
['starting the camel main with arguments ', ['arrays', 'aslist', 'arguments']]
camel sample_66

['public ClassLoader createClassLoader(ClassLoader parent) throws MalformedURLException {']
['using classpath ', ['classpathelements']]
camel sample_66

['public ClassLoader createClassLoader(ClassLoader parent) throws MalformedURLException {', 'int size = classpathElements.size();', 'URL[] urls = new URL[size];', 'for (int i = 0; i < size; i++) {', 'String name = (String) classpathElements.get(i);', 'File file = new File(name);', 'urls[i] = file.toURI().toURL();']
['url ', ['urls', 'i']]
camel sample_66

['public void testPostStatusUpdateRequestResponse() throws Exception {', 'Date now = new Date();', 'String tweet = "UserProducerInOnlyTest: This is a tweet posted on " + now.toString();']
['tweet ', ['tweet']]
camel sample_14188

['public synchronized boolean reset(Exception e) {', 'boolean answer = false;', 'if ((e instanceof RuntimeException && ((RuntimeException)e).getCause() instanceof ConnectException) || ((e instanceof SocketException) || (e instanceof SSLException))) {']
['got exception from splunk service will be reset ', []]
camel sample_14472

['Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false);', '} catch (Exception e) {', 'throw new RuntimeCamelException(e);', '}', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (DataFormatCustomizer<UniVocityTsvDataFormat> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-tsv.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext .getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.univocity-tsv.customizer");', 'if (useCustomizer) {']
['configure dataformat with customizer ', ['dataformat', 'customizer']]
camel sample_1264

['if (applicationContext == null) {', 'applicationContext = doCreateApplicationContext();', 'threadAppContext.set(applicationContext);', '}', '} else {', 'applicationContext = doCreateApplicationContext();', '}', 'SpringCamelContext.setNoStart(false);', '}', '} else {']
['skipping starting camelcontext as system property skipstartingcamelcontext is set to be true ', []]
camel sample_10574

['private AbstractApplicationContext doCreateApplicationContext() {', 'AbstractApplicationContext context = createApplicationContext();', 'assertNotNull("Should have created a valid Spring application context", context);', 'String[] profiles = activeProfiles();', 'if (profiles != null && profiles.length > 0) {', 'if (context.isActive()) {', 'throw new IllegalStateException("Cannot active profiles: " + Arrays.asList(profiles) + " on active Spring application context: " + context + ". The code in your createApplicationContext() method should be adjusted to create the application context with refresh = false as parameter");', '}']
['spring activating profiles ', ['arrays', 'aslist', 'profiles']]
camel sample_10574

['File rootDir2 = new File(camelCoreXmlDir, pathToCoreXmlModelDir);', 'Map<String, File> jsonFiles2 = PackageHelper.findJsonFiles(rootDir2);', 'File rootDir3 = new File(camelSpringDir, pathToSpringModelDir);', 'Map<String, File> jsonFiles3 = PackageHelper.findJsonFiles(rootDir3);', 'jsonFiles.putAll(jsonFiles2);', 'jsonFiles.putAll(jsonFiles3);', 'NodeList elementsAndTypes = domFinder.findElementsAndTypes();', 'documentationEnricher.enrichTopLevelElementsDocumentation(elementsAndTypes, jsonFiles);', 'Map<String, String> typeToNameMap = buildTypeToNameMap(elementsAndTypes);', 'Set<String> injectedTypes = new LinkedHashSet<String>();']
['found models to use when enriching the xsd schema ', ['typetonamemap', 'size']]
camel sample_89

['jsonFiles.putAll(jsonFiles2);', 'jsonFiles.putAll(jsonFiles3);', 'NodeList elementsAndTypes = domFinder.findElementsAndTypes();', 'documentationEnricher.enrichTopLevelElementsDocumentation(elementsAndTypes, jsonFiles);', 'Map<String, String> typeToNameMap = buildTypeToNameMap(elementsAndTypes);', 'Set<String> injectedTypes = new LinkedHashSet<String>();', 'for (Map.Entry<String, String> entry : typeToNameMap.entrySet()) {', 'String elementType = entry.getKey();', 'String elementName = entry.getValue();', 'if (jsonFileExistsForElement(jsonFiles, elementName)) {']
['enriching ', ['elementname']]
camel sample_89

['private Map<String, String> buildTypeToNameMap(NodeList elementsAndTypes) {', 'Map<String, String> typeToNameMap = new LinkedHashMap<String, String>();', 'for (int i = 0; i < elementsAndTypes.getLength(); i++) {', 'Element item = (Element) elementsAndTypes.item(i);', 'String name = item.getAttribute(Constants.NAME_ATTRIBUTE_NAME);', 'String type = item.getAttribute(Constants.TYPE_ATTRIBUTE_NAME);', 'if (name != null && type != null) {', 'type = truncateTypeNamespace(type);', 'if (getLog().isDebugEnabled()) {']
['putting attributes type s name s ', ['string', 'format', 'name', 'type']]
camel sample_89

['private void writeSlowFile() throws Exception {']
['writing slow file ', []]
camel sample_15326

['private void writeSlowFile() throws Exception {', 'createDirectory(FTP_ROOT_DIR + "/changed");', 'FileOutputStream fos = new FileOutputStream(FTP_ROOT_DIR + "/changed/slowfile.dat", true);', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());']
['writing line ', ['i']]
camel sample_15326

['private void writeSlowFile() throws Exception {', 'createDirectory(FTP_ROOT_DIR + "/changed");', 'FileOutputStream fos = new FileOutputStream(FTP_ROOT_DIR + "/changed/slowfile.dat", true);', 'for (int i = 0; i < 20; i++) {', 'fos.write(("Line " + i + LS).getBytes());', 'Thread.sleep(200);', '}', 'fos.flush();', 'fos.close();']
['writing slow file done ', []]
camel sample_15326

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'from("direct:start").routeId("myRoute") .to("mock:before") .to("async:bye:camel").id("myAsync") .to("mock:after") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'int size = context.getAsyncProcessorAwaitManager().size();']
['async inflight ', ['size']]
camel sample_2018

['return new RouteBuilder() {', 'public void configure() throws Exception {', 'context.addComponent("async", new MyAsyncComponent());', 'from("direct:start").routeId("myRoute") .to("mock:before") .to("async:bye:camel").id("myAsync") .to("mock:after") .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'int size = context.getAsyncProcessorAwaitManager().size();', 'assertEquals(1, size);', 'Collection<AsyncProcessorAwaitManager.AwaitThread> threads = context.getAsyncProcessorAwaitManager().browse();', 'AsyncProcessorAwaitManager.AwaitThread thread = threads.iterator().next();', 'long wait = thread.getWaitDuration();']
['thread has waited for msec ', ['thread', 'getblockedthread', 'getname', 'wait']]
camel sample_2018

['}', 'RestoreAction restoreAction = CURRENT_RESTORE_ACTION.get();', 'if (restoreAction == null) {', 'return;', '}', 'restoreAction.actions.add(new Runnable() {', 'public void run() {', 'try {', 'IntrospectionSupport.setProperties(context, null, target, properties);', '} catch (Exception e) {']
['could not restore definition properties ', ['e']]
camel sample_5227

['public static void resolvePropertyPlaceholders(CamelContext camelContext, Object definition) throws Exception {']
['resolving property placeholders for ', ['definition']]
camel sample_5227

['s = s + suffixToken;', '}', 'value = s;', '}', 'properties.put(local, value);', '}', '}', '}', 'Map<String, Object> changedProperties = new HashMap<String, Object>();', 'if (!properties.isEmpty()) {']
['there are properties on ', ['properties', 'size', 'definition']]
camel sample_5227

['if (value instanceof String) {', 'String text = (String) value;', 'text = camelContext.resolvePropertyPlaceholders(text);', 'if (text != value) {', 'boolean changed = IntrospectionSupport.setProperty(camelContext.getTypeConverter(), definition, name, text);', 'if (!changed) {', 'throw new IllegalArgumentException("No setter to set property: " + name + " to: " + text + " on: " + definition);', '}', 'changedProperties.put(name, value);', 'if (LOG.isDebugEnabled()) {']
['changed property from to ', ['new', 'object', 'name', 'value', 'text']]
camel sample_5227

['public static void resolveKnownConstantFields(Object definition) throws Exception {']
['resolving known fields for ', ['definition']]
camel sample_5227

['public static void resolveKnownConstantFields(Object definition) throws Exception {', 'Map<String, Object> properties = new HashMap<String, Object>();', 'IntrospectionSupport.getProperties(definition, properties, null);', 'Map<String, Object> changedProperties = new HashMap<String, Object>();', 'if (!properties.isEmpty()) {']
['there are properties on ', ['properties', 'size', 'definition']]
camel sample_5227

['Object value = entry.getValue();', 'if (value instanceof String) {', 'String text = (String) value;', 'if (text.startsWith("Exchange.")) {', 'String field = ObjectHelper.after(text, "Exchange.");', 'String constant = ObjectHelper.lookupConstantFieldValue(Exchange.class, field);', 'if (constant != null) {', 'IntrospectionSupport.setProperty(definition, name, constant);', 'changedProperties.put(name, value);', 'if (LOG.isDebugEnabled()) {']
['changed property from to ', ['new', 'object', 'name', 'value', 'constant']]
camel sample_5227

['public void doCheese() {']
['docheese called ', []]
camel sample_10763

['public void xxxtestLongShutdownOfThreadPool() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'ExecutorService pool = context.getExecutorServiceManager().newSingleThreadExecutor(this, "Cool");', 'pool.execute(new Runnable() {', 'public void run() {']
['starting thread ', []]
camel sample_1423

['public void xxxtestLongShutdownOfThreadPool() throws Exception {', 'final CountDownLatch latch = new CountDownLatch(1);', 'ExecutorService pool = context.getExecutorServiceManager().newSingleThreadExecutor(this, "Cool");', 'pool.execute(new Runnable() {', 'public void run() {', 'try {', 'latch.await(42, TimeUnit.SECONDS);', '} catch (InterruptedException e) {', '}']
['existing thread ', []]
camel sample_1423

['throw new IllegalArgumentException( "Header specifying expected returning columns isn\'t an instance of String[] or int[] but " + expectedGeneratedColumns.getClass());', '}', '}', '}', '};', 'SqlOutputType outputType = getEndpoint().getOutputType();', 'if (outputType == SqlOutputType.StreamList) {', 'processStreamList(exchange, statementCreator, sql, preparedQuery);', 'return;', '}']
['jdbctemplate execute ', ['preparedquery']]
camel sample_9013

['protected void processStreamList(Exchange exchange, PreparedStatementCreator statementCreator, String sql, String preparedQuery) throws Exception {']
['processstreamlist ', ['preparedquery']]
camel sample_9013

['private int pollWithQuery(CMISConsumer cmisConsumer) throws Exception {', 'int count = 0;', 'int pageNumber = 0;', 'boolean finished = false;', 'ItemIterable<QueryResult> itemIterable = executeQuery(query);', 'while (!finished) {', 'ItemIterable<QueryResult> currentPage = itemIterable.skipTo(count).getPage();']
['processing page ', ['pagenumber']]
camel sample_9156

['public List<Map<String, Object>> retrieveResult(Boolean retrieveContent, Integer readSize, ItemIterable<QueryResult> itemIterable) {', 'List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();', 'boolean queryForContent = retrieveContent != null ? retrieveContent : readContent;', 'int documentsToRead = readSize != null ? readSize : readCount;', 'int count = 0;', 'int pageNumber = 0;', 'boolean finished = false;', 'while (!finished) {', 'ItemIterable<QueryResult> currentPage = itemIterable.skipTo(count).getPage();']
['processing page ', ['pagenumber']]
camel sample_9156

['protected void sendText(final String fragment, CamelContext context) throws Exception {', 'ProducerTemplate template = context.createProducerTemplate();', 'template.start();', 'template.send("direct:start", new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8");', 'Message in = exchange.getIn();', 'in.setBody(fragment);']
['xmlfragment ', ['fragment']]
camel sample_6759

['private Status updateStatus(StatusUpdate status) throws Exception {', 'Status response = endpoint.getProperties().getTwitter().updateStatus(status);']
['updated status ', ['status']]
camel sample_14235

['private Status updateStatus(StatusUpdate status) throws Exception {', 'Status response = endpoint.getProperties().getTwitter().updateStatus(status);']
['status id ', ['response', 'getid']]
camel sample_14235

['private Status updateStatus(String status) throws Exception {', 'Status response = endpoint.getProperties().getTwitter().updateStatus(status);']
['updated status ', ['status']]
camel sample_14235

['private Status updateStatus(String status) throws Exception {', 'Status response = endpoint.getProperties().getTwitter().updateStatus(status);']
['status id ', ['response', 'getid']]
camel sample_14235

['if (hostHeader != null) {', 'httpRequest.setHeader("Host", hostHeader);', '}', '}', 'if (getEndpoint().isConnectionClose()) {', 'httpRequest.addHeader("Connection", HTTP.CONN_CLOSE);', '}', 'HttpResponse httpResponse = null;', 'try {', 'if (LOG.isDebugEnabled()) {']
['executing http method ', ['httprequest', 'getmethod', 'httprequest', 'geturi', 'tostring']]
camel sample_17049

['}', 'if (getEndpoint().isConnectionClose()) {', 'httpRequest.addHeader("Connection", HTTP.CONN_CLOSE);', '}', 'HttpResponse httpResponse = null;', 'try {', 'if (LOG.isDebugEnabled()) {', '}', 'httpResponse = executeMethod(httpRequest);', 'int responseCode = httpResponse.getStatusLine().getStatusCode();']
['http responsecode ', ['responsecode']]
camel sample_17049

['if (rewriteUrl != null) {', 'url = rewriteUrl;', 'uri = new URI(url);', '}', 'HttpEntity requestEntity = createRequestEntity(exchange);', 'HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null);', 'HttpRequestBase method = methodToUse.createMethod(url);', 'if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {', 'method = new HttpDeleteWithBodyMethod(url, requestEntity);', '}']
['using url with method ', ['url', 'method']]
camel sample_17049

['}', 'HttpEntity requestEntity = createRequestEntity(exchange);', 'HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null);', 'HttpRequestBase method = methodToUse.createMethod(url);', 'if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {', 'method = new HttpDeleteWithBodyMethod(url, requestEntity);', '}', 'if (methodToUse.isEntityEnclosing()) {', '((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity);', 'if (requestEntity != null && requestEntity.getContentType() == null) {']
['no content type provided for url with exchange ', ['url', 'exchange']]
camel sample_17049

['public void afterPropertiesSet() throws Exception {', 'if (ObjectHelper.isEmpty(getId())) {', 'throw new IllegalArgumentException("Id must be set");', '}', 'PackageScanClassResolver packageResolver = getBeanForType(PackageScanClassResolver.class);', 'if (packageResolver != null) {']
['using custom packagescanclassresolver ', ['packageresolver']]
camel sample_15074

['setupCustomServices();', 'initCustomRegistry(getContext());', 'initPropertyPlaceholder();', 'initJMXAgent();', 'Tracer tracer = getBeanForType(Tracer.class);', 'if (tracer != null) {', 'TraceFormatter formatter = getBeanForType(TraceFormatter.class);', 'if (formatter != null) {', 'tracer.setFormatter(formatter);', '}']
['using custom tracer ', ['tracer']]
camel sample_15074

['Tracer tracer = getBeanForType(Tracer.class);', 'if (tracer != null) {', 'TraceFormatter formatter = getBeanForType(TraceFormatter.class);', 'if (formatter != null) {', 'tracer.setFormatter(formatter);', '}', 'getContext().addInterceptStrategy(tracer);', '}', 'BacklogTracer backlogTracer = getBeanForType(BacklogTracer.class);', 'if (backlogTracer != null) {']
['using custom backlogtracer ', ['backlogtracer']]
camel sample_15074

['tracer.setFormatter(formatter);', '}', 'getContext().addInterceptStrategy(tracer);', '}', 'BacklogTracer backlogTracer = getBeanForType(BacklogTracer.class);', 'if (backlogTracer != null) {', 'getContext().addInterceptStrategy(backlogTracer);', '}', 'HandleFault handleFault = getBeanForType(HandleFault.class);', 'if (handleFault != null) {']
['using custom handlefault ', ['handlefault']]
camel sample_15074

['BacklogTracer backlogTracer = getBeanForType(BacklogTracer.class);', 'if (backlogTracer != null) {', 'getContext().addInterceptStrategy(backlogTracer);', '}', 'HandleFault handleFault = getBeanForType(HandleFault.class);', 'if (handleFault != null) {', 'getContext().addInterceptStrategy(handleFault);', '}', 'org.apache.camel.processor.interceptor.Delayer delayer = getBeanForType(org.apache.camel.processor.interceptor.Delayer.class);', 'if (delayer != null) {']
['using custom delayer ', ['delayer']]
camel sample_15074

['HandleFault handleFault = getBeanForType(HandleFault.class);', 'if (handleFault != null) {', 'getContext().addInterceptStrategy(handleFault);', '}', 'org.apache.camel.processor.interceptor.Delayer delayer = getBeanForType(org.apache.camel.processor.interceptor.Delayer.class);', 'if (delayer != null) {', 'getContext().addInterceptStrategy(delayer);', '}', 'InflightRepository inflightRepository = getBeanForType(InflightRepository.class);', 'if (inflightRepository != null) {']
['using custom inflightrepository ', ['inflightrepository']]
camel sample_15074

['org.apache.camel.processor.interceptor.Delayer delayer = getBeanForType(org.apache.camel.processor.interceptor.Delayer.class);', 'if (delayer != null) {', 'getContext().addInterceptStrategy(delayer);', '}', 'InflightRepository inflightRepository = getBeanForType(InflightRepository.class);', 'if (inflightRepository != null) {', 'getContext().setInflightRepository(inflightRepository);', '}', 'AsyncProcessorAwaitManager asyncProcessorAwaitManager = getBeanForType(AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {']
['using custom asyncprocessorawaitmanager ', ['asyncprocessorawaitmanager']]
camel sample_15074

['InflightRepository inflightRepository = getBeanForType(InflightRepository.class);', 'if (inflightRepository != null) {', 'getContext().setInflightRepository(inflightRepository);', '}', 'AsyncProcessorAwaitManager asyncProcessorAwaitManager = getBeanForType(AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {', 'getContext().setAsyncProcessorAwaitManager(asyncProcessorAwaitManager);', '}', 'ManagementStrategy managementStrategy = getBeanForType(ManagementStrategy.class);', 'if (managementStrategy != null) {']
['using custom managementstrategy ', ['managementstrategy']]
camel sample_15074

['AsyncProcessorAwaitManager asyncProcessorAwaitManager = getBeanForType(AsyncProcessorAwaitManager.class);', 'if (asyncProcessorAwaitManager != null) {', 'getContext().setAsyncProcessorAwaitManager(asyncProcessorAwaitManager);', '}', 'ManagementStrategy managementStrategy = getBeanForType(ManagementStrategy.class);', 'if (managementStrategy != null) {', 'getContext().setManagementStrategy(managementStrategy);', '}', 'ManagementNamingStrategy managementNamingStrategy = getBeanForType(ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {']
['using custom managementnamingstrategy ', ['managementnamingstrategy']]
camel sample_15074

['ManagementStrategy managementStrategy = getBeanForType(ManagementStrategy.class);', 'if (managementStrategy != null) {', 'getContext().setManagementStrategy(managementStrategy);', '}', 'ManagementNamingStrategy managementNamingStrategy = getBeanForType(ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {', 'getContext().getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy);', '}', 'EventFactory eventFactory = getBeanForType(EventFactory.class);', 'if (eventFactory != null) {']
['using custom eventfactory ', ['eventfactory']]
camel sample_15074

['ManagementNamingStrategy managementNamingStrategy = getBeanForType(ManagementNamingStrategy.class);', 'if (managementNamingStrategy != null) {', 'getContext().getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy);', '}', 'EventFactory eventFactory = getBeanForType(EventFactory.class);', 'if (eventFactory != null) {', 'getContext().getManagementStrategy().setEventFactory(eventFactory);', '}', 'UnitOfWorkFactory unitOfWorkFactory = getBeanForType(UnitOfWorkFactory.class);', 'if (unitOfWorkFactory != null) {']
['using custom unitofworkfactory ', ['unitofworkfactory']]
camel sample_15074

['EventFactory eventFactory = getBeanForType(EventFactory.class);', 'if (eventFactory != null) {', 'getContext().getManagementStrategy().setEventFactory(eventFactory);', '}', 'UnitOfWorkFactory unitOfWorkFactory = getBeanForType(UnitOfWorkFactory.class);', 'if (unitOfWorkFactory != null) {', 'getContext().setUnitOfWorkFactory(unitOfWorkFactory);', '}', 'RuntimeEndpointRegistry runtimeEndpointRegistry = getBeanForType(RuntimeEndpointRegistry.class);', 'if (runtimeEndpointRegistry != null) {']
['using custom runtimeendpointregistry ', ['runtimeendpointregistry']]
camel sample_15074

['UnitOfWorkFactory unitOfWorkFactory = getBeanForType(UnitOfWorkFactory.class);', 'if (unitOfWorkFactory != null) {', 'getContext().setUnitOfWorkFactory(unitOfWorkFactory);', '}', 'RuntimeEndpointRegistry runtimeEndpointRegistry = getBeanForType(RuntimeEndpointRegistry.class);', 'if (runtimeEndpointRegistry != null) {', 'getContext().setRuntimeEndpointRegistry(runtimeEndpointRegistry);', '}', 'HeadersMapFactory headersMapFactory = getBeanForType(HeadersMapFactory.class);', 'if (headersMapFactory != null) {']
['using custom headersmapfactory ', ['headersmapfactory']]
camel sample_15074

['getContext().setRuntimeEndpointRegistry(runtimeEndpointRegistry);', '}', 'HeadersMapFactory headersMapFactory = getBeanForType(HeadersMapFactory.class);', 'if (headersMapFactory != null) {', 'getContext().setHeadersMapFactory(headersMapFactory);', '}', 'Map<String, TypeConverters> typeConverters = getContext().getRegistry().findByTypeWithName(TypeConverters.class);', 'if (typeConverters != null && !typeConverters.isEmpty()) {', 'for (Entry<String, TypeConverters> entry : typeConverters.entrySet()) {', 'TypeConverters converter = entry.getValue();']
['adding custom typeconverters with id and implementation ', ['entry', 'getkey', 'converter']]
camel sample_15074

['for (Entry<String, TypeConverters> entry : typeConverters.entrySet()) {', 'TypeConverters converter = entry.getValue();', 'getContext().getTypeConverterRegistry().addTypeConverters(converter);', '}', '}', 'Map<String, EventNotifier> eventNotifiers = getContext().getRegistry().findByTypeWithName(EventNotifier.class);', 'if (eventNotifiers != null && !eventNotifiers.isEmpty()) {', 'for (Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {', 'EventNotifier notifier = entry.getValue();', 'if (!getContext().getManagementStrategy().getEventNotifiers().contains(notifier)) {']
['using custom eventnotifier with id and implementation ', ['entry', 'getkey', 'notifier']]
camel sample_15074

['EventNotifier notifier = entry.getValue();', 'if (!getContext().getManagementStrategy().getEventNotifiers().contains(notifier)) {', 'getContext().getManagementStrategy().addEventNotifier(notifier);', '}', '}', '}', 'Map<String, EndpointStrategy> endpointStrategies = getContext().getRegistry().findByTypeWithName(EndpointStrategy.class);', 'if (endpointStrategies != null && !endpointStrategies.isEmpty()) {', 'for (Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {', 'EndpointStrategy strategy = entry.getValue();']
['using custom endpointstrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_15074

['}', 'Map<String, EndpointStrategy> endpointStrategies = getContext().getRegistry().findByTypeWithName(EndpointStrategy.class);', 'if (endpointStrategies != null && !endpointStrategies.isEmpty()) {', 'for (Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {', 'EndpointStrategy strategy = entry.getValue();', 'getContext().addRegisterEndpointCallback(strategy);', '}', '}', 'ShutdownStrategy shutdownStrategy = getBeanForType(ShutdownStrategy.class);', 'if (shutdownStrategy != null) {']
['using custom shutdownstrategy ', ['shutdownstrategy']]
camel sample_15074

['}', 'ShutdownStrategy shutdownStrategy = getBeanForType(ShutdownStrategy.class);', 'if (shutdownStrategy != null) {', 'getContext().setShutdownStrategy(shutdownStrategy);', '}', 'Map<String, InterceptStrategy> interceptStrategies = getContext().getRegistry().findByTypeWithName(InterceptStrategy.class);', 'if (interceptStrategies != null && !interceptStrategies.isEmpty()) {', 'for (Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {', 'InterceptStrategy strategy = entry.getValue();', 'if (!getContext().getInterceptStrategies().contains(strategy)) {']
['using custom interceptstrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_15074

['if (!getContext().getInterceptStrategies().contains(strategy)) {', 'getContext().addInterceptStrategy(strategy);', '}', '}', '}', 'Map<String, LifecycleStrategy> lifecycleStrategies = getContext().getRegistry().findByTypeWithName(LifecycleStrategy.class);', 'if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {', 'for (Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {', 'LifecycleStrategy strategy = entry.getValue();', 'if (!getContext().getLifecycleStrategies().contains(strategy)) {']
['using custom lifecyclestrategy with id and implementation ', ['entry', 'getkey', 'strategy']]
camel sample_15074

['LifecycleStrategy strategy = entry.getValue();', 'if (!getContext().getLifecycleStrategies().contains(strategy)) {', 'getContext().addLifecycleStrategy(strategy);', '}', '}', '}', 'Map<String, CamelClusterService> clusterServices = getContext().getRegistry().findByTypeWithName(CamelClusterService.class);', 'if (clusterServices != null && !clusterServices.isEmpty()) {', 'for (Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {', 'CamelClusterService service = entry.getValue();']
['using camelclusterservice with id and implementation ', ['service', 'getid', 'service']]
camel sample_15074

['if (clusterServices != null && !clusterServices.isEmpty()) {', 'for (Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {', 'CamelClusterService service = entry.getValue();', 'getContext().addService(service);', '}', '}', 'Map<String, RoutePolicyFactory> routePolicyFactories = getContext().getRegistry().findByTypeWithName(RoutePolicyFactory.class);', 'if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {', 'for (Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {', 'RoutePolicyFactory factory = entry.getValue();']
['using custom routepolicyfactory with id and implementation ', ['entry', 'getkey', 'factory']]
camel sample_15074

['Map<String, RoutePolicyFactory> routePolicyFactories = getContext().getRegistry().findByTypeWithName(RoutePolicyFactory.class);', 'if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {', 'for (Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {', 'RoutePolicyFactory factory = entry.getValue();', 'getContext().addRoutePolicyFactory(factory);', '}', '}', 'HealthCheckRegistry healthCheckRegistry = getBeanForType(HealthCheckRegistry.class);', 'if (healthCheckRegistry != null) {', 'healthCheckRegistry.setCamelContext(getContext());']
['using healthcheckregistry ', ['healthcheckregistry']]
camel sample_15074

['healthCheckRegistry.setCamelContext(getContext());', '}', 'Set<HealthCheckRepository> repositories = getContext().getRegistry().findByType(HealthCheckRepository.class);', 'if (ObjectHelper.isNotEmpty(repositories)) {', 'for (HealthCheckRepository repository: repositories) {', 'healthCheckRegistry.addRepository(repository);', '}', '}', 'HealthCheckService healthCheckService = getBeanForType(HealthCheckService.class);', 'if (healthCheckService != null) {']
['using healthcheckservice ', ['healthcheckservice']]
camel sample_15074

['for (HealthCheckRepository repository: repositories) {', 'healthCheckRegistry.addRepository(repository);', '}', '}', 'HealthCheckService healthCheckService = getBeanForType(HealthCheckService.class);', 'if (healthCheckService != null) {', 'getContext().addService(healthCheckService);', '}', 'RouteController routeController = getBeanForType(RouteController.class);', 'if (routeController != null) {']
['using routecontroller ', ['routecontroller']]
camel sample_15074

['protected void setupRoutes() throws Exception {', 'if (routesSetupDone.compareAndSet(false, true)) {']
['setting up routes ', []]
camel sample_15074

['if (config.getApiContextPath() != null) {', 'boolean hasRestApi = false;', 'for (RouteDefinition route : getContext().getRouteDefinitions()) {', 'FromDefinition from = route.getInputs().get(0);', 'if (from.getUri() != null && from.getUri().startsWith("rest-api:")) {', 'hasRestApi = true;', '}', '}', 'if (!hasRestApi) {', 'RouteDefinition route = RestDefinition.asRouteApiDefinition(getContext(), config);']
['adding routeid as rest api route ', ['route', 'getid']]
camel sample_15074

['}', '}', 'if (!hasRestApi) {', 'RouteDefinition route = RestDefinition.asRouteApiDefinition(getContext(), config);', 'getRoutes().add(route);', '}', '}', '}', 'prepareRoutes();', 'getContext().addRouteDefinitions(getRoutes());']
['found jaxb created routes ', ['getroutes']]
camel sample_15074

['protected void initJMXAgent() throws Exception {', 'CamelJMXAgentDefinition camelJMXAgent = getCamelJMXAgent();', 'boolean disabled = false;', 'if (camelJMXAgent != null) {', 'disabled = camelJMXAgent.getDisabled() != null && CamelContextHelper.parseBoolean(getContext(), camelJMXAgent.getDisabled());', '}', 'if (disabled) {']
['jmxagent disabled ', []]
camel sample_15074

['protected void initJMXAgent() throws Exception {', 'CamelJMXAgentDefinition camelJMXAgent = getCamelJMXAgent();', 'boolean disabled = false;', 'if (camelJMXAgent != null) {', 'disabled = camelJMXAgent.getDisabled() != null && CamelContextHelper.parseBoolean(getContext(), camelJMXAgent.getDisabled());', '}', 'if (disabled) {', 'getContext().getLifecycleStrategies().clear();', 'getContext().setManagementStrategy(new DefaultManagementStrategy());', '} else if (camelJMXAgent != null) {']
['jmxagent enabled ', ['cameljmxagent']]
camel sample_15074

['protected void initRouteRefs() throws Exception {', 'if (getRouteRefs() != null) {', 'for (RouteContextRefDefinition ref : getRouteRefs()) {', 'List<RouteDefinition> defs = ref.lookupRoutes(getContext());', 'for (RouteDefinition def : defs) {']
['adding route from ', ['ref', 'def']]
camel sample_15074

['protected void initRestRefs() throws Exception {', 'if (getRestRefs() != null) {', 'for (RestContextRefDefinition ref : getRestRefs()) {', 'List<RestDefinition> defs = ref.lookupRests(getContext());', 'for (RestDefinition def : defs) {']
['adding rest from ', ['ref', 'def']]
camel sample_15074

['protected void initThreadPoolProfiles(T context) throws Exception {', 'Set<String> defaultIds = new HashSet<String>();', 'Map<String, ThreadPoolProfile> profiles = context.getRegistry().findByTypeWithName(ThreadPoolProfile.class);', 'if (profiles != null && !profiles.isEmpty()) {', 'for (Entry<String, ThreadPoolProfile> entry : profiles.entrySet()) {', 'ThreadPoolProfile profile = entry.getValue();', 'if (profile.isDefaultProfile()) {']
['using custom default threadpoolprofile with id and implementation ', ['entry', 'getkey', 'profile']]
camel sample_15074

['context.getExecutorServiceManager().setDefaultThreadPoolProfile(profile);', 'defaultIds.add(entry.getKey());', '} else {', 'context.getExecutorServiceManager().registerThreadPoolProfile(profile);', '}', '}', '}', 'if (getThreadPoolProfiles() != null && !getThreadPoolProfiles().isEmpty()) {', 'for (ThreadPoolProfileDefinition definition : getThreadPoolProfiles()) {', 'if (definition.isDefaultProfile()) {']
['using custom default threadpoolprofile with id and implementation ', ['definition', 'getid', 'definition']]
camel sample_15074

['private String[] normalizePackages(T context, List<String> unnormalized) throws Exception {', 'List<String> packages = new ArrayList<String>();', 'for (String name : unnormalized) {', 'name = context.resolvePropertyPlaceholders(name);', 'name = ObjectHelper.normalizeClassName(name);', 'if (ObjectHelper.isNotEmpty(name)) {']
['using package to scan for routebuilder classes ', ['name']]
camel sample_15074

['private void setupCustomServices() {', 'ModelJAXBContextFactory modelJAXBContextFactory = getBeanForType(ModelJAXBContextFactory.class);', 'if (modelJAXBContextFactory != null) {']
['using custom modeljaxbcontextfactory ', ['modeljaxbcontextfactory']]
camel sample_15074

['private void setupCustomServices() {', 'ModelJAXBContextFactory modelJAXBContextFactory = getBeanForType(ModelJAXBContextFactory.class);', 'if (modelJAXBContextFactory != null) {', 'getContext().setModelJAXBContextFactory(modelJAXBContextFactory);', '}', 'ClassResolver classResolver = getBeanForType(ClassResolver.class);', 'if (classResolver != null) {']
['using custom classresolver ', ['classresolver']]
camel sample_15074

['ModelJAXBContextFactory modelJAXBContextFactory = getBeanForType(ModelJAXBContextFactory.class);', 'if (modelJAXBContextFactory != null) {', 'getContext().setModelJAXBContextFactory(modelJAXBContextFactory);', '}', 'ClassResolver classResolver = getBeanForType(ClassResolver.class);', 'if (classResolver != null) {', 'getContext().setClassResolver(classResolver);', '}', 'FactoryFinderResolver factoryFinderResolver = getBeanForType(FactoryFinderResolver.class);', 'if (factoryFinderResolver != null) {']
['using custom factoryfinderresolver ', ['factoryfinderresolver']]
camel sample_15074

['ClassResolver classResolver = getBeanForType(ClassResolver.class);', 'if (classResolver != null) {', 'getContext().setClassResolver(classResolver);', '}', 'FactoryFinderResolver factoryFinderResolver = getBeanForType(FactoryFinderResolver.class);', 'if (factoryFinderResolver != null) {', 'getContext().setFactoryFinderResolver(factoryFinderResolver);', '}', 'ExecutorServiceManager executorServiceStrategy = getBeanForType(ExecutorServiceManager.class);', 'if (executorServiceStrategy != null) {']
['using custom executorservicestrategy ', ['executorservicestrategy']]
camel sample_15074

['FactoryFinderResolver factoryFinderResolver = getBeanForType(FactoryFinderResolver.class);', 'if (factoryFinderResolver != null) {', 'getContext().setFactoryFinderResolver(factoryFinderResolver);', '}', 'ExecutorServiceManager executorServiceStrategy = getBeanForType(ExecutorServiceManager.class);', 'if (executorServiceStrategy != null) {', 'getContext().setExecutorServiceManager(executorServiceStrategy);', '}', 'ThreadPoolFactory threadPoolFactory = getBeanForType(ThreadPoolFactory.class);', 'if (threadPoolFactory != null) {']
['using custom threadpoolfactory ', ['threadpoolfactory']]
camel sample_15074

['ExecutorServiceManager executorServiceStrategy = getBeanForType(ExecutorServiceManager.class);', 'if (executorServiceStrategy != null) {', 'getContext().setExecutorServiceManager(executorServiceStrategy);', '}', 'ThreadPoolFactory threadPoolFactory = getBeanForType(ThreadPoolFactory.class);', 'if (threadPoolFactory != null) {', 'getContext().getExecutorServiceManager().setThreadPoolFactory(threadPoolFactory);', '}', 'ProcessorFactory processorFactory = getBeanForType(ProcessorFactory.class);', 'if (processorFactory != null) {']
['using custom processorfactory ', ['processorfactory']]
camel sample_15074

['ThreadPoolFactory threadPoolFactory = getBeanForType(ThreadPoolFactory.class);', 'if (threadPoolFactory != null) {', 'getContext().getExecutorServiceManager().setThreadPoolFactory(threadPoolFactory);', '}', 'ProcessorFactory processorFactory = getBeanForType(ProcessorFactory.class);', 'if (processorFactory != null) {', 'getContext().setProcessorFactory(processorFactory);', '}', 'Debugger debugger = getBeanForType(Debugger.class);', 'if (debugger != null) {']
['using custom debugger ', ['debugger']]
camel sample_15074

['ProcessorFactory processorFactory = getBeanForType(ProcessorFactory.class);', 'if (processorFactory != null) {', 'getContext().setProcessorFactory(processorFactory);', '}', 'Debugger debugger = getBeanForType(Debugger.class);', 'if (debugger != null) {', 'getContext().setDebugger(debugger);', '}', 'UuidGenerator uuidGenerator = getBeanForType(UuidGenerator.class);', 'if (uuidGenerator != null) {']
['using custom uuidgenerator ', ['uuidgenerator']]
camel sample_15074

['Debugger debugger = getBeanForType(Debugger.class);', 'if (debugger != null) {', 'getContext().setDebugger(debugger);', '}', 'UuidGenerator uuidGenerator = getBeanForType(UuidGenerator.class);', 'if (uuidGenerator != null) {', 'getContext().setUuidGenerator(uuidGenerator);', '}', 'NodeIdFactory nodeIdFactory = getBeanForType(NodeIdFactory.class);', 'if (nodeIdFactory != null) {']
['using custom nodeidfactory ', ['nodeidfactory']]
camel sample_15074

['UuidGenerator uuidGenerator = getBeanForType(UuidGenerator.class);', 'if (uuidGenerator != null) {', 'getContext().setUuidGenerator(uuidGenerator);', '}', 'NodeIdFactory nodeIdFactory = getBeanForType(NodeIdFactory.class);', 'if (nodeIdFactory != null) {', 'getContext().setNodeIdFactory(nodeIdFactory);', '}', 'StreamCachingStrategy streamCachingStrategy = getBeanForType(StreamCachingStrategy.class);', 'if (streamCachingStrategy != null) {']
['using custom streamcachingstrategy ', ['streamcachingstrategy']]
camel sample_15074

['NodeIdFactory nodeIdFactory = getBeanForType(NodeIdFactory.class);', 'if (nodeIdFactory != null) {', 'getContext().setNodeIdFactory(nodeIdFactory);', '}', 'StreamCachingStrategy streamCachingStrategy = getBeanForType(StreamCachingStrategy.class);', 'if (streamCachingStrategy != null) {', 'getContext().setStreamCachingStrategy(streamCachingStrategy);', '}', 'MessageHistoryFactory messageHistoryFactory = getBeanForType(MessageHistoryFactory.class);', 'if (messageHistoryFactory != null) {']
['using custom messagehistoryfactory ', ['messagehistoryfactory']]
camel sample_15074

['public void run() {', 'if (!isRunAllowed()) {']
['purge task not allowed to run ', []]
camel sample_5175

['public void run() {', 'if (!isRunAllowed()) {', 'return;', '}']
['running purge task to see if any entries has been timed out ', []]
camel sample_5175

['public void run() {', 'if (!isRunAllowed()) {', 'return;', '}', 'try {', 'purge();', '} catch (Throwable t) {']
['exception occurred during purge task this exception will be ignored ', ['t']]
camel sample_5175

['public void purge() {']
['there are in the timeout map ', ['map', 'size']]
camel sample_5175

['}', 'long now = currentTime();', 'List<TimeoutMapEntry<K, V>> expired = new ArrayList<TimeoutMapEntry<K, V>>();', 'if (useLock) {', 'lock.lock();', '}', 'try {', 'for (Map.Entry<K, TimeoutMapEntry<K, V>> entry : map.entrySet()) {', 'if (entry.getValue().getExpireTime() < now) {', 'if (isValidForEviction(entry.getValue())) {']
['evicting inactive entry id ', ['entry', 'getvalue']]
camel sample_5175

['return diff > 0 ? 1 : -1;', '}', '});', 'List<K> evicts = new ArrayList<K>(expired.size());', 'try {', 'for (TimeoutMapEntry<K, V> entry : expired) {', 'boolean evict = false;', 'try {', 'evict = onEviction(entry.getKey(), entry.getValue());', '} catch (Throwable t) {']
['exception happened during eviction of entry id won t evict and will continue trying ', ['entry', 'getvalue', 't']]
camel sample_5175

['public static InputStream download(com.google.api.services.drive.model.File fileMetadata, Exchange exchange) throws Exception {', 'if (fileMetadata.getDownloadUrl() != null && fileMetadata.getDownloadUrl().length() > 0) {', 'try {', 'HttpResponse resp = getClient(exchange).getRequestFactory().buildGetRequest(new GenericUrl(fileMetadata.getDownloadUrl())).execute();', 'return resp.getContent();', '} catch (IOException e) {']
['could not download file ', ['e']]
camel sample_15424

['public void testLoadTestLevelDBAggregate() throws Exception {', 'MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);']
['staring to send messages ', ['size']]
camel sample_13909

['MockEndpoint mock = getMockEndpoint("mock:result");', 'mock.expectedMessageCount(10);', 'mock.setResultWaitTime(50 * 1000);', 'ExecutorService executor = Executors.newFixedThreadPool(10);', 'for (int i = 0; i < SIZE; i++) {', 'final int value = 1;', 'final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];']
['sending with id ', ['value', 'id']]
camel sample_13909

['final int key = i % 10;', 'executor.submit(new Callable<Object>() {', 'public Object call() throws Exception {', 'char id = KEYS[key];', 'template.sendBodyAndHeader("direct:start", value, "id", "" + id);', 'Thread.sleep(3);', 'return null;', '}', '});', '}']
['sending all message done now waiting for aggregation to complete ', ['size']]
camel sample_13909

['public void run() {', 'try {']
['waiting for latch ', []]
camel sample_6923

['public void run() {', 'try {', 'latch.await(30, TimeUnit.SECONDS);', 'Thread.sleep(1000);', '} catch (Exception e) {', '}']
['sending late reply ', []]
camel sample_6923

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(getQueueEndpointName()) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.setPattern(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'assertEquals("Hello World", in.getBody());', 'replyDestination = in.getHeader("JMSReplyTo", Destination.class);', 'cid = in.getHeader("JMSCorrelationID", String.class);']
['replydestination ', ['replydestination']]
camel sample_6923

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(getQueueEndpointName()) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.setPattern(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'assertEquals("Hello World", in.getBody());', 'replyDestination = in.getHeader("JMSReplyTo", Destination.class);', 'cid = in.getHeader("JMSCorrelationID", String.class);']
['jmscorrelationid ', ['cid']]
camel sample_6923

['protected RouteBuilder createRouteBuilder() throws Exception {', 'return new RouteBuilder() {', 'public void configure() throws Exception {', 'from(getQueueEndpointName()) .process(new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'exchange.setPattern(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'assertEquals("Hello World", in.getBody());', 'replyDestination = in.getHeader("JMSReplyTo", Destination.class);', 'cid = in.getHeader("JMSCorrelationID", String.class);']
['ahh i cannot send a reply someone else must do it ', []]
camel sample_6923

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<GitComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.git.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.git.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_728

['private synchronized void updateOAuthToken() throws IOException {', 'final long currentTime = System.currentTimeMillis();', 'if (oAuthToken == null || oAuthToken.getExpiryTime() < currentTime) {']
['oauth token doesn t exist or has expired ', []]
camel sample_8878

['private synchronized void updateOAuthToken() throws IOException {', 'final long currentTime = System.currentTimeMillis();', 'if (oAuthToken == null || oAuthToken.getExpiryTime() < currentTime) {', 'final OAuthSecureStorage secureStorage = oAuthParams.getSecureStorage();', 'if (secureStorage != null) {', 'oAuthToken = secureStorage.getOAuthToken();', 'if (oAuthToken != null && oAuthToken.getExpiryTime() > currentTime) {', 'return;', '}']
['oauth secure storage returned a null or expired token creating a new token ', []]
camel sample_8878

['oAuthToken = secureStorage.getOAuthToken();', 'if (oAuthToken != null && oAuthToken.getExpiryTime() > currentTime) {', 'return;', '}', 'if (oAuthParams.getUserPassword() == null || oAuthParams.getUserPassword().isEmpty()) {', 'throw new IllegalArgumentException("Missing password for LinkedIn authorization");', '}', '}', 'final String refreshToken = getRefreshToken();', 'this.oAuthToken = getAccessToken(refreshToken);']
['oauth token created ', []]
camel sample_8878

['private synchronized Transform getTransform() throws Exception {', 'if (transform == null) {', 'if (log.isDebugEnabled()) {', 'String path = getResourceUri();']
['jolt content read from resource with resourceuri for endpoint ', ['new', 'object', 'getresourceuri', 'path', 'getendpointuri']]
camel sample_12924

['public JoltEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {', 'String newUri = uri.replace(getResourceUri(), newResourceUri);']
['getting endpoint with uri ', ['newuri']]
camel sample_12924

['protected void onExchange(Exchange exchange) throws Exception {', 'String path = getResourceUri();', 'ObjectHelper.notNull(path, "resourceUri");', 'String newResourceUri = exchange.getIn().getHeader(JoltConstants.JOLT_RESOURCE_URI, String.class);', 'if (newResourceUri != null) {', 'exchange.getIn().removeHeader(JoltConstants.JOLT_RESOURCE_URI);']
['set to creating new endpoint to handle exchange ', ['joltconstants', 'jolt', 'resource', 'uri', 'newresourceuri']]
camel sample_12924

['public void testPrimitiveTypeConverter() throws Exception {', 'StopWatch watch = new StopWatch();', 'for (int i = 0; i < 10000; i++) {', 'int num = context.getTypeConverter().convertTo(int.class, "123");', 'assertEquals(123, num);', '}']
['time taken ', ['watch', 'taken']]
camel sample_1474

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (Arrays.asList(IGNORE_MODULES).contains(project.getArtifactId())) {']
['component auto configuration will not be created component contained in the ignore list ', []]
camel sample_143

['public void execute() throws MojoExecutionException, MojoFailureException {', 'if (Arrays.asList(IGNORE_MODULES).contains(project.getArtifactId())) {', 'return;', '}', 'File starterDir = SpringBootHelper.starterDir(baseDir, project.getArtifactId());', 'if (!starterDir.exists() || !(new File(starterDir, "pom.xml").exists())) {']
['component auto configuration will not be created the starter does not exist ', []]
camel sample_143

['private void executeComponent() throws MojoExecutionException, MojoFailureException {', 'List<String> componentNames = findComponentNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!componentNames.isEmpty()) {']
['found components ', ['componentnames', 'size']]
camel sample_143

['private void executeDataFormat() throws MojoExecutionException, MojoFailureException {', 'List<String> dataFormatNames = findDataFormatNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!dataFormatNames.isEmpty()) {']
['found dataformats ', ['dataformatnames', 'size']]
camel sample_143

['private void executeLanguage() throws MojoExecutionException, MojoFailureException {', 'List<String> languageNames = findLanguageNames();', 'final Set<File> jsonFiles = new TreeSet<File>();', 'PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());', 'if (!languageNames.isEmpty()) {']
['found languages ', ['languagenames', 'size']]
camel sample_143

['sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.component.customizer\\",\\n");', 'sb.append("               \\"camel.component.").append(name).append(".customizer\\",\\n");', 'sb.append("               ((HasId)customizer).getId())\\n");', 'sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\\n");', 'sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.component.customizer\\",\\n");', 'sb.append("               \\"camel.component.").append(name).append(".customizer\\");\\n");', 'sb.append("\\n");', 'sb.append("        if (useCustomizer) {\\n");']
['logger debug component customizer ', ['append', 'configure', 'component', 'with', 'customizer']]
camel sample_143

['sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.dataformat.customizer\\",\\n");', 'sb.append("               \\"camel.dataformat.").append(name).append(".customizer\\",\\n");', 'sb.append("               ((HasId)customizer).getId())\\n");', 'sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\\n");', 'sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.dataformat.customizer\\",\\n");', 'sb.append("               \\"camel.dataformat.").append(name).append(".customizer\\");\\n");', 'sb.append("\\n");', 'sb.append("        if (useCustomizer) {\\n");']
['logger debug dataformat customizer ', ['append', 'configure', 'dataformat', 'with', 'customizer']]
camel sample_143

['sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.language.customizer\\",\\n");', 'sb.append("               \\"camel.language.").append(name).append(".customizer\\",\\n");', 'sb.append("               ((HasId)customizer).getId())\\n");', 'sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\\n");', 'sb.append("                applicationContext.getEnvironment(),\\n");', 'sb.append("               \\"camel.language.customizer\\",\\n");', 'sb.append("               \\"camel.language.").append(name).append(".customizer\\");\\n");', 'sb.append("\\n");', 'sb.append("        if (useCustomizer) {\\n");']
['logger debug language customizer ', ['append', 'configure', 'language', 'with', 'customizer']]
camel sample_143

['private void writeSourceIfChanged(String source, String fileName) throws MojoFailureException {', 'source = Formatter.format(source);', 'source = source.replaceAll("\\\\t", "    ");', 'File target = new File(SpringBootHelper.starterSrcDir(baseDir, project.getArtifactId()), fileName);', 'deleteFileOnMainArtifact(target);', 'try {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'String header = loadText(is);', 'String code = source;', 'code = header + code;']
['source code generated ', ['code']]
camel sample_143

['deleteFileOnMainArtifact(target);', 'try {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'String header = loadText(is);', 'String code = source;', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);']
['updated existing file ', ['target']]
camel sample_143

['try {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt");', 'String header = loadText(is);', 'String code = source;', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);', '} else {']
['no changes to existing file ', ['target']]
camel sample_143

['String code = source;', 'code = header + code;', 'if (target.exists()) {', 'String existing = FileUtils.readFileToString(target);', 'if (!code.equals(existing)) {', 'FileUtils.write(target, code, false);', '} else {', '}', '} else {', 'FileUtils.write(target, code);']
['created file ', ['target']]
camel sample_143

['try {', 'boolean found = false;', 'List<String> lines = FileUtils.readLines(target);', 'for (String line : lines) {', 'if (line.contains(name)) {', 'found = true;', 'break;', '}', '}', 'if (found) {']
['no changes to existing file ', ['target']]
camel sample_143

['lastLine = i;', 'break;', '}', '}', 'lines.add(lastLine + 1, lineToAdd);', 'StringBuilder code = new StringBuilder();', 'for (String line : lines) {', 'code.append(line).append("\\n");', '}', 'FileUtils.write(target, code.toString(), false);']
['updated existing file ', ['target']]
camel sample_143

['}', '} catch (Exception e) {', 'throw new MojoFailureException("IOError with file " + target, e);', '}', '} else {', 'try {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header.txt");', 'String header = loadText(is);', 'String code = sb.toString();', 'code = header + "\\n" + code;']
['source code generated ', ['code']]
camel sample_143

['} catch (Exception e) {', 'throw new MojoFailureException("IOError with file " + target, e);', '}', '} else {', 'try {', 'InputStream is = getClass().getClassLoader().getResourceAsStream("license-header.txt");', 'String header = loadText(is);', 'String code = sb.toString();', 'code = header + "\\n" + code;', 'FileUtils.write(target, code);']
['created file ', ['target']]
camel sample_143

['deleteFileOnMainArtifact(target);', 'try {', 'Gson gson = new GsonBuilder().setPrettyPrinting().create();', 'Map<String, Object> map = null;', 'List<Map<String, Object>> properties = null;', 'if (target.exists()) {', 'BufferedReader br = new BufferedReader(new FileReader(target));', 'map = gson.fromJson(br, Map.class);', 'properties = (List<Map<String, Object>>)map.get("properties");', 'if (properties != null && properties.stream().anyMatch(m -> fullQualifiedName.equals(m.get("name")))) {']
['no changes to existing file ', ['target']]
camel sample_143

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SpringIntegrationComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator .evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-integration.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator .evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-integration.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_513

['public void read(String body) {', 'this.body = body;']
['read method on with body ', ['this', 'body']]
camel sample_1862

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<AhcComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ahc.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ahc.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_456

['contextAware.setCamelContext(camelContext);', '}', '}', 'Map<String, Object> parameters = new HashMap<>();', 'IntrospectionSupport.getProperties(configuration, parameters, null, false);', 'CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (LanguageCustomizer<SimpleLanguage> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.simple.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.simple.customizer");', 'if (useCustomizer) {']
['configure language with customizer ', ['language', 'customizer']]
camel sample_905

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<JavaSpaceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.javaspace.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.javaspace.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1161

['public ModelMBean assemble(MBeanServer mBeanServer, Object obj, ObjectName name) throws JMException {', 'ModelMBeanInfo mbi = null;', 'ModelMBeanInfo standardMbi = null;', 'Object custom = null;', 'if (obj instanceof ManagedInstance) {', 'custom = ((ManagedInstance) obj).getInstance();', 'if (custom != null && ObjectHelper.hasAnnotation(custom.getClass().getAnnotations(), ManagedResource.class)) {']
['assembling mbeaninfo for from custom managedresource object ', ['name', 'custom']]
camel sample_4699

['ModelMBeanInfo standardMbi = null;', 'Object custom = null;', 'if (obj instanceof ManagedInstance) {', 'custom = ((ManagedInstance) obj).getInstance();', 'if (custom != null && ObjectHelper.hasAnnotation(custom.getClass().getAnnotations(), ManagedResource.class)) {', 'mbi = assembler.getMBeanInfo(obj, custom, name.toString());', 'standardMbi = assembler.getMBeanInfo(obj, null, name.toString());', '}', '}', 'if (mbi == null) {']
['assembling mbeaninfo for from managedresource object ', ['name', 'obj']]
camel sample_4699

['public void notify(EventObject event) throws Exception {', 'if (!isStarted()) {']
['cannot publish event as notifier is not started ', ['event']]
camel sample_4733

['public void notify(EventObject event) throws Exception {', 'if (!isStarted()) {', 'return;', '}', 'if (!camelContext.getStatus().isStarted()) {']
['cannot publish event as camelcontext is not started ', ['event']]
camel sample_4733

['body = (byte[])message;', '} else {', 'throw new IllegalArgumentException("The message to encode is not a supported type: " + message.getClass().getCanonicalName());', '}', 'IoBuffer buf = IoBuffer.allocate(body.length + 3).setAutoExpand(true);', 'buf.put((byte)config.getStartByte());', 'buf.put(body);', 'buf.put((byte)config.getEndByte1());', 'buf.put((byte)config.getEndByte2());', 'buf.flip();']
['encoded from to byte stream ', ['message', 'getclass', 'getcanonicalname']]
camel sample_11430

['WaitForTaskToComplete wait = waitForTaskToComplete;', 'if (exchange.getProperty(Exchange.ASYNC_WAIT) != null) {', 'wait = exchange.getProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.class);', '}', 'if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {']
['timeout occurred so response will be ignored ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_14632

['if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {', 'final CountDownLatch latch = new CountDownLatch(1);', 'copy.addOnCompletion(new SynchronizationAdapter() {', 'public void onDone(Exchange response) {', 'if (latch.getCount() == 0) {', 'if (log.isTraceEnabled()) {', '}', 'return;', '} else {', 'if (log.isTraceEnabled()) {']
['with response ', ['this', 'response', 'hasout', 'response', 'getout', 'response', 'getin']]
camel sample_14632

['}', 'public boolean allowHandover() {', 'return false;', '}', 'public String toString() {', 'return "onDone at [" + endpoint.getEndpointUri() + "]";', '}', '});', 'queue.add(copy);', 'if (timeout > 0) {']
['waiting for task to complete using timeout ms at ', ['timeout', 'endpoint', 'getendpointuri']]
camel sample_14632

['boolean done = false;', 'try {', 'done = latch.await(timeout, TimeUnit.MILLISECONDS);', '} catch (InterruptedException e) {', '}', 'if (!done) {', 'exchange.setException(new ExchangeTimedOutException(exchange, timeout));', 'latch.countDown();', '}', '} else {']
['waiting for task to complete blocking at ', ['endpoint', 'getendpointuri']]
camel sample_14632

['public Processor wrap(RouteContext routeContext, final Processor processor) {', 'if (LOG.isDebugEnabled()) {']
['securing route using shiro policy ', ['routecontext', 'getroute', 'getid', 'this']]
camel sample_12135

['public void configure() throws Exception {']
['about to start route direct splunk server ', []]
camel sample_17767

['public void testBigPayload() throws Exception {']
['running test for millis ', ['time']]
camel sample_11719

['public void testBigPayload() throws Exception {', 'Thread.sleep(60 * 1000);', 'File file = new File("target/data/hawtdb.dat");', 'assertTrue(file + " should exists", file.exists());', 'long size = file.length();']
['size is ', ['file', 'size']]
camel sample_11719

['public void notify(EventObject event) throws Exception {', 'if (event instanceof ExchangeSendingEvent) {']
['sending ', ['event']]
camel sample_1618

['public int processBatch(Queue<Object> exchanges) throws Exception {', 'int total = exchanges.size();', 'for (int index = 0; index < total && isBatchAllowed(); index++) {', 'Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());', 'exchange.setProperty(Exchange.BATCH_INDEX, index);', 'exchange.setProperty(Exchange.BATCH_SIZE, total);', 'exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1);', 'pendingExchanges = total - index - 1;']
['processing exchange ', ['exchange']]
camel sample_8086

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ReactiveStreamsComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.reactive-streams.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.reactive-streams.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_790

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KratiComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.krati.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.krati.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_505

['protected void doStart() throws Exception {', 'influxDB = CamelContextHelper.mandatoryLookup(getCamelContext(), connectionBean, InfluxDB.class);']
['resolved the connection with the name as ', ['connectionbean', 'influxdb']]
camel sample_11133

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<MockComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mock.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.mock.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_856

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ThriftComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.thrift.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.thrift.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1032

['public void testRouteboxDirectAsyncRequests() throws Exception {', 'template = new DefaultProducerTemplate(context);', 'template.start();', 'context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();']
['beginning test testrouteboxdirectasyncrequests ', []]
camel sample_14624

['context.addRoutes(new RouteBuilder() {', 'public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");']
['received book with author and title ', ['book', 'getauthor', 'book', 'gettitle']]
camel sample_14624

['public void configure() {', 'from(routeboxUri) .to("log:Routes operation performed?showAll=true");', '}', '});', 'context.start();', 'Book book = new Book("Sir Arthur Conan Doyle", "The Adventures of Sherlock Holmes");', 'String response = sendAddToCatalogRequest(template, routeboxUri, "addToCatalog", book);', 'assertEquals("Book with Author " + book.getAuthor() + " and title " + book.getTitle() + " added to Catalog", response);', 'book = sendFindBookRequest(template, routeboxUri, "findBook", "Sir Arthur Conan Doyle");', 'assertEquals("The Adventures of Sherlock Holmes", book.getTitle());']
['completed test testrouteboxdirectasyncrequests ', []]
camel sample_14624

['protected HazelcastDefaultEndpoint doCreateEndpoint(String uri, String remaining, Map<String, Object> parameters, HazelcastInstance hzInstance) throws Exception {', 'HazelcastDefaultEndpoint endpoint = null;']
['the scheme syntax hazelcast has been deprecated use hazelcast instead ', ['remaining', 'remaining']]
camel sample_9547

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<IgniteMessagingComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-messaging.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ignite-messaging.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1177

['public void doStart() throws Exception {', 'super.doStart();', 'ddbClient = configuration.getAmazonDDBClient() != null ? configuration.getAmazonDDBClient() : createDdbClient();', 'if (ObjectHelper.isNotEmpty(configuration.getAmazonDdbEndpoint())) {', 'ddbClient.setEndpoint(configuration.getAmazonDdbEndpoint());', '}', 'String tableName = getConfiguration().getTableName();']
['querying whether table already exists ', ['tablename']]
camel sample_8706

['if (ObjectHelper.isNotEmpty(configuration.getAmazonDdbEndpoint())) {', 'ddbClient.setEndpoint(configuration.getAmazonDdbEndpoint());', '}', 'String tableName = getConfiguration().getTableName();', 'try {', 'DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);', 'TableDescription tableDescription = ddbClient.describeTable(request).getTable();', 'if (!isTableActive(tableDescription)) {', 'waitForTableToBecomeAvailable(tableName);', '}']
['table already exists ', ['tablename']]
camel sample_8706

['}', 'String tableName = getConfiguration().getTableName();', 'try {', 'DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);', 'TableDescription tableDescription = ddbClient.describeTable(request).getTable();', 'if (!isTableActive(tableDescription)) {', 'waitForTableToBecomeAvailable(tableName);', '}', 'return;', '} catch (ResourceNotFoundException e) {']
['table doesn t exist yet ', ['tablename']]
camel sample_8706

['}', 'String tableName = getConfiguration().getTableName();', 'try {', 'DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);', 'TableDescription tableDescription = ddbClient.describeTable(request).getTable();', 'if (!isTableActive(tableDescription)) {', 'waitForTableToBecomeAvailable(tableName);', '}', 'return;', '} catch (ResourceNotFoundException e) {']
['creating table ', ['tablename']]
camel sample_8706

['TableDescription tableDescription = ddbClient.describeTable(request).getTable();', 'if (!isTableActive(tableDescription)) {', 'waitForTableToBecomeAvailable(tableName);', '}', 'return;', '} catch (ResourceNotFoundException e) {', 'TableDescription tableDescription = createTable(tableName);', 'if (!isTableActive(tableDescription)) {', 'waitForTableToBecomeAvailable(tableName);', '}']
['table created ', ['tablename']]
camel sample_8706

['private void waitForTableToBecomeAvailable(String tableName) {']
['waiting for to become active ', ['tablename']]
camel sample_8706

['while (waitTime > 0) {', 'try {', 'Thread.sleep(1000 * 5);', 'waitTime -= 5000;', '} catch (Exception e) {', '}', 'try {', 'DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);', 'TableDescription tableDescription = getDdbClient().describeTable(request).getTable();', 'if (isTableActive(tableDescription)) {']
['table became active ', ['tablename']]
camel sample_8706

['Thread.sleep(1000 * 5);', 'waitTime -= 5000;', '} catch (Exception e) {', '}', 'try {', 'DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);', 'TableDescription tableDescription = getDdbClient().describeTable(request).getTable();', 'if (isTableActive(tableDescription)) {', 'return;', '}']
['table not active yet ', ['tablename']]
camel sample_8706

['connector.setPort(endpoint.getPort());', '} else {', 'connector.setPort(port);', '}', 'if (endpoint.getHost() != null) {', 'connector.setHost(endpoint.getHost());', '} else {', 'connector.setHost(host);', '}', 'server.addConnector(connector);']
['jetty connector added ', ['connector', 'getname']]
camel sample_17458

['server.setHandler(context);', 'applyCrossOriginFiltering(endpoint, context);', 'if (endpoint.getStaticResources() != null) {', 'server = createStaticResourcesServer(server, context, endpoint.getStaticResources());', '}', 'MemoryWebsocketStore memoryStore = new MemoryWebsocketStore();', 'connectorRef = new ConnectorRef(server, connector, null, memoryStore);', 'if (endpoint.isSessionSupport()) {', 'enableSessionSupport(connectorRef.server, connectorKey);', '}']
['jetty server starting on host ', ['connector', 'gethost', 'connector', 'getport']]
camel sample_17458

['public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {', 'WebsocketEndpoint endpoint = prodcon.getEndpoint();', 'String connectorKey = getConnectorKey(endpoint);', 'synchronized (CONNECTORS) {', 'ConnectorRef connectorRef = CONNECTORS.get(connectorKey);', 'if (connectorRef != null) {', 'if (connectorRef.decrement() == 0) {']
['stopping jetty server as the last connector is disconnecting ', ['connectorref', 'connector', 'gethost', 'connectorref', 'connector', 'getport']]
camel sample_17458

['protected Server createStaticResourcesServer(Server server, ServletContextHandler context, String home) throws Exception {', 'context.setContextPath("/");', 'SessionHandler sh = new SessionHandler();', 'context.setSessionHandler(sh);', 'if (home != null) {', 'String[] resources = home.split(":");', 'if (LOG.isDebugEnabled()) {']
['protocol found and resource ', ['resources', 'resources']]
camel sample_17458

['String key = getConnectorKey(endpoint);', 'ConnectorRef connectorRef = getConnectors().get(key);', 'WebsocketComponentServlet servlet;', 'if (connectorRef != null) {', 'String pathSpec = createPathSpec(resourceUri);', 'servlet = servlets.get(pathSpec);', 'if (servlet == null) {', 'ServletContextHandler context = (ServletContextHandler) connectorRef.server.getHandler();', 'servlet = createServlet(sync, pathSpec, servlets, context);', 'connectorRef.servlet = servlet;']
['websocket servlet added for the following path to the jetty server ', ['pathspec', 'key']]
camel sample_17458

['private void enableJmx(Server server) {', 'MBeanContainer containerToRegister = getMbContainer();', 'if (containerToRegister != null) {']
['jetty jmx extensions is enabled ', []]
camel sample_17458

['protected void doStart() throws Exception {', 'super.doStart();', 'if (staticResources != null) {', 'ObjectHelper.notEmpty(host, "host", this);', 'ObjectHelper.notNull(port, "port", this);']
['starting static resources server with static resource ', ['new', 'object', 'host', 'port', 'staticresources']]
camel sample_17458

['connectorRef.connector.stop();', 'connectorRef.server.stop();', 'connectorRef.memoryStore.stop();', 'connectorRef.servlet = null;', '}', 'CONNECTORS.remove(connectorKey);', '}', '}', 'CONNECTORS.clear();', 'if (staticResourcesServer != null) {']
['stopping static resources server with static resource ', ['new', 'object', 'host', 'port', 'staticresources']]
camel sample_17458

['String badHtml = TidyMarkupTestSupport.loadFileAsString(new File( "src/test/resources/org/apache/camel/dataformat/tagsoup/testfile1.html"));', 'String evilHtml = TidyMarkupTestSupport.loadFileAsString(new File( "src/test/resources/org/apache/camel/dataformat/tagsoup/testfile2-evilHtml.html"));', 'template.sendBody("direct:start", badHtml);', 'template.sendBody("direct:start", evilHtml);', 'resultEndpoint.assertIsSatisfied();', 'List<Exchange> list = resultEndpoint.getReceivedExchanges();', 'for (Exchange exchange : list) {', 'try {', 'Message in = exchange.getIn();', 'Node tidyMarkup = in.getBody(Node.class);']
['received ', ['tidymarkup']]
camel sample_11975

['private void startQuickfixjEngine(QuickfixjEngine engine) throws Exception {', 'if (!engine.isLazy()) {']
['starting quickfix j engine ', ['engine', 'geturi']]
camel sample_10667

['private void startQuickfixjEngine(QuickfixjEngine engine) throws Exception {', 'if (!engine.isLazy()) {', 'engine.start();', '} else {']
['quickfix j engine will start lazily ', ['engine', 'geturi']]
camel sample_10667

['protected void doProcess(Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName) throws Exception {', 'Message in = exchange.getIn();', 'Histogram histogram = registry.histogram(metricsName);', 'Long value = endpoint.getValue();', 'Long finalValue = getLongHeader(in, HEADER_HISTOGRAM_VALUE, value);', 'if (finalValue != null) {', 'histogram.update(finalValue);', '} else {']
['cannot update histogram with null value ', ['metricsname']]
camel sample_13698

['public void testGetTickets() throws Exception {', 'final Iterable<?> result = requestBody("direct: assertNotNull("getTickets result", result);', 'int count = 0;', 'for (Object ticket : result) {', 'LOG.info(ticket.toString());', 'count++;', '}']
['ticket s in total ', ['count']]
camel sample_9394

['public void testSoapHbr() throws Exception {', 'send("http: StopWatch watch = new StopWatch();']
['http log warn ms count watch taken ', ['ran', 'tests', 'in']]
camel sample_6431

['public static void main(String[] args) throws Exception {']
['about to run splunk camel integration ', []]
camel sample_17771

['public String read(String body, @XPath("/soap:Envelope/soap:Body/foo/text()") String foo) {', 'this.foo = foo;', 'this.body = body;']
['read method called on ', ['this']]
camel sample_2167

['public void process(Exchange exchange) throws Exception {', 'Message in = exchange.getIn();', 'Node node = exchange.getIn().getBody(Node.class);']
['got event with node name and action ', ['node', 'getmetadata', 'getname', 'in', 'getheader', 'kubernetesconstants', 'kubernetes', 'event', 'action']]
camel sample_13227

['traceDoCatch(traced, exchange);', '} else if (ProcessorDefinitionHelper.isFirstChildOfType(FinallyDefinition.class, node)) {', 'traceDoFinally(traced, exchange);', '} else if (ProcessorDefinitionHelper.isFirstChildOfType(AggregateDefinition.class, node)) {', 'traceAggregate(traced, exchange);', '} else {', 'traced.addTraced(new DefaultRouteNode(node, super.getProcessor()));', '}', '}', '} else {']
['cannot trace as this exchange does not have an unitofwork ', ['exchange']]
camel sample_4549

['if (attachmentMultipartBinding != null) {', 'endpoint.setAttachmentMultipartBinding(attachmentMultipartBinding);', '} else {', 'endpoint.setAttachmentMultipartBinding(isAttachmentMultipartBinding());', '}', 'if (disableStreamCache != null) {', 'endpoint.setDisableStreamCache(disableStreamCache);', '}', 'if (endpoint.isAttachmentMultipartBinding()) {', 'if (disableStreamCache == null) {']
['disabling stream caching as attachmentmultipartbinding is enabled ', []]
camel sample_14448

['private T getNextElement() {', 'if (asn1InputStream == null) {', 'return null;', '}', 'try {', 'ASN1Primitive current = getNextEntry();', 'if (current != null) {', 'T instance = ObjectHelper.cast(clazz, createGenericTypeObject(current, clazz));', 'return instance;', '} else {']
['close ', []]
camel sample_9455

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SpringWebserviceComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-ws.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.spring-ws.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1065

['account.setShippingPostalCode("94105");', 'account.setShippingState("CA");', 'account.setShippingStreet("1 Market St #300");', 'account.setShippingLatitude(37.793779);', 'account.setShippingLongitude(-122.39448);', 'account.setShipping_Location__Latitude__s(37.793779);', 'account.setShipping_Location__Longitude__s(-122.39448);', 'CreateSObjectResult result = template().requestBody("direct:createSObject" + suffix, account, CreateSObjectResult.class);', 'assertNotNull(result);', 'assertTrue("Create success", result.getSuccess());']
['create ', ['result']]
camel sample_14736

['account.setShipping_Location__Longitude__s(-122.39448);', 'CreateSObjectResult result = template().requestBody("direct:createSObject" + suffix, account, CreateSObjectResult.class);', 'assertNotNull(result);', 'assertTrue("Create success", result.getSuccess());', 'try {', 'account = template().requestBody("direct:getSObject" + suffix, result.getId(), Account.class);', 'assertNotNull(account);', 'assertNotNull("Billing Address", account.getBillingAddress());', 'assertNotNull("Shipping Address", account.getShippingAddress());', 'assertNotNull("Shipping Location", account.getShippingAddress());']
['retrieved fields billing address shipping location ', ['account', 'getbillingaddress', 'account', 'getshipping', 'location', 'c']]
camel sample_14736

['assertNotNull(result);', 'assertTrue("Create success", result.getSuccess());', 'try {', 'account = template().requestBody("direct:getSObject" + suffix, result.getId(), Account.class);', 'assertNotNull(account);', 'assertNotNull("Billing Address", account.getBillingAddress());', 'assertNotNull("Shipping Address", account.getShippingAddress());', 'assertNotNull("Shipping Location", account.getShippingAddress());', '} finally {', 'assertNull(template().requestBody("direct:deleteSObject" + suffix, result.getId()));']
['delete successful ', []]
camel sample_14736

['final int tempI = i;', 'Runnable worker = new Runnable() {', 'public void run() {', 'try {', 'final String requestText = "Message " + tempI;', 'final String responseText = "Response Message " + tempI;', 'String response = template.requestBody("direct:start", requestText, String.class);', 'assertNotNull(response);', 'assertEquals(responseText, response);', '} catch (Exception e) {']
['todo auto generated catch block ', ['e']]
camel sample_12318

['ChannelOption<Object> option = ChannelOption.valueOf(entry.getKey());', 'if (EndpointHelper.isReferenceParameter(value)) {', 'String name = value.substring(1);', 'Object o = CamelContextHelper.mandatoryLookup(camelContext, name);', 'bootstrap.option(option, o);', '} else {', 'bootstrap.option(option, value);', '}', '}', '}']
['created bootstrap ', ['bootstrap']]
camel sample_10260

['bootstrap.handler(pipelineFactory);', 'InetSocketAddress hostAddress = new InetSocketAddress(configuration.getHost(), configuration.getPort());', 'SubnetUtils multicastSubnet = new SubnetUtils(MULTICAST_SUBNET);', 'if (multicastSubnet.getInfo().isInRange(configuration.getHost())) {', 'ChannelFuture channelFuture = bootstrap.bind(configuration.getPort()).sync();', 'channel = channelFuture.channel();', 'DatagramChannel datagramChannel = (DatagramChannel) channel;', 'String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();', 'multicastNetworkInterface = NetworkInterface.getByName(networkInterface);', 'ObjectHelper.notNull(multicastNetworkInterface, "No network interface found for \'" + networkInterface + "\'.");']
['connectionlessbootstrap joining using network interface ', ['new', 'object', 'configuration', 'gethost', 'configuration', 'getport', 'multicastnetworkinterface', 'getname']]
camel sample_10260

['if (multicastSubnet.getInfo().isInRange(configuration.getHost())) {', 'ChannelFuture channelFuture = bootstrap.bind(configuration.getPort()).sync();', 'channel = channelFuture.channel();', 'DatagramChannel datagramChannel = (DatagramChannel) channel;', 'String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();', 'multicastNetworkInterface = NetworkInterface.getByName(networkInterface);', 'ObjectHelper.notNull(multicastNetworkInterface, "No network interface found for \'" + networkInterface + "\'.");', 'datagramChannel.joinGroup(hostAddress, multicastNetworkInterface).syncUninterruptibly();', 'allChannels.add(datagramChannel);', '} else {']
['connectionlessbootstrap binding to ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10260

['protected void stopServerBootstrap() {']
['connectionlessbootstrap disconnecting from ', ['configuration', 'gethost', 'configuration', 'getport']]
camel sample_10260

['protected void stopServerBootstrap() {']
['closing channels ', ['allchannels', 'size']]
camel sample_10260

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<KestrelComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kestrel.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.kestrel.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_417

['public void execute() {', 'ListDomainsRequest request = new ListDomainsRequest() .withMaxNumberOfDomains(determineMaxNumberOfDomains()) .withNextToken(determineNextToken());']
['sending request for exchange ', ['request', 'exchange']]
camel sample_8751

['public void execute() {', 'ListDomainsRequest request = new ListDomainsRequest() .withMaxNumberOfDomains(determineMaxNumberOfDomains()) .withNextToken(determineNextToken());', 'ListDomainsResult result = this.sdbClient.listDomains(request);']
['received result ', ['result']]
camel sample_8751

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<ConsulComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.consul.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.consul.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_944

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<DdbComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ddb.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.aws-ddb.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1120

['protected void doStart() throws Exception {']
['consuming expected messages from ', ['expectedmessageendpoint']]
camel sample_4772

['EndpointHelper.pollEndpoint(expectedMessageEndpoint, new Processor() {', 'public void process(Exchange exchange) throws Exception {', 'Object body = getInBody(exchange);', 'if (body instanceof WrappedFile) {', 'body = exchange.getIn().getBody(String.class);', '}', 'if (split) {', 'Iterator it = ObjectHelper.createIterator(body, delimiter, false, true);', 'while (it.hasNext()) {', 'Object line = it.next();']
['received message body ', ['line']]
camel sample_4772

['Iterator it = ObjectHelper.createIterator(body, delimiter, false, true);', 'while (it.hasNext()) {', 'Object line = it.next();', 'expectedBodies.add(line);', '}', '} else {', 'expectedBodies.add(body);', '}', '}', '}, timeout);']
['received expected message s from ', ['expectedbodies', 'size', 'expectedmessageendpoint']]
camel sample_4772

['public TrustManager[] createTrustManagers() throws GeneralSecurityException, IOException {', 'if (trustManager != null) {', 'return new TrustManager[]{trustManager};', '}']
['creating trustmanager from trustmanagersparameters ', ['this']]
camel sample_4288

['String tmfAlgorithm = this.parsePropertyValue(this.getAlgorithm());', 'if (tmfAlgorithm == null) {', 'tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();', '}', 'TrustManagerFactory tmf;', 'if (this.getProvider() == null) {', 'tmf = TrustManagerFactory.getInstance(tmfAlgorithm);', '} else {', 'tmf = TrustManagerFactory.getInstance(tmfAlgorithm, this.parsePropertyValue(this.getProvider()));', '}']
['trustmanagerfactory is using provider and algorithm ', ['new', 'object', 'tmf', 'tmf', 'getprovider', 'tmf', 'getalgorithm']]
camel sample_4288

['}', 'TrustManagerFactory tmf;', 'if (this.getProvider() == null) {', 'tmf = TrustManagerFactory.getInstance(tmfAlgorithm);', '} else {', 'tmf = TrustManagerFactory.getInstance(tmfAlgorithm, this.parsePropertyValue(this.getProvider()));', '}', 'KeyStore ks = this.getKeyStore() == null ? null : this.getKeyStore().createKeyStore();', 'tmf.init(ks);', 'trustManagers = tmf.getTrustManagers();']
['trustmanager initialized from trustmanagerfactory ', ['trustmanagers', 'tmf']]
camel sample_4288

['public boolean canTest() {', 'if (System.getProperty("java.vendor").contains("IBM")) {', 'return false;', '}', 'try {', 'javax.security.auth.login.Configuration.getConfiguration();', '} catch (Exception e) {']
['cannot run test due security exception ', ['e']]
camel sample_12174

['public void testFind() throws Exception {', 'final CreditCardVerification result = requestBody("direct: assertNotNull("find result", result);']
['find ', ['result']]
camel sample_17376

['public void testSearch() throws Exception {', 'final ResourceCollection<CreditCardVerification> result = requestBody("direct: assertNotNull("search result", result);']
['search ', ['result']]
camel sample_17376

['public void process(Exchange exchange) throws Exception {', 'String cacheKey = key.evaluate(exchange, String.class);', 'if (isValid(cacheManager, cacheName, cacheKey)) {', 'Ehcache cache = cacheManager.getCache(cacheName);', 'if (LOG.isDebugEnabled()) {']
['replacing token in message with value stored against key in cachename ', ['new', 'object', 'replacementtoken', 'cachekey', 'cachename']]
camel sample_10519

['public boolean apply(UUID uuid, Object payload) {', 'Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'in.setBody(payload);', 'in.setHeader(IgniteConstants.IGNITE_MESSAGING_TOPIC, endpoint.getTopic());', 'in.setHeader(IgniteConstants.IGNITE_MESSAGING_UUID, uuid);', 'try {', 'if (LOG.isTraceEnabled()) {']
['processing ignite message for subscription with payload ', ['uuid', 'payload']]
camel sample_11308

['Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);', 'Message in = exchange.getIn();', 'in.setBody(payload);', 'in.setHeader(IgniteConstants.IGNITE_MESSAGING_TOPIC, endpoint.getTopic());', 'in.setHeader(IgniteConstants.IGNITE_MESSAGING_UUID, uuid);', 'try {', 'if (LOG.isTraceEnabled()) {', '}', 'getProcessor().process(exchange);', '} catch (Exception e) {']
['exception while processing ignite message from topic s ', ['string', 'format', 'endpoint', 'gettopic', 'e']]
camel sample_11308

['protected void doStart() throws Exception {', 'super.doStart();', 'messaging.localListen(endpoint.getTopic(), predicate);']
['started ignite messaging consumer for topic ', ['endpoint', 'gettopic']]
camel sample_11308

['protected void doStop() throws Exception {', 'super.doStop();', 'messaging.stopLocalListen(endpoint.getTopic(), predicate);']
['stopped ignite messaging consumer for topic ', ['endpoint', 'gettopic']]
camel sample_11308

['entry.setValue(nestedProperty);', '} catch (NoSuchFieldException e) {', '}', '}', '}', 'CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false);', 'if (ObjectHelper.isNotEmpty(customizers)) {', 'for (ComponentCustomizer<SshComponent> customizer : customizers) {', 'boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ssh.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate( applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.ssh.customizer");', 'if (useCustomizer) {']
['configure component with customizer ', ['component', 'customizer']]
camel sample_1209

['public void someMethod() {']
['invoked somemethod ', []]
camel sample_3371

['public void process(Exchange exchange) throws Exception {', 'String remotePath = DropboxHelper.getRemotePath(configuration, exchange);', 'String newRemotePath = DropboxHelper.getNewRemotePath(configuration, exchange);', 'DropboxConfigurationValidator.validateMoveOp(remotePath, newRemotePath);', 'DropboxMoveResult result = new DropboxAPIFacade(configuration.getClient(), exchange) .move(remotePath, newRemotePath);', 'exchange.getIn().setHeader(DropboxResultHeader.MOVED_PATH.name(), result.getOldPath());', 'exchange.getIn().setBody(result.getNewPath());']
['moved from to ', ['remotepath', 'newremotepath']]
camel sample_8497

